
F4Disc-00b-Helloworld-printf-debug-ITM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008900  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008a90  08008a90  00018a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b04  08008b04  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08008b04  08008b04  00018b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b0c  08008b0c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b0c  08008b0c  00018b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b10  08008b10  00018b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008b14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00000944  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009cc  200009cc  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000157d9  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b28  00000000  00000000  000358d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011c8  00000000  00000000  00039400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d7f  00000000  00000000  0003a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002498e  00000000  00000000  0003b347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001725e  00000000  00000000  0005fcd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cce8d  00000000  00000000  00076f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005130  00000000  00000000  00143dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  00148ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a78 	.word	0x08008a78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08008a78 	.word	0x08008a78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000574:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000578:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800057c:	f003 0301 	and.w	r3, r3, #1
 8000580:	2b00      	cmp	r3, #0
 8000582:	d013      	beq.n	80005ac <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800058c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000590:	2b00      	cmp	r3, #0
 8000592:	d00b      	beq.n	80005ac <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000594:	e000      	b.n	8000598 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000596:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000598:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d0f9      	beq.n	8000596 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005a2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	b2d2      	uxtb	r2, r2
 80005aa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005ac:	687b      	ldr	r3, [r7, #4]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <_write>:
static void MX_SPI1_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b086      	sub	sp, #24
 80005be:	af00      	add	r7, sp, #0
 80005c0:	60f8      	str	r0, [r7, #12]
 80005c2:	60b9      	str	r1, [r7, #8]
 80005c4:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	int i=0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
	for(i=0 ; i<len ; i++)
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
 80005ce:	e009      	b.n	80005e4 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	1c5a      	adds	r2, r3, #1
 80005d4:	60ba      	str	r2, [r7, #8]
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ffc7 	bl	800056c <ITM_SendChar>
	for(i=0 ; i<len ; i++)
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	3301      	adds	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	dbf1      	blt.n	80005d0 <_write+0x16>
	return len;
 80005ec:	687b      	ldr	r3, [r7, #4]

}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3718      	adds	r7, #24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f000 fc63 	bl	8000ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f82f 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 f92b 	bl	8000860 <MX_GPIO_Init>
  MX_I2C1_Init();
 800060a:	f000 f895 	bl	8000738 <MX_I2C1_Init>
  MX_I2S3_Init();
 800060e:	f000 f8c1 	bl	8000794 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000612:	f000 f8ef 	bl	80007f4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000616:	f006 ffdf 	bl	80075d8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  printf ("halo dunia \n\r");
 800061a:	480e      	ldr	r0, [pc, #56]	; (8000654 <main+0x5c>)
 800061c:	f007 fd12 	bl	8008044 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000620:	f007 f800 	bl	8007624 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000624:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000628:	480b      	ldr	r0, [pc, #44]	; (8000658 <main+0x60>)
 800062a:	f000 ffaa 	bl	8001582 <HAL_GPIO_TogglePin>
//    HAL_UART_Transmit(&huart2, (uint8_t*) "hello world\n\r", sizeof("hello world\n\r")-1, HAL_MAX_DELAY);
    count++;
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	3301      	adds	r3, #1
 8000632:	80fb      	strh	r3, [r7, #6]
    printf ("halo dunia %d \n\r",count);
 8000634:	88fb      	ldrh	r3, [r7, #6]
 8000636:	4619      	mov	r1, r3
 8000638:	4808      	ldr	r0, [pc, #32]	; (800065c <main+0x64>)
 800063a:	f007 fd03 	bl	8008044 <iprintf>
    fflush(stdout);
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <main+0x68>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	4618      	mov	r0, r3
 8000646:	f007 fc39 	bl	8007ebc <fflush>
    HAL_Delay(500);
 800064a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800064e:	f000 fcad 	bl	8000fac <HAL_Delay>
    MX_USB_HOST_Process();
 8000652:	e7e5      	b.n	8000620 <main+0x28>
 8000654:	08008a90 	.word	0x08008a90
 8000658:	40020c00 	.word	0x40020c00
 800065c:	08008aa0 	.word	0x08008aa0
 8000660:	20000084 	.word	0x20000084

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	; 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2230      	movs	r2, #48	; 0x30
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f007 fd3b 	bl	80080ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	4b28      	ldr	r3, [pc, #160]	; (8000730 <SystemClock_Config+0xcc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a27      	ldr	r2, [pc, #156]	; (8000730 <SystemClock_Config+0xcc>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b25      	ldr	r3, [pc, #148]	; (8000730 <SystemClock_Config+0xcc>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <SystemClock_Config+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a21      	ldr	r2, [pc, #132]	; (8000734 <SystemClock_Config+0xd0>)
 80006ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <SystemClock_Config+0xd0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c0:	2301      	movs	r3, #1
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d4:	2308      	movs	r3, #8
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006e2:	2307      	movs	r3, #7
 80006e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	f107 0320 	add.w	r3, r7, #32
 80006ea:	4618      	mov	r0, r3
 80006ec:	f003 f952 	bl	8003994 <HAL_RCC_OscConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006f6:	f000 f9b1 	bl	8000a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2302      	movs	r3, #2
 8000700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000706:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800070c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000710:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2105      	movs	r1, #5
 8000718:	4618      	mov	r0, r3
 800071a:	f003 fbb3 	bl	8003e84 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000724:	f000 f99a 	bl	8000a5c <Error_Handler>
  }
}
 8000728:	bf00      	nop
 800072a:	3750      	adds	r7, #80	; 0x50
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_I2C1_Init+0x50>)
 800073e:	4a13      	ldr	r2, [pc, #76]	; (800078c <MX_I2C1_Init+0x54>)
 8000740:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_I2C1_Init+0x50>)
 8000744:	4a12      	ldr	r2, [pc, #72]	; (8000790 <MX_I2C1_Init+0x58>)
 8000746:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_I2C1_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_I2C1_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_I2C1_Init+0x50>)
 8000756:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800075a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <MX_I2C1_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_I2C1_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <MX_I2C1_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_I2C1_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_I2C1_Init+0x50>)
 8000776:	f002 fb29 	bl	8002dcc <HAL_I2C_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000780:	f000 f96c 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200000a4 	.word	0x200000a4
 800078c:	40005400 	.word	0x40005400
 8000790:	000186a0 	.word	0x000186a0

08000794 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_I2S3_Init+0x54>)
 800079a:	4a14      	ldr	r2, [pc, #80]	; (80007ec <MX_I2S3_Init+0x58>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007bc:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <MX_I2S3_Init+0x5c>)
 80007be:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007d4:	f002 fc3e 	bl	8003054 <HAL_I2S_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007de:	f000 f93d 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000f8 	.word	0x200000f8
 80007ec:	40003c00 	.word	0x40003c00
 80007f0:	00017700 	.word	0x00017700

080007f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_SPI1_Init+0x64>)
 80007fa:	4a18      	ldr	r2, [pc, #96]	; (800085c <MX_SPI1_Init+0x68>)
 80007fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_SPI1_Init+0x64>)
 8000800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000804:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_SPI1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_SPI1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_SPI1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_SPI1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_SPI1_Init+0x64>)
 8000820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000824:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_SPI1_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_SPI1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_SPI1_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <MX_SPI1_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_SPI1_Init+0x64>)
 8000840:	220a      	movs	r2, #10
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_SPI1_Init+0x64>)
 8000846:	f003 fe69 	bl	800451c <HAL_SPI_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000850:	f000 f904 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000140 	.word	0x20000140
 800085c:	40013000 	.word	0x40013000

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08c      	sub	sp, #48	; 0x30
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
 800087a:	4b72      	ldr	r3, [pc, #456]	; (8000a44 <MX_GPIO_Init+0x1e4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a71      	ldr	r2, [pc, #452]	; (8000a44 <MX_GPIO_Init+0x1e4>)
 8000880:	f043 0310 	orr.w	r3, r3, #16
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b6f      	ldr	r3, [pc, #444]	; (8000a44 <MX_GPIO_Init+0x1e4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0310 	and.w	r3, r3, #16
 800088e:	61bb      	str	r3, [r7, #24]
 8000890:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	4b6b      	ldr	r3, [pc, #428]	; (8000a44 <MX_GPIO_Init+0x1e4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a6a      	ldr	r2, [pc, #424]	; (8000a44 <MX_GPIO_Init+0x1e4>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b68      	ldr	r3, [pc, #416]	; (8000a44 <MX_GPIO_Init+0x1e4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b64      	ldr	r3, [pc, #400]	; (8000a44 <MX_GPIO_Init+0x1e4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a63      	ldr	r2, [pc, #396]	; (8000a44 <MX_GPIO_Init+0x1e4>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b61      	ldr	r3, [pc, #388]	; (8000a44 <MX_GPIO_Init+0x1e4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b5d      	ldr	r3, [pc, #372]	; (8000a44 <MX_GPIO_Init+0x1e4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a5c      	ldr	r2, [pc, #368]	; (8000a44 <MX_GPIO_Init+0x1e4>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b5a      	ldr	r3, [pc, #360]	; (8000a44 <MX_GPIO_Init+0x1e4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	4b56      	ldr	r3, [pc, #344]	; (8000a44 <MX_GPIO_Init+0x1e4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a55      	ldr	r2, [pc, #340]	; (8000a44 <MX_GPIO_Init+0x1e4>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b53      	ldr	r3, [pc, #332]	; (8000a44 <MX_GPIO_Init+0x1e4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b4f      	ldr	r3, [pc, #316]	; (8000a44 <MX_GPIO_Init+0x1e4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a4e      	ldr	r2, [pc, #312]	; (8000a44 <MX_GPIO_Init+0x1e4>)
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b4c      	ldr	r3, [pc, #304]	; (8000a44 <MX_GPIO_Init+0x1e4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0308 	and.w	r3, r3, #8
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2108      	movs	r1, #8
 8000922:	4849      	ldr	r0, [pc, #292]	; (8000a48 <MX_GPIO_Init+0x1e8>)
 8000924:	f000 fe14 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2101      	movs	r1, #1
 800092c:	4847      	ldr	r0, [pc, #284]	; (8000a4c <MX_GPIO_Init+0x1ec>)
 800092e:	f000 fe0f 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000932:	2200      	movs	r2, #0
 8000934:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000938:	4845      	ldr	r0, [pc, #276]	; (8000a50 <MX_GPIO_Init+0x1f0>)
 800093a:	f000 fe09 	bl	8001550 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800093e:	2308      	movs	r3, #8
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	483c      	ldr	r0, [pc, #240]	; (8000a48 <MX_GPIO_Init+0x1e8>)
 8000956:	f000 fc5f 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800095a:	2301      	movs	r3, #1
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4836      	ldr	r0, [pc, #216]	; (8000a4c <MX_GPIO_Init+0x1ec>)
 8000972:	f000 fc51 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000976:	2308      	movs	r3, #8
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000986:	2305      	movs	r3, #5
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	482e      	ldr	r0, [pc, #184]	; (8000a4c <MX_GPIO_Init+0x1ec>)
 8000992:	f000 fc41 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000996:	2301      	movs	r3, #1
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800099a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	482a      	ldr	r0, [pc, #168]	; (8000a54 <MX_GPIO_Init+0x1f4>)
 80009ac:	f000 fc34 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009b0:	2304      	movs	r3, #4
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4825      	ldr	r0, [pc, #148]	; (8000a58 <MX_GPIO_Init+0x1f8>)
 80009c4:	f000 fc28 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009da:	2305      	movs	r3, #5
 80009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	481c      	ldr	r0, [pc, #112]	; (8000a58 <MX_GPIO_Init+0x1f8>)
 80009e6:	f000 fc17 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ea:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009ee:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4813      	ldr	r0, [pc, #76]	; (8000a50 <MX_GPIO_Init+0x1f0>)
 8000a04:	f000 fc08 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a08:	2320      	movs	r3, #32
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480d      	ldr	r0, [pc, #52]	; (8000a50 <MX_GPIO_Init+0x1f0>)
 8000a1c:	f000 fbfc 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a24:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_GPIO_Init+0x1e8>)
 8000a36:	f000 fbef 	bl	8001218 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a3a:	bf00      	nop
 8000a3c:	3730      	adds	r7, #48	; 0x30
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40020800 	.word	0x40020800
 8000a50:	40020c00 	.word	0x40020c00
 8000a54:	40020000 	.word	0x40020000
 8000a58:	40020400 	.word	0x40020400

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a60:	b672      	cpsid	i
}
 8000a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <Error_Handler+0x8>
	...

08000a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aa6:	2007      	movs	r0, #7
 8000aa8:	f000 fb74 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a19      	ldr	r2, [pc, #100]	; (8000b3c <HAL_I2C_MspInit+0x84>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d12c      	bne.n	8000b34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <HAL_I2C_MspInit+0x88>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a17      	ldr	r2, [pc, #92]	; (8000b40 <HAL_I2C_MspInit+0x88>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <HAL_I2C_MspInit+0x88>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000af6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000afc:	2312      	movs	r3, #18
 8000afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	480c      	ldr	r0, [pc, #48]	; (8000b44 <HAL_I2C_MspInit+0x8c>)
 8000b14:	f000 fb80 	bl	8001218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_I2C_MspInit+0x88>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <HAL_I2C_MspInit+0x88>)
 8000b22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b26:	6413      	str	r3, [r2, #64]	; 0x40
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_I2C_MspInit+0x88>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40005400 	.word	0x40005400
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020400 	.word	0x40020400

08000b48 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	; 0x38
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a31      	ldr	r2, [pc, #196]	; (8000c38 <HAL_I2S_MspInit+0xf0>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d15a      	bne.n	8000c2e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b7c:	23c0      	movs	r3, #192	; 0xc0
 8000b7e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f003 fb87 	bl	800429c <HAL_RCCEx_PeriphCLKConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b94:	f7ff ff62 	bl	8000a5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <HAL_I2S_MspInit+0xf4>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	4a26      	ldr	r2, [pc, #152]	; (8000c3c <HAL_I2S_MspInit+0xf4>)
 8000ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba8:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <HAL_I2S_MspInit+0xf4>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <HAL_I2S_MspInit+0xf4>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	4a1f      	ldr	r2, [pc, #124]	; (8000c3c <HAL_I2S_MspInit+0xf4>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <HAL_I2S_MspInit+0xf4>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <HAL_I2S_MspInit+0xf4>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	4a18      	ldr	r2, [pc, #96]	; (8000c3c <HAL_I2S_MspInit+0xf4>)
 8000bda:	f043 0304 	orr.w	r3, r3, #4
 8000bde:	6313      	str	r3, [r2, #48]	; 0x30
 8000be0:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <HAL_I2S_MspInit+0xf4>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bec:	2310      	movs	r3, #16
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bfc:	2306      	movs	r3, #6
 8000bfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c04:	4619      	mov	r1, r3
 8000c06:	480e      	ldr	r0, [pc, #56]	; (8000c40 <HAL_I2S_MspInit+0xf8>)
 8000c08:	f000 fb06 	bl	8001218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c0c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c1e:	2306      	movs	r3, #6
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	4806      	ldr	r0, [pc, #24]	; (8000c44 <HAL_I2S_MspInit+0xfc>)
 8000c2a:	f000 faf5 	bl	8001218 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c2e:	bf00      	nop
 8000c30:	3738      	adds	r7, #56	; 0x38
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40003c00 	.word	0x40003c00
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000
 8000c44:	40020800 	.word	0x40020800

08000c48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a19      	ldr	r2, [pc, #100]	; (8000ccc <HAL_SPI_MspInit+0x84>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d12b      	bne.n	8000cc2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <HAL_SPI_MspInit+0x88>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <HAL_SPI_MspInit+0x88>)
 8000c74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <HAL_SPI_MspInit+0x88>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_SPI_MspInit+0x88>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a10      	ldr	r2, [pc, #64]	; (8000cd0 <HAL_SPI_MspInit+0x88>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_SPI_MspInit+0x88>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ca2:	23e0      	movs	r3, #224	; 0xe0
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cb2:	2305      	movs	r3, #5
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <HAL_SPI_MspInit+0x8c>)
 8000cbe:	f000 faab 	bl	8001218 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3728      	adds	r7, #40	; 0x28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40013000 	.word	0x40013000
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020000 	.word	0x40020000

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <NMI_Handler+0x4>

08000cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d24:	f000 f922 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <OTG_FS_IRQHandler+0x10>)
 8000d32:	f000 feab 	bl	8001a8c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000057c 	.word	0x2000057c

08000d40 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	e00a      	b.n	8000d68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d52:	f3af 8000 	nop.w
 8000d56:	4601      	mov	r1, r0
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	1c5a      	adds	r2, r3, #1
 8000d5c:	60ba      	str	r2, [r7, #8]
 8000d5e:	b2ca      	uxtb	r2, r1
 8000d60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	3301      	adds	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	dbf0      	blt.n	8000d52 <_read+0x12>
  }

  return len;
 8000d70:	687b      	ldr	r3, [r7, #4]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000da2:	605a      	str	r2, [r3, #4]
  return 0;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <_isatty>:

int _isatty(int file)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dec:	4a14      	ldr	r2, [pc, #80]	; (8000e40 <_sbrk+0x5c>)
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <_sbrk+0x60>)
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <_sbrk+0x64>)
 8000e02:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <_sbrk+0x68>)
 8000e04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d207      	bcs.n	8000e24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e14:	f007 f9ca 	bl	80081ac <__errno>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e22:	e009      	b.n	8000e38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <_sbrk+0x64>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <_sbrk+0x64>)
 8000e34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e36:	68fb      	ldr	r3, [r7, #12]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20020000 	.word	0x20020000
 8000e44:	00000400 	.word	0x00000400
 8000e48:	20000198 	.word	0x20000198
 8000e4c:	200009d0 	.word	0x200009d0

08000e50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <SystemInit+0x20>)
 8000e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <SystemInit+0x20>)
 8000e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e7a:	490e      	ldr	r1, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e7c:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e90:	4c0b      	ldr	r4, [pc, #44]	; (8000ec0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e9e:	f7ff ffd7 	bl	8000e50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f007 f989 	bl	80081b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea6:	f7ff fba7 	bl	80005f8 <main>
  bx  lr    
 8000eaa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000eac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000eb8:	08008b14 	.word	0x08008b14
  ldr r2, =_sbss
 8000ebc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000ec0:	200009cc 	.word	0x200009cc

08000ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC_IRQHandler>
	...

08000ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <HAL_Init+0x40>)
 8000ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_Init+0x40>)
 8000ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_Init+0x40>)
 8000eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 f94f 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 f808 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff fdb4 	bl	8000a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023c00 	.word	0x40023c00

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x54>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x58>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f967 	bl	80011fe <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00e      	b.n	8000f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f48:	f000 f92f 	bl	80011aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_InitTick+0x5c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000004 	.word	0x20000004

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	2000019c 	.word	0x2000019c

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	2000019c 	.word	0x2000019c

08000fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff ffee 	bl	8000f94 <HAL_GetTick>
 8000fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fc4:	d005      	beq.n	8000fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_Delay+0x44>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4413      	add	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fd2:	bf00      	nop
 8000fd4:	f7ff ffde 	bl	8000f94 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d8f7      	bhi.n	8000fd4 <HAL_Delay+0x28>
  {
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008

08000ff4 <__NVIC_SetPriorityGrouping>:
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001010:	4013      	ands	r3, r2
 8001012:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800101c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001026:	4a04      	ldr	r2, [pc, #16]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	60d3      	str	r3, [r2, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_GetPriorityGrouping>:
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <__NVIC_GetPriorityGrouping+0x18>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	f003 0307 	and.w	r3, r3, #7
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_EnableIRQ>:
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	2b00      	cmp	r3, #0
 8001068:	db0b      	blt.n	8001082 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	f003 021f 	and.w	r2, r3, #31
 8001070:	4907      	ldr	r1, [pc, #28]	; (8001090 <__NVIC_EnableIRQ+0x38>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	095b      	lsrs	r3, r3, #5
 8001078:	2001      	movs	r0, #1
 800107a:	fa00 f202 	lsl.w	r2, r0, r2
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000e100 	.word	0xe000e100

08001094 <__NVIC_SetPriority>:
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db0a      	blt.n	80010be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	490c      	ldr	r1, [pc, #48]	; (80010e0 <__NVIC_SetPriority+0x4c>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010bc:	e00a      	b.n	80010d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4908      	ldr	r1, [pc, #32]	; (80010e4 <__NVIC_SetPriority+0x50>)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	3b04      	subs	r3, #4
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	440b      	add	r3, r1
 80010d2:	761a      	strb	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_EncodePriority>:
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf28      	it	cs
 8001106:	2304      	movcs	r3, #4
 8001108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3304      	adds	r3, #4
 800110e:	2b06      	cmp	r3, #6
 8001110:	d902      	bls.n	8001118 <NVIC_EncodePriority+0x30>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3b03      	subs	r3, #3
 8001116:	e000      	b.n	800111a <NVIC_EncodePriority+0x32>
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43da      	mvns	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001130:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43d9      	mvns	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	4313      	orrs	r3, r2
}
 8001142:	4618      	mov	r0, r3
 8001144:	3724      	adds	r7, #36	; 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <SysTick_Config>:
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001160:	d301      	bcc.n	8001166 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001162:	2301      	movs	r3, #1
 8001164:	e00f      	b.n	8001186 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <SysTick_Config+0x40>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116e:	210f      	movs	r1, #15
 8001170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001174:	f7ff ff8e 	bl	8001094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <SysTick_Config+0x40>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SysTick_Config+0x40>)
 8001180:	2207      	movs	r2, #7
 8001182:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	e000e010 	.word	0xe000e010

08001194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff29 	bl	8000ff4 <__NVIC_SetPriorityGrouping>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
 80011b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011bc:	f7ff ff3e 	bl	800103c <__NVIC_GetPriorityGrouping>
 80011c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	6978      	ldr	r0, [r7, #20]
 80011c8:	f7ff ff8e 	bl	80010e8 <NVIC_EncodePriority>
 80011cc:	4602      	mov	r2, r0
 80011ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff5d 	bl	8001094 <__NVIC_SetPriority>
}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff31 	bl	8001058 <__NVIC_EnableIRQ>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ffa2 	bl	8001150 <SysTick_Config>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800122a:	2300      	movs	r3, #0
 800122c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	e16b      	b.n	800150c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001234:	2201      	movs	r2, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	f040 815a 	bne.w	8001506 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	2b01      	cmp	r3, #1
 800125c:	d005      	beq.n	800126a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001266:	2b02      	cmp	r3, #2
 8001268:	d130      	bne.n	80012cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2203      	movs	r2, #3
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	68da      	ldr	r2, [r3, #12]
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012a0:	2201      	movs	r2, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	091b      	lsrs	r3, r3, #4
 80012b6:	f003 0201 	and.w	r2, r3, #1
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	d017      	beq.n	8001308 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d123      	bne.n	800135c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	08da      	lsrs	r2, r3, #3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3208      	adds	r2, #8
 800131c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	220f      	movs	r2, #15
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	691a      	ldr	r2, [r3, #16]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	08da      	lsrs	r2, r3, #3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3208      	adds	r2, #8
 8001356:	69b9      	ldr	r1, [r7, #24]
 8001358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	2203      	movs	r2, #3
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0203 	and.w	r2, r3, #3
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 80b4 	beq.w	8001506 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b60      	ldr	r3, [pc, #384]	; (8001524 <HAL_GPIO_Init+0x30c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	4a5f      	ldr	r2, [pc, #380]	; (8001524 <HAL_GPIO_Init+0x30c>)
 80013a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
 80013ae:	4b5d      	ldr	r3, [pc, #372]	; (8001524 <HAL_GPIO_Init+0x30c>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ba:	4a5b      	ldr	r2, [pc, #364]	; (8001528 <HAL_GPIO_Init+0x310>)
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	3302      	adds	r3, #2
 80013c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	220f      	movs	r2, #15
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a52      	ldr	r2, [pc, #328]	; (800152c <HAL_GPIO_Init+0x314>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d02b      	beq.n	800143e <HAL_GPIO_Init+0x226>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a51      	ldr	r2, [pc, #324]	; (8001530 <HAL_GPIO_Init+0x318>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d025      	beq.n	800143a <HAL_GPIO_Init+0x222>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a50      	ldr	r2, [pc, #320]	; (8001534 <HAL_GPIO_Init+0x31c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d01f      	beq.n	8001436 <HAL_GPIO_Init+0x21e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4f      	ldr	r2, [pc, #316]	; (8001538 <HAL_GPIO_Init+0x320>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d019      	beq.n	8001432 <HAL_GPIO_Init+0x21a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4e      	ldr	r2, [pc, #312]	; (800153c <HAL_GPIO_Init+0x324>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d013      	beq.n	800142e <HAL_GPIO_Init+0x216>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4d      	ldr	r2, [pc, #308]	; (8001540 <HAL_GPIO_Init+0x328>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d00d      	beq.n	800142a <HAL_GPIO_Init+0x212>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4c      	ldr	r2, [pc, #304]	; (8001544 <HAL_GPIO_Init+0x32c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d007      	beq.n	8001426 <HAL_GPIO_Init+0x20e>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4b      	ldr	r2, [pc, #300]	; (8001548 <HAL_GPIO_Init+0x330>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d101      	bne.n	8001422 <HAL_GPIO_Init+0x20a>
 800141e:	2307      	movs	r3, #7
 8001420:	e00e      	b.n	8001440 <HAL_GPIO_Init+0x228>
 8001422:	2308      	movs	r3, #8
 8001424:	e00c      	b.n	8001440 <HAL_GPIO_Init+0x228>
 8001426:	2306      	movs	r3, #6
 8001428:	e00a      	b.n	8001440 <HAL_GPIO_Init+0x228>
 800142a:	2305      	movs	r3, #5
 800142c:	e008      	b.n	8001440 <HAL_GPIO_Init+0x228>
 800142e:	2304      	movs	r3, #4
 8001430:	e006      	b.n	8001440 <HAL_GPIO_Init+0x228>
 8001432:	2303      	movs	r3, #3
 8001434:	e004      	b.n	8001440 <HAL_GPIO_Init+0x228>
 8001436:	2302      	movs	r3, #2
 8001438:	e002      	b.n	8001440 <HAL_GPIO_Init+0x228>
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <HAL_GPIO_Init+0x228>
 800143e:	2300      	movs	r3, #0
 8001440:	69fa      	ldr	r2, [r7, #28]
 8001442:	f002 0203 	and.w	r2, r2, #3
 8001446:	0092      	lsls	r2, r2, #2
 8001448:	4093      	lsls	r3, r2
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001450:	4935      	ldr	r1, [pc, #212]	; (8001528 <HAL_GPIO_Init+0x310>)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	3302      	adds	r3, #2
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800145e:	4b3b      	ldr	r3, [pc, #236]	; (800154c <HAL_GPIO_Init+0x334>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001482:	4a32      	ldr	r2, [pc, #200]	; (800154c <HAL_GPIO_Init+0x334>)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001488:	4b30      	ldr	r3, [pc, #192]	; (800154c <HAL_GPIO_Init+0x334>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014ac:	4a27      	ldr	r2, [pc, #156]	; (800154c <HAL_GPIO_Init+0x334>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014b2:	4b26      	ldr	r3, [pc, #152]	; (800154c <HAL_GPIO_Init+0x334>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014d6:	4a1d      	ldr	r2, [pc, #116]	; (800154c <HAL_GPIO_Init+0x334>)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <HAL_GPIO_Init+0x334>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001500:	4a12      	ldr	r2, [pc, #72]	; (800154c <HAL_GPIO_Init+0x334>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	2b0f      	cmp	r3, #15
 8001510:	f67f ae90 	bls.w	8001234 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3724      	adds	r7, #36	; 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40013800 	.word	0x40013800
 800152c:	40020000 	.word	0x40020000
 8001530:	40020400 	.word	0x40020400
 8001534:	40020800 	.word	0x40020800
 8001538:	40020c00 	.word	0x40020c00
 800153c:	40021000 	.word	0x40021000
 8001540:	40021400 	.word	0x40021400
 8001544:	40021800 	.word	0x40021800
 8001548:	40021c00 	.word	0x40021c00
 800154c:	40013c00 	.word	0x40013c00

08001550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
 800155c:	4613      	mov	r3, r2
 800155e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001560:	787b      	ldrb	r3, [r7, #1]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001566:	887a      	ldrh	r2, [r7, #2]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800156c:	e003      	b.n	8001576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	041a      	lsls	r2, r3, #16
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	619a      	str	r2, [r3, #24]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001582:	b480      	push	{r7}
 8001584:	b085      	sub	sp, #20
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001594:	887a      	ldrh	r2, [r7, #2]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4013      	ands	r3, r2
 800159a:	041a      	lsls	r2, r3, #16
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43d9      	mvns	r1, r3
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	400b      	ands	r3, r1
 80015a4:	431a      	orrs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	619a      	str	r2, [r3, #24]
}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b8:	b08f      	sub	sp, #60	; 0x3c
 80015ba:	af0a      	add	r7, sp, #40	; 0x28
 80015bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e054      	b.n	8001672 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d106      	bne.n	80015e8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f006 f856 	bl	8007694 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2203      	movs	r2, #3
 80015ec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f003 f883 	bl	8004712 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	687e      	ldr	r6, [r7, #4]
 8001614:	466d      	mov	r5, sp
 8001616:	f106 0410 	add.w	r4, r6, #16
 800161a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800161c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800161e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001622:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001626:	e885 0003 	stmia.w	r5, {r0, r1}
 800162a:	1d33      	adds	r3, r6, #4
 800162c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800162e:	6838      	ldr	r0, [r7, #0]
 8001630:	f002 fffd 	bl	800462e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2101      	movs	r1, #1
 800163a:	4618      	mov	r0, r3
 800163c:	f003 f87a 	bl	8004734 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	603b      	str	r3, [r7, #0]
 8001646:	687e      	ldr	r6, [r7, #4]
 8001648:	466d      	mov	r5, sp
 800164a:	f106 0410 	add.w	r4, r6, #16
 800164e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001656:	e894 0003 	ldmia.w	r4, {r0, r1}
 800165a:	e885 0003 	stmia.w	r5, {r0, r1}
 800165e:	1d33      	adds	r3, r6, #4
 8001660:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001662:	6838      	ldr	r0, [r7, #0]
 8001664:	f003 fa02 	bl	8004a6c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800167a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800167a:	b590      	push	{r4, r7, lr}
 800167c:	b089      	sub	sp, #36	; 0x24
 800167e:	af04      	add	r7, sp, #16
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	4608      	mov	r0, r1
 8001684:	4611      	mov	r1, r2
 8001686:	461a      	mov	r2, r3
 8001688:	4603      	mov	r3, r0
 800168a:	70fb      	strb	r3, [r7, #3]
 800168c:	460b      	mov	r3, r1
 800168e:	70bb      	strb	r3, [r7, #2]
 8001690:	4613      	mov	r3, r2
 8001692:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800169a:	2b01      	cmp	r3, #1
 800169c:	d101      	bne.n	80016a2 <HAL_HCD_HC_Init+0x28>
 800169e:	2302      	movs	r3, #2
 80016a0:	e076      	b.n	8001790 <HAL_HCD_HC_Init+0x116>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80016aa:	78fb      	ldrb	r3, [r7, #3]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	212c      	movs	r1, #44	; 0x2c
 80016b0:	fb01 f303 	mul.w	r3, r1, r3
 80016b4:	4413      	add	r3, r2
 80016b6:	333d      	adds	r3, #61	; 0x3d
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	212c      	movs	r1, #44	; 0x2c
 80016c2:	fb01 f303 	mul.w	r3, r1, r3
 80016c6:	4413      	add	r3, r2
 80016c8:	3338      	adds	r3, #56	; 0x38
 80016ca:	787a      	ldrb	r2, [r7, #1]
 80016cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80016ce:	78fb      	ldrb	r3, [r7, #3]
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	212c      	movs	r1, #44	; 0x2c
 80016d4:	fb01 f303 	mul.w	r3, r1, r3
 80016d8:	4413      	add	r3, r2
 80016da:	3340      	adds	r3, #64	; 0x40
 80016dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016de:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	212c      	movs	r1, #44	; 0x2c
 80016e6:	fb01 f303 	mul.w	r3, r1, r3
 80016ea:	4413      	add	r3, r2
 80016ec:	3339      	adds	r3, #57	; 0x39
 80016ee:	78fa      	ldrb	r2, [r7, #3]
 80016f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80016f2:	78fb      	ldrb	r3, [r7, #3]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	212c      	movs	r1, #44	; 0x2c
 80016f8:	fb01 f303 	mul.w	r3, r1, r3
 80016fc:	4413      	add	r3, r2
 80016fe:	333f      	adds	r3, #63	; 0x3f
 8001700:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001704:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	78ba      	ldrb	r2, [r7, #2]
 800170a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800170e:	b2d0      	uxtb	r0, r2
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	212c      	movs	r1, #44	; 0x2c
 8001714:	fb01 f303 	mul.w	r3, r1, r3
 8001718:	4413      	add	r3, r2
 800171a:	333a      	adds	r3, #58	; 0x3a
 800171c:	4602      	mov	r2, r0
 800171e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001720:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001724:	2b00      	cmp	r3, #0
 8001726:	da09      	bge.n	800173c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	212c      	movs	r1, #44	; 0x2c
 800172e:	fb01 f303 	mul.w	r3, r1, r3
 8001732:	4413      	add	r3, r2
 8001734:	333b      	adds	r3, #59	; 0x3b
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	e008      	b.n	800174e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800173c:	78fb      	ldrb	r3, [r7, #3]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	212c      	movs	r1, #44	; 0x2c
 8001742:	fb01 f303 	mul.w	r3, r1, r3
 8001746:	4413      	add	r3, r2
 8001748:	333b      	adds	r3, #59	; 0x3b
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800174e:	78fb      	ldrb	r3, [r7, #3]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	212c      	movs	r1, #44	; 0x2c
 8001754:	fb01 f303 	mul.w	r3, r1, r3
 8001758:	4413      	add	r3, r2
 800175a:	333c      	adds	r3, #60	; 0x3c
 800175c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001760:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6818      	ldr	r0, [r3, #0]
 8001766:	787c      	ldrb	r4, [r7, #1]
 8001768:	78ba      	ldrb	r2, [r7, #2]
 800176a:	78f9      	ldrb	r1, [r7, #3]
 800176c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800176e:	9302      	str	r3, [sp, #8]
 8001770:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	f897 3020 	ldrb.w	r3, [r7, #32]
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	4623      	mov	r3, r4
 800177e:	f003 fafb 	bl	8004d78 <USB_HC_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	bd90      	pop	{r4, r7, pc}

08001798 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d101      	bne.n	80017b6 <HAL_HCD_HC_Halt+0x1e>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e00f      	b.n	80017d6 <HAL_HCD_HC_Halt+0x3e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	78fa      	ldrb	r2, [r7, #3]
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 fd4b 	bl	8005262 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	4608      	mov	r0, r1
 80017ea:	4611      	mov	r1, r2
 80017ec:	461a      	mov	r2, r3
 80017ee:	4603      	mov	r3, r0
 80017f0:	70fb      	strb	r3, [r7, #3]
 80017f2:	460b      	mov	r3, r1
 80017f4:	70bb      	strb	r3, [r7, #2]
 80017f6:	4613      	mov	r3, r2
 80017f8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	212c      	movs	r1, #44	; 0x2c
 8001800:	fb01 f303 	mul.w	r3, r1, r3
 8001804:	4413      	add	r3, r2
 8001806:	333b      	adds	r3, #59	; 0x3b
 8001808:	78ba      	ldrb	r2, [r7, #2]
 800180a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800180c:	78fb      	ldrb	r3, [r7, #3]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	212c      	movs	r1, #44	; 0x2c
 8001812:	fb01 f303 	mul.w	r3, r1, r3
 8001816:	4413      	add	r3, r2
 8001818:	333f      	adds	r3, #63	; 0x3f
 800181a:	787a      	ldrb	r2, [r7, #1]
 800181c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800181e:	7c3b      	ldrb	r3, [r7, #16]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d112      	bne.n	800184a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	212c      	movs	r1, #44	; 0x2c
 800182a:	fb01 f303 	mul.w	r3, r1, r3
 800182e:	4413      	add	r3, r2
 8001830:	3342      	adds	r3, #66	; 0x42
 8001832:	2203      	movs	r2, #3
 8001834:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	212c      	movs	r1, #44	; 0x2c
 800183c:	fb01 f303 	mul.w	r3, r1, r3
 8001840:	4413      	add	r3, r2
 8001842:	333d      	adds	r3, #61	; 0x3d
 8001844:	7f3a      	ldrb	r2, [r7, #28]
 8001846:	701a      	strb	r2, [r3, #0]
 8001848:	e008      	b.n	800185c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	212c      	movs	r1, #44	; 0x2c
 8001850:	fb01 f303 	mul.w	r3, r1, r3
 8001854:	4413      	add	r3, r2
 8001856:	3342      	adds	r3, #66	; 0x42
 8001858:	2202      	movs	r2, #2
 800185a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800185c:	787b      	ldrb	r3, [r7, #1]
 800185e:	2b03      	cmp	r3, #3
 8001860:	f200 80c6 	bhi.w	80019f0 <HAL_HCD_HC_SubmitRequest+0x210>
 8001864:	a201      	add	r2, pc, #4	; (adr r2, 800186c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186a:	bf00      	nop
 800186c:	0800187d 	.word	0x0800187d
 8001870:	080019dd 	.word	0x080019dd
 8001874:	080018e1 	.word	0x080018e1
 8001878:	0800195f 	.word	0x0800195f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800187c:	7c3b      	ldrb	r3, [r7, #16]
 800187e:	2b01      	cmp	r3, #1
 8001880:	f040 80b8 	bne.w	80019f4 <HAL_HCD_HC_SubmitRequest+0x214>
 8001884:	78bb      	ldrb	r3, [r7, #2]
 8001886:	2b00      	cmp	r3, #0
 8001888:	f040 80b4 	bne.w	80019f4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800188c:	8b3b      	ldrh	r3, [r7, #24]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d108      	bne.n	80018a4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	212c      	movs	r1, #44	; 0x2c
 8001898:	fb01 f303 	mul.w	r3, r1, r3
 800189c:	4413      	add	r3, r2
 800189e:	3355      	adds	r3, #85	; 0x55
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018a4:	78fb      	ldrb	r3, [r7, #3]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	212c      	movs	r1, #44	; 0x2c
 80018aa:	fb01 f303 	mul.w	r3, r1, r3
 80018ae:	4413      	add	r3, r2
 80018b0:	3355      	adds	r3, #85	; 0x55
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d109      	bne.n	80018cc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	212c      	movs	r1, #44	; 0x2c
 80018be:	fb01 f303 	mul.w	r3, r1, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	3342      	adds	r3, #66	; 0x42
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018ca:	e093      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	212c      	movs	r1, #44	; 0x2c
 80018d2:	fb01 f303 	mul.w	r3, r1, r3
 80018d6:	4413      	add	r3, r2
 80018d8:	3342      	adds	r3, #66	; 0x42
 80018da:	2202      	movs	r2, #2
 80018dc:	701a      	strb	r2, [r3, #0]
      break;
 80018de:	e089      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018e0:	78bb      	ldrb	r3, [r7, #2]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d11d      	bne.n	8001922 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	212c      	movs	r1, #44	; 0x2c
 80018ec:	fb01 f303 	mul.w	r3, r1, r3
 80018f0:	4413      	add	r3, r2
 80018f2:	3355      	adds	r3, #85	; 0x55
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d109      	bne.n	800190e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	212c      	movs	r1, #44	; 0x2c
 8001900:	fb01 f303 	mul.w	r3, r1, r3
 8001904:	4413      	add	r3, r2
 8001906:	3342      	adds	r3, #66	; 0x42
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800190c:	e073      	b.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	212c      	movs	r1, #44	; 0x2c
 8001914:	fb01 f303 	mul.w	r3, r1, r3
 8001918:	4413      	add	r3, r2
 800191a:	3342      	adds	r3, #66	; 0x42
 800191c:	2202      	movs	r2, #2
 800191e:	701a      	strb	r2, [r3, #0]
      break;
 8001920:	e069      	b.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	212c      	movs	r1, #44	; 0x2c
 8001928:	fb01 f303 	mul.w	r3, r1, r3
 800192c:	4413      	add	r3, r2
 800192e:	3354      	adds	r3, #84	; 0x54
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d109      	bne.n	800194a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	212c      	movs	r1, #44	; 0x2c
 800193c:	fb01 f303 	mul.w	r3, r1, r3
 8001940:	4413      	add	r3, r2
 8001942:	3342      	adds	r3, #66	; 0x42
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
      break;
 8001948:	e055      	b.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	212c      	movs	r1, #44	; 0x2c
 8001950:	fb01 f303 	mul.w	r3, r1, r3
 8001954:	4413      	add	r3, r2
 8001956:	3342      	adds	r3, #66	; 0x42
 8001958:	2202      	movs	r2, #2
 800195a:	701a      	strb	r2, [r3, #0]
      break;
 800195c:	e04b      	b.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800195e:	78bb      	ldrb	r3, [r7, #2]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d11d      	bne.n	80019a0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	212c      	movs	r1, #44	; 0x2c
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	4413      	add	r3, r2
 8001970:	3355      	adds	r3, #85	; 0x55
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d109      	bne.n	800198c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	212c      	movs	r1, #44	; 0x2c
 800197e:	fb01 f303 	mul.w	r3, r1, r3
 8001982:	4413      	add	r3, r2
 8001984:	3342      	adds	r3, #66	; 0x42
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800198a:	e034      	b.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	212c      	movs	r1, #44	; 0x2c
 8001992:	fb01 f303 	mul.w	r3, r1, r3
 8001996:	4413      	add	r3, r2
 8001998:	3342      	adds	r3, #66	; 0x42
 800199a:	2202      	movs	r2, #2
 800199c:	701a      	strb	r2, [r3, #0]
      break;
 800199e:	e02a      	b.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	212c      	movs	r1, #44	; 0x2c
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	3354      	adds	r3, #84	; 0x54
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d109      	bne.n	80019c8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	212c      	movs	r1, #44	; 0x2c
 80019ba:	fb01 f303 	mul.w	r3, r1, r3
 80019be:	4413      	add	r3, r2
 80019c0:	3342      	adds	r3, #66	; 0x42
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
      break;
 80019c6:	e016      	b.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	212c      	movs	r1, #44	; 0x2c
 80019ce:	fb01 f303 	mul.w	r3, r1, r3
 80019d2:	4413      	add	r3, r2
 80019d4:	3342      	adds	r3, #66	; 0x42
 80019d6:	2202      	movs	r2, #2
 80019d8:	701a      	strb	r2, [r3, #0]
      break;
 80019da:	e00c      	b.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	212c      	movs	r1, #44	; 0x2c
 80019e2:	fb01 f303 	mul.w	r3, r1, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	3342      	adds	r3, #66	; 0x42
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
      break;
 80019ee:	e002      	b.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80019f0:	bf00      	nop
 80019f2:	e000      	b.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80019f4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	212c      	movs	r1, #44	; 0x2c
 80019fc:	fb01 f303 	mul.w	r3, r1, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	3344      	adds	r3, #68	; 0x44
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	8b3a      	ldrh	r2, [r7, #24]
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	202c      	movs	r0, #44	; 0x2c
 8001a10:	fb00 f303 	mul.w	r3, r0, r3
 8001a14:	440b      	add	r3, r1
 8001a16:	334c      	adds	r3, #76	; 0x4c
 8001a18:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	212c      	movs	r1, #44	; 0x2c
 8001a20:	fb01 f303 	mul.w	r3, r1, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	3360      	adds	r3, #96	; 0x60
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	212c      	movs	r1, #44	; 0x2c
 8001a32:	fb01 f303 	mul.w	r3, r1, r3
 8001a36:	4413      	add	r3, r2
 8001a38:	3350      	adds	r3, #80	; 0x50
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a3e:	78fb      	ldrb	r3, [r7, #3]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	212c      	movs	r1, #44	; 0x2c
 8001a44:	fb01 f303 	mul.w	r3, r1, r3
 8001a48:	4413      	add	r3, r2
 8001a4a:	3339      	adds	r3, #57	; 0x39
 8001a4c:	78fa      	ldrb	r2, [r7, #3]
 8001a4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	212c      	movs	r1, #44	; 0x2c
 8001a56:	fb01 f303 	mul.w	r3, r1, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3361      	adds	r3, #97	; 0x61
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6818      	ldr	r0, [r3, #0]
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	222c      	movs	r2, #44	; 0x2c
 8001a6a:	fb02 f303 	mul.w	r3, r2, r3
 8001a6e:	3338      	adds	r3, #56	; 0x38
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	18d1      	adds	r1, r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f003 fa9e 	bl	8004fbc <USB_HC_StartXfer>
 8001a80:	4603      	mov	r3, r0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop

08001a8c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 ff9f 	bl	80049e6 <USB_GetMode>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	f040 80f6 	bne.w	8001c9c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f002 ff83 	bl	80049c0 <USB_ReadInterrupts>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 80ec 	beq.w	8001c9a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f002 ff7a 	bl	80049c0 <USB_ReadInterrupts>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ad6:	d104      	bne.n	8001ae2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ae0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f002 ff6a 	bl	80049c0 <USB_ReadInterrupts>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001af6:	d104      	bne.n	8001b02 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f002 ff5a 	bl	80049c0 <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b16:	d104      	bne.n	8001b22 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f002 ff4a 	bl	80049c0 <USB_ReadInterrupts>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d103      	bne.n	8001b3e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 ff3c 	bl	80049c0 <USB_ReadInterrupts>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b52:	d11c      	bne.n	8001b8e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b5c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10f      	bne.n	8001b8e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b6e:	2110      	movs	r1, #16
 8001b70:	6938      	ldr	r0, [r7, #16]
 8001b72:	f002 fe2b 	bl	80047cc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b76:	6938      	ldr	r0, [r7, #16]
 8001b78:	f002 fe5c 	bl	8004834 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2101      	movs	r1, #1
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 f832 	bl	8004bec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f005 fe01 	bl	8007790 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f002 ff14 	bl	80049c0 <USB_ReadInterrupts>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba2:	d102      	bne.n	8001baa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f001 f89e 	bl	8002ce6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f002 ff06 	bl	80049c0 <USB_ReadInterrupts>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d106      	bne.n	8001bcc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f005 fdca 	bl	8007758 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2208      	movs	r2, #8
 8001bca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f002 fef5 	bl	80049c0 <USB_ReadInterrupts>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	2b10      	cmp	r3, #16
 8001bde:	d101      	bne.n	8001be4 <HAL_HCD_IRQHandler+0x158>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <HAL_HCD_IRQHandler+0x15a>
 8001be4:	2300      	movs	r3, #0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d012      	beq.n	8001c10 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	699a      	ldr	r2, [r3, #24]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0210 	bic.w	r2, r2, #16
 8001bf8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 ffa1 	bl	8002b42 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	699a      	ldr	r2, [r3, #24]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0210 	orr.w	r2, r2, #16
 8001c0e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f002 fed3 	bl	80049c0 <USB_ReadInterrupts>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c24:	d13a      	bne.n	8001c9c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 fb08 	bl	8005240 <USB_HC_ReadInterrupt>
 8001c30:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	e025      	b.n	8001c84 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	fa22 f303 	lsr.w	r3, r2, r3
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d018      	beq.n	8001c7e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	015a      	lsls	r2, r3, #5
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4413      	add	r3, r2
 8001c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c62:	d106      	bne.n	8001c72 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	4619      	mov	r1, r3
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f8ab 	bl	8001dc6 <HCD_HC_IN_IRQHandler>
 8001c70:	e005      	b.n	8001c7e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	4619      	mov	r1, r3
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 fbf9 	bl	8002470 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	3301      	adds	r3, #1
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d3d4      	bcc.n	8001c38 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c96:	615a      	str	r2, [r3, #20]
 8001c98:	e000      	b.n	8001c9c <HAL_HCD_IRQHandler+0x210>
      return;
 8001c9a:	bf00      	nop
    }
  }
}
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_HCD_Start+0x16>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e013      	b.n	8001ce0 <HAL_HCD_Start+0x3e>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f002 fff4 	bl	8004cb4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f002 fd0d 	bl	80046f0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_HCD_Stop+0x16>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e00d      	b.n	8001d1a <HAL_HCD_Stop+0x32>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f003 fbe2 	bl	80054d4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f002 ff96 	bl	8004c60 <USB_ResetPort>
 8001d34:	4603      	mov	r3, r0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	460b      	mov	r3, r1
 8001d48:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	212c      	movs	r1, #44	; 0x2c
 8001d50:	fb01 f303 	mul.w	r3, r1, r3
 8001d54:	4413      	add	r3, r2
 8001d56:	3360      	adds	r3, #96	; 0x60
 8001d58:	781b      	ldrb	r3, [r3, #0]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	212c      	movs	r1, #44	; 0x2c
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3350      	adds	r3, #80	; 0x50
 8001d80:	681b      	ldr	r3, [r3, #0]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f002 ffda 	bl	8004d54 <USB_GetCurrentFrame>
 8001da0:	4603      	mov	r3, r0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f002 ffb5 	bl	8004d26 <USB_GetHostSpeed>
 8001dbc:	4603      	mov	r3, r0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	015a      	lsls	r2, r3, #5
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4413      	add	r3, r2
 8001de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d11a      	bne.n	8001e2c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	015a      	lsls	r2, r3, #5
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e02:	461a      	mov	r2, r3
 8001e04:	2304      	movs	r3, #4
 8001e06:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	212c      	movs	r1, #44	; 0x2c
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	4413      	add	r3, r2
 8001e14:	3361      	adds	r3, #97	; 0x61
 8001e16:	2206      	movs	r2, #6
 8001e18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	4611      	mov	r1, r2
 8001e24:	4618      	mov	r0, r3
 8001e26:	f003 fa1c 	bl	8005262 <USB_HC_Halt>
 8001e2a:	e0af      	b.n	8001f8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	015a      	lsls	r2, r3, #5
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4413      	add	r3, r2
 8001e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e42:	d11b      	bne.n	8001e7c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	015a      	lsls	r2, r3, #5
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e50:	461a      	mov	r2, r3
 8001e52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e56:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	212c      	movs	r1, #44	; 0x2c
 8001e5e:	fb01 f303 	mul.w	r3, r1, r3
 8001e62:	4413      	add	r3, r2
 8001e64:	3361      	adds	r3, #97	; 0x61
 8001e66:	2207      	movs	r2, #7
 8001e68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f003 f9f4 	bl	8005262 <USB_HC_Halt>
 8001e7a:	e087      	b.n	8001f8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 0320 	and.w	r3, r3, #32
 8001e8e:	2b20      	cmp	r3, #32
 8001e90:	d109      	bne.n	8001ea6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	015a      	lsls	r2, r3, #5
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	2320      	movs	r3, #32
 8001ea2:	6093      	str	r3, [r2, #8]
 8001ea4:	e072      	b.n	8001f8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	015a      	lsls	r2, r3, #5
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d11a      	bne.n	8001ef2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	015a      	lsls	r2, r3, #5
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec8:	461a      	mov	r2, r3
 8001eca:	2308      	movs	r3, #8
 8001ecc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	212c      	movs	r1, #44	; 0x2c
 8001ed4:	fb01 f303 	mul.w	r3, r1, r3
 8001ed8:	4413      	add	r3, r2
 8001eda:	3361      	adds	r3, #97	; 0x61
 8001edc:	2205      	movs	r2, #5
 8001ede:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f003 f9b9 	bl	8005262 <USB_HC_Halt>
 8001ef0:	e04c      	b.n	8001f8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	015a      	lsls	r2, r3, #5
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f08:	d11b      	bne.n	8001f42 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	015a      	lsls	r2, r3, #5
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f16:	461a      	mov	r2, r3
 8001f18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	212c      	movs	r1, #44	; 0x2c
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	4413      	add	r3, r2
 8001f2a:	3361      	adds	r3, #97	; 0x61
 8001f2c:	2208      	movs	r2, #8
 8001f2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f003 f991 	bl	8005262 <USB_HC_Halt>
 8001f40:	e024      	b.n	8001f8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f54:	2b80      	cmp	r3, #128	; 0x80
 8001f56:	d119      	bne.n	8001f8c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	015a      	lsls	r2, r3, #5
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f64:	461a      	mov	r2, r3
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	212c      	movs	r1, #44	; 0x2c
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	3361      	adds	r3, #97	; 0x61
 8001f78:	2206      	movs	r2, #6
 8001f7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f003 f96b 	bl	8005262 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa2:	d112      	bne.n	8001fca <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f003 f957 	bl	8005262 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fc6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001fc8:	e24e      	b.n	8002468 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	015a      	lsls	r2, r3, #5
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	f040 80df 	bne.w	80021a0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d019      	beq.n	800201e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	212c      	movs	r1, #44	; 0x2c
 8001ff0:	fb01 f303 	mul.w	r3, r1, r3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3348      	adds	r3, #72	; 0x48
 8001ff8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	0159      	lsls	r1, r3, #5
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	440b      	add	r3, r1
 8002002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800200c:	1ad2      	subs	r2, r2, r3
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	202c      	movs	r0, #44	; 0x2c
 8002014:	fb00 f303 	mul.w	r3, r0, r3
 8002018:	440b      	add	r3, r1
 800201a:	3350      	adds	r3, #80	; 0x50
 800201c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	212c      	movs	r1, #44	; 0x2c
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	4413      	add	r3, r2
 800202a:	3361      	adds	r3, #97	; 0x61
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	212c      	movs	r1, #44	; 0x2c
 8002036:	fb01 f303 	mul.w	r3, r1, r3
 800203a:	4413      	add	r3, r2
 800203c:	335c      	adds	r3, #92	; 0x5c
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	015a      	lsls	r2, r3, #5
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4413      	add	r3, r2
 800204a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204e:	461a      	mov	r2, r3
 8002050:	2301      	movs	r3, #1
 8002052:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	212c      	movs	r1, #44	; 0x2c
 800205a:	fb01 f303 	mul.w	r3, r1, r3
 800205e:	4413      	add	r3, r2
 8002060:	333f      	adds	r3, #63	; 0x3f
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d009      	beq.n	800207c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	212c      	movs	r1, #44	; 0x2c
 800206e:	fb01 f303 	mul.w	r3, r1, r3
 8002072:	4413      	add	r3, r2
 8002074:	333f      	adds	r3, #63	; 0x3f
 8002076:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002078:	2b02      	cmp	r3, #2
 800207a:	d111      	bne.n	80020a0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	4611      	mov	r1, r2
 8002086:	4618      	mov	r0, r3
 8002088:	f003 f8eb 	bl	8005262 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002098:	461a      	mov	r2, r3
 800209a:	2310      	movs	r3, #16
 800209c:	6093      	str	r3, [r2, #8]
 800209e:	e03a      	b.n	8002116 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	212c      	movs	r1, #44	; 0x2c
 80020a6:	fb01 f303 	mul.w	r3, r1, r3
 80020aa:	4413      	add	r3, r2
 80020ac:	333f      	adds	r3, #63	; 0x3f
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d009      	beq.n	80020c8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	212c      	movs	r1, #44	; 0x2c
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	4413      	add	r3, r2
 80020c0:	333f      	adds	r3, #63	; 0x3f
 80020c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d126      	bne.n	8002116 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	0151      	lsls	r1, r2, #5
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	440a      	add	r2, r1
 80020de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020e6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	212c      	movs	r1, #44	; 0x2c
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	4413      	add	r3, r2
 80020f4:	3360      	adds	r3, #96	; 0x60
 80020f6:	2201      	movs	r2, #1
 80020f8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	b2d9      	uxtb	r1, r3
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	202c      	movs	r0, #44	; 0x2c
 8002104:	fb00 f303 	mul.w	r3, r0, r3
 8002108:	4413      	add	r3, r2
 800210a:	3360      	adds	r3, #96	; 0x60
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f005 fb4b 	bl	80077ac <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d12b      	bne.n	8002176 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	212c      	movs	r1, #44	; 0x2c
 8002124:	fb01 f303 	mul.w	r3, r1, r3
 8002128:	4413      	add	r3, r2
 800212a:	3348      	adds	r3, #72	; 0x48
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	202c      	movs	r0, #44	; 0x2c
 8002134:	fb00 f202 	mul.w	r2, r0, r2
 8002138:	440a      	add	r2, r1
 800213a:	3240      	adds	r2, #64	; 0x40
 800213c:	8812      	ldrh	r2, [r2, #0]
 800213e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 818e 	beq.w	8002468 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	212c      	movs	r1, #44	; 0x2c
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	4413      	add	r3, r2
 8002158:	3354      	adds	r3, #84	; 0x54
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	f083 0301 	eor.w	r3, r3, #1
 8002160:	b2d8      	uxtb	r0, r3
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	212c      	movs	r1, #44	; 0x2c
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	4413      	add	r3, r2
 800216e:	3354      	adds	r3, #84	; 0x54
 8002170:	4602      	mov	r2, r0
 8002172:	701a      	strb	r2, [r3, #0]
}
 8002174:	e178      	b.n	8002468 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	212c      	movs	r1, #44	; 0x2c
 800217c:	fb01 f303 	mul.w	r3, r1, r3
 8002180:	4413      	add	r3, r2
 8002182:	3354      	adds	r3, #84	; 0x54
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	f083 0301 	eor.w	r3, r3, #1
 800218a:	b2d8      	uxtb	r0, r3
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	212c      	movs	r1, #44	; 0x2c
 8002192:	fb01 f303 	mul.w	r3, r1, r3
 8002196:	4413      	add	r3, r2
 8002198:	3354      	adds	r3, #84	; 0x54
 800219a:	4602      	mov	r2, r0
 800219c:	701a      	strb	r2, [r3, #0]
}
 800219e:	e163      	b.n	8002468 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	015a      	lsls	r2, r3, #5
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	f040 80f6 	bne.w	80023a4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	212c      	movs	r1, #44	; 0x2c
 80021be:	fb01 f303 	mul.w	r3, r1, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	3361      	adds	r3, #97	; 0x61
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d109      	bne.n	80021e0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	212c      	movs	r1, #44	; 0x2c
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	4413      	add	r3, r2
 80021d8:	3360      	adds	r3, #96	; 0x60
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
 80021de:	e0c9      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3361      	adds	r3, #97	; 0x61
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	d109      	bne.n	8002208 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	212c      	movs	r1, #44	; 0x2c
 80021fa:	fb01 f303 	mul.w	r3, r1, r3
 80021fe:	4413      	add	r3, r2
 8002200:	3360      	adds	r3, #96	; 0x60
 8002202:	2205      	movs	r2, #5
 8002204:	701a      	strb	r2, [r3, #0]
 8002206:	e0b5      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	212c      	movs	r1, #44	; 0x2c
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	4413      	add	r3, r2
 8002214:	3361      	adds	r3, #97	; 0x61
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b06      	cmp	r3, #6
 800221a:	d009      	beq.n	8002230 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	212c      	movs	r1, #44	; 0x2c
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	4413      	add	r3, r2
 8002228:	3361      	adds	r3, #97	; 0x61
 800222a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800222c:	2b08      	cmp	r3, #8
 800222e:	d150      	bne.n	80022d2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	212c      	movs	r1, #44	; 0x2c
 8002236:	fb01 f303 	mul.w	r3, r1, r3
 800223a:	4413      	add	r3, r2
 800223c:	335c      	adds	r3, #92	; 0x5c
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	202c      	movs	r0, #44	; 0x2c
 8002248:	fb00 f303 	mul.w	r3, r0, r3
 800224c:	440b      	add	r3, r1
 800224e:	335c      	adds	r3, #92	; 0x5c
 8002250:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	212c      	movs	r1, #44	; 0x2c
 8002258:	fb01 f303 	mul.w	r3, r1, r3
 800225c:	4413      	add	r3, r2
 800225e:	335c      	adds	r3, #92	; 0x5c
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d912      	bls.n	800228c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	212c      	movs	r1, #44	; 0x2c
 800226c:	fb01 f303 	mul.w	r3, r1, r3
 8002270:	4413      	add	r3, r2
 8002272:	335c      	adds	r3, #92	; 0x5c
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	212c      	movs	r1, #44	; 0x2c
 800227e:	fb01 f303 	mul.w	r3, r1, r3
 8002282:	4413      	add	r3, r2
 8002284:	3360      	adds	r3, #96	; 0x60
 8002286:	2204      	movs	r2, #4
 8002288:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800228a:	e073      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	212c      	movs	r1, #44	; 0x2c
 8002292:	fb01 f303 	mul.w	r3, r1, r3
 8002296:	4413      	add	r3, r2
 8002298:	3360      	adds	r3, #96	; 0x60
 800229a:	2202      	movs	r2, #2
 800229c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022b4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022bc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ca:	461a      	mov	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022d0:	e050      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	212c      	movs	r1, #44	; 0x2c
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	4413      	add	r3, r2
 80022de:	3361      	adds	r3, #97	; 0x61
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d122      	bne.n	800232c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	212c      	movs	r1, #44	; 0x2c
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
 80022f0:	4413      	add	r3, r2
 80022f2:	3360      	adds	r3, #96	; 0x60
 80022f4:	2202      	movs	r2, #2
 80022f6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800230e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002316:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002324:	461a      	mov	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	e023      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	212c      	movs	r1, #44	; 0x2c
 8002332:	fb01 f303 	mul.w	r3, r1, r3
 8002336:	4413      	add	r3, r2
 8002338:	3361      	adds	r3, #97	; 0x61
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b07      	cmp	r3, #7
 800233e:	d119      	bne.n	8002374 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	212c      	movs	r1, #44	; 0x2c
 8002346:	fb01 f303 	mul.w	r3, r1, r3
 800234a:	4413      	add	r3, r2
 800234c:	335c      	adds	r3, #92	; 0x5c
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	202c      	movs	r0, #44	; 0x2c
 8002358:	fb00 f303 	mul.w	r3, r0, r3
 800235c:	440b      	add	r3, r1
 800235e:	335c      	adds	r3, #92	; 0x5c
 8002360:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	212c      	movs	r1, #44	; 0x2c
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	4413      	add	r3, r2
 800236e:	3360      	adds	r3, #96	; 0x60
 8002370:	2204      	movs	r2, #4
 8002372:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	461a      	mov	r2, r3
 8002382:	2302      	movs	r3, #2
 8002384:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	b2d9      	uxtb	r1, r3
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	202c      	movs	r0, #44	; 0x2c
 8002390:	fb00 f303 	mul.w	r3, r0, r3
 8002394:	4413      	add	r3, r2
 8002396:	3360      	adds	r3, #96	; 0x60
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f005 fa05 	bl	80077ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80023a2:	e061      	b.n	8002468 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b10      	cmp	r3, #16
 80023b8:	d156      	bne.n	8002468 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	212c      	movs	r1, #44	; 0x2c
 80023c0:	fb01 f303 	mul.w	r3, r1, r3
 80023c4:	4413      	add	r3, r2
 80023c6:	333f      	adds	r3, #63	; 0x3f
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d111      	bne.n	80023f2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	212c      	movs	r1, #44	; 0x2c
 80023d4:	fb01 f303 	mul.w	r3, r1, r3
 80023d8:	4413      	add	r3, r2
 80023da:	335c      	adds	r3, #92	; 0x5c
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	4611      	mov	r1, r2
 80023ea:	4618      	mov	r0, r3
 80023ec:	f002 ff39 	bl	8005262 <USB_HC_Halt>
 80023f0:	e031      	b.n	8002456 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	212c      	movs	r1, #44	; 0x2c
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	333f      	adds	r3, #63	; 0x3f
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	212c      	movs	r1, #44	; 0x2c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	333f      	adds	r3, #63	; 0x3f
 8002414:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002416:	2b02      	cmp	r3, #2
 8002418:	d11d      	bne.n	8002456 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	212c      	movs	r1, #44	; 0x2c
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	4413      	add	r3, r2
 8002426:	335c      	adds	r3, #92	; 0x5c
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d110      	bne.n	8002456 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	212c      	movs	r1, #44	; 0x2c
 800243a:	fb01 f303 	mul.w	r3, r1, r3
 800243e:	4413      	add	r3, r2
 8002440:	3361      	adds	r3, #97	; 0x61
 8002442:	2203      	movs	r2, #3
 8002444:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	4611      	mov	r1, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f002 ff06 	bl	8005262 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4413      	add	r3, r2
 800245e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002462:	461a      	mov	r2, r3
 8002464:	2310      	movs	r3, #16
 8002466:	6093      	str	r3, [r2, #8]
}
 8002468:	bf00      	nop
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4413      	add	r3, r2
 8002492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b04      	cmp	r3, #4
 800249e:	d11a      	bne.n	80024d6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ac:	461a      	mov	r2, r3
 80024ae:	2304      	movs	r3, #4
 80024b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	212c      	movs	r1, #44	; 0x2c
 80024b8:	fb01 f303 	mul.w	r3, r1, r3
 80024bc:	4413      	add	r3, r2
 80024be:	3361      	adds	r3, #97	; 0x61
 80024c0:	2206      	movs	r2, #6
 80024c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	4611      	mov	r1, r2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f002 fec7 	bl	8005262 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80024d4:	e331      	b.n	8002b3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0320 	and.w	r3, r3, #32
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	d12e      	bne.n	800254a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f8:	461a      	mov	r2, r3
 80024fa:	2320      	movs	r3, #32
 80024fc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	212c      	movs	r1, #44	; 0x2c
 8002504:	fb01 f303 	mul.w	r3, r1, r3
 8002508:	4413      	add	r3, r2
 800250a:	333d      	adds	r3, #61	; 0x3d
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b01      	cmp	r3, #1
 8002510:	f040 8313 	bne.w	8002b3a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	212c      	movs	r1, #44	; 0x2c
 800251a:	fb01 f303 	mul.w	r3, r1, r3
 800251e:	4413      	add	r3, r2
 8002520:	333d      	adds	r3, #61	; 0x3d
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	212c      	movs	r1, #44	; 0x2c
 800252c:	fb01 f303 	mul.w	r3, r1, r3
 8002530:	4413      	add	r3, r2
 8002532:	3360      	adds	r3, #96	; 0x60
 8002534:	2202      	movs	r2, #2
 8002536:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	4611      	mov	r1, r2
 8002542:	4618      	mov	r0, r3
 8002544:	f002 fe8d 	bl	8005262 <USB_HC_Halt>
}
 8002548:	e2f7      	b.n	8002b3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	015a      	lsls	r2, r3, #5
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	4413      	add	r3, r2
 8002552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800255c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002560:	d112      	bne.n	8002588 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	4413      	add	r3, r2
 800256a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256e:	461a      	mov	r2, r3
 8002570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002574:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f002 fe6e 	bl	8005262 <USB_HC_Halt>
}
 8002586:	e2d8      	b.n	8002b3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b01      	cmp	r3, #1
 800259c:	d140      	bne.n	8002620 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	212c      	movs	r1, #44	; 0x2c
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	335c      	adds	r3, #92	; 0x5c
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c2:	2b40      	cmp	r3, #64	; 0x40
 80025c4:	d111      	bne.n	80025ea <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	333d      	adds	r3, #61	; 0x3d
 80025d4:	2201      	movs	r2, #1
 80025d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e4:	461a      	mov	r2, r3
 80025e6:	2340      	movs	r3, #64	; 0x40
 80025e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f6:	461a      	mov	r2, r3
 80025f8:	2301      	movs	r3, #1
 80025fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	212c      	movs	r1, #44	; 0x2c
 8002602:	fb01 f303 	mul.w	r3, r1, r3
 8002606:	4413      	add	r3, r2
 8002608:	3361      	adds	r3, #97	; 0x61
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	4611      	mov	r1, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f002 fe22 	bl	8005262 <USB_HC_Halt>
}
 800261e:	e28c      	b.n	8002b3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002632:	2b40      	cmp	r3, #64	; 0x40
 8002634:	d12c      	bne.n	8002690 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	212c      	movs	r1, #44	; 0x2c
 800263c:	fb01 f303 	mul.w	r3, r1, r3
 8002640:	4413      	add	r3, r2
 8002642:	3361      	adds	r3, #97	; 0x61
 8002644:	2204      	movs	r2, #4
 8002646:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	212c      	movs	r1, #44	; 0x2c
 800264e:	fb01 f303 	mul.w	r3, r1, r3
 8002652:	4413      	add	r3, r2
 8002654:	333d      	adds	r3, #61	; 0x3d
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	212c      	movs	r1, #44	; 0x2c
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
 8002666:	335c      	adds	r3, #92	; 0x5c
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f002 fdf3 	bl	8005262 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	4413      	add	r3, r2
 8002684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002688:	461a      	mov	r2, r3
 800268a:	2340      	movs	r3, #64	; 0x40
 800268c:	6093      	str	r3, [r2, #8]
}
 800268e:	e254      	b.n	8002b3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	015a      	lsls	r2, r3, #5
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	4413      	add	r3, r2
 8002698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d11a      	bne.n	80026dc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b2:	461a      	mov	r2, r3
 80026b4:	2308      	movs	r3, #8
 80026b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	212c      	movs	r1, #44	; 0x2c
 80026be:	fb01 f303 	mul.w	r3, r1, r3
 80026c2:	4413      	add	r3, r2
 80026c4:	3361      	adds	r3, #97	; 0x61
 80026c6:	2205      	movs	r2, #5
 80026c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f002 fdc4 	bl	8005262 <USB_HC_Halt>
}
 80026da:	e22e      	b.n	8002b3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b10      	cmp	r3, #16
 80026f0:	d140      	bne.n	8002774 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	212c      	movs	r1, #44	; 0x2c
 80026f8:	fb01 f303 	mul.w	r3, r1, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	335c      	adds	r3, #92	; 0x5c
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	212c      	movs	r1, #44	; 0x2c
 800270a:	fb01 f303 	mul.w	r3, r1, r3
 800270e:	4413      	add	r3, r2
 8002710:	3361      	adds	r3, #97	; 0x61
 8002712:	2203      	movs	r2, #3
 8002714:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	212c      	movs	r1, #44	; 0x2c
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	4413      	add	r3, r2
 8002722:	333d      	adds	r3, #61	; 0x3d
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d112      	bne.n	8002750 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	212c      	movs	r1, #44	; 0x2c
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	333c      	adds	r3, #60	; 0x3c
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d108      	bne.n	8002750 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	333d      	adds	r3, #61	; 0x3d
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	4611      	mov	r1, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f002 fd81 	bl	8005262 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276c:	461a      	mov	r2, r3
 800276e:	2310      	movs	r3, #16
 8002770:	6093      	str	r3, [r2, #8]
}
 8002772:	e1e2      	b.n	8002b3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002786:	2b80      	cmp	r3, #128	; 0x80
 8002788:	d164      	bne.n	8002854 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d111      	bne.n	80027b6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	212c      	movs	r1, #44	; 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	3361      	adds	r3, #97	; 0x61
 80027a0:	2206      	movs	r2, #6
 80027a2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f002 fd57 	bl	8005262 <USB_HC_Halt>
 80027b4:	e044      	b.n	8002840 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	212c      	movs	r1, #44	; 0x2c
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	335c      	adds	r3, #92	; 0x5c
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	202c      	movs	r0, #44	; 0x2c
 80027ce:	fb00 f303 	mul.w	r3, r0, r3
 80027d2:	440b      	add	r3, r1
 80027d4:	335c      	adds	r3, #92	; 0x5c
 80027d6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	212c      	movs	r1, #44	; 0x2c
 80027de:	fb01 f303 	mul.w	r3, r1, r3
 80027e2:	4413      	add	r3, r2
 80027e4:	335c      	adds	r3, #92	; 0x5c
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d920      	bls.n	800282e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	212c      	movs	r1, #44	; 0x2c
 80027f2:	fb01 f303 	mul.w	r3, r1, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	335c      	adds	r3, #92	; 0x5c
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	212c      	movs	r1, #44	; 0x2c
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	3360      	adds	r3, #96	; 0x60
 800280c:	2204      	movs	r2, #4
 800280e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	b2d9      	uxtb	r1, r3
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	202c      	movs	r0, #44	; 0x2c
 800281a:	fb00 f303 	mul.w	r3, r0, r3
 800281e:	4413      	add	r3, r2
 8002820:	3360      	adds	r3, #96	; 0x60
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f004 ffc0 	bl	80077ac <HAL_HCD_HC_NotifyURBChange_Callback>
 800282c:	e008      	b.n	8002840 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	212c      	movs	r1, #44	; 0x2c
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	3360      	adds	r3, #96	; 0x60
 800283c:	2202      	movs	r2, #2
 800283e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	4413      	add	r3, r2
 8002848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284c:	461a      	mov	r2, r3
 800284e:	2380      	movs	r3, #128	; 0x80
 8002850:	6093      	str	r3, [r2, #8]
}
 8002852:	e172      	b.n	8002b3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	4413      	add	r3, r2
 800285c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800286a:	d11b      	bne.n	80028a4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	212c      	movs	r1, #44	; 0x2c
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	4413      	add	r3, r2
 8002878:	3361      	adds	r3, #97	; 0x61
 800287a:	2208      	movs	r2, #8
 800287c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	4611      	mov	r1, r2
 8002888:	4618      	mov	r0, r3
 800288a:	f002 fcea 	bl	8005262 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	015a      	lsls	r2, r3, #5
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	4413      	add	r3, r2
 8002896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289a:	461a      	mov	r2, r3
 800289c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028a0:	6093      	str	r3, [r2, #8]
}
 80028a2:	e14a      	b.n	8002b3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	f040 813f 	bne.w	8002b3a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	3361      	adds	r3, #97	; 0x61
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d17d      	bne.n	80029cc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	212c      	movs	r1, #44	; 0x2c
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	4413      	add	r3, r2
 80028dc:	3360      	adds	r3, #96	; 0x60
 80028de:	2201      	movs	r2, #1
 80028e0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	212c      	movs	r1, #44	; 0x2c
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	4413      	add	r3, r2
 80028ee:	333f      	adds	r3, #63	; 0x3f
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d00a      	beq.n	800290c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	212c      	movs	r1, #44	; 0x2c
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	4413      	add	r3, r2
 8002902:	333f      	adds	r3, #63	; 0x3f
 8002904:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002906:	2b03      	cmp	r3, #3
 8002908:	f040 8100 	bne.w	8002b0c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d113      	bne.n	800293c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	212c      	movs	r1, #44	; 0x2c
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	3355      	adds	r3, #85	; 0x55
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	f083 0301 	eor.w	r3, r3, #1
 8002928:	b2d8      	uxtb	r0, r3
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	212c      	movs	r1, #44	; 0x2c
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	4413      	add	r3, r2
 8002936:	3355      	adds	r3, #85	; 0x55
 8002938:	4602      	mov	r2, r0
 800293a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	2b01      	cmp	r3, #1
 8002942:	f040 80e3 	bne.w	8002b0c <HCD_HC_OUT_IRQHandler+0x69c>
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	212c      	movs	r1, #44	; 0x2c
 800294c:	fb01 f303 	mul.w	r3, r1, r3
 8002950:	4413      	add	r3, r2
 8002952:	334c      	adds	r3, #76	; 0x4c
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 80d8 	beq.w	8002b0c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	212c      	movs	r1, #44	; 0x2c
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	4413      	add	r3, r2
 8002968:	334c      	adds	r3, #76	; 0x4c
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	202c      	movs	r0, #44	; 0x2c
 8002972:	fb00 f202 	mul.w	r2, r0, r2
 8002976:	440a      	add	r2, r1
 8002978:	3240      	adds	r2, #64	; 0x40
 800297a:	8812      	ldrh	r2, [r2, #0]
 800297c:	4413      	add	r3, r2
 800297e:	3b01      	subs	r3, #1
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	202c      	movs	r0, #44	; 0x2c
 8002986:	fb00 f202 	mul.w	r2, r0, r2
 800298a:	440a      	add	r2, r1
 800298c:	3240      	adds	r2, #64	; 0x40
 800298e:	8812      	ldrh	r2, [r2, #0]
 8002990:	fbb3 f3f2 	udiv	r3, r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80b5 	beq.w	8002b0c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	212c      	movs	r1, #44	; 0x2c
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	3355      	adds	r3, #85	; 0x55
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	f083 0301 	eor.w	r3, r3, #1
 80029b6:	b2d8      	uxtb	r0, r3
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3355      	adds	r3, #85	; 0x55
 80029c6:	4602      	mov	r2, r0
 80029c8:	701a      	strb	r2, [r3, #0]
 80029ca:	e09f      	b.n	8002b0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	212c      	movs	r1, #44	; 0x2c
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	3361      	adds	r3, #97	; 0x61
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d109      	bne.n	80029f4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	212c      	movs	r1, #44	; 0x2c
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	3360      	adds	r3, #96	; 0x60
 80029ee:	2202      	movs	r2, #2
 80029f0:	701a      	strb	r2, [r3, #0]
 80029f2:	e08b      	b.n	8002b0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	3361      	adds	r3, #97	; 0x61
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d109      	bne.n	8002a1c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3360      	adds	r3, #96	; 0x60
 8002a16:	2202      	movs	r2, #2
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	e077      	b.n	8002b0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	212c      	movs	r1, #44	; 0x2c
 8002a22:	fb01 f303 	mul.w	r3, r1, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	3361      	adds	r3, #97	; 0x61
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b05      	cmp	r3, #5
 8002a2e:	d109      	bne.n	8002a44 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	212c      	movs	r1, #44	; 0x2c
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3360      	adds	r3, #96	; 0x60
 8002a3e:	2205      	movs	r2, #5
 8002a40:	701a      	strb	r2, [r3, #0]
 8002a42:	e063      	b.n	8002b0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	212c      	movs	r1, #44	; 0x2c
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	3361      	adds	r3, #97	; 0x61
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b06      	cmp	r3, #6
 8002a56:	d009      	beq.n	8002a6c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	3361      	adds	r3, #97	; 0x61
 8002a66:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d14f      	bne.n	8002b0c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	335c      	adds	r3, #92	; 0x5c
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	202c      	movs	r0, #44	; 0x2c
 8002a84:	fb00 f303 	mul.w	r3, r0, r3
 8002a88:	440b      	add	r3, r1
 8002a8a:	335c      	adds	r3, #92	; 0x5c
 8002a8c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	212c      	movs	r1, #44	; 0x2c
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	4413      	add	r3, r2
 8002a9a:	335c      	adds	r3, #92	; 0x5c
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d912      	bls.n	8002ac8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	212c      	movs	r1, #44	; 0x2c
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	335c      	adds	r3, #92	; 0x5c
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	212c      	movs	r1, #44	; 0x2c
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	3360      	adds	r3, #96	; 0x60
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	701a      	strb	r2, [r3, #0]
 8002ac6:	e021      	b.n	8002b0c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	212c      	movs	r1, #44	; 0x2c
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3360      	adds	r3, #96	; 0x60
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002af0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002af8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b06:	461a      	mov	r2, r3
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b18:	461a      	mov	r2, r3
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	b2d9      	uxtb	r1, r3
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	202c      	movs	r0, #44	; 0x2c
 8002b28:	fb00 f303 	mul.w	r3, r0, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3360      	adds	r3, #96	; 0x60
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f004 fe39 	bl	80077ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b3a:	bf00      	nop
 8002b3c:	3720      	adds	r7, #32
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b08a      	sub	sp, #40	; 0x28
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	0c5b      	lsrs	r3, r3, #17
 8002b68:	f003 030f 	and.w	r3, r3, #15
 8002b6c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b76:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d004      	beq.n	8002b88 <HCD_RXQLVL_IRQHandler+0x46>
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2b05      	cmp	r3, #5
 8002b82:	f000 80a9 	beq.w	8002cd8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b86:	e0aa      	b.n	8002cde <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 80a6 	beq.w	8002cdc <HCD_RXQLVL_IRQHandler+0x19a>
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	212c      	movs	r1, #44	; 0x2c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3344      	adds	r3, #68	; 0x44
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 809b 	beq.w	8002cdc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	212c      	movs	r1, #44	; 0x2c
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3350      	adds	r3, #80	; 0x50
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	441a      	add	r2, r3
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	202c      	movs	r0, #44	; 0x2c
 8002bc0:	fb00 f303 	mul.w	r3, r0, r3
 8002bc4:	440b      	add	r3, r1
 8002bc6:	334c      	adds	r3, #76	; 0x4c
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d87a      	bhi.n	8002cc4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	212c      	movs	r1, #44	; 0x2c
 8002bd8:	fb01 f303 	mul.w	r3, r1, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	3344      	adds	r3, #68	; 0x44
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	b292      	uxth	r2, r2
 8002be6:	4619      	mov	r1, r3
 8002be8:	f001 fe92 	bl	8004910 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	212c      	movs	r1, #44	; 0x2c
 8002bf2:	fb01 f303 	mul.w	r3, r1, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3344      	adds	r3, #68	; 0x44
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	441a      	add	r2, r3
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	202c      	movs	r0, #44	; 0x2c
 8002c06:	fb00 f303 	mul.w	r3, r0, r3
 8002c0a:	440b      	add	r3, r1
 8002c0c:	3344      	adds	r3, #68	; 0x44
 8002c0e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	212c      	movs	r1, #44	; 0x2c
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3350      	adds	r3, #80	; 0x50
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	441a      	add	r2, r3
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	202c      	movs	r0, #44	; 0x2c
 8002c2a:	fb00 f303 	mul.w	r3, r0, r3
 8002c2e:	440b      	add	r3, r1
 8002c30:	3350      	adds	r3, #80	; 0x50
 8002c32:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	0cdb      	lsrs	r3, r3, #19
 8002c44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c48:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	212c      	movs	r1, #44	; 0x2c
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	3340      	adds	r3, #64	; 0x40
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d13c      	bne.n	8002cdc <HCD_RXQLVL_IRQHandler+0x19a>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d039      	beq.n	8002cdc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c7e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c86:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c94:	461a      	mov	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	212c      	movs	r1, #44	; 0x2c
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3354      	adds	r3, #84	; 0x54
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	f083 0301 	eor.w	r3, r3, #1
 8002cae:	b2d8      	uxtb	r0, r3
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	212c      	movs	r1, #44	; 0x2c
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	3354      	adds	r3, #84	; 0x54
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	701a      	strb	r2, [r3, #0]
      break;
 8002cc2:	e00b      	b.n	8002cdc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	212c      	movs	r1, #44	; 0x2c
 8002cca:	fb01 f303 	mul.w	r3, r1, r3
 8002cce:	4413      	add	r3, r2
 8002cd0:	3360      	adds	r3, #96	; 0x60
 8002cd2:	2204      	movs	r2, #4
 8002cd4:	701a      	strb	r2, [r3, #0]
      break;
 8002cd6:	e001      	b.n	8002cdc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002cd8:	bf00      	nop
 8002cda:	e000      	b.n	8002cde <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002cdc:	bf00      	nop
  }
}
 8002cde:	bf00      	nop
 8002ce0:	3728      	adds	r7, #40	; 0x28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d12:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d10b      	bne.n	8002d36 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d102      	bne.n	8002d2e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f004 fd23 	bl	8007774 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	f043 0302 	orr.w	r3, r3, #2
 8002d34:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d132      	bne.n	8002da6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f043 0308 	orr.w	r3, r3, #8
 8002d46:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d126      	bne.n	8002da0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d113      	bne.n	8002d82 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d64:	d106      	bne.n	8002d74 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2102      	movs	r1, #2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f001 ff3d 	bl	8004bec <USB_InitFSLSPClkSel>
 8002d72:	e011      	b.n	8002d98 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2101      	movs	r1, #1
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f001 ff36 	bl	8004bec <USB_InitFSLSPClkSel>
 8002d80:	e00a      	b.n	8002d98 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d106      	bne.n	8002d98 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d90:	461a      	mov	r2, r3
 8002d92:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d96:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f004 fd15 	bl	80077c8 <HAL_HCD_PortEnabled_Callback>
 8002d9e:	e002      	b.n	8002da6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f004 fd1f 	bl	80077e4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f003 0320 	and.w	r3, r3, #32
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	d103      	bne.n	8002db8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f043 0320 	orr.w	r3, r3, #32
 8002db6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	6013      	str	r3, [r2, #0]
}
 8002dc4:	bf00      	nop
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e12b      	b.n	8003036 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fd fe60 	bl	8000ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2224      	movs	r2, #36	; 0x24
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0201 	bic.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e30:	f001 fa20 	bl	8004274 <HAL_RCC_GetPCLK1Freq>
 8002e34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	4a81      	ldr	r2, [pc, #516]	; (8003040 <HAL_I2C_Init+0x274>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d807      	bhi.n	8002e50 <HAL_I2C_Init+0x84>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4a80      	ldr	r2, [pc, #512]	; (8003044 <HAL_I2C_Init+0x278>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	bf94      	ite	ls
 8002e48:	2301      	movls	r3, #1
 8002e4a:	2300      	movhi	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	e006      	b.n	8002e5e <HAL_I2C_Init+0x92>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4a7d      	ldr	r2, [pc, #500]	; (8003048 <HAL_I2C_Init+0x27c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	bf94      	ite	ls
 8002e58:	2301      	movls	r3, #1
 8002e5a:	2300      	movhi	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e0e7      	b.n	8003036 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4a78      	ldr	r2, [pc, #480]	; (800304c <HAL_I2C_Init+0x280>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	0c9b      	lsrs	r3, r3, #18
 8002e70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	4a6a      	ldr	r2, [pc, #424]	; (8003040 <HAL_I2C_Init+0x274>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d802      	bhi.n	8002ea0 <HAL_I2C_Init+0xd4>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	e009      	b.n	8002eb4 <HAL_I2C_Init+0xe8>
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	4a69      	ldr	r2, [pc, #420]	; (8003050 <HAL_I2C_Init+0x284>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	099b      	lsrs	r3, r3, #6
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ec6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	495c      	ldr	r1, [pc, #368]	; (8003040 <HAL_I2C_Init+0x274>)
 8002ed0:	428b      	cmp	r3, r1
 8002ed2:	d819      	bhi.n	8002f08 <HAL_I2C_Init+0x13c>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1e59      	subs	r1, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee2:	1c59      	adds	r1, r3, #1
 8002ee4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ee8:	400b      	ands	r3, r1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00a      	beq.n	8002f04 <HAL_I2C_Init+0x138>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	1e59      	subs	r1, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002efc:	3301      	adds	r3, #1
 8002efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f02:	e051      	b.n	8002fa8 <HAL_I2C_Init+0x1dc>
 8002f04:	2304      	movs	r3, #4
 8002f06:	e04f      	b.n	8002fa8 <HAL_I2C_Init+0x1dc>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d111      	bne.n	8002f34 <HAL_I2C_Init+0x168>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1e58      	subs	r0, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6859      	ldr	r1, [r3, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	440b      	add	r3, r1
 8002f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f22:	3301      	adds	r3, #1
 8002f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	e012      	b.n	8002f5a <HAL_I2C_Init+0x18e>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	1e58      	subs	r0, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	0099      	lsls	r1, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_I2C_Init+0x196>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e022      	b.n	8002fa8 <HAL_I2C_Init+0x1dc>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10e      	bne.n	8002f88 <HAL_I2C_Init+0x1bc>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1e58      	subs	r0, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6859      	ldr	r1, [r3, #4]
 8002f72:	460b      	mov	r3, r1
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	440b      	add	r3, r1
 8002f78:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f86:	e00f      	b.n	8002fa8 <HAL_I2C_Init+0x1dc>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	1e58      	subs	r0, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6859      	ldr	r1, [r3, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	0099      	lsls	r1, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	6809      	ldr	r1, [r1, #0]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69da      	ldr	r2, [r3, #28]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6911      	ldr	r1, [r2, #16]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	68d2      	ldr	r2, [r2, #12]
 8002fe2:	4311      	orrs	r1, r2
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	000186a0 	.word	0x000186a0
 8003044:	001e847f 	.word	0x001e847f
 8003048:	003d08ff 	.word	0x003d08ff
 800304c:	431bde83 	.word	0x431bde83
 8003050:	10624dd3 	.word	0x10624dd3

08003054 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e128      	b.n	80032b8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d109      	bne.n	8003086 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a90      	ldr	r2, [pc, #576]	; (80032c0 <HAL_I2S_Init+0x26c>)
 800307e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7fd fd61 	bl	8000b48 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2202      	movs	r2, #2
 800308a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800309c:	f023 030f 	bic.w	r3, r3, #15
 80030a0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2202      	movs	r2, #2
 80030a8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d060      	beq.n	8003174 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d102      	bne.n	80030c0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80030ba:	2310      	movs	r3, #16
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	e001      	b.n	80030c4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80030c0:	2320      	movs	r3, #32
 80030c2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d802      	bhi.n	80030d2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80030d2:	2001      	movs	r0, #1
 80030d4:	f001 f9c4 	bl	8004460 <HAL_RCCEx_GetPeriphCLKFreq>
 80030d8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e2:	d125      	bne.n	8003130 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d010      	beq.n	800310e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	461a      	mov	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	fbb2 f3f3 	udiv	r3, r2, r3
 8003108:	3305      	adds	r3, #5
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	e01f      	b.n	800314e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	fbb2 f2f3 	udiv	r2, r2, r3
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	461a      	mov	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	fbb2 f3f3 	udiv	r3, r2, r3
 800312a:	3305      	adds	r3, #5
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	e00e      	b.n	800314e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	fbb2 f2f3 	udiv	r2, r2, r3
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	461a      	mov	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	fbb2 f3f3 	udiv	r3, r2, r3
 800314a:	3305      	adds	r3, #5
 800314c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4a5c      	ldr	r2, [pc, #368]	; (80032c4 <HAL_I2S_Init+0x270>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	08db      	lsrs	r3, r3, #3
 8003158:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	085b      	lsrs	r3, r3, #1
 800316a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	61bb      	str	r3, [r7, #24]
 8003172:	e003      	b.n	800317c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003174:	2302      	movs	r3, #2
 8003176:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d902      	bls.n	8003188 <HAL_I2S_Init+0x134>
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	2bff      	cmp	r3, #255	; 0xff
 8003186:	d907      	bls.n	8003198 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318c:	f043 0210 	orr.w	r2, r3, #16
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e08f      	b.n	80032b8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	ea42 0103 	orr.w	r1, r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	69fa      	ldr	r2, [r7, #28]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031b6:	f023 030f 	bic.w	r3, r3, #15
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6851      	ldr	r1, [r2, #4]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6892      	ldr	r2, [r2, #8]
 80031c2:	4311      	orrs	r1, r2
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	68d2      	ldr	r2, [r2, #12]
 80031c8:	4311      	orrs	r1, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6992      	ldr	r2, [r2, #24]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031da:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d161      	bne.n	80032a8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a38      	ldr	r2, [pc, #224]	; (80032c8 <HAL_I2S_Init+0x274>)
 80031e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a37      	ldr	r2, [pc, #220]	; (80032cc <HAL_I2S_Init+0x278>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d101      	bne.n	80031f8 <HAL_I2S_Init+0x1a4>
 80031f4:	4b36      	ldr	r3, [pc, #216]	; (80032d0 <HAL_I2S_Init+0x27c>)
 80031f6:	e001      	b.n	80031fc <HAL_I2S_Init+0x1a8>
 80031f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	4932      	ldr	r1, [pc, #200]	; (80032cc <HAL_I2S_Init+0x278>)
 8003204:	428a      	cmp	r2, r1
 8003206:	d101      	bne.n	800320c <HAL_I2S_Init+0x1b8>
 8003208:	4a31      	ldr	r2, [pc, #196]	; (80032d0 <HAL_I2S_Init+0x27c>)
 800320a:	e001      	b.n	8003210 <HAL_I2S_Init+0x1bc>
 800320c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003210:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003214:	f023 030f 	bic.w	r3, r3, #15
 8003218:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a2b      	ldr	r2, [pc, #172]	; (80032cc <HAL_I2S_Init+0x278>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d101      	bne.n	8003228 <HAL_I2S_Init+0x1d4>
 8003224:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <HAL_I2S_Init+0x27c>)
 8003226:	e001      	b.n	800322c <HAL_I2S_Init+0x1d8>
 8003228:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800322c:	2202      	movs	r2, #2
 800322e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a25      	ldr	r2, [pc, #148]	; (80032cc <HAL_I2S_Init+0x278>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d101      	bne.n	800323e <HAL_I2S_Init+0x1ea>
 800323a:	4b25      	ldr	r3, [pc, #148]	; (80032d0 <HAL_I2S_Init+0x27c>)
 800323c:	e001      	b.n	8003242 <HAL_I2S_Init+0x1ee>
 800323e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800324e:	d003      	beq.n	8003258 <HAL_I2S_Init+0x204>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d103      	bne.n	8003260 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003258:	f44f 7380 	mov.w	r3, #256	; 0x100
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	e001      	b.n	8003264 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003260:	2300      	movs	r3, #0
 8003262:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800326e:	4313      	orrs	r3, r2
 8003270:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003278:	4313      	orrs	r3, r2
 800327a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003282:	4313      	orrs	r3, r2
 8003284:	b29a      	uxth	r2, r3
 8003286:	897b      	ldrh	r3, [r7, #10]
 8003288:	4313      	orrs	r3, r2
 800328a:	b29b      	uxth	r3, r3
 800328c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003290:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a0d      	ldr	r2, [pc, #52]	; (80032cc <HAL_I2S_Init+0x278>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d101      	bne.n	80032a0 <HAL_I2S_Init+0x24c>
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <HAL_I2S_Init+0x27c>)
 800329e:	e001      	b.n	80032a4 <HAL_I2S_Init+0x250>
 80032a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032a4:	897a      	ldrh	r2, [r7, #10]
 80032a6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3720      	adds	r7, #32
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	080033cb 	.word	0x080033cb
 80032c4:	cccccccd 	.word	0xcccccccd
 80032c8:	080034e1 	.word	0x080034e1
 80032cc:	40003800 	.word	0x40003800
 80032d0:	40003400 	.word	0x40003400

080032d4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	881a      	ldrh	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	1c9a      	adds	r2, r3, #2
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003332:	b29b      	uxth	r3, r3
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10e      	bne.n	8003364 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003354:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff ffb8 	bl	80032d4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003364:	bf00      	nop
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	b292      	uxth	r2, r2
 8003380:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	1c9a      	adds	r2, r3, #2
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10e      	bne.n	80033c2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033b2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff ff93 	bl	80032e8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b086      	sub	sp, #24
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d13a      	bne.n	800345c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d109      	bne.n	8003404 <I2S_IRQHandler+0x3a>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fa:	2b40      	cmp	r3, #64	; 0x40
 80033fc:	d102      	bne.n	8003404 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff ffb4 	bl	800336c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340a:	2b40      	cmp	r3, #64	; 0x40
 800340c:	d126      	bne.n	800345c <I2S_IRQHandler+0x92>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b20      	cmp	r3, #32
 800341a:	d11f      	bne.n	800345c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800342a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800342c:	2300      	movs	r3, #0
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	f043 0202 	orr.w	r2, r3, #2
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff ff50 	bl	80032fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b03      	cmp	r3, #3
 8003466:	d136      	bne.n	80034d6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b02      	cmp	r3, #2
 8003470:	d109      	bne.n	8003486 <I2S_IRQHandler+0xbc>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347c:	2b80      	cmp	r3, #128	; 0x80
 800347e:	d102      	bne.n	8003486 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff ff45 	bl	8003310 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d122      	bne.n	80034d6 <I2S_IRQHandler+0x10c>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b20      	cmp	r3, #32
 800349c:	d11b      	bne.n	80034d6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034ac:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c8:	f043 0204 	orr.w	r2, r3, #4
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff ff13 	bl	80032fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034d6:	bf00      	nop
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a92      	ldr	r2, [pc, #584]	; (8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d101      	bne.n	80034fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80034fa:	4b92      	ldr	r3, [pc, #584]	; (8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034fc:	e001      	b.n	8003502 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80034fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a8b      	ldr	r2, [pc, #556]	; (8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d101      	bne.n	800351c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003518:	4b8a      	ldr	r3, [pc, #552]	; (8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800351a:	e001      	b.n	8003520 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800351c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800352c:	d004      	beq.n	8003538 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	f040 8099 	bne.w	800366a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b02      	cmp	r3, #2
 8003540:	d107      	bne.n	8003552 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f925 	bl	800379c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b01      	cmp	r3, #1
 800355a:	d107      	bne.n	800356c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f9c8 	bl	80038fc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003572:	2b40      	cmp	r3, #64	; 0x40
 8003574:	d13a      	bne.n	80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b00      	cmp	r3, #0
 800357e:	d035      	beq.n	80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a6e      	ldr	r2, [pc, #440]	; (8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d101      	bne.n	800358e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800358a:	4b6e      	ldr	r3, [pc, #440]	; (8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800358c:	e001      	b.n	8003592 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800358e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4969      	ldr	r1, [pc, #420]	; (8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800359a:	428b      	cmp	r3, r1
 800359c:	d101      	bne.n	80035a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800359e:	4b69      	ldr	r3, [pc, #420]	; (8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035a0:	e001      	b.n	80035a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80035a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035aa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035ba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035bc:	2300      	movs	r3, #0
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035de:	f043 0202 	orr.w	r2, r3, #2
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7ff fe88 	bl	80032fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	f040 80c3 	bne.w	800377e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f003 0320 	and.w	r3, r3, #32
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 80bd 	beq.w	800377e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003612:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a49      	ldr	r2, [pc, #292]	; (8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800361e:	4b49      	ldr	r3, [pc, #292]	; (8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003620:	e001      	b.n	8003626 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003622:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4944      	ldr	r1, [pc, #272]	; (8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800362e:	428b      	cmp	r3, r1
 8003630:	d101      	bne.n	8003636 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003632:	4b44      	ldr	r3, [pc, #272]	; (8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003634:	e001      	b.n	800363a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003636:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800363a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800363e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003640:	2300      	movs	r3, #0
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	60bb      	str	r3, [r7, #8]
 800364c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	f043 0204 	orr.w	r2, r3, #4
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff fe4a 	bl	80032fc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003668:	e089      	b.n	800377e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b02      	cmp	r3, #2
 8003672:	d107      	bne.n	8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f8be 	bl	8003800 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b01      	cmp	r3, #1
 800368c:	d107      	bne.n	800369e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f8fd 	bl	8003898 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a4:	2b40      	cmp	r3, #64	; 0x40
 80036a6:	d12f      	bne.n	8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d02a      	beq.n	8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036c0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1e      	ldr	r2, [pc, #120]	; (8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80036cc:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036ce:	e001      	b.n	80036d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80036d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4919      	ldr	r1, [pc, #100]	; (8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036dc:	428b      	cmp	r3, r1
 80036de:	d101      	bne.n	80036e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80036e0:	4b18      	ldr	r3, [pc, #96]	; (8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036e2:	e001      	b.n	80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80036e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036ec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	f043 0202 	orr.w	r2, r3, #2
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff fdfa 	bl	80032fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b08      	cmp	r3, #8
 8003710:	d136      	bne.n	8003780 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b00      	cmp	r3, #0
 800371a:	d031      	beq.n	8003780 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a07      	ldr	r2, [pc, #28]	; (8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d101      	bne.n	800372a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003726:	4b07      	ldr	r3, [pc, #28]	; (8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003728:	e001      	b.n	800372e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800372a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4902      	ldr	r1, [pc, #8]	; (8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003736:	428b      	cmp	r3, r1
 8003738:	d106      	bne.n	8003748 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800373a:	4b02      	ldr	r3, [pc, #8]	; (8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800373c:	e006      	b.n	800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800373e:	bf00      	nop
 8003740:	40003800 	.word	0x40003800
 8003744:	40003400 	.word	0x40003400
 8003748:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800374c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003750:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003760:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	f043 0204 	orr.w	r2, r3, #4
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff fdc0 	bl	80032fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800377c:	e000      	b.n	8003780 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800377e:	bf00      	nop
}
 8003780:	bf00      	nop
 8003782:	3720      	adds	r7, #32
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	1c99      	adds	r1, r3, #2
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6251      	str	r1, [r2, #36]	; 0x24
 80037ae:	881a      	ldrh	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d113      	bne.n	80037f6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d106      	bne.n	80037f6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff ffc9 	bl	8003788 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	1c99      	adds	r1, r3, #2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6251      	str	r1, [r2, #36]	; 0x24
 8003812:	8819      	ldrh	r1, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1d      	ldr	r2, [pc, #116]	; (8003890 <I2SEx_TxISR_I2SExt+0x90>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d101      	bne.n	8003822 <I2SEx_TxISR_I2SExt+0x22>
 800381e:	4b1d      	ldr	r3, [pc, #116]	; (8003894 <I2SEx_TxISR_I2SExt+0x94>)
 8003820:	e001      	b.n	8003826 <I2SEx_TxISR_I2SExt+0x26>
 8003822:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003826:	460a      	mov	r2, r1
 8003828:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d121      	bne.n	8003886 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a12      	ldr	r2, [pc, #72]	; (8003890 <I2SEx_TxISR_I2SExt+0x90>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d101      	bne.n	8003850 <I2SEx_TxISR_I2SExt+0x50>
 800384c:	4b11      	ldr	r3, [pc, #68]	; (8003894 <I2SEx_TxISR_I2SExt+0x94>)
 800384e:	e001      	b.n	8003854 <I2SEx_TxISR_I2SExt+0x54>
 8003850:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	490d      	ldr	r1, [pc, #52]	; (8003890 <I2SEx_TxISR_I2SExt+0x90>)
 800385c:	428b      	cmp	r3, r1
 800385e:	d101      	bne.n	8003864 <I2SEx_TxISR_I2SExt+0x64>
 8003860:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <I2SEx_TxISR_I2SExt+0x94>)
 8003862:	e001      	b.n	8003868 <I2SEx_TxISR_I2SExt+0x68>
 8003864:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003868:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800386c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d106      	bne.n	8003886 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff ff81 	bl	8003788 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40003800 	.word	0x40003800
 8003894:	40003400 	.word	0x40003400

08003898 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68d8      	ldr	r0, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	1c99      	adds	r1, r3, #2
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038b0:	b282      	uxth	r2, r0
 80038b2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d113      	bne.n	80038f4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038da:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff ff4a 	bl	8003788 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a20      	ldr	r2, [pc, #128]	; (800398c <I2SEx_RxISR_I2SExt+0x90>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d101      	bne.n	8003912 <I2SEx_RxISR_I2SExt+0x16>
 800390e:	4b20      	ldr	r3, [pc, #128]	; (8003990 <I2SEx_RxISR_I2SExt+0x94>)
 8003910:	e001      	b.n	8003916 <I2SEx_RxISR_I2SExt+0x1a>
 8003912:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003916:	68d8      	ldr	r0, [r3, #12]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	1c99      	adds	r1, r3, #2
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003922:	b282      	uxth	r2, r0
 8003924:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d121      	bne.n	8003982 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a12      	ldr	r2, [pc, #72]	; (800398c <I2SEx_RxISR_I2SExt+0x90>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d101      	bne.n	800394c <I2SEx_RxISR_I2SExt+0x50>
 8003948:	4b11      	ldr	r3, [pc, #68]	; (8003990 <I2SEx_RxISR_I2SExt+0x94>)
 800394a:	e001      	b.n	8003950 <I2SEx_RxISR_I2SExt+0x54>
 800394c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	490d      	ldr	r1, [pc, #52]	; (800398c <I2SEx_RxISR_I2SExt+0x90>)
 8003958:	428b      	cmp	r3, r1
 800395a:	d101      	bne.n	8003960 <I2SEx_RxISR_I2SExt+0x64>
 800395c:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <I2SEx_RxISR_I2SExt+0x94>)
 800395e:	e001      	b.n	8003964 <I2SEx_RxISR_I2SExt+0x68>
 8003960:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003964:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003968:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d106      	bne.n	8003982 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff ff03 	bl	8003788 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40003800 	.word	0x40003800
 8003990:	40003400 	.word	0x40003400

08003994 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e267      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d075      	beq.n	8003a9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039b2:	4b88      	ldr	r3, [pc, #544]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 030c 	and.w	r3, r3, #12
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d00c      	beq.n	80039d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039be:	4b85      	ldr	r3, [pc, #532]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d112      	bne.n	80039f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ca:	4b82      	ldr	r3, [pc, #520]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039d6:	d10b      	bne.n	80039f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d8:	4b7e      	ldr	r3, [pc, #504]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d05b      	beq.n	8003a9c <HAL_RCC_OscConfig+0x108>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d157      	bne.n	8003a9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e242      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f8:	d106      	bne.n	8003a08 <HAL_RCC_OscConfig+0x74>
 80039fa:	4b76      	ldr	r3, [pc, #472]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a75      	ldr	r2, [pc, #468]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e01d      	b.n	8003a44 <HAL_RCC_OscConfig+0xb0>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a10:	d10c      	bne.n	8003a2c <HAL_RCC_OscConfig+0x98>
 8003a12:	4b70      	ldr	r3, [pc, #448]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a6f      	ldr	r2, [pc, #444]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	4b6d      	ldr	r3, [pc, #436]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a6c      	ldr	r2, [pc, #432]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	e00b      	b.n	8003a44 <HAL_RCC_OscConfig+0xb0>
 8003a2c:	4b69      	ldr	r3, [pc, #420]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a68      	ldr	r2, [pc, #416]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	4b66      	ldr	r3, [pc, #408]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a65      	ldr	r2, [pc, #404]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d013      	beq.n	8003a74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4c:	f7fd faa2 	bl	8000f94 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a54:	f7fd fa9e 	bl	8000f94 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	; 0x64
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e207      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a66:	4b5b      	ldr	r3, [pc, #364]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCC_OscConfig+0xc0>
 8003a72:	e014      	b.n	8003a9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a74:	f7fd fa8e 	bl	8000f94 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a7c:	f7fd fa8a 	bl	8000f94 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	; 0x64
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e1f3      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a8e:	4b51      	ldr	r3, [pc, #324]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f0      	bne.n	8003a7c <HAL_RCC_OscConfig+0xe8>
 8003a9a:	e000      	b.n	8003a9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d063      	beq.n	8003b72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aaa:	4b4a      	ldr	r3, [pc, #296]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00b      	beq.n	8003ace <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ab6:	4b47      	ldr	r3, [pc, #284]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d11c      	bne.n	8003afc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ac2:	4b44      	ldr	r3, [pc, #272]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d116      	bne.n	8003afc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ace:	4b41      	ldr	r3, [pc, #260]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x152>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d001      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e1c7      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae6:	4b3b      	ldr	r3, [pc, #236]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4937      	ldr	r1, [pc, #220]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003afa:	e03a      	b.n	8003b72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d020      	beq.n	8003b46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b04:	4b34      	ldr	r3, [pc, #208]	; (8003bd8 <HAL_RCC_OscConfig+0x244>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0a:	f7fd fa43 	bl	8000f94 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b12:	f7fd fa3f 	bl	8000f94 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e1a8      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b24:	4b2b      	ldr	r3, [pc, #172]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b30:	4b28      	ldr	r3, [pc, #160]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4925      	ldr	r1, [pc, #148]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	600b      	str	r3, [r1, #0]
 8003b44:	e015      	b.n	8003b72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b46:	4b24      	ldr	r3, [pc, #144]	; (8003bd8 <HAL_RCC_OscConfig+0x244>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fd fa22 	bl	8000f94 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b54:	f7fd fa1e 	bl	8000f94 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e187      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b66:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d036      	beq.n	8003bec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d016      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b86:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <HAL_RCC_OscConfig+0x248>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8c:	f7fd fa02 	bl	8000f94 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b94:	f7fd f9fe 	bl	8000f94 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e167      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba6:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0x200>
 8003bb2:	e01b      	b.n	8003bec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bb4:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <HAL_RCC_OscConfig+0x248>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bba:	f7fd f9eb 	bl	8000f94 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc0:	e00e      	b.n	8003be0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bc2:	f7fd f9e7 	bl	8000f94 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d907      	bls.n	8003be0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e150      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	42470000 	.word	0x42470000
 8003bdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be0:	4b88      	ldr	r3, [pc, #544]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1ea      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8097 	beq.w	8003d28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bfe:	4b81      	ldr	r3, [pc, #516]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10f      	bne.n	8003c2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	4b7d      	ldr	r3, [pc, #500]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	4a7c      	ldr	r2, [pc, #496]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c18:	6413      	str	r3, [r2, #64]	; 0x40
 8003c1a:	4b7a      	ldr	r3, [pc, #488]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c22:	60bb      	str	r3, [r7, #8]
 8003c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c26:	2301      	movs	r3, #1
 8003c28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2a:	4b77      	ldr	r3, [pc, #476]	; (8003e08 <HAL_RCC_OscConfig+0x474>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d118      	bne.n	8003c68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c36:	4b74      	ldr	r3, [pc, #464]	; (8003e08 <HAL_RCC_OscConfig+0x474>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a73      	ldr	r2, [pc, #460]	; (8003e08 <HAL_RCC_OscConfig+0x474>)
 8003c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c42:	f7fd f9a7 	bl	8000f94 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c4a:	f7fd f9a3 	bl	8000f94 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e10c      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5c:	4b6a      	ldr	r3, [pc, #424]	; (8003e08 <HAL_RCC_OscConfig+0x474>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f0      	beq.n	8003c4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d106      	bne.n	8003c7e <HAL_RCC_OscConfig+0x2ea>
 8003c70:	4b64      	ldr	r3, [pc, #400]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c74:	4a63      	ldr	r2, [pc, #396]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c76:	f043 0301 	orr.w	r3, r3, #1
 8003c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7c:	e01c      	b.n	8003cb8 <HAL_RCC_OscConfig+0x324>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b05      	cmp	r3, #5
 8003c84:	d10c      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x30c>
 8003c86:	4b5f      	ldr	r3, [pc, #380]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8a:	4a5e      	ldr	r2, [pc, #376]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	f043 0304 	orr.w	r3, r3, #4
 8003c90:	6713      	str	r3, [r2, #112]	; 0x70
 8003c92:	4b5c      	ldr	r3, [pc, #368]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c96:	4a5b      	ldr	r2, [pc, #364]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9e:	e00b      	b.n	8003cb8 <HAL_RCC_OscConfig+0x324>
 8003ca0:	4b58      	ldr	r3, [pc, #352]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca4:	4a57      	ldr	r2, [pc, #348]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003ca6:	f023 0301 	bic.w	r3, r3, #1
 8003caa:	6713      	str	r3, [r2, #112]	; 0x70
 8003cac:	4b55      	ldr	r3, [pc, #340]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb0:	4a54      	ldr	r2, [pc, #336]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	f023 0304 	bic.w	r3, r3, #4
 8003cb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d015      	beq.n	8003cec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc0:	f7fd f968 	bl	8000f94 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc6:	e00a      	b.n	8003cde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc8:	f7fd f964 	bl	8000f94 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e0cb      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cde:	4b49      	ldr	r3, [pc, #292]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0ee      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x334>
 8003cea:	e014      	b.n	8003d16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cec:	f7fd f952 	bl	8000f94 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf2:	e00a      	b.n	8003d0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cf4:	f7fd f94e 	bl	8000f94 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e0b5      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d0a:	4b3e      	ldr	r3, [pc, #248]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1ee      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d16:	7dfb      	ldrb	r3, [r7, #23]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d105      	bne.n	8003d28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d1c:	4b39      	ldr	r3, [pc, #228]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	4a38      	ldr	r2, [pc, #224]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003d22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 80a1 	beq.w	8003e74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d32:	4b34      	ldr	r3, [pc, #208]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d05c      	beq.n	8003df8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d141      	bne.n	8003dca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d46:	4b31      	ldr	r3, [pc, #196]	; (8003e0c <HAL_RCC_OscConfig+0x478>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4c:	f7fd f922 	bl	8000f94 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d54:	f7fd f91e 	bl	8000f94 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e087      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d66:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69da      	ldr	r2, [r3, #28]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	019b      	lsls	r3, r3, #6
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	085b      	lsrs	r3, r3, #1
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	041b      	lsls	r3, r3, #16
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	061b      	lsls	r3, r3, #24
 8003d96:	491b      	ldr	r1, [pc, #108]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d9c:	4b1b      	ldr	r3, [pc, #108]	; (8003e0c <HAL_RCC_OscConfig+0x478>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da2:	f7fd f8f7 	bl	8000f94 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003daa:	f7fd f8f3 	bl	8000f94 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e05c      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dbc:	4b11      	ldr	r3, [pc, #68]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f0      	beq.n	8003daa <HAL_RCC_OscConfig+0x416>
 8003dc8:	e054      	b.n	8003e74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dca:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <HAL_RCC_OscConfig+0x478>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fd f8e0 	bl	8000f94 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd8:	f7fd f8dc 	bl	8000f94 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e045      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dea:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <HAL_RCC_OscConfig+0x470>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x444>
 8003df6:	e03d      	b.n	8003e74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d107      	bne.n	8003e10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e038      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
 8003e04:	40023800 	.word	0x40023800
 8003e08:	40007000 	.word	0x40007000
 8003e0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e10:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <HAL_RCC_OscConfig+0x4ec>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d028      	beq.n	8003e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d121      	bne.n	8003e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d11a      	bne.n	8003e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e40:	4013      	ands	r3, r2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d111      	bne.n	8003e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e56:	085b      	lsrs	r3, r3, #1
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d107      	bne.n	8003e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e000      	b.n	8003e76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800

08003e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0cc      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e98:	4b68      	ldr	r3, [pc, #416]	; (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d90c      	bls.n	8003ec0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea6:	4b65      	ldr	r3, [pc, #404]	; (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eae:	4b63      	ldr	r3, [pc, #396]	; (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e0b8      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d020      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ed8:	4b59      	ldr	r3, [pc, #356]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	4a58      	ldr	r2, [pc, #352]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ee2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ef0:	4b53      	ldr	r3, [pc, #332]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	4a52      	ldr	r2, [pc, #328]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003efa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003efc:	4b50      	ldr	r3, [pc, #320]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	494d      	ldr	r1, [pc, #308]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d044      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d107      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f22:	4b47      	ldr	r3, [pc, #284]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d119      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e07f      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d003      	beq.n	8003f42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d107      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f42:	4b3f      	ldr	r3, [pc, #252]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d109      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e06f      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f52:	4b3b      	ldr	r3, [pc, #236]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e067      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f62:	4b37      	ldr	r3, [pc, #220]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f023 0203 	bic.w	r2, r3, #3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	4934      	ldr	r1, [pc, #208]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f74:	f7fd f80e 	bl	8000f94 <HAL_GetTick>
 8003f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7a:	e00a      	b.n	8003f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f7c:	f7fd f80a 	bl	8000f94 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e04f      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f92:	4b2b      	ldr	r3, [pc, #172]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 020c 	and.w	r2, r3, #12
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d1eb      	bne.n	8003f7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fa4:	4b25      	ldr	r3, [pc, #148]	; (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d20c      	bcs.n	8003fcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb2:	4b22      	ldr	r3, [pc, #136]	; (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fba:	4b20      	ldr	r3, [pc, #128]	; (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d001      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e032      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d008      	beq.n	8003fea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fd8:	4b19      	ldr	r3, [pc, #100]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4916      	ldr	r1, [pc, #88]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d009      	beq.n	800400a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ff6:	4b12      	ldr	r3, [pc, #72]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	490e      	ldr	r1, [pc, #56]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	4313      	orrs	r3, r2
 8004008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800400a:	f000 f821 	bl	8004050 <HAL_RCC_GetSysClockFreq>
 800400e:	4602      	mov	r2, r0
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	091b      	lsrs	r3, r3, #4
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	490a      	ldr	r1, [pc, #40]	; (8004044 <HAL_RCC_ClockConfig+0x1c0>)
 800401c:	5ccb      	ldrb	r3, [r1, r3]
 800401e:	fa22 f303 	lsr.w	r3, r2, r3
 8004022:	4a09      	ldr	r2, [pc, #36]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8004024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004026:	4b09      	ldr	r3, [pc, #36]	; (800404c <HAL_RCC_ClockConfig+0x1c8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7fc ff6e 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40023c00 	.word	0x40023c00
 8004040:	40023800 	.word	0x40023800
 8004044:	08008ab8 	.word	0x08008ab8
 8004048:	20000000 	.word	0x20000000
 800404c:	20000004 	.word	0x20000004

08004050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004054:	b094      	sub	sp, #80	; 0x50
 8004056:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	647b      	str	r3, [r7, #68]	; 0x44
 800405c:	2300      	movs	r3, #0
 800405e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004060:	2300      	movs	r3, #0
 8004062:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004068:	4b79      	ldr	r3, [pc, #484]	; (8004250 <HAL_RCC_GetSysClockFreq+0x200>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 030c 	and.w	r3, r3, #12
 8004070:	2b08      	cmp	r3, #8
 8004072:	d00d      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0x40>
 8004074:	2b08      	cmp	r3, #8
 8004076:	f200 80e1 	bhi.w	800423c <HAL_RCC_GetSysClockFreq+0x1ec>
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <HAL_RCC_GetSysClockFreq+0x34>
 800407e:	2b04      	cmp	r3, #4
 8004080:	d003      	beq.n	800408a <HAL_RCC_GetSysClockFreq+0x3a>
 8004082:	e0db      	b.n	800423c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004084:	4b73      	ldr	r3, [pc, #460]	; (8004254 <HAL_RCC_GetSysClockFreq+0x204>)
 8004086:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004088:	e0db      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800408a:	4b73      	ldr	r3, [pc, #460]	; (8004258 <HAL_RCC_GetSysClockFreq+0x208>)
 800408c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800408e:	e0d8      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004090:	4b6f      	ldr	r3, [pc, #444]	; (8004250 <HAL_RCC_GetSysClockFreq+0x200>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004098:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800409a:	4b6d      	ldr	r3, [pc, #436]	; (8004250 <HAL_RCC_GetSysClockFreq+0x200>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d063      	beq.n	800416e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a6:	4b6a      	ldr	r3, [pc, #424]	; (8004250 <HAL_RCC_GetSysClockFreq+0x200>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	099b      	lsrs	r3, r3, #6
 80040ac:	2200      	movs	r2, #0
 80040ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80040b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b8:	633b      	str	r3, [r7, #48]	; 0x30
 80040ba:	2300      	movs	r3, #0
 80040bc:	637b      	str	r3, [r7, #52]	; 0x34
 80040be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040c2:	4622      	mov	r2, r4
 80040c4:	462b      	mov	r3, r5
 80040c6:	f04f 0000 	mov.w	r0, #0
 80040ca:	f04f 0100 	mov.w	r1, #0
 80040ce:	0159      	lsls	r1, r3, #5
 80040d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040d4:	0150      	lsls	r0, r2, #5
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	4621      	mov	r1, r4
 80040dc:	1a51      	subs	r1, r2, r1
 80040de:	6139      	str	r1, [r7, #16]
 80040e0:	4629      	mov	r1, r5
 80040e2:	eb63 0301 	sbc.w	r3, r3, r1
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040f4:	4659      	mov	r1, fp
 80040f6:	018b      	lsls	r3, r1, #6
 80040f8:	4651      	mov	r1, sl
 80040fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040fe:	4651      	mov	r1, sl
 8004100:	018a      	lsls	r2, r1, #6
 8004102:	4651      	mov	r1, sl
 8004104:	ebb2 0801 	subs.w	r8, r2, r1
 8004108:	4659      	mov	r1, fp
 800410a:	eb63 0901 	sbc.w	r9, r3, r1
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800411a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800411e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004122:	4690      	mov	r8, r2
 8004124:	4699      	mov	r9, r3
 8004126:	4623      	mov	r3, r4
 8004128:	eb18 0303 	adds.w	r3, r8, r3
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	462b      	mov	r3, r5
 8004130:	eb49 0303 	adc.w	r3, r9, r3
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	f04f 0300 	mov.w	r3, #0
 800413e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004142:	4629      	mov	r1, r5
 8004144:	024b      	lsls	r3, r1, #9
 8004146:	4621      	mov	r1, r4
 8004148:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800414c:	4621      	mov	r1, r4
 800414e:	024a      	lsls	r2, r1, #9
 8004150:	4610      	mov	r0, r2
 8004152:	4619      	mov	r1, r3
 8004154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004156:	2200      	movs	r2, #0
 8004158:	62bb      	str	r3, [r7, #40]	; 0x28
 800415a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800415c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004160:	f7fc f886 	bl	8000270 <__aeabi_uldivmod>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4613      	mov	r3, r2
 800416a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800416c:	e058      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800416e:	4b38      	ldr	r3, [pc, #224]	; (8004250 <HAL_RCC_GetSysClockFreq+0x200>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	099b      	lsrs	r3, r3, #6
 8004174:	2200      	movs	r2, #0
 8004176:	4618      	mov	r0, r3
 8004178:	4611      	mov	r1, r2
 800417a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800417e:	623b      	str	r3, [r7, #32]
 8004180:	2300      	movs	r3, #0
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
 8004184:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004188:	4642      	mov	r2, r8
 800418a:	464b      	mov	r3, r9
 800418c:	f04f 0000 	mov.w	r0, #0
 8004190:	f04f 0100 	mov.w	r1, #0
 8004194:	0159      	lsls	r1, r3, #5
 8004196:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800419a:	0150      	lsls	r0, r2, #5
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4641      	mov	r1, r8
 80041a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80041a6:	4649      	mov	r1, r9
 80041a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041c0:	ebb2 040a 	subs.w	r4, r2, sl
 80041c4:	eb63 050b 	sbc.w	r5, r3, fp
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	00eb      	lsls	r3, r5, #3
 80041d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041d6:	00e2      	lsls	r2, r4, #3
 80041d8:	4614      	mov	r4, r2
 80041da:	461d      	mov	r5, r3
 80041dc:	4643      	mov	r3, r8
 80041de:	18e3      	adds	r3, r4, r3
 80041e0:	603b      	str	r3, [r7, #0]
 80041e2:	464b      	mov	r3, r9
 80041e4:	eb45 0303 	adc.w	r3, r5, r3
 80041e8:	607b      	str	r3, [r7, #4]
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	f04f 0300 	mov.w	r3, #0
 80041f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041f6:	4629      	mov	r1, r5
 80041f8:	028b      	lsls	r3, r1, #10
 80041fa:	4621      	mov	r1, r4
 80041fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004200:	4621      	mov	r1, r4
 8004202:	028a      	lsls	r2, r1, #10
 8004204:	4610      	mov	r0, r2
 8004206:	4619      	mov	r1, r3
 8004208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800420a:	2200      	movs	r2, #0
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	61fa      	str	r2, [r7, #28]
 8004210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004214:	f7fc f82c 	bl	8000270 <__aeabi_uldivmod>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4613      	mov	r3, r2
 800421e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004220:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <HAL_RCC_GetSysClockFreq+0x200>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	0c1b      	lsrs	r3, r3, #16
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	3301      	adds	r3, #1
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004230:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004234:	fbb2 f3f3 	udiv	r3, r2, r3
 8004238:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800423a:	e002      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <HAL_RCC_GetSysClockFreq+0x204>)
 800423e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004244:	4618      	mov	r0, r3
 8004246:	3750      	adds	r7, #80	; 0x50
 8004248:	46bd      	mov	sp, r7
 800424a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800424e:	bf00      	nop
 8004250:	40023800 	.word	0x40023800
 8004254:	00f42400 	.word	0x00f42400
 8004258:	007a1200 	.word	0x007a1200

0800425c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004260:	4b03      	ldr	r3, [pc, #12]	; (8004270 <HAL_RCC_GetHCLKFreq+0x14>)
 8004262:	681b      	ldr	r3, [r3, #0]
}
 8004264:	4618      	mov	r0, r3
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	20000000 	.word	0x20000000

08004274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004278:	f7ff fff0 	bl	800425c <HAL_RCC_GetHCLKFreq>
 800427c:	4602      	mov	r2, r0
 800427e:	4b05      	ldr	r3, [pc, #20]	; (8004294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	0a9b      	lsrs	r3, r3, #10
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	4903      	ldr	r1, [pc, #12]	; (8004298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800428a:	5ccb      	ldrb	r3, [r1, r3]
 800428c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004290:	4618      	mov	r0, r3
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40023800 	.word	0x40023800
 8004298:	08008ac8 	.word	0x08008ac8

0800429c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d105      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d035      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042c4:	4b62      	ldr	r3, [pc, #392]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042ca:	f7fc fe63 	bl	8000f94 <HAL_GetTick>
 80042ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042d0:	e008      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042d2:	f7fc fe5f 	bl	8000f94 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e0b0      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042e4:	4b5b      	ldr	r3, [pc, #364]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1f0      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	019a      	lsls	r2, r3, #6
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	071b      	lsls	r3, r3, #28
 80042fc:	4955      	ldr	r1, [pc, #340]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004304:	4b52      	ldr	r3, [pc, #328]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004306:	2201      	movs	r2, #1
 8004308:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800430a:	f7fc fe43 	bl	8000f94 <HAL_GetTick>
 800430e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004310:	e008      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004312:	f7fc fe3f 	bl	8000f94 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e090      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004324:	4b4b      	ldr	r3, [pc, #300]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0f0      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 8083 	beq.w	8004444 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	4b44      	ldr	r3, [pc, #272]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	4a43      	ldr	r2, [pc, #268]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800434c:	6413      	str	r3, [r2, #64]	; 0x40
 800434e:	4b41      	ldr	r3, [pc, #260]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800435a:	4b3f      	ldr	r3, [pc, #252]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a3e      	ldr	r2, [pc, #248]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004364:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004366:	f7fc fe15 	bl	8000f94 <HAL_GetTick>
 800436a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800436c:	e008      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800436e:	f7fc fe11 	bl	8000f94 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e062      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004380:	4b35      	ldr	r3, [pc, #212]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0f0      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800438c:	4b31      	ldr	r3, [pc, #196]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800438e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004390:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004394:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d02f      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d028      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043aa:	4b2a      	ldr	r3, [pc, #168]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043b4:	4b29      	ldr	r3, [pc, #164]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043ba:	4b28      	ldr	r3, [pc, #160]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80043c0:	4a24      	ldr	r2, [pc, #144]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043c6:	4b23      	ldr	r3, [pc, #140]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d114      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80043d2:	f7fc fddf 	bl	8000f94 <HAL_GetTick>
 80043d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d8:	e00a      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043da:	f7fc fddb 	bl	8000f94 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e02a      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f0:	4b18      	ldr	r3, [pc, #96]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0ee      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004404:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004408:	d10d      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800440a:	4b12      	ldr	r3, [pc, #72]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800441a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800441e:	490d      	ldr	r1, [pc, #52]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004420:	4313      	orrs	r3, r2
 8004422:	608b      	str	r3, [r1, #8]
 8004424:	e005      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	4a0a      	ldr	r2, [pc, #40]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800442c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004430:	6093      	str	r3, [r2, #8]
 8004432:	4b08      	ldr	r3, [pc, #32]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004434:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800443e:	4905      	ldr	r1, [pc, #20]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004440:	4313      	orrs	r3, r2
 8004442:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	42470068 	.word	0x42470068
 8004454:	40023800 	.word	0x40023800
 8004458:	40007000 	.word	0x40007000
 800445c:	42470e40 	.word	0x42470e40

08004460 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d13e      	bne.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800447e:	4b23      	ldr	r3, [pc, #140]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d005      	beq.n	800449a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d12f      	bne.n	80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004494:	4b1e      	ldr	r3, [pc, #120]	; (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004496:	617b      	str	r3, [r7, #20]
          break;
 8004498:	e02f      	b.n	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800449a:	4b1c      	ldr	r3, [pc, #112]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044a6:	d108      	bne.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044a8:	4b18      	ldr	r3, [pc, #96]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044b0:	4a18      	ldr	r2, [pc, #96]	; (8004514 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80044b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	e007      	b.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044ba:	4b14      	ldr	r3, [pc, #80]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044c2:	4a15      	ldr	r2, [pc, #84]	; (8004518 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80044c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80044ca:	4b10      	ldr	r3, [pc, #64]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044d0:	099b      	lsrs	r3, r3, #6
 80044d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	fb02 f303 	mul.w	r3, r2, r3
 80044dc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80044de:	4b0b      	ldr	r3, [pc, #44]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044e4:	0f1b      	lsrs	r3, r3, #28
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f0:	617b      	str	r3, [r7, #20]
          break;
 80044f2:	e002      	b.n	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]
          break;
 80044f8:	bf00      	nop
        }
      }
      break;
 80044fa:	bf00      	nop
    }
  }
  return frequency;
 80044fc:	697b      	ldr	r3, [r7, #20]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	371c      	adds	r7, #28
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	40023800 	.word	0x40023800
 8004510:	00bb8000 	.word	0x00bb8000
 8004514:	007a1200 	.word	0x007a1200
 8004518:	00f42400 	.word	0x00f42400

0800451c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e07b      	b.n	8004626 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	2b00      	cmp	r3, #0
 8004534:	d108      	bne.n	8004548 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800453e:	d009      	beq.n	8004554 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	61da      	str	r2, [r3, #28]
 8004546:	e005      	b.n	8004554 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fc fb6a 	bl	8000c48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800458a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d8:	ea42 0103 	orr.w	r1, r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	0c1b      	lsrs	r3, r3, #16
 80045f2:	f003 0104 	and.w	r1, r3, #4
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	f003 0210 	and.w	r2, r3, #16
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69da      	ldr	r2, [r3, #28]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004614:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800462e:	b084      	sub	sp, #16
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	f107 001c 	add.w	r0, r7, #28
 800463c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004642:	2b01      	cmp	r3, #1
 8004644:	d122      	bne.n	800468c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800465a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800466e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004670:	2b01      	cmp	r3, #1
 8004672:	d105      	bne.n	8004680 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f9bf 	bl	8004a04 <USB_CoreReset>
 8004686:	4603      	mov	r3, r0
 8004688:	73fb      	strb	r3, [r7, #15]
 800468a:	e01a      	b.n	80046c2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f9b3 	bl	8004a04 <USB_CoreReset>
 800469e:	4603      	mov	r3, r0
 80046a0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80046a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d106      	bne.n	80046b6 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	639a      	str	r2, [r3, #56]	; 0x38
 80046b4:	e005      	b.n	80046c2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d10b      	bne.n	80046e0 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f043 0206 	orr.w	r2, r3, #6
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f043 0220 	orr.w	r2, r3, #32
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046ec:	b004      	add	sp, #16
 80046ee:	4770      	bx	lr

080046f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f043 0201 	orr.w	r2, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f023 0201 	bic.w	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d115      	bne.n	8004782 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004762:	2001      	movs	r0, #1
 8004764:	f7fc fc22 	bl	8000fac <HAL_Delay>
      ms++;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	3301      	adds	r3, #1
 800476c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f939 	bl	80049e6 <USB_GetMode>
 8004774:	4603      	mov	r3, r0
 8004776:	2b01      	cmp	r3, #1
 8004778:	d01e      	beq.n	80047b8 <USB_SetCurrentMode+0x84>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b31      	cmp	r3, #49	; 0x31
 800477e:	d9f0      	bls.n	8004762 <USB_SetCurrentMode+0x2e>
 8004780:	e01a      	b.n	80047b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004782:	78fb      	ldrb	r3, [r7, #3]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d115      	bne.n	80047b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004794:	2001      	movs	r0, #1
 8004796:	f7fc fc09 	bl	8000fac <HAL_Delay>
      ms++;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	3301      	adds	r3, #1
 800479e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f920 	bl	80049e6 <USB_GetMode>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <USB_SetCurrentMode+0x84>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b31      	cmp	r3, #49	; 0x31
 80047b0:	d9f0      	bls.n	8004794 <USB_SetCurrentMode+0x60>
 80047b2:	e001      	b.n	80047b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e005      	b.n	80047c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b32      	cmp	r3, #50	; 0x32
 80047bc:	d101      	bne.n	80047c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	3301      	adds	r3, #1
 80047de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4a13      	ldr	r2, [pc, #76]	; (8004830 <USB_FlushTxFifo+0x64>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d901      	bls.n	80047ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e01b      	b.n	8004824 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	daf2      	bge.n	80047da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	019b      	lsls	r3, r3, #6
 80047fc:	f043 0220 	orr.w	r2, r3, #32
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3301      	adds	r3, #1
 8004808:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4a08      	ldr	r2, [pc, #32]	; (8004830 <USB_FlushTxFifo+0x64>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d901      	bls.n	8004816 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e006      	b.n	8004824 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b20      	cmp	r3, #32
 8004820:	d0f0      	beq.n	8004804 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	00030d40 	.word	0x00030d40

08004834 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3301      	adds	r3, #1
 8004844:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4a11      	ldr	r2, [pc, #68]	; (8004890 <USB_FlushRxFifo+0x5c>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d901      	bls.n	8004852 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e018      	b.n	8004884 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	2b00      	cmp	r3, #0
 8004858:	daf2      	bge.n	8004840 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800485a:	2300      	movs	r3, #0
 800485c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2210      	movs	r2, #16
 8004862:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3301      	adds	r3, #1
 8004868:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4a08      	ldr	r2, [pc, #32]	; (8004890 <USB_FlushRxFifo+0x5c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d901      	bls.n	8004876 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e006      	b.n	8004884 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	2b10      	cmp	r3, #16
 8004880:	d0f0      	beq.n	8004864 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	00030d40 	.word	0x00030d40

08004894 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004894:	b480      	push	{r7}
 8004896:	b089      	sub	sp, #36	; 0x24
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	4611      	mov	r1, r2
 80048a0:	461a      	mov	r2, r3
 80048a2:	460b      	mov	r3, r1
 80048a4:	71fb      	strb	r3, [r7, #7]
 80048a6:	4613      	mov	r3, r2
 80048a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80048b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d123      	bne.n	8004902 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80048ba:	88bb      	ldrh	r3, [r7, #4]
 80048bc:	3303      	adds	r3, #3
 80048be:	089b      	lsrs	r3, r3, #2
 80048c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80048c2:	2300      	movs	r3, #0
 80048c4:	61bb      	str	r3, [r7, #24]
 80048c6:	e018      	b.n	80048fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80048c8:	79fb      	ldrb	r3, [r7, #7]
 80048ca:	031a      	lsls	r2, r3, #12
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d4:	461a      	mov	r2, r3
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	3301      	adds	r3, #1
 80048e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	3301      	adds	r3, #1
 80048e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	3301      	adds	r3, #1
 80048ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	3301      	adds	r3, #1
 80048f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	3301      	adds	r3, #1
 80048f8:	61bb      	str	r3, [r7, #24]
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d3e2      	bcc.n	80048c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3724      	adds	r7, #36	; 0x24
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004910:	b480      	push	{r7}
 8004912:	b08b      	sub	sp, #44	; 0x2c
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	4613      	mov	r3, r2
 800491c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004926:	88fb      	ldrh	r3, [r7, #6]
 8004928:	089b      	lsrs	r3, r3, #2
 800492a:	b29b      	uxth	r3, r3
 800492c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800492e:	88fb      	ldrh	r3, [r7, #6]
 8004930:	f003 0303 	and.w	r3, r3, #3
 8004934:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004936:	2300      	movs	r3, #0
 8004938:	623b      	str	r3, [r7, #32]
 800493a:	e014      	b.n	8004966 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	601a      	str	r2, [r3, #0]
    pDest++;
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	3301      	adds	r3, #1
 800494c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	3301      	adds	r3, #1
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	3301      	adds	r3, #1
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	3301      	adds	r3, #1
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	3301      	adds	r3, #1
 8004964:	623b      	str	r3, [r7, #32]
 8004966:	6a3a      	ldr	r2, [r7, #32]
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	429a      	cmp	r2, r3
 800496c:	d3e6      	bcc.n	800493c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800496e:	8bfb      	ldrh	r3, [r7, #30]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d01e      	beq.n	80049b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800497e:	461a      	mov	r2, r3
 8004980:	f107 0310 	add.w	r3, r7, #16
 8004984:	6812      	ldr	r2, [r2, #0]
 8004986:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	b2db      	uxtb	r3, r3
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
 8004994:	b2da      	uxtb	r2, r3
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	701a      	strb	r2, [r3, #0]
      i++;
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	3301      	adds	r3, #1
 800499e:	623b      	str	r3, [r7, #32]
      pDest++;
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	3301      	adds	r3, #1
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80049a6:	8bfb      	ldrh	r3, [r7, #30]
 80049a8:	3b01      	subs	r3, #1
 80049aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80049ac:	8bfb      	ldrh	r3, [r7, #30]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1ea      	bne.n	8004988 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	372c      	adds	r7, #44	; 0x2c
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4013      	ands	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80049d8:	68fb      	ldr	r3, [r7, #12]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f003 0301 	and.w	r3, r3, #1
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
	...

08004a04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	3301      	adds	r3, #1
 8004a14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4a13      	ldr	r2, [pc, #76]	; (8004a68 <USB_CoreReset+0x64>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d901      	bls.n	8004a22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e01b      	b.n	8004a5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	daf2      	bge.n	8004a10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f043 0201 	orr.w	r2, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4a09      	ldr	r2, [pc, #36]	; (8004a68 <USB_CoreReset+0x64>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d901      	bls.n	8004a4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e006      	b.n	8004a5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d0f0      	beq.n	8004a3a <USB_CoreReset+0x36>

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	00030d40 	.word	0x00030d40

08004a6c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b086      	sub	sp, #24
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	2300      	movs	r3, #0
 8004a90:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aae:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d018      	beq.n	8004af4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d10a      	bne.n	8004ade <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ad6:	f043 0304 	orr.w	r3, r3, #4
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	e014      	b.n	8004b08 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004aec:	f023 0304 	bic.w	r3, r3, #4
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	e009      	b.n	8004b08 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b02:	f023 0304 	bic.w	r3, r3, #4
 8004b06:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b08:	2110      	movs	r1, #16
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff fe5e 	bl	80047cc <USB_FlushTxFifo>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7ff fe8a 	bl	8004834 <USB_FlushRxFifo>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	e015      	b.n	8004b5c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b42:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b50:	461a      	mov	r2, r3
 8004b52:	2300      	movs	r3, #0
 8004b54:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	613b      	str	r3, [r7, #16]
 8004b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d3e5      	bcc.n	8004b30 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b70:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00b      	beq.n	8004b96 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b84:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a13      	ldr	r2, [pc, #76]	; (8004bd8 <USB_HostInit+0x16c>)
 8004b8a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a13      	ldr	r2, [pc, #76]	; (8004bdc <USB_HostInit+0x170>)
 8004b90:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004b94:	e009      	b.n	8004baa <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2280      	movs	r2, #128	; 0x80
 8004b9a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a10      	ldr	r2, [pc, #64]	; (8004be0 <USB_HostInit+0x174>)
 8004ba0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a0f      	ldr	r2, [pc, #60]	; (8004be4 <USB_HostInit+0x178>)
 8004ba6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d105      	bne.n	8004bbc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	f043 0210 	orr.w	r2, r3, #16
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	699a      	ldr	r2, [r3, #24]
 8004bc0:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <USB_HostInit+0x17c>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bd4:	b004      	add	sp, #16
 8004bd6:	4770      	bx	lr
 8004bd8:	01000200 	.word	0x01000200
 8004bdc:	00e00300 	.word	0x00e00300
 8004be0:	00600080 	.word	0x00600080
 8004be4:	004000e0 	.word	0x004000e0
 8004be8:	a3200008 	.word	0xa3200008

08004bec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c0a:	f023 0303 	bic.w	r3, r3, #3
 8004c0e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	68f9      	ldr	r1, [r7, #12]
 8004c20:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c24:	4313      	orrs	r3, r2
 8004c26:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d107      	bne.n	8004c3e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c34:	461a      	mov	r2, r3
 8004c36:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004c3a:	6053      	str	r3, [r2, #4]
 8004c3c:	e009      	b.n	8004c52 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d106      	bne.n	8004c52 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004c50:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c80:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c8e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004c90:	2064      	movs	r0, #100	; 0x64
 8004c92:	f7fc f98b 	bl	8000fac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ca2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004ca4:	200a      	movs	r0, #10
 8004ca6:	f7fc f981 	bl	8000fac <HAL_Delay>

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004cd8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d109      	bne.n	8004cf8 <USB_DriveVbus+0x44>
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d106      	bne.n	8004cf8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004cf2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cf6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d02:	d109      	bne.n	8004d18 <USB_DriveVbus+0x64>
 8004d04:	78fb      	ldrb	r3, [r7, #3]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d106      	bne.n	8004d18 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d16:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b085      	sub	sp, #20
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	0c5b      	lsrs	r3, r3, #17
 8004d44:	f003 0303 	and.w	r3, r3, #3
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	b29b      	uxth	r3, r3
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
	...

08004d78 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b088      	sub	sp, #32
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	4608      	mov	r0, r1
 8004d82:	4611      	mov	r1, r2
 8004d84:	461a      	mov	r2, r3
 8004d86:	4603      	mov	r3, r0
 8004d88:	70fb      	strb	r3, [r7, #3]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	70bb      	strb	r3, [r7, #2]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004d9a:	78fb      	ldrb	r3, [r7, #3]
 8004d9c:	015a      	lsls	r2, r3, #5
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da6:	461a      	mov	r2, r3
 8004da8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dac:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004dae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d87e      	bhi.n	8004eb4 <USB_HC_Init+0x13c>
 8004db6:	a201      	add	r2, pc, #4	; (adr r2, 8004dbc <USB_HC_Init+0x44>)
 8004db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbc:	08004dcd 	.word	0x08004dcd
 8004dc0:	08004e77 	.word	0x08004e77
 8004dc4:	08004dcd 	.word	0x08004dcd
 8004dc8:	08004e39 	.word	0x08004e39
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004dcc:	78fb      	ldrb	r3, [r7, #3]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd8:	461a      	mov	r2, r3
 8004dda:	f240 439d 	movw	r3, #1181	; 0x49d
 8004dde:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004de0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	da10      	bge.n	8004e0a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	78fa      	ldrb	r2, [r7, #3]
 8004df8:	0151      	lsls	r1, r2, #5
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	440a      	add	r2, r1
 8004dfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e06:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004e08:	e057      	b.n	8004eba <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d051      	beq.n	8004eba <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004e16:	78fb      	ldrb	r3, [r7, #3]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	78fa      	ldrb	r2, [r7, #3]
 8004e26:	0151      	lsls	r1, r2, #5
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	440a      	add	r2, r1
 8004e2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e30:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e34:	60d3      	str	r3, [r2, #12]
      break;
 8004e36:	e040      	b.n	8004eba <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e44:	461a      	mov	r2, r3
 8004e46:	f240 639d 	movw	r3, #1693	; 0x69d
 8004e4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	da34      	bge.n	8004ebe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004e54:	78fb      	ldrb	r3, [r7, #3]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	78fa      	ldrb	r2, [r7, #3]
 8004e64:	0151      	lsls	r1, r2, #5
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	440a      	add	r2, r1
 8004e6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e72:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004e74:	e023      	b.n	8004ebe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e76:	78fb      	ldrb	r3, [r7, #3]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e82:	461a      	mov	r2, r3
 8004e84:	f240 2325 	movw	r3, #549	; 0x225
 8004e88:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	da17      	bge.n	8004ec2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004e92:	78fb      	ldrb	r3, [r7, #3]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	78fa      	ldrb	r2, [r7, #3]
 8004ea2:	0151      	lsls	r1, r2, #5
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	440a      	add	r2, r1
 8004ea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eac:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004eb0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004eb2:	e006      	b.n	8004ec2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	77fb      	strb	r3, [r7, #31]
      break;
 8004eb8:	e004      	b.n	8004ec4 <USB_HC_Init+0x14c>
      break;
 8004eba:	bf00      	nop
 8004ebc:	e002      	b.n	8004ec4 <USB_HC_Init+0x14c>
      break;
 8004ebe:	bf00      	nop
 8004ec0:	e000      	b.n	8004ec4 <USB_HC_Init+0x14c>
      break;
 8004ec2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004ec4:	78fb      	ldrb	r3, [r7, #3]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	78fa      	ldrb	r2, [r7, #3]
 8004ed4:	0151      	lsls	r1, r2, #5
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	440a      	add	r2, r1
 8004eda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ede:	f043 0302 	orr.w	r3, r3, #2
 8004ee2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eea:	699a      	ldr	r2, [r3, #24]
 8004eec:	78fb      	ldrb	r3, [r7, #3]
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef8:	6939      	ldr	r1, [r7, #16]
 8004efa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004efe:	4313      	orrs	r3, r2
 8004f00:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004f0e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	da03      	bge.n	8004f1e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f1a:	61bb      	str	r3, [r7, #24]
 8004f1c:	e001      	b.n	8004f22 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7ff feff 	bl	8004d26 <USB_GetHostSpeed>
 8004f28:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004f2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d106      	bne.n	8004f40 <USB_HC_Init+0x1c8>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d003      	beq.n	8004f40 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004f38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	e001      	b.n	8004f44 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f44:	787b      	ldrb	r3, [r7, #1]
 8004f46:	059b      	lsls	r3, r3, #22
 8004f48:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004f4c:	78bb      	ldrb	r3, [r7, #2]
 8004f4e:	02db      	lsls	r3, r3, #11
 8004f50:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f54:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004f56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f5a:	049b      	lsls	r3, r3, #18
 8004f5c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004f60:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f62:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004f64:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004f68:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f6e:	78fb      	ldrb	r3, [r7, #3]
 8004f70:	0159      	lsls	r1, r3, #5
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	440b      	add	r3, r1
 8004f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f80:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004f82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d003      	beq.n	8004f92 <USB_HC_Init+0x21a>
 8004f8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d10f      	bne.n	8004fb2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004f92:	78fb      	ldrb	r3, [r7, #3]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	78fa      	ldrb	r2, [r7, #3]
 8004fa2:	0151      	lsls	r1, r2, #5
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	440a      	add	r2, r1
 8004fa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fb0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004fb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3720      	adds	r7, #32
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08c      	sub	sp, #48	; 0x30
 8004fc0:	af02      	add	r7, sp, #8
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	785b      	ldrb	r3, [r3, #1]
 8004fd2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fd8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d02d      	beq.n	8005042 <USB_HC_StartXfer+0x86>
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	791b      	ldrb	r3, [r3, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d129      	bne.n	8005042 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d117      	bne.n	8005024 <USB_HC_StartXfer+0x68>
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	79db      	ldrb	r3, [r3, #7]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <USB_HC_StartXfer+0x48>
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	79db      	ldrb	r3, [r3, #7]
 8005000:	2b02      	cmp	r3, #2
 8005002:	d10f      	bne.n	8005024 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	4413      	add	r3, r2
 800500c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	0151      	lsls	r1, r2, #5
 8005016:	6a3a      	ldr	r2, [r7, #32]
 8005018:	440a      	add	r2, r1
 800501a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800501e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005022:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10b      	bne.n	8005042 <USB_HC_StartXfer+0x86>
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	795b      	ldrb	r3, [r3, #5]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d107      	bne.n	8005042 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	785b      	ldrb	r3, [r3, #1]
 8005036:	4619      	mov	r1, r3
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 fa0f 	bl	800545c <USB_DoPing>
      return HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	e0f8      	b.n	8005234 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d018      	beq.n	800507c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	8912      	ldrh	r2, [r2, #8]
 8005052:	4413      	add	r3, r2
 8005054:	3b01      	subs	r3, #1
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	8912      	ldrh	r2, [r2, #8]
 800505a:	fbb3 f3f2 	udiv	r3, r3, r2
 800505e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005060:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005062:	8b7b      	ldrh	r3, [r7, #26]
 8005064:	429a      	cmp	r2, r3
 8005066:	d90b      	bls.n	8005080 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005068:	8b7b      	ldrh	r3, [r7, #26]
 800506a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800506c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	8912      	ldrh	r2, [r2, #8]
 8005072:	fb03 f202 	mul.w	r2, r3, r2
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	611a      	str	r2, [r3, #16]
 800507a:	e001      	b.n	8005080 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800507c:	2301      	movs	r3, #1
 800507e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	78db      	ldrb	r3, [r3, #3]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d007      	beq.n	8005098 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005088:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	8912      	ldrh	r2, [r2, #8]
 800508e:	fb03 f202 	mul.w	r2, r3, r2
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	611a      	str	r2, [r3, #16]
 8005096:	e003      	b.n	80050a0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	695a      	ldr	r2, [r3, #20]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80050a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050aa:	04d9      	lsls	r1, r3, #19
 80050ac:	4b63      	ldr	r3, [pc, #396]	; (800523c <USB_HC_StartXfer+0x280>)
 80050ae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80050b0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	7a9b      	ldrb	r3, [r3, #10]
 80050b6:	075b      	lsls	r3, r3, #29
 80050b8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80050bc:	69f9      	ldr	r1, [r7, #28]
 80050be:	0148      	lsls	r0, r1, #5
 80050c0:	6a39      	ldr	r1, [r7, #32]
 80050c2:	4401      	add	r1, r0
 80050c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80050c8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80050ca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80050cc:	79fb      	ldrb	r3, [r7, #7]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d009      	beq.n	80050e6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	68d9      	ldr	r1, [r3, #12]
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e2:	460a      	mov	r2, r1
 80050e4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	bf0c      	ite	eq
 80050f6:	2301      	moveq	r3, #1
 80050f8:	2300      	movne	r3, #0
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	4413      	add	r3, r2
 8005106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	69fa      	ldr	r2, [r7, #28]
 800510e:	0151      	lsls	r1, r2, #5
 8005110:	6a3a      	ldr	r2, [r7, #32]
 8005112:	440a      	add	r2, r1
 8005114:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005118:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800511c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	4413      	add	r3, r2
 8005126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	7e7b      	ldrb	r3, [r7, #25]
 800512e:	075b      	lsls	r3, r3, #29
 8005130:	69f9      	ldr	r1, [r7, #28]
 8005132:	0148      	lsls	r0, r1, #5
 8005134:	6a39      	ldr	r1, [r7, #32]
 8005136:	4401      	add	r1, r0
 8005138:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800513c:	4313      	orrs	r3, r2
 800513e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	4413      	add	r3, r2
 8005148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005156:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	78db      	ldrb	r3, [r3, #3]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d004      	beq.n	800516a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005166:	613b      	str	r3, [r7, #16]
 8005168:	e003      	b.n	8005172 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005170:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005178:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	4413      	add	r3, r2
 8005182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005186:	461a      	mov	r2, r3
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	e04e      	b.n	8005234 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	78db      	ldrb	r3, [r3, #3]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d149      	bne.n	8005232 <USB_HC_StartXfer+0x276>
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d045      	beq.n	8005232 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	79db      	ldrb	r3, [r3, #7]
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d830      	bhi.n	8005210 <USB_HC_StartXfer+0x254>
 80051ae:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <USB_HC_StartXfer+0x1f8>)
 80051b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b4:	080051c5 	.word	0x080051c5
 80051b8:	080051e9 	.word	0x080051e9
 80051bc:	080051c5 	.word	0x080051c5
 80051c0:	080051e9 	.word	0x080051e9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	3303      	adds	r3, #3
 80051ca:	089b      	lsrs	r3, r3, #2
 80051cc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80051ce:	8afa      	ldrh	r2, [r7, #22]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d91c      	bls.n	8005214 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	f043 0220 	orr.w	r2, r3, #32
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	619a      	str	r2, [r3, #24]
        }
        break;
 80051e6:	e015      	b.n	8005214 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	3303      	adds	r3, #3
 80051ee:	089b      	lsrs	r3, r3, #2
 80051f0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80051f2:	8afa      	ldrh	r2, [r7, #22]
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	429a      	cmp	r2, r3
 8005200:	d90a      	bls.n	8005218 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	619a      	str	r2, [r3, #24]
        }
        break;
 800520e:	e003      	b.n	8005218 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005210:	bf00      	nop
 8005212:	e002      	b.n	800521a <USB_HC_StartXfer+0x25e>
        break;
 8005214:	bf00      	nop
 8005216:	e000      	b.n	800521a <USB_HC_StartXfer+0x25e>
        break;
 8005218:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	68d9      	ldr	r1, [r3, #12]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	785a      	ldrb	r2, [r3, #1]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	b29b      	uxth	r3, r3
 8005228:	2000      	movs	r0, #0
 800522a:	9000      	str	r0, [sp, #0]
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f7ff fb31 	bl	8004894 <USB_WritePacket>
  }

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3728      	adds	r7, #40	; 0x28
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	1ff80000 	.word	0x1ff80000

08005240 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	b29b      	uxth	r3, r3
}
 8005256:	4618      	mov	r0, r3
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005262:	b480      	push	{r7}
 8005264:	b089      	sub	sp, #36	; 0x24
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	460b      	mov	r3, r1
 800526c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005272:	78fb      	ldrb	r3, [r7, #3]
 8005274:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	4413      	add	r3, r2
 8005282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	0c9b      	lsrs	r3, r3, #18
 800528a:	f003 0303 	and.w	r3, r3, #3
 800528e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	4413      	add	r3, r2
 8005298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	0fdb      	lsrs	r3, r3, #31
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	2b20      	cmp	r3, #32
 80052b0:	d104      	bne.n	80052bc <USB_HC_Halt+0x5a>
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80052b8:	2300      	movs	r3, #0
 80052ba:	e0c8      	b.n	800544e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d002      	beq.n	80052c8 <USB_HC_Halt+0x66>
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d163      	bne.n	8005390 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69ba      	ldr	r2, [r7, #24]
 80052d8:	0151      	lsls	r1, r2, #5
 80052da:	69fa      	ldr	r2, [r7, #28]
 80052dc:	440a      	add	r2, r1
 80052de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052e6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f003 0320 	and.w	r3, r3, #32
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f040 80ab 	bne.w	800544c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d133      	bne.n	800536a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	4413      	add	r3, r2
 800530a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	0151      	lsls	r1, r2, #5
 8005314:	69fa      	ldr	r2, [r7, #28]
 8005316:	440a      	add	r2, r1
 8005318:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800531c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005320:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	4413      	add	r3, r2
 800532a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	0151      	lsls	r1, r2, #5
 8005334:	69fa      	ldr	r2, [r7, #28]
 8005336:	440a      	add	r2, r1
 8005338:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800533c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005340:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	3301      	adds	r3, #1
 8005346:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800534e:	d81d      	bhi.n	800538c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	4413      	add	r3, r2
 8005358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005362:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005366:	d0ec      	beq.n	8005342 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005368:	e070      	b.n	800544c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	4413      	add	r3, r2
 8005372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	0151      	lsls	r1, r2, #5
 800537c:	69fa      	ldr	r2, [r7, #28]
 800537e:	440a      	add	r2, r1
 8005380:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005384:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005388:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800538a:	e05f      	b.n	800544c <USB_HC_Halt+0x1ea>
            break;
 800538c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800538e:	e05d      	b.n	800544c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	4413      	add	r3, r2
 8005398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	0151      	lsls	r1, r2, #5
 80053a2:	69fa      	ldr	r2, [r7, #28]
 80053a4:	440a      	add	r2, r1
 80053a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053ae:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d133      	bne.n	8005428 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	0151      	lsls	r1, r2, #5
 80053d2:	69fa      	ldr	r2, [r7, #28]
 80053d4:	440a      	add	r2, r1
 80053d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053de:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	0151      	lsls	r1, r2, #5
 80053f2:	69fa      	ldr	r2, [r7, #28]
 80053f4:	440a      	add	r2, r1
 80053f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053fe:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3301      	adds	r3, #1
 8005404:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800540c:	d81d      	bhi.n	800544a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	4413      	add	r3, r2
 8005416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005420:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005424:	d0ec      	beq.n	8005400 <USB_HC_Halt+0x19e>
 8005426:	e011      	b.n	800544c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	4413      	add	r3, r2
 8005430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	0151      	lsls	r1, r2, #5
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	440a      	add	r2, r1
 800543e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005442:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	e000      	b.n	800544c <USB_HC_Halt+0x1ea>
          break;
 800544a:	bf00      	nop
    }
  }

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3724      	adds	r7, #36	; 0x24
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
	...

0800545c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	460b      	mov	r3, r1
 8005466:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800546c:	78fb      	ldrb	r3, [r7, #3]
 800546e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005470:	2301      	movs	r3, #1
 8005472:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	04da      	lsls	r2, r3, #19
 8005478:	4b15      	ldr	r3, [pc, #84]	; (80054d0 <USB_DoPing+0x74>)
 800547a:	4013      	ands	r3, r2
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	0151      	lsls	r1, r2, #5
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	440a      	add	r2, r1
 8005484:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005488:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800548c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	4413      	add	r3, r2
 8005496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054a4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054ac:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ba:	461a      	mov	r2, r3
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	371c      	adds	r7, #28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	1ff80000 	.word	0x1ff80000

080054d4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7ff f912 	bl	8004712 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054ee:	2110      	movs	r1, #16
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f7ff f96b 	bl	80047cc <USB_FlushTxFifo>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7ff f997 	bl	8004834 <USB_FlushRxFifo>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005510:	2300      	movs	r3, #0
 8005512:	61bb      	str	r3, [r7, #24]
 8005514:	e01f      	b.n	8005556 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	4413      	add	r3, r2
 800551e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800552c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005534:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800553c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	4413      	add	r3, r2
 8005546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554a:	461a      	mov	r2, r3
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	3301      	adds	r3, #1
 8005554:	61bb      	str	r3, [r7, #24]
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	2b0f      	cmp	r3, #15
 800555a:	d9dc      	bls.n	8005516 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800555c:	2300      	movs	r3, #0
 800555e:	61bb      	str	r3, [r7, #24]
 8005560:	e034      	b.n	80055cc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	4413      	add	r3, r2
 800556a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005578:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005580:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005588:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	4413      	add	r3, r2
 8005592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005596:	461a      	mov	r2, r3
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	3301      	adds	r3, #1
 80055a0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055a8:	d80c      	bhi.n	80055c4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055c0:	d0ec      	beq.n	800559c <USB_StopHost+0xc8>
 80055c2:	e000      	b.n	80055c6 <USB_StopHost+0xf2>
        break;
 80055c4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	3301      	adds	r3, #1
 80055ca:	61bb      	str	r3, [r7, #24]
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	2b0f      	cmp	r3, #15
 80055d0:	d9c7      	bls.n	8005562 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055d8:	461a      	mov	r2, r3
 80055da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055de:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055e6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7ff f881 	bl	80046f0 <USB_EnableGlobalInt>

  return ret;
 80055ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3720      	adds	r7, #32
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80055f8:	b590      	push	{r4, r7, lr}
 80055fa:	b089      	sub	sp, #36	; 0x24
 80055fc:	af04      	add	r7, sp, #16
 80055fe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005600:	2301      	movs	r3, #1
 8005602:	2202      	movs	r2, #2
 8005604:	2102      	movs	r1, #2
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fc66 	bl	8005ed8 <USBH_FindInterface>
 800560c:	4603      	mov	r3, r0
 800560e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005610:	7bfb      	ldrb	r3, [r7, #15]
 8005612:	2bff      	cmp	r3, #255	; 0xff
 8005614:	d002      	beq.n	800561c <USBH_CDC_InterfaceInit+0x24>
 8005616:	7bfb      	ldrb	r3, [r7, #15]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d901      	bls.n	8005620 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800561c:	2302      	movs	r3, #2
 800561e:	e13d      	b.n	800589c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005620:	7bfb      	ldrb	r3, [r7, #15]
 8005622:	4619      	mov	r1, r3
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 fc3b 	bl	8005ea0 <USBH_SelectInterface>
 800562a:	4603      	mov	r3, r0
 800562c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800562e:	7bbb      	ldrb	r3, [r7, #14]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005634:	2302      	movs	r3, #2
 8005636:	e131      	b.n	800589c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800563e:	2050      	movs	r0, #80	; 0x50
 8005640:	f002 fad2 	bl	8007be8 <malloc>
 8005644:	4603      	mov	r3, r0
 8005646:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005658:	2302      	movs	r3, #2
 800565a:	e11f      	b.n	800589c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800565c:	2250      	movs	r2, #80	; 0x50
 800565e:	2100      	movs	r1, #0
 8005660:	68b8      	ldr	r0, [r7, #8]
 8005662:	f002 fd44 	bl	80080ee <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	211a      	movs	r1, #26
 800566c:	fb01 f303 	mul.w	r3, r1, r3
 8005670:	4413      	add	r3, r2
 8005672:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	b25b      	sxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	da15      	bge.n	80056aa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	211a      	movs	r1, #26
 8005684:	fb01 f303 	mul.w	r3, r1, r3
 8005688:	4413      	add	r3, r2
 800568a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800568e:	781a      	ldrb	r2, [r3, #0]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005694:	7bfb      	ldrb	r3, [r7, #15]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	211a      	movs	r1, #26
 800569a:	fb01 f303 	mul.w	r3, r1, r3
 800569e:	4413      	add	r3, r2
 80056a0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80056a4:	881a      	ldrh	r2, [r3, #0]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	785b      	ldrb	r3, [r3, #1]
 80056ae:	4619      	mov	r1, r3
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f001 ff2e 	bl	8007512 <USBH_AllocPipe>
 80056b6:	4603      	mov	r3, r0
 80056b8:	461a      	mov	r2, r3
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	7819      	ldrb	r1, [r3, #0]
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	7858      	ldrb	r0, [r3, #1]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	8952      	ldrh	r2, [r2, #10]
 80056d6:	9202      	str	r2, [sp, #8]
 80056d8:	2203      	movs	r2, #3
 80056da:	9201      	str	r2, [sp, #4]
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	4623      	mov	r3, r4
 80056e0:	4602      	mov	r2, r0
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f001 fee6 	bl	80074b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2200      	movs	r2, #0
 80056ee:	4619      	mov	r1, r3
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f002 f9f5 	bl	8007ae0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80056f6:	2300      	movs	r3, #0
 80056f8:	2200      	movs	r2, #0
 80056fa:	210a      	movs	r1, #10
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 fbeb 	bl	8005ed8 <USBH_FindInterface>
 8005702:	4603      	mov	r3, r0
 8005704:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005706:	7bfb      	ldrb	r3, [r7, #15]
 8005708:	2bff      	cmp	r3, #255	; 0xff
 800570a:	d002      	beq.n	8005712 <USBH_CDC_InterfaceInit+0x11a>
 800570c:	7bfb      	ldrb	r3, [r7, #15]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d901      	bls.n	8005716 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005712:	2302      	movs	r3, #2
 8005714:	e0c2      	b.n	800589c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005716:	7bfb      	ldrb	r3, [r7, #15]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	211a      	movs	r1, #26
 800571c:	fb01 f303 	mul.w	r3, r1, r3
 8005720:	4413      	add	r3, r2
 8005722:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	b25b      	sxtb	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	da16      	bge.n	800575c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800572e:	7bfb      	ldrb	r3, [r7, #15]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	211a      	movs	r1, #26
 8005734:	fb01 f303 	mul.w	r3, r1, r3
 8005738:	4413      	add	r3, r2
 800573a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800573e:	781a      	ldrb	r2, [r3, #0]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005744:	7bfb      	ldrb	r3, [r7, #15]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	211a      	movs	r1, #26
 800574a:	fb01 f303 	mul.w	r3, r1, r3
 800574e:	4413      	add	r3, r2
 8005750:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005754:	881a      	ldrh	r2, [r3, #0]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	835a      	strh	r2, [r3, #26]
 800575a:	e015      	b.n	8005788 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	211a      	movs	r1, #26
 8005762:	fb01 f303 	mul.w	r3, r1, r3
 8005766:	4413      	add	r3, r2
 8005768:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800576c:	781a      	ldrb	r2, [r3, #0]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005772:	7bfb      	ldrb	r3, [r7, #15]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	211a      	movs	r1, #26
 8005778:	fb01 f303 	mul.w	r3, r1, r3
 800577c:	4413      	add	r3, r2
 800577e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005782:	881a      	ldrh	r2, [r3, #0]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	211a      	movs	r1, #26
 800578e:	fb01 f303 	mul.w	r3, r1, r3
 8005792:	4413      	add	r3, r2
 8005794:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	b25b      	sxtb	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	da16      	bge.n	80057ce <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	211a      	movs	r1, #26
 80057a6:	fb01 f303 	mul.w	r3, r1, r3
 80057aa:	4413      	add	r3, r2
 80057ac:	f203 3356 	addw	r3, r3, #854	; 0x356
 80057b0:	781a      	ldrb	r2, [r3, #0]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	211a      	movs	r1, #26
 80057bc:	fb01 f303 	mul.w	r3, r1, r3
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80057c6:	881a      	ldrh	r2, [r3, #0]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	835a      	strh	r2, [r3, #26]
 80057cc:	e015      	b.n	80057fa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	211a      	movs	r1, #26
 80057d4:	fb01 f303 	mul.w	r3, r1, r3
 80057d8:	4413      	add	r3, r2
 80057da:	f203 3356 	addw	r3, r3, #854	; 0x356
 80057de:	781a      	ldrb	r2, [r3, #0]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	211a      	movs	r1, #26
 80057ea:	fb01 f303 	mul.w	r3, r1, r3
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80057f4:	881a      	ldrh	r2, [r3, #0]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	7b9b      	ldrb	r3, [r3, #14]
 80057fe:	4619      	mov	r1, r3
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f001 fe86 	bl	8007512 <USBH_AllocPipe>
 8005806:	4603      	mov	r3, r0
 8005808:	461a      	mov	r2, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	7bdb      	ldrb	r3, [r3, #15]
 8005812:	4619      	mov	r1, r3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f001 fe7c 	bl	8007512 <USBH_AllocPipe>
 800581a:	4603      	mov	r3, r0
 800581c:	461a      	mov	r2, r3
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	7b59      	ldrb	r1, [r3, #13]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	7b98      	ldrb	r0, [r3, #14]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	8b12      	ldrh	r2, [r2, #24]
 800583a:	9202      	str	r2, [sp, #8]
 800583c:	2202      	movs	r2, #2
 800583e:	9201      	str	r2, [sp, #4]
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	4623      	mov	r3, r4
 8005844:	4602      	mov	r2, r0
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f001 fe34 	bl	80074b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	7b19      	ldrb	r1, [r3, #12]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	7bd8      	ldrb	r0, [r3, #15]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	8b52      	ldrh	r2, [r2, #26]
 8005864:	9202      	str	r2, [sp, #8]
 8005866:	2202      	movs	r2, #2
 8005868:	9201      	str	r2, [sp, #4]
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	4623      	mov	r3, r4
 800586e:	4602      	mov	r2, r0
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f001 fe1f 	bl	80074b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	7b5b      	ldrb	r3, [r3, #13]
 8005882:	2200      	movs	r2, #0
 8005884:	4619      	mov	r1, r3
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f002 f92a 	bl	8007ae0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	7b1b      	ldrb	r3, [r3, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	4619      	mov	r1, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f002 f923 	bl	8007ae0 <USBH_LL_SetToggle>

  return USBH_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd90      	pop	{r4, r7, pc}

080058a4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00e      	beq.n	80058dc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	4619      	mov	r1, r3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f001 fe14 	bl	80074f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	4619      	mov	r1, r3
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f001 fe3f 	bl	8007554 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	7b1b      	ldrb	r3, [r3, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00e      	beq.n	8005902 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	7b1b      	ldrb	r3, [r3, #12]
 80058e8:	4619      	mov	r1, r3
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f001 fe01 	bl	80074f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	7b1b      	ldrb	r3, [r3, #12]
 80058f4:	4619      	mov	r1, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f001 fe2c 	bl	8007554 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	7b5b      	ldrb	r3, [r3, #13]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00e      	beq.n	8005928 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	7b5b      	ldrb	r3, [r3, #13]
 800590e:	4619      	mov	r1, r3
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f001 fdee 	bl	80074f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	7b5b      	ldrb	r3, [r3, #13]
 800591a:	4619      	mov	r1, r3
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f001 fe19 	bl	8007554 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00b      	beq.n	800594c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	4618      	mov	r0, r3
 800593e:	f002 f95b 	bl	8007bf8 <free>
    phost->pActiveClass->pData = 0U;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005948:	2200      	movs	r2, #0
 800594a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	3340      	adds	r3, #64	; 0x40
 800596c:	4619      	mov	r1, r3
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f8b1 	bl	8005ad6 <GetLineCoding>
 8005974:	4603      	mov	r3, r0
 8005976:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005978:	7afb      	ldrb	r3, [r7, #11]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d105      	bne.n	800598a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005984:	2102      	movs	r1, #2
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800598a:	7afb      	ldrb	r3, [r7, #11]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800599c:	2301      	movs	r3, #1
 800599e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80059a0:	2300      	movs	r3, #0
 80059a2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80059b4:	2b04      	cmp	r3, #4
 80059b6:	d877      	bhi.n	8005aa8 <USBH_CDC_Process+0x114>
 80059b8:	a201      	add	r2, pc, #4	; (adr r2, 80059c0 <USBH_CDC_Process+0x2c>)
 80059ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059be:	bf00      	nop
 80059c0:	080059d5 	.word	0x080059d5
 80059c4:	080059db 	.word	0x080059db
 80059c8:	08005a0b 	.word	0x08005a0b
 80059cc:	08005a7f 	.word	0x08005a7f
 80059d0:	08005a8d 	.word	0x08005a8d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80059d4:	2300      	movs	r3, #0
 80059d6:	73fb      	strb	r3, [r7, #15]
      break;
 80059d8:	e06d      	b.n	8005ab6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059de:	4619      	mov	r1, r3
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f897 	bl	8005b14 <SetLineCoding>
 80059e6:	4603      	mov	r3, r0
 80059e8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80059ea:	7bbb      	ldrb	r3, [r7, #14]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d104      	bne.n	80059fa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80059f8:	e058      	b.n	8005aac <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80059fa:	7bbb      	ldrb	r3, [r7, #14]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d055      	beq.n	8005aac <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2204      	movs	r2, #4
 8005a04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005a08:	e050      	b.n	8005aac <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	3340      	adds	r3, #64	; 0x40
 8005a0e:	4619      	mov	r1, r3
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f860 	bl	8005ad6 <GetLineCoding>
 8005a16:	4603      	mov	r3, r0
 8005a18:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005a1a:	7bbb      	ldrb	r3, [r7, #14]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d126      	bne.n	8005a6e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a32:	791b      	ldrb	r3, [r3, #4]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d13b      	bne.n	8005ab0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a42:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d133      	bne.n	8005ab0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a52:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d12b      	bne.n	8005ab0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a60:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d124      	bne.n	8005ab0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f958 	bl	8005d1c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005a6c:	e020      	b.n	8005ab0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005a6e:	7bbb      	ldrb	r3, [r7, #14]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d01d      	beq.n	8005ab0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2204      	movs	r2, #4
 8005a78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005a7c:	e018      	b.n	8005ab0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f867 	bl	8005b52 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f8da 	bl	8005c3e <CDC_ProcessReception>
      break;
 8005a8a:	e014      	b.n	8005ab6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 ffef 	bl	8006a72 <USBH_ClrFeature>
 8005a94:	4603      	mov	r3, r0
 8005a96:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005a98:	7bbb      	ldrb	r3, [r7, #14]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10a      	bne.n	8005ab4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005aa6:	e005      	b.n	8005ab4 <USBH_CDC_Process+0x120>

    default:
      break;
 8005aa8:	bf00      	nop
 8005aaa:	e004      	b.n	8005ab6 <USBH_CDC_Process+0x122>
      break;
 8005aac:	bf00      	nop
 8005aae:	e002      	b.n	8005ab6 <USBH_CDC_Process+0x122>
      break;
 8005ab0:	bf00      	nop
 8005ab2:	e000      	b.n	8005ab6 <USBH_CDC_Process+0x122>
      break;
 8005ab4:	bf00      	nop

  }

  return status;
 8005ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b082      	sub	sp, #8
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
 8005ade:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	22a1      	movs	r2, #161	; 0xa1
 8005ae4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2221      	movs	r2, #33	; 0x21
 8005aea:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2207      	movs	r2, #7
 8005afc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2207      	movs	r2, #7
 8005b02:	4619      	mov	r1, r3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f001 fa83 	bl	8007010 <USBH_CtlReq>
 8005b0a:	4603      	mov	r3, r0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2221      	movs	r2, #33	; 0x21
 8005b22:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2220      	movs	r2, #32
 8005b28:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2207      	movs	r2, #7
 8005b3a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2207      	movs	r2, #7
 8005b40:	4619      	mov	r1, r3
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f001 fa64 	bl	8007010 <USBH_CtlReq>
 8005b48:	4603      	mov	r3, r0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b086      	sub	sp, #24
 8005b56:	af02      	add	r7, sp, #8
 8005b58:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005b64:	2300      	movs	r3, #0
 8005b66:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d002      	beq.n	8005b78 <CDC_ProcessTransmission+0x26>
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d023      	beq.n	8005bbe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005b76:	e05e      	b.n	8005c36 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	8b12      	ldrh	r2, [r2, #24]
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d90b      	bls.n	8005b9c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	69d9      	ldr	r1, [r3, #28]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8b1a      	ldrh	r2, [r3, #24]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	7b5b      	ldrb	r3, [r3, #13]
 8005b90:	2001      	movs	r0, #1
 8005b92:	9000      	str	r0, [sp, #0]
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f001 fc4a 	bl	800742e <USBH_BulkSendData>
 8005b9a:	e00b      	b.n	8005bb4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	7b5b      	ldrb	r3, [r3, #13]
 8005baa:	2001      	movs	r0, #1
 8005bac:	9000      	str	r0, [sp, #0]
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f001 fc3d 	bl	800742e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005bbc:	e03b      	b.n	8005c36 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	7b5b      	ldrb	r3, [r3, #13]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f001 ff61 	bl	8007a8c <USBH_LL_GetURBState>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005bce:	7afb      	ldrb	r3, [r7, #11]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d128      	bne.n	8005c26 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	8b12      	ldrh	r2, [r2, #24]
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d90e      	bls.n	8005bfe <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	8b12      	ldrh	r2, [r2, #24]
 8005be8:	1a9a      	subs	r2, r3, r2
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	8b12      	ldrh	r2, [r2, #24]
 8005bf6:	441a      	add	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	61da      	str	r2, [r3, #28]
 8005bfc:	e002      	b.n	8005c04 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d004      	beq.n	8005c16 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005c14:	e00e      	b.n	8005c34 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f868 	bl	8005cf4 <USBH_CDC_TransmitCallback>
      break;
 8005c24:	e006      	b.n	8005c34 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005c26:	7afb      	ldrb	r3, [r7, #11]
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d103      	bne.n	8005c34 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005c34:	bf00      	nop
  }
}
 8005c36:	bf00      	nop
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b086      	sub	sp, #24
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005c50:	2300      	movs	r3, #0
 8005c52:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d002      	beq.n	8005c64 <CDC_ProcessReception+0x26>
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	d00e      	beq.n	8005c80 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005c62:	e043      	b.n	8005cec <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	6a19      	ldr	r1, [r3, #32]
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	8b5a      	ldrh	r2, [r3, #26]
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	7b1b      	ldrb	r3, [r3, #12]
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f001 fc01 	bl	8007478 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2204      	movs	r2, #4
 8005c7a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005c7e:	e035      	b.n	8005cec <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	7b1b      	ldrb	r3, [r3, #12]
 8005c84:	4619      	mov	r1, r3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f001 ff00 	bl	8007a8c <USBH_LL_GetURBState>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005c90:	7cfb      	ldrb	r3, [r7, #19]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d129      	bne.n	8005cea <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	7b1b      	ldrb	r3, [r3, #12]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f001 fe63 	bl	8007968 <USBH_LL_GetLastXferSize>
 8005ca2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d016      	beq.n	8005cdc <CDC_ProcessReception+0x9e>
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	8b5b      	ldrh	r3, [r3, #26]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d910      	bls.n	8005cdc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	1ad2      	subs	r2, r2, r3
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	6a1a      	ldr	r2, [r3, #32]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	441a      	add	r2, r3
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2203      	movs	r2, #3
 8005cd6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005cda:	e006      	b.n	8005cea <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f80f 	bl	8005d08 <USBH_CDC_ReceiveCallback>
      break;
 8005cea:	bf00      	nop
  }
}
 8005cec:	bf00      	nop
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005d44:	2302      	movs	r3, #2
 8005d46:	e029      	b.n	8005d9c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	79fa      	ldrb	r2, [r7, #7]
 8005d4c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 f81f 	bl	8005da4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d003      	beq.n	8005d94 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f001 fd33 	bl	8007800 <USBH_LL_Init>

  return USBH_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005db0:	2300      	movs	r3, #0
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	e009      	b.n	8005dca <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	33e0      	adds	r3, #224	; 0xe0
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b0f      	cmp	r3, #15
 8005dce:	d9f2      	bls.n	8005db6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	e009      	b.n	8005dea <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005de0:	2200      	movs	r2, #0
 8005de2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	3301      	adds	r3, #1
 8005de8:	60fb      	str	r3, [r7, #12]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005df0:	d3f1      	bcc.n	8005dd6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2240      	movs	r2, #64	; 0x40
 8005e16:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d016      	beq.n	8005e8e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10e      	bne.n	8005e88 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005e70:	1c59      	adds	r1, r3, #1
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	33de      	adds	r3, #222	; 0xde
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	73fb      	strb	r3, [r7, #15]
 8005e86:	e004      	b.n	8005e92 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005e88:	2302      	movs	r3, #2
 8005e8a:	73fb      	strb	r3, [r7, #15]
 8005e8c:	e001      	b.n	8005e92 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005e8e:	2302      	movs	r3, #2
 8005e90:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005eb6:	78fa      	ldrb	r2, [r7, #3]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d204      	bcs.n	8005ec6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	78fa      	ldrb	r2, [r7, #3]
 8005ec0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005ec4:	e001      	b.n	8005eca <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	4608      	mov	r0, r1
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	70fb      	strb	r3, [r7, #3]
 8005eea:	460b      	mov	r3, r1
 8005eec:	70bb      	strb	r3, [r7, #2]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005f00:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005f02:	e025      	b.n	8005f50 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005f04:	7dfb      	ldrb	r3, [r7, #23]
 8005f06:	221a      	movs	r2, #26
 8005f08:	fb02 f303 	mul.w	r3, r2, r3
 8005f0c:	3308      	adds	r3, #8
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	4413      	add	r3, r2
 8005f12:	3302      	adds	r3, #2
 8005f14:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	795b      	ldrb	r3, [r3, #5]
 8005f1a:	78fa      	ldrb	r2, [r7, #3]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d002      	beq.n	8005f26 <USBH_FindInterface+0x4e>
 8005f20:	78fb      	ldrb	r3, [r7, #3]
 8005f22:	2bff      	cmp	r3, #255	; 0xff
 8005f24:	d111      	bne.n	8005f4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005f2a:	78ba      	ldrb	r2, [r7, #2]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d002      	beq.n	8005f36 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005f30:	78bb      	ldrb	r3, [r7, #2]
 8005f32:	2bff      	cmp	r3, #255	; 0xff
 8005f34:	d109      	bne.n	8005f4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005f3a:	787a      	ldrb	r2, [r7, #1]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d002      	beq.n	8005f46 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005f40:	787b      	ldrb	r3, [r7, #1]
 8005f42:	2bff      	cmp	r3, #255	; 0xff
 8005f44:	d101      	bne.n	8005f4a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005f46:	7dfb      	ldrb	r3, [r7, #23]
 8005f48:	e006      	b.n	8005f58 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005f50:	7dfb      	ldrb	r3, [r7, #23]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d9d6      	bls.n	8005f04 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005f56:	23ff      	movs	r3, #255	; 0xff
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	371c      	adds	r7, #28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f001 fc83 	bl	8007878 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005f72:	2101      	movs	r1, #1
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f001 fd9c 	bl	8007ab2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af04      	add	r7, sp, #16
 8005f8a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d102      	bne.n	8005fa6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2203      	movs	r2, #3
 8005fa4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b0b      	cmp	r3, #11
 8005fae:	f200 81be 	bhi.w	800632e <USBH_Process+0x3aa>
 8005fb2:	a201      	add	r2, pc, #4	; (adr r2, 8005fb8 <USBH_Process+0x34>)
 8005fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb8:	08005fe9 	.word	0x08005fe9
 8005fbc:	0800601b 	.word	0x0800601b
 8005fc0:	08006083 	.word	0x08006083
 8005fc4:	080062c9 	.word	0x080062c9
 8005fc8:	0800632f 	.word	0x0800632f
 8005fcc:	08006127 	.word	0x08006127
 8005fd0:	0800626f 	.word	0x0800626f
 8005fd4:	0800615d 	.word	0x0800615d
 8005fd8:	0800617d 	.word	0x0800617d
 8005fdc:	0800619d 	.word	0x0800619d
 8005fe0:	080061e1 	.word	0x080061e1
 8005fe4:	080062b1 	.word	0x080062b1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 819e 	beq.w	8006332 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005ffc:	20c8      	movs	r0, #200	; 0xc8
 8005ffe:	f001 fd9f 	bl	8007b40 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f001 fc95 	bl	8007932 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006018:	e18b      	b.n	8006332 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006020:	2b01      	cmp	r3, #1
 8006022:	d107      	bne.n	8006034 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006032:	e18d      	b.n	8006350 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800603a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800603e:	d914      	bls.n	800606a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006046:	3301      	adds	r3, #1
 8006048:	b2da      	uxtb	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006056:	2b03      	cmp	r3, #3
 8006058:	d903      	bls.n	8006062 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	220d      	movs	r2, #13
 800605e:	701a      	strb	r2, [r3, #0]
      break;
 8006060:	e176      	b.n	8006350 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	701a      	strb	r2, [r3, #0]
      break;
 8006068:	e172      	b.n	8006350 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006070:	f103 020a 	add.w	r2, r3, #10
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800607a:	200a      	movs	r0, #10
 800607c:	f001 fd60 	bl	8007b40 <USBH_Delay>
      break;
 8006080:	e166      	b.n	8006350 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006088:	2b00      	cmp	r3, #0
 800608a:	d005      	beq.n	8006098 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006092:	2104      	movs	r1, #4
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006098:	2064      	movs	r0, #100	; 0x64
 800609a:	f001 fd51 	bl	8007b40 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f001 fc20 	bl	80078e4 <USBH_LL_GetSpeed>
 80060a4:	4603      	mov	r3, r0
 80060a6:	461a      	mov	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2205      	movs	r2, #5
 80060b2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80060b4:	2100      	movs	r1, #0
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f001 fa2b 	bl	8007512 <USBH_AllocPipe>
 80060bc:	4603      	mov	r3, r0
 80060be:	461a      	mov	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80060c4:	2180      	movs	r1, #128	; 0x80
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f001 fa23 	bl	8007512 <USBH_AllocPipe>
 80060cc:	4603      	mov	r3, r0
 80060ce:	461a      	mov	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	7919      	ldrb	r1, [r3, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80060e8:	b292      	uxth	r2, r2
 80060ea:	9202      	str	r2, [sp, #8]
 80060ec:	2200      	movs	r2, #0
 80060ee:	9201      	str	r2, [sp, #4]
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	4603      	mov	r3, r0
 80060f4:	2280      	movs	r2, #128	; 0x80
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f001 f9dc 	bl	80074b4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	7959      	ldrb	r1, [r3, #5]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006110:	b292      	uxth	r2, r2
 8006112:	9202      	str	r2, [sp, #8]
 8006114:	2200      	movs	r2, #0
 8006116:	9201      	str	r2, [sp, #4]
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	4603      	mov	r3, r0
 800611c:	2200      	movs	r2, #0
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f001 f9c8 	bl	80074b4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006124:	e114      	b.n	8006350 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f918 	bl	800635c <USBH_HandleEnum>
 800612c:	4603      	mov	r3, r0
 800612e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006130:	7bbb      	ldrb	r3, [r7, #14]
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b00      	cmp	r3, #0
 8006136:	f040 80fe 	bne.w	8006336 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006148:	2b01      	cmp	r3, #1
 800614a:	d103      	bne.n	8006154 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2208      	movs	r2, #8
 8006150:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006152:	e0f0      	b.n	8006336 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2207      	movs	r2, #7
 8006158:	701a      	strb	r2, [r3, #0]
      break;
 800615a:	e0ec      	b.n	8006336 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 80e9 	beq.w	800633a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800616e:	2101      	movs	r1, #1
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2208      	movs	r2, #8
 8006178:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800617a:	e0de      	b.n	800633a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006182:	b29b      	uxth	r3, r3
 8006184:	4619      	mov	r1, r3
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 fc2c 	bl	80069e4 <USBH_SetCfg>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	f040 80d5 	bne.w	800633e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2209      	movs	r2, #9
 8006198:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800619a:	e0d0      	b.n	800633e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80061a2:	f003 0320 	and.w	r3, r3, #32
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d016      	beq.n	80061d8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80061aa:	2101      	movs	r1, #1
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fc3c 	bl	8006a2a <USBH_SetFeature>
 80061b2:	4603      	mov	r3, r0
 80061b4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80061b6:	7bbb      	ldrb	r3, [r7, #14]
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d103      	bne.n	80061c6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	220a      	movs	r2, #10
 80061c2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80061c4:	e0bd      	b.n	8006342 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80061c6:	7bbb      	ldrb	r3, [r7, #14]
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	f040 80b9 	bne.w	8006342 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	220a      	movs	r2, #10
 80061d4:	701a      	strb	r2, [r3, #0]
      break;
 80061d6:	e0b4      	b.n	8006342 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	220a      	movs	r2, #10
 80061dc:	701a      	strb	r2, [r3, #0]
      break;
 80061de:	e0b0      	b.n	8006342 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 80ad 	beq.w	8006346 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80061f4:	2300      	movs	r3, #0
 80061f6:	73fb      	strb	r3, [r7, #15]
 80061f8:	e016      	b.n	8006228 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80061fa:	7bfa      	ldrb	r2, [r7, #15]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	32de      	adds	r2, #222	; 0xde
 8006200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006204:	791a      	ldrb	r2, [r3, #4]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800620c:	429a      	cmp	r2, r3
 800620e:	d108      	bne.n	8006222 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006210:	7bfa      	ldrb	r2, [r7, #15]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	32de      	adds	r2, #222	; 0xde
 8006216:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006220:	e005      	b.n	800622e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006222:	7bfb      	ldrb	r3, [r7, #15]
 8006224:	3301      	adds	r3, #1
 8006226:	73fb      	strb	r3, [r7, #15]
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d0e5      	beq.n	80061fa <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006234:	2b00      	cmp	r3, #0
 8006236:	d016      	beq.n	8006266 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	4798      	blx	r3
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d109      	bne.n	800625e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2206      	movs	r2, #6
 800624e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006256:	2103      	movs	r1, #3
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800625c:	e073      	b.n	8006346 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	220d      	movs	r2, #13
 8006262:	701a      	strb	r2, [r3, #0]
      break;
 8006264:	e06f      	b.n	8006346 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	220d      	movs	r2, #13
 800626a:	701a      	strb	r2, [r3, #0]
      break;
 800626c:	e06b      	b.n	8006346 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006274:	2b00      	cmp	r3, #0
 8006276:	d017      	beq.n	80062a8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	4798      	blx	r3
 8006284:	4603      	mov	r3, r0
 8006286:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006288:	7bbb      	ldrb	r3, [r7, #14]
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d103      	bne.n	8006298 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	220b      	movs	r2, #11
 8006294:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006296:	e058      	b.n	800634a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006298:	7bbb      	ldrb	r3, [r7, #14]
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d154      	bne.n	800634a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	220d      	movs	r2, #13
 80062a4:	701a      	strb	r2, [r3, #0]
      break;
 80062a6:	e050      	b.n	800634a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	220d      	movs	r2, #13
 80062ac:	701a      	strb	r2, [r3, #0]
      break;
 80062ae:	e04c      	b.n	800634a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d049      	beq.n	800634e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	4798      	blx	r3
      }
      break;
 80062c6:	e042      	b.n	800634e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7ff fd67 	bl	8005da4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d009      	beq.n	80062f4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d005      	beq.n	800630a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006304:	2105      	movs	r1, #5
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b01      	cmp	r3, #1
 8006314:	d107      	bne.n	8006326 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7ff fe20 	bl	8005f64 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006324:	e014      	b.n	8006350 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f001 faa6 	bl	8007878 <USBH_LL_Start>
      break;
 800632c:	e010      	b.n	8006350 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800632e:	bf00      	nop
 8006330:	e00e      	b.n	8006350 <USBH_Process+0x3cc>
      break;
 8006332:	bf00      	nop
 8006334:	e00c      	b.n	8006350 <USBH_Process+0x3cc>
      break;
 8006336:	bf00      	nop
 8006338:	e00a      	b.n	8006350 <USBH_Process+0x3cc>
    break;
 800633a:	bf00      	nop
 800633c:	e008      	b.n	8006350 <USBH_Process+0x3cc>
      break;
 800633e:	bf00      	nop
 8006340:	e006      	b.n	8006350 <USBH_Process+0x3cc>
      break;
 8006342:	bf00      	nop
 8006344:	e004      	b.n	8006350 <USBH_Process+0x3cc>
      break;
 8006346:	bf00      	nop
 8006348:	e002      	b.n	8006350 <USBH_Process+0x3cc>
      break;
 800634a:	bf00      	nop
 800634c:	e000      	b.n	8006350 <USBH_Process+0x3cc>
      break;
 800634e:	bf00      	nop
  }
  return USBH_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop

0800635c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af04      	add	r7, sp, #16
 8006362:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006364:	2301      	movs	r3, #1
 8006366:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006368:	2301      	movs	r3, #1
 800636a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	785b      	ldrb	r3, [r3, #1]
 8006370:	2b07      	cmp	r3, #7
 8006372:	f200 81c1 	bhi.w	80066f8 <USBH_HandleEnum+0x39c>
 8006376:	a201      	add	r2, pc, #4	; (adr r2, 800637c <USBH_HandleEnum+0x20>)
 8006378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637c:	0800639d 	.word	0x0800639d
 8006380:	0800645b 	.word	0x0800645b
 8006384:	080064c5 	.word	0x080064c5
 8006388:	08006553 	.word	0x08006553
 800638c:	080065bd 	.word	0x080065bd
 8006390:	0800662d 	.word	0x0800662d
 8006394:	08006673 	.word	0x08006673
 8006398:	080066b9 	.word	0x080066b9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800639c:	2108      	movs	r1, #8
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fa50 	bl	8006844 <USBH_Get_DevDesc>
 80063a4:	4603      	mov	r3, r0
 80063a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80063a8:	7bbb      	ldrb	r3, [r7, #14]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d130      	bne.n	8006410 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	7919      	ldrb	r1, [r3, #4]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80063d2:	b292      	uxth	r2, r2
 80063d4:	9202      	str	r2, [sp, #8]
 80063d6:	2200      	movs	r2, #0
 80063d8:	9201      	str	r2, [sp, #4]
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	4603      	mov	r3, r0
 80063de:	2280      	movs	r2, #128	; 0x80
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f001 f867 	bl	80074b4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	7959      	ldrb	r1, [r3, #5]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80063fa:	b292      	uxth	r2, r2
 80063fc:	9202      	str	r2, [sp, #8]
 80063fe:	2200      	movs	r2, #0
 8006400:	9201      	str	r2, [sp, #4]
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	4603      	mov	r3, r0
 8006406:	2200      	movs	r2, #0
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f001 f853 	bl	80074b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800640e:	e175      	b.n	80066fc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006410:	7bbb      	ldrb	r3, [r7, #14]
 8006412:	2b03      	cmp	r3, #3
 8006414:	f040 8172 	bne.w	80066fc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800641e:	3301      	adds	r3, #1
 8006420:	b2da      	uxtb	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800642e:	2b03      	cmp	r3, #3
 8006430:	d903      	bls.n	800643a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	220d      	movs	r2, #13
 8006436:	701a      	strb	r2, [r3, #0]
      break;
 8006438:	e160      	b.n	80066fc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	795b      	ldrb	r3, [r3, #5]
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f001 f887 	bl	8007554 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	791b      	ldrb	r3, [r3, #4]
 800644a:	4619      	mov	r1, r3
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f001 f881 	bl	8007554 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	701a      	strb	r2, [r3, #0]
      break;
 8006458:	e150      	b.n	80066fc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800645a:	2112      	movs	r1, #18
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f9f1 	bl	8006844 <USBH_Get_DevDesc>
 8006462:	4603      	mov	r3, r0
 8006464:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006466:	7bbb      	ldrb	r3, [r7, #14]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d103      	bne.n	8006474 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006472:	e145      	b.n	8006700 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006474:	7bbb      	ldrb	r3, [r7, #14]
 8006476:	2b03      	cmp	r3, #3
 8006478:	f040 8142 	bne.w	8006700 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006482:	3301      	adds	r3, #1
 8006484:	b2da      	uxtb	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006492:	2b03      	cmp	r3, #3
 8006494:	d903      	bls.n	800649e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	220d      	movs	r2, #13
 800649a:	701a      	strb	r2, [r3, #0]
      break;
 800649c:	e130      	b.n	8006700 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	795b      	ldrb	r3, [r3, #5]
 80064a2:	4619      	mov	r1, r3
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f001 f855 	bl	8007554 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	791b      	ldrb	r3, [r3, #4]
 80064ae:	4619      	mov	r1, r3
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f001 f84f 	bl	8007554 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	701a      	strb	r2, [r3, #0]
      break;
 80064c2:	e11d      	b.n	8006700 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80064c4:	2101      	movs	r1, #1
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fa68 	bl	800699c <USBH_SetAddress>
 80064cc:	4603      	mov	r3, r0
 80064ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80064d0:	7bbb      	ldrb	r3, [r7, #14]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d132      	bne.n	800653c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80064d6:	2002      	movs	r0, #2
 80064d8:	f001 fb32 	bl	8007b40 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2203      	movs	r2, #3
 80064e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	7919      	ldrb	r1, [r3, #4]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80064fe:	b292      	uxth	r2, r2
 8006500:	9202      	str	r2, [sp, #8]
 8006502:	2200      	movs	r2, #0
 8006504:	9201      	str	r2, [sp, #4]
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	4603      	mov	r3, r0
 800650a:	2280      	movs	r2, #128	; 0x80
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 ffd1 	bl	80074b4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	7959      	ldrb	r1, [r3, #5]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006526:	b292      	uxth	r2, r2
 8006528:	9202      	str	r2, [sp, #8]
 800652a:	2200      	movs	r2, #0
 800652c:	9201      	str	r2, [sp, #4]
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	4603      	mov	r3, r0
 8006532:	2200      	movs	r2, #0
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 ffbd 	bl	80074b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800653a:	e0e3      	b.n	8006704 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800653c:	7bbb      	ldrb	r3, [r7, #14]
 800653e:	2b03      	cmp	r3, #3
 8006540:	f040 80e0 	bne.w	8006704 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	220d      	movs	r2, #13
 8006548:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	705a      	strb	r2, [r3, #1]
      break;
 8006550:	e0d8      	b.n	8006704 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006552:	2109      	movs	r1, #9
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f99d 	bl	8006894 <USBH_Get_CfgDesc>
 800655a:	4603      	mov	r3, r0
 800655c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800655e:	7bbb      	ldrb	r3, [r7, #14]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d103      	bne.n	800656c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2204      	movs	r2, #4
 8006568:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800656a:	e0cd      	b.n	8006708 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800656c:	7bbb      	ldrb	r3, [r7, #14]
 800656e:	2b03      	cmp	r3, #3
 8006570:	f040 80ca 	bne.w	8006708 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800657a:	3301      	adds	r3, #1
 800657c:	b2da      	uxtb	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800658a:	2b03      	cmp	r3, #3
 800658c:	d903      	bls.n	8006596 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	220d      	movs	r2, #13
 8006592:	701a      	strb	r2, [r3, #0]
      break;
 8006594:	e0b8      	b.n	8006708 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	795b      	ldrb	r3, [r3, #5]
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 ffd9 	bl	8007554 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	791b      	ldrb	r3, [r3, #4]
 80065a6:	4619      	mov	r1, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 ffd3 	bl	8007554 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	701a      	strb	r2, [r3, #0]
      break;
 80065ba:	e0a5      	b.n	8006708 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80065c2:	4619      	mov	r1, r3
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f965 	bl	8006894 <USBH_Get_CfgDesc>
 80065ca:	4603      	mov	r3, r0
 80065cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80065ce:	7bbb      	ldrb	r3, [r7, #14]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d103      	bne.n	80065dc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2205      	movs	r2, #5
 80065d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80065da:	e097      	b.n	800670c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065dc:	7bbb      	ldrb	r3, [r7, #14]
 80065de:	2b03      	cmp	r3, #3
 80065e0:	f040 8094 	bne.w	800670c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80065ea:	3301      	adds	r3, #1
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80065fa:	2b03      	cmp	r3, #3
 80065fc:	d903      	bls.n	8006606 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	220d      	movs	r2, #13
 8006602:	701a      	strb	r2, [r3, #0]
      break;
 8006604:	e082      	b.n	800670c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	795b      	ldrb	r3, [r3, #5]
 800660a:	4619      	mov	r1, r3
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 ffa1 	bl	8007554 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	791b      	ldrb	r3, [r3, #4]
 8006616:	4619      	mov	r1, r3
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 ff9b 	bl	8007554 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	701a      	strb	r2, [r3, #0]
      break;
 800662a:	e06f      	b.n	800670c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006632:	2b00      	cmp	r3, #0
 8006634:	d019      	beq.n	800666a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006642:	23ff      	movs	r3, #255	; 0xff
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f949 	bl	80068dc <USBH_Get_StringDesc>
 800664a:	4603      	mov	r3, r0
 800664c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800664e:	7bbb      	ldrb	r3, [r7, #14]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d103      	bne.n	800665c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2206      	movs	r2, #6
 8006658:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800665a:	e059      	b.n	8006710 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800665c:	7bbb      	ldrb	r3, [r7, #14]
 800665e:	2b03      	cmp	r3, #3
 8006660:	d156      	bne.n	8006710 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2206      	movs	r2, #6
 8006666:	705a      	strb	r2, [r3, #1]
      break;
 8006668:	e052      	b.n	8006710 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2206      	movs	r2, #6
 800666e:	705a      	strb	r2, [r3, #1]
      break;
 8006670:	e04e      	b.n	8006710 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006678:	2b00      	cmp	r3, #0
 800667a:	d019      	beq.n	80066b0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006688:	23ff      	movs	r3, #255	; 0xff
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f926 	bl	80068dc <USBH_Get_StringDesc>
 8006690:	4603      	mov	r3, r0
 8006692:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006694:	7bbb      	ldrb	r3, [r7, #14]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d103      	bne.n	80066a2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2207      	movs	r2, #7
 800669e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80066a0:	e038      	b.n	8006714 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80066a2:	7bbb      	ldrb	r3, [r7, #14]
 80066a4:	2b03      	cmp	r3, #3
 80066a6:	d135      	bne.n	8006714 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2207      	movs	r2, #7
 80066ac:	705a      	strb	r2, [r3, #1]
      break;
 80066ae:	e031      	b.n	8006714 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2207      	movs	r2, #7
 80066b4:	705a      	strb	r2, [r3, #1]
      break;
 80066b6:	e02d      	b.n	8006714 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d017      	beq.n	80066f2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80066ce:	23ff      	movs	r3, #255	; 0xff
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f903 	bl	80068dc <USBH_Get_StringDesc>
 80066d6:	4603      	mov	r3, r0
 80066d8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80066da:	7bbb      	ldrb	r3, [r7, #14]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d102      	bne.n	80066e6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80066e0:	2300      	movs	r3, #0
 80066e2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80066e4:	e018      	b.n	8006718 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80066e6:	7bbb      	ldrb	r3, [r7, #14]
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d115      	bne.n	8006718 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	73fb      	strb	r3, [r7, #15]
      break;
 80066f0:	e012      	b.n	8006718 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80066f2:	2300      	movs	r3, #0
 80066f4:	73fb      	strb	r3, [r7, #15]
      break;
 80066f6:	e00f      	b.n	8006718 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80066f8:	bf00      	nop
 80066fa:	e00e      	b.n	800671a <USBH_HandleEnum+0x3be>
      break;
 80066fc:	bf00      	nop
 80066fe:	e00c      	b.n	800671a <USBH_HandleEnum+0x3be>
      break;
 8006700:	bf00      	nop
 8006702:	e00a      	b.n	800671a <USBH_HandleEnum+0x3be>
      break;
 8006704:	bf00      	nop
 8006706:	e008      	b.n	800671a <USBH_HandleEnum+0x3be>
      break;
 8006708:	bf00      	nop
 800670a:	e006      	b.n	800671a <USBH_HandleEnum+0x3be>
      break;
 800670c:	bf00      	nop
 800670e:	e004      	b.n	800671a <USBH_HandleEnum+0x3be>
      break;
 8006710:	bf00      	nop
 8006712:	e002      	b.n	800671a <USBH_HandleEnum+0x3be>
      break;
 8006714:	bf00      	nop
 8006716:	e000      	b.n	800671a <USBH_HandleEnum+0x3be>
      break;
 8006718:	bf00      	nop
  }
  return Status;
 800671a:	7bfb      	ldrb	r3, [r7, #15]
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b082      	sub	sp, #8
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f804 	bl	8006766 <USBH_HandleSof>
}
 800675e:	bf00      	nop
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b082      	sub	sp, #8
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b0b      	cmp	r3, #11
 8006776:	d10a      	bne.n	800678e <USBH_HandleSof+0x28>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800677e:	2b00      	cmp	r3, #0
 8006780:	d005      	beq.n	800678e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	4798      	blx	r3
  }
}
 800678e:	bf00      	nop
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006796:	b480      	push	{r7}
 8006798:	b083      	sub	sp, #12
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80067a6:	bf00      	nop
}
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b083      	sub	sp, #12
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80067c2:	bf00      	nop
}
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f001 f846 	bl	80078ae <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	791b      	ldrb	r3, [r3, #4]
 8006826:	4619      	mov	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fe93 	bl	8007554 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	795b      	ldrb	r3, [r3, #5]
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fe8d 	bl	8007554 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af02      	add	r7, sp, #8
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	460b      	mov	r3, r1
 800684e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006856:	78fb      	ldrb	r3, [r7, #3]
 8006858:	b29b      	uxth	r3, r3
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	4613      	mov	r3, r2
 800685e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006862:	2100      	movs	r1, #0
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f864 	bl	8006932 <USBH_GetDescriptor>
 800686a:	4603      	mov	r3, r0
 800686c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800686e:	7bfb      	ldrb	r3, [r7, #15]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10a      	bne.n	800688a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f203 3026 	addw	r0, r3, #806	; 0x326
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006880:	78fa      	ldrb	r2, [r7, #3]
 8006882:	b292      	uxth	r2, r2
 8006884:	4619      	mov	r1, r3
 8006886:	f000 f919 	bl	8006abc <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800688a:	7bfb      	ldrb	r3, [r7, #15]
}
 800688c:	4618      	mov	r0, r3
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af02      	add	r7, sp, #8
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	331c      	adds	r3, #28
 80068a4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80068a6:	887b      	ldrh	r3, [r7, #2]
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068b0:	2100      	movs	r1, #0
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f83d 	bl	8006932 <USBH_GetDescriptor>
 80068b8:	4603      	mov	r3, r0
 80068ba:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d107      	bne.n	80068d2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80068c2:	887b      	ldrh	r3, [r7, #2]
 80068c4:	461a      	mov	r2, r3
 80068c6:	68b9      	ldr	r1, [r7, #8]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f989 	bl	8006be0 <USBH_ParseCfgDesc>
 80068ce:	4603      	mov	r3, r0
 80068d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b088      	sub	sp, #32
 80068e0:	af02      	add	r7, sp, #8
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	607a      	str	r2, [r7, #4]
 80068e6:	461a      	mov	r2, r3
 80068e8:	460b      	mov	r3, r1
 80068ea:	72fb      	strb	r3, [r7, #11]
 80068ec:	4613      	mov	r3, r2
 80068ee:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80068f0:	7afb      	ldrb	r3, [r7, #11]
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80068f8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006900:	893b      	ldrh	r3, [r7, #8]
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	460b      	mov	r3, r1
 8006906:	2100      	movs	r1, #0
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 f812 	bl	8006932 <USBH_GetDescriptor>
 800690e:	4603      	mov	r3, r0
 8006910:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006912:	7dfb      	ldrb	r3, [r7, #23]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d107      	bne.n	8006928 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800691e:	893a      	ldrh	r2, [r7, #8]
 8006920:	6879      	ldr	r1, [r7, #4]
 8006922:	4618      	mov	r0, r3
 8006924:	f000 fb26 	bl	8006f74 <USBH_ParseStringDesc>
  }

  return status;
 8006928:	7dfb      	ldrb	r3, [r7, #23]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b084      	sub	sp, #16
 8006936:	af00      	add	r7, sp, #0
 8006938:	60f8      	str	r0, [r7, #12]
 800693a:	607b      	str	r3, [r7, #4]
 800693c:	460b      	mov	r3, r1
 800693e:	72fb      	strb	r3, [r7, #11]
 8006940:	4613      	mov	r3, r2
 8006942:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	789b      	ldrb	r3, [r3, #2]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d11c      	bne.n	8006986 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800694c:	7afb      	ldrb	r3, [r7, #11]
 800694e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006952:	b2da      	uxtb	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2206      	movs	r2, #6
 800695c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	893a      	ldrh	r2, [r7, #8]
 8006962:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006964:	893b      	ldrh	r3, [r7, #8]
 8006966:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800696a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800696e:	d104      	bne.n	800697a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f240 4209 	movw	r2, #1033	; 0x409
 8006976:	829a      	strh	r2, [r3, #20]
 8006978:	e002      	b.n	8006980 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	8b3a      	ldrh	r2, [r7, #24]
 8006984:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006986:	8b3b      	ldrh	r3, [r7, #24]
 8006988:	461a      	mov	r2, r3
 800698a:	6879      	ldr	r1, [r7, #4]
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f000 fb3f 	bl	8007010 <USBH_CtlReq>
 8006992:	4603      	mov	r3, r0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	460b      	mov	r3, r1
 80069a6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	789b      	ldrb	r3, [r3, #2]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d10f      	bne.n	80069d0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2205      	movs	r2, #5
 80069ba:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80069bc:	78fb      	ldrb	r3, [r7, #3]
 80069be:	b29a      	uxth	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80069d0:	2200      	movs	r2, #0
 80069d2:	2100      	movs	r1, #0
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fb1b 	bl	8007010 <USBH_CtlReq>
 80069da:	4603      	mov	r3, r0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	460b      	mov	r3, r1
 80069ee:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	789b      	ldrb	r3, [r3, #2]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d10e      	bne.n	8006a16 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2209      	movs	r2, #9
 8006a02:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	887a      	ldrh	r2, [r7, #2]
 8006a08:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006a16:	2200      	movs	r2, #0
 8006a18:	2100      	movs	r1, #0
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 faf8 	bl	8007010 <USBH_CtlReq>
 8006a20:	4603      	mov	r3, r0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b082      	sub	sp, #8
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	460b      	mov	r3, r1
 8006a34:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	789b      	ldrb	r3, [r3, #2]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d10f      	bne.n	8006a5e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2203      	movs	r2, #3
 8006a48:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006a4a:	78fb      	ldrb	r3, [r7, #3]
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006a5e:	2200      	movs	r2, #0
 8006a60:	2100      	movs	r1, #0
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fad4 	bl	8007010 <USBH_CtlReq>
 8006a68:	4603      	mov	r3, r0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b082      	sub	sp, #8
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	789b      	ldrb	r3, [r3, #2]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d10f      	bne.n	8006aa6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2202      	movs	r2, #2
 8006a8a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006a98:	78fb      	ldrb	r3, [r7, #3]
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fab0 	bl	8007010 <USBH_CtlReq>
 8006ab0:	4603      	mov	r3, r0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
	...

08006abc <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	781a      	ldrb	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	785a      	ldrb	r2, [r3, #1]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	3302      	adds	r3, #2
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	3303      	adds	r3, #3
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	021b      	lsls	r3, r3, #8
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	4313      	orrs	r3, r2
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	791a      	ldrb	r2, [r3, #4]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	795a      	ldrb	r2, [r3, #5]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	799a      	ldrb	r2, [r3, #6]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	79da      	ldrb	r2, [r3, #7]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	79db      	ldrb	r3, [r3, #7]
 8006b1a:	2b20      	cmp	r3, #32
 8006b1c:	dc0f      	bgt.n	8006b3e <USBH_ParseDevDesc+0x82>
 8006b1e:	2b08      	cmp	r3, #8
 8006b20:	db14      	blt.n	8006b4c <USBH_ParseDevDesc+0x90>
 8006b22:	3b08      	subs	r3, #8
 8006b24:	4a2d      	ldr	r2, [pc, #180]	; (8006bdc <USBH_ParseDevDesc+0x120>)
 8006b26:	fa22 f303 	lsr.w	r3, r2, r3
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	bf14      	ite	ne
 8006b32:	2301      	movne	r3, #1
 8006b34:	2300      	moveq	r3, #0
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d102      	bne.n	8006b42 <USBH_ParseDevDesc+0x86>
 8006b3c:	e006      	b.n	8006b4c <USBH_ParseDevDesc+0x90>
 8006b3e:	2b40      	cmp	r3, #64	; 0x40
 8006b40:	d104      	bne.n	8006b4c <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	79da      	ldrb	r2, [r3, #7]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	71da      	strb	r2, [r3, #7]
      break;
 8006b4a:	e003      	b.n	8006b54 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2240      	movs	r2, #64	; 0x40
 8006b50:	71da      	strb	r2, [r3, #7]
      break;
 8006b52:	bf00      	nop
  }

  if (length > 8U)
 8006b54:	88fb      	ldrh	r3, [r7, #6]
 8006b56:	2b08      	cmp	r3, #8
 8006b58:	d939      	bls.n	8006bce <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	3308      	adds	r3, #8
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	3309      	adds	r3, #9
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	021b      	lsls	r3, r3, #8
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	330a      	adds	r3, #10
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	330b      	adds	r3, #11
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	021b      	lsls	r3, r3, #8
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	330c      	adds	r3, #12
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	330d      	adds	r3, #13
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	021b      	lsls	r3, r3, #8
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	7b9a      	ldrb	r2, [r3, #14]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	7bda      	ldrb	r2, [r3, #15]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	7c1a      	ldrb	r2, [r3, #16]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	7c5a      	ldrb	r2, [r3, #17]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	745a      	strb	r2, [r3, #17]
  }
}
 8006bce:	bf00      	nop
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	01000101 	.word	0x01000101

08006be0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b08c      	sub	sp, #48	; 0x30
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	4613      	mov	r3, r2
 8006bec:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006bf4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	781a      	ldrb	r2, [r3, #0]
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	785a      	ldrb	r2, [r3, #1]
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
 8006c1e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	3302      	adds	r3, #2
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	3303      	adds	r3, #3
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	021b      	lsls	r3, r3, #8
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	4313      	orrs	r3, r2
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c3c:	bf28      	it	cs
 8006c3e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	791a      	ldrb	r2, [r3, #4]
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	795a      	ldrb	r2, [r3, #5]
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	799a      	ldrb	r2, [r3, #6]
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	79da      	ldrb	r2, [r3, #7]
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	7a1a      	ldrb	r2, [r3, #8]
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006c70:	6a3b      	ldr	r3, [r7, #32]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	2b09      	cmp	r3, #9
 8006c76:	d002      	beq.n	8006c7e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	2209      	movs	r2, #9
 8006c7c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006c7e:	88fb      	ldrh	r3, [r7, #6]
 8006c80:	2b09      	cmp	r3, #9
 8006c82:	f240 809d 	bls.w	8006dc0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006c86:	2309      	movs	r3, #9
 8006c88:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006c8e:	e081      	b.n	8006d94 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006c90:	f107 0316 	add.w	r3, r7, #22
 8006c94:	4619      	mov	r1, r3
 8006c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c98:	f000 f99f 	bl	8006fda <USBH_GetNextDesc>
 8006c9c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca0:	785b      	ldrb	r3, [r3, #1]
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d176      	bne.n	8006d94 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	2b09      	cmp	r3, #9
 8006cac:	d002      	beq.n	8006cb4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb0:	2209      	movs	r2, #9
 8006cb2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cb8:	221a      	movs	r2, #26
 8006cba:	fb02 f303 	mul.w	r3, r2, r3
 8006cbe:	3308      	adds	r3, #8
 8006cc0:	6a3a      	ldr	r2, [r7, #32]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	3302      	adds	r3, #2
 8006cc6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006cc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cca:	69f8      	ldr	r0, [r7, #28]
 8006ccc:	f000 f87e 	bl	8006dcc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006cda:	e043      	b.n	8006d64 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006cdc:	f107 0316 	add.w	r3, r7, #22
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ce4:	f000 f979 	bl	8006fda <USBH_GetNextDesc>
 8006ce8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cec:	785b      	ldrb	r3, [r3, #1]
 8006cee:	2b05      	cmp	r3, #5
 8006cf0:	d138      	bne.n	8006d64 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	795b      	ldrb	r3, [r3, #5]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d10f      	bne.n	8006d1a <USBH_ParseCfgDesc+0x13a>
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	799b      	ldrb	r3, [r3, #6]
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d10b      	bne.n	8006d1a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	79db      	ldrb	r3, [r3, #7]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10f      	bne.n	8006d2a <USBH_ParseCfgDesc+0x14a>
 8006d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	2b09      	cmp	r3, #9
 8006d10:	d00b      	beq.n	8006d2a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8006d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d14:	2209      	movs	r2, #9
 8006d16:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006d18:	e007      	b.n	8006d2a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8006d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	2b07      	cmp	r3, #7
 8006d20:	d004      	beq.n	8006d2c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d24:	2207      	movs	r2, #7
 8006d26:	701a      	strb	r2, [r3, #0]
 8006d28:	e000      	b.n	8006d2c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006d2a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d30:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006d34:	3201      	adds	r2, #1
 8006d36:	00d2      	lsls	r2, r2, #3
 8006d38:	211a      	movs	r1, #26
 8006d3a:	fb01 f303 	mul.w	r3, r1, r3
 8006d3e:	4413      	add	r3, r2
 8006d40:	3308      	adds	r3, #8
 8006d42:	6a3a      	ldr	r2, [r7, #32]
 8006d44:	4413      	add	r3, r2
 8006d46:	3304      	adds	r3, #4
 8006d48:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d4c:	69b9      	ldr	r1, [r7, #24]
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 f86b 	bl	8006e2a <USBH_ParseEPDesc>
 8006d54:	4603      	mov	r3, r0
 8006d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8006d5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d5e:	3301      	adds	r3, #1
 8006d60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	791b      	ldrb	r3, [r3, #4]
 8006d68:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d204      	bcs.n	8006d7a <USBH_ParseCfgDesc+0x19a>
 8006d70:	6a3b      	ldr	r3, [r7, #32]
 8006d72:	885a      	ldrh	r2, [r3, #2]
 8006d74:	8afb      	ldrh	r3, [r7, #22]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d8b0      	bhi.n	8006cdc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	791b      	ldrb	r3, [r3, #4]
 8006d7e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d201      	bcs.n	8006d8a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e01c      	b.n	8006dc4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8006d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d8e:	3301      	adds	r3, #1
 8006d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d805      	bhi.n	8006da8 <USBH_ParseCfgDesc+0x1c8>
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	885a      	ldrh	r2, [r3, #2]
 8006da0:	8afb      	ldrh	r3, [r7, #22]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	f63f af74 	bhi.w	8006c90 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006da8:	6a3b      	ldr	r3, [r7, #32]
 8006daa:	791b      	ldrb	r3, [r3, #4]
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	bf28      	it	cs
 8006db0:	2302      	movcs	r3, #2
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d201      	bcs.n	8006dc0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e001      	b.n	8006dc4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006dc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3730      	adds	r7, #48	; 0x30
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	781a      	ldrb	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	785a      	ldrb	r2, [r3, #1]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	789a      	ldrb	r2, [r3, #2]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	78da      	ldrb	r2, [r3, #3]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	791a      	ldrb	r2, [r3, #4]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	795a      	ldrb	r2, [r3, #5]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	799a      	ldrb	r2, [r3, #6]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	79da      	ldrb	r2, [r3, #7]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	7a1a      	ldrb	r2, [r3, #8]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	721a      	strb	r2, [r3, #8]
}
 8006e1e:	bf00      	nop
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b087      	sub	sp, #28
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	60f8      	str	r0, [r7, #12]
 8006e32:	60b9      	str	r1, [r7, #8]
 8006e34:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	781a      	ldrb	r2, [r3, #0]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	785a      	ldrb	r2, [r3, #1]
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	789a      	ldrb	r2, [r3, #2]
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	78da      	ldrb	r2, [r3, #3]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	3305      	adds	r3, #5
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	021b      	lsls	r3, r3, #8
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	799a      	ldrb	r2, [r3, #6]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	889b      	ldrh	r3, [r3, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d102      	bne.n	8006e8c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8006e86:	2303      	movs	r3, #3
 8006e88:	75fb      	strb	r3, [r7, #23]
 8006e8a:	e033      	b.n	8006ef4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	889b      	ldrh	r3, [r3, #4]
 8006e90:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e94:	f023 0307 	bic.w	r3, r3, #7
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	889b      	ldrh	r3, [r3, #4]
 8006ea2:	b21a      	sxth	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	b299      	uxth	r1, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	3305      	adds	r3, #5
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	021b      	lsls	r3, r3, #8
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	430b      	orrs	r3, r1
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d110      	bne.n	8006ee6 <USBH_ParseEPDesc+0xbc>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	b299      	uxth	r1, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3305      	adds	r3, #5
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	021b      	lsls	r3, r3, #8
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	430b      	orrs	r3, r1
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	b21b      	sxth	r3, r3
 8006ede:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ee2:	b21b      	sxth	r3, r3
 8006ee4:	e001      	b.n	8006eea <USBH_ParseEPDesc+0xc0>
 8006ee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eea:	4313      	orrs	r3, r2
 8006eec:	b21b      	sxth	r3, r3
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d116      	bne.n	8006f2c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	78db      	ldrb	r3, [r3, #3]
 8006f02:	f003 0303 	and.w	r3, r3, #3
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d005      	beq.n	8006f16 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	78db      	ldrb	r3, [r3, #3]
 8006f0e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006f12:	2b03      	cmp	r3, #3
 8006f14:	d127      	bne.n	8006f66 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	799b      	ldrb	r3, [r3, #6]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <USBH_ParseEPDesc+0xfc>
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	799b      	ldrb	r3, [r3, #6]
 8006f22:	2b10      	cmp	r3, #16
 8006f24:	d91f      	bls.n	8006f66 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006f26:	2303      	movs	r3, #3
 8006f28:	75fb      	strb	r3, [r7, #23]
 8006f2a:	e01c      	b.n	8006f66 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	78db      	ldrb	r3, [r3, #3]
 8006f30:	f003 0303 	and.w	r3, r3, #3
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d10a      	bne.n	8006f4e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	799b      	ldrb	r3, [r3, #6]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d003      	beq.n	8006f48 <USBH_ParseEPDesc+0x11e>
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	799b      	ldrb	r3, [r3, #6]
 8006f44:	2b10      	cmp	r3, #16
 8006f46:	d90e      	bls.n	8006f66 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	75fb      	strb	r3, [r7, #23]
 8006f4c:	e00b      	b.n	8006f66 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	78db      	ldrb	r3, [r3, #3]
 8006f52:	f003 0303 	and.w	r3, r3, #3
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	d105      	bne.n	8006f66 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	799b      	ldrb	r3, [r3, #6]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006f62:	2303      	movs	r3, #3
 8006f64:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8006f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	371c      	adds	r7, #28
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3301      	adds	r3, #1
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	2b03      	cmp	r3, #3
 8006f8a:	d120      	bne.n	8006fce <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	1e9a      	subs	r2, r3, #2
 8006f92:	88fb      	ldrh	r3, [r7, #6]
 8006f94:	4293      	cmp	r3, r2
 8006f96:	bf28      	it	cs
 8006f98:	4613      	movcs	r3, r2
 8006f9a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	3302      	adds	r3, #2
 8006fa0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	82fb      	strh	r3, [r7, #22]
 8006fa6:	e00b      	b.n	8006fc0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006fa8:	8afb      	ldrh	r3, [r7, #22]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	4413      	add	r3, r2
 8006fae:	781a      	ldrb	r2, [r3, #0]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006fba:	8afb      	ldrh	r3, [r7, #22]
 8006fbc:	3302      	adds	r3, #2
 8006fbe:	82fb      	strh	r3, [r7, #22]
 8006fc0:	8afa      	ldrh	r2, [r7, #22]
 8006fc2:	8abb      	ldrh	r3, [r7, #20]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d3ef      	bcc.n	8006fa8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	701a      	strb	r2, [r3, #0]
  }
}
 8006fce:	bf00      	nop
 8006fd0:	371c      	adds	r7, #28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b085      	sub	sp, #20
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	881a      	ldrh	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	4413      	add	r3, r2
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4413      	add	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007002:	68fb      	ldr	r3, [r7, #12]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	4613      	mov	r3, r2
 800701c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800701e:	2301      	movs	r3, #1
 8007020:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	789b      	ldrb	r3, [r3, #2]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d002      	beq.n	8007030 <USBH_CtlReq+0x20>
 800702a:	2b02      	cmp	r3, #2
 800702c:	d00f      	beq.n	800704e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800702e:	e027      	b.n	8007080 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	88fa      	ldrh	r2, [r7, #6]
 800703a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2201      	movs	r2, #1
 8007040:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2202      	movs	r2, #2
 8007046:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007048:	2301      	movs	r3, #1
 800704a:	75fb      	strb	r3, [r7, #23]
      break;
 800704c:	e018      	b.n	8007080 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f000 f81c 	bl	800708c <USBH_HandleControl>
 8007054:	4603      	mov	r3, r0
 8007056:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007058:	7dfb      	ldrb	r3, [r7, #23]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d002      	beq.n	8007064 <USBH_CtlReq+0x54>
 800705e:	7dfb      	ldrb	r3, [r7, #23]
 8007060:	2b03      	cmp	r3, #3
 8007062:	d106      	bne.n	8007072 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2201      	movs	r2, #1
 8007068:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	761a      	strb	r2, [r3, #24]
      break;
 8007070:	e005      	b.n	800707e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007072:	7dfb      	ldrb	r3, [r7, #23]
 8007074:	2b02      	cmp	r3, #2
 8007076:	d102      	bne.n	800707e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2201      	movs	r2, #1
 800707c:	709a      	strb	r2, [r3, #2]
      break;
 800707e:	bf00      	nop
  }
  return status;
 8007080:	7dfb      	ldrb	r3, [r7, #23]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3718      	adds	r7, #24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
	...

0800708c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af02      	add	r7, sp, #8
 8007092:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007094:	2301      	movs	r3, #1
 8007096:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007098:	2300      	movs	r3, #0
 800709a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	7e1b      	ldrb	r3, [r3, #24]
 80070a0:	3b01      	subs	r3, #1
 80070a2:	2b0a      	cmp	r3, #10
 80070a4:	f200 8156 	bhi.w	8007354 <USBH_HandleControl+0x2c8>
 80070a8:	a201      	add	r2, pc, #4	; (adr r2, 80070b0 <USBH_HandleControl+0x24>)
 80070aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ae:	bf00      	nop
 80070b0:	080070dd 	.word	0x080070dd
 80070b4:	080070f7 	.word	0x080070f7
 80070b8:	08007161 	.word	0x08007161
 80070bc:	08007187 	.word	0x08007187
 80070c0:	080071bf 	.word	0x080071bf
 80070c4:	080071e9 	.word	0x080071e9
 80070c8:	0800723b 	.word	0x0800723b
 80070cc:	0800725d 	.word	0x0800725d
 80070d0:	08007299 	.word	0x08007299
 80070d4:	080072bf 	.word	0x080072bf
 80070d8:	080072fd 	.word	0x080072fd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f103 0110 	add.w	r1, r3, #16
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	795b      	ldrb	r3, [r3, #5]
 80070e6:	461a      	mov	r2, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f943 	bl	8007374 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2202      	movs	r2, #2
 80070f2:	761a      	strb	r2, [r3, #24]
      break;
 80070f4:	e139      	b.n	800736a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	795b      	ldrb	r3, [r3, #5]
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fcc5 	bl	8007a8c <USBH_LL_GetURBState>
 8007102:	4603      	mov	r3, r0
 8007104:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007106:	7bbb      	ldrb	r3, [r7, #14]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d11e      	bne.n	800714a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	7c1b      	ldrb	r3, [r3, #16]
 8007110:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007114:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	8adb      	ldrh	r3, [r3, #22]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00a      	beq.n	8007134 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800711e:	7b7b      	ldrb	r3, [r7, #13]
 8007120:	2b80      	cmp	r3, #128	; 0x80
 8007122:	d103      	bne.n	800712c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2203      	movs	r2, #3
 8007128:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800712a:	e115      	b.n	8007358 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2205      	movs	r2, #5
 8007130:	761a      	strb	r2, [r3, #24]
      break;
 8007132:	e111      	b.n	8007358 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007134:	7b7b      	ldrb	r3, [r7, #13]
 8007136:	2b80      	cmp	r3, #128	; 0x80
 8007138:	d103      	bne.n	8007142 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2209      	movs	r2, #9
 800713e:	761a      	strb	r2, [r3, #24]
      break;
 8007140:	e10a      	b.n	8007358 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2207      	movs	r2, #7
 8007146:	761a      	strb	r2, [r3, #24]
      break;
 8007148:	e106      	b.n	8007358 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800714a:	7bbb      	ldrb	r3, [r7, #14]
 800714c:	2b04      	cmp	r3, #4
 800714e:	d003      	beq.n	8007158 <USBH_HandleControl+0xcc>
 8007150:	7bbb      	ldrb	r3, [r7, #14]
 8007152:	2b02      	cmp	r3, #2
 8007154:	f040 8100 	bne.w	8007358 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	220b      	movs	r2, #11
 800715c:	761a      	strb	r2, [r3, #24]
      break;
 800715e:	e0fb      	b.n	8007358 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007166:	b29a      	uxth	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6899      	ldr	r1, [r3, #8]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	899a      	ldrh	r2, [r3, #12]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	791b      	ldrb	r3, [r3, #4]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f93a 	bl	80073f2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2204      	movs	r2, #4
 8007182:	761a      	strb	r2, [r3, #24]
      break;
 8007184:	e0f1      	b.n	800736a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	791b      	ldrb	r3, [r3, #4]
 800718a:	4619      	mov	r1, r3
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fc7d 	bl	8007a8c <USBH_LL_GetURBState>
 8007192:	4603      	mov	r3, r0
 8007194:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007196:	7bbb      	ldrb	r3, [r7, #14]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d102      	bne.n	80071a2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2209      	movs	r2, #9
 80071a0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80071a2:	7bbb      	ldrb	r3, [r7, #14]
 80071a4:	2b05      	cmp	r3, #5
 80071a6:	d102      	bne.n	80071ae <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80071a8:	2303      	movs	r3, #3
 80071aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80071ac:	e0d6      	b.n	800735c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80071ae:	7bbb      	ldrb	r3, [r7, #14]
 80071b0:	2b04      	cmp	r3, #4
 80071b2:	f040 80d3 	bne.w	800735c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	220b      	movs	r2, #11
 80071ba:	761a      	strb	r2, [r3, #24]
      break;
 80071bc:	e0ce      	b.n	800735c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6899      	ldr	r1, [r3, #8]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	899a      	ldrh	r2, [r3, #12]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	795b      	ldrb	r3, [r3, #5]
 80071ca:	2001      	movs	r0, #1
 80071cc:	9000      	str	r0, [sp, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f8ea 	bl	80073a8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071da:	b29a      	uxth	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2206      	movs	r2, #6
 80071e4:	761a      	strb	r2, [r3, #24]
      break;
 80071e6:	e0c0      	b.n	800736a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	795b      	ldrb	r3, [r3, #5]
 80071ec:	4619      	mov	r1, r3
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fc4c 	bl	8007a8c <USBH_LL_GetURBState>
 80071f4:	4603      	mov	r3, r0
 80071f6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80071f8:	7bbb      	ldrb	r3, [r7, #14]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d103      	bne.n	8007206 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2207      	movs	r2, #7
 8007202:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007204:	e0ac      	b.n	8007360 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007206:	7bbb      	ldrb	r3, [r7, #14]
 8007208:	2b05      	cmp	r3, #5
 800720a:	d105      	bne.n	8007218 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	220c      	movs	r2, #12
 8007210:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007212:	2303      	movs	r3, #3
 8007214:	73fb      	strb	r3, [r7, #15]
      break;
 8007216:	e0a3      	b.n	8007360 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007218:	7bbb      	ldrb	r3, [r7, #14]
 800721a:	2b02      	cmp	r3, #2
 800721c:	d103      	bne.n	8007226 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2205      	movs	r2, #5
 8007222:	761a      	strb	r2, [r3, #24]
      break;
 8007224:	e09c      	b.n	8007360 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007226:	7bbb      	ldrb	r3, [r7, #14]
 8007228:	2b04      	cmp	r3, #4
 800722a:	f040 8099 	bne.w	8007360 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	220b      	movs	r2, #11
 8007232:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007234:	2302      	movs	r3, #2
 8007236:	73fb      	strb	r3, [r7, #15]
      break;
 8007238:	e092      	b.n	8007360 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	791b      	ldrb	r3, [r3, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	2100      	movs	r1, #0
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f8d5 	bl	80073f2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800724e:	b29a      	uxth	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2208      	movs	r2, #8
 8007258:	761a      	strb	r2, [r3, #24]

      break;
 800725a:	e086      	b.n	800736a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	791b      	ldrb	r3, [r3, #4]
 8007260:	4619      	mov	r1, r3
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fc12 	bl	8007a8c <USBH_LL_GetURBState>
 8007268:	4603      	mov	r3, r0
 800726a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800726c:	7bbb      	ldrb	r3, [r7, #14]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d105      	bne.n	800727e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	220d      	movs	r2, #13
 8007276:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007278:	2300      	movs	r3, #0
 800727a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800727c:	e072      	b.n	8007364 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800727e:	7bbb      	ldrb	r3, [r7, #14]
 8007280:	2b04      	cmp	r3, #4
 8007282:	d103      	bne.n	800728c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	220b      	movs	r2, #11
 8007288:	761a      	strb	r2, [r3, #24]
      break;
 800728a:	e06b      	b.n	8007364 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800728c:	7bbb      	ldrb	r3, [r7, #14]
 800728e:	2b05      	cmp	r3, #5
 8007290:	d168      	bne.n	8007364 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007292:	2303      	movs	r3, #3
 8007294:	73fb      	strb	r3, [r7, #15]
      break;
 8007296:	e065      	b.n	8007364 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	795b      	ldrb	r3, [r3, #5]
 800729c:	2201      	movs	r2, #1
 800729e:	9200      	str	r2, [sp, #0]
 80072a0:	2200      	movs	r2, #0
 80072a2:	2100      	movs	r1, #0
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f87f 	bl	80073a8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	220a      	movs	r2, #10
 80072ba:	761a      	strb	r2, [r3, #24]
      break;
 80072bc:	e055      	b.n	800736a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	795b      	ldrb	r3, [r3, #5]
 80072c2:	4619      	mov	r1, r3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fbe1 	bl	8007a8c <USBH_LL_GetURBState>
 80072ca:	4603      	mov	r3, r0
 80072cc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80072ce:	7bbb      	ldrb	r3, [r7, #14]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d105      	bne.n	80072e0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	220d      	movs	r2, #13
 80072dc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80072de:	e043      	b.n	8007368 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80072e0:	7bbb      	ldrb	r3, [r7, #14]
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d103      	bne.n	80072ee <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2209      	movs	r2, #9
 80072ea:	761a      	strb	r2, [r3, #24]
      break;
 80072ec:	e03c      	b.n	8007368 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80072ee:	7bbb      	ldrb	r3, [r7, #14]
 80072f0:	2b04      	cmp	r3, #4
 80072f2:	d139      	bne.n	8007368 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	220b      	movs	r2, #11
 80072f8:	761a      	strb	r2, [r3, #24]
      break;
 80072fa:	e035      	b.n	8007368 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	7e5b      	ldrb	r3, [r3, #25]
 8007300:	3301      	adds	r3, #1
 8007302:	b2da      	uxtb	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	765a      	strb	r2, [r3, #25]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	7e5b      	ldrb	r3, [r3, #25]
 800730c:	2b02      	cmp	r3, #2
 800730e:	d806      	bhi.n	800731e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800731c:	e025      	b.n	800736a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007324:	2106      	movs	r1, #6
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	795b      	ldrb	r3, [r3, #5]
 8007334:	4619      	mov	r1, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f90c 	bl	8007554 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	791b      	ldrb	r3, [r3, #4]
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f906 	bl	8007554 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800734e:	2302      	movs	r3, #2
 8007350:	73fb      	strb	r3, [r7, #15]
      break;
 8007352:	e00a      	b.n	800736a <USBH_HandleControl+0x2de>

    default:
      break;
 8007354:	bf00      	nop
 8007356:	e008      	b.n	800736a <USBH_HandleControl+0x2de>
      break;
 8007358:	bf00      	nop
 800735a:	e006      	b.n	800736a <USBH_HandleControl+0x2de>
      break;
 800735c:	bf00      	nop
 800735e:	e004      	b.n	800736a <USBH_HandleControl+0x2de>
      break;
 8007360:	bf00      	nop
 8007362:	e002      	b.n	800736a <USBH_HandleControl+0x2de>
      break;
 8007364:	bf00      	nop
 8007366:	e000      	b.n	800736a <USBH_HandleControl+0x2de>
      break;
 8007368:	bf00      	nop
  }

  return status;
 800736a:	7bfb      	ldrb	r3, [r7, #15]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b088      	sub	sp, #32
 8007378:	af04      	add	r7, sp, #16
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	4613      	mov	r3, r2
 8007380:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007382:	79f9      	ldrb	r1, [r7, #7]
 8007384:	2300      	movs	r3, #0
 8007386:	9303      	str	r3, [sp, #12]
 8007388:	2308      	movs	r3, #8
 800738a:	9302      	str	r3, [sp, #8]
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	9301      	str	r3, [sp, #4]
 8007390:	2300      	movs	r3, #0
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	2300      	movs	r3, #0
 8007396:	2200      	movs	r2, #0
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 fb46 	bl	8007a2a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b088      	sub	sp, #32
 80073ac:	af04      	add	r7, sp, #16
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	4611      	mov	r1, r2
 80073b4:	461a      	mov	r2, r3
 80073b6:	460b      	mov	r3, r1
 80073b8:	80fb      	strh	r3, [r7, #6]
 80073ba:	4613      	mov	r3, r2
 80073bc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80073c8:	2300      	movs	r3, #0
 80073ca:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80073cc:	7979      	ldrb	r1, [r7, #5]
 80073ce:	7e3b      	ldrb	r3, [r7, #24]
 80073d0:	9303      	str	r3, [sp, #12]
 80073d2:	88fb      	ldrh	r3, [r7, #6]
 80073d4:	9302      	str	r3, [sp, #8]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	9301      	str	r3, [sp, #4]
 80073da:	2301      	movs	r3, #1
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	2300      	movs	r3, #0
 80073e0:	2200      	movs	r2, #0
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 fb21 	bl	8007a2a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b088      	sub	sp, #32
 80073f6:	af04      	add	r7, sp, #16
 80073f8:	60f8      	str	r0, [r7, #12]
 80073fa:	60b9      	str	r1, [r7, #8]
 80073fc:	4611      	mov	r1, r2
 80073fe:	461a      	mov	r2, r3
 8007400:	460b      	mov	r3, r1
 8007402:	80fb      	strh	r3, [r7, #6]
 8007404:	4613      	mov	r3, r2
 8007406:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007408:	7979      	ldrb	r1, [r7, #5]
 800740a:	2300      	movs	r3, #0
 800740c:	9303      	str	r3, [sp, #12]
 800740e:	88fb      	ldrh	r3, [r7, #6]
 8007410:	9302      	str	r3, [sp, #8]
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	9301      	str	r3, [sp, #4]
 8007416:	2301      	movs	r3, #1
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	2300      	movs	r3, #0
 800741c:	2201      	movs	r2, #1
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f000 fb03 	bl	8007a2a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007424:	2300      	movs	r3, #0

}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b088      	sub	sp, #32
 8007432:	af04      	add	r7, sp, #16
 8007434:	60f8      	str	r0, [r7, #12]
 8007436:	60b9      	str	r1, [r7, #8]
 8007438:	4611      	mov	r1, r2
 800743a:	461a      	mov	r2, r3
 800743c:	460b      	mov	r3, r1
 800743e:	80fb      	strh	r3, [r7, #6]
 8007440:	4613      	mov	r3, r2
 8007442:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007452:	7979      	ldrb	r1, [r7, #5]
 8007454:	7e3b      	ldrb	r3, [r7, #24]
 8007456:	9303      	str	r3, [sp, #12]
 8007458:	88fb      	ldrh	r3, [r7, #6]
 800745a:	9302      	str	r3, [sp, #8]
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	9301      	str	r3, [sp, #4]
 8007460:	2301      	movs	r3, #1
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	2302      	movs	r3, #2
 8007466:	2200      	movs	r2, #0
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f000 fade 	bl	8007a2a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b088      	sub	sp, #32
 800747c:	af04      	add	r7, sp, #16
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	4611      	mov	r1, r2
 8007484:	461a      	mov	r2, r3
 8007486:	460b      	mov	r3, r1
 8007488:	80fb      	strh	r3, [r7, #6]
 800748a:	4613      	mov	r3, r2
 800748c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800748e:	7979      	ldrb	r1, [r7, #5]
 8007490:	2300      	movs	r3, #0
 8007492:	9303      	str	r3, [sp, #12]
 8007494:	88fb      	ldrh	r3, [r7, #6]
 8007496:	9302      	str	r3, [sp, #8]
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	9301      	str	r3, [sp, #4]
 800749c:	2301      	movs	r3, #1
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	2302      	movs	r3, #2
 80074a2:	2201      	movs	r2, #1
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f000 fac0 	bl	8007a2a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af04      	add	r7, sp, #16
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	4608      	mov	r0, r1
 80074be:	4611      	mov	r1, r2
 80074c0:	461a      	mov	r2, r3
 80074c2:	4603      	mov	r3, r0
 80074c4:	70fb      	strb	r3, [r7, #3]
 80074c6:	460b      	mov	r3, r1
 80074c8:	70bb      	strb	r3, [r7, #2]
 80074ca:	4613      	mov	r3, r2
 80074cc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80074ce:	7878      	ldrb	r0, [r7, #1]
 80074d0:	78ba      	ldrb	r2, [r7, #2]
 80074d2:	78f9      	ldrb	r1, [r7, #3]
 80074d4:	8b3b      	ldrh	r3, [r7, #24]
 80074d6:	9302      	str	r3, [sp, #8]
 80074d8:	7d3b      	ldrb	r3, [r7, #20]
 80074da:	9301      	str	r3, [sp, #4]
 80074dc:	7c3b      	ldrb	r3, [r7, #16]
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	4603      	mov	r3, r0
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fa53 	bl	800798e <USBH_LL_OpenPipe>

  return USBH_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b082      	sub	sp, #8
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	460b      	mov	r3, r1
 80074fc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80074fe:	78fb      	ldrb	r3, [r7, #3]
 8007500:	4619      	mov	r1, r3
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fa72 	bl	80079ec <USBH_LL_ClosePipe>

  return USBH_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b084      	sub	sp, #16
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	460b      	mov	r3, r1
 800751c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f836 	bl	8007590 <USBH_GetFreePipe>
 8007524:	4603      	mov	r3, r0
 8007526:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007528:	89fb      	ldrh	r3, [r7, #14]
 800752a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800752e:	4293      	cmp	r3, r2
 8007530:	d00a      	beq.n	8007548 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007532:	78fa      	ldrb	r2, [r7, #3]
 8007534:	89fb      	ldrh	r3, [r7, #14]
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800753e:	6879      	ldr	r1, [r7, #4]
 8007540:	33e0      	adds	r3, #224	; 0xe0
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	440b      	add	r3, r1
 8007546:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007548:	89fb      	ldrh	r3, [r7, #14]
 800754a:	b2db      	uxtb	r3, r3
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	460b      	mov	r3, r1
 800755e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	2b0f      	cmp	r3, #15
 8007564:	d80d      	bhi.n	8007582 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007566:	78fb      	ldrb	r3, [r7, #3]
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	33e0      	adds	r3, #224	; 0xe0
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	78fb      	ldrb	r3, [r7, #3]
 8007574:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007578:	6879      	ldr	r1, [r7, #4]
 800757a:	33e0      	adds	r3, #224	; 0xe0
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	440b      	add	r3, r1
 8007580:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007598:	2300      	movs	r3, #0
 800759a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800759c:	2300      	movs	r3, #0
 800759e:	73fb      	strb	r3, [r7, #15]
 80075a0:	e00f      	b.n	80075c2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	33e0      	adds	r3, #224	; 0xe0
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d102      	bne.n	80075bc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80075b6:	7bfb      	ldrb	r3, [r7, #15]
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	e007      	b.n	80075cc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	3301      	adds	r3, #1
 80075c0:	73fb      	strb	r3, [r7, #15]
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
 80075c4:	2b0f      	cmp	r3, #15
 80075c6:	d9ec      	bls.n	80075a2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80075c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80075dc:	2201      	movs	r2, #1
 80075de:	490e      	ldr	r1, [pc, #56]	; (8007618 <MX_USB_HOST_Init+0x40>)
 80075e0:	480e      	ldr	r0, [pc, #56]	; (800761c <MX_USB_HOST_Init+0x44>)
 80075e2:	f7fe fba5 	bl	8005d30 <USBH_Init>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d001      	beq.n	80075f0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80075ec:	f7f9 fa36 	bl	8000a5c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80075f0:	490b      	ldr	r1, [pc, #44]	; (8007620 <MX_USB_HOST_Init+0x48>)
 80075f2:	480a      	ldr	r0, [pc, #40]	; (800761c <MX_USB_HOST_Init+0x44>)
 80075f4:	f7fe fc2a 	bl	8005e4c <USBH_RegisterClass>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d001      	beq.n	8007602 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80075fe:	f7f9 fa2d 	bl	8000a5c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007602:	4806      	ldr	r0, [pc, #24]	; (800761c <MX_USB_HOST_Init+0x44>)
 8007604:	f7fe fcae 	bl	8005f64 <USBH_Start>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800760e:	f7f9 fa25 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007612:	bf00      	nop
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	08007639 	.word	0x08007639
 800761c:	200001a0 	.word	0x200001a0
 8007620:	2000000c 	.word	0x2000000c

08007624 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007628:	4802      	ldr	r0, [pc, #8]	; (8007634 <MX_USB_HOST_Process+0x10>)
 800762a:	f7fe fcab 	bl	8005f84 <USBH_Process>
}
 800762e:	bf00      	nop
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	200001a0 	.word	0x200001a0

08007638 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007644:	78fb      	ldrb	r3, [r7, #3]
 8007646:	3b01      	subs	r3, #1
 8007648:	2b04      	cmp	r3, #4
 800764a:	d819      	bhi.n	8007680 <USBH_UserProcess+0x48>
 800764c:	a201      	add	r2, pc, #4	; (adr r2, 8007654 <USBH_UserProcess+0x1c>)
 800764e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007652:	bf00      	nop
 8007654:	08007681 	.word	0x08007681
 8007658:	08007671 	.word	0x08007671
 800765c:	08007681 	.word	0x08007681
 8007660:	08007679 	.word	0x08007679
 8007664:	08007669 	.word	0x08007669
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007668:	4b09      	ldr	r3, [pc, #36]	; (8007690 <USBH_UserProcess+0x58>)
 800766a:	2203      	movs	r2, #3
 800766c:	701a      	strb	r2, [r3, #0]
  break;
 800766e:	e008      	b.n	8007682 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007670:	4b07      	ldr	r3, [pc, #28]	; (8007690 <USBH_UserProcess+0x58>)
 8007672:	2202      	movs	r2, #2
 8007674:	701a      	strb	r2, [r3, #0]
  break;
 8007676:	e004      	b.n	8007682 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007678:	4b05      	ldr	r3, [pc, #20]	; (8007690 <USBH_UserProcess+0x58>)
 800767a:	2201      	movs	r2, #1
 800767c:	701a      	strb	r2, [r3, #0]
  break;
 800767e:	e000      	b.n	8007682 <USBH_UserProcess+0x4a>

  default:
  break;
 8007680:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007682:	bf00      	nop
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	20000578 	.word	0x20000578

08007694 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b08a      	sub	sp, #40	; 0x28
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800769c:	f107 0314 	add.w	r3, r7, #20
 80076a0:	2200      	movs	r2, #0
 80076a2:	601a      	str	r2, [r3, #0]
 80076a4:	605a      	str	r2, [r3, #4]
 80076a6:	609a      	str	r2, [r3, #8]
 80076a8:	60da      	str	r2, [r3, #12]
 80076aa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076b4:	d147      	bne.n	8007746 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076b6:	2300      	movs	r3, #0
 80076b8:	613b      	str	r3, [r7, #16]
 80076ba:	4b25      	ldr	r3, [pc, #148]	; (8007750 <HAL_HCD_MspInit+0xbc>)
 80076bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076be:	4a24      	ldr	r2, [pc, #144]	; (8007750 <HAL_HCD_MspInit+0xbc>)
 80076c0:	f043 0301 	orr.w	r3, r3, #1
 80076c4:	6313      	str	r3, [r2, #48]	; 0x30
 80076c6:	4b22      	ldr	r3, [pc, #136]	; (8007750 <HAL_HCD_MspInit+0xbc>)
 80076c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	613b      	str	r3, [r7, #16]
 80076d0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80076d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80076d8:	2300      	movs	r3, #0
 80076da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076dc:	2300      	movs	r3, #0
 80076de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80076e0:	f107 0314 	add.w	r3, r7, #20
 80076e4:	4619      	mov	r1, r3
 80076e6:	481b      	ldr	r0, [pc, #108]	; (8007754 <HAL_HCD_MspInit+0xc0>)
 80076e8:	f7f9 fd96 	bl	8001218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80076ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80076f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076f2:	2302      	movs	r3, #2
 80076f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076f6:	2300      	movs	r3, #0
 80076f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076fa:	2300      	movs	r3, #0
 80076fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80076fe:	230a      	movs	r3, #10
 8007700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007702:	f107 0314 	add.w	r3, r7, #20
 8007706:	4619      	mov	r1, r3
 8007708:	4812      	ldr	r0, [pc, #72]	; (8007754 <HAL_HCD_MspInit+0xc0>)
 800770a:	f7f9 fd85 	bl	8001218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800770e:	4b10      	ldr	r3, [pc, #64]	; (8007750 <HAL_HCD_MspInit+0xbc>)
 8007710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007712:	4a0f      	ldr	r2, [pc, #60]	; (8007750 <HAL_HCD_MspInit+0xbc>)
 8007714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007718:	6353      	str	r3, [r2, #52]	; 0x34
 800771a:	2300      	movs	r3, #0
 800771c:	60fb      	str	r3, [r7, #12]
 800771e:	4b0c      	ldr	r3, [pc, #48]	; (8007750 <HAL_HCD_MspInit+0xbc>)
 8007720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007722:	4a0b      	ldr	r2, [pc, #44]	; (8007750 <HAL_HCD_MspInit+0xbc>)
 8007724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007728:	6453      	str	r3, [r2, #68]	; 0x44
 800772a:	4b09      	ldr	r3, [pc, #36]	; (8007750 <HAL_HCD_MspInit+0xbc>)
 800772c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800772e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007732:	60fb      	str	r3, [r7, #12]
 8007734:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007736:	2200      	movs	r2, #0
 8007738:	2100      	movs	r1, #0
 800773a:	2043      	movs	r0, #67	; 0x43
 800773c:	f7f9 fd35 	bl	80011aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007740:	2043      	movs	r0, #67	; 0x43
 8007742:	f7f9 fd4e 	bl	80011e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007746:	bf00      	nop
 8007748:	3728      	adds	r7, #40	; 0x28
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	40023800 	.word	0x40023800
 8007754:	40020000 	.word	0x40020000

08007758 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007766:	4618      	mov	r0, r3
 8007768:	f7fe ffeb 	bl	8006742 <USBH_LL_IncTimer>
}
 800776c:	bf00      	nop
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007782:	4618      	mov	r0, r3
 8007784:	f7ff f823 	bl	80067ce <USBH_LL_Connect>
}
 8007788:	bf00      	nop
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800779e:	4618      	mov	r0, r3
 80077a0:	f7ff f82c 	bl	80067fc <USBH_LL_Disconnect>
}
 80077a4:	bf00      	nop
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	70fb      	strb	r3, [r7, #3]
 80077b8:	4613      	mov	r3, r2
 80077ba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fe ffdd 	bl	8006796 <USBH_LL_PortEnabled>
}
 80077dc:	bf00      	nop
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fe ffdd 	bl	80067b2 <USBH_LL_PortDisabled>
}
 80077f8:	bf00      	nop
 80077fa:	3708      	adds	r7, #8
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800780e:	2b01      	cmp	r3, #1
 8007810:	d12a      	bne.n	8007868 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007812:	4a18      	ldr	r2, [pc, #96]	; (8007874 <USBH_LL_Init+0x74>)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a15      	ldr	r2, [pc, #84]	; (8007874 <USBH_LL_Init+0x74>)
 800781e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007822:	4b14      	ldr	r3, [pc, #80]	; (8007874 <USBH_LL_Init+0x74>)
 8007824:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007828:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800782a:	4b12      	ldr	r3, [pc, #72]	; (8007874 <USBH_LL_Init+0x74>)
 800782c:	2208      	movs	r2, #8
 800782e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007830:	4b10      	ldr	r3, [pc, #64]	; (8007874 <USBH_LL_Init+0x74>)
 8007832:	2201      	movs	r2, #1
 8007834:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007836:	4b0f      	ldr	r3, [pc, #60]	; (8007874 <USBH_LL_Init+0x74>)
 8007838:	2200      	movs	r2, #0
 800783a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800783c:	4b0d      	ldr	r3, [pc, #52]	; (8007874 <USBH_LL_Init+0x74>)
 800783e:	2202      	movs	r2, #2
 8007840:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007842:	4b0c      	ldr	r3, [pc, #48]	; (8007874 <USBH_LL_Init+0x74>)
 8007844:	2200      	movs	r2, #0
 8007846:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007848:	480a      	ldr	r0, [pc, #40]	; (8007874 <USBH_LL_Init+0x74>)
 800784a:	f7f9 feb4 	bl	80015b6 <HAL_HCD_Init>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007854:	f7f9 f902 	bl	8000a5c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007858:	4806      	ldr	r0, [pc, #24]	; (8007874 <USBH_LL_Init+0x74>)
 800785a:	f7fa fa98 	bl	8001d8e <HAL_HCD_GetCurrentFrame>
 800785e:	4603      	mov	r3, r0
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7fe ff5e 	bl	8006724 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	2000057c 	.word	0x2000057c

08007878 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800788e:	4618      	mov	r0, r3
 8007890:	f7fa fa07 	bl	8001ca2 <HAL_HCD_Start>
 8007894:	4603      	mov	r3, r0
 8007896:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007898:	7bfb      	ldrb	r3, [r7, #15]
 800789a:	4618      	mov	r0, r3
 800789c:	f000 f95c 	bl	8007b58 <USBH_Get_USB_Status>
 80078a0:	4603      	mov	r3, r0
 80078a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b084      	sub	sp, #16
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078ba:	2300      	movs	r3, #0
 80078bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fa fa0f 	bl	8001ce8 <HAL_HCD_Stop>
 80078ca:	4603      	mov	r3, r0
 80078cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f000 f941 	bl	8007b58 <USBH_Get_USB_Status>
 80078d6:	4603      	mov	r3, r0
 80078d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078da:	7bbb      	ldrb	r3, [r7, #14]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80078ec:	2301      	movs	r3, #1
 80078ee:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fa fa57 	bl	8001daa <HAL_HCD_GetCurrentSpeed>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d00c      	beq.n	800791c <USBH_LL_GetSpeed+0x38>
 8007902:	2b02      	cmp	r3, #2
 8007904:	d80d      	bhi.n	8007922 <USBH_LL_GetSpeed+0x3e>
 8007906:	2b00      	cmp	r3, #0
 8007908:	d002      	beq.n	8007910 <USBH_LL_GetSpeed+0x2c>
 800790a:	2b01      	cmp	r3, #1
 800790c:	d003      	beq.n	8007916 <USBH_LL_GetSpeed+0x32>
 800790e:	e008      	b.n	8007922 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007910:	2300      	movs	r3, #0
 8007912:	73fb      	strb	r3, [r7, #15]
    break;
 8007914:	e008      	b.n	8007928 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007916:	2301      	movs	r3, #1
 8007918:	73fb      	strb	r3, [r7, #15]
    break;
 800791a:	e005      	b.n	8007928 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800791c:	2302      	movs	r3, #2
 800791e:	73fb      	strb	r3, [r7, #15]
    break;
 8007920:	e002      	b.n	8007928 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007922:	2301      	movs	r3, #1
 8007924:	73fb      	strb	r3, [r7, #15]
    break;
 8007926:	bf00      	nop
  }
  return  speed;
 8007928:	7bfb      	ldrb	r3, [r7, #15]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b084      	sub	sp, #16
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800793a:	2300      	movs	r3, #0
 800793c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007948:	4618      	mov	r0, r3
 800794a:	f7fa f9ea 	bl	8001d22 <HAL_HCD_ResetPort>
 800794e:	4603      	mov	r3, r0
 8007950:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007952:	7bfb      	ldrb	r3, [r7, #15]
 8007954:	4618      	mov	r0, r3
 8007956:	f000 f8ff 	bl	8007b58 <USBH_Get_USB_Status>
 800795a:	4603      	mov	r3, r0
 800795c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800795e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	460b      	mov	r3, r1
 8007972:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800797a:	78fa      	ldrb	r2, [r7, #3]
 800797c:	4611      	mov	r1, r2
 800797e:	4618      	mov	r0, r3
 8007980:	f7fa f9f1 	bl	8001d66 <HAL_HCD_HC_GetXferCount>
 8007984:	4603      	mov	r3, r0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800798e:	b590      	push	{r4, r7, lr}
 8007990:	b089      	sub	sp, #36	; 0x24
 8007992:	af04      	add	r7, sp, #16
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	4608      	mov	r0, r1
 8007998:	4611      	mov	r1, r2
 800799a:	461a      	mov	r2, r3
 800799c:	4603      	mov	r3, r0
 800799e:	70fb      	strb	r3, [r7, #3]
 80079a0:	460b      	mov	r3, r1
 80079a2:	70bb      	strb	r3, [r7, #2]
 80079a4:	4613      	mov	r3, r2
 80079a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80079b6:	787c      	ldrb	r4, [r7, #1]
 80079b8:	78ba      	ldrb	r2, [r7, #2]
 80079ba:	78f9      	ldrb	r1, [r7, #3]
 80079bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80079be:	9302      	str	r3, [sp, #8]
 80079c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80079c4:	9301      	str	r3, [sp, #4]
 80079c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	4623      	mov	r3, r4
 80079ce:	f7f9 fe54 	bl	800167a <HAL_HCD_HC_Init>
 80079d2:	4603      	mov	r3, r0
 80079d4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80079d6:	7bfb      	ldrb	r3, [r7, #15]
 80079d8:	4618      	mov	r0, r3
 80079da:	f000 f8bd 	bl	8007b58 <USBH_Get_USB_Status>
 80079de:	4603      	mov	r3, r0
 80079e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd90      	pop	{r4, r7, pc}

080079ec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	460b      	mov	r3, r1
 80079f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079f8:	2300      	movs	r3, #0
 80079fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a06:	78fa      	ldrb	r2, [r7, #3]
 8007a08:	4611      	mov	r1, r2
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7f9 fec4 	bl	8001798 <HAL_HCD_HC_Halt>
 8007a10:	4603      	mov	r3, r0
 8007a12:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a14:	7bfb      	ldrb	r3, [r7, #15]
 8007a16:	4618      	mov	r0, r3
 8007a18:	f000 f89e 	bl	8007b58 <USBH_Get_USB_Status>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007a2a:	b590      	push	{r4, r7, lr}
 8007a2c:	b089      	sub	sp, #36	; 0x24
 8007a2e:	af04      	add	r7, sp, #16
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	4608      	mov	r0, r1
 8007a34:	4611      	mov	r1, r2
 8007a36:	461a      	mov	r2, r3
 8007a38:	4603      	mov	r3, r0
 8007a3a:	70fb      	strb	r3, [r7, #3]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	70bb      	strb	r3, [r7, #2]
 8007a40:	4613      	mov	r3, r2
 8007a42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007a52:	787c      	ldrb	r4, [r7, #1]
 8007a54:	78ba      	ldrb	r2, [r7, #2]
 8007a56:	78f9      	ldrb	r1, [r7, #3]
 8007a58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a5c:	9303      	str	r3, [sp, #12]
 8007a5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a60:	9302      	str	r3, [sp, #8]
 8007a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a64:	9301      	str	r3, [sp, #4]
 8007a66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	4623      	mov	r3, r4
 8007a6e:	f7f9 feb7 	bl	80017e0 <HAL_HCD_HC_SubmitRequest>
 8007a72:	4603      	mov	r3, r0
 8007a74:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f000 f86d 	bl	8007b58 <USBH_Get_USB_Status>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3714      	adds	r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd90      	pop	{r4, r7, pc}

08007a8c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a9e:	78fa      	ldrb	r2, [r7, #3]
 8007aa0:	4611      	mov	r1, r2
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fa f94b 	bl	8001d3e <HAL_HCD_HC_GetURBState>
 8007aa8:	4603      	mov	r3, r0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b082      	sub	sp, #8
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	460b      	mov	r3, r1
 8007abc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d103      	bne.n	8007ad0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007ac8:	78fb      	ldrb	r3, [r7, #3]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 f870 	bl	8007bb0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007ad0:	20c8      	movs	r0, #200	; 0xc8
 8007ad2:	f7f9 fa6b 	bl	8000fac <HAL_Delay>
  return USBH_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	70fb      	strb	r3, [r7, #3]
 8007aec:	4613      	mov	r3, r2
 8007aee:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007af6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007af8:	78fb      	ldrb	r3, [r7, #3]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	212c      	movs	r1, #44	; 0x2c
 8007afe:	fb01 f303 	mul.w	r3, r1, r3
 8007b02:	4413      	add	r3, r2
 8007b04:	333b      	adds	r3, #59	; 0x3b
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d009      	beq.n	8007b20 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007b0c:	78fb      	ldrb	r3, [r7, #3]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	212c      	movs	r1, #44	; 0x2c
 8007b12:	fb01 f303 	mul.w	r3, r1, r3
 8007b16:	4413      	add	r3, r2
 8007b18:	3354      	adds	r3, #84	; 0x54
 8007b1a:	78ba      	ldrb	r2, [r7, #2]
 8007b1c:	701a      	strb	r2, [r3, #0]
 8007b1e:	e008      	b.n	8007b32 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007b20:	78fb      	ldrb	r3, [r7, #3]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	212c      	movs	r1, #44	; 0x2c
 8007b26:	fb01 f303 	mul.w	r3, r1, r3
 8007b2a:	4413      	add	r3, r2
 8007b2c:	3355      	adds	r3, #85	; 0x55
 8007b2e:	78ba      	ldrb	r2, [r7, #2]
 8007b30:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3714      	adds	r7, #20
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7f9 fa2f 	bl	8000fac <HAL_Delay>
}
 8007b4e:	bf00      	nop
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	4603      	mov	r3, r0
 8007b60:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b66:	79fb      	ldrb	r3, [r7, #7]
 8007b68:	2b03      	cmp	r3, #3
 8007b6a:	d817      	bhi.n	8007b9c <USBH_Get_USB_Status+0x44>
 8007b6c:	a201      	add	r2, pc, #4	; (adr r2, 8007b74 <USBH_Get_USB_Status+0x1c>)
 8007b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b72:	bf00      	nop
 8007b74:	08007b85 	.word	0x08007b85
 8007b78:	08007b8b 	.word	0x08007b8b
 8007b7c:	08007b91 	.word	0x08007b91
 8007b80:	08007b97 	.word	0x08007b97
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	73fb      	strb	r3, [r7, #15]
    break;
 8007b88:	e00b      	b.n	8007ba2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	73fb      	strb	r3, [r7, #15]
    break;
 8007b8e:	e008      	b.n	8007ba2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007b90:	2301      	movs	r3, #1
 8007b92:	73fb      	strb	r3, [r7, #15]
    break;
 8007b94:	e005      	b.n	8007ba2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007b96:	2302      	movs	r3, #2
 8007b98:	73fb      	strb	r3, [r7, #15]
    break;
 8007b9a:	e002      	b.n	8007ba2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8007ba0:	bf00      	nop
  }
  return usb_status;
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3714      	adds	r7, #20
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007bba:	79fb      	ldrb	r3, [r7, #7]
 8007bbc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007bbe:	79fb      	ldrb	r3, [r7, #7]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d102      	bne.n	8007bca <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	73fb      	strb	r3, [r7, #15]
 8007bc8:	e001      	b.n	8007bce <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	2101      	movs	r1, #1
 8007bd4:	4803      	ldr	r0, [pc, #12]	; (8007be4 <MX_DriverVbusFS+0x34>)
 8007bd6:	f7f9 fcbb 	bl	8001550 <HAL_GPIO_WritePin>
}
 8007bda:	bf00      	nop
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	40020800 	.word	0x40020800

08007be8 <malloc>:
 8007be8:	4b02      	ldr	r3, [pc, #8]	; (8007bf4 <malloc+0xc>)
 8007bea:	4601      	mov	r1, r0
 8007bec:	6818      	ldr	r0, [r3, #0]
 8007bee:	f000 b82b 	b.w	8007c48 <_malloc_r>
 8007bf2:	bf00      	nop
 8007bf4:	20000084 	.word	0x20000084

08007bf8 <free>:
 8007bf8:	4b02      	ldr	r3, [pc, #8]	; (8007c04 <free+0xc>)
 8007bfa:	4601      	mov	r1, r0
 8007bfc:	6818      	ldr	r0, [r3, #0]
 8007bfe:	f000 bb01 	b.w	8008204 <_free_r>
 8007c02:	bf00      	nop
 8007c04:	20000084 	.word	0x20000084

08007c08 <sbrk_aligned>:
 8007c08:	b570      	push	{r4, r5, r6, lr}
 8007c0a:	4e0e      	ldr	r6, [pc, #56]	; (8007c44 <sbrk_aligned+0x3c>)
 8007c0c:	460c      	mov	r4, r1
 8007c0e:	6831      	ldr	r1, [r6, #0]
 8007c10:	4605      	mov	r5, r0
 8007c12:	b911      	cbnz	r1, 8007c1a <sbrk_aligned+0x12>
 8007c14:	f000 faa8 	bl	8008168 <_sbrk_r>
 8007c18:	6030      	str	r0, [r6, #0]
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	f000 faa3 	bl	8008168 <_sbrk_r>
 8007c22:	1c43      	adds	r3, r0, #1
 8007c24:	d00a      	beq.n	8007c3c <sbrk_aligned+0x34>
 8007c26:	1cc4      	adds	r4, r0, #3
 8007c28:	f024 0403 	bic.w	r4, r4, #3
 8007c2c:	42a0      	cmp	r0, r4
 8007c2e:	d007      	beq.n	8007c40 <sbrk_aligned+0x38>
 8007c30:	1a21      	subs	r1, r4, r0
 8007c32:	4628      	mov	r0, r5
 8007c34:	f000 fa98 	bl	8008168 <_sbrk_r>
 8007c38:	3001      	adds	r0, #1
 8007c3a:	d101      	bne.n	8007c40 <sbrk_aligned+0x38>
 8007c3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007c40:	4620      	mov	r0, r4
 8007c42:	bd70      	pop	{r4, r5, r6, pc}
 8007c44:	20000884 	.word	0x20000884

08007c48 <_malloc_r>:
 8007c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c4c:	1ccd      	adds	r5, r1, #3
 8007c4e:	f025 0503 	bic.w	r5, r5, #3
 8007c52:	3508      	adds	r5, #8
 8007c54:	2d0c      	cmp	r5, #12
 8007c56:	bf38      	it	cc
 8007c58:	250c      	movcc	r5, #12
 8007c5a:	2d00      	cmp	r5, #0
 8007c5c:	4607      	mov	r7, r0
 8007c5e:	db01      	blt.n	8007c64 <_malloc_r+0x1c>
 8007c60:	42a9      	cmp	r1, r5
 8007c62:	d905      	bls.n	8007c70 <_malloc_r+0x28>
 8007c64:	230c      	movs	r3, #12
 8007c66:	603b      	str	r3, [r7, #0]
 8007c68:	2600      	movs	r6, #0
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007d44 <_malloc_r+0xfc>
 8007c74:	f000 f868 	bl	8007d48 <__malloc_lock>
 8007c78:	f8d8 3000 	ldr.w	r3, [r8]
 8007c7c:	461c      	mov	r4, r3
 8007c7e:	bb5c      	cbnz	r4, 8007cd8 <_malloc_r+0x90>
 8007c80:	4629      	mov	r1, r5
 8007c82:	4638      	mov	r0, r7
 8007c84:	f7ff ffc0 	bl	8007c08 <sbrk_aligned>
 8007c88:	1c43      	adds	r3, r0, #1
 8007c8a:	4604      	mov	r4, r0
 8007c8c:	d155      	bne.n	8007d3a <_malloc_r+0xf2>
 8007c8e:	f8d8 4000 	ldr.w	r4, [r8]
 8007c92:	4626      	mov	r6, r4
 8007c94:	2e00      	cmp	r6, #0
 8007c96:	d145      	bne.n	8007d24 <_malloc_r+0xdc>
 8007c98:	2c00      	cmp	r4, #0
 8007c9a:	d048      	beq.n	8007d2e <_malloc_r+0xe6>
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	4631      	mov	r1, r6
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	eb04 0903 	add.w	r9, r4, r3
 8007ca6:	f000 fa5f 	bl	8008168 <_sbrk_r>
 8007caa:	4581      	cmp	r9, r0
 8007cac:	d13f      	bne.n	8007d2e <_malloc_r+0xe6>
 8007cae:	6821      	ldr	r1, [r4, #0]
 8007cb0:	1a6d      	subs	r5, r5, r1
 8007cb2:	4629      	mov	r1, r5
 8007cb4:	4638      	mov	r0, r7
 8007cb6:	f7ff ffa7 	bl	8007c08 <sbrk_aligned>
 8007cba:	3001      	adds	r0, #1
 8007cbc:	d037      	beq.n	8007d2e <_malloc_r+0xe6>
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	442b      	add	r3, r5
 8007cc2:	6023      	str	r3, [r4, #0]
 8007cc4:	f8d8 3000 	ldr.w	r3, [r8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d038      	beq.n	8007d3e <_malloc_r+0xf6>
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	42a2      	cmp	r2, r4
 8007cd0:	d12b      	bne.n	8007d2a <_malloc_r+0xe2>
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	605a      	str	r2, [r3, #4]
 8007cd6:	e00f      	b.n	8007cf8 <_malloc_r+0xb0>
 8007cd8:	6822      	ldr	r2, [r4, #0]
 8007cda:	1b52      	subs	r2, r2, r5
 8007cdc:	d41f      	bmi.n	8007d1e <_malloc_r+0xd6>
 8007cde:	2a0b      	cmp	r2, #11
 8007ce0:	d917      	bls.n	8007d12 <_malloc_r+0xca>
 8007ce2:	1961      	adds	r1, r4, r5
 8007ce4:	42a3      	cmp	r3, r4
 8007ce6:	6025      	str	r5, [r4, #0]
 8007ce8:	bf18      	it	ne
 8007cea:	6059      	strne	r1, [r3, #4]
 8007cec:	6863      	ldr	r3, [r4, #4]
 8007cee:	bf08      	it	eq
 8007cf0:	f8c8 1000 	streq.w	r1, [r8]
 8007cf4:	5162      	str	r2, [r4, r5]
 8007cf6:	604b      	str	r3, [r1, #4]
 8007cf8:	4638      	mov	r0, r7
 8007cfa:	f104 060b 	add.w	r6, r4, #11
 8007cfe:	f000 f829 	bl	8007d54 <__malloc_unlock>
 8007d02:	f026 0607 	bic.w	r6, r6, #7
 8007d06:	1d23      	adds	r3, r4, #4
 8007d08:	1af2      	subs	r2, r6, r3
 8007d0a:	d0ae      	beq.n	8007c6a <_malloc_r+0x22>
 8007d0c:	1b9b      	subs	r3, r3, r6
 8007d0e:	50a3      	str	r3, [r4, r2]
 8007d10:	e7ab      	b.n	8007c6a <_malloc_r+0x22>
 8007d12:	42a3      	cmp	r3, r4
 8007d14:	6862      	ldr	r2, [r4, #4]
 8007d16:	d1dd      	bne.n	8007cd4 <_malloc_r+0x8c>
 8007d18:	f8c8 2000 	str.w	r2, [r8]
 8007d1c:	e7ec      	b.n	8007cf8 <_malloc_r+0xb0>
 8007d1e:	4623      	mov	r3, r4
 8007d20:	6864      	ldr	r4, [r4, #4]
 8007d22:	e7ac      	b.n	8007c7e <_malloc_r+0x36>
 8007d24:	4634      	mov	r4, r6
 8007d26:	6876      	ldr	r6, [r6, #4]
 8007d28:	e7b4      	b.n	8007c94 <_malloc_r+0x4c>
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	e7cc      	b.n	8007cc8 <_malloc_r+0x80>
 8007d2e:	230c      	movs	r3, #12
 8007d30:	603b      	str	r3, [r7, #0]
 8007d32:	4638      	mov	r0, r7
 8007d34:	f000 f80e 	bl	8007d54 <__malloc_unlock>
 8007d38:	e797      	b.n	8007c6a <_malloc_r+0x22>
 8007d3a:	6025      	str	r5, [r4, #0]
 8007d3c:	e7dc      	b.n	8007cf8 <_malloc_r+0xb0>
 8007d3e:	605b      	str	r3, [r3, #4]
 8007d40:	deff      	udf	#255	; 0xff
 8007d42:	bf00      	nop
 8007d44:	20000880 	.word	0x20000880

08007d48 <__malloc_lock>:
 8007d48:	4801      	ldr	r0, [pc, #4]	; (8007d50 <__malloc_lock+0x8>)
 8007d4a:	f000 ba59 	b.w	8008200 <__retarget_lock_acquire_recursive>
 8007d4e:	bf00      	nop
 8007d50:	200009c8 	.word	0x200009c8

08007d54 <__malloc_unlock>:
 8007d54:	4801      	ldr	r0, [pc, #4]	; (8007d5c <__malloc_unlock+0x8>)
 8007d56:	f000 ba54 	b.w	8008202 <__retarget_lock_release_recursive>
 8007d5a:	bf00      	nop
 8007d5c:	200009c8 	.word	0x200009c8

08007d60 <__sflush_r>:
 8007d60:	898a      	ldrh	r2, [r1, #12]
 8007d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d66:	4605      	mov	r5, r0
 8007d68:	0710      	lsls	r0, r2, #28
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	d458      	bmi.n	8007e20 <__sflush_r+0xc0>
 8007d6e:	684b      	ldr	r3, [r1, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	dc05      	bgt.n	8007d80 <__sflush_r+0x20>
 8007d74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	dc02      	bgt.n	8007d80 <__sflush_r+0x20>
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d82:	2e00      	cmp	r6, #0
 8007d84:	d0f9      	beq.n	8007d7a <__sflush_r+0x1a>
 8007d86:	2300      	movs	r3, #0
 8007d88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d8c:	682f      	ldr	r7, [r5, #0]
 8007d8e:	6a21      	ldr	r1, [r4, #32]
 8007d90:	602b      	str	r3, [r5, #0]
 8007d92:	d032      	beq.n	8007dfa <__sflush_r+0x9a>
 8007d94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d96:	89a3      	ldrh	r3, [r4, #12]
 8007d98:	075a      	lsls	r2, r3, #29
 8007d9a:	d505      	bpl.n	8007da8 <__sflush_r+0x48>
 8007d9c:	6863      	ldr	r3, [r4, #4]
 8007d9e:	1ac0      	subs	r0, r0, r3
 8007da0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007da2:	b10b      	cbz	r3, 8007da8 <__sflush_r+0x48>
 8007da4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007da6:	1ac0      	subs	r0, r0, r3
 8007da8:	2300      	movs	r3, #0
 8007daa:	4602      	mov	r2, r0
 8007dac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dae:	6a21      	ldr	r1, [r4, #32]
 8007db0:	4628      	mov	r0, r5
 8007db2:	47b0      	blx	r6
 8007db4:	1c43      	adds	r3, r0, #1
 8007db6:	89a3      	ldrh	r3, [r4, #12]
 8007db8:	d106      	bne.n	8007dc8 <__sflush_r+0x68>
 8007dba:	6829      	ldr	r1, [r5, #0]
 8007dbc:	291d      	cmp	r1, #29
 8007dbe:	d82b      	bhi.n	8007e18 <__sflush_r+0xb8>
 8007dc0:	4a29      	ldr	r2, [pc, #164]	; (8007e68 <__sflush_r+0x108>)
 8007dc2:	410a      	asrs	r2, r1
 8007dc4:	07d6      	lsls	r6, r2, #31
 8007dc6:	d427      	bmi.n	8007e18 <__sflush_r+0xb8>
 8007dc8:	2200      	movs	r2, #0
 8007dca:	6062      	str	r2, [r4, #4]
 8007dcc:	04d9      	lsls	r1, r3, #19
 8007dce:	6922      	ldr	r2, [r4, #16]
 8007dd0:	6022      	str	r2, [r4, #0]
 8007dd2:	d504      	bpl.n	8007dde <__sflush_r+0x7e>
 8007dd4:	1c42      	adds	r2, r0, #1
 8007dd6:	d101      	bne.n	8007ddc <__sflush_r+0x7c>
 8007dd8:	682b      	ldr	r3, [r5, #0]
 8007dda:	b903      	cbnz	r3, 8007dde <__sflush_r+0x7e>
 8007ddc:	6560      	str	r0, [r4, #84]	; 0x54
 8007dde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007de0:	602f      	str	r7, [r5, #0]
 8007de2:	2900      	cmp	r1, #0
 8007de4:	d0c9      	beq.n	8007d7a <__sflush_r+0x1a>
 8007de6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dea:	4299      	cmp	r1, r3
 8007dec:	d002      	beq.n	8007df4 <__sflush_r+0x94>
 8007dee:	4628      	mov	r0, r5
 8007df0:	f000 fa08 	bl	8008204 <_free_r>
 8007df4:	2000      	movs	r0, #0
 8007df6:	6360      	str	r0, [r4, #52]	; 0x34
 8007df8:	e7c0      	b.n	8007d7c <__sflush_r+0x1c>
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	47b0      	blx	r6
 8007e00:	1c41      	adds	r1, r0, #1
 8007e02:	d1c8      	bne.n	8007d96 <__sflush_r+0x36>
 8007e04:	682b      	ldr	r3, [r5, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d0c5      	beq.n	8007d96 <__sflush_r+0x36>
 8007e0a:	2b1d      	cmp	r3, #29
 8007e0c:	d001      	beq.n	8007e12 <__sflush_r+0xb2>
 8007e0e:	2b16      	cmp	r3, #22
 8007e10:	d101      	bne.n	8007e16 <__sflush_r+0xb6>
 8007e12:	602f      	str	r7, [r5, #0]
 8007e14:	e7b1      	b.n	8007d7a <__sflush_r+0x1a>
 8007e16:	89a3      	ldrh	r3, [r4, #12]
 8007e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e1c:	81a3      	strh	r3, [r4, #12]
 8007e1e:	e7ad      	b.n	8007d7c <__sflush_r+0x1c>
 8007e20:	690f      	ldr	r7, [r1, #16]
 8007e22:	2f00      	cmp	r7, #0
 8007e24:	d0a9      	beq.n	8007d7a <__sflush_r+0x1a>
 8007e26:	0793      	lsls	r3, r2, #30
 8007e28:	680e      	ldr	r6, [r1, #0]
 8007e2a:	bf08      	it	eq
 8007e2c:	694b      	ldreq	r3, [r1, #20]
 8007e2e:	600f      	str	r7, [r1, #0]
 8007e30:	bf18      	it	ne
 8007e32:	2300      	movne	r3, #0
 8007e34:	eba6 0807 	sub.w	r8, r6, r7
 8007e38:	608b      	str	r3, [r1, #8]
 8007e3a:	f1b8 0f00 	cmp.w	r8, #0
 8007e3e:	dd9c      	ble.n	8007d7a <__sflush_r+0x1a>
 8007e40:	6a21      	ldr	r1, [r4, #32]
 8007e42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e44:	4643      	mov	r3, r8
 8007e46:	463a      	mov	r2, r7
 8007e48:	4628      	mov	r0, r5
 8007e4a:	47b0      	blx	r6
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	dc06      	bgt.n	8007e5e <__sflush_r+0xfe>
 8007e50:	89a3      	ldrh	r3, [r4, #12]
 8007e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e56:	81a3      	strh	r3, [r4, #12]
 8007e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e5c:	e78e      	b.n	8007d7c <__sflush_r+0x1c>
 8007e5e:	4407      	add	r7, r0
 8007e60:	eba8 0800 	sub.w	r8, r8, r0
 8007e64:	e7e9      	b.n	8007e3a <__sflush_r+0xda>
 8007e66:	bf00      	nop
 8007e68:	dfbffffe 	.word	0xdfbffffe

08007e6c <_fflush_r>:
 8007e6c:	b538      	push	{r3, r4, r5, lr}
 8007e6e:	690b      	ldr	r3, [r1, #16]
 8007e70:	4605      	mov	r5, r0
 8007e72:	460c      	mov	r4, r1
 8007e74:	b913      	cbnz	r3, 8007e7c <_fflush_r+0x10>
 8007e76:	2500      	movs	r5, #0
 8007e78:	4628      	mov	r0, r5
 8007e7a:	bd38      	pop	{r3, r4, r5, pc}
 8007e7c:	b118      	cbz	r0, 8007e86 <_fflush_r+0x1a>
 8007e7e:	6a03      	ldr	r3, [r0, #32]
 8007e80:	b90b      	cbnz	r3, 8007e86 <_fflush_r+0x1a>
 8007e82:	f000 f8a9 	bl	8007fd8 <__sinit>
 8007e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d0f3      	beq.n	8007e76 <_fflush_r+0xa>
 8007e8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e90:	07d0      	lsls	r0, r2, #31
 8007e92:	d404      	bmi.n	8007e9e <_fflush_r+0x32>
 8007e94:	0599      	lsls	r1, r3, #22
 8007e96:	d402      	bmi.n	8007e9e <_fflush_r+0x32>
 8007e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e9a:	f000 f9b1 	bl	8008200 <__retarget_lock_acquire_recursive>
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	4621      	mov	r1, r4
 8007ea2:	f7ff ff5d 	bl	8007d60 <__sflush_r>
 8007ea6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ea8:	07da      	lsls	r2, r3, #31
 8007eaa:	4605      	mov	r5, r0
 8007eac:	d4e4      	bmi.n	8007e78 <_fflush_r+0xc>
 8007eae:	89a3      	ldrh	r3, [r4, #12]
 8007eb0:	059b      	lsls	r3, r3, #22
 8007eb2:	d4e1      	bmi.n	8007e78 <_fflush_r+0xc>
 8007eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eb6:	f000 f9a4 	bl	8008202 <__retarget_lock_release_recursive>
 8007eba:	e7dd      	b.n	8007e78 <_fflush_r+0xc>

08007ebc <fflush>:
 8007ebc:	4601      	mov	r1, r0
 8007ebe:	b920      	cbnz	r0, 8007eca <fflush+0xe>
 8007ec0:	4a04      	ldr	r2, [pc, #16]	; (8007ed4 <fflush+0x18>)
 8007ec2:	4905      	ldr	r1, [pc, #20]	; (8007ed8 <fflush+0x1c>)
 8007ec4:	4805      	ldr	r0, [pc, #20]	; (8007edc <fflush+0x20>)
 8007ec6:	f000 b89f 	b.w	8008008 <_fwalk_sglue>
 8007eca:	4b05      	ldr	r3, [pc, #20]	; (8007ee0 <fflush+0x24>)
 8007ecc:	6818      	ldr	r0, [r3, #0]
 8007ece:	f7ff bfcd 	b.w	8007e6c <_fflush_r>
 8007ed2:	bf00      	nop
 8007ed4:	2000002c 	.word	0x2000002c
 8007ed8:	08007e6d 	.word	0x08007e6d
 8007edc:	20000038 	.word	0x20000038
 8007ee0:	20000084 	.word	0x20000084

08007ee4 <std>:
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	b510      	push	{r4, lr}
 8007ee8:	4604      	mov	r4, r0
 8007eea:	e9c0 3300 	strd	r3, r3, [r0]
 8007eee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ef2:	6083      	str	r3, [r0, #8]
 8007ef4:	8181      	strh	r1, [r0, #12]
 8007ef6:	6643      	str	r3, [r0, #100]	; 0x64
 8007ef8:	81c2      	strh	r2, [r0, #14]
 8007efa:	6183      	str	r3, [r0, #24]
 8007efc:	4619      	mov	r1, r3
 8007efe:	2208      	movs	r2, #8
 8007f00:	305c      	adds	r0, #92	; 0x5c
 8007f02:	f000 f8f4 	bl	80080ee <memset>
 8007f06:	4b05      	ldr	r3, [pc, #20]	; (8007f1c <std+0x38>)
 8007f08:	6263      	str	r3, [r4, #36]	; 0x24
 8007f0a:	4b05      	ldr	r3, [pc, #20]	; (8007f20 <std+0x3c>)
 8007f0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f0e:	4b05      	ldr	r3, [pc, #20]	; (8007f24 <std+0x40>)
 8007f10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f12:	4b05      	ldr	r3, [pc, #20]	; (8007f28 <std+0x44>)
 8007f14:	6224      	str	r4, [r4, #32]
 8007f16:	6323      	str	r3, [r4, #48]	; 0x30
 8007f18:	bd10      	pop	{r4, pc}
 8007f1a:	bf00      	nop
 8007f1c:	08008069 	.word	0x08008069
 8007f20:	0800808b 	.word	0x0800808b
 8007f24:	080080c3 	.word	0x080080c3
 8007f28:	080080e7 	.word	0x080080e7

08007f2c <stdio_exit_handler>:
 8007f2c:	4a02      	ldr	r2, [pc, #8]	; (8007f38 <stdio_exit_handler+0xc>)
 8007f2e:	4903      	ldr	r1, [pc, #12]	; (8007f3c <stdio_exit_handler+0x10>)
 8007f30:	4803      	ldr	r0, [pc, #12]	; (8007f40 <stdio_exit_handler+0x14>)
 8007f32:	f000 b869 	b.w	8008008 <_fwalk_sglue>
 8007f36:	bf00      	nop
 8007f38:	2000002c 	.word	0x2000002c
 8007f3c:	08007e6d 	.word	0x08007e6d
 8007f40:	20000038 	.word	0x20000038

08007f44 <cleanup_stdio>:
 8007f44:	6841      	ldr	r1, [r0, #4]
 8007f46:	4b0c      	ldr	r3, [pc, #48]	; (8007f78 <cleanup_stdio+0x34>)
 8007f48:	4299      	cmp	r1, r3
 8007f4a:	b510      	push	{r4, lr}
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	d001      	beq.n	8007f54 <cleanup_stdio+0x10>
 8007f50:	f7ff ff8c 	bl	8007e6c <_fflush_r>
 8007f54:	68a1      	ldr	r1, [r4, #8]
 8007f56:	4b09      	ldr	r3, [pc, #36]	; (8007f7c <cleanup_stdio+0x38>)
 8007f58:	4299      	cmp	r1, r3
 8007f5a:	d002      	beq.n	8007f62 <cleanup_stdio+0x1e>
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f7ff ff85 	bl	8007e6c <_fflush_r>
 8007f62:	68e1      	ldr	r1, [r4, #12]
 8007f64:	4b06      	ldr	r3, [pc, #24]	; (8007f80 <cleanup_stdio+0x3c>)
 8007f66:	4299      	cmp	r1, r3
 8007f68:	d004      	beq.n	8007f74 <cleanup_stdio+0x30>
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f70:	f7ff bf7c 	b.w	8007e6c <_fflush_r>
 8007f74:	bd10      	pop	{r4, pc}
 8007f76:	bf00      	nop
 8007f78:	20000888 	.word	0x20000888
 8007f7c:	200008f0 	.word	0x200008f0
 8007f80:	20000958 	.word	0x20000958

08007f84 <global_stdio_init.part.0>:
 8007f84:	b510      	push	{r4, lr}
 8007f86:	4b0b      	ldr	r3, [pc, #44]	; (8007fb4 <global_stdio_init.part.0+0x30>)
 8007f88:	4c0b      	ldr	r4, [pc, #44]	; (8007fb8 <global_stdio_init.part.0+0x34>)
 8007f8a:	4a0c      	ldr	r2, [pc, #48]	; (8007fbc <global_stdio_init.part.0+0x38>)
 8007f8c:	601a      	str	r2, [r3, #0]
 8007f8e:	4620      	mov	r0, r4
 8007f90:	2200      	movs	r2, #0
 8007f92:	2104      	movs	r1, #4
 8007f94:	f7ff ffa6 	bl	8007ee4 <std>
 8007f98:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	2109      	movs	r1, #9
 8007fa0:	f7ff ffa0 	bl	8007ee4 <std>
 8007fa4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007fa8:	2202      	movs	r2, #2
 8007faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fae:	2112      	movs	r1, #18
 8007fb0:	f7ff bf98 	b.w	8007ee4 <std>
 8007fb4:	200009c0 	.word	0x200009c0
 8007fb8:	20000888 	.word	0x20000888
 8007fbc:	08007f2d 	.word	0x08007f2d

08007fc0 <__sfp_lock_acquire>:
 8007fc0:	4801      	ldr	r0, [pc, #4]	; (8007fc8 <__sfp_lock_acquire+0x8>)
 8007fc2:	f000 b91d 	b.w	8008200 <__retarget_lock_acquire_recursive>
 8007fc6:	bf00      	nop
 8007fc8:	200009c9 	.word	0x200009c9

08007fcc <__sfp_lock_release>:
 8007fcc:	4801      	ldr	r0, [pc, #4]	; (8007fd4 <__sfp_lock_release+0x8>)
 8007fce:	f000 b918 	b.w	8008202 <__retarget_lock_release_recursive>
 8007fd2:	bf00      	nop
 8007fd4:	200009c9 	.word	0x200009c9

08007fd8 <__sinit>:
 8007fd8:	b510      	push	{r4, lr}
 8007fda:	4604      	mov	r4, r0
 8007fdc:	f7ff fff0 	bl	8007fc0 <__sfp_lock_acquire>
 8007fe0:	6a23      	ldr	r3, [r4, #32]
 8007fe2:	b11b      	cbz	r3, 8007fec <__sinit+0x14>
 8007fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fe8:	f7ff bff0 	b.w	8007fcc <__sfp_lock_release>
 8007fec:	4b04      	ldr	r3, [pc, #16]	; (8008000 <__sinit+0x28>)
 8007fee:	6223      	str	r3, [r4, #32]
 8007ff0:	4b04      	ldr	r3, [pc, #16]	; (8008004 <__sinit+0x2c>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1f5      	bne.n	8007fe4 <__sinit+0xc>
 8007ff8:	f7ff ffc4 	bl	8007f84 <global_stdio_init.part.0>
 8007ffc:	e7f2      	b.n	8007fe4 <__sinit+0xc>
 8007ffe:	bf00      	nop
 8008000:	08007f45 	.word	0x08007f45
 8008004:	200009c0 	.word	0x200009c0

08008008 <_fwalk_sglue>:
 8008008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800800c:	4607      	mov	r7, r0
 800800e:	4688      	mov	r8, r1
 8008010:	4614      	mov	r4, r2
 8008012:	2600      	movs	r6, #0
 8008014:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008018:	f1b9 0901 	subs.w	r9, r9, #1
 800801c:	d505      	bpl.n	800802a <_fwalk_sglue+0x22>
 800801e:	6824      	ldr	r4, [r4, #0]
 8008020:	2c00      	cmp	r4, #0
 8008022:	d1f7      	bne.n	8008014 <_fwalk_sglue+0xc>
 8008024:	4630      	mov	r0, r6
 8008026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800802a:	89ab      	ldrh	r3, [r5, #12]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d907      	bls.n	8008040 <_fwalk_sglue+0x38>
 8008030:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008034:	3301      	adds	r3, #1
 8008036:	d003      	beq.n	8008040 <_fwalk_sglue+0x38>
 8008038:	4629      	mov	r1, r5
 800803a:	4638      	mov	r0, r7
 800803c:	47c0      	blx	r8
 800803e:	4306      	orrs	r6, r0
 8008040:	3568      	adds	r5, #104	; 0x68
 8008042:	e7e9      	b.n	8008018 <_fwalk_sglue+0x10>

08008044 <iprintf>:
 8008044:	b40f      	push	{r0, r1, r2, r3}
 8008046:	b507      	push	{r0, r1, r2, lr}
 8008048:	4906      	ldr	r1, [pc, #24]	; (8008064 <iprintf+0x20>)
 800804a:	ab04      	add	r3, sp, #16
 800804c:	6808      	ldr	r0, [r1, #0]
 800804e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008052:	6881      	ldr	r1, [r0, #8]
 8008054:	9301      	str	r3, [sp, #4]
 8008056:	f000 f94b 	bl	80082f0 <_vfiprintf_r>
 800805a:	b003      	add	sp, #12
 800805c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008060:	b004      	add	sp, #16
 8008062:	4770      	bx	lr
 8008064:	20000084 	.word	0x20000084

08008068 <__sread>:
 8008068:	b510      	push	{r4, lr}
 800806a:	460c      	mov	r4, r1
 800806c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008070:	f000 f868 	bl	8008144 <_read_r>
 8008074:	2800      	cmp	r0, #0
 8008076:	bfab      	itete	ge
 8008078:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800807a:	89a3      	ldrhlt	r3, [r4, #12]
 800807c:	181b      	addge	r3, r3, r0
 800807e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008082:	bfac      	ite	ge
 8008084:	6563      	strge	r3, [r4, #84]	; 0x54
 8008086:	81a3      	strhlt	r3, [r4, #12]
 8008088:	bd10      	pop	{r4, pc}

0800808a <__swrite>:
 800808a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800808e:	461f      	mov	r7, r3
 8008090:	898b      	ldrh	r3, [r1, #12]
 8008092:	05db      	lsls	r3, r3, #23
 8008094:	4605      	mov	r5, r0
 8008096:	460c      	mov	r4, r1
 8008098:	4616      	mov	r6, r2
 800809a:	d505      	bpl.n	80080a8 <__swrite+0x1e>
 800809c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a0:	2302      	movs	r3, #2
 80080a2:	2200      	movs	r2, #0
 80080a4:	f000 f83c 	bl	8008120 <_lseek_r>
 80080a8:	89a3      	ldrh	r3, [r4, #12]
 80080aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080b2:	81a3      	strh	r3, [r4, #12]
 80080b4:	4632      	mov	r2, r6
 80080b6:	463b      	mov	r3, r7
 80080b8:	4628      	mov	r0, r5
 80080ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080be:	f000 b863 	b.w	8008188 <_write_r>

080080c2 <__sseek>:
 80080c2:	b510      	push	{r4, lr}
 80080c4:	460c      	mov	r4, r1
 80080c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ca:	f000 f829 	bl	8008120 <_lseek_r>
 80080ce:	1c43      	adds	r3, r0, #1
 80080d0:	89a3      	ldrh	r3, [r4, #12]
 80080d2:	bf15      	itete	ne
 80080d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80080d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080de:	81a3      	strheq	r3, [r4, #12]
 80080e0:	bf18      	it	ne
 80080e2:	81a3      	strhne	r3, [r4, #12]
 80080e4:	bd10      	pop	{r4, pc}

080080e6 <__sclose>:
 80080e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ea:	f000 b809 	b.w	8008100 <_close_r>

080080ee <memset>:
 80080ee:	4402      	add	r2, r0
 80080f0:	4603      	mov	r3, r0
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d100      	bne.n	80080f8 <memset+0xa>
 80080f6:	4770      	bx	lr
 80080f8:	f803 1b01 	strb.w	r1, [r3], #1
 80080fc:	e7f9      	b.n	80080f2 <memset+0x4>
	...

08008100 <_close_r>:
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	4d06      	ldr	r5, [pc, #24]	; (800811c <_close_r+0x1c>)
 8008104:	2300      	movs	r3, #0
 8008106:	4604      	mov	r4, r0
 8008108:	4608      	mov	r0, r1
 800810a:	602b      	str	r3, [r5, #0]
 800810c:	f7f8 fe35 	bl	8000d7a <_close>
 8008110:	1c43      	adds	r3, r0, #1
 8008112:	d102      	bne.n	800811a <_close_r+0x1a>
 8008114:	682b      	ldr	r3, [r5, #0]
 8008116:	b103      	cbz	r3, 800811a <_close_r+0x1a>
 8008118:	6023      	str	r3, [r4, #0]
 800811a:	bd38      	pop	{r3, r4, r5, pc}
 800811c:	200009c4 	.word	0x200009c4

08008120 <_lseek_r>:
 8008120:	b538      	push	{r3, r4, r5, lr}
 8008122:	4d07      	ldr	r5, [pc, #28]	; (8008140 <_lseek_r+0x20>)
 8008124:	4604      	mov	r4, r0
 8008126:	4608      	mov	r0, r1
 8008128:	4611      	mov	r1, r2
 800812a:	2200      	movs	r2, #0
 800812c:	602a      	str	r2, [r5, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	f7f8 fe4a 	bl	8000dc8 <_lseek>
 8008134:	1c43      	adds	r3, r0, #1
 8008136:	d102      	bne.n	800813e <_lseek_r+0x1e>
 8008138:	682b      	ldr	r3, [r5, #0]
 800813a:	b103      	cbz	r3, 800813e <_lseek_r+0x1e>
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	bd38      	pop	{r3, r4, r5, pc}
 8008140:	200009c4 	.word	0x200009c4

08008144 <_read_r>:
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	4d07      	ldr	r5, [pc, #28]	; (8008164 <_read_r+0x20>)
 8008148:	4604      	mov	r4, r0
 800814a:	4608      	mov	r0, r1
 800814c:	4611      	mov	r1, r2
 800814e:	2200      	movs	r2, #0
 8008150:	602a      	str	r2, [r5, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	f7f8 fdf4 	bl	8000d40 <_read>
 8008158:	1c43      	adds	r3, r0, #1
 800815a:	d102      	bne.n	8008162 <_read_r+0x1e>
 800815c:	682b      	ldr	r3, [r5, #0]
 800815e:	b103      	cbz	r3, 8008162 <_read_r+0x1e>
 8008160:	6023      	str	r3, [r4, #0]
 8008162:	bd38      	pop	{r3, r4, r5, pc}
 8008164:	200009c4 	.word	0x200009c4

08008168 <_sbrk_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4d06      	ldr	r5, [pc, #24]	; (8008184 <_sbrk_r+0x1c>)
 800816c:	2300      	movs	r3, #0
 800816e:	4604      	mov	r4, r0
 8008170:	4608      	mov	r0, r1
 8008172:	602b      	str	r3, [r5, #0]
 8008174:	f7f8 fe36 	bl	8000de4 <_sbrk>
 8008178:	1c43      	adds	r3, r0, #1
 800817a:	d102      	bne.n	8008182 <_sbrk_r+0x1a>
 800817c:	682b      	ldr	r3, [r5, #0]
 800817e:	b103      	cbz	r3, 8008182 <_sbrk_r+0x1a>
 8008180:	6023      	str	r3, [r4, #0]
 8008182:	bd38      	pop	{r3, r4, r5, pc}
 8008184:	200009c4 	.word	0x200009c4

08008188 <_write_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	4d07      	ldr	r5, [pc, #28]	; (80081a8 <_write_r+0x20>)
 800818c:	4604      	mov	r4, r0
 800818e:	4608      	mov	r0, r1
 8008190:	4611      	mov	r1, r2
 8008192:	2200      	movs	r2, #0
 8008194:	602a      	str	r2, [r5, #0]
 8008196:	461a      	mov	r2, r3
 8008198:	f7f8 fa0f 	bl	80005ba <_write>
 800819c:	1c43      	adds	r3, r0, #1
 800819e:	d102      	bne.n	80081a6 <_write_r+0x1e>
 80081a0:	682b      	ldr	r3, [r5, #0]
 80081a2:	b103      	cbz	r3, 80081a6 <_write_r+0x1e>
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	bd38      	pop	{r3, r4, r5, pc}
 80081a8:	200009c4 	.word	0x200009c4

080081ac <__errno>:
 80081ac:	4b01      	ldr	r3, [pc, #4]	; (80081b4 <__errno+0x8>)
 80081ae:	6818      	ldr	r0, [r3, #0]
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	20000084 	.word	0x20000084

080081b8 <__libc_init_array>:
 80081b8:	b570      	push	{r4, r5, r6, lr}
 80081ba:	4d0d      	ldr	r5, [pc, #52]	; (80081f0 <__libc_init_array+0x38>)
 80081bc:	4c0d      	ldr	r4, [pc, #52]	; (80081f4 <__libc_init_array+0x3c>)
 80081be:	1b64      	subs	r4, r4, r5
 80081c0:	10a4      	asrs	r4, r4, #2
 80081c2:	2600      	movs	r6, #0
 80081c4:	42a6      	cmp	r6, r4
 80081c6:	d109      	bne.n	80081dc <__libc_init_array+0x24>
 80081c8:	4d0b      	ldr	r5, [pc, #44]	; (80081f8 <__libc_init_array+0x40>)
 80081ca:	4c0c      	ldr	r4, [pc, #48]	; (80081fc <__libc_init_array+0x44>)
 80081cc:	f000 fc54 	bl	8008a78 <_init>
 80081d0:	1b64      	subs	r4, r4, r5
 80081d2:	10a4      	asrs	r4, r4, #2
 80081d4:	2600      	movs	r6, #0
 80081d6:	42a6      	cmp	r6, r4
 80081d8:	d105      	bne.n	80081e6 <__libc_init_array+0x2e>
 80081da:	bd70      	pop	{r4, r5, r6, pc}
 80081dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80081e0:	4798      	blx	r3
 80081e2:	3601      	adds	r6, #1
 80081e4:	e7ee      	b.n	80081c4 <__libc_init_array+0xc>
 80081e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80081ea:	4798      	blx	r3
 80081ec:	3601      	adds	r6, #1
 80081ee:	e7f2      	b.n	80081d6 <__libc_init_array+0x1e>
 80081f0:	08008b0c 	.word	0x08008b0c
 80081f4:	08008b0c 	.word	0x08008b0c
 80081f8:	08008b0c 	.word	0x08008b0c
 80081fc:	08008b10 	.word	0x08008b10

08008200 <__retarget_lock_acquire_recursive>:
 8008200:	4770      	bx	lr

08008202 <__retarget_lock_release_recursive>:
 8008202:	4770      	bx	lr

08008204 <_free_r>:
 8008204:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008206:	2900      	cmp	r1, #0
 8008208:	d044      	beq.n	8008294 <_free_r+0x90>
 800820a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800820e:	9001      	str	r0, [sp, #4]
 8008210:	2b00      	cmp	r3, #0
 8008212:	f1a1 0404 	sub.w	r4, r1, #4
 8008216:	bfb8      	it	lt
 8008218:	18e4      	addlt	r4, r4, r3
 800821a:	f7ff fd95 	bl	8007d48 <__malloc_lock>
 800821e:	4a1e      	ldr	r2, [pc, #120]	; (8008298 <_free_r+0x94>)
 8008220:	9801      	ldr	r0, [sp, #4]
 8008222:	6813      	ldr	r3, [r2, #0]
 8008224:	b933      	cbnz	r3, 8008234 <_free_r+0x30>
 8008226:	6063      	str	r3, [r4, #4]
 8008228:	6014      	str	r4, [r2, #0]
 800822a:	b003      	add	sp, #12
 800822c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008230:	f7ff bd90 	b.w	8007d54 <__malloc_unlock>
 8008234:	42a3      	cmp	r3, r4
 8008236:	d908      	bls.n	800824a <_free_r+0x46>
 8008238:	6825      	ldr	r5, [r4, #0]
 800823a:	1961      	adds	r1, r4, r5
 800823c:	428b      	cmp	r3, r1
 800823e:	bf01      	itttt	eq
 8008240:	6819      	ldreq	r1, [r3, #0]
 8008242:	685b      	ldreq	r3, [r3, #4]
 8008244:	1949      	addeq	r1, r1, r5
 8008246:	6021      	streq	r1, [r4, #0]
 8008248:	e7ed      	b.n	8008226 <_free_r+0x22>
 800824a:	461a      	mov	r2, r3
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	b10b      	cbz	r3, 8008254 <_free_r+0x50>
 8008250:	42a3      	cmp	r3, r4
 8008252:	d9fa      	bls.n	800824a <_free_r+0x46>
 8008254:	6811      	ldr	r1, [r2, #0]
 8008256:	1855      	adds	r5, r2, r1
 8008258:	42a5      	cmp	r5, r4
 800825a:	d10b      	bne.n	8008274 <_free_r+0x70>
 800825c:	6824      	ldr	r4, [r4, #0]
 800825e:	4421      	add	r1, r4
 8008260:	1854      	adds	r4, r2, r1
 8008262:	42a3      	cmp	r3, r4
 8008264:	6011      	str	r1, [r2, #0]
 8008266:	d1e0      	bne.n	800822a <_free_r+0x26>
 8008268:	681c      	ldr	r4, [r3, #0]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	6053      	str	r3, [r2, #4]
 800826e:	440c      	add	r4, r1
 8008270:	6014      	str	r4, [r2, #0]
 8008272:	e7da      	b.n	800822a <_free_r+0x26>
 8008274:	d902      	bls.n	800827c <_free_r+0x78>
 8008276:	230c      	movs	r3, #12
 8008278:	6003      	str	r3, [r0, #0]
 800827a:	e7d6      	b.n	800822a <_free_r+0x26>
 800827c:	6825      	ldr	r5, [r4, #0]
 800827e:	1961      	adds	r1, r4, r5
 8008280:	428b      	cmp	r3, r1
 8008282:	bf04      	itt	eq
 8008284:	6819      	ldreq	r1, [r3, #0]
 8008286:	685b      	ldreq	r3, [r3, #4]
 8008288:	6063      	str	r3, [r4, #4]
 800828a:	bf04      	itt	eq
 800828c:	1949      	addeq	r1, r1, r5
 800828e:	6021      	streq	r1, [r4, #0]
 8008290:	6054      	str	r4, [r2, #4]
 8008292:	e7ca      	b.n	800822a <_free_r+0x26>
 8008294:	b003      	add	sp, #12
 8008296:	bd30      	pop	{r4, r5, pc}
 8008298:	20000880 	.word	0x20000880

0800829c <__sfputc_r>:
 800829c:	6893      	ldr	r3, [r2, #8]
 800829e:	3b01      	subs	r3, #1
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	b410      	push	{r4}
 80082a4:	6093      	str	r3, [r2, #8]
 80082a6:	da08      	bge.n	80082ba <__sfputc_r+0x1e>
 80082a8:	6994      	ldr	r4, [r2, #24]
 80082aa:	42a3      	cmp	r3, r4
 80082ac:	db01      	blt.n	80082b2 <__sfputc_r+0x16>
 80082ae:	290a      	cmp	r1, #10
 80082b0:	d103      	bne.n	80082ba <__sfputc_r+0x1e>
 80082b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082b6:	f000 bac5 	b.w	8008844 <__swbuf_r>
 80082ba:	6813      	ldr	r3, [r2, #0]
 80082bc:	1c58      	adds	r0, r3, #1
 80082be:	6010      	str	r0, [r2, #0]
 80082c0:	7019      	strb	r1, [r3, #0]
 80082c2:	4608      	mov	r0, r1
 80082c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <__sfputs_r>:
 80082ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082cc:	4606      	mov	r6, r0
 80082ce:	460f      	mov	r7, r1
 80082d0:	4614      	mov	r4, r2
 80082d2:	18d5      	adds	r5, r2, r3
 80082d4:	42ac      	cmp	r4, r5
 80082d6:	d101      	bne.n	80082dc <__sfputs_r+0x12>
 80082d8:	2000      	movs	r0, #0
 80082da:	e007      	b.n	80082ec <__sfputs_r+0x22>
 80082dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082e0:	463a      	mov	r2, r7
 80082e2:	4630      	mov	r0, r6
 80082e4:	f7ff ffda 	bl	800829c <__sfputc_r>
 80082e8:	1c43      	adds	r3, r0, #1
 80082ea:	d1f3      	bne.n	80082d4 <__sfputs_r+0xa>
 80082ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082f0 <_vfiprintf_r>:
 80082f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f4:	460d      	mov	r5, r1
 80082f6:	b09d      	sub	sp, #116	; 0x74
 80082f8:	4614      	mov	r4, r2
 80082fa:	4698      	mov	r8, r3
 80082fc:	4606      	mov	r6, r0
 80082fe:	b118      	cbz	r0, 8008308 <_vfiprintf_r+0x18>
 8008300:	6a03      	ldr	r3, [r0, #32]
 8008302:	b90b      	cbnz	r3, 8008308 <_vfiprintf_r+0x18>
 8008304:	f7ff fe68 	bl	8007fd8 <__sinit>
 8008308:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800830a:	07d9      	lsls	r1, r3, #31
 800830c:	d405      	bmi.n	800831a <_vfiprintf_r+0x2a>
 800830e:	89ab      	ldrh	r3, [r5, #12]
 8008310:	059a      	lsls	r2, r3, #22
 8008312:	d402      	bmi.n	800831a <_vfiprintf_r+0x2a>
 8008314:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008316:	f7ff ff73 	bl	8008200 <__retarget_lock_acquire_recursive>
 800831a:	89ab      	ldrh	r3, [r5, #12]
 800831c:	071b      	lsls	r3, r3, #28
 800831e:	d501      	bpl.n	8008324 <_vfiprintf_r+0x34>
 8008320:	692b      	ldr	r3, [r5, #16]
 8008322:	b99b      	cbnz	r3, 800834c <_vfiprintf_r+0x5c>
 8008324:	4629      	mov	r1, r5
 8008326:	4630      	mov	r0, r6
 8008328:	f000 faca 	bl	80088c0 <__swsetup_r>
 800832c:	b170      	cbz	r0, 800834c <_vfiprintf_r+0x5c>
 800832e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008330:	07dc      	lsls	r4, r3, #31
 8008332:	d504      	bpl.n	800833e <_vfiprintf_r+0x4e>
 8008334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008338:	b01d      	add	sp, #116	; 0x74
 800833a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800833e:	89ab      	ldrh	r3, [r5, #12]
 8008340:	0598      	lsls	r0, r3, #22
 8008342:	d4f7      	bmi.n	8008334 <_vfiprintf_r+0x44>
 8008344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008346:	f7ff ff5c 	bl	8008202 <__retarget_lock_release_recursive>
 800834a:	e7f3      	b.n	8008334 <_vfiprintf_r+0x44>
 800834c:	2300      	movs	r3, #0
 800834e:	9309      	str	r3, [sp, #36]	; 0x24
 8008350:	2320      	movs	r3, #32
 8008352:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008356:	f8cd 800c 	str.w	r8, [sp, #12]
 800835a:	2330      	movs	r3, #48	; 0x30
 800835c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008510 <_vfiprintf_r+0x220>
 8008360:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008364:	f04f 0901 	mov.w	r9, #1
 8008368:	4623      	mov	r3, r4
 800836a:	469a      	mov	sl, r3
 800836c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008370:	b10a      	cbz	r2, 8008376 <_vfiprintf_r+0x86>
 8008372:	2a25      	cmp	r2, #37	; 0x25
 8008374:	d1f9      	bne.n	800836a <_vfiprintf_r+0x7a>
 8008376:	ebba 0b04 	subs.w	fp, sl, r4
 800837a:	d00b      	beq.n	8008394 <_vfiprintf_r+0xa4>
 800837c:	465b      	mov	r3, fp
 800837e:	4622      	mov	r2, r4
 8008380:	4629      	mov	r1, r5
 8008382:	4630      	mov	r0, r6
 8008384:	f7ff ffa1 	bl	80082ca <__sfputs_r>
 8008388:	3001      	adds	r0, #1
 800838a:	f000 80a9 	beq.w	80084e0 <_vfiprintf_r+0x1f0>
 800838e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008390:	445a      	add	r2, fp
 8008392:	9209      	str	r2, [sp, #36]	; 0x24
 8008394:	f89a 3000 	ldrb.w	r3, [sl]
 8008398:	2b00      	cmp	r3, #0
 800839a:	f000 80a1 	beq.w	80084e0 <_vfiprintf_r+0x1f0>
 800839e:	2300      	movs	r3, #0
 80083a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083a8:	f10a 0a01 	add.w	sl, sl, #1
 80083ac:	9304      	str	r3, [sp, #16]
 80083ae:	9307      	str	r3, [sp, #28]
 80083b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083b4:	931a      	str	r3, [sp, #104]	; 0x68
 80083b6:	4654      	mov	r4, sl
 80083b8:	2205      	movs	r2, #5
 80083ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083be:	4854      	ldr	r0, [pc, #336]	; (8008510 <_vfiprintf_r+0x220>)
 80083c0:	f7f7 ff06 	bl	80001d0 <memchr>
 80083c4:	9a04      	ldr	r2, [sp, #16]
 80083c6:	b9d8      	cbnz	r0, 8008400 <_vfiprintf_r+0x110>
 80083c8:	06d1      	lsls	r1, r2, #27
 80083ca:	bf44      	itt	mi
 80083cc:	2320      	movmi	r3, #32
 80083ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083d2:	0713      	lsls	r3, r2, #28
 80083d4:	bf44      	itt	mi
 80083d6:	232b      	movmi	r3, #43	; 0x2b
 80083d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083dc:	f89a 3000 	ldrb.w	r3, [sl]
 80083e0:	2b2a      	cmp	r3, #42	; 0x2a
 80083e2:	d015      	beq.n	8008410 <_vfiprintf_r+0x120>
 80083e4:	9a07      	ldr	r2, [sp, #28]
 80083e6:	4654      	mov	r4, sl
 80083e8:	2000      	movs	r0, #0
 80083ea:	f04f 0c0a 	mov.w	ip, #10
 80083ee:	4621      	mov	r1, r4
 80083f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083f4:	3b30      	subs	r3, #48	; 0x30
 80083f6:	2b09      	cmp	r3, #9
 80083f8:	d94d      	bls.n	8008496 <_vfiprintf_r+0x1a6>
 80083fa:	b1b0      	cbz	r0, 800842a <_vfiprintf_r+0x13a>
 80083fc:	9207      	str	r2, [sp, #28]
 80083fe:	e014      	b.n	800842a <_vfiprintf_r+0x13a>
 8008400:	eba0 0308 	sub.w	r3, r0, r8
 8008404:	fa09 f303 	lsl.w	r3, r9, r3
 8008408:	4313      	orrs	r3, r2
 800840a:	9304      	str	r3, [sp, #16]
 800840c:	46a2      	mov	sl, r4
 800840e:	e7d2      	b.n	80083b6 <_vfiprintf_r+0xc6>
 8008410:	9b03      	ldr	r3, [sp, #12]
 8008412:	1d19      	adds	r1, r3, #4
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	9103      	str	r1, [sp, #12]
 8008418:	2b00      	cmp	r3, #0
 800841a:	bfbb      	ittet	lt
 800841c:	425b      	neglt	r3, r3
 800841e:	f042 0202 	orrlt.w	r2, r2, #2
 8008422:	9307      	strge	r3, [sp, #28]
 8008424:	9307      	strlt	r3, [sp, #28]
 8008426:	bfb8      	it	lt
 8008428:	9204      	strlt	r2, [sp, #16]
 800842a:	7823      	ldrb	r3, [r4, #0]
 800842c:	2b2e      	cmp	r3, #46	; 0x2e
 800842e:	d10c      	bne.n	800844a <_vfiprintf_r+0x15a>
 8008430:	7863      	ldrb	r3, [r4, #1]
 8008432:	2b2a      	cmp	r3, #42	; 0x2a
 8008434:	d134      	bne.n	80084a0 <_vfiprintf_r+0x1b0>
 8008436:	9b03      	ldr	r3, [sp, #12]
 8008438:	1d1a      	adds	r2, r3, #4
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	9203      	str	r2, [sp, #12]
 800843e:	2b00      	cmp	r3, #0
 8008440:	bfb8      	it	lt
 8008442:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008446:	3402      	adds	r4, #2
 8008448:	9305      	str	r3, [sp, #20]
 800844a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008520 <_vfiprintf_r+0x230>
 800844e:	7821      	ldrb	r1, [r4, #0]
 8008450:	2203      	movs	r2, #3
 8008452:	4650      	mov	r0, sl
 8008454:	f7f7 febc 	bl	80001d0 <memchr>
 8008458:	b138      	cbz	r0, 800846a <_vfiprintf_r+0x17a>
 800845a:	9b04      	ldr	r3, [sp, #16]
 800845c:	eba0 000a 	sub.w	r0, r0, sl
 8008460:	2240      	movs	r2, #64	; 0x40
 8008462:	4082      	lsls	r2, r0
 8008464:	4313      	orrs	r3, r2
 8008466:	3401      	adds	r4, #1
 8008468:	9304      	str	r3, [sp, #16]
 800846a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800846e:	4829      	ldr	r0, [pc, #164]	; (8008514 <_vfiprintf_r+0x224>)
 8008470:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008474:	2206      	movs	r2, #6
 8008476:	f7f7 feab 	bl	80001d0 <memchr>
 800847a:	2800      	cmp	r0, #0
 800847c:	d03f      	beq.n	80084fe <_vfiprintf_r+0x20e>
 800847e:	4b26      	ldr	r3, [pc, #152]	; (8008518 <_vfiprintf_r+0x228>)
 8008480:	bb1b      	cbnz	r3, 80084ca <_vfiprintf_r+0x1da>
 8008482:	9b03      	ldr	r3, [sp, #12]
 8008484:	3307      	adds	r3, #7
 8008486:	f023 0307 	bic.w	r3, r3, #7
 800848a:	3308      	adds	r3, #8
 800848c:	9303      	str	r3, [sp, #12]
 800848e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008490:	443b      	add	r3, r7
 8008492:	9309      	str	r3, [sp, #36]	; 0x24
 8008494:	e768      	b.n	8008368 <_vfiprintf_r+0x78>
 8008496:	fb0c 3202 	mla	r2, ip, r2, r3
 800849a:	460c      	mov	r4, r1
 800849c:	2001      	movs	r0, #1
 800849e:	e7a6      	b.n	80083ee <_vfiprintf_r+0xfe>
 80084a0:	2300      	movs	r3, #0
 80084a2:	3401      	adds	r4, #1
 80084a4:	9305      	str	r3, [sp, #20]
 80084a6:	4619      	mov	r1, r3
 80084a8:	f04f 0c0a 	mov.w	ip, #10
 80084ac:	4620      	mov	r0, r4
 80084ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084b2:	3a30      	subs	r2, #48	; 0x30
 80084b4:	2a09      	cmp	r2, #9
 80084b6:	d903      	bls.n	80084c0 <_vfiprintf_r+0x1d0>
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d0c6      	beq.n	800844a <_vfiprintf_r+0x15a>
 80084bc:	9105      	str	r1, [sp, #20]
 80084be:	e7c4      	b.n	800844a <_vfiprintf_r+0x15a>
 80084c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80084c4:	4604      	mov	r4, r0
 80084c6:	2301      	movs	r3, #1
 80084c8:	e7f0      	b.n	80084ac <_vfiprintf_r+0x1bc>
 80084ca:	ab03      	add	r3, sp, #12
 80084cc:	9300      	str	r3, [sp, #0]
 80084ce:	462a      	mov	r2, r5
 80084d0:	4b12      	ldr	r3, [pc, #72]	; (800851c <_vfiprintf_r+0x22c>)
 80084d2:	a904      	add	r1, sp, #16
 80084d4:	4630      	mov	r0, r6
 80084d6:	f3af 8000 	nop.w
 80084da:	4607      	mov	r7, r0
 80084dc:	1c78      	adds	r0, r7, #1
 80084de:	d1d6      	bne.n	800848e <_vfiprintf_r+0x19e>
 80084e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084e2:	07d9      	lsls	r1, r3, #31
 80084e4:	d405      	bmi.n	80084f2 <_vfiprintf_r+0x202>
 80084e6:	89ab      	ldrh	r3, [r5, #12]
 80084e8:	059a      	lsls	r2, r3, #22
 80084ea:	d402      	bmi.n	80084f2 <_vfiprintf_r+0x202>
 80084ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084ee:	f7ff fe88 	bl	8008202 <__retarget_lock_release_recursive>
 80084f2:	89ab      	ldrh	r3, [r5, #12]
 80084f4:	065b      	lsls	r3, r3, #25
 80084f6:	f53f af1d 	bmi.w	8008334 <_vfiprintf_r+0x44>
 80084fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084fc:	e71c      	b.n	8008338 <_vfiprintf_r+0x48>
 80084fe:	ab03      	add	r3, sp, #12
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	462a      	mov	r2, r5
 8008504:	4b05      	ldr	r3, [pc, #20]	; (800851c <_vfiprintf_r+0x22c>)
 8008506:	a904      	add	r1, sp, #16
 8008508:	4630      	mov	r0, r6
 800850a:	f000 f879 	bl	8008600 <_printf_i>
 800850e:	e7e4      	b.n	80084da <_vfiprintf_r+0x1ea>
 8008510:	08008ad0 	.word	0x08008ad0
 8008514:	08008ada 	.word	0x08008ada
 8008518:	00000000 	.word	0x00000000
 800851c:	080082cb 	.word	0x080082cb
 8008520:	08008ad6 	.word	0x08008ad6

08008524 <_printf_common>:
 8008524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008528:	4616      	mov	r6, r2
 800852a:	4699      	mov	r9, r3
 800852c:	688a      	ldr	r2, [r1, #8]
 800852e:	690b      	ldr	r3, [r1, #16]
 8008530:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008534:	4293      	cmp	r3, r2
 8008536:	bfb8      	it	lt
 8008538:	4613      	movlt	r3, r2
 800853a:	6033      	str	r3, [r6, #0]
 800853c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008540:	4607      	mov	r7, r0
 8008542:	460c      	mov	r4, r1
 8008544:	b10a      	cbz	r2, 800854a <_printf_common+0x26>
 8008546:	3301      	adds	r3, #1
 8008548:	6033      	str	r3, [r6, #0]
 800854a:	6823      	ldr	r3, [r4, #0]
 800854c:	0699      	lsls	r1, r3, #26
 800854e:	bf42      	ittt	mi
 8008550:	6833      	ldrmi	r3, [r6, #0]
 8008552:	3302      	addmi	r3, #2
 8008554:	6033      	strmi	r3, [r6, #0]
 8008556:	6825      	ldr	r5, [r4, #0]
 8008558:	f015 0506 	ands.w	r5, r5, #6
 800855c:	d106      	bne.n	800856c <_printf_common+0x48>
 800855e:	f104 0a19 	add.w	sl, r4, #25
 8008562:	68e3      	ldr	r3, [r4, #12]
 8008564:	6832      	ldr	r2, [r6, #0]
 8008566:	1a9b      	subs	r3, r3, r2
 8008568:	42ab      	cmp	r3, r5
 800856a:	dc26      	bgt.n	80085ba <_printf_common+0x96>
 800856c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008570:	1e13      	subs	r3, r2, #0
 8008572:	6822      	ldr	r2, [r4, #0]
 8008574:	bf18      	it	ne
 8008576:	2301      	movne	r3, #1
 8008578:	0692      	lsls	r2, r2, #26
 800857a:	d42b      	bmi.n	80085d4 <_printf_common+0xb0>
 800857c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008580:	4649      	mov	r1, r9
 8008582:	4638      	mov	r0, r7
 8008584:	47c0      	blx	r8
 8008586:	3001      	adds	r0, #1
 8008588:	d01e      	beq.n	80085c8 <_printf_common+0xa4>
 800858a:	6823      	ldr	r3, [r4, #0]
 800858c:	6922      	ldr	r2, [r4, #16]
 800858e:	f003 0306 	and.w	r3, r3, #6
 8008592:	2b04      	cmp	r3, #4
 8008594:	bf02      	ittt	eq
 8008596:	68e5      	ldreq	r5, [r4, #12]
 8008598:	6833      	ldreq	r3, [r6, #0]
 800859a:	1aed      	subeq	r5, r5, r3
 800859c:	68a3      	ldr	r3, [r4, #8]
 800859e:	bf0c      	ite	eq
 80085a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085a4:	2500      	movne	r5, #0
 80085a6:	4293      	cmp	r3, r2
 80085a8:	bfc4      	itt	gt
 80085aa:	1a9b      	subgt	r3, r3, r2
 80085ac:	18ed      	addgt	r5, r5, r3
 80085ae:	2600      	movs	r6, #0
 80085b0:	341a      	adds	r4, #26
 80085b2:	42b5      	cmp	r5, r6
 80085b4:	d11a      	bne.n	80085ec <_printf_common+0xc8>
 80085b6:	2000      	movs	r0, #0
 80085b8:	e008      	b.n	80085cc <_printf_common+0xa8>
 80085ba:	2301      	movs	r3, #1
 80085bc:	4652      	mov	r2, sl
 80085be:	4649      	mov	r1, r9
 80085c0:	4638      	mov	r0, r7
 80085c2:	47c0      	blx	r8
 80085c4:	3001      	adds	r0, #1
 80085c6:	d103      	bne.n	80085d0 <_printf_common+0xac>
 80085c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d0:	3501      	adds	r5, #1
 80085d2:	e7c6      	b.n	8008562 <_printf_common+0x3e>
 80085d4:	18e1      	adds	r1, r4, r3
 80085d6:	1c5a      	adds	r2, r3, #1
 80085d8:	2030      	movs	r0, #48	; 0x30
 80085da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085de:	4422      	add	r2, r4
 80085e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085e8:	3302      	adds	r3, #2
 80085ea:	e7c7      	b.n	800857c <_printf_common+0x58>
 80085ec:	2301      	movs	r3, #1
 80085ee:	4622      	mov	r2, r4
 80085f0:	4649      	mov	r1, r9
 80085f2:	4638      	mov	r0, r7
 80085f4:	47c0      	blx	r8
 80085f6:	3001      	adds	r0, #1
 80085f8:	d0e6      	beq.n	80085c8 <_printf_common+0xa4>
 80085fa:	3601      	adds	r6, #1
 80085fc:	e7d9      	b.n	80085b2 <_printf_common+0x8e>
	...

08008600 <_printf_i>:
 8008600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008604:	7e0f      	ldrb	r7, [r1, #24]
 8008606:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008608:	2f78      	cmp	r7, #120	; 0x78
 800860a:	4691      	mov	r9, r2
 800860c:	4680      	mov	r8, r0
 800860e:	460c      	mov	r4, r1
 8008610:	469a      	mov	sl, r3
 8008612:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008616:	d807      	bhi.n	8008628 <_printf_i+0x28>
 8008618:	2f62      	cmp	r7, #98	; 0x62
 800861a:	d80a      	bhi.n	8008632 <_printf_i+0x32>
 800861c:	2f00      	cmp	r7, #0
 800861e:	f000 80d4 	beq.w	80087ca <_printf_i+0x1ca>
 8008622:	2f58      	cmp	r7, #88	; 0x58
 8008624:	f000 80c0 	beq.w	80087a8 <_printf_i+0x1a8>
 8008628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800862c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008630:	e03a      	b.n	80086a8 <_printf_i+0xa8>
 8008632:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008636:	2b15      	cmp	r3, #21
 8008638:	d8f6      	bhi.n	8008628 <_printf_i+0x28>
 800863a:	a101      	add	r1, pc, #4	; (adr r1, 8008640 <_printf_i+0x40>)
 800863c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008640:	08008699 	.word	0x08008699
 8008644:	080086ad 	.word	0x080086ad
 8008648:	08008629 	.word	0x08008629
 800864c:	08008629 	.word	0x08008629
 8008650:	08008629 	.word	0x08008629
 8008654:	08008629 	.word	0x08008629
 8008658:	080086ad 	.word	0x080086ad
 800865c:	08008629 	.word	0x08008629
 8008660:	08008629 	.word	0x08008629
 8008664:	08008629 	.word	0x08008629
 8008668:	08008629 	.word	0x08008629
 800866c:	080087b1 	.word	0x080087b1
 8008670:	080086d9 	.word	0x080086d9
 8008674:	0800876b 	.word	0x0800876b
 8008678:	08008629 	.word	0x08008629
 800867c:	08008629 	.word	0x08008629
 8008680:	080087d3 	.word	0x080087d3
 8008684:	08008629 	.word	0x08008629
 8008688:	080086d9 	.word	0x080086d9
 800868c:	08008629 	.word	0x08008629
 8008690:	08008629 	.word	0x08008629
 8008694:	08008773 	.word	0x08008773
 8008698:	682b      	ldr	r3, [r5, #0]
 800869a:	1d1a      	adds	r2, r3, #4
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	602a      	str	r2, [r5, #0]
 80086a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086a8:	2301      	movs	r3, #1
 80086aa:	e09f      	b.n	80087ec <_printf_i+0x1ec>
 80086ac:	6820      	ldr	r0, [r4, #0]
 80086ae:	682b      	ldr	r3, [r5, #0]
 80086b0:	0607      	lsls	r7, r0, #24
 80086b2:	f103 0104 	add.w	r1, r3, #4
 80086b6:	6029      	str	r1, [r5, #0]
 80086b8:	d501      	bpl.n	80086be <_printf_i+0xbe>
 80086ba:	681e      	ldr	r6, [r3, #0]
 80086bc:	e003      	b.n	80086c6 <_printf_i+0xc6>
 80086be:	0646      	lsls	r6, r0, #25
 80086c0:	d5fb      	bpl.n	80086ba <_printf_i+0xba>
 80086c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80086c6:	2e00      	cmp	r6, #0
 80086c8:	da03      	bge.n	80086d2 <_printf_i+0xd2>
 80086ca:	232d      	movs	r3, #45	; 0x2d
 80086cc:	4276      	negs	r6, r6
 80086ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086d2:	485a      	ldr	r0, [pc, #360]	; (800883c <_printf_i+0x23c>)
 80086d4:	230a      	movs	r3, #10
 80086d6:	e012      	b.n	80086fe <_printf_i+0xfe>
 80086d8:	682b      	ldr	r3, [r5, #0]
 80086da:	6820      	ldr	r0, [r4, #0]
 80086dc:	1d19      	adds	r1, r3, #4
 80086de:	6029      	str	r1, [r5, #0]
 80086e0:	0605      	lsls	r5, r0, #24
 80086e2:	d501      	bpl.n	80086e8 <_printf_i+0xe8>
 80086e4:	681e      	ldr	r6, [r3, #0]
 80086e6:	e002      	b.n	80086ee <_printf_i+0xee>
 80086e8:	0641      	lsls	r1, r0, #25
 80086ea:	d5fb      	bpl.n	80086e4 <_printf_i+0xe4>
 80086ec:	881e      	ldrh	r6, [r3, #0]
 80086ee:	4853      	ldr	r0, [pc, #332]	; (800883c <_printf_i+0x23c>)
 80086f0:	2f6f      	cmp	r7, #111	; 0x6f
 80086f2:	bf0c      	ite	eq
 80086f4:	2308      	moveq	r3, #8
 80086f6:	230a      	movne	r3, #10
 80086f8:	2100      	movs	r1, #0
 80086fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086fe:	6865      	ldr	r5, [r4, #4]
 8008700:	60a5      	str	r5, [r4, #8]
 8008702:	2d00      	cmp	r5, #0
 8008704:	bfa2      	ittt	ge
 8008706:	6821      	ldrge	r1, [r4, #0]
 8008708:	f021 0104 	bicge.w	r1, r1, #4
 800870c:	6021      	strge	r1, [r4, #0]
 800870e:	b90e      	cbnz	r6, 8008714 <_printf_i+0x114>
 8008710:	2d00      	cmp	r5, #0
 8008712:	d04b      	beq.n	80087ac <_printf_i+0x1ac>
 8008714:	4615      	mov	r5, r2
 8008716:	fbb6 f1f3 	udiv	r1, r6, r3
 800871a:	fb03 6711 	mls	r7, r3, r1, r6
 800871e:	5dc7      	ldrb	r7, [r0, r7]
 8008720:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008724:	4637      	mov	r7, r6
 8008726:	42bb      	cmp	r3, r7
 8008728:	460e      	mov	r6, r1
 800872a:	d9f4      	bls.n	8008716 <_printf_i+0x116>
 800872c:	2b08      	cmp	r3, #8
 800872e:	d10b      	bne.n	8008748 <_printf_i+0x148>
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	07de      	lsls	r6, r3, #31
 8008734:	d508      	bpl.n	8008748 <_printf_i+0x148>
 8008736:	6923      	ldr	r3, [r4, #16]
 8008738:	6861      	ldr	r1, [r4, #4]
 800873a:	4299      	cmp	r1, r3
 800873c:	bfde      	ittt	le
 800873e:	2330      	movle	r3, #48	; 0x30
 8008740:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008744:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008748:	1b52      	subs	r2, r2, r5
 800874a:	6122      	str	r2, [r4, #16]
 800874c:	f8cd a000 	str.w	sl, [sp]
 8008750:	464b      	mov	r3, r9
 8008752:	aa03      	add	r2, sp, #12
 8008754:	4621      	mov	r1, r4
 8008756:	4640      	mov	r0, r8
 8008758:	f7ff fee4 	bl	8008524 <_printf_common>
 800875c:	3001      	adds	r0, #1
 800875e:	d14a      	bne.n	80087f6 <_printf_i+0x1f6>
 8008760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008764:	b004      	add	sp, #16
 8008766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	f043 0320 	orr.w	r3, r3, #32
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	4833      	ldr	r0, [pc, #204]	; (8008840 <_printf_i+0x240>)
 8008774:	2778      	movs	r7, #120	; 0x78
 8008776:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	6829      	ldr	r1, [r5, #0]
 800877e:	061f      	lsls	r7, r3, #24
 8008780:	f851 6b04 	ldr.w	r6, [r1], #4
 8008784:	d402      	bmi.n	800878c <_printf_i+0x18c>
 8008786:	065f      	lsls	r7, r3, #25
 8008788:	bf48      	it	mi
 800878a:	b2b6      	uxthmi	r6, r6
 800878c:	07df      	lsls	r7, r3, #31
 800878e:	bf48      	it	mi
 8008790:	f043 0320 	orrmi.w	r3, r3, #32
 8008794:	6029      	str	r1, [r5, #0]
 8008796:	bf48      	it	mi
 8008798:	6023      	strmi	r3, [r4, #0]
 800879a:	b91e      	cbnz	r6, 80087a4 <_printf_i+0x1a4>
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	f023 0320 	bic.w	r3, r3, #32
 80087a2:	6023      	str	r3, [r4, #0]
 80087a4:	2310      	movs	r3, #16
 80087a6:	e7a7      	b.n	80086f8 <_printf_i+0xf8>
 80087a8:	4824      	ldr	r0, [pc, #144]	; (800883c <_printf_i+0x23c>)
 80087aa:	e7e4      	b.n	8008776 <_printf_i+0x176>
 80087ac:	4615      	mov	r5, r2
 80087ae:	e7bd      	b.n	800872c <_printf_i+0x12c>
 80087b0:	682b      	ldr	r3, [r5, #0]
 80087b2:	6826      	ldr	r6, [r4, #0]
 80087b4:	6961      	ldr	r1, [r4, #20]
 80087b6:	1d18      	adds	r0, r3, #4
 80087b8:	6028      	str	r0, [r5, #0]
 80087ba:	0635      	lsls	r5, r6, #24
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	d501      	bpl.n	80087c4 <_printf_i+0x1c4>
 80087c0:	6019      	str	r1, [r3, #0]
 80087c2:	e002      	b.n	80087ca <_printf_i+0x1ca>
 80087c4:	0670      	lsls	r0, r6, #25
 80087c6:	d5fb      	bpl.n	80087c0 <_printf_i+0x1c0>
 80087c8:	8019      	strh	r1, [r3, #0]
 80087ca:	2300      	movs	r3, #0
 80087cc:	6123      	str	r3, [r4, #16]
 80087ce:	4615      	mov	r5, r2
 80087d0:	e7bc      	b.n	800874c <_printf_i+0x14c>
 80087d2:	682b      	ldr	r3, [r5, #0]
 80087d4:	1d1a      	adds	r2, r3, #4
 80087d6:	602a      	str	r2, [r5, #0]
 80087d8:	681d      	ldr	r5, [r3, #0]
 80087da:	6862      	ldr	r2, [r4, #4]
 80087dc:	2100      	movs	r1, #0
 80087de:	4628      	mov	r0, r5
 80087e0:	f7f7 fcf6 	bl	80001d0 <memchr>
 80087e4:	b108      	cbz	r0, 80087ea <_printf_i+0x1ea>
 80087e6:	1b40      	subs	r0, r0, r5
 80087e8:	6060      	str	r0, [r4, #4]
 80087ea:	6863      	ldr	r3, [r4, #4]
 80087ec:	6123      	str	r3, [r4, #16]
 80087ee:	2300      	movs	r3, #0
 80087f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087f4:	e7aa      	b.n	800874c <_printf_i+0x14c>
 80087f6:	6923      	ldr	r3, [r4, #16]
 80087f8:	462a      	mov	r2, r5
 80087fa:	4649      	mov	r1, r9
 80087fc:	4640      	mov	r0, r8
 80087fe:	47d0      	blx	sl
 8008800:	3001      	adds	r0, #1
 8008802:	d0ad      	beq.n	8008760 <_printf_i+0x160>
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	079b      	lsls	r3, r3, #30
 8008808:	d413      	bmi.n	8008832 <_printf_i+0x232>
 800880a:	68e0      	ldr	r0, [r4, #12]
 800880c:	9b03      	ldr	r3, [sp, #12]
 800880e:	4298      	cmp	r0, r3
 8008810:	bfb8      	it	lt
 8008812:	4618      	movlt	r0, r3
 8008814:	e7a6      	b.n	8008764 <_printf_i+0x164>
 8008816:	2301      	movs	r3, #1
 8008818:	4632      	mov	r2, r6
 800881a:	4649      	mov	r1, r9
 800881c:	4640      	mov	r0, r8
 800881e:	47d0      	blx	sl
 8008820:	3001      	adds	r0, #1
 8008822:	d09d      	beq.n	8008760 <_printf_i+0x160>
 8008824:	3501      	adds	r5, #1
 8008826:	68e3      	ldr	r3, [r4, #12]
 8008828:	9903      	ldr	r1, [sp, #12]
 800882a:	1a5b      	subs	r3, r3, r1
 800882c:	42ab      	cmp	r3, r5
 800882e:	dcf2      	bgt.n	8008816 <_printf_i+0x216>
 8008830:	e7eb      	b.n	800880a <_printf_i+0x20a>
 8008832:	2500      	movs	r5, #0
 8008834:	f104 0619 	add.w	r6, r4, #25
 8008838:	e7f5      	b.n	8008826 <_printf_i+0x226>
 800883a:	bf00      	nop
 800883c:	08008ae1 	.word	0x08008ae1
 8008840:	08008af2 	.word	0x08008af2

08008844 <__swbuf_r>:
 8008844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008846:	460e      	mov	r6, r1
 8008848:	4614      	mov	r4, r2
 800884a:	4605      	mov	r5, r0
 800884c:	b118      	cbz	r0, 8008856 <__swbuf_r+0x12>
 800884e:	6a03      	ldr	r3, [r0, #32]
 8008850:	b90b      	cbnz	r3, 8008856 <__swbuf_r+0x12>
 8008852:	f7ff fbc1 	bl	8007fd8 <__sinit>
 8008856:	69a3      	ldr	r3, [r4, #24]
 8008858:	60a3      	str	r3, [r4, #8]
 800885a:	89a3      	ldrh	r3, [r4, #12]
 800885c:	071a      	lsls	r2, r3, #28
 800885e:	d525      	bpl.n	80088ac <__swbuf_r+0x68>
 8008860:	6923      	ldr	r3, [r4, #16]
 8008862:	b31b      	cbz	r3, 80088ac <__swbuf_r+0x68>
 8008864:	6823      	ldr	r3, [r4, #0]
 8008866:	6922      	ldr	r2, [r4, #16]
 8008868:	1a98      	subs	r0, r3, r2
 800886a:	6963      	ldr	r3, [r4, #20]
 800886c:	b2f6      	uxtb	r6, r6
 800886e:	4283      	cmp	r3, r0
 8008870:	4637      	mov	r7, r6
 8008872:	dc04      	bgt.n	800887e <__swbuf_r+0x3a>
 8008874:	4621      	mov	r1, r4
 8008876:	4628      	mov	r0, r5
 8008878:	f7ff faf8 	bl	8007e6c <_fflush_r>
 800887c:	b9e0      	cbnz	r0, 80088b8 <__swbuf_r+0x74>
 800887e:	68a3      	ldr	r3, [r4, #8]
 8008880:	3b01      	subs	r3, #1
 8008882:	60a3      	str	r3, [r4, #8]
 8008884:	6823      	ldr	r3, [r4, #0]
 8008886:	1c5a      	adds	r2, r3, #1
 8008888:	6022      	str	r2, [r4, #0]
 800888a:	701e      	strb	r6, [r3, #0]
 800888c:	6962      	ldr	r2, [r4, #20]
 800888e:	1c43      	adds	r3, r0, #1
 8008890:	429a      	cmp	r2, r3
 8008892:	d004      	beq.n	800889e <__swbuf_r+0x5a>
 8008894:	89a3      	ldrh	r3, [r4, #12]
 8008896:	07db      	lsls	r3, r3, #31
 8008898:	d506      	bpl.n	80088a8 <__swbuf_r+0x64>
 800889a:	2e0a      	cmp	r6, #10
 800889c:	d104      	bne.n	80088a8 <__swbuf_r+0x64>
 800889e:	4621      	mov	r1, r4
 80088a0:	4628      	mov	r0, r5
 80088a2:	f7ff fae3 	bl	8007e6c <_fflush_r>
 80088a6:	b938      	cbnz	r0, 80088b8 <__swbuf_r+0x74>
 80088a8:	4638      	mov	r0, r7
 80088aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088ac:	4621      	mov	r1, r4
 80088ae:	4628      	mov	r0, r5
 80088b0:	f000 f806 	bl	80088c0 <__swsetup_r>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	d0d5      	beq.n	8008864 <__swbuf_r+0x20>
 80088b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80088bc:	e7f4      	b.n	80088a8 <__swbuf_r+0x64>
	...

080088c0 <__swsetup_r>:
 80088c0:	b538      	push	{r3, r4, r5, lr}
 80088c2:	4b2a      	ldr	r3, [pc, #168]	; (800896c <__swsetup_r+0xac>)
 80088c4:	4605      	mov	r5, r0
 80088c6:	6818      	ldr	r0, [r3, #0]
 80088c8:	460c      	mov	r4, r1
 80088ca:	b118      	cbz	r0, 80088d4 <__swsetup_r+0x14>
 80088cc:	6a03      	ldr	r3, [r0, #32]
 80088ce:	b90b      	cbnz	r3, 80088d4 <__swsetup_r+0x14>
 80088d0:	f7ff fb82 	bl	8007fd8 <__sinit>
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088da:	0718      	lsls	r0, r3, #28
 80088dc:	d422      	bmi.n	8008924 <__swsetup_r+0x64>
 80088de:	06d9      	lsls	r1, r3, #27
 80088e0:	d407      	bmi.n	80088f2 <__swsetup_r+0x32>
 80088e2:	2309      	movs	r3, #9
 80088e4:	602b      	str	r3, [r5, #0]
 80088e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088ea:	81a3      	strh	r3, [r4, #12]
 80088ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088f0:	e034      	b.n	800895c <__swsetup_r+0x9c>
 80088f2:	0758      	lsls	r0, r3, #29
 80088f4:	d512      	bpl.n	800891c <__swsetup_r+0x5c>
 80088f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088f8:	b141      	cbz	r1, 800890c <__swsetup_r+0x4c>
 80088fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088fe:	4299      	cmp	r1, r3
 8008900:	d002      	beq.n	8008908 <__swsetup_r+0x48>
 8008902:	4628      	mov	r0, r5
 8008904:	f7ff fc7e 	bl	8008204 <_free_r>
 8008908:	2300      	movs	r3, #0
 800890a:	6363      	str	r3, [r4, #52]	; 0x34
 800890c:	89a3      	ldrh	r3, [r4, #12]
 800890e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008912:	81a3      	strh	r3, [r4, #12]
 8008914:	2300      	movs	r3, #0
 8008916:	6063      	str	r3, [r4, #4]
 8008918:	6923      	ldr	r3, [r4, #16]
 800891a:	6023      	str	r3, [r4, #0]
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	f043 0308 	orr.w	r3, r3, #8
 8008922:	81a3      	strh	r3, [r4, #12]
 8008924:	6923      	ldr	r3, [r4, #16]
 8008926:	b94b      	cbnz	r3, 800893c <__swsetup_r+0x7c>
 8008928:	89a3      	ldrh	r3, [r4, #12]
 800892a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800892e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008932:	d003      	beq.n	800893c <__swsetup_r+0x7c>
 8008934:	4621      	mov	r1, r4
 8008936:	4628      	mov	r0, r5
 8008938:	f000 f840 	bl	80089bc <__smakebuf_r>
 800893c:	89a0      	ldrh	r0, [r4, #12]
 800893e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008942:	f010 0301 	ands.w	r3, r0, #1
 8008946:	d00a      	beq.n	800895e <__swsetup_r+0x9e>
 8008948:	2300      	movs	r3, #0
 800894a:	60a3      	str	r3, [r4, #8]
 800894c:	6963      	ldr	r3, [r4, #20]
 800894e:	425b      	negs	r3, r3
 8008950:	61a3      	str	r3, [r4, #24]
 8008952:	6923      	ldr	r3, [r4, #16]
 8008954:	b943      	cbnz	r3, 8008968 <__swsetup_r+0xa8>
 8008956:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800895a:	d1c4      	bne.n	80088e6 <__swsetup_r+0x26>
 800895c:	bd38      	pop	{r3, r4, r5, pc}
 800895e:	0781      	lsls	r1, r0, #30
 8008960:	bf58      	it	pl
 8008962:	6963      	ldrpl	r3, [r4, #20]
 8008964:	60a3      	str	r3, [r4, #8]
 8008966:	e7f4      	b.n	8008952 <__swsetup_r+0x92>
 8008968:	2000      	movs	r0, #0
 800896a:	e7f7      	b.n	800895c <__swsetup_r+0x9c>
 800896c:	20000084 	.word	0x20000084

08008970 <__swhatbuf_r>:
 8008970:	b570      	push	{r4, r5, r6, lr}
 8008972:	460c      	mov	r4, r1
 8008974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008978:	2900      	cmp	r1, #0
 800897a:	b096      	sub	sp, #88	; 0x58
 800897c:	4615      	mov	r5, r2
 800897e:	461e      	mov	r6, r3
 8008980:	da0d      	bge.n	800899e <__swhatbuf_r+0x2e>
 8008982:	89a3      	ldrh	r3, [r4, #12]
 8008984:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008988:	f04f 0100 	mov.w	r1, #0
 800898c:	bf0c      	ite	eq
 800898e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008992:	2340      	movne	r3, #64	; 0x40
 8008994:	2000      	movs	r0, #0
 8008996:	6031      	str	r1, [r6, #0]
 8008998:	602b      	str	r3, [r5, #0]
 800899a:	b016      	add	sp, #88	; 0x58
 800899c:	bd70      	pop	{r4, r5, r6, pc}
 800899e:	466a      	mov	r2, sp
 80089a0:	f000 f848 	bl	8008a34 <_fstat_r>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	dbec      	blt.n	8008982 <__swhatbuf_r+0x12>
 80089a8:	9901      	ldr	r1, [sp, #4]
 80089aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80089ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80089b2:	4259      	negs	r1, r3
 80089b4:	4159      	adcs	r1, r3
 80089b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089ba:	e7eb      	b.n	8008994 <__swhatbuf_r+0x24>

080089bc <__smakebuf_r>:
 80089bc:	898b      	ldrh	r3, [r1, #12]
 80089be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089c0:	079d      	lsls	r5, r3, #30
 80089c2:	4606      	mov	r6, r0
 80089c4:	460c      	mov	r4, r1
 80089c6:	d507      	bpl.n	80089d8 <__smakebuf_r+0x1c>
 80089c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089cc:	6023      	str	r3, [r4, #0]
 80089ce:	6123      	str	r3, [r4, #16]
 80089d0:	2301      	movs	r3, #1
 80089d2:	6163      	str	r3, [r4, #20]
 80089d4:	b002      	add	sp, #8
 80089d6:	bd70      	pop	{r4, r5, r6, pc}
 80089d8:	ab01      	add	r3, sp, #4
 80089da:	466a      	mov	r2, sp
 80089dc:	f7ff ffc8 	bl	8008970 <__swhatbuf_r>
 80089e0:	9900      	ldr	r1, [sp, #0]
 80089e2:	4605      	mov	r5, r0
 80089e4:	4630      	mov	r0, r6
 80089e6:	f7ff f92f 	bl	8007c48 <_malloc_r>
 80089ea:	b948      	cbnz	r0, 8008a00 <__smakebuf_r+0x44>
 80089ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089f0:	059a      	lsls	r2, r3, #22
 80089f2:	d4ef      	bmi.n	80089d4 <__smakebuf_r+0x18>
 80089f4:	f023 0303 	bic.w	r3, r3, #3
 80089f8:	f043 0302 	orr.w	r3, r3, #2
 80089fc:	81a3      	strh	r3, [r4, #12]
 80089fe:	e7e3      	b.n	80089c8 <__smakebuf_r+0xc>
 8008a00:	89a3      	ldrh	r3, [r4, #12]
 8008a02:	6020      	str	r0, [r4, #0]
 8008a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a08:	81a3      	strh	r3, [r4, #12]
 8008a0a:	9b00      	ldr	r3, [sp, #0]
 8008a0c:	6163      	str	r3, [r4, #20]
 8008a0e:	9b01      	ldr	r3, [sp, #4]
 8008a10:	6120      	str	r0, [r4, #16]
 8008a12:	b15b      	cbz	r3, 8008a2c <__smakebuf_r+0x70>
 8008a14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a18:	4630      	mov	r0, r6
 8008a1a:	f000 f81d 	bl	8008a58 <_isatty_r>
 8008a1e:	b128      	cbz	r0, 8008a2c <__smakebuf_r+0x70>
 8008a20:	89a3      	ldrh	r3, [r4, #12]
 8008a22:	f023 0303 	bic.w	r3, r3, #3
 8008a26:	f043 0301 	orr.w	r3, r3, #1
 8008a2a:	81a3      	strh	r3, [r4, #12]
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	431d      	orrs	r5, r3
 8008a30:	81a5      	strh	r5, [r4, #12]
 8008a32:	e7cf      	b.n	80089d4 <__smakebuf_r+0x18>

08008a34 <_fstat_r>:
 8008a34:	b538      	push	{r3, r4, r5, lr}
 8008a36:	4d07      	ldr	r5, [pc, #28]	; (8008a54 <_fstat_r+0x20>)
 8008a38:	2300      	movs	r3, #0
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	4608      	mov	r0, r1
 8008a3e:	4611      	mov	r1, r2
 8008a40:	602b      	str	r3, [r5, #0]
 8008a42:	f7f8 f9a6 	bl	8000d92 <_fstat>
 8008a46:	1c43      	adds	r3, r0, #1
 8008a48:	d102      	bne.n	8008a50 <_fstat_r+0x1c>
 8008a4a:	682b      	ldr	r3, [r5, #0]
 8008a4c:	b103      	cbz	r3, 8008a50 <_fstat_r+0x1c>
 8008a4e:	6023      	str	r3, [r4, #0]
 8008a50:	bd38      	pop	{r3, r4, r5, pc}
 8008a52:	bf00      	nop
 8008a54:	200009c4 	.word	0x200009c4

08008a58 <_isatty_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	4d06      	ldr	r5, [pc, #24]	; (8008a74 <_isatty_r+0x1c>)
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4604      	mov	r4, r0
 8008a60:	4608      	mov	r0, r1
 8008a62:	602b      	str	r3, [r5, #0]
 8008a64:	f7f8 f9a5 	bl	8000db2 <_isatty>
 8008a68:	1c43      	adds	r3, r0, #1
 8008a6a:	d102      	bne.n	8008a72 <_isatty_r+0x1a>
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	b103      	cbz	r3, 8008a72 <_isatty_r+0x1a>
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	bd38      	pop	{r3, r4, r5, pc}
 8008a74:	200009c4 	.word	0x200009c4

08008a78 <_init>:
 8008a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7a:	bf00      	nop
 8008a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a7e:	bc08      	pop	{r3}
 8008a80:	469e      	mov	lr, r3
 8008a82:	4770      	bx	lr

08008a84 <_fini>:
 8008a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a86:	bf00      	nop
 8008a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a8a:	bc08      	pop	{r3}
 8008a8c:	469e      	mov	lr, r3
 8008a8e:	4770      	bx	lr
