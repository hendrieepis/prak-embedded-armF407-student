
F4Disc-00d-helloworld-strlen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083cc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08008554  08008554  00018554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008580  08008580  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008580  08008580  00018580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008588  08008588  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008588  08008588  00018588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800858c  0800858c  0001858c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000984  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a00  20000a00  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017c2f  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b8a  00000000  00000000  00037d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001328  00000000  00000000  0003b8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ec4  00000000  00000000  0003cbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024103  00000000  00000000  0003da94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001970f  00000000  00000000  00061b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd544  00000000  00000000  0007b2a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005370  00000000  00000000  001487ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  0014db5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800853c 	.word	0x0800853c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800853c 	.word	0x0800853c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fc7d 	bl	8000dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f829 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f94f 	bl	8000784 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e6:	f000 f88f 	bl	8000608 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004ea:	f000 f8bb 	bl	8000664 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004ee:	f000 f8e9 	bl	80006c4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004f2:	f007 fbcf 	bl	8007c94 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80004f6:	f000 f91b 	bl	8000730 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char *message="hello world \n\r";
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <main+0x54>)
 80004fc:	607b      	str	r3, [r7, #4]
  size_t datalength= strlen(message);
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f7ff fe62 	bl	80001c8 <strlen>
 8000504:	6038      	str	r0, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000506:	f007 fbeb 	bl	8007ce0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800050a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050e:	4807      	ldr	r0, [pc, #28]	; (800052c <main+0x58>)
 8000510:	f000 ffbf 	bl	8001492 <HAL_GPIO_TogglePin>
    HAL_UART_Transmit(&huart2, (uint8_t*) message, datalength, HAL_MAX_DELAY);
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	b29a      	uxth	r2, r3
 8000518:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800051c:	6879      	ldr	r1, [r7, #4]
 800051e:	4804      	ldr	r0, [pc, #16]	; (8000530 <main+0x5c>)
 8000520:	f004 f86e 	bl	8004600 <HAL_UART_Transmit>
    MX_USB_HOST_Process();
 8000524:	e7ef      	b.n	8000506 <main+0x32>
 8000526:	bf00      	nop
 8000528:	08008554 	.word	0x08008554
 800052c:	40020c00 	.word	0x40020c00
 8000530:	2000018c 	.word	0x2000018c

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f007 ff6a 	bl	800841c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b28      	ldr	r3, [pc, #160]	; (8000600 <SystemClock_Config+0xcc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a27      	ldr	r2, [pc, #156]	; (8000600 <SystemClock_Config+0xcc>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b25      	ldr	r3, [pc, #148]	; (8000600 <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <SystemClock_Config+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a21      	ldr	r2, [pc, #132]	; (8000604 <SystemClock_Config+0xd0>)
 800057e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000590:	2301      	movs	r3, #1
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a4:	2308      	movs	r3, #8
 80005a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b2:	2307      	movs	r3, #7
 80005b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 f972 	bl	80038a4 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005c6:	f000 f9db 	bl	8000980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2302      	movs	r3, #2
 80005d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2105      	movs	r1, #5
 80005e8:	4618      	mov	r0, r3
 80005ea:	f003 fbd3 	bl	8003d94 <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f4:	f000 f9c4 	bl	8000980 <Error_Handler>
  }
}
 80005f8:	bf00      	nop
 80005fa:	3750      	adds	r7, #80	; 0x50
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <MX_I2C1_Init+0x50>)
 800060e:	4a13      	ldr	r2, [pc, #76]	; (800065c <MX_I2C1_Init+0x54>)
 8000610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_I2C1_Init+0x50>)
 8000614:	4a12      	ldr	r2, [pc, #72]	; (8000660 <MX_I2C1_Init+0x58>)
 8000616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <MX_I2C1_Init+0x50>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_I2C1_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_I2C1_Init+0x50>)
 8000626:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800062a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <MX_I2C1_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_I2C1_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <MX_I2C1_Init+0x50>)
 8000646:	f002 fb49 	bl	8002cdc <HAL_I2C_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000650:	f000 f996 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000098 	.word	0x20000098
 800065c:	40005400 	.word	0x40005400
 8000660:	000186a0 	.word	0x000186a0

08000664 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_I2S3_Init+0x54>)
 800066a:	4a14      	ldr	r2, [pc, #80]	; (80006bc <MX_I2S3_Init+0x58>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_I2S3_Init+0x54>)
 8000670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000674:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_I2S3_Init+0x54>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_I2S3_Init+0x54>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <MX_I2S3_Init+0x54>)
 8000684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000688:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_I2S3_Init+0x54>)
 800068c:	4a0c      	ldr	r2, [pc, #48]	; (80006c0 <MX_I2S3_Init+0x5c>)
 800068e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_I2S3_Init+0x54>)
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_I2S3_Init+0x54>)
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_I2S3_Init+0x54>)
 800069e:	2200      	movs	r2, #0
 80006a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_I2S3_Init+0x54>)
 80006a4:	f002 fc5e 	bl	8002f64 <HAL_I2S_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006ae:	f000 f967 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200000ec 	.word	0x200000ec
 80006bc:	40003c00 	.word	0x40003c00
 80006c0:	00017700 	.word	0x00017700

080006c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_SPI1_Init+0x64>)
 80006ca:	4a18      	ldr	r2, [pc, #96]	; (800072c <MX_SPI1_Init+0x68>)
 80006cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_SPI1_Init+0x64>)
 80006d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_SPI1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_SPI1_Init+0x64>)
 80006f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_SPI1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_SPI1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_SPI1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_SPI1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_SPI1_Init+0x64>)
 8000710:	220a      	movs	r2, #10
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_SPI1_Init+0x64>)
 8000716:	f003 fe9d 	bl	8004454 <HAL_SPI_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000720:	f000 f92e 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000134 	.word	0x20000134
 800072c:	40013000 	.word	0x40013000

08000730 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000736:	4a12      	ldr	r2, [pc, #72]	; (8000780 <MX_USART2_UART_Init+0x50>)
 8000738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800073c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000768:	f003 fefd 	bl	8004566 <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000772:	f000 f905 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000018c 	.word	0x2000018c
 8000780:	40004400 	.word	0x40004400

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	; 0x30
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
 800079e:	4b72      	ldr	r3, [pc, #456]	; (8000968 <MX_GPIO_Init+0x1e4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a71      	ldr	r2, [pc, #452]	; (8000968 <MX_GPIO_Init+0x1e4>)
 80007a4:	f043 0310 	orr.w	r3, r3, #16
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b6f      	ldr	r3, [pc, #444]	; (8000968 <MX_GPIO_Init+0x1e4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0310 	and.w	r3, r3, #16
 80007b2:	61bb      	str	r3, [r7, #24]
 80007b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	4b6b      	ldr	r3, [pc, #428]	; (8000968 <MX_GPIO_Init+0x1e4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a6a      	ldr	r2, [pc, #424]	; (8000968 <MX_GPIO_Init+0x1e4>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b68      	ldr	r3, [pc, #416]	; (8000968 <MX_GPIO_Init+0x1e4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b64      	ldr	r3, [pc, #400]	; (8000968 <MX_GPIO_Init+0x1e4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a63      	ldr	r2, [pc, #396]	; (8000968 <MX_GPIO_Init+0x1e4>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b61      	ldr	r3, [pc, #388]	; (8000968 <MX_GPIO_Init+0x1e4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b5d      	ldr	r3, [pc, #372]	; (8000968 <MX_GPIO_Init+0x1e4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a5c      	ldr	r2, [pc, #368]	; (8000968 <MX_GPIO_Init+0x1e4>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b5a      	ldr	r3, [pc, #360]	; (8000968 <MX_GPIO_Init+0x1e4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b56      	ldr	r3, [pc, #344]	; (8000968 <MX_GPIO_Init+0x1e4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a55      	ldr	r2, [pc, #340]	; (8000968 <MX_GPIO_Init+0x1e4>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b53      	ldr	r3, [pc, #332]	; (8000968 <MX_GPIO_Init+0x1e4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b4f      	ldr	r3, [pc, #316]	; (8000968 <MX_GPIO_Init+0x1e4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a4e      	ldr	r2, [pc, #312]	; (8000968 <MX_GPIO_Init+0x1e4>)
 8000830:	f043 0308 	orr.w	r3, r3, #8
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b4c      	ldr	r3, [pc, #304]	; (8000968 <MX_GPIO_Init+0x1e4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0308 	and.w	r3, r3, #8
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2108      	movs	r1, #8
 8000846:	4849      	ldr	r0, [pc, #292]	; (800096c <MX_GPIO_Init+0x1e8>)
 8000848:	f000 fe0a 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	2101      	movs	r1, #1
 8000850:	4847      	ldr	r0, [pc, #284]	; (8000970 <MX_GPIO_Init+0x1ec>)
 8000852:	f000 fe05 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000856:	2200      	movs	r2, #0
 8000858:	f24f 0110 	movw	r1, #61456	; 0xf010
 800085c:	4845      	ldr	r0, [pc, #276]	; (8000974 <MX_GPIO_Init+0x1f0>)
 800085e:	f000 fdff 	bl	8001460 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000862:	2308      	movs	r3, #8
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	483c      	ldr	r0, [pc, #240]	; (800096c <MX_GPIO_Init+0x1e8>)
 800087a:	f000 fc55 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800087e:	2301      	movs	r3, #1
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4836      	ldr	r0, [pc, #216]	; (8000970 <MX_GPIO_Init+0x1ec>)
 8000896:	f000 fc47 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800089a:	2308      	movs	r3, #8
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008aa:	2305      	movs	r3, #5
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	482e      	ldr	r0, [pc, #184]	; (8000970 <MX_GPIO_Init+0x1ec>)
 80008b6:	f000 fc37 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008be:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	482a      	ldr	r0, [pc, #168]	; (8000978 <MX_GPIO_Init+0x1f4>)
 80008d0:	f000 fc2a 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008d4:	2304      	movs	r3, #4
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4825      	ldr	r0, [pc, #148]	; (800097c <MX_GPIO_Init+0x1f8>)
 80008e8:	f000 fc1e 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008fe:	2305      	movs	r3, #5
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	481c      	ldr	r0, [pc, #112]	; (800097c <MX_GPIO_Init+0x1f8>)
 800090a:	f000 fc0d 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800090e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000912:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4813      	ldr	r0, [pc, #76]	; (8000974 <MX_GPIO_Init+0x1f0>)
 8000928:	f000 fbfe 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800092c:	2320      	movs	r3, #32
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	480d      	ldr	r0, [pc, #52]	; (8000974 <MX_GPIO_Init+0x1f0>)
 8000940:	f000 fbf2 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000944:	2302      	movs	r3, #2
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000948:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_GPIO_Init+0x1e8>)
 800095a:	f000 fbe5 	bl	8001128 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800095e:	bf00      	nop
 8000960:	3730      	adds	r7, #48	; 0x30
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800
 800096c:	40021000 	.word	0x40021000
 8000970:	40020800 	.word	0x40020800
 8000974:	40020c00 	.word	0x40020c00
 8000978:	40020000 	.word	0x40020000
 800097c:	40020400 	.word	0x40020400

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	e7fe      	b.n	8000988 <Error_Handler+0x8>
	...

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	4a0f      	ldr	r2, [pc, #60]	; (80009d8 <HAL_MspInit+0x4c>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	; 0x44
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <HAL_MspInit+0x4c>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009bc:	6413      	str	r3, [r2, #64]	; 0x40
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ca:	2007      	movs	r0, #7
 80009cc:	f000 fb6a 	bl	80010a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800

080009dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a19      	ldr	r2, [pc, #100]	; (8000a60 <HAL_I2C_MspInit+0x84>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d12c      	bne.n	8000a58 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <HAL_I2C_MspInit+0x88>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a17      	ldr	r2, [pc, #92]	; (8000a64 <HAL_I2C_MspInit+0x88>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <HAL_I2C_MspInit+0x88>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a1a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a20:	2312      	movs	r3, #18
 8000a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	480c      	ldr	r0, [pc, #48]	; (8000a68 <HAL_I2C_MspInit+0x8c>)
 8000a38:	f000 fb76 	bl	8001128 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_I2C_MspInit+0x88>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <HAL_I2C_MspInit+0x88>)
 8000a46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <HAL_I2C_MspInit+0x88>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a58:	bf00      	nop
 8000a5a:	3728      	adds	r7, #40	; 0x28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40005400 	.word	0x40005400
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020400 	.word	0x40020400

08000a6c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08e      	sub	sp, #56	; 0x38
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a31      	ldr	r2, [pc, #196]	; (8000b5c <HAL_I2S_MspInit+0xf0>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d15a      	bne.n	8000b52 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000aa0:	23c0      	movs	r3, #192	; 0xc0
 8000aa2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4618      	mov	r0, r3
 8000aae:	f003 fb91 	bl	80041d4 <HAL_RCCEx_PeriphCLKConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ab8:	f7ff ff62 	bl	8000980 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	4b27      	ldr	r3, [pc, #156]	; (8000b60 <HAL_I2S_MspInit+0xf4>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	4a26      	ldr	r2, [pc, #152]	; (8000b60 <HAL_I2S_MspInit+0xf4>)
 8000ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aca:	6413      	str	r3, [r2, #64]	; 0x40
 8000acc:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <HAL_I2S_MspInit+0xf4>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <HAL_I2S_MspInit+0xf4>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	4a1f      	ldr	r2, [pc, #124]	; (8000b60 <HAL_I2S_MspInit+0xf4>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <HAL_I2S_MspInit+0xf4>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <HAL_I2S_MspInit+0xf4>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	4a18      	ldr	r2, [pc, #96]	; (8000b60 <HAL_I2S_MspInit+0xf4>)
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	6313      	str	r3, [r2, #48]	; 0x30
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <HAL_I2S_MspInit+0xf4>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b10:	2310      	movs	r3, #16
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b20:	2306      	movs	r3, #6
 8000b22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b28:	4619      	mov	r1, r3
 8000b2a:	480e      	ldr	r0, [pc, #56]	; (8000b64 <HAL_I2S_MspInit+0xf8>)
 8000b2c:	f000 fafc 	bl	8001128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b30:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b42:	2306      	movs	r3, #6
 8000b44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4806      	ldr	r0, [pc, #24]	; (8000b68 <HAL_I2S_MspInit+0xfc>)
 8000b4e:	f000 faeb 	bl	8001128 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b52:	bf00      	nop
 8000b54:	3738      	adds	r7, #56	; 0x38
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40003c00 	.word	0x40003c00
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020000 	.word	0x40020000
 8000b68:	40020800 	.word	0x40020800

08000b6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a19      	ldr	r2, [pc, #100]	; (8000bf0 <HAL_SPI_MspInit+0x84>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d12b      	bne.n	8000be6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <HAL_SPI_MspInit+0x88>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <HAL_SPI_MspInit+0x88>)
 8000b98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_SPI_MspInit+0x88>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_SPI_MspInit+0x88>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a10      	ldr	r2, [pc, #64]	; (8000bf4 <HAL_SPI_MspInit+0x88>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <HAL_SPI_MspInit+0x88>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bc6:	23e0      	movs	r3, #224	; 0xe0
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bd6:	2305      	movs	r3, #5
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <HAL_SPI_MspInit+0x8c>)
 8000be2:	f000 faa1 	bl	8001128 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000be6:	bf00      	nop
 8000be8:	3728      	adds	r7, #40	; 0x28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40013000 	.word	0x40013000
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020000 	.word	0x40020000

08000bfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0x84>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d12b      	bne.n	8000c76 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <HAL_UART_MspInit+0x88>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <HAL_UART_MspInit+0x88>)
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <HAL_UART_MspInit+0x88>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_UART_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <HAL_UART_MspInit+0x88>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_UART_MspInit+0x88>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c56:	230c      	movs	r3, #12
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c66:	2307      	movs	r3, #7
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <HAL_UART_MspInit+0x8c>)
 8000c72:	f000 fa59 	bl	8001128 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	; 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40004400 	.word	0x40004400
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f8d0 	bl	8000e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <OTG_FS_IRQHandler+0x10>)
 8000ce6:	f000 fe59 	bl	800199c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200005b4 	.word	0x200005b4

08000cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cfc:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <_sbrk+0x5c>)
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <_sbrk+0x60>)
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d08:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <_sbrk+0x64>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <_sbrk+0x68>)
 8000d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d207      	bcs.n	8000d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d24:	f007 fb92 	bl	800844c <__errno>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d32:	e009      	b.n	8000d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <_sbrk+0x64>)
 8000d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d46:	68fb      	ldr	r3, [r7, #12]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20020000 	.word	0x20020000
 8000d54:	00000400 	.word	0x00000400
 8000d58:	200001d0 	.word	0x200001d0
 8000d5c:	20000a00 	.word	0x20000a00

08000d60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <SystemInit+0x20>)
 8000d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <SystemInit+0x20>)
 8000d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d88:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d8a:	490e      	ldr	r1, [pc, #56]	; (8000dc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d8c:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da0:	4c0b      	ldr	r4, [pc, #44]	; (8000dd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dae:	f7ff ffd7 	bl	8000d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000db2:	f007 fb51 	bl	8008458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db6:	f7ff fb8d 	bl	80004d4 <main>
  bx  lr    
 8000dba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000dc8:	08008590 	.word	0x08008590
  ldr r2, =_sbss
 8000dcc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000dd0:	20000a00 	.word	0x20000a00

08000dd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC_IRQHandler>
	...

08000dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <HAL_Init+0x40>)
 8000de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <HAL_Init+0x40>)
 8000dee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <HAL_Init+0x40>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <HAL_Init+0x40>)
 8000dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e00:	2003      	movs	r0, #3
 8000e02:	f000 f94f 	bl	80010a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f000 f808 	bl	8000e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e0c:	f7ff fdbe 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40023c00 	.word	0x40023c00

08000e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <HAL_InitTick+0x54>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_InitTick+0x58>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f967 	bl	800110e <HAL_SYSTICK_Config>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e00e      	b.n	8000e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b0f      	cmp	r3, #15
 8000e4e:	d80a      	bhi.n	8000e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e50:	2200      	movs	r2, #0
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e58:	f000 f92f 	bl	80010ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e5c:	4a06      	ldr	r2, [pc, #24]	; (8000e78 <HAL_InitTick+0x5c>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e000      	b.n	8000e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000000 	.word	0x20000000
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000004 	.word	0x20000004

08000e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x20>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	200001d4 	.word	0x200001d4

08000ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	200001d4 	.word	0x200001d4

08000ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec4:	f7ff ffee 	bl	8000ea4 <HAL_GetTick>
 8000ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ed4:	d005      	beq.n	8000ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <HAL_Delay+0x44>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4413      	add	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ee2:	bf00      	nop
 8000ee4:	f7ff ffde 	bl	8000ea4 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d8f7      	bhi.n	8000ee4 <HAL_Delay+0x28>
  {
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008

08000f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f20:	4013      	ands	r3, r2
 8000f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f36:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	60d3      	str	r3, [r2, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <__NVIC_GetPriorityGrouping+0x18>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	f003 0307 	and.w	r3, r3, #7
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	db0b      	blt.n	8000f92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	f003 021f 	and.w	r2, r3, #31
 8000f80:	4907      	ldr	r1, [pc, #28]	; (8000fa0 <__NVIC_EnableIRQ+0x38>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	2001      	movs	r0, #1
 8000f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000e100 	.word	0xe000e100

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001070:	d301      	bcc.n	8001076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001072:	2301      	movs	r3, #1
 8001074:	e00f      	b.n	8001096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <SysTick_Config+0x40>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107e:	210f      	movs	r1, #15
 8001080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001084:	f7ff ff8e 	bl	8000fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <SysTick_Config+0x40>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <SysTick_Config+0x40>)
 8001090:	2207      	movs	r2, #7
 8001092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	e000e010 	.word	0xe000e010

080010a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff29 	bl	8000f04 <__NVIC_SetPriorityGrouping>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010cc:	f7ff ff3e 	bl	8000f4c <__NVIC_GetPriorityGrouping>
 80010d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff ff8e 	bl	8000ff8 <NVIC_EncodePriority>
 80010dc:	4602      	mov	r2, r0
 80010de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5d 	bl	8000fa4 <__NVIC_SetPriority>
}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff31 	bl	8000f68 <__NVIC_EnableIRQ>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ffa2 	bl	8001060 <SysTick_Config>
 800111c:	4603      	mov	r3, r0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001128:	b480      	push	{r7}
 800112a:	b089      	sub	sp, #36	; 0x24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	e16b      	b.n	800141c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001144:	2201      	movs	r2, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	429a      	cmp	r2, r3
 800115e:	f040 815a 	bne.w	8001416 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	2b01      	cmp	r3, #1
 800116c:	d005      	beq.n	800117a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001176:	2b02      	cmp	r3, #2
 8001178:	d130      	bne.n	80011dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	2203      	movs	r2, #3
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b0:	2201      	movs	r2, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	091b      	lsrs	r3, r3, #4
 80011c6:	f003 0201 	and.w	r2, r3, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	2b03      	cmp	r3, #3
 80011e6:	d017      	beq.n	8001218 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	2203      	movs	r2, #3
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d123      	bne.n	800126c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	08da      	lsrs	r2, r3, #3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3208      	adds	r2, #8
 800122c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	220f      	movs	r2, #15
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	691a      	ldr	r2, [r3, #16]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	08da      	lsrs	r2, r3, #3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3208      	adds	r2, #8
 8001266:	69b9      	ldr	r1, [r7, #24]
 8001268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	2203      	movs	r2, #3
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0203 	and.w	r2, r3, #3
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80b4 	beq.w	8001416 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b60      	ldr	r3, [pc, #384]	; (8001434 <HAL_GPIO_Init+0x30c>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	4a5f      	ldr	r2, [pc, #380]	; (8001434 <HAL_GPIO_Init+0x30c>)
 80012b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012bc:	6453      	str	r3, [r2, #68]	; 0x44
 80012be:	4b5d      	ldr	r3, [pc, #372]	; (8001434 <HAL_GPIO_Init+0x30c>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ca:	4a5b      	ldr	r2, [pc, #364]	; (8001438 <HAL_GPIO_Init+0x310>)
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	3302      	adds	r3, #2
 80012d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	220f      	movs	r2, #15
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a52      	ldr	r2, [pc, #328]	; (800143c <HAL_GPIO_Init+0x314>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d02b      	beq.n	800134e <HAL_GPIO_Init+0x226>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a51      	ldr	r2, [pc, #324]	; (8001440 <HAL_GPIO_Init+0x318>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d025      	beq.n	800134a <HAL_GPIO_Init+0x222>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a50      	ldr	r2, [pc, #320]	; (8001444 <HAL_GPIO_Init+0x31c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d01f      	beq.n	8001346 <HAL_GPIO_Init+0x21e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4f      	ldr	r2, [pc, #316]	; (8001448 <HAL_GPIO_Init+0x320>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d019      	beq.n	8001342 <HAL_GPIO_Init+0x21a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4e      	ldr	r2, [pc, #312]	; (800144c <HAL_GPIO_Init+0x324>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d013      	beq.n	800133e <HAL_GPIO_Init+0x216>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4d      	ldr	r2, [pc, #308]	; (8001450 <HAL_GPIO_Init+0x328>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d00d      	beq.n	800133a <HAL_GPIO_Init+0x212>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4c      	ldr	r2, [pc, #304]	; (8001454 <HAL_GPIO_Init+0x32c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d007      	beq.n	8001336 <HAL_GPIO_Init+0x20e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4b      	ldr	r2, [pc, #300]	; (8001458 <HAL_GPIO_Init+0x330>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d101      	bne.n	8001332 <HAL_GPIO_Init+0x20a>
 800132e:	2307      	movs	r3, #7
 8001330:	e00e      	b.n	8001350 <HAL_GPIO_Init+0x228>
 8001332:	2308      	movs	r3, #8
 8001334:	e00c      	b.n	8001350 <HAL_GPIO_Init+0x228>
 8001336:	2306      	movs	r3, #6
 8001338:	e00a      	b.n	8001350 <HAL_GPIO_Init+0x228>
 800133a:	2305      	movs	r3, #5
 800133c:	e008      	b.n	8001350 <HAL_GPIO_Init+0x228>
 800133e:	2304      	movs	r3, #4
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x228>
 8001342:	2303      	movs	r3, #3
 8001344:	e004      	b.n	8001350 <HAL_GPIO_Init+0x228>
 8001346:	2302      	movs	r3, #2
 8001348:	e002      	b.n	8001350 <HAL_GPIO_Init+0x228>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <HAL_GPIO_Init+0x228>
 800134e:	2300      	movs	r3, #0
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	f002 0203 	and.w	r2, r2, #3
 8001356:	0092      	lsls	r2, r2, #2
 8001358:	4093      	lsls	r3, r2
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001360:	4935      	ldr	r1, [pc, #212]	; (8001438 <HAL_GPIO_Init+0x310>)
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	3302      	adds	r3, #2
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136e:	4b3b      	ldr	r3, [pc, #236]	; (800145c <HAL_GPIO_Init+0x334>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001392:	4a32      	ldr	r2, [pc, #200]	; (800145c <HAL_GPIO_Init+0x334>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001398:	4b30      	ldr	r3, [pc, #192]	; (800145c <HAL_GPIO_Init+0x334>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013bc:	4a27      	ldr	r2, [pc, #156]	; (800145c <HAL_GPIO_Init+0x334>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013c2:	4b26      	ldr	r3, [pc, #152]	; (800145c <HAL_GPIO_Init+0x334>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013e6:	4a1d      	ldr	r2, [pc, #116]	; (800145c <HAL_GPIO_Init+0x334>)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	; (800145c <HAL_GPIO_Init+0x334>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001410:	4a12      	ldr	r2, [pc, #72]	; (800145c <HAL_GPIO_Init+0x334>)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3301      	adds	r3, #1
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	2b0f      	cmp	r3, #15
 8001420:	f67f ae90 	bls.w	8001144 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800
 8001438:	40013800 	.word	0x40013800
 800143c:	40020000 	.word	0x40020000
 8001440:	40020400 	.word	0x40020400
 8001444:	40020800 	.word	0x40020800
 8001448:	40020c00 	.word	0x40020c00
 800144c:	40021000 	.word	0x40021000
 8001450:	40021400 	.word	0x40021400
 8001454:	40021800 	.word	0x40021800
 8001458:	40021c00 	.word	0x40021c00
 800145c:	40013c00 	.word	0x40013c00

08001460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800147c:	e003      	b.n	8001486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	041a      	lsls	r2, r3, #16
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	619a      	str	r2, [r3, #24]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001492:	b480      	push	{r7}
 8001494:	b085      	sub	sp, #20
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014a4:	887a      	ldrh	r2, [r7, #2]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4013      	ands	r3, r2
 80014aa:	041a      	lsls	r2, r3, #16
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	43d9      	mvns	r1, r3
 80014b0:	887b      	ldrh	r3, [r7, #2]
 80014b2:	400b      	ands	r3, r1
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	619a      	str	r2, [r3, #24]
}
 80014ba:	bf00      	nop
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c8:	b08f      	sub	sp, #60	; 0x3c
 80014ca:	af0a      	add	r7, sp, #40	; 0x28
 80014cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e054      	b.n	8001582 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d106      	bne.n	80014f8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f006 fc2c 	bl	8007d50 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2203      	movs	r2, #3
 80014fc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f003 fc58 	bl	8004dcc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	687e      	ldr	r6, [r7, #4]
 8001524:	466d      	mov	r5, sp
 8001526:	f106 0410 	add.w	r4, r6, #16
 800152a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800152c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001532:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001536:	e885 0003 	stmia.w	r5, {r0, r1}
 800153a:	1d33      	adds	r3, r6, #4
 800153c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800153e:	6838      	ldr	r0, [r7, #0]
 8001540:	f003 fbd2 	bl	8004ce8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2101      	movs	r1, #1
 800154a:	4618      	mov	r0, r3
 800154c:	f003 fc4f 	bl	8004dee <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	687e      	ldr	r6, [r7, #4]
 8001558:	466d      	mov	r5, sp
 800155a:	f106 0410 	add.w	r4, r6, #16
 800155e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001564:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001566:	e894 0003 	ldmia.w	r4, {r0, r1}
 800156a:	e885 0003 	stmia.w	r5, {r0, r1}
 800156e:	1d33      	adds	r3, r6, #4
 8001570:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001572:	6838      	ldr	r0, [r7, #0]
 8001574:	f003 fdd8 	bl	8005128 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800158a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800158a:	b590      	push	{r4, r7, lr}
 800158c:	b089      	sub	sp, #36	; 0x24
 800158e:	af04      	add	r7, sp, #16
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	4608      	mov	r0, r1
 8001594:	4611      	mov	r1, r2
 8001596:	461a      	mov	r2, r3
 8001598:	4603      	mov	r3, r0
 800159a:	70fb      	strb	r3, [r7, #3]
 800159c:	460b      	mov	r3, r1
 800159e:	70bb      	strb	r3, [r7, #2]
 80015a0:	4613      	mov	r3, r2
 80015a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d101      	bne.n	80015b2 <HAL_HCD_HC_Init+0x28>
 80015ae:	2302      	movs	r3, #2
 80015b0:	e076      	b.n	80016a0 <HAL_HCD_HC_Init+0x116>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80015ba:	78fb      	ldrb	r3, [r7, #3]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	212c      	movs	r1, #44	; 0x2c
 80015c0:	fb01 f303 	mul.w	r3, r1, r3
 80015c4:	4413      	add	r3, r2
 80015c6:	333d      	adds	r3, #61	; 0x3d
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015cc:	78fb      	ldrb	r3, [r7, #3]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	212c      	movs	r1, #44	; 0x2c
 80015d2:	fb01 f303 	mul.w	r3, r1, r3
 80015d6:	4413      	add	r3, r2
 80015d8:	3338      	adds	r3, #56	; 0x38
 80015da:	787a      	ldrb	r2, [r7, #1]
 80015dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80015de:	78fb      	ldrb	r3, [r7, #3]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	212c      	movs	r1, #44	; 0x2c
 80015e4:	fb01 f303 	mul.w	r3, r1, r3
 80015e8:	4413      	add	r3, r2
 80015ea:	3340      	adds	r3, #64	; 0x40
 80015ec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015ee:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015f0:	78fb      	ldrb	r3, [r7, #3]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	212c      	movs	r1, #44	; 0x2c
 80015f6:	fb01 f303 	mul.w	r3, r1, r3
 80015fa:	4413      	add	r3, r2
 80015fc:	3339      	adds	r3, #57	; 0x39
 80015fe:	78fa      	ldrb	r2, [r7, #3]
 8001600:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	212c      	movs	r1, #44	; 0x2c
 8001608:	fb01 f303 	mul.w	r3, r1, r3
 800160c:	4413      	add	r3, r2
 800160e:	333f      	adds	r3, #63	; 0x3f
 8001610:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001614:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001616:	78fb      	ldrb	r3, [r7, #3]
 8001618:	78ba      	ldrb	r2, [r7, #2]
 800161a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800161e:	b2d0      	uxtb	r0, r2
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	212c      	movs	r1, #44	; 0x2c
 8001624:	fb01 f303 	mul.w	r3, r1, r3
 8001628:	4413      	add	r3, r2
 800162a:	333a      	adds	r3, #58	; 0x3a
 800162c:	4602      	mov	r2, r0
 800162e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001630:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001634:	2b00      	cmp	r3, #0
 8001636:	da09      	bge.n	800164c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	212c      	movs	r1, #44	; 0x2c
 800163e:	fb01 f303 	mul.w	r3, r1, r3
 8001642:	4413      	add	r3, r2
 8001644:	333b      	adds	r3, #59	; 0x3b
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]
 800164a:	e008      	b.n	800165e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	212c      	movs	r1, #44	; 0x2c
 8001652:	fb01 f303 	mul.w	r3, r1, r3
 8001656:	4413      	add	r3, r2
 8001658:	333b      	adds	r3, #59	; 0x3b
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800165e:	78fb      	ldrb	r3, [r7, #3]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	212c      	movs	r1, #44	; 0x2c
 8001664:	fb01 f303 	mul.w	r3, r1, r3
 8001668:	4413      	add	r3, r2
 800166a:	333c      	adds	r3, #60	; 0x3c
 800166c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001670:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6818      	ldr	r0, [r3, #0]
 8001676:	787c      	ldrb	r4, [r7, #1]
 8001678:	78ba      	ldrb	r2, [r7, #2]
 800167a:	78f9      	ldrb	r1, [r7, #3]
 800167c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001684:	9301      	str	r3, [sp, #4]
 8001686:	f897 3020 	ldrb.w	r3, [r7, #32]
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	4623      	mov	r3, r4
 800168e:	f003 fed1 	bl	8005434 <USB_HC_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800169e:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd90      	pop	{r4, r7, pc}

080016a8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_HCD_HC_Halt+0x1e>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e00f      	b.n	80016e6 <HAL_HCD_HC_Halt+0x3e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	78fa      	ldrb	r2, [r7, #3]
 80016d4:	4611      	mov	r1, r2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f004 f921 	bl	800591e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	4608      	mov	r0, r1
 80016fa:	4611      	mov	r1, r2
 80016fc:	461a      	mov	r2, r3
 80016fe:	4603      	mov	r3, r0
 8001700:	70fb      	strb	r3, [r7, #3]
 8001702:	460b      	mov	r3, r1
 8001704:	70bb      	strb	r3, [r7, #2]
 8001706:	4613      	mov	r3, r2
 8001708:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	212c      	movs	r1, #44	; 0x2c
 8001710:	fb01 f303 	mul.w	r3, r1, r3
 8001714:	4413      	add	r3, r2
 8001716:	333b      	adds	r3, #59	; 0x3b
 8001718:	78ba      	ldrb	r2, [r7, #2]
 800171a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	212c      	movs	r1, #44	; 0x2c
 8001722:	fb01 f303 	mul.w	r3, r1, r3
 8001726:	4413      	add	r3, r2
 8001728:	333f      	adds	r3, #63	; 0x3f
 800172a:	787a      	ldrb	r2, [r7, #1]
 800172c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800172e:	7c3b      	ldrb	r3, [r7, #16]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d112      	bne.n	800175a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	212c      	movs	r1, #44	; 0x2c
 800173a:	fb01 f303 	mul.w	r3, r1, r3
 800173e:	4413      	add	r3, r2
 8001740:	3342      	adds	r3, #66	; 0x42
 8001742:	2203      	movs	r2, #3
 8001744:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	212c      	movs	r1, #44	; 0x2c
 800174c:	fb01 f303 	mul.w	r3, r1, r3
 8001750:	4413      	add	r3, r2
 8001752:	333d      	adds	r3, #61	; 0x3d
 8001754:	7f3a      	ldrb	r2, [r7, #28]
 8001756:	701a      	strb	r2, [r3, #0]
 8001758:	e008      	b.n	800176c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	212c      	movs	r1, #44	; 0x2c
 8001760:	fb01 f303 	mul.w	r3, r1, r3
 8001764:	4413      	add	r3, r2
 8001766:	3342      	adds	r3, #66	; 0x42
 8001768:	2202      	movs	r2, #2
 800176a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800176c:	787b      	ldrb	r3, [r7, #1]
 800176e:	2b03      	cmp	r3, #3
 8001770:	f200 80c6 	bhi.w	8001900 <HAL_HCD_HC_SubmitRequest+0x210>
 8001774:	a201      	add	r2, pc, #4	; (adr r2, 800177c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177a:	bf00      	nop
 800177c:	0800178d 	.word	0x0800178d
 8001780:	080018ed 	.word	0x080018ed
 8001784:	080017f1 	.word	0x080017f1
 8001788:	0800186f 	.word	0x0800186f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800178c:	7c3b      	ldrb	r3, [r7, #16]
 800178e:	2b01      	cmp	r3, #1
 8001790:	f040 80b8 	bne.w	8001904 <HAL_HCD_HC_SubmitRequest+0x214>
 8001794:	78bb      	ldrb	r3, [r7, #2]
 8001796:	2b00      	cmp	r3, #0
 8001798:	f040 80b4 	bne.w	8001904 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800179c:	8b3b      	ldrh	r3, [r7, #24]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d108      	bne.n	80017b4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80017a2:	78fb      	ldrb	r3, [r7, #3]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	212c      	movs	r1, #44	; 0x2c
 80017a8:	fb01 f303 	mul.w	r3, r1, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	3355      	adds	r3, #85	; 0x55
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	212c      	movs	r1, #44	; 0x2c
 80017ba:	fb01 f303 	mul.w	r3, r1, r3
 80017be:	4413      	add	r3, r2
 80017c0:	3355      	adds	r3, #85	; 0x55
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d109      	bne.n	80017dc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	212c      	movs	r1, #44	; 0x2c
 80017ce:	fb01 f303 	mul.w	r3, r1, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	3342      	adds	r3, #66	; 0x42
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017da:	e093      	b.n	8001904 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	212c      	movs	r1, #44	; 0x2c
 80017e2:	fb01 f303 	mul.w	r3, r1, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	3342      	adds	r3, #66	; 0x42
 80017ea:	2202      	movs	r2, #2
 80017ec:	701a      	strb	r2, [r3, #0]
      break;
 80017ee:	e089      	b.n	8001904 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80017f0:	78bb      	ldrb	r3, [r7, #2]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d11d      	bne.n	8001832 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017f6:	78fb      	ldrb	r3, [r7, #3]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	212c      	movs	r1, #44	; 0x2c
 80017fc:	fb01 f303 	mul.w	r3, r1, r3
 8001800:	4413      	add	r3, r2
 8001802:	3355      	adds	r3, #85	; 0x55
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d109      	bne.n	800181e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	212c      	movs	r1, #44	; 0x2c
 8001810:	fb01 f303 	mul.w	r3, r1, r3
 8001814:	4413      	add	r3, r2
 8001816:	3342      	adds	r3, #66	; 0x42
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800181c:	e073      	b.n	8001906 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	212c      	movs	r1, #44	; 0x2c
 8001824:	fb01 f303 	mul.w	r3, r1, r3
 8001828:	4413      	add	r3, r2
 800182a:	3342      	adds	r3, #66	; 0x42
 800182c:	2202      	movs	r2, #2
 800182e:	701a      	strb	r2, [r3, #0]
      break;
 8001830:	e069      	b.n	8001906 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001832:	78fb      	ldrb	r3, [r7, #3]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	212c      	movs	r1, #44	; 0x2c
 8001838:	fb01 f303 	mul.w	r3, r1, r3
 800183c:	4413      	add	r3, r2
 800183e:	3354      	adds	r3, #84	; 0x54
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d109      	bne.n	800185a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001846:	78fb      	ldrb	r3, [r7, #3]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	212c      	movs	r1, #44	; 0x2c
 800184c:	fb01 f303 	mul.w	r3, r1, r3
 8001850:	4413      	add	r3, r2
 8001852:	3342      	adds	r3, #66	; 0x42
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
      break;
 8001858:	e055      	b.n	8001906 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	212c      	movs	r1, #44	; 0x2c
 8001860:	fb01 f303 	mul.w	r3, r1, r3
 8001864:	4413      	add	r3, r2
 8001866:	3342      	adds	r3, #66	; 0x42
 8001868:	2202      	movs	r2, #2
 800186a:	701a      	strb	r2, [r3, #0]
      break;
 800186c:	e04b      	b.n	8001906 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800186e:	78bb      	ldrb	r3, [r7, #2]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d11d      	bne.n	80018b0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	212c      	movs	r1, #44	; 0x2c
 800187a:	fb01 f303 	mul.w	r3, r1, r3
 800187e:	4413      	add	r3, r2
 8001880:	3355      	adds	r3, #85	; 0x55
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d109      	bne.n	800189c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	212c      	movs	r1, #44	; 0x2c
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
 8001894:	3342      	adds	r3, #66	; 0x42
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800189a:	e034      	b.n	8001906 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	212c      	movs	r1, #44	; 0x2c
 80018a2:	fb01 f303 	mul.w	r3, r1, r3
 80018a6:	4413      	add	r3, r2
 80018a8:	3342      	adds	r3, #66	; 0x42
 80018aa:	2202      	movs	r2, #2
 80018ac:	701a      	strb	r2, [r3, #0]
      break;
 80018ae:	e02a      	b.n	8001906 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	212c      	movs	r1, #44	; 0x2c
 80018b6:	fb01 f303 	mul.w	r3, r1, r3
 80018ba:	4413      	add	r3, r2
 80018bc:	3354      	adds	r3, #84	; 0x54
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d109      	bne.n	80018d8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	212c      	movs	r1, #44	; 0x2c
 80018ca:	fb01 f303 	mul.w	r3, r1, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	3342      	adds	r3, #66	; 0x42
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
      break;
 80018d6:	e016      	b.n	8001906 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	212c      	movs	r1, #44	; 0x2c
 80018de:	fb01 f303 	mul.w	r3, r1, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	3342      	adds	r3, #66	; 0x42
 80018e6:	2202      	movs	r2, #2
 80018e8:	701a      	strb	r2, [r3, #0]
      break;
 80018ea:	e00c      	b.n	8001906 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	212c      	movs	r1, #44	; 0x2c
 80018f2:	fb01 f303 	mul.w	r3, r1, r3
 80018f6:	4413      	add	r3, r2
 80018f8:	3342      	adds	r3, #66	; 0x42
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
      break;
 80018fe:	e002      	b.n	8001906 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001900:	bf00      	nop
 8001902:	e000      	b.n	8001906 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001904:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	212c      	movs	r1, #44	; 0x2c
 800190c:	fb01 f303 	mul.w	r3, r1, r3
 8001910:	4413      	add	r3, r2
 8001912:	3344      	adds	r3, #68	; 0x44
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001918:	78fb      	ldrb	r3, [r7, #3]
 800191a:	8b3a      	ldrh	r2, [r7, #24]
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	202c      	movs	r0, #44	; 0x2c
 8001920:	fb00 f303 	mul.w	r3, r0, r3
 8001924:	440b      	add	r3, r1
 8001926:	334c      	adds	r3, #76	; 0x4c
 8001928:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	212c      	movs	r1, #44	; 0x2c
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	4413      	add	r3, r2
 8001936:	3360      	adds	r3, #96	; 0x60
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	212c      	movs	r1, #44	; 0x2c
 8001942:	fb01 f303 	mul.w	r3, r1, r3
 8001946:	4413      	add	r3, r2
 8001948:	3350      	adds	r3, #80	; 0x50
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	212c      	movs	r1, #44	; 0x2c
 8001954:	fb01 f303 	mul.w	r3, r1, r3
 8001958:	4413      	add	r3, r2
 800195a:	3339      	adds	r3, #57	; 0x39
 800195c:	78fa      	ldrb	r2, [r7, #3]
 800195e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	212c      	movs	r1, #44	; 0x2c
 8001966:	fb01 f303 	mul.w	r3, r1, r3
 800196a:	4413      	add	r3, r2
 800196c:	3361      	adds	r3, #97	; 0x61
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6818      	ldr	r0, [r3, #0]
 8001976:	78fb      	ldrb	r3, [r7, #3]
 8001978:	222c      	movs	r2, #44	; 0x2c
 800197a:	fb02 f303 	mul.w	r3, r2, r3
 800197e:	3338      	adds	r3, #56	; 0x38
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	18d1      	adds	r1, r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	461a      	mov	r2, r3
 800198c:	f003 fe74 	bl	8005678 <USB_HC_StartXfer>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop

0800199c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f003 fb75 	bl	80050a2 <USB_GetMode>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	f040 80f6 	bne.w	8001bac <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f003 fb59 	bl	800507c <USB_ReadInterrupts>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 80ec 	beq.w	8001baa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 fb50 	bl	800507c <USB_ReadInterrupts>
 80019dc:	4603      	mov	r3, r0
 80019de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019e6:	d104      	bne.n	80019f2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 fb40 	bl	800507c <USB_ReadInterrupts>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a06:	d104      	bne.n	8001a12 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 fb30 	bl	800507c <USB_ReadInterrupts>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a26:	d104      	bne.n	8001a32 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 fb20 	bl	800507c <USB_ReadInterrupts>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d103      	bne.n	8001a4e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f003 fb12 	bl	800507c <USB_ReadInterrupts>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a62:	d11c      	bne.n	8001a9e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a6c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10f      	bne.n	8001a9e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a7e:	2110      	movs	r1, #16
 8001a80:	6938      	ldr	r0, [r7, #16]
 8001a82:	f003 fa01 	bl	8004e88 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a86:	6938      	ldr	r0, [r7, #16]
 8001a88:	f003 fa32 	bl	8004ef0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2101      	movs	r1, #1
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 fc08 	bl	80052a8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f006 f9d7 	bl	8007e4c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f003 faea 	bl	800507c <USB_ReadInterrupts>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab2:	d102      	bne.n	8001aba <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f001 f89e 	bl	8002bf6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 fadc 	bl	800507c <USB_ReadInterrupts>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d106      	bne.n	8001adc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f006 f9a0 	bl	8007e14 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2208      	movs	r2, #8
 8001ada:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f003 facb 	bl	800507c <USB_ReadInterrupts>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f003 0310 	and.w	r3, r3, #16
 8001aec:	2b10      	cmp	r3, #16
 8001aee:	d101      	bne.n	8001af4 <HAL_HCD_IRQHandler+0x158>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <HAL_HCD_IRQHandler+0x15a>
 8001af4:	2300      	movs	r3, #0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d012      	beq.n	8001b20 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699a      	ldr	r2, [r3, #24]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0210 	bic.w	r2, r2, #16
 8001b08:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 ffa1 	bl	8002a52 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	699a      	ldr	r2, [r3, #24]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0210 	orr.w	r2, r2, #16
 8001b1e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f003 faa9 	bl	800507c <USB_ReadInterrupts>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b34:	d13a      	bne.n	8001bac <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 fede 	bl	80058fc <USB_HC_ReadInterrupt>
 8001b40:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	e025      	b.n	8001b94 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	fa22 f303 	lsr.w	r3, r2, r3
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d018      	beq.n	8001b8e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	015a      	lsls	r2, r3, #5
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b72:	d106      	bne.n	8001b82 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	4619      	mov	r1, r3
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f8ab 	bl	8001cd6 <HCD_HC_IN_IRQHandler>
 8001b80:	e005      	b.n	8001b8e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	4619      	mov	r1, r3
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 fbf9 	bl	8002380 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	3301      	adds	r3, #1
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d3d4      	bcc.n	8001b48 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba6:	615a      	str	r2, [r3, #20]
 8001ba8:	e000      	b.n	8001bac <HAL_HCD_IRQHandler+0x210>
      return;
 8001baa:	bf00      	nop
    }
  }
}
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_HCD_Start+0x16>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e013      	b.n	8001bf0 <HAL_HCD_Start+0x3e>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f003 fbca 	bl	8005370 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f003 f8e2 	bl	8004daa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d101      	bne.n	8001c0e <HAL_HCD_Stop+0x16>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e00d      	b.n	8001c2a <HAL_HCD_Stop+0x32>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f003 ffb8 	bl	8005b90 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f003 fb6c 	bl	800531c <USB_ResetPort>
 8001c44:	4603      	mov	r3, r0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	460b      	mov	r3, r1
 8001c58:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	212c      	movs	r1, #44	; 0x2c
 8001c60:	fb01 f303 	mul.w	r3, r1, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	3360      	adds	r3, #96	; 0x60
 8001c68:	781b      	ldrb	r3, [r3, #0]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	212c      	movs	r1, #44	; 0x2c
 8001c88:	fb01 f303 	mul.w	r3, r1, r3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3350      	adds	r3, #80	; 0x50
 8001c90:	681b      	ldr	r3, [r3, #0]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f003 fbb0 	bl	8005410 <USB_GetCurrentFrame>
 8001cb0:	4603      	mov	r3, r0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 fb8b 	bl	80053e2 <USB_GetHostSpeed>
 8001ccc:	4603      	mov	r3, r0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	015a      	lsls	r2, r3, #5
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d11a      	bne.n	8001d3c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	015a      	lsls	r2, r3, #5
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d12:	461a      	mov	r2, r3
 8001d14:	2304      	movs	r3, #4
 8001d16:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	212c      	movs	r1, #44	; 0x2c
 8001d1e:	fb01 f303 	mul.w	r3, r1, r3
 8001d22:	4413      	add	r3, r2
 8001d24:	3361      	adds	r3, #97	; 0x61
 8001d26:	2206      	movs	r2, #6
 8001d28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	4611      	mov	r1, r2
 8001d34:	4618      	mov	r0, r3
 8001d36:	f003 fdf2 	bl	800591e <USB_HC_Halt>
 8001d3a:	e0af      	b.n	8001e9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	015a      	lsls	r2, r3, #5
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4413      	add	r3, r2
 8001d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d52:	d11b      	bne.n	8001d8c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d60:	461a      	mov	r2, r3
 8001d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d66:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	212c      	movs	r1, #44	; 0x2c
 8001d6e:	fb01 f303 	mul.w	r3, r1, r3
 8001d72:	4413      	add	r3, r2
 8001d74:	3361      	adds	r3, #97	; 0x61
 8001d76:	2207      	movs	r2, #7
 8001d78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f003 fdca 	bl	800591e <USB_HC_Halt>
 8001d8a:	e087      	b.n	8001e9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	015a      	lsls	r2, r3, #5
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0320 	and.w	r3, r3, #32
 8001d9e:	2b20      	cmp	r3, #32
 8001da0:	d109      	bne.n	8001db6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dae:	461a      	mov	r2, r3
 8001db0:	2320      	movs	r3, #32
 8001db2:	6093      	str	r3, [r2, #8]
 8001db4:	e072      	b.n	8001e9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	015a      	lsls	r2, r3, #5
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d11a      	bne.n	8001e02 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2308      	movs	r3, #8
 8001ddc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	212c      	movs	r1, #44	; 0x2c
 8001de4:	fb01 f303 	mul.w	r3, r1, r3
 8001de8:	4413      	add	r3, r2
 8001dea:	3361      	adds	r3, #97	; 0x61
 8001dec:	2205      	movs	r2, #5
 8001dee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	4611      	mov	r1, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f003 fd8f 	bl	800591e <USB_HC_Halt>
 8001e00:	e04c      	b.n	8001e9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e18:	d11b      	bne.n	8001e52 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	015a      	lsls	r2, r3, #5
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e26:	461a      	mov	r2, r3
 8001e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	212c      	movs	r1, #44	; 0x2c
 8001e34:	fb01 f303 	mul.w	r3, r1, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	3361      	adds	r3, #97	; 0x61
 8001e3c:	2208      	movs	r2, #8
 8001e3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 fd67 	bl	800591e <USB_HC_Halt>
 8001e50:	e024      	b.n	8001e9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	015a      	lsls	r2, r3, #5
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e64:	2b80      	cmp	r3, #128	; 0x80
 8001e66:	d119      	bne.n	8001e9c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	015a      	lsls	r2, r3, #5
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e74:	461a      	mov	r2, r3
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	212c      	movs	r1, #44	; 0x2c
 8001e80:	fb01 f303 	mul.w	r3, r1, r3
 8001e84:	4413      	add	r3, r2
 8001e86:	3361      	adds	r3, #97	; 0x61
 8001e88:	2206      	movs	r2, #6
 8001e8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f003 fd41 	bl	800591e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	015a      	lsls	r2, r3, #5
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eb2:	d112      	bne.n	8001eda <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f003 fd2d 	bl	800591e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	015a      	lsls	r2, r3, #5
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ed6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001ed8:	e24e      	b.n	8002378 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	f040 80df 	bne.w	80020b0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d019      	beq.n	8001f2e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	212c      	movs	r1, #44	; 0x2c
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	3348      	adds	r3, #72	; 0x48
 8001f08:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	0159      	lsls	r1, r3, #5
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	440b      	add	r3, r1
 8001f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f1c:	1ad2      	subs	r2, r2, r3
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	202c      	movs	r0, #44	; 0x2c
 8001f24:	fb00 f303 	mul.w	r3, r0, r3
 8001f28:	440b      	add	r3, r1
 8001f2a:	3350      	adds	r3, #80	; 0x50
 8001f2c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	212c      	movs	r1, #44	; 0x2c
 8001f34:	fb01 f303 	mul.w	r3, r1, r3
 8001f38:	4413      	add	r3, r2
 8001f3a:	3361      	adds	r3, #97	; 0x61
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	212c      	movs	r1, #44	; 0x2c
 8001f46:	fb01 f303 	mul.w	r3, r1, r3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	335c      	adds	r3, #92	; 0x5c
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2301      	movs	r3, #1
 8001f62:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	212c      	movs	r1, #44	; 0x2c
 8001f6a:	fb01 f303 	mul.w	r3, r1, r3
 8001f6e:	4413      	add	r3, r2
 8001f70:	333f      	adds	r3, #63	; 0x3f
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d009      	beq.n	8001f8c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	212c      	movs	r1, #44	; 0x2c
 8001f7e:	fb01 f303 	mul.w	r3, r1, r3
 8001f82:	4413      	add	r3, r2
 8001f84:	333f      	adds	r3, #63	; 0x3f
 8001f86:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d111      	bne.n	8001fb0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 fcc1 	bl	800591e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa8:	461a      	mov	r2, r3
 8001faa:	2310      	movs	r3, #16
 8001fac:	6093      	str	r3, [r2, #8]
 8001fae:	e03a      	b.n	8002026 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	212c      	movs	r1, #44	; 0x2c
 8001fb6:	fb01 f303 	mul.w	r3, r1, r3
 8001fba:	4413      	add	r3, r2
 8001fbc:	333f      	adds	r3, #63	; 0x3f
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d009      	beq.n	8001fd8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	212c      	movs	r1, #44	; 0x2c
 8001fca:	fb01 f303 	mul.w	r3, r1, r3
 8001fce:	4413      	add	r3, r2
 8001fd0:	333f      	adds	r3, #63	; 0x3f
 8001fd2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d126      	bne.n	8002026 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	015a      	lsls	r2, r3, #5
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4413      	add	r3, r2
 8001fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	0151      	lsls	r1, r2, #5
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	440a      	add	r2, r1
 8001fee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ff2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ff6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	212c      	movs	r1, #44	; 0x2c
 8001ffe:	fb01 f303 	mul.w	r3, r1, r3
 8002002:	4413      	add	r3, r2
 8002004:	3360      	adds	r3, #96	; 0x60
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	b2d9      	uxtb	r1, r3
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	202c      	movs	r0, #44	; 0x2c
 8002014:	fb00 f303 	mul.w	r3, r0, r3
 8002018:	4413      	add	r3, r2
 800201a:	3360      	adds	r3, #96	; 0x60
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f005 ff21 	bl	8007e68 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d12b      	bne.n	8002086 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	212c      	movs	r1, #44	; 0x2c
 8002034:	fb01 f303 	mul.w	r3, r1, r3
 8002038:	4413      	add	r3, r2
 800203a:	3348      	adds	r3, #72	; 0x48
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	202c      	movs	r0, #44	; 0x2c
 8002044:	fb00 f202 	mul.w	r2, r0, r2
 8002048:	440a      	add	r2, r1
 800204a:	3240      	adds	r2, #64	; 0x40
 800204c:	8812      	ldrh	r2, [r2, #0]
 800204e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 818e 	beq.w	8002378 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	212c      	movs	r1, #44	; 0x2c
 8002062:	fb01 f303 	mul.w	r3, r1, r3
 8002066:	4413      	add	r3, r2
 8002068:	3354      	adds	r3, #84	; 0x54
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	f083 0301 	eor.w	r3, r3, #1
 8002070:	b2d8      	uxtb	r0, r3
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	212c      	movs	r1, #44	; 0x2c
 8002078:	fb01 f303 	mul.w	r3, r1, r3
 800207c:	4413      	add	r3, r2
 800207e:	3354      	adds	r3, #84	; 0x54
 8002080:	4602      	mov	r2, r0
 8002082:	701a      	strb	r2, [r3, #0]
}
 8002084:	e178      	b.n	8002378 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	212c      	movs	r1, #44	; 0x2c
 800208c:	fb01 f303 	mul.w	r3, r1, r3
 8002090:	4413      	add	r3, r2
 8002092:	3354      	adds	r3, #84	; 0x54
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	f083 0301 	eor.w	r3, r3, #1
 800209a:	b2d8      	uxtb	r0, r3
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	212c      	movs	r1, #44	; 0x2c
 80020a2:	fb01 f303 	mul.w	r3, r1, r3
 80020a6:	4413      	add	r3, r2
 80020a8:	3354      	adds	r3, #84	; 0x54
 80020aa:	4602      	mov	r2, r0
 80020ac:	701a      	strb	r2, [r3, #0]
}
 80020ae:	e163      	b.n	8002378 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	f040 80f6 	bne.w	80022b4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	212c      	movs	r1, #44	; 0x2c
 80020ce:	fb01 f303 	mul.w	r3, r1, r3
 80020d2:	4413      	add	r3, r2
 80020d4:	3361      	adds	r3, #97	; 0x61
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d109      	bne.n	80020f0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	212c      	movs	r1, #44	; 0x2c
 80020e2:	fb01 f303 	mul.w	r3, r1, r3
 80020e6:	4413      	add	r3, r2
 80020e8:	3360      	adds	r3, #96	; 0x60
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
 80020ee:	e0c9      	b.n	8002284 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	212c      	movs	r1, #44	; 0x2c
 80020f6:	fb01 f303 	mul.w	r3, r1, r3
 80020fa:	4413      	add	r3, r2
 80020fc:	3361      	adds	r3, #97	; 0x61
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b05      	cmp	r3, #5
 8002102:	d109      	bne.n	8002118 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	212c      	movs	r1, #44	; 0x2c
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	4413      	add	r3, r2
 8002110:	3360      	adds	r3, #96	; 0x60
 8002112:	2205      	movs	r2, #5
 8002114:	701a      	strb	r2, [r3, #0]
 8002116:	e0b5      	b.n	8002284 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	212c      	movs	r1, #44	; 0x2c
 800211e:	fb01 f303 	mul.w	r3, r1, r3
 8002122:	4413      	add	r3, r2
 8002124:	3361      	adds	r3, #97	; 0x61
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b06      	cmp	r3, #6
 800212a:	d009      	beq.n	8002140 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	212c      	movs	r1, #44	; 0x2c
 8002132:	fb01 f303 	mul.w	r3, r1, r3
 8002136:	4413      	add	r3, r2
 8002138:	3361      	adds	r3, #97	; 0x61
 800213a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800213c:	2b08      	cmp	r3, #8
 800213e:	d150      	bne.n	80021e2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	212c      	movs	r1, #44	; 0x2c
 8002146:	fb01 f303 	mul.w	r3, r1, r3
 800214a:	4413      	add	r3, r2
 800214c:	335c      	adds	r3, #92	; 0x5c
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	1c5a      	adds	r2, r3, #1
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	202c      	movs	r0, #44	; 0x2c
 8002158:	fb00 f303 	mul.w	r3, r0, r3
 800215c:	440b      	add	r3, r1
 800215e:	335c      	adds	r3, #92	; 0x5c
 8002160:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	212c      	movs	r1, #44	; 0x2c
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	4413      	add	r3, r2
 800216e:	335c      	adds	r3, #92	; 0x5c
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d912      	bls.n	800219c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	212c      	movs	r1, #44	; 0x2c
 800217c:	fb01 f303 	mul.w	r3, r1, r3
 8002180:	4413      	add	r3, r2
 8002182:	335c      	adds	r3, #92	; 0x5c
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	212c      	movs	r1, #44	; 0x2c
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	4413      	add	r3, r2
 8002194:	3360      	adds	r3, #96	; 0x60
 8002196:	2204      	movs	r2, #4
 8002198:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800219a:	e073      	b.n	8002284 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	212c      	movs	r1, #44	; 0x2c
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	3360      	adds	r3, #96	; 0x60
 80021aa:	2202      	movs	r2, #2
 80021ac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021c4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021cc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021da:	461a      	mov	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021e0:	e050      	b.n	8002284 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	212c      	movs	r1, #44	; 0x2c
 80021e8:	fb01 f303 	mul.w	r3, r1, r3
 80021ec:	4413      	add	r3, r2
 80021ee:	3361      	adds	r3, #97	; 0x61
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d122      	bne.n	800223c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	212c      	movs	r1, #44	; 0x2c
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	4413      	add	r3, r2
 8002202:	3360      	adds	r3, #96	; 0x60
 8002204:	2202      	movs	r2, #2
 8002206:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4413      	add	r3, r2
 8002210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800221e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002226:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	015a      	lsls	r2, r3, #5
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4413      	add	r3, r2
 8002230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002234:	461a      	mov	r2, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e023      	b.n	8002284 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	212c      	movs	r1, #44	; 0x2c
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	4413      	add	r3, r2
 8002248:	3361      	adds	r3, #97	; 0x61
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b07      	cmp	r3, #7
 800224e:	d119      	bne.n	8002284 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	335c      	adds	r3, #92	; 0x5c
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	202c      	movs	r0, #44	; 0x2c
 8002268:	fb00 f303 	mul.w	r3, r0, r3
 800226c:	440b      	add	r3, r1
 800226e:	335c      	adds	r3, #92	; 0x5c
 8002270:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	212c      	movs	r1, #44	; 0x2c
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	4413      	add	r3, r2
 800227e:	3360      	adds	r3, #96	; 0x60
 8002280:	2204      	movs	r2, #4
 8002282:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4413      	add	r3, r2
 800228c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002290:	461a      	mov	r2, r3
 8002292:	2302      	movs	r3, #2
 8002294:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	b2d9      	uxtb	r1, r3
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	202c      	movs	r0, #44	; 0x2c
 80022a0:	fb00 f303 	mul.w	r3, r0, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	3360      	adds	r3, #96	; 0x60
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f005 fddb 	bl	8007e68 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022b2:	e061      	b.n	8002378 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b10      	cmp	r3, #16
 80022c8:	d156      	bne.n	8002378 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	212c      	movs	r1, #44	; 0x2c
 80022d0:	fb01 f303 	mul.w	r3, r1, r3
 80022d4:	4413      	add	r3, r2
 80022d6:	333f      	adds	r3, #63	; 0x3f
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d111      	bne.n	8002302 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	212c      	movs	r1, #44	; 0x2c
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	335c      	adds	r3, #92	; 0x5c
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	4611      	mov	r1, r2
 80022fa:	4618      	mov	r0, r3
 80022fc:	f003 fb0f 	bl	800591e <USB_HC_Halt>
 8002300:	e031      	b.n	8002366 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	212c      	movs	r1, #44	; 0x2c
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	4413      	add	r3, r2
 800230e:	333f      	adds	r3, #63	; 0x3f
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d009      	beq.n	800232a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	212c      	movs	r1, #44	; 0x2c
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	4413      	add	r3, r2
 8002322:	333f      	adds	r3, #63	; 0x3f
 8002324:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002326:	2b02      	cmp	r3, #2
 8002328:	d11d      	bne.n	8002366 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	212c      	movs	r1, #44	; 0x2c
 8002330:	fb01 f303 	mul.w	r3, r1, r3
 8002334:	4413      	add	r3, r2
 8002336:	335c      	adds	r3, #92	; 0x5c
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d110      	bne.n	8002366 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	212c      	movs	r1, #44	; 0x2c
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	4413      	add	r3, r2
 8002350:	3361      	adds	r3, #97	; 0x61
 8002352:	2203      	movs	r2, #3
 8002354:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f003 fadc 	bl	800591e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	015a      	lsls	r2, r3, #5
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4413      	add	r3, r2
 800236e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002372:	461a      	mov	r2, r3
 8002374:	2310      	movs	r3, #16
 8002376:	6093      	str	r3, [r2, #8]
}
 8002378:	bf00      	nop
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002396:	78fb      	ldrb	r3, [r7, #3]
 8002398:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d11a      	bne.n	80023e6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023bc:	461a      	mov	r2, r3
 80023be:	2304      	movs	r3, #4
 80023c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	212c      	movs	r1, #44	; 0x2c
 80023c8:	fb01 f303 	mul.w	r3, r1, r3
 80023cc:	4413      	add	r3, r2
 80023ce:	3361      	adds	r3, #97	; 0x61
 80023d0:	2206      	movs	r2, #6
 80023d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	4611      	mov	r1, r2
 80023de:	4618      	mov	r0, r3
 80023e0:	f003 fa9d 	bl	800591e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80023e4:	e331      	b.n	8002a4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0320 	and.w	r3, r3, #32
 80023f8:	2b20      	cmp	r3, #32
 80023fa:	d12e      	bne.n	800245a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	4413      	add	r3, r2
 8002404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002408:	461a      	mov	r2, r3
 800240a:	2320      	movs	r3, #32
 800240c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	212c      	movs	r1, #44	; 0x2c
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	333d      	adds	r3, #61	; 0x3d
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b01      	cmp	r3, #1
 8002420:	f040 8313 	bne.w	8002a4a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	333d      	adds	r3, #61	; 0x3d
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	212c      	movs	r1, #44	; 0x2c
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	3360      	adds	r3, #96	; 0x60
 8002444:	2202      	movs	r2, #2
 8002446:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	4611      	mov	r1, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f003 fa63 	bl	800591e <USB_HC_Halt>
}
 8002458:	e2f7      	b.n	8002a4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	4413      	add	r3, r2
 8002462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800246c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002470:	d112      	bne.n	8002498 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	4413      	add	r3, r2
 800247a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247e:	461a      	mov	r2, r3
 8002480:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002484:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f003 fa44 	bl	800591e <USB_HC_Halt>
}
 8002496:	e2d8      	b.n	8002a4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d140      	bne.n	8002530 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	212c      	movs	r1, #44	; 0x2c
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	335c      	adds	r3, #92	; 0x5c
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d2:	2b40      	cmp	r3, #64	; 0x40
 80024d4:	d111      	bne.n	80024fa <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	212c      	movs	r1, #44	; 0x2c
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	333d      	adds	r3, #61	; 0x3d
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f4:	461a      	mov	r2, r3
 80024f6:	2340      	movs	r3, #64	; 0x40
 80024f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	4413      	add	r3, r2
 8002502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002506:	461a      	mov	r2, r3
 8002508:	2301      	movs	r3, #1
 800250a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	212c      	movs	r1, #44	; 0x2c
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4413      	add	r3, r2
 8002518:	3361      	adds	r3, #97	; 0x61
 800251a:	2201      	movs	r2, #1
 800251c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f003 f9f8 	bl	800591e <USB_HC_Halt>
}
 800252e:	e28c      	b.n	8002a4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	4413      	add	r3, r2
 8002538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002542:	2b40      	cmp	r3, #64	; 0x40
 8002544:	d12c      	bne.n	80025a0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	212c      	movs	r1, #44	; 0x2c
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	4413      	add	r3, r2
 8002552:	3361      	adds	r3, #97	; 0x61
 8002554:	2204      	movs	r2, #4
 8002556:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	212c      	movs	r1, #44	; 0x2c
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4413      	add	r3, r2
 8002564:	333d      	adds	r3, #61	; 0x3d
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	212c      	movs	r1, #44	; 0x2c
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	335c      	adds	r3, #92	; 0x5c
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f003 f9c9 	bl	800591e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	4413      	add	r3, r2
 8002594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002598:	461a      	mov	r2, r3
 800259a:	2340      	movs	r3, #64	; 0x40
 800259c:	6093      	str	r3, [r2, #8]
}
 800259e:	e254      	b.n	8002a4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d11a      	bne.n	80025ec <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c2:	461a      	mov	r2, r3
 80025c4:	2308      	movs	r3, #8
 80025c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	212c      	movs	r1, #44	; 0x2c
 80025ce:	fb01 f303 	mul.w	r3, r1, r3
 80025d2:	4413      	add	r3, r2
 80025d4:	3361      	adds	r3, #97	; 0x61
 80025d6:	2205      	movs	r2, #5
 80025d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f003 f99a 	bl	800591e <USB_HC_Halt>
}
 80025ea:	e22e      	b.n	8002a4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	2b10      	cmp	r3, #16
 8002600:	d140      	bne.n	8002684 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	212c      	movs	r1, #44	; 0x2c
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	4413      	add	r3, r2
 800260e:	335c      	adds	r3, #92	; 0x5c
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	212c      	movs	r1, #44	; 0x2c
 800261a:	fb01 f303 	mul.w	r3, r1, r3
 800261e:	4413      	add	r3, r2
 8002620:	3361      	adds	r3, #97	; 0x61
 8002622:	2203      	movs	r2, #3
 8002624:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	212c      	movs	r1, #44	; 0x2c
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	4413      	add	r3, r2
 8002632:	333d      	adds	r3, #61	; 0x3d
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d112      	bne.n	8002660 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	212c      	movs	r1, #44	; 0x2c
 8002640:	fb01 f303 	mul.w	r3, r1, r3
 8002644:	4413      	add	r3, r2
 8002646:	333c      	adds	r3, #60	; 0x3c
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d108      	bne.n	8002660 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	212c      	movs	r1, #44	; 0x2c
 8002654:	fb01 f303 	mul.w	r3, r1, r3
 8002658:	4413      	add	r3, r2
 800265a:	333d      	adds	r3, #61	; 0x3d
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	4611      	mov	r1, r2
 800266a:	4618      	mov	r0, r3
 800266c:	f003 f957 	bl	800591e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	4413      	add	r3, r2
 8002678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267c:	461a      	mov	r2, r3
 800267e:	2310      	movs	r3, #16
 8002680:	6093      	str	r3, [r2, #8]
}
 8002682:	e1e2      	b.n	8002a4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	4413      	add	r3, r2
 800268c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002696:	2b80      	cmp	r3, #128	; 0x80
 8002698:	d164      	bne.n	8002764 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d111      	bne.n	80026c6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	212c      	movs	r1, #44	; 0x2c
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	4413      	add	r3, r2
 80026ae:	3361      	adds	r3, #97	; 0x61
 80026b0:	2206      	movs	r2, #6
 80026b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	4611      	mov	r1, r2
 80026be:	4618      	mov	r0, r3
 80026c0:	f003 f92d 	bl	800591e <USB_HC_Halt>
 80026c4:	e044      	b.n	8002750 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	212c      	movs	r1, #44	; 0x2c
 80026cc:	fb01 f303 	mul.w	r3, r1, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	335c      	adds	r3, #92	; 0x5c
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	202c      	movs	r0, #44	; 0x2c
 80026de:	fb00 f303 	mul.w	r3, r0, r3
 80026e2:	440b      	add	r3, r1
 80026e4:	335c      	adds	r3, #92	; 0x5c
 80026e6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	212c      	movs	r1, #44	; 0x2c
 80026ee:	fb01 f303 	mul.w	r3, r1, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	335c      	adds	r3, #92	; 0x5c
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d920      	bls.n	800273e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	212c      	movs	r1, #44	; 0x2c
 8002702:	fb01 f303 	mul.w	r3, r1, r3
 8002706:	4413      	add	r3, r2
 8002708:	335c      	adds	r3, #92	; 0x5c
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	3360      	adds	r3, #96	; 0x60
 800271c:	2204      	movs	r2, #4
 800271e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	b2d9      	uxtb	r1, r3
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	202c      	movs	r0, #44	; 0x2c
 800272a:	fb00 f303 	mul.w	r3, r0, r3
 800272e:	4413      	add	r3, r2
 8002730:	3360      	adds	r3, #96	; 0x60
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f005 fb96 	bl	8007e68 <HAL_HCD_HC_NotifyURBChange_Callback>
 800273c:	e008      	b.n	8002750 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	3360      	adds	r3, #96	; 0x60
 800274c:	2202      	movs	r2, #2
 800274e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275c:	461a      	mov	r2, r3
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	6093      	str	r3, [r2, #8]
}
 8002762:	e172      	b.n	8002a4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	4413      	add	r3, r2
 800276c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800277a:	d11b      	bne.n	80027b4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	212c      	movs	r1, #44	; 0x2c
 8002782:	fb01 f303 	mul.w	r3, r1, r3
 8002786:	4413      	add	r3, r2
 8002788:	3361      	adds	r3, #97	; 0x61
 800278a:	2208      	movs	r2, #8
 800278c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	4611      	mov	r1, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f003 f8c0 	bl	800591e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	015a      	lsls	r2, r3, #5
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027aa:	461a      	mov	r2, r3
 80027ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027b0:	6093      	str	r3, [r2, #8]
}
 80027b2:	e14a      	b.n	8002a4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	f040 813f 	bne.w	8002a4a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	212c      	movs	r1, #44	; 0x2c
 80027d2:	fb01 f303 	mul.w	r3, r1, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	3361      	adds	r3, #97	; 0x61
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d17d      	bne.n	80028dc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	212c      	movs	r1, #44	; 0x2c
 80027e6:	fb01 f303 	mul.w	r3, r1, r3
 80027ea:	4413      	add	r3, r2
 80027ec:	3360      	adds	r3, #96	; 0x60
 80027ee:	2201      	movs	r2, #1
 80027f0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	333f      	adds	r3, #63	; 0x3f
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d00a      	beq.n	800281c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	212c      	movs	r1, #44	; 0x2c
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	4413      	add	r3, r2
 8002812:	333f      	adds	r3, #63	; 0x3f
 8002814:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002816:	2b03      	cmp	r3, #3
 8002818:	f040 8100 	bne.w	8002a1c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d113      	bne.n	800284c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	212c      	movs	r1, #44	; 0x2c
 800282a:	fb01 f303 	mul.w	r3, r1, r3
 800282e:	4413      	add	r3, r2
 8002830:	3355      	adds	r3, #85	; 0x55
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	f083 0301 	eor.w	r3, r3, #1
 8002838:	b2d8      	uxtb	r0, r3
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	212c      	movs	r1, #44	; 0x2c
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	4413      	add	r3, r2
 8002846:	3355      	adds	r3, #85	; 0x55
 8002848:	4602      	mov	r2, r0
 800284a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	2b01      	cmp	r3, #1
 8002852:	f040 80e3 	bne.w	8002a1c <HCD_HC_OUT_IRQHandler+0x69c>
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	334c      	adds	r3, #76	; 0x4c
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 80d8 	beq.w	8002a1c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	212c      	movs	r1, #44	; 0x2c
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	4413      	add	r3, r2
 8002878:	334c      	adds	r3, #76	; 0x4c
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	202c      	movs	r0, #44	; 0x2c
 8002882:	fb00 f202 	mul.w	r2, r0, r2
 8002886:	440a      	add	r2, r1
 8002888:	3240      	adds	r2, #64	; 0x40
 800288a:	8812      	ldrh	r2, [r2, #0]
 800288c:	4413      	add	r3, r2
 800288e:	3b01      	subs	r3, #1
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	202c      	movs	r0, #44	; 0x2c
 8002896:	fb00 f202 	mul.w	r2, r0, r2
 800289a:	440a      	add	r2, r1
 800289c:	3240      	adds	r2, #64	; 0x40
 800289e:	8812      	ldrh	r2, [r2, #0]
 80028a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 80b5 	beq.w	8002a1c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	212c      	movs	r1, #44	; 0x2c
 80028b8:	fb01 f303 	mul.w	r3, r1, r3
 80028bc:	4413      	add	r3, r2
 80028be:	3355      	adds	r3, #85	; 0x55
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	f083 0301 	eor.w	r3, r3, #1
 80028c6:	b2d8      	uxtb	r0, r3
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	212c      	movs	r1, #44	; 0x2c
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	3355      	adds	r3, #85	; 0x55
 80028d6:	4602      	mov	r2, r0
 80028d8:	701a      	strb	r2, [r3, #0]
 80028da:	e09f      	b.n	8002a1c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	212c      	movs	r1, #44	; 0x2c
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	3361      	adds	r3, #97	; 0x61
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d109      	bne.n	8002904 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	212c      	movs	r1, #44	; 0x2c
 80028f6:	fb01 f303 	mul.w	r3, r1, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	3360      	adds	r3, #96	; 0x60
 80028fe:	2202      	movs	r2, #2
 8002900:	701a      	strb	r2, [r3, #0]
 8002902:	e08b      	b.n	8002a1c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	212c      	movs	r1, #44	; 0x2c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	3361      	adds	r3, #97	; 0x61
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b04      	cmp	r3, #4
 8002916:	d109      	bne.n	800292c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	212c      	movs	r1, #44	; 0x2c
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	4413      	add	r3, r2
 8002924:	3360      	adds	r3, #96	; 0x60
 8002926:	2202      	movs	r2, #2
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	e077      	b.n	8002a1c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	3361      	adds	r3, #97	; 0x61
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b05      	cmp	r3, #5
 800293e:	d109      	bne.n	8002954 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	3360      	adds	r3, #96	; 0x60
 800294e:	2205      	movs	r2, #5
 8002950:	701a      	strb	r2, [r3, #0]
 8002952:	e063      	b.n	8002a1c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	212c      	movs	r1, #44	; 0x2c
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	3361      	adds	r3, #97	; 0x61
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b06      	cmp	r3, #6
 8002966:	d009      	beq.n	800297c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	3361      	adds	r3, #97	; 0x61
 8002976:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002978:	2b08      	cmp	r3, #8
 800297a:	d14f      	bne.n	8002a1c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	335c      	adds	r3, #92	; 0x5c
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	202c      	movs	r0, #44	; 0x2c
 8002994:	fb00 f303 	mul.w	r3, r0, r3
 8002998:	440b      	add	r3, r1
 800299a:	335c      	adds	r3, #92	; 0x5c
 800299c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	212c      	movs	r1, #44	; 0x2c
 80029a4:	fb01 f303 	mul.w	r3, r1, r3
 80029a8:	4413      	add	r3, r2
 80029aa:	335c      	adds	r3, #92	; 0x5c
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d912      	bls.n	80029d8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	335c      	adds	r3, #92	; 0x5c
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	3360      	adds	r3, #96	; 0x60
 80029d2:	2204      	movs	r2, #4
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	e021      	b.n	8002a1c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	212c      	movs	r1, #44	; 0x2c
 80029de:	fb01 f303 	mul.w	r3, r1, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	3360      	adds	r3, #96	; 0x60
 80029e6:	2202      	movs	r2, #2
 80029e8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a00:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a08:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	015a      	lsls	r2, r3, #5
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	4413      	add	r3, r2
 8002a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a16:	461a      	mov	r2, r3
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	b2d9      	uxtb	r1, r3
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	202c      	movs	r0, #44	; 0x2c
 8002a38:	fb00 f303 	mul.w	r3, r0, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3360      	adds	r3, #96	; 0x60
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f005 fa0f 	bl	8007e68 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a4a:	bf00      	nop
 8002a4c:	3720      	adds	r7, #32
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b08a      	sub	sp, #40	; 0x28
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	0c5b      	lsrs	r3, r3, #17
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a86:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d004      	beq.n	8002a98 <HCD_RXQLVL_IRQHandler+0x46>
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b05      	cmp	r3, #5
 8002a92:	f000 80a9 	beq.w	8002be8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a96:	e0aa      	b.n	8002bee <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 80a6 	beq.w	8002bec <HCD_RXQLVL_IRQHandler+0x19a>
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	212c      	movs	r1, #44	; 0x2c
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	3344      	adds	r3, #68	; 0x44
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 809b 	beq.w	8002bec <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	212c      	movs	r1, #44	; 0x2c
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3350      	adds	r3, #80	; 0x50
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	441a      	add	r2, r3
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	202c      	movs	r0, #44	; 0x2c
 8002ad0:	fb00 f303 	mul.w	r3, r0, r3
 8002ad4:	440b      	add	r3, r1
 8002ad6:	334c      	adds	r3, #76	; 0x4c
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d87a      	bhi.n	8002bd4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	212c      	movs	r1, #44	; 0x2c
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	3344      	adds	r3, #68	; 0x44
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	b292      	uxth	r2, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	f002 fa68 	bl	8004fcc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	212c      	movs	r1, #44	; 0x2c
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	3344      	adds	r3, #68	; 0x44
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	441a      	add	r2, r3
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	202c      	movs	r0, #44	; 0x2c
 8002b16:	fb00 f303 	mul.w	r3, r0, r3
 8002b1a:	440b      	add	r3, r1
 8002b1c:	3344      	adds	r3, #68	; 0x44
 8002b1e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	212c      	movs	r1, #44	; 0x2c
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3350      	adds	r3, #80	; 0x50
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	441a      	add	r2, r3
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	202c      	movs	r0, #44	; 0x2c
 8002b3a:	fb00 f303 	mul.w	r3, r0, r3
 8002b3e:	440b      	add	r3, r1
 8002b40:	3350      	adds	r3, #80	; 0x50
 8002b42:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	0cdb      	lsrs	r3, r3, #19
 8002b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b58:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	212c      	movs	r1, #44	; 0x2c
 8002b60:	fb01 f303 	mul.w	r3, r1, r3
 8002b64:	4413      	add	r3, r2
 8002b66:	3340      	adds	r3, #64	; 0x40
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d13c      	bne.n	8002bec <HCD_RXQLVL_IRQHandler+0x19a>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d039      	beq.n	8002bec <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b8e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b96:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3354      	adds	r3, #84	; 0x54
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	f083 0301 	eor.w	r3, r3, #1
 8002bbe:	b2d8      	uxtb	r0, r3
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	212c      	movs	r1, #44	; 0x2c
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3354      	adds	r3, #84	; 0x54
 8002bce:	4602      	mov	r2, r0
 8002bd0:	701a      	strb	r2, [r3, #0]
      break;
 8002bd2:	e00b      	b.n	8002bec <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3360      	adds	r3, #96	; 0x60
 8002be2:	2204      	movs	r2, #4
 8002be4:	701a      	strb	r2, [r3, #0]
      break;
 8002be6:	e001      	b.n	8002bec <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002be8:	bf00      	nop
 8002bea:	e000      	b.n	8002bee <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002bec:	bf00      	nop
  }
}
 8002bee:	bf00      	nop
 8002bf0:	3728      	adds	r7, #40	; 0x28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b086      	sub	sp, #24
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c22:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d10b      	bne.n	8002c46 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d102      	bne.n	8002c3e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f005 f8f9 	bl	8007e30 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f003 0308 	and.w	r3, r3, #8
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d132      	bne.n	8002cb6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f043 0308 	orr.w	r3, r3, #8
 8002c56:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d126      	bne.n	8002cb0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d113      	bne.n	8002c92 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c74:	d106      	bne.n	8002c84 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2102      	movs	r1, #2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f002 fb13 	bl	80052a8 <USB_InitFSLSPClkSel>
 8002c82:	e011      	b.n	8002ca8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2101      	movs	r1, #1
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f002 fb0c 	bl	80052a8 <USB_InitFSLSPClkSel>
 8002c90:	e00a      	b.n	8002ca8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d106      	bne.n	8002ca8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002ca6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f005 f8eb 	bl	8007e84 <HAL_HCD_PortEnabled_Callback>
 8002cae:	e002      	b.n	8002cb6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f005 f8f5 	bl	8007ea0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b20      	cmp	r3, #32
 8002cbe:	d103      	bne.n	8002cc8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f043 0320 	orr.w	r3, r3, #32
 8002cc6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	6013      	str	r3, [r2, #0]
}
 8002cd4:	bf00      	nop
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e12b      	b.n	8002f46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7fd fe6a 	bl	80009dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2224      	movs	r2, #36	; 0x24
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0201 	bic.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d40:	f001 fa20 	bl	8004184 <HAL_RCC_GetPCLK1Freq>
 8002d44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4a81      	ldr	r2, [pc, #516]	; (8002f50 <HAL_I2C_Init+0x274>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d807      	bhi.n	8002d60 <HAL_I2C_Init+0x84>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4a80      	ldr	r2, [pc, #512]	; (8002f54 <HAL_I2C_Init+0x278>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	bf94      	ite	ls
 8002d58:	2301      	movls	r3, #1
 8002d5a:	2300      	movhi	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e006      	b.n	8002d6e <HAL_I2C_Init+0x92>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4a7d      	ldr	r2, [pc, #500]	; (8002f58 <HAL_I2C_Init+0x27c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	bf94      	ite	ls
 8002d68:	2301      	movls	r3, #1
 8002d6a:	2300      	movhi	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e0e7      	b.n	8002f46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4a78      	ldr	r2, [pc, #480]	; (8002f5c <HAL_I2C_Init+0x280>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	0c9b      	lsrs	r3, r3, #18
 8002d80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4a6a      	ldr	r2, [pc, #424]	; (8002f50 <HAL_I2C_Init+0x274>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d802      	bhi.n	8002db0 <HAL_I2C_Init+0xd4>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	3301      	adds	r3, #1
 8002dae:	e009      	b.n	8002dc4 <HAL_I2C_Init+0xe8>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	4a69      	ldr	r2, [pc, #420]	; (8002f60 <HAL_I2C_Init+0x284>)
 8002dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc0:	099b      	lsrs	r3, r3, #6
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	495c      	ldr	r1, [pc, #368]	; (8002f50 <HAL_I2C_Init+0x274>)
 8002de0:	428b      	cmp	r3, r1
 8002de2:	d819      	bhi.n	8002e18 <HAL_I2C_Init+0x13c>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1e59      	subs	r1, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002df2:	1c59      	adds	r1, r3, #1
 8002df4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002df8:	400b      	ands	r3, r1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_I2C_Init+0x138>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1e59      	subs	r1, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e12:	e051      	b.n	8002eb8 <HAL_I2C_Init+0x1dc>
 8002e14:	2304      	movs	r3, #4
 8002e16:	e04f      	b.n	8002eb8 <HAL_I2C_Init+0x1dc>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d111      	bne.n	8002e44 <HAL_I2C_Init+0x168>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	1e58      	subs	r0, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	440b      	add	r3, r1
 8002e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e32:	3301      	adds	r3, #1
 8002e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	e012      	b.n	8002e6a <HAL_I2C_Init+0x18e>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1e58      	subs	r0, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6859      	ldr	r1, [r3, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	0099      	lsls	r1, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_Init+0x196>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e022      	b.n	8002eb8 <HAL_I2C_Init+0x1dc>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10e      	bne.n	8002e98 <HAL_I2C_Init+0x1bc>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1e58      	subs	r0, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6859      	ldr	r1, [r3, #4]
 8002e82:	460b      	mov	r3, r1
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	440b      	add	r3, r1
 8002e88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e96:	e00f      	b.n	8002eb8 <HAL_I2C_Init+0x1dc>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1e58      	subs	r0, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6859      	ldr	r1, [r3, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	0099      	lsls	r1, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	6809      	ldr	r1, [r1, #0]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69da      	ldr	r2, [r3, #28]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ee6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6911      	ldr	r1, [r2, #16]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	68d2      	ldr	r2, [r2, #12]
 8002ef2:	4311      	orrs	r1, r2
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	000186a0 	.word	0x000186a0
 8002f54:	001e847f 	.word	0x001e847f
 8002f58:	003d08ff 	.word	0x003d08ff
 8002f5c:	431bde83 	.word	0x431bde83
 8002f60:	10624dd3 	.word	0x10624dd3

08002f64 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e128      	b.n	80031c8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a90      	ldr	r2, [pc, #576]	; (80031d0 <HAL_I2S_Init+0x26c>)
 8002f8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7fd fd6b 	bl	8000a6c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2202      	movs	r2, #2
 8002f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002fac:	f023 030f 	bic.w	r3, r3, #15
 8002fb0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d060      	beq.n	8003084 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d102      	bne.n	8002fd0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002fca:	2310      	movs	r3, #16
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	e001      	b.n	8002fd4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002fd0:	2320      	movs	r3, #32
 8002fd2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d802      	bhi.n	8002fe2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002fe2:	2001      	movs	r0, #1
 8002fe4:	f001 f9d8 	bl	8004398 <HAL_RCCEx_GetPeriphCLKFreq>
 8002fe8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff2:	d125      	bne.n	8003040 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d010      	beq.n	800301e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	fbb2 f2f3 	udiv	r2, r2, r3
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	461a      	mov	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	fbb2 f3f3 	udiv	r3, r2, r3
 8003018:	3305      	adds	r3, #5
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	e01f      	b.n	800305e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	fbb2 f2f3 	udiv	r2, r2, r3
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	461a      	mov	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	fbb2 f3f3 	udiv	r3, r2, r3
 800303a:	3305      	adds	r3, #5
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	e00e      	b.n	800305e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	fbb2 f2f3 	udiv	r2, r2, r3
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	461a      	mov	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	fbb2 f3f3 	udiv	r3, r2, r3
 800305a:	3305      	adds	r3, #5
 800305c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4a5c      	ldr	r2, [pc, #368]	; (80031d4 <HAL_I2S_Init+0x270>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	08db      	lsrs	r3, r3, #3
 8003068:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	085b      	lsrs	r3, r3, #1
 800307a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	61bb      	str	r3, [r7, #24]
 8003082:	e003      	b.n	800308c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003084:	2302      	movs	r3, #2
 8003086:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d902      	bls.n	8003098 <HAL_I2S_Init+0x134>
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	2bff      	cmp	r3, #255	; 0xff
 8003096:	d907      	bls.n	80030a8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309c:	f043 0210 	orr.w	r2, r3, #16
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e08f      	b.n	80031c8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	ea42 0103 	orr.w	r1, r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69fa      	ldr	r2, [r7, #28]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030c6:	f023 030f 	bic.w	r3, r3, #15
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6851      	ldr	r1, [r2, #4]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6892      	ldr	r2, [r2, #8]
 80030d2:	4311      	orrs	r1, r2
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	68d2      	ldr	r2, [r2, #12]
 80030d8:	4311      	orrs	r1, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6992      	ldr	r2, [r2, #24]
 80030de:	430a      	orrs	r2, r1
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ea:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d161      	bne.n	80031b8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a38      	ldr	r2, [pc, #224]	; (80031d8 <HAL_I2S_Init+0x274>)
 80030f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a37      	ldr	r2, [pc, #220]	; (80031dc <HAL_I2S_Init+0x278>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d101      	bne.n	8003108 <HAL_I2S_Init+0x1a4>
 8003104:	4b36      	ldr	r3, [pc, #216]	; (80031e0 <HAL_I2S_Init+0x27c>)
 8003106:	e001      	b.n	800310c <HAL_I2S_Init+0x1a8>
 8003108:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6812      	ldr	r2, [r2, #0]
 8003112:	4932      	ldr	r1, [pc, #200]	; (80031dc <HAL_I2S_Init+0x278>)
 8003114:	428a      	cmp	r2, r1
 8003116:	d101      	bne.n	800311c <HAL_I2S_Init+0x1b8>
 8003118:	4a31      	ldr	r2, [pc, #196]	; (80031e0 <HAL_I2S_Init+0x27c>)
 800311a:	e001      	b.n	8003120 <HAL_I2S_Init+0x1bc>
 800311c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003120:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003124:	f023 030f 	bic.w	r3, r3, #15
 8003128:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a2b      	ldr	r2, [pc, #172]	; (80031dc <HAL_I2S_Init+0x278>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d101      	bne.n	8003138 <HAL_I2S_Init+0x1d4>
 8003134:	4b2a      	ldr	r3, [pc, #168]	; (80031e0 <HAL_I2S_Init+0x27c>)
 8003136:	e001      	b.n	800313c <HAL_I2S_Init+0x1d8>
 8003138:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800313c:	2202      	movs	r2, #2
 800313e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a25      	ldr	r2, [pc, #148]	; (80031dc <HAL_I2S_Init+0x278>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d101      	bne.n	800314e <HAL_I2S_Init+0x1ea>
 800314a:	4b25      	ldr	r3, [pc, #148]	; (80031e0 <HAL_I2S_Init+0x27c>)
 800314c:	e001      	b.n	8003152 <HAL_I2S_Init+0x1ee>
 800314e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800315e:	d003      	beq.n	8003168 <HAL_I2S_Init+0x204>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d103      	bne.n	8003170 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	e001      	b.n	8003174 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003170:	2300      	movs	r3, #0
 8003172:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800317e:	4313      	orrs	r3, r2
 8003180:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003188:	4313      	orrs	r3, r2
 800318a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003192:	4313      	orrs	r3, r2
 8003194:	b29a      	uxth	r2, r3
 8003196:	897b      	ldrh	r3, [r7, #10]
 8003198:	4313      	orrs	r3, r2
 800319a:	b29b      	uxth	r3, r3
 800319c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031a0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a0d      	ldr	r2, [pc, #52]	; (80031dc <HAL_I2S_Init+0x278>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d101      	bne.n	80031b0 <HAL_I2S_Init+0x24c>
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <HAL_I2S_Init+0x27c>)
 80031ae:	e001      	b.n	80031b4 <HAL_I2S_Init+0x250>
 80031b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031b4:	897a      	ldrh	r2, [r7, #10]
 80031b6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3720      	adds	r7, #32
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	080032db 	.word	0x080032db
 80031d4:	cccccccd 	.word	0xcccccccd
 80031d8:	080033f1 	.word	0x080033f1
 80031dc:	40003800 	.word	0x40003800
 80031e0:	40003400 	.word	0x40003400

080031e4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	881a      	ldrh	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	1c9a      	adds	r2, r3, #2
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10e      	bne.n	8003274 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003264:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff ffb8 	bl	80031e4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003274:	bf00      	nop
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328e:	b292      	uxth	r2, r2
 8003290:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003296:	1c9a      	adds	r2, r3, #2
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10e      	bne.n	80032d2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032c2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff ff93 	bl	80031f8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b086      	sub	sp, #24
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d13a      	bne.n	800336c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d109      	bne.n	8003314 <I2S_IRQHandler+0x3a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330a:	2b40      	cmp	r3, #64	; 0x40
 800330c:	d102      	bne.n	8003314 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff ffb4 	bl	800327c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331a:	2b40      	cmp	r3, #64	; 0x40
 800331c:	d126      	bne.n	800336c <I2S_IRQHandler+0x92>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b20      	cmp	r3, #32
 800332a:	d11f      	bne.n	800336c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800333a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800333c:	2300      	movs	r3, #0
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335e:	f043 0202 	orr.w	r2, r3, #2
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff ff50 	bl	800320c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b03      	cmp	r3, #3
 8003376:	d136      	bne.n	80033e6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b02      	cmp	r3, #2
 8003380:	d109      	bne.n	8003396 <I2S_IRQHandler+0xbc>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338c:	2b80      	cmp	r3, #128	; 0x80
 800338e:	d102      	bne.n	8003396 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ff45 	bl	8003220 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b08      	cmp	r3, #8
 800339e:	d122      	bne.n	80033e6 <I2S_IRQHandler+0x10c>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f003 0320 	and.w	r3, r3, #32
 80033aa:	2b20      	cmp	r3, #32
 80033ac:	d11b      	bne.n	80033e6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033bc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d8:	f043 0204 	orr.w	r2, r3, #4
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff ff13 	bl	800320c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033e6:	bf00      	nop
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a92      	ldr	r2, [pc, #584]	; (8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d101      	bne.n	800340e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800340a:	4b92      	ldr	r3, [pc, #584]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800340c:	e001      	b.n	8003412 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800340e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a8b      	ldr	r2, [pc, #556]	; (8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d101      	bne.n	800342c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003428:	4b8a      	ldr	r3, [pc, #552]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800342a:	e001      	b.n	8003430 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800342c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800343c:	d004      	beq.n	8003448 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	f040 8099 	bne.w	800357a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b02      	cmp	r3, #2
 8003450:	d107      	bne.n	8003462 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003458:	2b00      	cmp	r3, #0
 800345a:	d002      	beq.n	8003462 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f925 	bl	80036ac <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b01      	cmp	r3, #1
 800346a:	d107      	bne.n	800347c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f9c8 	bl	800380c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003482:	2b40      	cmp	r3, #64	; 0x40
 8003484:	d13a      	bne.n	80034fc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b00      	cmp	r3, #0
 800348e:	d035      	beq.n	80034fc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a6e      	ldr	r2, [pc, #440]	; (8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d101      	bne.n	800349e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800349a:	4b6e      	ldr	r3, [pc, #440]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800349c:	e001      	b.n	80034a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800349e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4969      	ldr	r1, [pc, #420]	; (8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034aa:	428b      	cmp	r3, r1
 80034ac:	d101      	bne.n	80034b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80034ae:	4b69      	ldr	r3, [pc, #420]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034b0:	e001      	b.n	80034b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80034b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034ba:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034ca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034cc:	2300      	movs	r3, #0
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	f043 0202 	orr.w	r2, r3, #2
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff fe88 	bl	800320c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b08      	cmp	r3, #8
 8003504:	f040 80c3 	bne.w	800368e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 80bd 	beq.w	800368e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003522:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a49      	ldr	r2, [pc, #292]	; (8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d101      	bne.n	8003532 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800352e:	4b49      	ldr	r3, [pc, #292]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003530:	e001      	b.n	8003536 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003532:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4944      	ldr	r1, [pc, #272]	; (8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800353e:	428b      	cmp	r3, r1
 8003540:	d101      	bne.n	8003546 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003542:	4b44      	ldr	r3, [pc, #272]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003544:	e001      	b.n	800354a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003546:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800354a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800354e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003550:	2300      	movs	r3, #0
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	f043 0204 	orr.w	r2, r3, #4
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff fe4a 	bl	800320c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003578:	e089      	b.n	800368e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b02      	cmp	r3, #2
 8003582:	d107      	bne.n	8003594 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f8be 	bl	8003710 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b01      	cmp	r3, #1
 800359c:	d107      	bne.n	80035ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f8fd 	bl	80037a8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b4:	2b40      	cmp	r3, #64	; 0x40
 80035b6:	d12f      	bne.n	8003618 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d02a      	beq.n	8003618 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035d0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1e      	ldr	r2, [pc, #120]	; (8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d101      	bne.n	80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80035dc:	4b1d      	ldr	r3, [pc, #116]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035de:	e001      	b.n	80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80035e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4919      	ldr	r1, [pc, #100]	; (8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035ec:	428b      	cmp	r3, r1
 80035ee:	d101      	bne.n	80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80035f0:	4b18      	ldr	r3, [pc, #96]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035f2:	e001      	b.n	80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80035f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035fc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360a:	f043 0202 	orr.w	r2, r3, #2
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff fdfa 	bl	800320c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b08      	cmp	r3, #8
 8003620:	d136      	bne.n	8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f003 0320 	and.w	r3, r3, #32
 8003628:	2b00      	cmp	r3, #0
 800362a:	d031      	beq.n	8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a07      	ldr	r2, [pc, #28]	; (8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d101      	bne.n	800363a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003636:	4b07      	ldr	r3, [pc, #28]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003638:	e001      	b.n	800363e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800363a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4902      	ldr	r1, [pc, #8]	; (8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003646:	428b      	cmp	r3, r1
 8003648:	d106      	bne.n	8003658 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800364a:	4b02      	ldr	r3, [pc, #8]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800364c:	e006      	b.n	800365c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800364e:	bf00      	nop
 8003650:	40003800 	.word	0x40003800
 8003654:	40003400 	.word	0x40003400
 8003658:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800365c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003660:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003670:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	f043 0204 	orr.w	r2, r3, #4
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff fdc0 	bl	800320c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800368c:	e000      	b.n	8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800368e:	bf00      	nop
}
 8003690:	bf00      	nop
 8003692:	3720      	adds	r7, #32
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	1c99      	adds	r1, r3, #2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6251      	str	r1, [r2, #36]	; 0x24
 80036be:	881a      	ldrh	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d113      	bne.n	8003706 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d106      	bne.n	8003706 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff ffc9 	bl	8003698 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	1c99      	adds	r1, r3, #2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6251      	str	r1, [r2, #36]	; 0x24
 8003722:	8819      	ldrh	r1, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <I2SEx_TxISR_I2SExt+0x90>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d101      	bne.n	8003732 <I2SEx_TxISR_I2SExt+0x22>
 800372e:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <I2SEx_TxISR_I2SExt+0x94>)
 8003730:	e001      	b.n	8003736 <I2SEx_TxISR_I2SExt+0x26>
 8003732:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003736:	460a      	mov	r2, r1
 8003738:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d121      	bne.n	8003796 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a12      	ldr	r2, [pc, #72]	; (80037a0 <I2SEx_TxISR_I2SExt+0x90>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d101      	bne.n	8003760 <I2SEx_TxISR_I2SExt+0x50>
 800375c:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <I2SEx_TxISR_I2SExt+0x94>)
 800375e:	e001      	b.n	8003764 <I2SEx_TxISR_I2SExt+0x54>
 8003760:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	490d      	ldr	r1, [pc, #52]	; (80037a0 <I2SEx_TxISR_I2SExt+0x90>)
 800376c:	428b      	cmp	r3, r1
 800376e:	d101      	bne.n	8003774 <I2SEx_TxISR_I2SExt+0x64>
 8003770:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <I2SEx_TxISR_I2SExt+0x94>)
 8003772:	e001      	b.n	8003778 <I2SEx_TxISR_I2SExt+0x68>
 8003774:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003778:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800377c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d106      	bne.n	8003796 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff ff81 	bl	8003698 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40003800 	.word	0x40003800
 80037a4:	40003400 	.word	0x40003400

080037a8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68d8      	ldr	r0, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ba:	1c99      	adds	r1, r3, #2
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037c0:	b282      	uxth	r2, r0
 80037c2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d113      	bne.n	8003804 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ea:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff ff4a 	bl	8003698 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003804:	bf00      	nop
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a20      	ldr	r2, [pc, #128]	; (800389c <I2SEx_RxISR_I2SExt+0x90>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d101      	bne.n	8003822 <I2SEx_RxISR_I2SExt+0x16>
 800381e:	4b20      	ldr	r3, [pc, #128]	; (80038a0 <I2SEx_RxISR_I2SExt+0x94>)
 8003820:	e001      	b.n	8003826 <I2SEx_RxISR_I2SExt+0x1a>
 8003822:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003826:	68d8      	ldr	r0, [r3, #12]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	1c99      	adds	r1, r3, #2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003832:	b282      	uxth	r2, r0
 8003834:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d121      	bne.n	8003892 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a12      	ldr	r2, [pc, #72]	; (800389c <I2SEx_RxISR_I2SExt+0x90>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d101      	bne.n	800385c <I2SEx_RxISR_I2SExt+0x50>
 8003858:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <I2SEx_RxISR_I2SExt+0x94>)
 800385a:	e001      	b.n	8003860 <I2SEx_RxISR_I2SExt+0x54>
 800385c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	490d      	ldr	r1, [pc, #52]	; (800389c <I2SEx_RxISR_I2SExt+0x90>)
 8003868:	428b      	cmp	r3, r1
 800386a:	d101      	bne.n	8003870 <I2SEx_RxISR_I2SExt+0x64>
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <I2SEx_RxISR_I2SExt+0x94>)
 800386e:	e001      	b.n	8003874 <I2SEx_RxISR_I2SExt+0x68>
 8003870:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003874:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003878:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d106      	bne.n	8003892 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff ff03 	bl	8003698 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40003800 	.word	0x40003800
 80038a0:	40003400 	.word	0x40003400

080038a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e267      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d075      	beq.n	80039ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038c2:	4b88      	ldr	r3, [pc, #544]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d00c      	beq.n	80038e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ce:	4b85      	ldr	r3, [pc, #532]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d112      	bne.n	8003900 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038da:	4b82      	ldr	r3, [pc, #520]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038e6:	d10b      	bne.n	8003900 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e8:	4b7e      	ldr	r3, [pc, #504]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d05b      	beq.n	80039ac <HAL_RCC_OscConfig+0x108>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d157      	bne.n	80039ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e242      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003908:	d106      	bne.n	8003918 <HAL_RCC_OscConfig+0x74>
 800390a:	4b76      	ldr	r3, [pc, #472]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a75      	ldr	r2, [pc, #468]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	e01d      	b.n	8003954 <HAL_RCC_OscConfig+0xb0>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003920:	d10c      	bne.n	800393c <HAL_RCC_OscConfig+0x98>
 8003922:	4b70      	ldr	r3, [pc, #448]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a6f      	ldr	r2, [pc, #444]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	4b6d      	ldr	r3, [pc, #436]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a6c      	ldr	r2, [pc, #432]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	e00b      	b.n	8003954 <HAL_RCC_OscConfig+0xb0>
 800393c:	4b69      	ldr	r3, [pc, #420]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a68      	ldr	r2, [pc, #416]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	4b66      	ldr	r3, [pc, #408]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a65      	ldr	r2, [pc, #404]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 800394e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d013      	beq.n	8003984 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395c:	f7fd faa2 	bl	8000ea4 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003964:	f7fd fa9e 	bl	8000ea4 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b64      	cmp	r3, #100	; 0x64
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e207      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003976:	4b5b      	ldr	r3, [pc, #364]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0xc0>
 8003982:	e014      	b.n	80039ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7fd fa8e 	bl	8000ea4 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800398c:	f7fd fa8a 	bl	8000ea4 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b64      	cmp	r3, #100	; 0x64
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e1f3      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399e:	4b51      	ldr	r3, [pc, #324]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0xe8>
 80039aa:	e000      	b.n	80039ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d063      	beq.n	8003a82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ba:	4b4a      	ldr	r3, [pc, #296]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00b      	beq.n	80039de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039c6:	4b47      	ldr	r3, [pc, #284]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d11c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039d2:	4b44      	ldr	r3, [pc, #272]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d116      	bne.n	8003a0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039de:	4b41      	ldr	r3, [pc, #260]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_RCC_OscConfig+0x152>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d001      	beq.n	80039f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e1c7      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f6:	4b3b      	ldr	r3, [pc, #236]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4937      	ldr	r1, [pc, #220]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a0a:	e03a      	b.n	8003a82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d020      	beq.n	8003a56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a14:	4b34      	ldr	r3, [pc, #208]	; (8003ae8 <HAL_RCC_OscConfig+0x244>)
 8003a16:	2201      	movs	r2, #1
 8003a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1a:	f7fd fa43 	bl	8000ea4 <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a22:	f7fd fa3f 	bl	8000ea4 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e1a8      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a34:	4b2b      	ldr	r3, [pc, #172]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0f0      	beq.n	8003a22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a40:	4b28      	ldr	r3, [pc, #160]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4925      	ldr	r1, [pc, #148]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	600b      	str	r3, [r1, #0]
 8003a54:	e015      	b.n	8003a82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a56:	4b24      	ldr	r3, [pc, #144]	; (8003ae8 <HAL_RCC_OscConfig+0x244>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fd fa22 	bl	8000ea4 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a64:	f7fd fa1e 	bl	8000ea4 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e187      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a76:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d036      	beq.n	8003afc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d016      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a96:	4b15      	ldr	r3, [pc, #84]	; (8003aec <HAL_RCC_OscConfig+0x248>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9c:	f7fd fa02 	bl	8000ea4 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aa4:	f7fd f9fe 	bl	8000ea4 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e167      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x200>
 8003ac2:	e01b      	b.n	8003afc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ac4:	4b09      	ldr	r3, [pc, #36]	; (8003aec <HAL_RCC_OscConfig+0x248>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aca:	f7fd f9eb 	bl	8000ea4 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad0:	e00e      	b.n	8003af0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ad2:	f7fd f9e7 	bl	8000ea4 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d907      	bls.n	8003af0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e150      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	42470000 	.word	0x42470000
 8003aec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af0:	4b88      	ldr	r3, [pc, #544]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1ea      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 8097 	beq.w	8003c38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b0e:	4b81      	ldr	r3, [pc, #516]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10f      	bne.n	8003b3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	4b7d      	ldr	r3, [pc, #500]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	4a7c      	ldr	r2, [pc, #496]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b28:	6413      	str	r3, [r2, #64]	; 0x40
 8003b2a:	4b7a      	ldr	r3, [pc, #488]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b32:	60bb      	str	r3, [r7, #8]
 8003b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b36:	2301      	movs	r3, #1
 8003b38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3a:	4b77      	ldr	r3, [pc, #476]	; (8003d18 <HAL_RCC_OscConfig+0x474>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d118      	bne.n	8003b78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b46:	4b74      	ldr	r3, [pc, #464]	; (8003d18 <HAL_RCC_OscConfig+0x474>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a73      	ldr	r2, [pc, #460]	; (8003d18 <HAL_RCC_OscConfig+0x474>)
 8003b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b52:	f7fd f9a7 	bl	8000ea4 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b5a:	f7fd f9a3 	bl	8000ea4 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e10c      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6c:	4b6a      	ldr	r3, [pc, #424]	; (8003d18 <HAL_RCC_OscConfig+0x474>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0f0      	beq.n	8003b5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d106      	bne.n	8003b8e <HAL_RCC_OscConfig+0x2ea>
 8003b80:	4b64      	ldr	r3, [pc, #400]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b84:	4a63      	ldr	r2, [pc, #396]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b8c:	e01c      	b.n	8003bc8 <HAL_RCC_OscConfig+0x324>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b05      	cmp	r3, #5
 8003b94:	d10c      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x30c>
 8003b96:	4b5f      	ldr	r3, [pc, #380]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9a:	4a5e      	ldr	r2, [pc, #376]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003b9c:	f043 0304 	orr.w	r3, r3, #4
 8003ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba2:	4b5c      	ldr	r3, [pc, #368]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba6:	4a5b      	ldr	r2, [pc, #364]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	6713      	str	r3, [r2, #112]	; 0x70
 8003bae:	e00b      	b.n	8003bc8 <HAL_RCC_OscConfig+0x324>
 8003bb0:	4b58      	ldr	r3, [pc, #352]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb4:	4a57      	ldr	r2, [pc, #348]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003bb6:	f023 0301 	bic.w	r3, r3, #1
 8003bba:	6713      	str	r3, [r2, #112]	; 0x70
 8003bbc:	4b55      	ldr	r3, [pc, #340]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc0:	4a54      	ldr	r2, [pc, #336]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003bc2:	f023 0304 	bic.w	r3, r3, #4
 8003bc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d015      	beq.n	8003bfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd0:	f7fd f968 	bl	8000ea4 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd6:	e00a      	b.n	8003bee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bd8:	f7fd f964 	bl	8000ea4 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e0cb      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bee:	4b49      	ldr	r3, [pc, #292]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0ee      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x334>
 8003bfa:	e014      	b.n	8003c26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bfc:	f7fd f952 	bl	8000ea4 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c02:	e00a      	b.n	8003c1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c04:	f7fd f94e 	bl	8000ea4 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e0b5      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c1a:	4b3e      	ldr	r3, [pc, #248]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1ee      	bne.n	8003c04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c26:	7dfb      	ldrb	r3, [r7, #23]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d105      	bne.n	8003c38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c2c:	4b39      	ldr	r3, [pc, #228]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	4a38      	ldr	r2, [pc, #224]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003c32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 80a1 	beq.w	8003d84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c42:	4b34      	ldr	r3, [pc, #208]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d05c      	beq.n	8003d08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d141      	bne.n	8003cda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c56:	4b31      	ldr	r3, [pc, #196]	; (8003d1c <HAL_RCC_OscConfig+0x478>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7fd f922 	bl	8000ea4 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c64:	f7fd f91e 	bl	8000ea4 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e087      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c76:	4b27      	ldr	r3, [pc, #156]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69da      	ldr	r2, [r3, #28]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	019b      	lsls	r3, r3, #6
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	085b      	lsrs	r3, r3, #1
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	041b      	lsls	r3, r3, #16
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	061b      	lsls	r3, r3, #24
 8003ca6:	491b      	ldr	r1, [pc, #108]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cac:	4b1b      	ldr	r3, [pc, #108]	; (8003d1c <HAL_RCC_OscConfig+0x478>)
 8003cae:	2201      	movs	r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb2:	f7fd f8f7 	bl	8000ea4 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cba:	f7fd f8f3 	bl	8000ea4 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e05c      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ccc:	4b11      	ldr	r3, [pc, #68]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0f0      	beq.n	8003cba <HAL_RCC_OscConfig+0x416>
 8003cd8:	e054      	b.n	8003d84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cda:	4b10      	ldr	r3, [pc, #64]	; (8003d1c <HAL_RCC_OscConfig+0x478>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce0:	f7fd f8e0 	bl	8000ea4 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce8:	f7fd f8dc 	bl	8000ea4 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e045      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfa:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x444>
 8003d06:	e03d      	b.n	8003d84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d107      	bne.n	8003d20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e038      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
 8003d14:	40023800 	.word	0x40023800
 8003d18:	40007000 	.word	0x40007000
 8003d1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d20:	4b1b      	ldr	r3, [pc, #108]	; (8003d90 <HAL_RCC_OscConfig+0x4ec>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d028      	beq.n	8003d80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d121      	bne.n	8003d80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d11a      	bne.n	8003d80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d50:	4013      	ands	r3, r2
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d111      	bne.n	8003d80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d66:	085b      	lsrs	r3, r3, #1
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d107      	bne.n	8003d80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40023800 	.word	0x40023800

08003d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e0cc      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003da8:	4b68      	ldr	r3, [pc, #416]	; (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d90c      	bls.n	8003dd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db6:	4b65      	ldr	r3, [pc, #404]	; (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbe:	4b63      	ldr	r3, [pc, #396]	; (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0b8      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d020      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003de8:	4b59      	ldr	r3, [pc, #356]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	4a58      	ldr	r2, [pc, #352]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003df2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e00:	4b53      	ldr	r3, [pc, #332]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	4a52      	ldr	r2, [pc, #328]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e0c:	4b50      	ldr	r3, [pc, #320]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	494d      	ldr	r1, [pc, #308]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d044      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d107      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e32:	4b47      	ldr	r3, [pc, #284]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d119      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e07f      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d003      	beq.n	8003e52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d107      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e52:	4b3f      	ldr	r3, [pc, #252]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d109      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e06f      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e62:	4b3b      	ldr	r3, [pc, #236]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e067      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e72:	4b37      	ldr	r3, [pc, #220]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f023 0203 	bic.w	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	4934      	ldr	r1, [pc, #208]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e84:	f7fd f80e 	bl	8000ea4 <HAL_GetTick>
 8003e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8a:	e00a      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e8c:	f7fd f80a 	bl	8000ea4 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e04f      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea2:	4b2b      	ldr	r3, [pc, #172]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 020c 	and.w	r2, r3, #12
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d1eb      	bne.n	8003e8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003eb4:	4b25      	ldr	r3, [pc, #148]	; (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d20c      	bcs.n	8003edc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec2:	4b22      	ldr	r3, [pc, #136]	; (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eca:	4b20      	ldr	r3, [pc, #128]	; (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e032      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d008      	beq.n	8003efa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ee8:	4b19      	ldr	r3, [pc, #100]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4916      	ldr	r1, [pc, #88]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f06:	4b12      	ldr	r3, [pc, #72]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	490e      	ldr	r1, [pc, #56]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f1a:	f000 f821 	bl	8003f60 <HAL_RCC_GetSysClockFreq>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	091b      	lsrs	r3, r3, #4
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	490a      	ldr	r1, [pc, #40]	; (8003f54 <HAL_RCC_ClockConfig+0x1c0>)
 8003f2c:	5ccb      	ldrb	r3, [r1, r3]
 8003f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f32:	4a09      	ldr	r2, [pc, #36]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f36:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <HAL_RCC_ClockConfig+0x1c8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fc ff6e 	bl	8000e1c <HAL_InitTick>

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40023c00 	.word	0x40023c00
 8003f50:	40023800 	.word	0x40023800
 8003f54:	08008568 	.word	0x08008568
 8003f58:	20000000 	.word	0x20000000
 8003f5c:	20000004 	.word	0x20000004

08003f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f64:	b094      	sub	sp, #80	; 0x50
 8003f66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f70:	2300      	movs	r3, #0
 8003f72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f78:	4b79      	ldr	r3, [pc, #484]	; (8004160 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 030c 	and.w	r3, r3, #12
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d00d      	beq.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x40>
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	f200 80e1 	bhi.w	800414c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <HAL_RCC_GetSysClockFreq+0x34>
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d003      	beq.n	8003f9a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f92:	e0db      	b.n	800414c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f94:	4b73      	ldr	r3, [pc, #460]	; (8004164 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f98:	e0db      	b.n	8004152 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f9a:	4b73      	ldr	r3, [pc, #460]	; (8004168 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f9e:	e0d8      	b.n	8004152 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fa0:	4b6f      	ldr	r3, [pc, #444]	; (8004160 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fa8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003faa:	4b6d      	ldr	r3, [pc, #436]	; (8004160 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d063      	beq.n	800407e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fb6:	4b6a      	ldr	r3, [pc, #424]	; (8004160 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	099b      	lsrs	r3, r3, #6
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc8:	633b      	str	r3, [r7, #48]	; 0x30
 8003fca:	2300      	movs	r3, #0
 8003fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8003fce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003fd2:	4622      	mov	r2, r4
 8003fd4:	462b      	mov	r3, r5
 8003fd6:	f04f 0000 	mov.w	r0, #0
 8003fda:	f04f 0100 	mov.w	r1, #0
 8003fde:	0159      	lsls	r1, r3, #5
 8003fe0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fe4:	0150      	lsls	r0, r2, #5
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4621      	mov	r1, r4
 8003fec:	1a51      	subs	r1, r2, r1
 8003fee:	6139      	str	r1, [r7, #16]
 8003ff0:	4629      	mov	r1, r5
 8003ff2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004004:	4659      	mov	r1, fp
 8004006:	018b      	lsls	r3, r1, #6
 8004008:	4651      	mov	r1, sl
 800400a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800400e:	4651      	mov	r1, sl
 8004010:	018a      	lsls	r2, r1, #6
 8004012:	4651      	mov	r1, sl
 8004014:	ebb2 0801 	subs.w	r8, r2, r1
 8004018:	4659      	mov	r1, fp
 800401a:	eb63 0901 	sbc.w	r9, r3, r1
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800402a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800402e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004032:	4690      	mov	r8, r2
 8004034:	4699      	mov	r9, r3
 8004036:	4623      	mov	r3, r4
 8004038:	eb18 0303 	adds.w	r3, r8, r3
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	462b      	mov	r3, r5
 8004040:	eb49 0303 	adc.w	r3, r9, r3
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004052:	4629      	mov	r1, r5
 8004054:	024b      	lsls	r3, r1, #9
 8004056:	4621      	mov	r1, r4
 8004058:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800405c:	4621      	mov	r1, r4
 800405e:	024a      	lsls	r2, r1, #9
 8004060:	4610      	mov	r0, r2
 8004062:	4619      	mov	r1, r3
 8004064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004066:	2200      	movs	r2, #0
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28
 800406a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800406c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004070:	f7fc f8b2 	bl	80001d8 <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4613      	mov	r3, r2
 800407a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800407c:	e058      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800407e:	4b38      	ldr	r3, [pc, #224]	; (8004160 <HAL_RCC_GetSysClockFreq+0x200>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	099b      	lsrs	r3, r3, #6
 8004084:	2200      	movs	r2, #0
 8004086:	4618      	mov	r0, r3
 8004088:	4611      	mov	r1, r2
 800408a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800408e:	623b      	str	r3, [r7, #32]
 8004090:	2300      	movs	r3, #0
 8004092:	627b      	str	r3, [r7, #36]	; 0x24
 8004094:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004098:	4642      	mov	r2, r8
 800409a:	464b      	mov	r3, r9
 800409c:	f04f 0000 	mov.w	r0, #0
 80040a0:	f04f 0100 	mov.w	r1, #0
 80040a4:	0159      	lsls	r1, r3, #5
 80040a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040aa:	0150      	lsls	r0, r2, #5
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4641      	mov	r1, r8
 80040b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80040b6:	4649      	mov	r1, r9
 80040b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040d0:	ebb2 040a 	subs.w	r4, r2, sl
 80040d4:	eb63 050b 	sbc.w	r5, r3, fp
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	00eb      	lsls	r3, r5, #3
 80040e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040e6:	00e2      	lsls	r2, r4, #3
 80040e8:	4614      	mov	r4, r2
 80040ea:	461d      	mov	r5, r3
 80040ec:	4643      	mov	r3, r8
 80040ee:	18e3      	adds	r3, r4, r3
 80040f0:	603b      	str	r3, [r7, #0]
 80040f2:	464b      	mov	r3, r9
 80040f4:	eb45 0303 	adc.w	r3, r5, r3
 80040f8:	607b      	str	r3, [r7, #4]
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004106:	4629      	mov	r1, r5
 8004108:	028b      	lsls	r3, r1, #10
 800410a:	4621      	mov	r1, r4
 800410c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004110:	4621      	mov	r1, r4
 8004112:	028a      	lsls	r2, r1, #10
 8004114:	4610      	mov	r0, r2
 8004116:	4619      	mov	r1, r3
 8004118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800411a:	2200      	movs	r2, #0
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	61fa      	str	r2, [r7, #28]
 8004120:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004124:	f7fc f858 	bl	80001d8 <__aeabi_uldivmod>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4613      	mov	r3, r2
 800412e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <HAL_RCC_GetSysClockFreq+0x200>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	0c1b      	lsrs	r3, r3, #16
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	3301      	adds	r3, #1
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004140:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004144:	fbb2 f3f3 	udiv	r3, r2, r3
 8004148:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800414a:	e002      	b.n	8004152 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800414c:	4b05      	ldr	r3, [pc, #20]	; (8004164 <HAL_RCC_GetSysClockFreq+0x204>)
 800414e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004150:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004154:	4618      	mov	r0, r3
 8004156:	3750      	adds	r7, #80	; 0x50
 8004158:	46bd      	mov	sp, r7
 800415a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800415e:	bf00      	nop
 8004160:	40023800 	.word	0x40023800
 8004164:	00f42400 	.word	0x00f42400
 8004168:	007a1200 	.word	0x007a1200

0800416c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004170:	4b03      	ldr	r3, [pc, #12]	; (8004180 <HAL_RCC_GetHCLKFreq+0x14>)
 8004172:	681b      	ldr	r3, [r3, #0]
}
 8004174:	4618      	mov	r0, r3
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	20000000 	.word	0x20000000

08004184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004188:	f7ff fff0 	bl	800416c <HAL_RCC_GetHCLKFreq>
 800418c:	4602      	mov	r2, r0
 800418e:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	0a9b      	lsrs	r3, r3, #10
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	4903      	ldr	r1, [pc, #12]	; (80041a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800419a:	5ccb      	ldrb	r3, [r1, r3]
 800419c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40023800 	.word	0x40023800
 80041a8:	08008578 	.word	0x08008578

080041ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041b0:	f7ff ffdc 	bl	800416c <HAL_RCC_GetHCLKFreq>
 80041b4:	4602      	mov	r2, r0
 80041b6:	4b05      	ldr	r3, [pc, #20]	; (80041cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	0b5b      	lsrs	r3, r3, #13
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	4903      	ldr	r1, [pc, #12]	; (80041d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041c2:	5ccb      	ldrb	r3, [r1, r3]
 80041c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40023800 	.word	0x40023800
 80041d0:	08008578 	.word	0x08008578

080041d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d105      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d035      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041fc:	4b62      	ldr	r3, [pc, #392]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004202:	f7fc fe4f 	bl	8000ea4 <HAL_GetTick>
 8004206:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004208:	e008      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800420a:	f7fc fe4b 	bl	8000ea4 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e0b0      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800421c:	4b5b      	ldr	r3, [pc, #364]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1f0      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	019a      	lsls	r2, r3, #6
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	071b      	lsls	r3, r3, #28
 8004234:	4955      	ldr	r1, [pc, #340]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800423c:	4b52      	ldr	r3, [pc, #328]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800423e:	2201      	movs	r2, #1
 8004240:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004242:	f7fc fe2f 	bl	8000ea4 <HAL_GetTick>
 8004246:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004248:	e008      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800424a:	f7fc fe2b 	bl	8000ea4 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e090      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800425c:	4b4b      	ldr	r3, [pc, #300]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0f0      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 8083 	beq.w	800437c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	4b44      	ldr	r3, [pc, #272]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	4a43      	ldr	r2, [pc, #268]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004284:	6413      	str	r3, [r2, #64]	; 0x40
 8004286:	4b41      	ldr	r3, [pc, #260]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004292:	4b3f      	ldr	r3, [pc, #252]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a3e      	ldr	r2, [pc, #248]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800429c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800429e:	f7fc fe01 	bl	8000ea4 <HAL_GetTick>
 80042a2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042a4:	e008      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80042a6:	f7fc fdfd 	bl	8000ea4 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e062      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042b8:	4b35      	ldr	r3, [pc, #212]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0f0      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042c4:	4b31      	ldr	r3, [pc, #196]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042cc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d02f      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d028      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042e2:	4b2a      	ldr	r3, [pc, #168]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042ec:	4b29      	ldr	r3, [pc, #164]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042ee:	2201      	movs	r2, #1
 80042f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042f2:	4b28      	ldr	r3, [pc, #160]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80042f8:	4a24      	ldr	r2, [pc, #144]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042fe:	4b23      	ldr	r3, [pc, #140]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b01      	cmp	r3, #1
 8004308:	d114      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800430a:	f7fc fdcb 	bl	8000ea4 <HAL_GetTick>
 800430e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004310:	e00a      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004312:	f7fc fdc7 	bl	8000ea4 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004320:	4293      	cmp	r3, r2
 8004322:	d901      	bls.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e02a      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004328:	4b18      	ldr	r3, [pc, #96]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800432a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0ee      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004340:	d10d      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004342:	4b12      	ldr	r3, [pc, #72]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004356:	490d      	ldr	r1, [pc, #52]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004358:	4313      	orrs	r3, r2
 800435a:	608b      	str	r3, [r1, #8]
 800435c:	e005      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800435e:	4b0b      	ldr	r3, [pc, #44]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	4a0a      	ldr	r2, [pc, #40]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004364:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004368:	6093      	str	r3, [r2, #8]
 800436a:	4b08      	ldr	r3, [pc, #32]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800436c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004376:	4905      	ldr	r1, [pc, #20]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004378:	4313      	orrs	r3, r2
 800437a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	42470068 	.word	0x42470068
 800438c:	40023800 	.word	0x40023800
 8004390:	40007000 	.word	0x40007000
 8004394:	42470e40 	.word	0x42470e40

08004398 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d13e      	bne.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80043b6:	4b23      	ldr	r3, [pc, #140]	; (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d005      	beq.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d12f      	bne.n	800442c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80043cc:	4b1e      	ldr	r3, [pc, #120]	; (8004448 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043ce:	617b      	str	r3, [r7, #20]
          break;
 80043d0:	e02f      	b.n	8004432 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043d2:	4b1c      	ldr	r3, [pc, #112]	; (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043de:	d108      	bne.n	80043f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043e0:	4b18      	ldr	r3, [pc, #96]	; (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043e8:	4a18      	ldr	r2, [pc, #96]	; (800444c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80043ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ee:	613b      	str	r3, [r7, #16]
 80043f0:	e007      	b.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043f2:	4b14      	ldr	r3, [pc, #80]	; (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043fa:	4a15      	ldr	r2, [pc, #84]	; (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80043fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004400:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004402:	4b10      	ldr	r3, [pc, #64]	; (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004408:	099b      	lsrs	r3, r3, #6
 800440a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	fb02 f303 	mul.w	r3, r2, r3
 8004414:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004416:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800441c:	0f1b      	lsrs	r3, r3, #28
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	fbb2 f3f3 	udiv	r3, r2, r3
 8004428:	617b      	str	r3, [r7, #20]
          break;
 800442a:	e002      	b.n	8004432 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	617b      	str	r3, [r7, #20]
          break;
 8004430:	bf00      	nop
        }
      }
      break;
 8004432:	bf00      	nop
    }
  }
  return frequency;
 8004434:	697b      	ldr	r3, [r7, #20]
}
 8004436:	4618      	mov	r0, r3
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40023800 	.word	0x40023800
 8004448:	00bb8000 	.word	0x00bb8000
 800444c:	007a1200 	.word	0x007a1200
 8004450:	00f42400 	.word	0x00f42400

08004454 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e07b      	b.n	800455e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	2b00      	cmp	r3, #0
 800446c:	d108      	bne.n	8004480 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004476:	d009      	beq.n	800448c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	61da      	str	r2, [r3, #28]
 800447e:	e005      	b.n	800448c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d106      	bne.n	80044ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7fc fb60 	bl	8000b6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044fc:	431a      	orrs	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004510:	ea42 0103 	orr.w	r1, r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004518:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	0c1b      	lsrs	r3, r3, #16
 800452a:	f003 0104 	and.w	r1, r3, #4
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	f003 0210 	and.w	r2, r3, #16
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800454c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b082      	sub	sp, #8
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e03f      	b.n	80045f8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d106      	bne.n	8004592 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7fc fb35 	bl	8000bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2224      	movs	r2, #36	; 0x24
 8004596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045a8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f928 	bl	8004800 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691a      	ldr	r2, [r3, #16]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695a      	ldr	r2, [r3, #20]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045ce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045de:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08a      	sub	sp, #40	; 0x28
 8004604:	af02      	add	r7, sp, #8
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	603b      	str	r3, [r7, #0]
 800460c:	4613      	mov	r3, r2
 800460e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b20      	cmp	r3, #32
 800461e:	d17c      	bne.n	800471a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <HAL_UART_Transmit+0x2c>
 8004626:	88fb      	ldrh	r3, [r7, #6]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e075      	b.n	800471c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_UART_Transmit+0x3e>
 800463a:	2302      	movs	r3, #2
 800463c:	e06e      	b.n	800471c <HAL_UART_Transmit+0x11c>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2221      	movs	r2, #33	; 0x21
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004654:	f7fc fc26 	bl	8000ea4 <HAL_GetTick>
 8004658:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	88fa      	ldrh	r2, [r7, #6]
 800465e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	88fa      	ldrh	r2, [r7, #6]
 8004664:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466e:	d108      	bne.n	8004682 <HAL_UART_Transmit+0x82>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d104      	bne.n	8004682 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004678:	2300      	movs	r3, #0
 800467a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	61bb      	str	r3, [r7, #24]
 8004680:	e003      	b.n	800468a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004686:	2300      	movs	r3, #0
 8004688:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004692:	e02a      	b.n	80046ea <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	2200      	movs	r2, #0
 800469c:	2180      	movs	r1, #128	; 0x80
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f840 	bl	8004724 <UART_WaitOnFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e036      	b.n	800471c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10b      	bne.n	80046cc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046c2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	3302      	adds	r3, #2
 80046c8:	61bb      	str	r3, [r7, #24]
 80046ca:	e007      	b.n	80046dc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	781a      	ldrb	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	3301      	adds	r3, #1
 80046da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1cf      	bne.n	8004694 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2200      	movs	r2, #0
 80046fc:	2140      	movs	r1, #64	; 0x40
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 f810 	bl	8004724 <UART_WaitOnFlagUntilTimeout>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e006      	b.n	800471c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	e000      	b.n	800471c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800471a:	2302      	movs	r3, #2
  }
}
 800471c:	4618      	mov	r0, r3
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b090      	sub	sp, #64	; 0x40
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	603b      	str	r3, [r7, #0]
 8004730:	4613      	mov	r3, r2
 8004732:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004734:	e050      	b.n	80047d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004738:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800473c:	d04c      	beq.n	80047d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800473e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004740:	2b00      	cmp	r3, #0
 8004742:	d007      	beq.n	8004754 <UART_WaitOnFlagUntilTimeout+0x30>
 8004744:	f7fc fbae 	bl	8000ea4 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004750:	429a      	cmp	r2, r3
 8004752:	d241      	bcs.n	80047d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	330c      	adds	r3, #12
 800475a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475e:	e853 3f00 	ldrex	r3, [r3]
 8004762:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800476a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	330c      	adds	r3, #12
 8004772:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004774:	637a      	str	r2, [r7, #52]	; 0x34
 8004776:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004778:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800477a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800477c:	e841 2300 	strex	r3, r2, [r1]
 8004780:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1e5      	bne.n	8004754 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3314      	adds	r3, #20
 800478e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	e853 3f00 	ldrex	r3, [r3]
 8004796:	613b      	str	r3, [r7, #16]
   return(result);
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	f023 0301 	bic.w	r3, r3, #1
 800479e:	63bb      	str	r3, [r7, #56]	; 0x38
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3314      	adds	r3, #20
 80047a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047a8:	623a      	str	r2, [r7, #32]
 80047aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ac:	69f9      	ldr	r1, [r7, #28]
 80047ae:	6a3a      	ldr	r2, [r7, #32]
 80047b0:	e841 2300 	strex	r3, r2, [r1]
 80047b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e5      	bne.n	8004788 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e00f      	b.n	80047f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	4013      	ands	r3, r2
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	bf0c      	ite	eq
 80047e8:	2301      	moveq	r3, #1
 80047ea:	2300      	movne	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	461a      	mov	r2, r3
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d09f      	beq.n	8004736 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3740      	adds	r7, #64	; 0x40
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004804:	b0c0      	sub	sp, #256	; 0x100
 8004806:	af00      	add	r7, sp, #0
 8004808:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800480c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481c:	68d9      	ldr	r1, [r3, #12]
 800481e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	ea40 0301 	orr.w	r3, r0, r1
 8004828:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800482a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	431a      	orrs	r2, r3
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	431a      	orrs	r2, r3
 8004840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004858:	f021 010c 	bic.w	r1, r1, #12
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004866:	430b      	orrs	r3, r1
 8004868:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800486a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487a:	6999      	ldr	r1, [r3, #24]
 800487c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	ea40 0301 	orr.w	r3, r0, r1
 8004886:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	4b8f      	ldr	r3, [pc, #572]	; (8004acc <UART_SetConfig+0x2cc>)
 8004890:	429a      	cmp	r2, r3
 8004892:	d005      	beq.n	80048a0 <UART_SetConfig+0xa0>
 8004894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	4b8d      	ldr	r3, [pc, #564]	; (8004ad0 <UART_SetConfig+0x2d0>)
 800489c:	429a      	cmp	r2, r3
 800489e:	d104      	bne.n	80048aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048a0:	f7ff fc84 	bl	80041ac <HAL_RCC_GetPCLK2Freq>
 80048a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048a8:	e003      	b.n	80048b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048aa:	f7ff fc6b 	bl	8004184 <HAL_RCC_GetPCLK1Freq>
 80048ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048bc:	f040 810c 	bne.w	8004ad8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048c4:	2200      	movs	r2, #0
 80048c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80048ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80048d2:	4622      	mov	r2, r4
 80048d4:	462b      	mov	r3, r5
 80048d6:	1891      	adds	r1, r2, r2
 80048d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80048da:	415b      	adcs	r3, r3
 80048dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048e2:	4621      	mov	r1, r4
 80048e4:	eb12 0801 	adds.w	r8, r2, r1
 80048e8:	4629      	mov	r1, r5
 80048ea:	eb43 0901 	adc.w	r9, r3, r1
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004902:	4690      	mov	r8, r2
 8004904:	4699      	mov	r9, r3
 8004906:	4623      	mov	r3, r4
 8004908:	eb18 0303 	adds.w	r3, r8, r3
 800490c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004910:	462b      	mov	r3, r5
 8004912:	eb49 0303 	adc.w	r3, r9, r3
 8004916:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800491a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004926:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800492a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800492e:	460b      	mov	r3, r1
 8004930:	18db      	adds	r3, r3, r3
 8004932:	653b      	str	r3, [r7, #80]	; 0x50
 8004934:	4613      	mov	r3, r2
 8004936:	eb42 0303 	adc.w	r3, r2, r3
 800493a:	657b      	str	r3, [r7, #84]	; 0x54
 800493c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004940:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004944:	f7fb fc48 	bl	80001d8 <__aeabi_uldivmod>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4b61      	ldr	r3, [pc, #388]	; (8004ad4 <UART_SetConfig+0x2d4>)
 800494e:	fba3 2302 	umull	r2, r3, r3, r2
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	011c      	lsls	r4, r3, #4
 8004956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800495a:	2200      	movs	r2, #0
 800495c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004960:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004964:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004968:	4642      	mov	r2, r8
 800496a:	464b      	mov	r3, r9
 800496c:	1891      	adds	r1, r2, r2
 800496e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004970:	415b      	adcs	r3, r3
 8004972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004974:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004978:	4641      	mov	r1, r8
 800497a:	eb12 0a01 	adds.w	sl, r2, r1
 800497e:	4649      	mov	r1, r9
 8004980:	eb43 0b01 	adc.w	fp, r3, r1
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004990:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004994:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004998:	4692      	mov	sl, r2
 800499a:	469b      	mov	fp, r3
 800499c:	4643      	mov	r3, r8
 800499e:	eb1a 0303 	adds.w	r3, sl, r3
 80049a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049a6:	464b      	mov	r3, r9
 80049a8:	eb4b 0303 	adc.w	r3, fp, r3
 80049ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80049c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049c4:	460b      	mov	r3, r1
 80049c6:	18db      	adds	r3, r3, r3
 80049c8:	643b      	str	r3, [r7, #64]	; 0x40
 80049ca:	4613      	mov	r3, r2
 80049cc:	eb42 0303 	adc.w	r3, r2, r3
 80049d0:	647b      	str	r3, [r7, #68]	; 0x44
 80049d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80049da:	f7fb fbfd 	bl	80001d8 <__aeabi_uldivmod>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4611      	mov	r1, r2
 80049e4:	4b3b      	ldr	r3, [pc, #236]	; (8004ad4 <UART_SetConfig+0x2d4>)
 80049e6:	fba3 2301 	umull	r2, r3, r3, r1
 80049ea:	095b      	lsrs	r3, r3, #5
 80049ec:	2264      	movs	r2, #100	; 0x64
 80049ee:	fb02 f303 	mul.w	r3, r2, r3
 80049f2:	1acb      	subs	r3, r1, r3
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049fa:	4b36      	ldr	r3, [pc, #216]	; (8004ad4 <UART_SetConfig+0x2d4>)
 80049fc:	fba3 2302 	umull	r2, r3, r3, r2
 8004a00:	095b      	lsrs	r3, r3, #5
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a08:	441c      	add	r4, r3
 8004a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a1c:	4642      	mov	r2, r8
 8004a1e:	464b      	mov	r3, r9
 8004a20:	1891      	adds	r1, r2, r2
 8004a22:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a24:	415b      	adcs	r3, r3
 8004a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a2c:	4641      	mov	r1, r8
 8004a2e:	1851      	adds	r1, r2, r1
 8004a30:	6339      	str	r1, [r7, #48]	; 0x30
 8004a32:	4649      	mov	r1, r9
 8004a34:	414b      	adcs	r3, r1
 8004a36:	637b      	str	r3, [r7, #52]	; 0x34
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a44:	4659      	mov	r1, fp
 8004a46:	00cb      	lsls	r3, r1, #3
 8004a48:	4651      	mov	r1, sl
 8004a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a4e:	4651      	mov	r1, sl
 8004a50:	00ca      	lsls	r2, r1, #3
 8004a52:	4610      	mov	r0, r2
 8004a54:	4619      	mov	r1, r3
 8004a56:	4603      	mov	r3, r0
 8004a58:	4642      	mov	r2, r8
 8004a5a:	189b      	adds	r3, r3, r2
 8004a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a60:	464b      	mov	r3, r9
 8004a62:	460a      	mov	r2, r1
 8004a64:	eb42 0303 	adc.w	r3, r2, r3
 8004a68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a80:	460b      	mov	r3, r1
 8004a82:	18db      	adds	r3, r3, r3
 8004a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a86:	4613      	mov	r3, r2
 8004a88:	eb42 0303 	adc.w	r3, r2, r3
 8004a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a96:	f7fb fb9f 	bl	80001d8 <__aeabi_uldivmod>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ad4 <UART_SetConfig+0x2d4>)
 8004aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8004aa4:	095b      	lsrs	r3, r3, #5
 8004aa6:	2164      	movs	r1, #100	; 0x64
 8004aa8:	fb01 f303 	mul.w	r3, r1, r3
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	3332      	adds	r3, #50	; 0x32
 8004ab2:	4a08      	ldr	r2, [pc, #32]	; (8004ad4 <UART_SetConfig+0x2d4>)
 8004ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab8:	095b      	lsrs	r3, r3, #5
 8004aba:	f003 0207 	and.w	r2, r3, #7
 8004abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4422      	add	r2, r4
 8004ac6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ac8:	e106      	b.n	8004cd8 <UART_SetConfig+0x4d8>
 8004aca:	bf00      	nop
 8004acc:	40011000 	.word	0x40011000
 8004ad0:	40011400 	.word	0x40011400
 8004ad4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004adc:	2200      	movs	r2, #0
 8004ade:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ae2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ae6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004aea:	4642      	mov	r2, r8
 8004aec:	464b      	mov	r3, r9
 8004aee:	1891      	adds	r1, r2, r2
 8004af0:	6239      	str	r1, [r7, #32]
 8004af2:	415b      	adcs	r3, r3
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24
 8004af6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004afa:	4641      	mov	r1, r8
 8004afc:	1854      	adds	r4, r2, r1
 8004afe:	4649      	mov	r1, r9
 8004b00:	eb43 0501 	adc.w	r5, r3, r1
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	00eb      	lsls	r3, r5, #3
 8004b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b12:	00e2      	lsls	r2, r4, #3
 8004b14:	4614      	mov	r4, r2
 8004b16:	461d      	mov	r5, r3
 8004b18:	4643      	mov	r3, r8
 8004b1a:	18e3      	adds	r3, r4, r3
 8004b1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b20:	464b      	mov	r3, r9
 8004b22:	eb45 0303 	adc.w	r3, r5, r3
 8004b26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b46:	4629      	mov	r1, r5
 8004b48:	008b      	lsls	r3, r1, #2
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b50:	4621      	mov	r1, r4
 8004b52:	008a      	lsls	r2, r1, #2
 8004b54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b58:	f7fb fb3e 	bl	80001d8 <__aeabi_uldivmod>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4b60      	ldr	r3, [pc, #384]	; (8004ce4 <UART_SetConfig+0x4e4>)
 8004b62:	fba3 2302 	umull	r2, r3, r3, r2
 8004b66:	095b      	lsrs	r3, r3, #5
 8004b68:	011c      	lsls	r4, r3, #4
 8004b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	464b      	mov	r3, r9
 8004b80:	1891      	adds	r1, r2, r2
 8004b82:	61b9      	str	r1, [r7, #24]
 8004b84:	415b      	adcs	r3, r3
 8004b86:	61fb      	str	r3, [r7, #28]
 8004b88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b8c:	4641      	mov	r1, r8
 8004b8e:	1851      	adds	r1, r2, r1
 8004b90:	6139      	str	r1, [r7, #16]
 8004b92:	4649      	mov	r1, r9
 8004b94:	414b      	adcs	r3, r1
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ba4:	4659      	mov	r1, fp
 8004ba6:	00cb      	lsls	r3, r1, #3
 8004ba8:	4651      	mov	r1, sl
 8004baa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bae:	4651      	mov	r1, sl
 8004bb0:	00ca      	lsls	r2, r1, #3
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	4642      	mov	r2, r8
 8004bba:	189b      	adds	r3, r3, r2
 8004bbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bc0:	464b      	mov	r3, r9
 8004bc2:	460a      	mov	r2, r1
 8004bc4:	eb42 0303 	adc.w	r3, r2, r3
 8004bc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004be4:	4649      	mov	r1, r9
 8004be6:	008b      	lsls	r3, r1, #2
 8004be8:	4641      	mov	r1, r8
 8004bea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bee:	4641      	mov	r1, r8
 8004bf0:	008a      	lsls	r2, r1, #2
 8004bf2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004bf6:	f7fb faef 	bl	80001d8 <__aeabi_uldivmod>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4611      	mov	r1, r2
 8004c00:	4b38      	ldr	r3, [pc, #224]	; (8004ce4 <UART_SetConfig+0x4e4>)
 8004c02:	fba3 2301 	umull	r2, r3, r3, r1
 8004c06:	095b      	lsrs	r3, r3, #5
 8004c08:	2264      	movs	r2, #100	; 0x64
 8004c0a:	fb02 f303 	mul.w	r3, r2, r3
 8004c0e:	1acb      	subs	r3, r1, r3
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	3332      	adds	r3, #50	; 0x32
 8004c14:	4a33      	ldr	r2, [pc, #204]	; (8004ce4 <UART_SetConfig+0x4e4>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c20:	441c      	add	r4, r3
 8004c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c26:	2200      	movs	r2, #0
 8004c28:	673b      	str	r3, [r7, #112]	; 0x70
 8004c2a:	677a      	str	r2, [r7, #116]	; 0x74
 8004c2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c30:	4642      	mov	r2, r8
 8004c32:	464b      	mov	r3, r9
 8004c34:	1891      	adds	r1, r2, r2
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	415b      	adcs	r3, r3
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c40:	4641      	mov	r1, r8
 8004c42:	1851      	adds	r1, r2, r1
 8004c44:	6039      	str	r1, [r7, #0]
 8004c46:	4649      	mov	r1, r9
 8004c48:	414b      	adcs	r3, r1
 8004c4a:	607b      	str	r3, [r7, #4]
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c58:	4659      	mov	r1, fp
 8004c5a:	00cb      	lsls	r3, r1, #3
 8004c5c:	4651      	mov	r1, sl
 8004c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c62:	4651      	mov	r1, sl
 8004c64:	00ca      	lsls	r2, r1, #3
 8004c66:	4610      	mov	r0, r2
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	4642      	mov	r2, r8
 8004c6e:	189b      	adds	r3, r3, r2
 8004c70:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c72:	464b      	mov	r3, r9
 8004c74:	460a      	mov	r2, r1
 8004c76:	eb42 0303 	adc.w	r3, r2, r3
 8004c7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	663b      	str	r3, [r7, #96]	; 0x60
 8004c86:	667a      	str	r2, [r7, #100]	; 0x64
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c94:	4649      	mov	r1, r9
 8004c96:	008b      	lsls	r3, r1, #2
 8004c98:	4641      	mov	r1, r8
 8004c9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c9e:	4641      	mov	r1, r8
 8004ca0:	008a      	lsls	r2, r1, #2
 8004ca2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ca6:	f7fb fa97 	bl	80001d8 <__aeabi_uldivmod>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <UART_SetConfig+0x4e4>)
 8004cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8004cb4:	095b      	lsrs	r3, r3, #5
 8004cb6:	2164      	movs	r1, #100	; 0x64
 8004cb8:	fb01 f303 	mul.w	r3, r1, r3
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	011b      	lsls	r3, r3, #4
 8004cc0:	3332      	adds	r3, #50	; 0x32
 8004cc2:	4a08      	ldr	r2, [pc, #32]	; (8004ce4 <UART_SetConfig+0x4e4>)
 8004cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc8:	095b      	lsrs	r3, r3, #5
 8004cca:	f003 020f 	and.w	r2, r3, #15
 8004cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4422      	add	r2, r4
 8004cd6:	609a      	str	r2, [r3, #8]
}
 8004cd8:	bf00      	nop
 8004cda:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ce4:	51eb851f 	.word	0x51eb851f

08004ce8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ce8:	b084      	sub	sp, #16
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	f107 001c 	add.w	r0, r7, #28
 8004cf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d122      	bne.n	8004d46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d105      	bne.n	8004d3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f9c0 	bl	80050c0 <USB_CoreReset>
 8004d40:	4603      	mov	r3, r0
 8004d42:	73fb      	strb	r3, [r7, #15]
 8004d44:	e01a      	b.n	8004d7c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f9b4 	bl	80050c0 <USB_CoreReset>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d106      	bne.n	8004d70 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	639a      	str	r2, [r3, #56]	; 0x38
 8004d6e:	e005      	b.n	8004d7c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d10b      	bne.n	8004d9a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f043 0206 	orr.w	r2, r3, #6
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f043 0220 	orr.w	r2, r3, #32
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004da6:	b004      	add	sp, #16
 8004da8:	4770      	bx	lr

08004daa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f043 0201 	orr.w	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f023 0201 	bic.w	r2, r3, #1
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b084      	sub	sp, #16
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	460b      	mov	r3, r1
 8004df8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d115      	bne.n	8004e3c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e1c:	2001      	movs	r0, #1
 8004e1e:	f7fc f84d 	bl	8000ebc <HAL_Delay>
      ms++;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	3301      	adds	r3, #1
 8004e26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f93a 	bl	80050a2 <USB_GetMode>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d01e      	beq.n	8004e72 <USB_SetCurrentMode+0x84>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b31      	cmp	r3, #49	; 0x31
 8004e38:	d9f0      	bls.n	8004e1c <USB_SetCurrentMode+0x2e>
 8004e3a:	e01a      	b.n	8004e72 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e3c:	78fb      	ldrb	r3, [r7, #3]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d115      	bne.n	8004e6e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e4e:	2001      	movs	r0, #1
 8004e50:	f7fc f834 	bl	8000ebc <HAL_Delay>
      ms++;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	3301      	adds	r3, #1
 8004e58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f921 	bl	80050a2 <USB_GetMode>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d005      	beq.n	8004e72 <USB_SetCurrentMode+0x84>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2b31      	cmp	r3, #49	; 0x31
 8004e6a:	d9f0      	bls.n	8004e4e <USB_SetCurrentMode+0x60>
 8004e6c:	e001      	b.n	8004e72 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e005      	b.n	8004e7e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b32      	cmp	r3, #50	; 0x32
 8004e76:	d101      	bne.n	8004e7c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e000      	b.n	8004e7e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4a13      	ldr	r2, [pc, #76]	; (8004eec <USB_FlushTxFifo+0x64>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d901      	bls.n	8004ea8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e01b      	b.n	8004ee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	daf2      	bge.n	8004e96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	019b      	lsls	r3, r3, #6
 8004eb8:	f043 0220 	orr.w	r2, r3, #32
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4a08      	ldr	r2, [pc, #32]	; (8004eec <USB_FlushTxFifo+0x64>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d901      	bls.n	8004ed2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e006      	b.n	8004ee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0320 	and.w	r3, r3, #32
 8004eda:	2b20      	cmp	r3, #32
 8004edc:	d0f0      	beq.n	8004ec0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	00030d40 	.word	0x00030d40

08004ef0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3301      	adds	r3, #1
 8004f00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	4a11      	ldr	r2, [pc, #68]	; (8004f4c <USB_FlushRxFifo+0x5c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d901      	bls.n	8004f0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e018      	b.n	8004f40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	daf2      	bge.n	8004efc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2210      	movs	r2, #16
 8004f1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3301      	adds	r3, #1
 8004f24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4a08      	ldr	r2, [pc, #32]	; (8004f4c <USB_FlushRxFifo+0x5c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d901      	bls.n	8004f32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e006      	b.n	8004f40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f003 0310 	and.w	r3, r3, #16
 8004f3a:	2b10      	cmp	r3, #16
 8004f3c:	d0f0      	beq.n	8004f20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	00030d40 	.word	0x00030d40

08004f50 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b089      	sub	sp, #36	; 0x24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	460b      	mov	r3, r1
 8004f60:	71fb      	strb	r3, [r7, #7]
 8004f62:	4613      	mov	r3, r2
 8004f64:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d123      	bne.n	8004fbe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f76:	88bb      	ldrh	r3, [r7, #4]
 8004f78:	3303      	adds	r3, #3
 8004f7a:	089b      	lsrs	r3, r3, #2
 8004f7c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61bb      	str	r3, [r7, #24]
 8004f82:	e018      	b.n	8004fb6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	031a      	lsls	r2, r3, #12
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f90:	461a      	mov	r2, r3
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	3301      	adds	r3, #1
 8004fae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	61bb      	str	r3, [r7, #24]
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d3e2      	bcc.n	8004f84 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3724      	adds	r7, #36	; 0x24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b08b      	sub	sp, #44	; 0x2c
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	089b      	lsrs	r3, r3, #2
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004fea:	88fb      	ldrh	r3, [r7, #6]
 8004fec:	f003 0303 	and.w	r3, r3, #3
 8004ff0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	623b      	str	r3, [r7, #32]
 8004ff6:	e014      	b.n	8005022 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	601a      	str	r2, [r3, #0]
    pDest++;
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	3301      	adds	r3, #1
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	3301      	adds	r3, #1
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	3301      	adds	r3, #1
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005018:	3301      	adds	r3, #1
 800501a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	3301      	adds	r3, #1
 8005020:	623b      	str	r3, [r7, #32]
 8005022:	6a3a      	ldr	r2, [r7, #32]
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	429a      	cmp	r2, r3
 8005028:	d3e6      	bcc.n	8004ff8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800502a:	8bfb      	ldrh	r3, [r7, #30]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01e      	beq.n	800506e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800503a:	461a      	mov	r2, r3
 800503c:	f107 0310 	add.w	r3, r7, #16
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	b2db      	uxtb	r3, r3
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	fa22 f303 	lsr.w	r3, r2, r3
 8005050:	b2da      	uxtb	r2, r3
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	701a      	strb	r2, [r3, #0]
      i++;
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	3301      	adds	r3, #1
 800505a:	623b      	str	r3, [r7, #32]
      pDest++;
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	3301      	adds	r3, #1
 8005060:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005062:	8bfb      	ldrh	r3, [r7, #30]
 8005064:	3b01      	subs	r3, #1
 8005066:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005068:	8bfb      	ldrh	r3, [r7, #30]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1ea      	bne.n	8005044 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005070:	4618      	mov	r0, r3
 8005072:	372c      	adds	r7, #44	; 0x2c
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4013      	ands	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005094:	68fb      	ldr	r3, [r7, #12]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	f003 0301 	and.w	r3, r3, #1
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
	...

080050c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	3301      	adds	r3, #1
 80050d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4a13      	ldr	r2, [pc, #76]	; (8005124 <USB_CoreReset+0x64>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d901      	bls.n	80050de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e01b      	b.n	8005116 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	daf2      	bge.n	80050cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	f043 0201 	orr.w	r2, r3, #1
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	3301      	adds	r3, #1
 80050fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4a09      	ldr	r2, [pc, #36]	; (8005124 <USB_CoreReset+0x64>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d901      	bls.n	8005108 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e006      	b.n	8005116 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b01      	cmp	r3, #1
 8005112:	d0f0      	beq.n	80050f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	00030d40 	.word	0x00030d40

08005128 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005128:	b084      	sub	sp, #16
 800512a:	b580      	push	{r7, lr}
 800512c:	b086      	sub	sp, #24
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005136:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005148:	461a      	mov	r2, r3
 800514a:	2300      	movs	r3, #0
 800514c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517a:	2b00      	cmp	r3, #0
 800517c:	d018      	beq.n	80051b0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800517e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005180:	2b01      	cmp	r3, #1
 8005182:	d10a      	bne.n	800519a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005192:	f043 0304 	orr.w	r3, r3, #4
 8005196:	6013      	str	r3, [r2, #0]
 8005198:	e014      	b.n	80051c4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051a8:	f023 0304 	bic.w	r3, r3, #4
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	e009      	b.n	80051c4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051be:	f023 0304 	bic.w	r3, r3, #4
 80051c2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051c4:	2110      	movs	r1, #16
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7ff fe5e 	bl	8004e88 <USB_FlushTxFifo>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7ff fe8a 	bl	8004ef0 <USB_FlushRxFifo>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80051e6:	2300      	movs	r3, #0
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	e015      	b.n	8005218 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f8:	461a      	mov	r2, r3
 80051fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051fe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520c:	461a      	mov	r2, r3
 800520e:	2300      	movs	r3, #0
 8005210:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	3301      	adds	r3, #1
 8005216:	613b      	str	r3, [r7, #16]
 8005218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	429a      	cmp	r2, r3
 800521e:	d3e5      	bcc.n	80051ec <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800522c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00b      	beq.n	8005252 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005240:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a13      	ldr	r2, [pc, #76]	; (8005294 <USB_HostInit+0x16c>)
 8005246:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a13      	ldr	r2, [pc, #76]	; (8005298 <USB_HostInit+0x170>)
 800524c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005250:	e009      	b.n	8005266 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2280      	movs	r2, #128	; 0x80
 8005256:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a10      	ldr	r2, [pc, #64]	; (800529c <USB_HostInit+0x174>)
 800525c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a0f      	ldr	r2, [pc, #60]	; (80052a0 <USB_HostInit+0x178>)
 8005262:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	2b00      	cmp	r3, #0
 800526a:	d105      	bne.n	8005278 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	f043 0210 	orr.w	r2, r3, #16
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	699a      	ldr	r2, [r3, #24]
 800527c:	4b09      	ldr	r3, [pc, #36]	; (80052a4 <USB_HostInit+0x17c>)
 800527e:	4313      	orrs	r3, r2
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005284:	7dfb      	ldrb	r3, [r7, #23]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3718      	adds	r7, #24
 800528a:	46bd      	mov	sp, r7
 800528c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005290:	b004      	add	sp, #16
 8005292:	4770      	bx	lr
 8005294:	01000200 	.word	0x01000200
 8005298:	00e00300 	.word	0x00e00300
 800529c:	00600080 	.word	0x00600080
 80052a0:	004000e0 	.word	0x004000e0
 80052a4:	a3200008 	.word	0xa3200008

080052a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052c6:	f023 0303 	bic.w	r3, r3, #3
 80052ca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	78fb      	ldrb	r3, [r7, #3]
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	68f9      	ldr	r1, [r7, #12]
 80052dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052e0:	4313      	orrs	r3, r2
 80052e2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80052e4:	78fb      	ldrb	r3, [r7, #3]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d107      	bne.n	80052fa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052f0:	461a      	mov	r2, r3
 80052f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80052f6:	6053      	str	r3, [r2, #4]
 80052f8:	e009      	b.n	800530e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80052fa:	78fb      	ldrb	r3, [r7, #3]
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d106      	bne.n	800530e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005306:	461a      	mov	r2, r3
 8005308:	f241 7370 	movw	r3, #6000	; 0x1770
 800530c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800533c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800534a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800534c:	2064      	movs	r0, #100	; 0x64
 800534e:	f7fb fdb5 	bl	8000ebc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800535a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800535e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005360:	200a      	movs	r0, #10
 8005362:	f7fb fdab 	bl	8000ebc <HAL_Delay>

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	460b      	mov	r3, r1
 800537a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005380:	2300      	movs	r3, #0
 8005382:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005394:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d109      	bne.n	80053b4 <USB_DriveVbus+0x44>
 80053a0:	78fb      	ldrb	r3, [r7, #3]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d106      	bne.n	80053b4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053b2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053be:	d109      	bne.n	80053d4 <USB_DriveVbus+0x64>
 80053c0:	78fb      	ldrb	r3, [r7, #3]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d106      	bne.n	80053d4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053d2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b085      	sub	sp, #20
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	0c5b      	lsrs	r3, r3, #17
 8005400:	f003 0303 	and.w	r3, r3, #3
}
 8005404:	4618      	mov	r0, r3
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	b29b      	uxth	r3, r3
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
	...

08005434 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	4608      	mov	r0, r1
 800543e:	4611      	mov	r1, r2
 8005440:	461a      	mov	r2, r3
 8005442:	4603      	mov	r3, r0
 8005444:	70fb      	strb	r3, [r7, #3]
 8005446:	460b      	mov	r3, r1
 8005448:	70bb      	strb	r3, [r7, #2]
 800544a:	4613      	mov	r3, r2
 800544c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800544e:	2300      	movs	r3, #0
 8005450:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005456:	78fb      	ldrb	r3, [r7, #3]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	4413      	add	r3, r2
 800545e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005462:	461a      	mov	r2, r3
 8005464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005468:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800546a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800546e:	2b03      	cmp	r3, #3
 8005470:	d87e      	bhi.n	8005570 <USB_HC_Init+0x13c>
 8005472:	a201      	add	r2, pc, #4	; (adr r2, 8005478 <USB_HC_Init+0x44>)
 8005474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005478:	08005489 	.word	0x08005489
 800547c:	08005533 	.word	0x08005533
 8005480:	08005489 	.word	0x08005489
 8005484:	080054f5 	.word	0x080054f5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	4413      	add	r3, r2
 8005490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005494:	461a      	mov	r2, r3
 8005496:	f240 439d 	movw	r3, #1181	; 0x49d
 800549a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800549c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	da10      	bge.n	80054c6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80054a4:	78fb      	ldrb	r3, [r7, #3]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	78fa      	ldrb	r2, [r7, #3]
 80054b4:	0151      	lsls	r1, r2, #5
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	440a      	add	r2, r1
 80054ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80054c4:	e057      	b.n	8005576 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d051      	beq.n	8005576 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80054d2:	78fb      	ldrb	r3, [r7, #3]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	78fa      	ldrb	r2, [r7, #3]
 80054e2:	0151      	lsls	r1, r2, #5
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	440a      	add	r2, r1
 80054e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80054f0:	60d3      	str	r3, [r2, #12]
      break;
 80054f2:	e040      	b.n	8005576 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80054f4:	78fb      	ldrb	r3, [r7, #3]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005500:	461a      	mov	r2, r3
 8005502:	f240 639d 	movw	r3, #1693	; 0x69d
 8005506:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005508:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800550c:	2b00      	cmp	r3, #0
 800550e:	da34      	bge.n	800557a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005510:	78fb      	ldrb	r3, [r7, #3]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	4413      	add	r3, r2
 8005518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	78fa      	ldrb	r2, [r7, #3]
 8005520:	0151      	lsls	r1, r2, #5
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	440a      	add	r2, r1
 8005526:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800552a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005530:	e023      	b.n	800557a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005532:	78fb      	ldrb	r3, [r7, #3]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	4413      	add	r3, r2
 800553a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800553e:	461a      	mov	r2, r3
 8005540:	f240 2325 	movw	r3, #549	; 0x225
 8005544:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005546:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800554a:	2b00      	cmp	r3, #0
 800554c:	da17      	bge.n	800557e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800554e:	78fb      	ldrb	r3, [r7, #3]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	4413      	add	r3, r2
 8005556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	78fa      	ldrb	r2, [r7, #3]
 800555e:	0151      	lsls	r1, r2, #5
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	440a      	add	r2, r1
 8005564:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005568:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800556c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800556e:	e006      	b.n	800557e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	77fb      	strb	r3, [r7, #31]
      break;
 8005574:	e004      	b.n	8005580 <USB_HC_Init+0x14c>
      break;
 8005576:	bf00      	nop
 8005578:	e002      	b.n	8005580 <USB_HC_Init+0x14c>
      break;
 800557a:	bf00      	nop
 800557c:	e000      	b.n	8005580 <USB_HC_Init+0x14c>
      break;
 800557e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005580:	78fb      	ldrb	r3, [r7, #3]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	4413      	add	r3, r2
 8005588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	78fa      	ldrb	r2, [r7, #3]
 8005590:	0151      	lsls	r1, r2, #5
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	440a      	add	r2, r1
 8005596:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800559a:	f043 0302 	orr.w	r3, r3, #2
 800559e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055a6:	699a      	ldr	r2, [r3, #24]
 80055a8:	78fb      	ldrb	r3, [r7, #3]
 80055aa:	f003 030f 	and.w	r3, r3, #15
 80055ae:	2101      	movs	r1, #1
 80055b0:	fa01 f303 	lsl.w	r3, r1, r3
 80055b4:	6939      	ldr	r1, [r7, #16]
 80055b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80055ba:	4313      	orrs	r3, r2
 80055bc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80055ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	da03      	bge.n	80055da <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80055d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055d6:	61bb      	str	r3, [r7, #24]
 80055d8:	e001      	b.n	80055de <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff feff 	bl	80053e2 <USB_GetHostSpeed>
 80055e4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80055e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d106      	bne.n	80055fc <USB_HC_Init+0x1c8>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d003      	beq.n	80055fc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80055f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	e001      	b.n	8005600 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80055fc:	2300      	movs	r3, #0
 80055fe:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005600:	787b      	ldrb	r3, [r7, #1]
 8005602:	059b      	lsls	r3, r3, #22
 8005604:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005608:	78bb      	ldrb	r3, [r7, #2]
 800560a:	02db      	lsls	r3, r3, #11
 800560c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005610:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005612:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005616:	049b      	lsls	r3, r3, #18
 8005618:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800561c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800561e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005620:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005624:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800562a:	78fb      	ldrb	r3, [r7, #3]
 800562c:	0159      	lsls	r1, r3, #5
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	440b      	add	r3, r1
 8005632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005636:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800563c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800563e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005642:	2b03      	cmp	r3, #3
 8005644:	d003      	beq.n	800564e <USB_HC_Init+0x21a>
 8005646:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800564a:	2b01      	cmp	r3, #1
 800564c:	d10f      	bne.n	800566e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800564e:	78fb      	ldrb	r3, [r7, #3]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	4413      	add	r3, r2
 8005656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	78fa      	ldrb	r2, [r7, #3]
 800565e:	0151      	lsls	r1, r2, #5
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	440a      	add	r2, r1
 8005664:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005668:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800566c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800566e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3720      	adds	r7, #32
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08c      	sub	sp, #48	; 0x30
 800567c:	af02      	add	r7, sp, #8
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	4613      	mov	r3, r2
 8005684:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	785b      	ldrb	r3, [r3, #1]
 800568e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005694:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d02d      	beq.n	80056fe <USB_HC_StartXfer+0x86>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	791b      	ldrb	r3, [r3, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d129      	bne.n	80056fe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80056aa:	79fb      	ldrb	r3, [r7, #7]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d117      	bne.n	80056e0 <USB_HC_StartXfer+0x68>
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	79db      	ldrb	r3, [r3, #7]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <USB_HC_StartXfer+0x48>
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	79db      	ldrb	r3, [r3, #7]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d10f      	bne.n	80056e0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	69fa      	ldr	r2, [r7, #28]
 80056d0:	0151      	lsls	r1, r2, #5
 80056d2:	6a3a      	ldr	r2, [r7, #32]
 80056d4:	440a      	add	r2, r1
 80056d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056de:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80056e0:	79fb      	ldrb	r3, [r7, #7]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10b      	bne.n	80056fe <USB_HC_StartXfer+0x86>
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	795b      	ldrb	r3, [r3, #5]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d107      	bne.n	80056fe <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	785b      	ldrb	r3, [r3, #1]
 80056f2:	4619      	mov	r1, r3
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 fa0f 	bl	8005b18 <USB_DoPing>
      return HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	e0f8      	b.n	80058f0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d018      	beq.n	8005738 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	8912      	ldrh	r2, [r2, #8]
 800570e:	4413      	add	r3, r2
 8005710:	3b01      	subs	r3, #1
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	8912      	ldrh	r2, [r2, #8]
 8005716:	fbb3 f3f2 	udiv	r3, r3, r2
 800571a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800571c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800571e:	8b7b      	ldrh	r3, [r7, #26]
 8005720:	429a      	cmp	r2, r3
 8005722:	d90b      	bls.n	800573c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005724:	8b7b      	ldrh	r3, [r7, #26]
 8005726:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005728:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	8912      	ldrh	r2, [r2, #8]
 800572e:	fb03 f202 	mul.w	r2, r3, r2
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	611a      	str	r2, [r3, #16]
 8005736:	e001      	b.n	800573c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005738:	2301      	movs	r3, #1
 800573a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	78db      	ldrb	r3, [r3, #3]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d007      	beq.n	8005754 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005744:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	8912      	ldrh	r2, [r2, #8]
 800574a:	fb03 f202 	mul.w	r2, r3, r2
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	611a      	str	r2, [r3, #16]
 8005752:	e003      	b.n	800575c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	695a      	ldr	r2, [r3, #20]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005764:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005766:	04d9      	lsls	r1, r3, #19
 8005768:	4b63      	ldr	r3, [pc, #396]	; (80058f8 <USB_HC_StartXfer+0x280>)
 800576a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800576c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	7a9b      	ldrb	r3, [r3, #10]
 8005772:	075b      	lsls	r3, r3, #29
 8005774:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005778:	69f9      	ldr	r1, [r7, #28]
 800577a:	0148      	lsls	r0, r1, #5
 800577c:	6a39      	ldr	r1, [r7, #32]
 800577e:	4401      	add	r1, r0
 8005780:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005784:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005786:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005788:	79fb      	ldrb	r3, [r7, #7]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d009      	beq.n	80057a2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	68d9      	ldr	r1, [r3, #12]
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	4413      	add	r3, r2
 800579a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800579e:	460a      	mov	r2, r1
 80057a0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	bf0c      	ite	eq
 80057b2:	2301      	moveq	r3, #1
 80057b4:	2300      	movne	r3, #0
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	69fa      	ldr	r2, [r7, #28]
 80057ca:	0151      	lsls	r1, r2, #5
 80057cc:	6a3a      	ldr	r2, [r7, #32]
 80057ce:	440a      	add	r2, r1
 80057d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80057d8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	7e7b      	ldrb	r3, [r7, #25]
 80057ea:	075b      	lsls	r3, r3, #29
 80057ec:	69f9      	ldr	r1, [r7, #28]
 80057ee:	0148      	lsls	r0, r1, #5
 80057f0:	6a39      	ldr	r1, [r7, #32]
 80057f2:	4401      	add	r1, r0
 80057f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80057f8:	4313      	orrs	r3, r2
 80057fa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	4413      	add	r3, r2
 8005804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005812:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	78db      	ldrb	r3, [r3, #3]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d004      	beq.n	8005826 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005822:	613b      	str	r3, [r7, #16]
 8005824:	e003      	b.n	800582e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800582c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005834:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	4413      	add	r3, r2
 800583e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005842:	461a      	mov	r2, r3
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005848:	79fb      	ldrb	r3, [r7, #7]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	e04e      	b.n	80058f0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	78db      	ldrb	r3, [r3, #3]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d149      	bne.n	80058ee <USB_HC_StartXfer+0x276>
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d045      	beq.n	80058ee <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	79db      	ldrb	r3, [r3, #7]
 8005866:	2b03      	cmp	r3, #3
 8005868:	d830      	bhi.n	80058cc <USB_HC_StartXfer+0x254>
 800586a:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <USB_HC_StartXfer+0x1f8>)
 800586c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005870:	08005881 	.word	0x08005881
 8005874:	080058a5 	.word	0x080058a5
 8005878:	08005881 	.word	0x08005881
 800587c:	080058a5 	.word	0x080058a5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	3303      	adds	r3, #3
 8005886:	089b      	lsrs	r3, r3, #2
 8005888:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800588a:	8afa      	ldrh	r2, [r7, #22]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	b29b      	uxth	r3, r3
 8005892:	429a      	cmp	r2, r3
 8005894:	d91c      	bls.n	80058d0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	f043 0220 	orr.w	r2, r3, #32
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	619a      	str	r2, [r3, #24]
        }
        break;
 80058a2:	e015      	b.n	80058d0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	3303      	adds	r3, #3
 80058aa:	089b      	lsrs	r3, r3, #2
 80058ac:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80058ae:	8afa      	ldrh	r2, [r7, #22]
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d90a      	bls.n	80058d4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	619a      	str	r2, [r3, #24]
        }
        break;
 80058ca:	e003      	b.n	80058d4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80058cc:	bf00      	nop
 80058ce:	e002      	b.n	80058d6 <USB_HC_StartXfer+0x25e>
        break;
 80058d0:	bf00      	nop
 80058d2:	e000      	b.n	80058d6 <USB_HC_StartXfer+0x25e>
        break;
 80058d4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	68d9      	ldr	r1, [r3, #12]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	785a      	ldrb	r2, [r3, #1]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	2000      	movs	r0, #0
 80058e6:	9000      	str	r0, [sp, #0]
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f7ff fb31 	bl	8004f50 <USB_WritePacket>
  }

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3728      	adds	r7, #40	; 0x28
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	1ff80000 	.word	0x1ff80000

080058fc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	b29b      	uxth	r3, r3
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800591e:	b480      	push	{r7}
 8005920:	b089      	sub	sp, #36	; 0x24
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	460b      	mov	r3, r1
 8005928:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800592e:	78fb      	ldrb	r3, [r7, #3]
 8005930:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005932:	2300      	movs	r3, #0
 8005934:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	4413      	add	r3, r2
 800593e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	0c9b      	lsrs	r3, r3, #18
 8005946:	f003 0303 	and.w	r3, r3, #3
 800594a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	4413      	add	r3, r2
 8005954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	0fdb      	lsrs	r3, r3, #31
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 0320 	and.w	r3, r3, #32
 800596a:	2b20      	cmp	r3, #32
 800596c:	d104      	bne.n	8005978 <USB_HC_Halt+0x5a>
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005974:	2300      	movs	r3, #0
 8005976:	e0c8      	b.n	8005b0a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <USB_HC_Halt+0x66>
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2b02      	cmp	r3, #2
 8005982:	d163      	bne.n	8005a4c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	4413      	add	r3, r2
 800598c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	0151      	lsls	r1, r2, #5
 8005996:	69fa      	ldr	r2, [r7, #28]
 8005998:	440a      	add	r2, r1
 800599a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800599e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059a2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f003 0320 	and.w	r3, r3, #32
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f040 80ab 	bne.w	8005b08 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d133      	bne.n	8005a26 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	0151      	lsls	r1, r2, #5
 80059d0:	69fa      	ldr	r2, [r7, #28]
 80059d2:	440a      	add	r2, r1
 80059d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059dc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	0151      	lsls	r1, r2, #5
 80059f0:	69fa      	ldr	r2, [r7, #28]
 80059f2:	440a      	add	r2, r1
 80059f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059fc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	3301      	adds	r3, #1
 8005a02:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a0a:	d81d      	bhi.n	8005a48 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a22:	d0ec      	beq.n	80059fe <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a24:	e070      	b.n	8005b08 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	0151      	lsls	r1, r2, #5
 8005a38:	69fa      	ldr	r2, [r7, #28]
 8005a3a:	440a      	add	r2, r1
 8005a3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a44:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a46:	e05f      	b.n	8005b08 <USB_HC_Halt+0x1ea>
            break;
 8005a48:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a4a:	e05d      	b.n	8005b08 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	0151      	lsls	r1, r2, #5
 8005a5e:	69fa      	ldr	r2, [r7, #28]
 8005a60:	440a      	add	r2, r1
 8005a62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a6a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d133      	bne.n	8005ae4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	0151      	lsls	r1, r2, #5
 8005a8e:	69fa      	ldr	r2, [r7, #28]
 8005a90:	440a      	add	r2, r1
 8005a92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a9a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	0151      	lsls	r1, r2, #5
 8005aae:	69fa      	ldr	r2, [r7, #28]
 8005ab0:	440a      	add	r2, r1
 8005ab2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005aba:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ac8:	d81d      	bhi.n	8005b06 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005adc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ae0:	d0ec      	beq.n	8005abc <USB_HC_Halt+0x19e>
 8005ae2:	e011      	b.n	8005b08 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	0151      	lsls	r1, r2, #5
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	440a      	add	r2, r1
 8005afa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b02:	6013      	str	r3, [r2, #0]
 8005b04:	e000      	b.n	8005b08 <USB_HC_Halt+0x1ea>
          break;
 8005b06:	bf00      	nop
    }
  }

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3724      	adds	r7, #36	; 0x24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	460b      	mov	r3, r1
 8005b22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005b28:	78fb      	ldrb	r3, [r7, #3]
 8005b2a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	04da      	lsls	r2, r3, #19
 8005b34:	4b15      	ldr	r3, [pc, #84]	; (8005b8c <USB_DoPing+0x74>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	0151      	lsls	r1, r2, #5
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	440a      	add	r2, r1
 8005b40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b48:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b60:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b68:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b76:	461a      	mov	r2, r3
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	1ff80000 	.word	0x1ff80000

08005b90 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b088      	sub	sp, #32
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7ff f911 	bl	8004dcc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005baa:	2110      	movs	r1, #16
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7ff f96b 	bl	8004e88 <USB_FlushTxFifo>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7ff f997 	bl	8004ef0 <USB_FlushRxFifo>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005bcc:	2300      	movs	r3, #0
 8005bce:	61bb      	str	r3, [r7, #24]
 8005bd0:	e01f      	b.n	8005c12 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005be8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bf0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bf8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c06:	461a      	mov	r2, r3
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	61bb      	str	r3, [r7, #24]
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	2b0f      	cmp	r3, #15
 8005c16:	d9dc      	bls.n	8005bd2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005c18:	2300      	movs	r3, #0
 8005c1a:	61bb      	str	r3, [r7, #24]
 8005c1c:	e034      	b.n	8005c88 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c34:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c3c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c44:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c52:	461a      	mov	r2, r3
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c64:	d80c      	bhi.n	8005c80 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c7c:	d0ec      	beq.n	8005c58 <USB_StopHost+0xc8>
 8005c7e:	e000      	b.n	8005c82 <USB_StopHost+0xf2>
        break;
 8005c80:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	3301      	adds	r3, #1
 8005c86:	61bb      	str	r3, [r7, #24]
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	2b0f      	cmp	r3, #15
 8005c8c:	d9c7      	bls.n	8005c1e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c94:	461a      	mov	r2, r3
 8005c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c9a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ca2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7ff f880 	bl	8004daa <USB_EnableGlobalInt>

  return ret;
 8005caa:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3720      	adds	r7, #32
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005cb4:	b590      	push	{r4, r7, lr}
 8005cb6:	b089      	sub	sp, #36	; 0x24
 8005cb8:	af04      	add	r7, sp, #16
 8005cba:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	2102      	movs	r1, #2
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fc66 	bl	8006594 <USBH_FindInterface>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
 8005cce:	2bff      	cmp	r3, #255	; 0xff
 8005cd0:	d002      	beq.n	8005cd8 <USBH_CDC_InterfaceInit+0x24>
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d901      	bls.n	8005cdc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e13d      	b.n	8005f58 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 fc3b 	bl	800655c <USBH_SelectInterface>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005cea:	7bbb      	ldrb	r3, [r7, #14]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e131      	b.n	8005f58 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005cfa:	2050      	movs	r0, #80	; 0x50
 8005cfc:	f002 fad2 	bl	80082a4 <malloc>
 8005d00:	4603      	mov	r3, r0
 8005d02:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005d14:	2302      	movs	r3, #2
 8005d16:	e11f      	b.n	8005f58 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005d18:	2250      	movs	r2, #80	; 0x50
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	68b8      	ldr	r0, [r7, #8]
 8005d1e:	f002 fb7d 	bl	800841c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	211a      	movs	r1, #26
 8005d28:	fb01 f303 	mul.w	r3, r1, r3
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	b25b      	sxtb	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	da15      	bge.n	8005d66 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005d3a:	7bfb      	ldrb	r3, [r7, #15]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	211a      	movs	r1, #26
 8005d40:	fb01 f303 	mul.w	r3, r1, r3
 8005d44:	4413      	add	r3, r2
 8005d46:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d4a:	781a      	ldrb	r2, [r3, #0]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	211a      	movs	r1, #26
 8005d56:	fb01 f303 	mul.w	r3, r1, r3
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d60:	881a      	ldrh	r2, [r3, #0]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	785b      	ldrb	r3, [r3, #1]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f001 ff2e 	bl	8007bce <USBH_AllocPipe>
 8005d72:	4603      	mov	r3, r0
 8005d74:	461a      	mov	r2, r3
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	7819      	ldrb	r1, [r3, #0]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	7858      	ldrb	r0, [r3, #1]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	8952      	ldrh	r2, [r2, #10]
 8005d92:	9202      	str	r2, [sp, #8]
 8005d94:	2203      	movs	r2, #3
 8005d96:	9201      	str	r2, [sp, #4]
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	4623      	mov	r3, r4
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f001 fee6 	bl	8007b70 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	2200      	movs	r2, #0
 8005daa:	4619      	mov	r1, r3
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f002 f9f5 	bl	800819c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005db2:	2300      	movs	r3, #0
 8005db4:	2200      	movs	r2, #0
 8005db6:	210a      	movs	r1, #10
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fbeb 	bl	8006594 <USBH_FindInterface>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
 8005dc4:	2bff      	cmp	r3, #255	; 0xff
 8005dc6:	d002      	beq.n	8005dce <USBH_CDC_InterfaceInit+0x11a>
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d901      	bls.n	8005dd2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005dce:	2302      	movs	r3, #2
 8005dd0:	e0c2      	b.n	8005f58 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	211a      	movs	r1, #26
 8005dd8:	fb01 f303 	mul.w	r3, r1, r3
 8005ddc:	4413      	add	r3, r2
 8005dde:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	b25b      	sxtb	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	da16      	bge.n	8005e18 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	211a      	movs	r1, #26
 8005df0:	fb01 f303 	mul.w	r3, r1, r3
 8005df4:	4413      	add	r3, r2
 8005df6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005dfa:	781a      	ldrb	r2, [r3, #0]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	211a      	movs	r1, #26
 8005e06:	fb01 f303 	mul.w	r3, r1, r3
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e10:	881a      	ldrh	r2, [r3, #0]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	835a      	strh	r2, [r3, #26]
 8005e16:	e015      	b.n	8005e44 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	211a      	movs	r1, #26
 8005e1e:	fb01 f303 	mul.w	r3, r1, r3
 8005e22:	4413      	add	r3, r2
 8005e24:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e28:	781a      	ldrb	r2, [r3, #0]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	211a      	movs	r1, #26
 8005e34:	fb01 f303 	mul.w	r3, r1, r3
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e3e:	881a      	ldrh	r2, [r3, #0]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	211a      	movs	r1, #26
 8005e4a:	fb01 f303 	mul.w	r3, r1, r3
 8005e4e:	4413      	add	r3, r2
 8005e50:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	b25b      	sxtb	r3, r3
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	da16      	bge.n	8005e8a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	211a      	movs	r1, #26
 8005e62:	fb01 f303 	mul.w	r3, r1, r3
 8005e66:	4413      	add	r3, r2
 8005e68:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e6c:	781a      	ldrb	r2, [r3, #0]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	211a      	movs	r1, #26
 8005e78:	fb01 f303 	mul.w	r3, r1, r3
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005e82:	881a      	ldrh	r2, [r3, #0]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	835a      	strh	r2, [r3, #26]
 8005e88:	e015      	b.n	8005eb6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	211a      	movs	r1, #26
 8005e90:	fb01 f303 	mul.w	r3, r1, r3
 8005e94:	4413      	add	r3, r2
 8005e96:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e9a:	781a      	ldrb	r2, [r3, #0]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	211a      	movs	r1, #26
 8005ea6:	fb01 f303 	mul.w	r3, r1, r3
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005eb0:	881a      	ldrh	r2, [r3, #0]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	7b9b      	ldrb	r3, [r3, #14]
 8005eba:	4619      	mov	r1, r3
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f001 fe86 	bl	8007bce <USBH_AllocPipe>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	7bdb      	ldrb	r3, [r3, #15]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f001 fe7c 	bl	8007bce <USBH_AllocPipe>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	461a      	mov	r2, r3
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	7b59      	ldrb	r1, [r3, #13]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	7b98      	ldrb	r0, [r3, #14]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	8b12      	ldrh	r2, [r2, #24]
 8005ef6:	9202      	str	r2, [sp, #8]
 8005ef8:	2202      	movs	r2, #2
 8005efa:	9201      	str	r2, [sp, #4]
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	4623      	mov	r3, r4
 8005f00:	4602      	mov	r2, r0
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f001 fe34 	bl	8007b70 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	7b19      	ldrb	r1, [r3, #12]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	7bd8      	ldrb	r0, [r3, #15]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	8b52      	ldrh	r2, [r2, #26]
 8005f20:	9202      	str	r2, [sp, #8]
 8005f22:	2202      	movs	r2, #2
 8005f24:	9201      	str	r2, [sp, #4]
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	4623      	mov	r3, r4
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f001 fe1f 	bl	8007b70 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	7b5b      	ldrb	r3, [r3, #13]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	4619      	mov	r1, r3
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f002 f92a 	bl	800819c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	7b1b      	ldrb	r3, [r3, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f002 f923 	bl	800819c <USBH_LL_SetToggle>

  return USBH_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd90      	pop	{r4, r7, pc}

08005f60 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00e      	beq.n	8005f98 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f001 fe14 	bl	8007bae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f001 fe3f 	bl	8007c10 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	7b1b      	ldrb	r3, [r3, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00e      	beq.n	8005fbe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	7b1b      	ldrb	r3, [r3, #12]
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f001 fe01 	bl	8007bae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	7b1b      	ldrb	r3, [r3, #12]
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f001 fe2c 	bl	8007c10 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	7b5b      	ldrb	r3, [r3, #13]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00e      	beq.n	8005fe4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	7b5b      	ldrb	r3, [r3, #13]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f001 fdee 	bl	8007bae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	7b5b      	ldrb	r3, [r3, #13]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f001 fe19 	bl	8007c10 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00b      	beq.n	8006008 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f002 f95b 	bl	80082b4 <free>
    phost->pActiveClass->pData = 0U;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006004:	2200      	movs	r2, #0
 8006006:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b084      	sub	sp, #16
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	3340      	adds	r3, #64	; 0x40
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f8b1 	bl	8006192 <GetLineCoding>
 8006030:	4603      	mov	r3, r0
 8006032:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006034:	7afb      	ldrb	r3, [r7, #11]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d105      	bne.n	8006046 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006040:	2102      	movs	r1, #2
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006046:	7afb      	ldrb	r3, [r7, #11]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006058:	2301      	movs	r3, #1
 800605a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800605c:	2300      	movs	r3, #0
 800605e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006066:	69db      	ldr	r3, [r3, #28]
 8006068:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006070:	2b04      	cmp	r3, #4
 8006072:	d877      	bhi.n	8006164 <USBH_CDC_Process+0x114>
 8006074:	a201      	add	r2, pc, #4	; (adr r2, 800607c <USBH_CDC_Process+0x2c>)
 8006076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607a:	bf00      	nop
 800607c:	08006091 	.word	0x08006091
 8006080:	08006097 	.word	0x08006097
 8006084:	080060c7 	.word	0x080060c7
 8006088:	0800613b 	.word	0x0800613b
 800608c:	08006149 	.word	0x08006149
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006090:	2300      	movs	r3, #0
 8006092:	73fb      	strb	r3, [r7, #15]
      break;
 8006094:	e06d      	b.n	8006172 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800609a:	4619      	mov	r1, r3
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f897 	bl	80061d0 <SetLineCoding>
 80060a2:	4603      	mov	r3, r0
 80060a4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80060a6:	7bbb      	ldrb	r3, [r7, #14]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d104      	bne.n	80060b6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80060b4:	e058      	b.n	8006168 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80060b6:	7bbb      	ldrb	r3, [r7, #14]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d055      	beq.n	8006168 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	2204      	movs	r2, #4
 80060c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80060c4:	e050      	b.n	8006168 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	3340      	adds	r3, #64	; 0x40
 80060ca:	4619      	mov	r1, r3
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f860 	bl	8006192 <GetLineCoding>
 80060d2:	4603      	mov	r3, r0
 80060d4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80060d6:	7bbb      	ldrb	r3, [r7, #14]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d126      	bne.n	800612a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ee:	791b      	ldrb	r3, [r3, #4]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d13b      	bne.n	800616c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060fe:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006100:	429a      	cmp	r2, r3
 8006102:	d133      	bne.n	800616c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800610e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006110:	429a      	cmp	r2, r3
 8006112:	d12b      	bne.n	800616c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800611c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800611e:	429a      	cmp	r2, r3
 8006120:	d124      	bne.n	800616c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f958 	bl	80063d8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006128:	e020      	b.n	800616c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800612a:	7bbb      	ldrb	r3, [r7, #14]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d01d      	beq.n	800616c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2204      	movs	r2, #4
 8006134:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006138:	e018      	b.n	800616c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f867 	bl	800620e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f8da 	bl	80062fa <CDC_ProcessReception>
      break;
 8006146:	e014      	b.n	8006172 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006148:	2100      	movs	r1, #0
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 ffef 	bl	800712e <USBH_ClrFeature>
 8006150:	4603      	mov	r3, r0
 8006152:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006154:	7bbb      	ldrb	r3, [r7, #14]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10a      	bne.n	8006170 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006162:	e005      	b.n	8006170 <USBH_CDC_Process+0x120>

    default:
      break;
 8006164:	bf00      	nop
 8006166:	e004      	b.n	8006172 <USBH_CDC_Process+0x122>
      break;
 8006168:	bf00      	nop
 800616a:	e002      	b.n	8006172 <USBH_CDC_Process+0x122>
      break;
 800616c:	bf00      	nop
 800616e:	e000      	b.n	8006172 <USBH_CDC_Process+0x122>
      break;
 8006170:	bf00      	nop

  }

  return status;
 8006172:	7bfb      	ldrb	r3, [r7, #15]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b082      	sub	sp, #8
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	22a1      	movs	r2, #161	; 0xa1
 80061a0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2221      	movs	r2, #33	; 0x21
 80061a6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2207      	movs	r2, #7
 80061b8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2207      	movs	r2, #7
 80061be:	4619      	mov	r1, r3
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f001 fa83 	bl	80076cc <USBH_CtlReq>
 80061c6:	4603      	mov	r3, r0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2221      	movs	r2, #33	; 0x21
 80061de:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2220      	movs	r2, #32
 80061e4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2207      	movs	r2, #7
 80061f6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2207      	movs	r2, #7
 80061fc:	4619      	mov	r1, r3
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f001 fa64 	bl	80076cc <USBH_CtlReq>
 8006204:	4603      	mov	r3, r0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b086      	sub	sp, #24
 8006212:	af02      	add	r7, sp, #8
 8006214:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006220:	2300      	movs	r3, #0
 8006222:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800622a:	2b01      	cmp	r3, #1
 800622c:	d002      	beq.n	8006234 <CDC_ProcessTransmission+0x26>
 800622e:	2b02      	cmp	r3, #2
 8006230:	d023      	beq.n	800627a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006232:	e05e      	b.n	80062f2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	8b12      	ldrh	r2, [r2, #24]
 800623c:	4293      	cmp	r3, r2
 800623e:	d90b      	bls.n	8006258 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	69d9      	ldr	r1, [r3, #28]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8b1a      	ldrh	r2, [r3, #24]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	7b5b      	ldrb	r3, [r3, #13]
 800624c:	2001      	movs	r0, #1
 800624e:	9000      	str	r0, [sp, #0]
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f001 fc4a 	bl	8007aea <USBH_BulkSendData>
 8006256:	e00b      	b.n	8006270 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006260:	b29a      	uxth	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	7b5b      	ldrb	r3, [r3, #13]
 8006266:	2001      	movs	r0, #1
 8006268:	9000      	str	r0, [sp, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f001 fc3d 	bl	8007aea <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006278:	e03b      	b.n	80062f2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	7b5b      	ldrb	r3, [r3, #13]
 800627e:	4619      	mov	r1, r3
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f001 ff61 	bl	8008148 <USBH_LL_GetURBState>
 8006286:	4603      	mov	r3, r0
 8006288:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800628a:	7afb      	ldrb	r3, [r7, #11]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d128      	bne.n	80062e2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	8b12      	ldrh	r2, [r2, #24]
 8006298:	4293      	cmp	r3, r2
 800629a:	d90e      	bls.n	80062ba <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	8b12      	ldrh	r2, [r2, #24]
 80062a4:	1a9a      	subs	r2, r3, r2
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	8b12      	ldrh	r2, [r2, #24]
 80062b2:	441a      	add	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	61da      	str	r2, [r3, #28]
 80062b8:	e002      	b.n	80062c0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d004      	beq.n	80062d2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80062d0:	e00e      	b.n	80062f0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f868 	bl	80063b0 <USBH_CDC_TransmitCallback>
      break;
 80062e0:	e006      	b.n	80062f0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80062e2:	7afb      	ldrb	r3, [r7, #11]
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d103      	bne.n	80062f0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80062f0:	bf00      	nop
  }
}
 80062f2:	bf00      	nop
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b086      	sub	sp, #24
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800630c:	2300      	movs	r3, #0
 800630e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006316:	2b03      	cmp	r3, #3
 8006318:	d002      	beq.n	8006320 <CDC_ProcessReception+0x26>
 800631a:	2b04      	cmp	r3, #4
 800631c:	d00e      	beq.n	800633c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800631e:	e043      	b.n	80063a8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	6a19      	ldr	r1, [r3, #32]
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	8b5a      	ldrh	r2, [r3, #26]
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	7b1b      	ldrb	r3, [r3, #12]
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f001 fc01 	bl	8007b34 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	2204      	movs	r2, #4
 8006336:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800633a:	e035      	b.n	80063a8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	7b1b      	ldrb	r3, [r3, #12]
 8006340:	4619      	mov	r1, r3
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f001 ff00 	bl	8008148 <USBH_LL_GetURBState>
 8006348:	4603      	mov	r3, r0
 800634a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800634c:	7cfb      	ldrb	r3, [r7, #19]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d129      	bne.n	80063a6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	7b1b      	ldrb	r3, [r3, #12]
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f001 fe63 	bl	8008024 <USBH_LL_GetLastXferSize>
 800635e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	429a      	cmp	r2, r3
 8006368:	d016      	beq.n	8006398 <CDC_ProcessReception+0x9e>
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	8b5b      	ldrh	r3, [r3, #26]
 800636e:	461a      	mov	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4293      	cmp	r3, r2
 8006374:	d910      	bls.n	8006398 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	1ad2      	subs	r2, r2, r3
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	6a1a      	ldr	r2, [r3, #32]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	441a      	add	r2, r3
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2203      	movs	r2, #3
 8006392:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006396:	e006      	b.n	80063a6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f80f 	bl	80063c4 <USBH_CDC_ReceiveCallback>
      break;
 80063a6:	bf00      	nop
  }
}
 80063a8:	bf00      	nop
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	4613      	mov	r3, r2
 80063f8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006400:	2302      	movs	r3, #2
 8006402:	e029      	b.n	8006458 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	79fa      	ldrb	r2, [r7, #7]
 8006408:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f000 f81f 	bl	8006460 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f001 fd33 	bl	8007ebc <USBH_LL_Init>

  return USBH_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800646c:	2300      	movs	r3, #0
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	e009      	b.n	8006486 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	33e0      	adds	r3, #224	; 0xe0
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	2200      	movs	r2, #0
 800647e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	3301      	adds	r3, #1
 8006484:	60fb      	str	r3, [r7, #12]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2b0f      	cmp	r3, #15
 800648a:	d9f2      	bls.n	8006472 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800648c:	2300      	movs	r3, #0
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	e009      	b.n	80064a6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4413      	add	r3, r2
 8006498:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800649c:	2200      	movs	r2, #0
 800649e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	3301      	adds	r3, #1
 80064a4:	60fb      	str	r3, [r7, #12]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064ac:	d3f1      	bcc.n	8006492 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2240      	movs	r2, #64	; 0x40
 80064d2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d016      	beq.n	800654a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10e      	bne.n	8006544 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800652c:	1c59      	adds	r1, r3, #1
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	33de      	adds	r3, #222	; 0xde
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	73fb      	strb	r3, [r7, #15]
 8006542:	e004      	b.n	800654e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006544:	2302      	movs	r3, #2
 8006546:	73fb      	strb	r3, [r7, #15]
 8006548:	e001      	b.n	800654e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800654a:	2302      	movs	r3, #2
 800654c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800654e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006572:	78fa      	ldrb	r2, [r7, #3]
 8006574:	429a      	cmp	r2, r3
 8006576:	d204      	bcs.n	8006582 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	78fa      	ldrb	r2, [r7, #3]
 800657c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006580:	e001      	b.n	8006586 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006582:	2302      	movs	r3, #2
 8006584:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006586:	7bfb      	ldrb	r3, [r7, #15]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	4608      	mov	r0, r1
 800659e:	4611      	mov	r1, r2
 80065a0:	461a      	mov	r2, r3
 80065a2:	4603      	mov	r3, r0
 80065a4:	70fb      	strb	r3, [r7, #3]
 80065a6:	460b      	mov	r3, r1
 80065a8:	70bb      	strb	r3, [r7, #2]
 80065aa:	4613      	mov	r3, r2
 80065ac:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80065b2:	2300      	movs	r3, #0
 80065b4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80065bc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80065be:	e025      	b.n	800660c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80065c0:	7dfb      	ldrb	r3, [r7, #23]
 80065c2:	221a      	movs	r2, #26
 80065c4:	fb02 f303 	mul.w	r3, r2, r3
 80065c8:	3308      	adds	r3, #8
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	4413      	add	r3, r2
 80065ce:	3302      	adds	r3, #2
 80065d0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	795b      	ldrb	r3, [r3, #5]
 80065d6:	78fa      	ldrb	r2, [r7, #3]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d002      	beq.n	80065e2 <USBH_FindInterface+0x4e>
 80065dc:	78fb      	ldrb	r3, [r7, #3]
 80065de:	2bff      	cmp	r3, #255	; 0xff
 80065e0:	d111      	bne.n	8006606 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80065e6:	78ba      	ldrb	r2, [r7, #2]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d002      	beq.n	80065f2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80065ec:	78bb      	ldrb	r3, [r7, #2]
 80065ee:	2bff      	cmp	r3, #255	; 0xff
 80065f0:	d109      	bne.n	8006606 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80065f6:	787a      	ldrb	r2, [r7, #1]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d002      	beq.n	8006602 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80065fc:	787b      	ldrb	r3, [r7, #1]
 80065fe:	2bff      	cmp	r3, #255	; 0xff
 8006600:	d101      	bne.n	8006606 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006602:	7dfb      	ldrb	r3, [r7, #23]
 8006604:	e006      	b.n	8006614 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006606:	7dfb      	ldrb	r3, [r7, #23]
 8006608:	3301      	adds	r3, #1
 800660a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800660c:	7dfb      	ldrb	r3, [r7, #23]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d9d6      	bls.n	80065c0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006612:	23ff      	movs	r3, #255	; 0xff
}
 8006614:	4618      	mov	r0, r3
 8006616:	371c      	adds	r7, #28
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f001 fc83 	bl	8007f34 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800662e:	2101      	movs	r1, #1
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 fd9c 	bl	800816e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b088      	sub	sp, #32
 8006644:	af04      	add	r7, sp, #16
 8006646:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006648:	2302      	movs	r3, #2
 800664a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b01      	cmp	r3, #1
 800665a:	d102      	bne.n	8006662 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2203      	movs	r2, #3
 8006660:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b0b      	cmp	r3, #11
 800666a:	f200 81be 	bhi.w	80069ea <USBH_Process+0x3aa>
 800666e:	a201      	add	r2, pc, #4	; (adr r2, 8006674 <USBH_Process+0x34>)
 8006670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006674:	080066a5 	.word	0x080066a5
 8006678:	080066d7 	.word	0x080066d7
 800667c:	0800673f 	.word	0x0800673f
 8006680:	08006985 	.word	0x08006985
 8006684:	080069eb 	.word	0x080069eb
 8006688:	080067e3 	.word	0x080067e3
 800668c:	0800692b 	.word	0x0800692b
 8006690:	08006819 	.word	0x08006819
 8006694:	08006839 	.word	0x08006839
 8006698:	08006859 	.word	0x08006859
 800669c:	0800689d 	.word	0x0800689d
 80066a0:	0800696d 	.word	0x0800696d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 819e 	beq.w	80069ee <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80066b8:	20c8      	movs	r0, #200	; 0xc8
 80066ba:	f001 fd9f 	bl	80081fc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f001 fc95 	bl	8007fee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80066d4:	e18b      	b.n	80069ee <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d107      	bne.n	80066f0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80066ee:	e18d      	b.n	8006a0c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80066f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066fa:	d914      	bls.n	8006726 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006702:	3301      	adds	r3, #1
 8006704:	b2da      	uxtb	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006712:	2b03      	cmp	r3, #3
 8006714:	d903      	bls.n	800671e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	220d      	movs	r2, #13
 800671a:	701a      	strb	r2, [r3, #0]
      break;
 800671c:	e176      	b.n	8006a0c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	701a      	strb	r2, [r3, #0]
      break;
 8006724:	e172      	b.n	8006a0c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800672c:	f103 020a 	add.w	r2, r3, #10
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006736:	200a      	movs	r0, #10
 8006738:	f001 fd60 	bl	80081fc <USBH_Delay>
      break;
 800673c:	e166      	b.n	8006a0c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006744:	2b00      	cmp	r3, #0
 8006746:	d005      	beq.n	8006754 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800674e:	2104      	movs	r1, #4
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006754:	2064      	movs	r0, #100	; 0x64
 8006756:	f001 fd51 	bl	80081fc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f001 fc20 	bl	8007fa0 <USBH_LL_GetSpeed>
 8006760:	4603      	mov	r3, r0
 8006762:	461a      	mov	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2205      	movs	r2, #5
 800676e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006770:	2100      	movs	r1, #0
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f001 fa2b 	bl	8007bce <USBH_AllocPipe>
 8006778:	4603      	mov	r3, r0
 800677a:	461a      	mov	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006780:	2180      	movs	r1, #128	; 0x80
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f001 fa23 	bl	8007bce <USBH_AllocPipe>
 8006788:	4603      	mov	r3, r0
 800678a:	461a      	mov	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	7919      	ldrb	r1, [r3, #4]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80067a4:	b292      	uxth	r2, r2
 80067a6:	9202      	str	r2, [sp, #8]
 80067a8:	2200      	movs	r2, #0
 80067aa:	9201      	str	r2, [sp, #4]
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	4603      	mov	r3, r0
 80067b0:	2280      	movs	r2, #128	; 0x80
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f001 f9dc 	bl	8007b70 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	7959      	ldrb	r1, [r3, #5]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80067cc:	b292      	uxth	r2, r2
 80067ce:	9202      	str	r2, [sp, #8]
 80067d0:	2200      	movs	r2, #0
 80067d2:	9201      	str	r2, [sp, #4]
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	4603      	mov	r3, r0
 80067d8:	2200      	movs	r2, #0
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f001 f9c8 	bl	8007b70 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80067e0:	e114      	b.n	8006a0c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f918 	bl	8006a18 <USBH_HandleEnum>
 80067e8:	4603      	mov	r3, r0
 80067ea:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80067ec:	7bbb      	ldrb	r3, [r7, #14]
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f040 80fe 	bne.w	80069f2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006804:	2b01      	cmp	r3, #1
 8006806:	d103      	bne.n	8006810 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2208      	movs	r2, #8
 800680c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800680e:	e0f0      	b.n	80069f2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2207      	movs	r2, #7
 8006814:	701a      	strb	r2, [r3, #0]
      break;
 8006816:	e0ec      	b.n	80069f2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 80e9 	beq.w	80069f6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800682a:	2101      	movs	r1, #1
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2208      	movs	r2, #8
 8006834:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006836:	e0de      	b.n	80069f6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800683e:	b29b      	uxth	r3, r3
 8006840:	4619      	mov	r1, r3
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fc2c 	bl	80070a0 <USBH_SetCfg>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	f040 80d5 	bne.w	80069fa <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2209      	movs	r2, #9
 8006854:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006856:	e0d0      	b.n	80069fa <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800685e:	f003 0320 	and.w	r3, r3, #32
 8006862:	2b00      	cmp	r3, #0
 8006864:	d016      	beq.n	8006894 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006866:	2101      	movs	r1, #1
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fc3c 	bl	80070e6 <USBH_SetFeature>
 800686e:	4603      	mov	r3, r0
 8006870:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006872:	7bbb      	ldrb	r3, [r7, #14]
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d103      	bne.n	8006882 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	220a      	movs	r2, #10
 800687e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006880:	e0bd      	b.n	80069fe <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006882:	7bbb      	ldrb	r3, [r7, #14]
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b03      	cmp	r3, #3
 8006888:	f040 80b9 	bne.w	80069fe <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	220a      	movs	r2, #10
 8006890:	701a      	strb	r2, [r3, #0]
      break;
 8006892:	e0b4      	b.n	80069fe <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	220a      	movs	r2, #10
 8006898:	701a      	strb	r2, [r3, #0]
      break;
 800689a:	e0b0      	b.n	80069fe <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 80ad 	beq.w	8006a02 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80068b0:	2300      	movs	r3, #0
 80068b2:	73fb      	strb	r3, [r7, #15]
 80068b4:	e016      	b.n	80068e4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80068b6:	7bfa      	ldrb	r2, [r7, #15]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	32de      	adds	r2, #222	; 0xde
 80068bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c0:	791a      	ldrb	r2, [r3, #4]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d108      	bne.n	80068de <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80068cc:	7bfa      	ldrb	r2, [r7, #15]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	32de      	adds	r2, #222	; 0xde
 80068d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80068dc:	e005      	b.n	80068ea <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80068de:	7bfb      	ldrb	r3, [r7, #15]
 80068e0:	3301      	adds	r3, #1
 80068e2:	73fb      	strb	r3, [r7, #15]
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d0e5      	beq.n	80068b6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d016      	beq.n	8006922 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	4798      	blx	r3
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d109      	bne.n	800691a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2206      	movs	r2, #6
 800690a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006912:	2103      	movs	r1, #3
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006918:	e073      	b.n	8006a02 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	220d      	movs	r2, #13
 800691e:	701a      	strb	r2, [r3, #0]
      break;
 8006920:	e06f      	b.n	8006a02 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	220d      	movs	r2, #13
 8006926:	701a      	strb	r2, [r3, #0]
      break;
 8006928:	e06b      	b.n	8006a02 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006930:	2b00      	cmp	r3, #0
 8006932:	d017      	beq.n	8006964 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	4798      	blx	r3
 8006940:	4603      	mov	r3, r0
 8006942:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006944:	7bbb      	ldrb	r3, [r7, #14]
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	d103      	bne.n	8006954 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	220b      	movs	r2, #11
 8006950:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006952:	e058      	b.n	8006a06 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006954:	7bbb      	ldrb	r3, [r7, #14]
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b02      	cmp	r3, #2
 800695a:	d154      	bne.n	8006a06 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	220d      	movs	r2, #13
 8006960:	701a      	strb	r2, [r3, #0]
      break;
 8006962:	e050      	b.n	8006a06 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	220d      	movs	r2, #13
 8006968:	701a      	strb	r2, [r3, #0]
      break;
 800696a:	e04c      	b.n	8006a06 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006972:	2b00      	cmp	r3, #0
 8006974:	d049      	beq.n	8006a0a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	4798      	blx	r3
      }
      break;
 8006982:	e042      	b.n	8006a0a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff fd67 	bl	8006460 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006998:	2b00      	cmp	r3, #0
 800699a:	d009      	beq.n	80069b0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d005      	beq.n	80069c6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069c0:	2105      	movs	r1, #5
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d107      	bne.n	80069e2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7ff fe20 	bl	8006620 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80069e0:	e014      	b.n	8006a0c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f001 faa6 	bl	8007f34 <USBH_LL_Start>
      break;
 80069e8:	e010      	b.n	8006a0c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80069ea:	bf00      	nop
 80069ec:	e00e      	b.n	8006a0c <USBH_Process+0x3cc>
      break;
 80069ee:	bf00      	nop
 80069f0:	e00c      	b.n	8006a0c <USBH_Process+0x3cc>
      break;
 80069f2:	bf00      	nop
 80069f4:	e00a      	b.n	8006a0c <USBH_Process+0x3cc>
    break;
 80069f6:	bf00      	nop
 80069f8:	e008      	b.n	8006a0c <USBH_Process+0x3cc>
      break;
 80069fa:	bf00      	nop
 80069fc:	e006      	b.n	8006a0c <USBH_Process+0x3cc>
      break;
 80069fe:	bf00      	nop
 8006a00:	e004      	b.n	8006a0c <USBH_Process+0x3cc>
      break;
 8006a02:	bf00      	nop
 8006a04:	e002      	b.n	8006a0c <USBH_Process+0x3cc>
      break;
 8006a06:	bf00      	nop
 8006a08:	e000      	b.n	8006a0c <USBH_Process+0x3cc>
      break;
 8006a0a:	bf00      	nop
  }
  return USBH_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop

08006a18 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b088      	sub	sp, #32
 8006a1c:	af04      	add	r7, sp, #16
 8006a1e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006a20:	2301      	movs	r3, #1
 8006a22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006a24:	2301      	movs	r3, #1
 8006a26:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	785b      	ldrb	r3, [r3, #1]
 8006a2c:	2b07      	cmp	r3, #7
 8006a2e:	f200 81c1 	bhi.w	8006db4 <USBH_HandleEnum+0x39c>
 8006a32:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <USBH_HandleEnum+0x20>)
 8006a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a38:	08006a59 	.word	0x08006a59
 8006a3c:	08006b17 	.word	0x08006b17
 8006a40:	08006b81 	.word	0x08006b81
 8006a44:	08006c0f 	.word	0x08006c0f
 8006a48:	08006c79 	.word	0x08006c79
 8006a4c:	08006ce9 	.word	0x08006ce9
 8006a50:	08006d2f 	.word	0x08006d2f
 8006a54:	08006d75 	.word	0x08006d75
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006a58:	2108      	movs	r1, #8
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fa50 	bl	8006f00 <USBH_Get_DevDesc>
 8006a60:	4603      	mov	r3, r0
 8006a62:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006a64:	7bbb      	ldrb	r3, [r7, #14]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d130      	bne.n	8006acc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	7919      	ldrb	r1, [r3, #4]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006a8e:	b292      	uxth	r2, r2
 8006a90:	9202      	str	r2, [sp, #8]
 8006a92:	2200      	movs	r2, #0
 8006a94:	9201      	str	r2, [sp, #4]
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2280      	movs	r2, #128	; 0x80
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 f867 	bl	8007b70 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	7959      	ldrb	r1, [r3, #5]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ab6:	b292      	uxth	r2, r2
 8006ab8:	9202      	str	r2, [sp, #8]
 8006aba:	2200      	movs	r2, #0
 8006abc:	9201      	str	r2, [sp, #4]
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f001 f853 	bl	8007b70 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006aca:	e175      	b.n	8006db8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006acc:	7bbb      	ldrb	r3, [r7, #14]
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	f040 8172 	bne.w	8006db8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ada:	3301      	adds	r3, #1
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d903      	bls.n	8006af6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	220d      	movs	r2, #13
 8006af2:	701a      	strb	r2, [r3, #0]
      break;
 8006af4:	e160      	b.n	8006db8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	795b      	ldrb	r3, [r3, #5]
 8006afa:	4619      	mov	r1, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 f887 	bl	8007c10 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	791b      	ldrb	r3, [r3, #4]
 8006b06:	4619      	mov	r1, r3
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f001 f881 	bl	8007c10 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	701a      	strb	r2, [r3, #0]
      break;
 8006b14:	e150      	b.n	8006db8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006b16:	2112      	movs	r1, #18
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f9f1 	bl	8006f00 <USBH_Get_DevDesc>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b22:	7bbb      	ldrb	r3, [r7, #14]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d103      	bne.n	8006b30 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006b2e:	e145      	b.n	8006dbc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b30:	7bbb      	ldrb	r3, [r7, #14]
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	f040 8142 	bne.w	8006dbc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006b3e:	3301      	adds	r3, #1
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d903      	bls.n	8006b5a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	220d      	movs	r2, #13
 8006b56:	701a      	strb	r2, [r3, #0]
      break;
 8006b58:	e130      	b.n	8006dbc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	795b      	ldrb	r3, [r3, #5]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 f855 	bl	8007c10 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	791b      	ldrb	r3, [r3, #4]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f001 f84f 	bl	8007c10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	701a      	strb	r2, [r3, #0]
      break;
 8006b7e:	e11d      	b.n	8006dbc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006b80:	2101      	movs	r1, #1
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fa68 	bl	8007058 <USBH_SetAddress>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b8c:	7bbb      	ldrb	r3, [r7, #14]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d132      	bne.n	8006bf8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006b92:	2002      	movs	r0, #2
 8006b94:	f001 fb32 	bl	80081fc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2203      	movs	r2, #3
 8006ba4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	7919      	ldrb	r1, [r3, #4]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006bba:	b292      	uxth	r2, r2
 8006bbc:	9202      	str	r2, [sp, #8]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	9201      	str	r2, [sp, #4]
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2280      	movs	r2, #128	; 0x80
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 ffd1 	bl	8007b70 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	7959      	ldrb	r1, [r3, #5]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006be2:	b292      	uxth	r2, r2
 8006be4:	9202      	str	r2, [sp, #8]
 8006be6:	2200      	movs	r2, #0
 8006be8:	9201      	str	r2, [sp, #4]
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	4603      	mov	r3, r0
 8006bee:	2200      	movs	r2, #0
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 ffbd 	bl	8007b70 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006bf6:	e0e3      	b.n	8006dc0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006bf8:	7bbb      	ldrb	r3, [r7, #14]
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	f040 80e0 	bne.w	8006dc0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	220d      	movs	r2, #13
 8006c04:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	705a      	strb	r2, [r3, #1]
      break;
 8006c0c:	e0d8      	b.n	8006dc0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006c0e:	2109      	movs	r1, #9
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f99d 	bl	8006f50 <USBH_Get_CfgDesc>
 8006c16:	4603      	mov	r3, r0
 8006c18:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c1a:	7bbb      	ldrb	r3, [r7, #14]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d103      	bne.n	8006c28 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2204      	movs	r2, #4
 8006c24:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c26:	e0cd      	b.n	8006dc4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c28:	7bbb      	ldrb	r3, [r7, #14]
 8006c2a:	2b03      	cmp	r3, #3
 8006c2c:	f040 80ca 	bne.w	8006dc4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c36:	3301      	adds	r3, #1
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c46:	2b03      	cmp	r3, #3
 8006c48:	d903      	bls.n	8006c52 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	220d      	movs	r2, #13
 8006c4e:	701a      	strb	r2, [r3, #0]
      break;
 8006c50:	e0b8      	b.n	8006dc4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	795b      	ldrb	r3, [r3, #5]
 8006c56:	4619      	mov	r1, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 ffd9 	bl	8007c10 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	791b      	ldrb	r3, [r3, #4]
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 ffd3 	bl	8007c10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	701a      	strb	r2, [r3, #0]
      break;
 8006c76:	e0a5      	b.n	8006dc4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f965 	bl	8006f50 <USBH_Get_CfgDesc>
 8006c86:	4603      	mov	r3, r0
 8006c88:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c8a:	7bbb      	ldrb	r3, [r7, #14]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d103      	bne.n	8006c98 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2205      	movs	r2, #5
 8006c94:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c96:	e097      	b.n	8006dc8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c98:	7bbb      	ldrb	r3, [r7, #14]
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	f040 8094 	bne.w	8006dc8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d903      	bls.n	8006cc2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	220d      	movs	r2, #13
 8006cbe:	701a      	strb	r2, [r3, #0]
      break;
 8006cc0:	e082      	b.n	8006dc8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	795b      	ldrb	r3, [r3, #5]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 ffa1 	bl	8007c10 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	791b      	ldrb	r3, [r3, #4]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 ff9b 	bl	8007c10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	701a      	strb	r2, [r3, #0]
      break;
 8006ce6:	e06f      	b.n	8006dc8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d019      	beq.n	8006d26 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006cfe:	23ff      	movs	r3, #255	; 0xff
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f949 	bl	8006f98 <USBH_Get_StringDesc>
 8006d06:	4603      	mov	r3, r0
 8006d08:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006d0a:	7bbb      	ldrb	r3, [r7, #14]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d103      	bne.n	8006d18 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2206      	movs	r2, #6
 8006d14:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006d16:	e059      	b.n	8006dcc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d18:	7bbb      	ldrb	r3, [r7, #14]
 8006d1a:	2b03      	cmp	r3, #3
 8006d1c:	d156      	bne.n	8006dcc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2206      	movs	r2, #6
 8006d22:	705a      	strb	r2, [r3, #1]
      break;
 8006d24:	e052      	b.n	8006dcc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2206      	movs	r2, #6
 8006d2a:	705a      	strb	r2, [r3, #1]
      break;
 8006d2c:	e04e      	b.n	8006dcc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d019      	beq.n	8006d6c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006d44:	23ff      	movs	r3, #255	; 0xff
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f926 	bl	8006f98 <USBH_Get_StringDesc>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006d50:	7bbb      	ldrb	r3, [r7, #14]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d103      	bne.n	8006d5e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2207      	movs	r2, #7
 8006d5a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006d5c:	e038      	b.n	8006dd0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d5e:	7bbb      	ldrb	r3, [r7, #14]
 8006d60:	2b03      	cmp	r3, #3
 8006d62:	d135      	bne.n	8006dd0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2207      	movs	r2, #7
 8006d68:	705a      	strb	r2, [r3, #1]
      break;
 8006d6a:	e031      	b.n	8006dd0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2207      	movs	r2, #7
 8006d70:	705a      	strb	r2, [r3, #1]
      break;
 8006d72:	e02d      	b.n	8006dd0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d017      	beq.n	8006dae <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006d8a:	23ff      	movs	r3, #255	; 0xff
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f903 	bl	8006f98 <USBH_Get_StringDesc>
 8006d92:	4603      	mov	r3, r0
 8006d94:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006d96:	7bbb      	ldrb	r3, [r7, #14]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d102      	bne.n	8006da2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006da0:	e018      	b.n	8006dd4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006da2:	7bbb      	ldrb	r3, [r7, #14]
 8006da4:	2b03      	cmp	r3, #3
 8006da6:	d115      	bne.n	8006dd4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	73fb      	strb	r3, [r7, #15]
      break;
 8006dac:	e012      	b.n	8006dd4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	73fb      	strb	r3, [r7, #15]
      break;
 8006db2:	e00f      	b.n	8006dd4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006db4:	bf00      	nop
 8006db6:	e00e      	b.n	8006dd6 <USBH_HandleEnum+0x3be>
      break;
 8006db8:	bf00      	nop
 8006dba:	e00c      	b.n	8006dd6 <USBH_HandleEnum+0x3be>
      break;
 8006dbc:	bf00      	nop
 8006dbe:	e00a      	b.n	8006dd6 <USBH_HandleEnum+0x3be>
      break;
 8006dc0:	bf00      	nop
 8006dc2:	e008      	b.n	8006dd6 <USBH_HandleEnum+0x3be>
      break;
 8006dc4:	bf00      	nop
 8006dc6:	e006      	b.n	8006dd6 <USBH_HandleEnum+0x3be>
      break;
 8006dc8:	bf00      	nop
 8006dca:	e004      	b.n	8006dd6 <USBH_HandleEnum+0x3be>
      break;
 8006dcc:	bf00      	nop
 8006dce:	e002      	b.n	8006dd6 <USBH_HandleEnum+0x3be>
      break;
 8006dd0:	bf00      	nop
 8006dd2:	e000      	b.n	8006dd6 <USBH_HandleEnum+0x3be>
      break;
 8006dd4:	bf00      	nop
  }
  return Status;
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006df2:	bf00      	nop
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b082      	sub	sp, #8
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 f804 	bl	8006e22 <USBH_HandleSof>
}
 8006e1a:	bf00      	nop
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b082      	sub	sp, #8
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b0b      	cmp	r3, #11
 8006e32:	d10a      	bne.n	8006e4a <USBH_HandleSof+0x28>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d005      	beq.n	8006e4a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	4798      	blx	r3
  }
}
 8006e4a:	bf00      	nop
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b083      	sub	sp, #12
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006e62:	bf00      	nop
}
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006e7e:	bf00      	nop
}
 8006e80:	370c      	adds	r7, #12
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr

08006e8a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b083      	sub	sp, #12
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f001 f846 	bl	8007f6a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	791b      	ldrb	r3, [r3, #4]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 fe93 	bl	8007c10 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	795b      	ldrb	r3, [r3, #5]
 8006eee:	4619      	mov	r1, r3
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fe8d 	bl	8007c10 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af02      	add	r7, sp, #8
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	460b      	mov	r3, r1
 8006f0a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006f12:	78fb      	ldrb	r3, [r7, #3]
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f1e:	2100      	movs	r1, #0
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 f864 	bl	8006fee <USBH_GetDescriptor>
 8006f26:	4603      	mov	r3, r0
 8006f28:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006f2a:	7bfb      	ldrb	r3, [r7, #15]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10a      	bne.n	8006f46 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f3c:	78fa      	ldrb	r2, [r7, #3]
 8006f3e:	b292      	uxth	r2, r2
 8006f40:	4619      	mov	r1, r3
 8006f42:	f000 f919 	bl	8007178 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af02      	add	r7, sp, #8
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	331c      	adds	r3, #28
 8006f60:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006f62:	887b      	ldrh	r3, [r7, #2]
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f83d 	bl	8006fee <USBH_GetDescriptor>
 8006f74:	4603      	mov	r3, r0
 8006f76:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006f78:	7bfb      	ldrb	r3, [r7, #15]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d107      	bne.n	8006f8e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006f7e:	887b      	ldrh	r3, [r7, #2]
 8006f80:	461a      	mov	r2, r3
 8006f82:	68b9      	ldr	r1, [r7, #8]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f989 	bl	800729c <USBH_ParseCfgDesc>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b088      	sub	sp, #32
 8006f9c:	af02      	add	r7, sp, #8
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	607a      	str	r2, [r7, #4]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	72fb      	strb	r3, [r7, #11]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006fac:	7afb      	ldrb	r3, [r7, #11]
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006fb4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006fbc:	893b      	ldrh	r3, [r7, #8]
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f000 f812 	bl	8006fee <USBH_GetDescriptor>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006fce:	7dfb      	ldrb	r3, [r7, #23]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d107      	bne.n	8006fe4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006fda:	893a      	ldrh	r2, [r7, #8]
 8006fdc:	6879      	ldr	r1, [r7, #4]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 fb26 	bl	8007630 <USBH_ParseStringDesc>
  }

  return status;
 8006fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3718      	adds	r7, #24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b084      	sub	sp, #16
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	60f8      	str	r0, [r7, #12]
 8006ff6:	607b      	str	r3, [r7, #4]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	72fb      	strb	r3, [r7, #11]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	789b      	ldrb	r3, [r3, #2]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d11c      	bne.n	8007042 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007008:	7afb      	ldrb	r3, [r7, #11]
 800700a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800700e:	b2da      	uxtb	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2206      	movs	r2, #6
 8007018:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	893a      	ldrh	r2, [r7, #8]
 800701e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007020:	893b      	ldrh	r3, [r7, #8]
 8007022:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800702a:	d104      	bne.n	8007036 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f240 4209 	movw	r2, #1033	; 0x409
 8007032:	829a      	strh	r2, [r3, #20]
 8007034:	e002      	b.n	800703c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	8b3a      	ldrh	r2, [r7, #24]
 8007040:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007042:	8b3b      	ldrh	r3, [r7, #24]
 8007044:	461a      	mov	r2, r3
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f000 fb3f 	bl	80076cc <USBH_CtlReq>
 800704e:	4603      	mov	r3, r0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	789b      	ldrb	r3, [r3, #2]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d10f      	bne.n	800708c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2205      	movs	r2, #5
 8007076:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007078:	78fb      	ldrb	r3, [r7, #3]
 800707a:	b29a      	uxth	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800708c:	2200      	movs	r2, #0
 800708e:	2100      	movs	r1, #0
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fb1b 	bl	80076cc <USBH_CtlReq>
 8007096:	4603      	mov	r3, r0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	789b      	ldrb	r3, [r3, #2]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d10e      	bne.n	80070d2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2209      	movs	r2, #9
 80070be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	887a      	ldrh	r2, [r7, #2]
 80070c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80070d2:	2200      	movs	r2, #0
 80070d4:	2100      	movs	r1, #0
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 faf8 	bl	80076cc <USBH_CtlReq>
 80070dc:	4603      	mov	r3, r0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b082      	sub	sp, #8
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	460b      	mov	r3, r1
 80070f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	789b      	ldrb	r3, [r3, #2]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d10f      	bne.n	800711a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2203      	movs	r2, #3
 8007104:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007106:	78fb      	ldrb	r3, [r7, #3]
 8007108:	b29a      	uxth	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800711a:	2200      	movs	r2, #0
 800711c:	2100      	movs	r1, #0
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fad4 	bl	80076cc <USBH_CtlReq>
 8007124:	4603      	mov	r3, r0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b082      	sub	sp, #8
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	460b      	mov	r3, r1
 8007138:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	789b      	ldrb	r3, [r3, #2]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d10f      	bne.n	8007162 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2202      	movs	r2, #2
 8007146:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007154:	78fb      	ldrb	r3, [r7, #3]
 8007156:	b29a      	uxth	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007162:	2200      	movs	r2, #0
 8007164:	2100      	movs	r1, #0
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fab0 	bl	80076cc <USBH_CtlReq>
 800716c:	4603      	mov	r3, r0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
	...

08007178 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	4613      	mov	r3, r2
 8007184:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	781a      	ldrb	r2, [r3, #0]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	785a      	ldrb	r2, [r3, #1]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	3302      	adds	r3, #2
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	b29a      	uxth	r2, r3
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	3303      	adds	r3, #3
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	021b      	lsls	r3, r3, #8
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	4313      	orrs	r3, r2
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	791a      	ldrb	r2, [r3, #4]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	795a      	ldrb	r2, [r3, #5]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	799a      	ldrb	r2, [r3, #6]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	79da      	ldrb	r2, [r3, #7]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	79db      	ldrb	r3, [r3, #7]
 80071d6:	2b20      	cmp	r3, #32
 80071d8:	dc0f      	bgt.n	80071fa <USBH_ParseDevDesc+0x82>
 80071da:	2b08      	cmp	r3, #8
 80071dc:	db14      	blt.n	8007208 <USBH_ParseDevDesc+0x90>
 80071de:	3b08      	subs	r3, #8
 80071e0:	4a2d      	ldr	r2, [pc, #180]	; (8007298 <USBH_ParseDevDesc+0x120>)
 80071e2:	fa22 f303 	lsr.w	r3, r2, r3
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	bf14      	ite	ne
 80071ee:	2301      	movne	r3, #1
 80071f0:	2300      	moveq	r3, #0
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d102      	bne.n	80071fe <USBH_ParseDevDesc+0x86>
 80071f8:	e006      	b.n	8007208 <USBH_ParseDevDesc+0x90>
 80071fa:	2b40      	cmp	r3, #64	; 0x40
 80071fc:	d104      	bne.n	8007208 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	79da      	ldrb	r2, [r3, #7]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	71da      	strb	r2, [r3, #7]
      break;
 8007206:	e003      	b.n	8007210 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2240      	movs	r2, #64	; 0x40
 800720c:	71da      	strb	r2, [r3, #7]
      break;
 800720e:	bf00      	nop
  }

  if (length > 8U)
 8007210:	88fb      	ldrh	r3, [r7, #6]
 8007212:	2b08      	cmp	r3, #8
 8007214:	d939      	bls.n	800728a <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	3308      	adds	r3, #8
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	b29a      	uxth	r2, r3
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	3309      	adds	r3, #9
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	b29b      	uxth	r3, r3
 8007226:	021b      	lsls	r3, r3, #8
 8007228:	b29b      	uxth	r3, r3
 800722a:	4313      	orrs	r3, r2
 800722c:	b29a      	uxth	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	330a      	adds	r3, #10
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	b29a      	uxth	r2, r3
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	330b      	adds	r3, #11
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	b29b      	uxth	r3, r3
 8007242:	021b      	lsls	r3, r3, #8
 8007244:	b29b      	uxth	r3, r3
 8007246:	4313      	orrs	r3, r2
 8007248:	b29a      	uxth	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	330c      	adds	r3, #12
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	b29a      	uxth	r2, r3
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	330d      	adds	r3, #13
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	b29b      	uxth	r3, r3
 800725e:	021b      	lsls	r3, r3, #8
 8007260:	b29b      	uxth	r3, r3
 8007262:	4313      	orrs	r3, r2
 8007264:	b29a      	uxth	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	7b9a      	ldrb	r2, [r3, #14]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	7bda      	ldrb	r2, [r3, #15]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	7c1a      	ldrb	r2, [r3, #16]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	7c5a      	ldrb	r2, [r3, #17]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	745a      	strb	r2, [r3, #17]
  }
}
 800728a:	bf00      	nop
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	01000101 	.word	0x01000101

0800729c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b08c      	sub	sp, #48	; 0x30
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	4613      	mov	r3, r2
 80072a8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80072b0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80072bc:	2300      	movs	r3, #0
 80072be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	781a      	ldrb	r2, [r3, #0]
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	785a      	ldrb	r2, [r3, #1]
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	3302      	adds	r3, #2
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	3303      	adds	r3, #3
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	021b      	lsls	r3, r3, #8
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	4313      	orrs	r3, r2
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072f8:	bf28      	it	cs
 80072fa:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80072fe:	b29a      	uxth	r2, r3
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	791a      	ldrb	r2, [r3, #4]
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	795a      	ldrb	r2, [r3, #5]
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	799a      	ldrb	r2, [r3, #6]
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	79da      	ldrb	r2, [r3, #7]
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	7a1a      	ldrb	r2, [r3, #8]
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	2b09      	cmp	r3, #9
 8007332:	d002      	beq.n	800733a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	2209      	movs	r2, #9
 8007338:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800733a:	88fb      	ldrh	r3, [r7, #6]
 800733c:	2b09      	cmp	r3, #9
 800733e:	f240 809d 	bls.w	800747c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007342:	2309      	movs	r3, #9
 8007344:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007346:	2300      	movs	r3, #0
 8007348:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800734a:	e081      	b.n	8007450 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800734c:	f107 0316 	add.w	r3, r7, #22
 8007350:	4619      	mov	r1, r3
 8007352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007354:	f000 f99f 	bl	8007696 <USBH_GetNextDesc>
 8007358:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800735a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735c:	785b      	ldrb	r3, [r3, #1]
 800735e:	2b04      	cmp	r3, #4
 8007360:	d176      	bne.n	8007450 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	2b09      	cmp	r3, #9
 8007368:	d002      	beq.n	8007370 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800736a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736c:	2209      	movs	r2, #9
 800736e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007374:	221a      	movs	r2, #26
 8007376:	fb02 f303 	mul.w	r3, r2, r3
 800737a:	3308      	adds	r3, #8
 800737c:	6a3a      	ldr	r2, [r7, #32]
 800737e:	4413      	add	r3, r2
 8007380:	3302      	adds	r3, #2
 8007382:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007384:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007386:	69f8      	ldr	r0, [r7, #28]
 8007388:	f000 f87e 	bl	8007488 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007392:	2300      	movs	r3, #0
 8007394:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007396:	e043      	b.n	8007420 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007398:	f107 0316 	add.w	r3, r7, #22
 800739c:	4619      	mov	r1, r3
 800739e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073a0:	f000 f979 	bl	8007696 <USBH_GetNextDesc>
 80073a4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80073a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a8:	785b      	ldrb	r3, [r3, #1]
 80073aa:	2b05      	cmp	r3, #5
 80073ac:	d138      	bne.n	8007420 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	795b      	ldrb	r3, [r3, #5]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d10f      	bne.n	80073d6 <USBH_ParseCfgDesc+0x13a>
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	799b      	ldrb	r3, [r3, #6]
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d10b      	bne.n	80073d6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	79db      	ldrb	r3, [r3, #7]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10f      	bne.n	80073e6 <USBH_ParseCfgDesc+0x14a>
 80073c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	2b09      	cmp	r3, #9
 80073cc:	d00b      	beq.n	80073e6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	2209      	movs	r2, #9
 80073d2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80073d4:	e007      	b.n	80073e6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80073d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	2b07      	cmp	r3, #7
 80073dc:	d004      	beq.n	80073e8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80073de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e0:	2207      	movs	r2, #7
 80073e2:	701a      	strb	r2, [r3, #0]
 80073e4:	e000      	b.n	80073e8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80073e6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80073e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80073f0:	3201      	adds	r2, #1
 80073f2:	00d2      	lsls	r2, r2, #3
 80073f4:	211a      	movs	r1, #26
 80073f6:	fb01 f303 	mul.w	r3, r1, r3
 80073fa:	4413      	add	r3, r2
 80073fc:	3308      	adds	r3, #8
 80073fe:	6a3a      	ldr	r2, [r7, #32]
 8007400:	4413      	add	r3, r2
 8007402:	3304      	adds	r3, #4
 8007404:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007408:	69b9      	ldr	r1, [r7, #24]
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f000 f86b 	bl	80074e6 <USBH_ParseEPDesc>
 8007410:	4603      	mov	r3, r0
 8007412:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007416:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800741a:	3301      	adds	r3, #1
 800741c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	791b      	ldrb	r3, [r3, #4]
 8007424:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007428:	429a      	cmp	r2, r3
 800742a:	d204      	bcs.n	8007436 <USBH_ParseCfgDesc+0x19a>
 800742c:	6a3b      	ldr	r3, [r7, #32]
 800742e:	885a      	ldrh	r2, [r3, #2]
 8007430:	8afb      	ldrh	r3, [r7, #22]
 8007432:	429a      	cmp	r2, r3
 8007434:	d8b0      	bhi.n	8007398 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	791b      	ldrb	r3, [r3, #4]
 800743a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800743e:	429a      	cmp	r2, r3
 8007440:	d201      	bcs.n	8007446 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007442:	2303      	movs	r3, #3
 8007444:	e01c      	b.n	8007480 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007446:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800744a:	3301      	adds	r3, #1
 800744c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007454:	2b01      	cmp	r3, #1
 8007456:	d805      	bhi.n	8007464 <USBH_ParseCfgDesc+0x1c8>
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	885a      	ldrh	r2, [r3, #2]
 800745c:	8afb      	ldrh	r3, [r7, #22]
 800745e:	429a      	cmp	r2, r3
 8007460:	f63f af74 	bhi.w	800734c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	791b      	ldrb	r3, [r3, #4]
 8007468:	2b02      	cmp	r3, #2
 800746a:	bf28      	it	cs
 800746c:	2302      	movcs	r3, #2
 800746e:	b2db      	uxtb	r3, r3
 8007470:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007474:	429a      	cmp	r2, r3
 8007476:	d201      	bcs.n	800747c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007478:	2303      	movs	r3, #3
 800747a:	e001      	b.n	8007480 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800747c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007480:	4618      	mov	r0, r3
 8007482:	3730      	adds	r7, #48	; 0x30
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	781a      	ldrb	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	785a      	ldrb	r2, [r3, #1]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	789a      	ldrb	r2, [r3, #2]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	78da      	ldrb	r2, [r3, #3]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	791a      	ldrb	r2, [r3, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	795a      	ldrb	r2, [r3, #5]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	799a      	ldrb	r2, [r3, #6]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	79da      	ldrb	r2, [r3, #7]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	7a1a      	ldrb	r2, [r3, #8]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	721a      	strb	r2, [r3, #8]
}
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b087      	sub	sp, #28
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80074f2:	2300      	movs	r3, #0
 80074f4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	781a      	ldrb	r2, [r3, #0]
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	785a      	ldrb	r2, [r3, #1]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	789a      	ldrb	r2, [r3, #2]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	78da      	ldrb	r2, [r3, #3]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	3304      	adds	r3, #4
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	b29a      	uxth	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3305      	adds	r3, #5
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	b29b      	uxth	r3, r3
 8007526:	021b      	lsls	r3, r3, #8
 8007528:	b29b      	uxth	r3, r3
 800752a:	4313      	orrs	r3, r2
 800752c:	b29a      	uxth	r2, r3
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	799a      	ldrb	r2, [r3, #6]
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	889b      	ldrh	r3, [r3, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d102      	bne.n	8007548 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007542:	2303      	movs	r3, #3
 8007544:	75fb      	strb	r3, [r7, #23]
 8007546:	e033      	b.n	80075b0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	889b      	ldrh	r3, [r3, #4]
 800754c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007550:	f023 0307 	bic.w	r3, r3, #7
 8007554:	b29a      	uxth	r2, r3
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	889b      	ldrh	r3, [r3, #4]
 800755e:	b21a      	sxth	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3304      	adds	r3, #4
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	b299      	uxth	r1, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3305      	adds	r3, #5
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	b29b      	uxth	r3, r3
 8007570:	021b      	lsls	r3, r3, #8
 8007572:	b29b      	uxth	r3, r3
 8007574:	430b      	orrs	r3, r1
 8007576:	b29b      	uxth	r3, r3
 8007578:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800757c:	2b00      	cmp	r3, #0
 800757e:	d110      	bne.n	80075a2 <USBH_ParseEPDesc+0xbc>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	3304      	adds	r3, #4
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	b299      	uxth	r1, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3305      	adds	r3, #5
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	b29b      	uxth	r3, r3
 8007590:	021b      	lsls	r3, r3, #8
 8007592:	b29b      	uxth	r3, r3
 8007594:	430b      	orrs	r3, r1
 8007596:	b29b      	uxth	r3, r3
 8007598:	b21b      	sxth	r3, r3
 800759a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800759e:	b21b      	sxth	r3, r3
 80075a0:	e001      	b.n	80075a6 <USBH_ParseEPDesc+0xc0>
 80075a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075a6:	4313      	orrs	r3, r2
 80075a8:	b21b      	sxth	r3, r3
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d116      	bne.n	80075e8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	78db      	ldrb	r3, [r3, #3]
 80075be:	f003 0303 	and.w	r3, r3, #3
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d005      	beq.n	80075d2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	78db      	ldrb	r3, [r3, #3]
 80075ca:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d127      	bne.n	8007622 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	799b      	ldrb	r3, [r3, #6]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <USBH_ParseEPDesc+0xfc>
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	799b      	ldrb	r3, [r3, #6]
 80075de:	2b10      	cmp	r3, #16
 80075e0:	d91f      	bls.n	8007622 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80075e2:	2303      	movs	r3, #3
 80075e4:	75fb      	strb	r3, [r7, #23]
 80075e6:	e01c      	b.n	8007622 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	78db      	ldrb	r3, [r3, #3]
 80075ec:	f003 0303 	and.w	r3, r3, #3
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d10a      	bne.n	800760a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	799b      	ldrb	r3, [r3, #6]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d003      	beq.n	8007604 <USBH_ParseEPDesc+0x11e>
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	799b      	ldrb	r3, [r3, #6]
 8007600:	2b10      	cmp	r3, #16
 8007602:	d90e      	bls.n	8007622 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007604:	2303      	movs	r3, #3
 8007606:	75fb      	strb	r3, [r7, #23]
 8007608:	e00b      	b.n	8007622 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	78db      	ldrb	r3, [r3, #3]
 800760e:	f003 0303 	and.w	r3, r3, #3
 8007612:	2b03      	cmp	r3, #3
 8007614:	d105      	bne.n	8007622 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	799b      	ldrb	r3, [r3, #6]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800761e:	2303      	movs	r3, #3
 8007620:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007622:	7dfb      	ldrb	r3, [r7, #23]
}
 8007624:	4618      	mov	r0, r3
 8007626:	371c      	adds	r7, #28
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007630:	b480      	push	{r7}
 8007632:	b087      	sub	sp, #28
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	4613      	mov	r3, r2
 800763c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3301      	adds	r3, #1
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	2b03      	cmp	r3, #3
 8007646:	d120      	bne.n	800768a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	1e9a      	subs	r2, r3, #2
 800764e:	88fb      	ldrh	r3, [r7, #6]
 8007650:	4293      	cmp	r3, r2
 8007652:	bf28      	it	cs
 8007654:	4613      	movcs	r3, r2
 8007656:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	3302      	adds	r3, #2
 800765c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800765e:	2300      	movs	r3, #0
 8007660:	82fb      	strh	r3, [r7, #22]
 8007662:	e00b      	b.n	800767c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007664:	8afb      	ldrh	r3, [r7, #22]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	4413      	add	r3, r2
 800766a:	781a      	ldrb	r2, [r3, #0]
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	3301      	adds	r3, #1
 8007674:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007676:	8afb      	ldrh	r3, [r7, #22]
 8007678:	3302      	adds	r3, #2
 800767a:	82fb      	strh	r3, [r7, #22]
 800767c:	8afa      	ldrh	r2, [r7, #22]
 800767e:	8abb      	ldrh	r3, [r7, #20]
 8007680:	429a      	cmp	r2, r3
 8007682:	d3ef      	bcc.n	8007664 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2200      	movs	r2, #0
 8007688:	701a      	strb	r2, [r3, #0]
  }
}
 800768a:	bf00      	nop
 800768c:	371c      	adds	r7, #28
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007696:	b480      	push	{r7}
 8007698:	b085      	sub	sp, #20
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	881a      	ldrh	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	4413      	add	r3, r2
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4413      	add	r3, r2
 80076bc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80076be:	68fb      	ldr	r3, [r7, #12]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	4613      	mov	r3, r2
 80076d8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80076da:	2301      	movs	r3, #1
 80076dc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	789b      	ldrb	r3, [r3, #2]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d002      	beq.n	80076ec <USBH_CtlReq+0x20>
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d00f      	beq.n	800770a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80076ea:	e027      	b.n	800773c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	88fa      	ldrh	r2, [r7, #6]
 80076f6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2201      	movs	r2, #1
 80076fc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2202      	movs	r2, #2
 8007702:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007704:	2301      	movs	r3, #1
 8007706:	75fb      	strb	r3, [r7, #23]
      break;
 8007708:	e018      	b.n	800773c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f000 f81c 	bl	8007748 <USBH_HandleControl>
 8007710:	4603      	mov	r3, r0
 8007712:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007714:	7dfb      	ldrb	r3, [r7, #23]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d002      	beq.n	8007720 <USBH_CtlReq+0x54>
 800771a:	7dfb      	ldrb	r3, [r7, #23]
 800771c:	2b03      	cmp	r3, #3
 800771e:	d106      	bne.n	800772e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2201      	movs	r2, #1
 8007724:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	761a      	strb	r2, [r3, #24]
      break;
 800772c:	e005      	b.n	800773a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800772e:	7dfb      	ldrb	r3, [r7, #23]
 8007730:	2b02      	cmp	r3, #2
 8007732:	d102      	bne.n	800773a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2201      	movs	r2, #1
 8007738:	709a      	strb	r2, [r3, #2]
      break;
 800773a:	bf00      	nop
  }
  return status;
 800773c:	7dfb      	ldrb	r3, [r7, #23]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3718      	adds	r7, #24
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
	...

08007748 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af02      	add	r7, sp, #8
 800774e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007750:	2301      	movs	r3, #1
 8007752:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007754:	2300      	movs	r3, #0
 8007756:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	7e1b      	ldrb	r3, [r3, #24]
 800775c:	3b01      	subs	r3, #1
 800775e:	2b0a      	cmp	r3, #10
 8007760:	f200 8156 	bhi.w	8007a10 <USBH_HandleControl+0x2c8>
 8007764:	a201      	add	r2, pc, #4	; (adr r2, 800776c <USBH_HandleControl+0x24>)
 8007766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776a:	bf00      	nop
 800776c:	08007799 	.word	0x08007799
 8007770:	080077b3 	.word	0x080077b3
 8007774:	0800781d 	.word	0x0800781d
 8007778:	08007843 	.word	0x08007843
 800777c:	0800787b 	.word	0x0800787b
 8007780:	080078a5 	.word	0x080078a5
 8007784:	080078f7 	.word	0x080078f7
 8007788:	08007919 	.word	0x08007919
 800778c:	08007955 	.word	0x08007955
 8007790:	0800797b 	.word	0x0800797b
 8007794:	080079b9 	.word	0x080079b9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f103 0110 	add.w	r1, r3, #16
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	795b      	ldrb	r3, [r3, #5]
 80077a2:	461a      	mov	r2, r3
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f943 	bl	8007a30 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2202      	movs	r2, #2
 80077ae:	761a      	strb	r2, [r3, #24]
      break;
 80077b0:	e139      	b.n	8007a26 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	795b      	ldrb	r3, [r3, #5]
 80077b6:	4619      	mov	r1, r3
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fcc5 	bl	8008148 <USBH_LL_GetURBState>
 80077be:	4603      	mov	r3, r0
 80077c0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80077c2:	7bbb      	ldrb	r3, [r7, #14]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d11e      	bne.n	8007806 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	7c1b      	ldrb	r3, [r3, #16]
 80077cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80077d0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	8adb      	ldrh	r3, [r3, #22]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00a      	beq.n	80077f0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80077da:	7b7b      	ldrb	r3, [r7, #13]
 80077dc:	2b80      	cmp	r3, #128	; 0x80
 80077de:	d103      	bne.n	80077e8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2203      	movs	r2, #3
 80077e4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80077e6:	e115      	b.n	8007a14 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2205      	movs	r2, #5
 80077ec:	761a      	strb	r2, [r3, #24]
      break;
 80077ee:	e111      	b.n	8007a14 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80077f0:	7b7b      	ldrb	r3, [r7, #13]
 80077f2:	2b80      	cmp	r3, #128	; 0x80
 80077f4:	d103      	bne.n	80077fe <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2209      	movs	r2, #9
 80077fa:	761a      	strb	r2, [r3, #24]
      break;
 80077fc:	e10a      	b.n	8007a14 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2207      	movs	r2, #7
 8007802:	761a      	strb	r2, [r3, #24]
      break;
 8007804:	e106      	b.n	8007a14 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	2b04      	cmp	r3, #4
 800780a:	d003      	beq.n	8007814 <USBH_HandleControl+0xcc>
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	2b02      	cmp	r3, #2
 8007810:	f040 8100 	bne.w	8007a14 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	220b      	movs	r2, #11
 8007818:	761a      	strb	r2, [r3, #24]
      break;
 800781a:	e0fb      	b.n	8007a14 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007822:	b29a      	uxth	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6899      	ldr	r1, [r3, #8]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	899a      	ldrh	r2, [r3, #12]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	791b      	ldrb	r3, [r3, #4]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f93a 	bl	8007aae <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2204      	movs	r2, #4
 800783e:	761a      	strb	r2, [r3, #24]
      break;
 8007840:	e0f1      	b.n	8007a26 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	791b      	ldrb	r3, [r3, #4]
 8007846:	4619      	mov	r1, r3
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fc7d 	bl	8008148 <USBH_LL_GetURBState>
 800784e:	4603      	mov	r3, r0
 8007850:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007852:	7bbb      	ldrb	r3, [r7, #14]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d102      	bne.n	800785e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2209      	movs	r2, #9
 800785c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800785e:	7bbb      	ldrb	r3, [r7, #14]
 8007860:	2b05      	cmp	r3, #5
 8007862:	d102      	bne.n	800786a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007864:	2303      	movs	r3, #3
 8007866:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007868:	e0d6      	b.n	8007a18 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800786a:	7bbb      	ldrb	r3, [r7, #14]
 800786c:	2b04      	cmp	r3, #4
 800786e:	f040 80d3 	bne.w	8007a18 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	220b      	movs	r2, #11
 8007876:	761a      	strb	r2, [r3, #24]
      break;
 8007878:	e0ce      	b.n	8007a18 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6899      	ldr	r1, [r3, #8]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	899a      	ldrh	r2, [r3, #12]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	795b      	ldrb	r3, [r3, #5]
 8007886:	2001      	movs	r0, #1
 8007888:	9000      	str	r0, [sp, #0]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f8ea 	bl	8007a64 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007896:	b29a      	uxth	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2206      	movs	r2, #6
 80078a0:	761a      	strb	r2, [r3, #24]
      break;
 80078a2:	e0c0      	b.n	8007a26 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	795b      	ldrb	r3, [r3, #5]
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fc4c 	bl	8008148 <USBH_LL_GetURBState>
 80078b0:	4603      	mov	r3, r0
 80078b2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d103      	bne.n	80078c2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2207      	movs	r2, #7
 80078be:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80078c0:	e0ac      	b.n	8007a1c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80078c2:	7bbb      	ldrb	r3, [r7, #14]
 80078c4:	2b05      	cmp	r3, #5
 80078c6:	d105      	bne.n	80078d4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	220c      	movs	r2, #12
 80078cc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80078ce:	2303      	movs	r3, #3
 80078d0:	73fb      	strb	r3, [r7, #15]
      break;
 80078d2:	e0a3      	b.n	8007a1c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80078d4:	7bbb      	ldrb	r3, [r7, #14]
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d103      	bne.n	80078e2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2205      	movs	r2, #5
 80078de:	761a      	strb	r2, [r3, #24]
      break;
 80078e0:	e09c      	b.n	8007a1c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80078e2:	7bbb      	ldrb	r3, [r7, #14]
 80078e4:	2b04      	cmp	r3, #4
 80078e6:	f040 8099 	bne.w	8007a1c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	220b      	movs	r2, #11
 80078ee:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80078f0:	2302      	movs	r3, #2
 80078f2:	73fb      	strb	r3, [r7, #15]
      break;
 80078f4:	e092      	b.n	8007a1c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	791b      	ldrb	r3, [r3, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	2100      	movs	r1, #0
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f8d5 	bl	8007aae <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800790a:	b29a      	uxth	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2208      	movs	r2, #8
 8007914:	761a      	strb	r2, [r3, #24]

      break;
 8007916:	e086      	b.n	8007a26 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	791b      	ldrb	r3, [r3, #4]
 800791c:	4619      	mov	r1, r3
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fc12 	bl	8008148 <USBH_LL_GetURBState>
 8007924:	4603      	mov	r3, r0
 8007926:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007928:	7bbb      	ldrb	r3, [r7, #14]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d105      	bne.n	800793a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	220d      	movs	r2, #13
 8007932:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007938:	e072      	b.n	8007a20 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800793a:	7bbb      	ldrb	r3, [r7, #14]
 800793c:	2b04      	cmp	r3, #4
 800793e:	d103      	bne.n	8007948 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	220b      	movs	r2, #11
 8007944:	761a      	strb	r2, [r3, #24]
      break;
 8007946:	e06b      	b.n	8007a20 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	2b05      	cmp	r3, #5
 800794c:	d168      	bne.n	8007a20 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800794e:	2303      	movs	r3, #3
 8007950:	73fb      	strb	r3, [r7, #15]
      break;
 8007952:	e065      	b.n	8007a20 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	795b      	ldrb	r3, [r3, #5]
 8007958:	2201      	movs	r2, #1
 800795a:	9200      	str	r2, [sp, #0]
 800795c:	2200      	movs	r2, #0
 800795e:	2100      	movs	r1, #0
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f87f 	bl	8007a64 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800796c:	b29a      	uxth	r2, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	220a      	movs	r2, #10
 8007976:	761a      	strb	r2, [r3, #24]
      break;
 8007978:	e055      	b.n	8007a26 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	795b      	ldrb	r3, [r3, #5]
 800797e:	4619      	mov	r1, r3
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fbe1 	bl	8008148 <USBH_LL_GetURBState>
 8007986:	4603      	mov	r3, r0
 8007988:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800798a:	7bbb      	ldrb	r3, [r7, #14]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d105      	bne.n	800799c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	220d      	movs	r2, #13
 8007998:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800799a:	e043      	b.n	8007a24 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800799c:	7bbb      	ldrb	r3, [r7, #14]
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d103      	bne.n	80079aa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2209      	movs	r2, #9
 80079a6:	761a      	strb	r2, [r3, #24]
      break;
 80079a8:	e03c      	b.n	8007a24 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	2b04      	cmp	r3, #4
 80079ae:	d139      	bne.n	8007a24 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	220b      	movs	r2, #11
 80079b4:	761a      	strb	r2, [r3, #24]
      break;
 80079b6:	e035      	b.n	8007a24 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	7e5b      	ldrb	r3, [r3, #25]
 80079bc:	3301      	adds	r3, #1
 80079be:	b2da      	uxtb	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	765a      	strb	r2, [r3, #25]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	7e5b      	ldrb	r3, [r3, #25]
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d806      	bhi.n	80079da <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80079d8:	e025      	b.n	8007a26 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079e0:	2106      	movs	r1, #6
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	795b      	ldrb	r3, [r3, #5]
 80079f0:	4619      	mov	r1, r3
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f90c 	bl	8007c10 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	791b      	ldrb	r3, [r3, #4]
 80079fc:	4619      	mov	r1, r3
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f906 	bl	8007c10 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a0e:	e00a      	b.n	8007a26 <USBH_HandleControl+0x2de>

    default:
      break;
 8007a10:	bf00      	nop
 8007a12:	e008      	b.n	8007a26 <USBH_HandleControl+0x2de>
      break;
 8007a14:	bf00      	nop
 8007a16:	e006      	b.n	8007a26 <USBH_HandleControl+0x2de>
      break;
 8007a18:	bf00      	nop
 8007a1a:	e004      	b.n	8007a26 <USBH_HandleControl+0x2de>
      break;
 8007a1c:	bf00      	nop
 8007a1e:	e002      	b.n	8007a26 <USBH_HandleControl+0x2de>
      break;
 8007a20:	bf00      	nop
 8007a22:	e000      	b.n	8007a26 <USBH_HandleControl+0x2de>
      break;
 8007a24:	bf00      	nop
  }

  return status;
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b088      	sub	sp, #32
 8007a34:	af04      	add	r7, sp, #16
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a3e:	79f9      	ldrb	r1, [r7, #7]
 8007a40:	2300      	movs	r3, #0
 8007a42:	9303      	str	r3, [sp, #12]
 8007a44:	2308      	movs	r3, #8
 8007a46:	9302      	str	r3, [sp, #8]
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	9301      	str	r3, [sp, #4]
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	2300      	movs	r3, #0
 8007a52:	2200      	movs	r2, #0
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 fb46 	bl	80080e6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b088      	sub	sp, #32
 8007a68:	af04      	add	r7, sp, #16
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	4611      	mov	r1, r2
 8007a70:	461a      	mov	r2, r3
 8007a72:	460b      	mov	r3, r1
 8007a74:	80fb      	strh	r3, [r7, #6]
 8007a76:	4613      	mov	r3, r2
 8007a78:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007a84:	2300      	movs	r3, #0
 8007a86:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a88:	7979      	ldrb	r1, [r7, #5]
 8007a8a:	7e3b      	ldrb	r3, [r7, #24]
 8007a8c:	9303      	str	r3, [sp, #12]
 8007a8e:	88fb      	ldrh	r3, [r7, #6]
 8007a90:	9302      	str	r3, [sp, #8]
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	9301      	str	r3, [sp, #4]
 8007a96:	2301      	movs	r3, #1
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f000 fb21 	bl	80080e6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b088      	sub	sp, #32
 8007ab2:	af04      	add	r7, sp, #16
 8007ab4:	60f8      	str	r0, [r7, #12]
 8007ab6:	60b9      	str	r1, [r7, #8]
 8007ab8:	4611      	mov	r1, r2
 8007aba:	461a      	mov	r2, r3
 8007abc:	460b      	mov	r3, r1
 8007abe:	80fb      	strh	r3, [r7, #6]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ac4:	7979      	ldrb	r1, [r7, #5]
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	9303      	str	r3, [sp, #12]
 8007aca:	88fb      	ldrh	r3, [r7, #6]
 8007acc:	9302      	str	r3, [sp, #8]
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	9301      	str	r3, [sp, #4]
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	2201      	movs	r2, #1
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f000 fb03 	bl	80080e6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007ae0:	2300      	movs	r3, #0

}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b088      	sub	sp, #32
 8007aee:	af04      	add	r7, sp, #16
 8007af0:	60f8      	str	r0, [r7, #12]
 8007af2:	60b9      	str	r1, [r7, #8]
 8007af4:	4611      	mov	r1, r2
 8007af6:	461a      	mov	r2, r3
 8007af8:	460b      	mov	r3, r1
 8007afa:	80fb      	strh	r3, [r7, #6]
 8007afc:	4613      	mov	r3, r2
 8007afe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d001      	beq.n	8007b0e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b0e:	7979      	ldrb	r1, [r7, #5]
 8007b10:	7e3b      	ldrb	r3, [r7, #24]
 8007b12:	9303      	str	r3, [sp, #12]
 8007b14:	88fb      	ldrh	r3, [r7, #6]
 8007b16:	9302      	str	r3, [sp, #8]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	9301      	str	r3, [sp, #4]
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	2302      	movs	r3, #2
 8007b22:	2200      	movs	r2, #0
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f000 fade 	bl	80080e6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b088      	sub	sp, #32
 8007b38:	af04      	add	r7, sp, #16
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	4611      	mov	r1, r2
 8007b40:	461a      	mov	r2, r3
 8007b42:	460b      	mov	r3, r1
 8007b44:	80fb      	strh	r3, [r7, #6]
 8007b46:	4613      	mov	r3, r2
 8007b48:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b4a:	7979      	ldrb	r1, [r7, #5]
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	9303      	str	r3, [sp, #12]
 8007b50:	88fb      	ldrh	r3, [r7, #6]
 8007b52:	9302      	str	r3, [sp, #8]
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	9301      	str	r3, [sp, #4]
 8007b58:	2301      	movs	r3, #1
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	2201      	movs	r2, #1
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 fac0 	bl	80080e6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af04      	add	r7, sp, #16
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	4608      	mov	r0, r1
 8007b7a:	4611      	mov	r1, r2
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	4603      	mov	r3, r0
 8007b80:	70fb      	strb	r3, [r7, #3]
 8007b82:	460b      	mov	r3, r1
 8007b84:	70bb      	strb	r3, [r7, #2]
 8007b86:	4613      	mov	r3, r2
 8007b88:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007b8a:	7878      	ldrb	r0, [r7, #1]
 8007b8c:	78ba      	ldrb	r2, [r7, #2]
 8007b8e:	78f9      	ldrb	r1, [r7, #3]
 8007b90:	8b3b      	ldrh	r3, [r7, #24]
 8007b92:	9302      	str	r3, [sp, #8]
 8007b94:	7d3b      	ldrb	r3, [r7, #20]
 8007b96:	9301      	str	r3, [sp, #4]
 8007b98:	7c3b      	ldrb	r3, [r7, #16]
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fa53 	bl	800804a <USBH_LL_OpenPipe>

  return USBH_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b082      	sub	sp, #8
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007bba:	78fb      	ldrb	r3, [r7, #3]
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fa72 	bl	80080a8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b084      	sub	sp, #16
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f836 	bl	8007c4c <USBH_GetFreePipe>
 8007be0:	4603      	mov	r3, r0
 8007be2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007be4:	89fb      	ldrh	r3, [r7, #14]
 8007be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d00a      	beq.n	8007c04 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007bee:	78fa      	ldrb	r2, [r7, #3]
 8007bf0:	89fb      	ldrh	r3, [r7, #14]
 8007bf2:	f003 030f 	and.w	r3, r3, #15
 8007bf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bfa:	6879      	ldr	r1, [r7, #4]
 8007bfc:	33e0      	adds	r3, #224	; 0xe0
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	440b      	add	r3, r1
 8007c02:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007c04:	89fb      	ldrh	r3, [r7, #14]
 8007c06:	b2db      	uxtb	r3, r3
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007c1c:	78fb      	ldrb	r3, [r7, #3]
 8007c1e:	2b0f      	cmp	r3, #15
 8007c20:	d80d      	bhi.n	8007c3e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007c22:	78fb      	ldrb	r3, [r7, #3]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	33e0      	adds	r3, #224	; 0xe0
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4413      	add	r3, r2
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	78fb      	ldrb	r3, [r7, #3]
 8007c30:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007c34:	6879      	ldr	r1, [r7, #4]
 8007c36:	33e0      	adds	r3, #224	; 0xe0
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	440b      	add	r3, r1
 8007c3c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007c58:	2300      	movs	r3, #0
 8007c5a:	73fb      	strb	r3, [r7, #15]
 8007c5c:	e00f      	b.n	8007c7e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	33e0      	adds	r3, #224	; 0xe0
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d102      	bne.n	8007c78 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007c72:	7bfb      	ldrb	r3, [r7, #15]
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	e007      	b.n	8007c88 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	73fb      	strb	r3, [r7, #15]
 8007c7e:	7bfb      	ldrb	r3, [r7, #15]
 8007c80:	2b0f      	cmp	r3, #15
 8007c82:	d9ec      	bls.n	8007c5e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007c84:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007c98:	2201      	movs	r2, #1
 8007c9a:	490e      	ldr	r1, [pc, #56]	; (8007cd4 <MX_USB_HOST_Init+0x40>)
 8007c9c:	480e      	ldr	r0, [pc, #56]	; (8007cd8 <MX_USB_HOST_Init+0x44>)
 8007c9e:	f7fe fba5 	bl	80063ec <USBH_Init>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d001      	beq.n	8007cac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007ca8:	f7f8 fe6a 	bl	8000980 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007cac:	490b      	ldr	r1, [pc, #44]	; (8007cdc <MX_USB_HOST_Init+0x48>)
 8007cae:	480a      	ldr	r0, [pc, #40]	; (8007cd8 <MX_USB_HOST_Init+0x44>)
 8007cb0:	f7fe fc2a 	bl	8006508 <USBH_RegisterClass>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d001      	beq.n	8007cbe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007cba:	f7f8 fe61 	bl	8000980 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007cbe:	4806      	ldr	r0, [pc, #24]	; (8007cd8 <MX_USB_HOST_Init+0x44>)
 8007cc0:	f7fe fcae 	bl	8006620 <USBH_Start>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007cca:	f7f8 fe59 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007cce:	bf00      	nop
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	08007cf5 	.word	0x08007cf5
 8007cd8:	200001d8 	.word	0x200001d8
 8007cdc:	2000000c 	.word	0x2000000c

08007ce0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007ce4:	4802      	ldr	r0, [pc, #8]	; (8007cf0 <MX_USB_HOST_Process+0x10>)
 8007ce6:	f7fe fcab 	bl	8006640 <USBH_Process>
}
 8007cea:	bf00      	nop
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	200001d8 	.word	0x200001d8

08007cf4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007d00:	78fb      	ldrb	r3, [r7, #3]
 8007d02:	3b01      	subs	r3, #1
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	d819      	bhi.n	8007d3c <USBH_UserProcess+0x48>
 8007d08:	a201      	add	r2, pc, #4	; (adr r2, 8007d10 <USBH_UserProcess+0x1c>)
 8007d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0e:	bf00      	nop
 8007d10:	08007d3d 	.word	0x08007d3d
 8007d14:	08007d2d 	.word	0x08007d2d
 8007d18:	08007d3d 	.word	0x08007d3d
 8007d1c:	08007d35 	.word	0x08007d35
 8007d20:	08007d25 	.word	0x08007d25
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007d24:	4b09      	ldr	r3, [pc, #36]	; (8007d4c <USBH_UserProcess+0x58>)
 8007d26:	2203      	movs	r2, #3
 8007d28:	701a      	strb	r2, [r3, #0]
  break;
 8007d2a:	e008      	b.n	8007d3e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007d2c:	4b07      	ldr	r3, [pc, #28]	; (8007d4c <USBH_UserProcess+0x58>)
 8007d2e:	2202      	movs	r2, #2
 8007d30:	701a      	strb	r2, [r3, #0]
  break;
 8007d32:	e004      	b.n	8007d3e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007d34:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <USBH_UserProcess+0x58>)
 8007d36:	2201      	movs	r2, #1
 8007d38:	701a      	strb	r2, [r3, #0]
  break;
 8007d3a:	e000      	b.n	8007d3e <USBH_UserProcess+0x4a>

  default:
  break;
 8007d3c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007d3e:	bf00      	nop
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	200005b0 	.word	0x200005b0

08007d50 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08a      	sub	sp, #40	; 0x28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d58:	f107 0314 	add.w	r3, r7, #20
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	601a      	str	r2, [r3, #0]
 8007d60:	605a      	str	r2, [r3, #4]
 8007d62:	609a      	str	r2, [r3, #8]
 8007d64:	60da      	str	r2, [r3, #12]
 8007d66:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d70:	d147      	bne.n	8007e02 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d72:	2300      	movs	r3, #0
 8007d74:	613b      	str	r3, [r7, #16]
 8007d76:	4b25      	ldr	r3, [pc, #148]	; (8007e0c <HAL_HCD_MspInit+0xbc>)
 8007d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7a:	4a24      	ldr	r2, [pc, #144]	; (8007e0c <HAL_HCD_MspInit+0xbc>)
 8007d7c:	f043 0301 	orr.w	r3, r3, #1
 8007d80:	6313      	str	r3, [r2, #48]	; 0x30
 8007d82:	4b22      	ldr	r3, [pc, #136]	; (8007e0c <HAL_HCD_MspInit+0xbc>)
 8007d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	613b      	str	r3, [r7, #16]
 8007d8c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007d8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d94:	2300      	movs	r3, #0
 8007d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007d9c:	f107 0314 	add.w	r3, r7, #20
 8007da0:	4619      	mov	r1, r3
 8007da2:	481b      	ldr	r0, [pc, #108]	; (8007e10 <HAL_HCD_MspInit+0xc0>)
 8007da4:	f7f9 f9c0 	bl	8001128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007da8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dae:	2302      	movs	r3, #2
 8007db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007db2:	2300      	movs	r3, #0
 8007db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007db6:	2300      	movs	r3, #0
 8007db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007dba:	230a      	movs	r3, #10
 8007dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dbe:	f107 0314 	add.w	r3, r7, #20
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	4812      	ldr	r0, [pc, #72]	; (8007e10 <HAL_HCD_MspInit+0xc0>)
 8007dc6:	f7f9 f9af 	bl	8001128 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007dca:	4b10      	ldr	r3, [pc, #64]	; (8007e0c <HAL_HCD_MspInit+0xbc>)
 8007dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dce:	4a0f      	ldr	r2, [pc, #60]	; (8007e0c <HAL_HCD_MspInit+0xbc>)
 8007dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dd4:	6353      	str	r3, [r2, #52]	; 0x34
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60fb      	str	r3, [r7, #12]
 8007dda:	4b0c      	ldr	r3, [pc, #48]	; (8007e0c <HAL_HCD_MspInit+0xbc>)
 8007ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dde:	4a0b      	ldr	r2, [pc, #44]	; (8007e0c <HAL_HCD_MspInit+0xbc>)
 8007de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007de4:	6453      	str	r3, [r2, #68]	; 0x44
 8007de6:	4b09      	ldr	r3, [pc, #36]	; (8007e0c <HAL_HCD_MspInit+0xbc>)
 8007de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dee:	60fb      	str	r3, [r7, #12]
 8007df0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007df2:	2200      	movs	r2, #0
 8007df4:	2100      	movs	r1, #0
 8007df6:	2043      	movs	r0, #67	; 0x43
 8007df8:	f7f9 f95f 	bl	80010ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007dfc:	2043      	movs	r0, #67	; 0x43
 8007dfe:	f7f9 f978 	bl	80010f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e02:	bf00      	nop
 8007e04:	3728      	adds	r7, #40	; 0x28
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	40023800 	.word	0x40023800
 8007e10:	40020000 	.word	0x40020000

08007e14 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7fe ffeb 	bl	8006dfe <USBH_LL_IncTimer>
}
 8007e28:	bf00      	nop
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7ff f823 	bl	8006e8a <USBH_LL_Connect>
}
 8007e44:	bf00      	nop
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7ff f82c 	bl	8006eb8 <USBH_LL_Disconnect>
}
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	460b      	mov	r3, r1
 8007e72:	70fb      	strb	r3, [r7, #3]
 8007e74:	4613      	mov	r3, r2
 8007e76:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7fe ffdd 	bl	8006e52 <USBH_LL_PortEnabled>
}
 8007e98:	bf00      	nop
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fe ffdd 	bl	8006e6e <USBH_LL_PortDisabled>
}
 8007eb4:	bf00      	nop
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d12a      	bne.n	8007f24 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007ece:	4a18      	ldr	r2, [pc, #96]	; (8007f30 <USBH_LL_Init+0x74>)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a15      	ldr	r2, [pc, #84]	; (8007f30 <USBH_LL_Init+0x74>)
 8007eda:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ede:	4b14      	ldr	r3, [pc, #80]	; (8007f30 <USBH_LL_Init+0x74>)
 8007ee0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007ee4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007ee6:	4b12      	ldr	r3, [pc, #72]	; (8007f30 <USBH_LL_Init+0x74>)
 8007ee8:	2208      	movs	r2, #8
 8007eea:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007eec:	4b10      	ldr	r3, [pc, #64]	; (8007f30 <USBH_LL_Init+0x74>)
 8007eee:	2201      	movs	r2, #1
 8007ef0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ef2:	4b0f      	ldr	r3, [pc, #60]	; (8007f30 <USBH_LL_Init+0x74>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007ef8:	4b0d      	ldr	r3, [pc, #52]	; (8007f30 <USBH_LL_Init+0x74>)
 8007efa:	2202      	movs	r2, #2
 8007efc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007efe:	4b0c      	ldr	r3, [pc, #48]	; (8007f30 <USBH_LL_Init+0x74>)
 8007f00:	2200      	movs	r2, #0
 8007f02:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007f04:	480a      	ldr	r0, [pc, #40]	; (8007f30 <USBH_LL_Init+0x74>)
 8007f06:	f7f9 fade 	bl	80014c6 <HAL_HCD_Init>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d001      	beq.n	8007f14 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007f10:	f7f8 fd36 	bl	8000980 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007f14:	4806      	ldr	r0, [pc, #24]	; (8007f30 <USBH_LL_Init+0x74>)
 8007f16:	f7f9 fec2 	bl	8001c9e <HAL_HCD_GetCurrentFrame>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7fe ff5e 	bl	8006de0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	200005b4 	.word	0x200005b4

08007f34 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f40:	2300      	movs	r3, #0
 8007f42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7f9 fe31 	bl	8001bb2 <HAL_HCD_Start>
 8007f50:	4603      	mov	r3, r0
 8007f52:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 f95c 	bl	8008214 <USBH_Get_USB_Status>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f60:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b084      	sub	sp, #16
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7f9 fe39 	bl	8001bf8 <HAL_HCD_Stop>
 8007f86:	4603      	mov	r3, r0
 8007f88:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 f941 	bl	8008214 <USBH_Get_USB_Status>
 8007f92:	4603      	mov	r3, r0
 8007f94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f96:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7f9 fe81 	bl	8001cba <HAL_HCD_GetCurrentSpeed>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d00c      	beq.n	8007fd8 <USBH_LL_GetSpeed+0x38>
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d80d      	bhi.n	8007fde <USBH_LL_GetSpeed+0x3e>
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d002      	beq.n	8007fcc <USBH_LL_GetSpeed+0x2c>
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d003      	beq.n	8007fd2 <USBH_LL_GetSpeed+0x32>
 8007fca:	e008      	b.n	8007fde <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	73fb      	strb	r3, [r7, #15]
    break;
 8007fd0:	e008      	b.n	8007fe4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	73fb      	strb	r3, [r7, #15]
    break;
 8007fd6:	e005      	b.n	8007fe4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007fd8:	2302      	movs	r3, #2
 8007fda:	73fb      	strb	r3, [r7, #15]
    break;
 8007fdc:	e002      	b.n	8007fe4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	73fb      	strb	r3, [r7, #15]
    break;
 8007fe2:	bf00      	nop
  }
  return  speed;
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b084      	sub	sp, #16
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008004:	4618      	mov	r0, r3
 8008006:	f7f9 fe14 	bl	8001c32 <HAL_HCD_ResetPort>
 800800a:	4603      	mov	r3, r0
 800800c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800800e:	7bfb      	ldrb	r3, [r7, #15]
 8008010:	4618      	mov	r0, r3
 8008012:	f000 f8ff 	bl	8008214 <USBH_Get_USB_Status>
 8008016:	4603      	mov	r3, r0
 8008018:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800801a:	7bbb      	ldrb	r3, [r7, #14]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	460b      	mov	r3, r1
 800802e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008036:	78fa      	ldrb	r2, [r7, #3]
 8008038:	4611      	mov	r1, r2
 800803a:	4618      	mov	r0, r3
 800803c:	f7f9 fe1b 	bl	8001c76 <HAL_HCD_HC_GetXferCount>
 8008040:	4603      	mov	r3, r0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800804a:	b590      	push	{r4, r7, lr}
 800804c:	b089      	sub	sp, #36	; 0x24
 800804e:	af04      	add	r7, sp, #16
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	4608      	mov	r0, r1
 8008054:	4611      	mov	r1, r2
 8008056:	461a      	mov	r2, r3
 8008058:	4603      	mov	r3, r0
 800805a:	70fb      	strb	r3, [r7, #3]
 800805c:	460b      	mov	r3, r1
 800805e:	70bb      	strb	r3, [r7, #2]
 8008060:	4613      	mov	r3, r2
 8008062:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008064:	2300      	movs	r3, #0
 8008066:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008072:	787c      	ldrb	r4, [r7, #1]
 8008074:	78ba      	ldrb	r2, [r7, #2]
 8008076:	78f9      	ldrb	r1, [r7, #3]
 8008078:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800807a:	9302      	str	r3, [sp, #8]
 800807c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008080:	9301      	str	r3, [sp, #4]
 8008082:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008086:	9300      	str	r3, [sp, #0]
 8008088:	4623      	mov	r3, r4
 800808a:	f7f9 fa7e 	bl	800158a <HAL_HCD_HC_Init>
 800808e:	4603      	mov	r3, r0
 8008090:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008092:	7bfb      	ldrb	r3, [r7, #15]
 8008094:	4618      	mov	r0, r3
 8008096:	f000 f8bd 	bl	8008214 <USBH_Get_USB_Status>
 800809a:	4603      	mov	r3, r0
 800809c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800809e:	7bbb      	ldrb	r3, [r7, #14]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd90      	pop	{r4, r7, pc}

080080a8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080c2:	78fa      	ldrb	r2, [r7, #3]
 80080c4:	4611      	mov	r1, r2
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7f9 faee 	bl	80016a8 <HAL_HCD_HC_Halt>
 80080cc:	4603      	mov	r3, r0
 80080ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080d0:	7bfb      	ldrb	r3, [r7, #15]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f000 f89e 	bl	8008214 <USBH_Get_USB_Status>
 80080d8:	4603      	mov	r3, r0
 80080da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80080e6:	b590      	push	{r4, r7, lr}
 80080e8:	b089      	sub	sp, #36	; 0x24
 80080ea:	af04      	add	r7, sp, #16
 80080ec:	6078      	str	r0, [r7, #4]
 80080ee:	4608      	mov	r0, r1
 80080f0:	4611      	mov	r1, r2
 80080f2:	461a      	mov	r2, r3
 80080f4:	4603      	mov	r3, r0
 80080f6:	70fb      	strb	r3, [r7, #3]
 80080f8:	460b      	mov	r3, r1
 80080fa:	70bb      	strb	r3, [r7, #2]
 80080fc:	4613      	mov	r3, r2
 80080fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008100:	2300      	movs	r3, #0
 8008102:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800810e:	787c      	ldrb	r4, [r7, #1]
 8008110:	78ba      	ldrb	r2, [r7, #2]
 8008112:	78f9      	ldrb	r1, [r7, #3]
 8008114:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008118:	9303      	str	r3, [sp, #12]
 800811a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800811c:	9302      	str	r3, [sp, #8]
 800811e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008120:	9301      	str	r3, [sp, #4]
 8008122:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	4623      	mov	r3, r4
 800812a:	f7f9 fae1 	bl	80016f0 <HAL_HCD_HC_SubmitRequest>
 800812e:	4603      	mov	r3, r0
 8008130:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008132:	7bfb      	ldrb	r3, [r7, #15]
 8008134:	4618      	mov	r0, r3
 8008136:	f000 f86d 	bl	8008214 <USBH_Get_USB_Status>
 800813a:	4603      	mov	r3, r0
 800813c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800813e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	bd90      	pop	{r4, r7, pc}

08008148 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	460b      	mov	r3, r1
 8008152:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800815a:	78fa      	ldrb	r2, [r7, #3]
 800815c:	4611      	mov	r1, r2
 800815e:	4618      	mov	r0, r3
 8008160:	f7f9 fd75 	bl	8001c4e <HAL_HCD_HC_GetURBState>
 8008164:	4603      	mov	r3, r0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b082      	sub	sp, #8
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	460b      	mov	r3, r1
 8008178:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008180:	2b01      	cmp	r3, #1
 8008182:	d103      	bne.n	800818c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008184:	78fb      	ldrb	r3, [r7, #3]
 8008186:	4618      	mov	r0, r3
 8008188:	f000 f870 	bl	800826c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800818c:	20c8      	movs	r0, #200	; 0xc8
 800818e:	f7f8 fe95 	bl	8000ebc <HAL_Delay>
  return USBH_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	460b      	mov	r3, r1
 80081a6:	70fb      	strb	r3, [r7, #3]
 80081a8:	4613      	mov	r3, r2
 80081aa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081b2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	212c      	movs	r1, #44	; 0x2c
 80081ba:	fb01 f303 	mul.w	r3, r1, r3
 80081be:	4413      	add	r3, r2
 80081c0:	333b      	adds	r3, #59	; 0x3b
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d009      	beq.n	80081dc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80081c8:	78fb      	ldrb	r3, [r7, #3]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	212c      	movs	r1, #44	; 0x2c
 80081ce:	fb01 f303 	mul.w	r3, r1, r3
 80081d2:	4413      	add	r3, r2
 80081d4:	3354      	adds	r3, #84	; 0x54
 80081d6:	78ba      	ldrb	r2, [r7, #2]
 80081d8:	701a      	strb	r2, [r3, #0]
 80081da:	e008      	b.n	80081ee <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80081dc:	78fb      	ldrb	r3, [r7, #3]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	212c      	movs	r1, #44	; 0x2c
 80081e2:	fb01 f303 	mul.w	r3, r1, r3
 80081e6:	4413      	add	r3, r2
 80081e8:	3355      	adds	r3, #85	; 0x55
 80081ea:	78ba      	ldrb	r2, [r7, #2]
 80081ec:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7f8 fe59 	bl	8000ebc <HAL_Delay>
}
 800820a:	bf00      	nop
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
	...

08008214 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	4603      	mov	r3, r0
 800821c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008222:	79fb      	ldrb	r3, [r7, #7]
 8008224:	2b03      	cmp	r3, #3
 8008226:	d817      	bhi.n	8008258 <USBH_Get_USB_Status+0x44>
 8008228:	a201      	add	r2, pc, #4	; (adr r2, 8008230 <USBH_Get_USB_Status+0x1c>)
 800822a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822e:	bf00      	nop
 8008230:	08008241 	.word	0x08008241
 8008234:	08008247 	.word	0x08008247
 8008238:	0800824d 	.word	0x0800824d
 800823c:	08008253 	.word	0x08008253
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	73fb      	strb	r3, [r7, #15]
    break;
 8008244:	e00b      	b.n	800825e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008246:	2302      	movs	r3, #2
 8008248:	73fb      	strb	r3, [r7, #15]
    break;
 800824a:	e008      	b.n	800825e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800824c:	2301      	movs	r3, #1
 800824e:	73fb      	strb	r3, [r7, #15]
    break;
 8008250:	e005      	b.n	800825e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008252:	2302      	movs	r3, #2
 8008254:	73fb      	strb	r3, [r7, #15]
    break;
 8008256:	e002      	b.n	800825e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008258:	2302      	movs	r3, #2
 800825a:	73fb      	strb	r3, [r7, #15]
    break;
 800825c:	bf00      	nop
  }
  return usb_status;
 800825e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	4603      	mov	r3, r0
 8008274:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008276:	79fb      	ldrb	r3, [r7, #7]
 8008278:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800827a:	79fb      	ldrb	r3, [r7, #7]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d102      	bne.n	8008286 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008280:	2300      	movs	r3, #0
 8008282:	73fb      	strb	r3, [r7, #15]
 8008284:	e001      	b.n	800828a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008286:	2301      	movs	r3, #1
 8008288:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800828a:	7bfb      	ldrb	r3, [r7, #15]
 800828c:	461a      	mov	r2, r3
 800828e:	2101      	movs	r1, #1
 8008290:	4803      	ldr	r0, [pc, #12]	; (80082a0 <MX_DriverVbusFS+0x34>)
 8008292:	f7f9 f8e5 	bl	8001460 <HAL_GPIO_WritePin>
}
 8008296:	bf00      	nop
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	40020800 	.word	0x40020800

080082a4 <malloc>:
 80082a4:	4b02      	ldr	r3, [pc, #8]	; (80082b0 <malloc+0xc>)
 80082a6:	4601      	mov	r1, r0
 80082a8:	6818      	ldr	r0, [r3, #0]
 80082aa:	f000 b82b 	b.w	8008304 <_malloc_r>
 80082ae:	bf00      	nop
 80082b0:	20000078 	.word	0x20000078

080082b4 <free>:
 80082b4:	4b02      	ldr	r3, [pc, #8]	; (80082c0 <free+0xc>)
 80082b6:	4601      	mov	r1, r0
 80082b8:	6818      	ldr	r0, [r3, #0]
 80082ba:	f000 b8f3 	b.w	80084a4 <_free_r>
 80082be:	bf00      	nop
 80082c0:	20000078 	.word	0x20000078

080082c4 <sbrk_aligned>:
 80082c4:	b570      	push	{r4, r5, r6, lr}
 80082c6:	4e0e      	ldr	r6, [pc, #56]	; (8008300 <sbrk_aligned+0x3c>)
 80082c8:	460c      	mov	r4, r1
 80082ca:	6831      	ldr	r1, [r6, #0]
 80082cc:	4605      	mov	r5, r0
 80082ce:	b911      	cbnz	r1, 80082d6 <sbrk_aligned+0x12>
 80082d0:	f000 f8ac 	bl	800842c <_sbrk_r>
 80082d4:	6030      	str	r0, [r6, #0]
 80082d6:	4621      	mov	r1, r4
 80082d8:	4628      	mov	r0, r5
 80082da:	f000 f8a7 	bl	800842c <_sbrk_r>
 80082de:	1c43      	adds	r3, r0, #1
 80082e0:	d00a      	beq.n	80082f8 <sbrk_aligned+0x34>
 80082e2:	1cc4      	adds	r4, r0, #3
 80082e4:	f024 0403 	bic.w	r4, r4, #3
 80082e8:	42a0      	cmp	r0, r4
 80082ea:	d007      	beq.n	80082fc <sbrk_aligned+0x38>
 80082ec:	1a21      	subs	r1, r4, r0
 80082ee:	4628      	mov	r0, r5
 80082f0:	f000 f89c 	bl	800842c <_sbrk_r>
 80082f4:	3001      	adds	r0, #1
 80082f6:	d101      	bne.n	80082fc <sbrk_aligned+0x38>
 80082f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80082fc:	4620      	mov	r0, r4
 80082fe:	bd70      	pop	{r4, r5, r6, pc}
 8008300:	200008bc 	.word	0x200008bc

08008304 <_malloc_r>:
 8008304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008308:	1ccd      	adds	r5, r1, #3
 800830a:	f025 0503 	bic.w	r5, r5, #3
 800830e:	3508      	adds	r5, #8
 8008310:	2d0c      	cmp	r5, #12
 8008312:	bf38      	it	cc
 8008314:	250c      	movcc	r5, #12
 8008316:	2d00      	cmp	r5, #0
 8008318:	4607      	mov	r7, r0
 800831a:	db01      	blt.n	8008320 <_malloc_r+0x1c>
 800831c:	42a9      	cmp	r1, r5
 800831e:	d905      	bls.n	800832c <_malloc_r+0x28>
 8008320:	230c      	movs	r3, #12
 8008322:	603b      	str	r3, [r7, #0]
 8008324:	2600      	movs	r6, #0
 8008326:	4630      	mov	r0, r6
 8008328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800832c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008400 <_malloc_r+0xfc>
 8008330:	f000 f868 	bl	8008404 <__malloc_lock>
 8008334:	f8d8 3000 	ldr.w	r3, [r8]
 8008338:	461c      	mov	r4, r3
 800833a:	bb5c      	cbnz	r4, 8008394 <_malloc_r+0x90>
 800833c:	4629      	mov	r1, r5
 800833e:	4638      	mov	r0, r7
 8008340:	f7ff ffc0 	bl	80082c4 <sbrk_aligned>
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	4604      	mov	r4, r0
 8008348:	d155      	bne.n	80083f6 <_malloc_r+0xf2>
 800834a:	f8d8 4000 	ldr.w	r4, [r8]
 800834e:	4626      	mov	r6, r4
 8008350:	2e00      	cmp	r6, #0
 8008352:	d145      	bne.n	80083e0 <_malloc_r+0xdc>
 8008354:	2c00      	cmp	r4, #0
 8008356:	d048      	beq.n	80083ea <_malloc_r+0xe6>
 8008358:	6823      	ldr	r3, [r4, #0]
 800835a:	4631      	mov	r1, r6
 800835c:	4638      	mov	r0, r7
 800835e:	eb04 0903 	add.w	r9, r4, r3
 8008362:	f000 f863 	bl	800842c <_sbrk_r>
 8008366:	4581      	cmp	r9, r0
 8008368:	d13f      	bne.n	80083ea <_malloc_r+0xe6>
 800836a:	6821      	ldr	r1, [r4, #0]
 800836c:	1a6d      	subs	r5, r5, r1
 800836e:	4629      	mov	r1, r5
 8008370:	4638      	mov	r0, r7
 8008372:	f7ff ffa7 	bl	80082c4 <sbrk_aligned>
 8008376:	3001      	adds	r0, #1
 8008378:	d037      	beq.n	80083ea <_malloc_r+0xe6>
 800837a:	6823      	ldr	r3, [r4, #0]
 800837c:	442b      	add	r3, r5
 800837e:	6023      	str	r3, [r4, #0]
 8008380:	f8d8 3000 	ldr.w	r3, [r8]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d038      	beq.n	80083fa <_malloc_r+0xf6>
 8008388:	685a      	ldr	r2, [r3, #4]
 800838a:	42a2      	cmp	r2, r4
 800838c:	d12b      	bne.n	80083e6 <_malloc_r+0xe2>
 800838e:	2200      	movs	r2, #0
 8008390:	605a      	str	r2, [r3, #4]
 8008392:	e00f      	b.n	80083b4 <_malloc_r+0xb0>
 8008394:	6822      	ldr	r2, [r4, #0]
 8008396:	1b52      	subs	r2, r2, r5
 8008398:	d41f      	bmi.n	80083da <_malloc_r+0xd6>
 800839a:	2a0b      	cmp	r2, #11
 800839c:	d917      	bls.n	80083ce <_malloc_r+0xca>
 800839e:	1961      	adds	r1, r4, r5
 80083a0:	42a3      	cmp	r3, r4
 80083a2:	6025      	str	r5, [r4, #0]
 80083a4:	bf18      	it	ne
 80083a6:	6059      	strne	r1, [r3, #4]
 80083a8:	6863      	ldr	r3, [r4, #4]
 80083aa:	bf08      	it	eq
 80083ac:	f8c8 1000 	streq.w	r1, [r8]
 80083b0:	5162      	str	r2, [r4, r5]
 80083b2:	604b      	str	r3, [r1, #4]
 80083b4:	4638      	mov	r0, r7
 80083b6:	f104 060b 	add.w	r6, r4, #11
 80083ba:	f000 f829 	bl	8008410 <__malloc_unlock>
 80083be:	f026 0607 	bic.w	r6, r6, #7
 80083c2:	1d23      	adds	r3, r4, #4
 80083c4:	1af2      	subs	r2, r6, r3
 80083c6:	d0ae      	beq.n	8008326 <_malloc_r+0x22>
 80083c8:	1b9b      	subs	r3, r3, r6
 80083ca:	50a3      	str	r3, [r4, r2]
 80083cc:	e7ab      	b.n	8008326 <_malloc_r+0x22>
 80083ce:	42a3      	cmp	r3, r4
 80083d0:	6862      	ldr	r2, [r4, #4]
 80083d2:	d1dd      	bne.n	8008390 <_malloc_r+0x8c>
 80083d4:	f8c8 2000 	str.w	r2, [r8]
 80083d8:	e7ec      	b.n	80083b4 <_malloc_r+0xb0>
 80083da:	4623      	mov	r3, r4
 80083dc:	6864      	ldr	r4, [r4, #4]
 80083de:	e7ac      	b.n	800833a <_malloc_r+0x36>
 80083e0:	4634      	mov	r4, r6
 80083e2:	6876      	ldr	r6, [r6, #4]
 80083e4:	e7b4      	b.n	8008350 <_malloc_r+0x4c>
 80083e6:	4613      	mov	r3, r2
 80083e8:	e7cc      	b.n	8008384 <_malloc_r+0x80>
 80083ea:	230c      	movs	r3, #12
 80083ec:	603b      	str	r3, [r7, #0]
 80083ee:	4638      	mov	r0, r7
 80083f0:	f000 f80e 	bl	8008410 <__malloc_unlock>
 80083f4:	e797      	b.n	8008326 <_malloc_r+0x22>
 80083f6:	6025      	str	r5, [r4, #0]
 80083f8:	e7dc      	b.n	80083b4 <_malloc_r+0xb0>
 80083fa:	605b      	str	r3, [r3, #4]
 80083fc:	deff      	udf	#255	; 0xff
 80083fe:	bf00      	nop
 8008400:	200008b8 	.word	0x200008b8

08008404 <__malloc_lock>:
 8008404:	4801      	ldr	r0, [pc, #4]	; (800840c <__malloc_lock+0x8>)
 8008406:	f000 b84b 	b.w	80084a0 <__retarget_lock_acquire_recursive>
 800840a:	bf00      	nop
 800840c:	200009fc 	.word	0x200009fc

08008410 <__malloc_unlock>:
 8008410:	4801      	ldr	r0, [pc, #4]	; (8008418 <__malloc_unlock+0x8>)
 8008412:	f000 b846 	b.w	80084a2 <__retarget_lock_release_recursive>
 8008416:	bf00      	nop
 8008418:	200009fc 	.word	0x200009fc

0800841c <memset>:
 800841c:	4402      	add	r2, r0
 800841e:	4603      	mov	r3, r0
 8008420:	4293      	cmp	r3, r2
 8008422:	d100      	bne.n	8008426 <memset+0xa>
 8008424:	4770      	bx	lr
 8008426:	f803 1b01 	strb.w	r1, [r3], #1
 800842a:	e7f9      	b.n	8008420 <memset+0x4>

0800842c <_sbrk_r>:
 800842c:	b538      	push	{r3, r4, r5, lr}
 800842e:	4d06      	ldr	r5, [pc, #24]	; (8008448 <_sbrk_r+0x1c>)
 8008430:	2300      	movs	r3, #0
 8008432:	4604      	mov	r4, r0
 8008434:	4608      	mov	r0, r1
 8008436:	602b      	str	r3, [r5, #0]
 8008438:	f7f8 fc5c 	bl	8000cf4 <_sbrk>
 800843c:	1c43      	adds	r3, r0, #1
 800843e:	d102      	bne.n	8008446 <_sbrk_r+0x1a>
 8008440:	682b      	ldr	r3, [r5, #0]
 8008442:	b103      	cbz	r3, 8008446 <_sbrk_r+0x1a>
 8008444:	6023      	str	r3, [r4, #0]
 8008446:	bd38      	pop	{r3, r4, r5, pc}
 8008448:	200009f8 	.word	0x200009f8

0800844c <__errno>:
 800844c:	4b01      	ldr	r3, [pc, #4]	; (8008454 <__errno+0x8>)
 800844e:	6818      	ldr	r0, [r3, #0]
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	20000078 	.word	0x20000078

08008458 <__libc_init_array>:
 8008458:	b570      	push	{r4, r5, r6, lr}
 800845a:	4d0d      	ldr	r5, [pc, #52]	; (8008490 <__libc_init_array+0x38>)
 800845c:	4c0d      	ldr	r4, [pc, #52]	; (8008494 <__libc_init_array+0x3c>)
 800845e:	1b64      	subs	r4, r4, r5
 8008460:	10a4      	asrs	r4, r4, #2
 8008462:	2600      	movs	r6, #0
 8008464:	42a6      	cmp	r6, r4
 8008466:	d109      	bne.n	800847c <__libc_init_array+0x24>
 8008468:	4d0b      	ldr	r5, [pc, #44]	; (8008498 <__libc_init_array+0x40>)
 800846a:	4c0c      	ldr	r4, [pc, #48]	; (800849c <__libc_init_array+0x44>)
 800846c:	f000 f866 	bl	800853c <_init>
 8008470:	1b64      	subs	r4, r4, r5
 8008472:	10a4      	asrs	r4, r4, #2
 8008474:	2600      	movs	r6, #0
 8008476:	42a6      	cmp	r6, r4
 8008478:	d105      	bne.n	8008486 <__libc_init_array+0x2e>
 800847a:	bd70      	pop	{r4, r5, r6, pc}
 800847c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008480:	4798      	blx	r3
 8008482:	3601      	adds	r6, #1
 8008484:	e7ee      	b.n	8008464 <__libc_init_array+0xc>
 8008486:	f855 3b04 	ldr.w	r3, [r5], #4
 800848a:	4798      	blx	r3
 800848c:	3601      	adds	r6, #1
 800848e:	e7f2      	b.n	8008476 <__libc_init_array+0x1e>
 8008490:	08008588 	.word	0x08008588
 8008494:	08008588 	.word	0x08008588
 8008498:	08008588 	.word	0x08008588
 800849c:	0800858c 	.word	0x0800858c

080084a0 <__retarget_lock_acquire_recursive>:
 80084a0:	4770      	bx	lr

080084a2 <__retarget_lock_release_recursive>:
 80084a2:	4770      	bx	lr

080084a4 <_free_r>:
 80084a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084a6:	2900      	cmp	r1, #0
 80084a8:	d044      	beq.n	8008534 <_free_r+0x90>
 80084aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084ae:	9001      	str	r0, [sp, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f1a1 0404 	sub.w	r4, r1, #4
 80084b6:	bfb8      	it	lt
 80084b8:	18e4      	addlt	r4, r4, r3
 80084ba:	f7ff ffa3 	bl	8008404 <__malloc_lock>
 80084be:	4a1e      	ldr	r2, [pc, #120]	; (8008538 <_free_r+0x94>)
 80084c0:	9801      	ldr	r0, [sp, #4]
 80084c2:	6813      	ldr	r3, [r2, #0]
 80084c4:	b933      	cbnz	r3, 80084d4 <_free_r+0x30>
 80084c6:	6063      	str	r3, [r4, #4]
 80084c8:	6014      	str	r4, [r2, #0]
 80084ca:	b003      	add	sp, #12
 80084cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084d0:	f7ff bf9e 	b.w	8008410 <__malloc_unlock>
 80084d4:	42a3      	cmp	r3, r4
 80084d6:	d908      	bls.n	80084ea <_free_r+0x46>
 80084d8:	6825      	ldr	r5, [r4, #0]
 80084da:	1961      	adds	r1, r4, r5
 80084dc:	428b      	cmp	r3, r1
 80084de:	bf01      	itttt	eq
 80084e0:	6819      	ldreq	r1, [r3, #0]
 80084e2:	685b      	ldreq	r3, [r3, #4]
 80084e4:	1949      	addeq	r1, r1, r5
 80084e6:	6021      	streq	r1, [r4, #0]
 80084e8:	e7ed      	b.n	80084c6 <_free_r+0x22>
 80084ea:	461a      	mov	r2, r3
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	b10b      	cbz	r3, 80084f4 <_free_r+0x50>
 80084f0:	42a3      	cmp	r3, r4
 80084f2:	d9fa      	bls.n	80084ea <_free_r+0x46>
 80084f4:	6811      	ldr	r1, [r2, #0]
 80084f6:	1855      	adds	r5, r2, r1
 80084f8:	42a5      	cmp	r5, r4
 80084fa:	d10b      	bne.n	8008514 <_free_r+0x70>
 80084fc:	6824      	ldr	r4, [r4, #0]
 80084fe:	4421      	add	r1, r4
 8008500:	1854      	adds	r4, r2, r1
 8008502:	42a3      	cmp	r3, r4
 8008504:	6011      	str	r1, [r2, #0]
 8008506:	d1e0      	bne.n	80084ca <_free_r+0x26>
 8008508:	681c      	ldr	r4, [r3, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	6053      	str	r3, [r2, #4]
 800850e:	440c      	add	r4, r1
 8008510:	6014      	str	r4, [r2, #0]
 8008512:	e7da      	b.n	80084ca <_free_r+0x26>
 8008514:	d902      	bls.n	800851c <_free_r+0x78>
 8008516:	230c      	movs	r3, #12
 8008518:	6003      	str	r3, [r0, #0]
 800851a:	e7d6      	b.n	80084ca <_free_r+0x26>
 800851c:	6825      	ldr	r5, [r4, #0]
 800851e:	1961      	adds	r1, r4, r5
 8008520:	428b      	cmp	r3, r1
 8008522:	bf04      	itt	eq
 8008524:	6819      	ldreq	r1, [r3, #0]
 8008526:	685b      	ldreq	r3, [r3, #4]
 8008528:	6063      	str	r3, [r4, #4]
 800852a:	bf04      	itt	eq
 800852c:	1949      	addeq	r1, r1, r5
 800852e:	6021      	streq	r1, [r4, #0]
 8008530:	6054      	str	r4, [r2, #4]
 8008532:	e7ca      	b.n	80084ca <_free_r+0x26>
 8008534:	b003      	add	sp, #12
 8008536:	bd30      	pop	{r4, r5, pc}
 8008538:	200008b8 	.word	0x200008b8

0800853c <_init>:
 800853c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800853e:	bf00      	nop
 8008540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008542:	bc08      	pop	{r3}
 8008544:	469e      	mov	lr, r3
 8008546:	4770      	bx	lr

08008548 <_fini>:
 8008548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854a:	bf00      	nop
 800854c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800854e:	bc08      	pop	{r3}
 8008550:	469e      	mov	lr, r3
 8008552:	4770      	bx	lr
