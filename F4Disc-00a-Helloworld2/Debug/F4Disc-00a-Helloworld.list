
F4Disc-00a-Helloworld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800853c  0800853c  0001853c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008568  08008568  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008568  08008568  00018568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008570  08008570  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008570  08008570  00018570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008574  08008574  00018574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000984  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a00  20000a00  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017bf2  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b70  00000000  00000000  00037ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001328  00000000  00000000  0003b858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ec4  00000000  00000000  0003cb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024103  00000000  00000000  0003da44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019710  00000000  00000000  00061b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd516  00000000  00000000  0007b257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000536c  00000000  00000000  00148770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0014dadc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008524 	.word	0x08008524

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008524 	.word	0x08008524

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fc7a 	bl	8000dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f826 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f94c 	bl	800076c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d4:	f000 f88c 	bl	80005f0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d8:	f000 f8b8 	bl	800064c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004dc:	f000 f8e6 	bl	80006ac <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e0:	f007 fbcc 	bl	8007c7c <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f918 	bl	8000718 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004e8:	f007 fbee 	bl	8007cc8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 80004ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f0:	4807      	ldr	r0, [pc, #28]	; (8000510 <main+0x4c>)
 80004f2:	f000 ffc2 	bl	800147a <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 80004f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004fa:	f000 fcd3 	bl	8000ea4 <HAL_Delay>
//    HAL_UART_Transmit(&huart2, (uint8_t *)"hello world \n\r", strlen("hello world \n\r"), HAL_MAX_DELAY);
    HAL_UART_Transmit(&huart2, (uint8_t *)"hello world \n\r", sizeof("hello world \n\r")-1, HAL_MAX_DELAY);
 80004fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000502:	220e      	movs	r2, #14
 8000504:	4903      	ldr	r1, [pc, #12]	; (8000514 <main+0x50>)
 8000506:	4804      	ldr	r0, [pc, #16]	; (8000518 <main+0x54>)
 8000508:	f004 f86e 	bl	80045e8 <HAL_UART_Transmit>
    MX_USB_HOST_Process();
 800050c:	e7ec      	b.n	80004e8 <main+0x24>
 800050e:	bf00      	nop
 8000510:	40020c00 	.word	0x40020c00
 8000514:	0800853c 	.word	0x0800853c
 8000518:	2000018c 	.word	0x2000018c

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f007 ff6a 	bl	8008404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <SystemClock_Config+0xcc>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <SystemClock_Config+0xd0>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800058c:	2308      	movs	r3, #8
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000590:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000594:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059a:	2307      	movs	r3, #7
 800059c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 f972 	bl	800388c <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ae:	f000 f9db 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2302      	movs	r3, #2
 80005b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2105      	movs	r1, #5
 80005d0:	4618      	mov	r0, r3
 80005d2:	f003 fbd3 	bl	8003d7c <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005dc:	f000 f9c4 	bl	8000968 <Error_Handler>
  }
}
 80005e0:	bf00      	nop
 80005e2:	3750      	adds	r7, #80	; 0x50
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_I2C1_Init+0x50>)
 80005f6:	4a13      	ldr	r2, [pc, #76]	; (8000644 <MX_I2C1_Init+0x54>)
 80005f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_I2C1_Init+0x50>)
 80005fc:	4a12      	ldr	r2, [pc, #72]	; (8000648 <MX_I2C1_Init+0x58>)
 80005fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_I2C1_Init+0x50>)
 800060e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000612:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_I2C1_Init+0x50>)
 800062e:	f002 fb49 	bl	8002cc4 <HAL_I2C_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000638:	f000 f996 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000098 	.word	0x20000098
 8000644:	40005400 	.word	0x40005400
 8000648:	000186a0 	.word	0x000186a0

0800064c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000652:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <MX_I2S3_Init+0x58>)
 8000654:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800065c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <MX_I2S3_Init+0x54>)
 800066c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000670:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000674:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <MX_I2S3_Init+0x5c>)
 8000676:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_I2S3_Init+0x54>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_I2S3_Init+0x54>)
 800068c:	f002 fc5e 	bl	8002f4c <HAL_I2S_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000696:	f000 f967 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200000ec 	.word	0x200000ec
 80006a4:	40003c00 	.word	0x40003c00
 80006a8:	00017700 	.word	0x00017700

080006ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_SPI1_Init+0x64>)
 80006b2:	4a18      	ldr	r2, [pc, #96]	; (8000714 <MX_SPI1_Init+0x68>)
 80006b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_SPI1_Init+0x64>)
 80006b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_SPI1_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_SPI1_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_SPI1_Init+0x64>)
 80006d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_SPI1_Init+0x64>)
 80006f8:	220a      	movs	r2, #10
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_SPI1_Init+0x64>)
 80006fe:	f003 fe9d 	bl	800443c <HAL_SPI_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000708:	f000 f92e 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000134 	.word	0x20000134
 8000714:	40013000 	.word	0x40013000

08000718 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800071e:	4a12      	ldr	r2, [pc, #72]	; (8000768 <MX_USART2_UART_Init+0x50>)
 8000720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000750:	f003 fefd 	bl	800454e <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800075a:	f000 f905 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	2000018c 	.word	0x2000018c
 8000768:	40004400 	.word	0x40004400

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08c      	sub	sp, #48	; 0x30
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
 8000786:	4b72      	ldr	r3, [pc, #456]	; (8000950 <MX_GPIO_Init+0x1e4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a71      	ldr	r2, [pc, #452]	; (8000950 <MX_GPIO_Init+0x1e4>)
 800078c:	f043 0310 	orr.w	r3, r3, #16
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b6f      	ldr	r3, [pc, #444]	; (8000950 <MX_GPIO_Init+0x1e4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0310 	and.w	r3, r3, #16
 800079a:	61bb      	str	r3, [r7, #24]
 800079c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	4b6b      	ldr	r3, [pc, #428]	; (8000950 <MX_GPIO_Init+0x1e4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a6a      	ldr	r2, [pc, #424]	; (8000950 <MX_GPIO_Init+0x1e4>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b68      	ldr	r3, [pc, #416]	; (8000950 <MX_GPIO_Init+0x1e4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b64      	ldr	r3, [pc, #400]	; (8000950 <MX_GPIO_Init+0x1e4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a63      	ldr	r2, [pc, #396]	; (8000950 <MX_GPIO_Init+0x1e4>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b61      	ldr	r3, [pc, #388]	; (8000950 <MX_GPIO_Init+0x1e4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b5d      	ldr	r3, [pc, #372]	; (8000950 <MX_GPIO_Init+0x1e4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a5c      	ldr	r2, [pc, #368]	; (8000950 <MX_GPIO_Init+0x1e4>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b5a      	ldr	r3, [pc, #360]	; (8000950 <MX_GPIO_Init+0x1e4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b56      	ldr	r3, [pc, #344]	; (8000950 <MX_GPIO_Init+0x1e4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a55      	ldr	r2, [pc, #340]	; (8000950 <MX_GPIO_Init+0x1e4>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b53      	ldr	r3, [pc, #332]	; (8000950 <MX_GPIO_Init+0x1e4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b4f      	ldr	r3, [pc, #316]	; (8000950 <MX_GPIO_Init+0x1e4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a4e      	ldr	r2, [pc, #312]	; (8000950 <MX_GPIO_Init+0x1e4>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b4c      	ldr	r3, [pc, #304]	; (8000950 <MX_GPIO_Init+0x1e4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2108      	movs	r1, #8
 800082e:	4849      	ldr	r0, [pc, #292]	; (8000954 <MX_GPIO_Init+0x1e8>)
 8000830:	f000 fe0a 	bl	8001448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	2101      	movs	r1, #1
 8000838:	4847      	ldr	r0, [pc, #284]	; (8000958 <MX_GPIO_Init+0x1ec>)
 800083a:	f000 fe05 	bl	8001448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800083e:	2200      	movs	r2, #0
 8000840:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000844:	4845      	ldr	r0, [pc, #276]	; (800095c <MX_GPIO_Init+0x1f0>)
 8000846:	f000 fdff 	bl	8001448 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800084a:	2308      	movs	r3, #8
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	483c      	ldr	r0, [pc, #240]	; (8000954 <MX_GPIO_Init+0x1e8>)
 8000862:	f000 fc55 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000866:	2301      	movs	r3, #1
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4836      	ldr	r0, [pc, #216]	; (8000958 <MX_GPIO_Init+0x1ec>)
 800087e:	f000 fc47 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000882:	2308      	movs	r3, #8
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000892:	2305      	movs	r3, #5
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	482e      	ldr	r0, [pc, #184]	; (8000958 <MX_GPIO_Init+0x1ec>)
 800089e:	f000 fc37 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008a6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	482a      	ldr	r0, [pc, #168]	; (8000960 <MX_GPIO_Init+0x1f4>)
 80008b8:	f000 fc2a 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008bc:	2304      	movs	r3, #4
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4825      	ldr	r0, [pc, #148]	; (8000964 <MX_GPIO_Init+0x1f8>)
 80008d0:	f000 fc1e 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e6:	2305      	movs	r3, #5
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	481c      	ldr	r0, [pc, #112]	; (8000964 <MX_GPIO_Init+0x1f8>)
 80008f2:	f000 fc0d 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008f6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008fa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4813      	ldr	r0, [pc, #76]	; (800095c <MX_GPIO_Init+0x1f0>)
 8000910:	f000 fbfe 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000914:	2320      	movs	r3, #32
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	480d      	ldr	r0, [pc, #52]	; (800095c <MX_GPIO_Init+0x1f0>)
 8000928:	f000 fbf2 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800092c:	2302      	movs	r3, #2
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000930:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_GPIO_Init+0x1e8>)
 8000942:	f000 fbe5 	bl	8001110 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000946:	bf00      	nop
 8000948:	3730      	adds	r7, #48	; 0x30
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40021000 	.word	0x40021000
 8000958:	40020800 	.word	0x40020800
 800095c:	40020c00 	.word	0x40020c00
 8000960:	40020000 	.word	0x40020000
 8000964:	40020400 	.word	0x40020400

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <HAL_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <HAL_MspInit+0x4c>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_MspInit+0x4c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009b2:	2007      	movs	r0, #7
 80009b4:	f000 fb6a 	bl	800108c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800

080009c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a19      	ldr	r2, [pc, #100]	; (8000a48 <HAL_I2C_MspInit+0x84>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d12c      	bne.n	8000a40 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a02:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a08:	2312      	movs	r3, #18
 8000a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a14:	2304      	movs	r3, #4
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480c      	ldr	r0, [pc, #48]	; (8000a50 <HAL_I2C_MspInit+0x8c>)
 8000a20:	f000 fb76 	bl	8001110 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 8000a2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a32:	6413      	str	r3, [r2, #64]	; 0x40
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a40:	bf00      	nop
 8000a42:	3728      	adds	r7, #40	; 0x28
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40005400 	.word	0x40005400
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020400 	.word	0x40020400

08000a54 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08e      	sub	sp, #56	; 0x38
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a31      	ldr	r2, [pc, #196]	; (8000b44 <HAL_I2S_MspInit+0xf0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d15a      	bne.n	8000b3a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a84:	2301      	movs	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a88:	23c0      	movs	r3, #192	; 0xc0
 8000a8a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4618      	mov	r0, r3
 8000a96:	f003 fb91 	bl	80041bc <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000aa0:	f7ff ff62 	bl	8000968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <HAL_I2S_MspInit+0xf4>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	4a26      	ldr	r2, [pc, #152]	; (8000b48 <HAL_I2S_MspInit+0xf4>)
 8000aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab4:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <HAL_I2S_MspInit+0xf4>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <HAL_I2S_MspInit+0xf4>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac8:	4a1f      	ldr	r2, [pc, #124]	; (8000b48 <HAL_I2S_MspInit+0xf4>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <HAL_I2S_MspInit+0xf4>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <HAL_I2S_MspInit+0xf4>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	4a18      	ldr	r2, [pc, #96]	; (8000b48 <HAL_I2S_MspInit+0xf4>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	6313      	str	r3, [r2, #48]	; 0x30
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <HAL_I2S_MspInit+0xf4>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000af8:	2310      	movs	r3, #16
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b08:	2306      	movs	r3, #6
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b10:	4619      	mov	r1, r3
 8000b12:	480e      	ldr	r0, [pc, #56]	; (8000b4c <HAL_I2S_MspInit+0xf8>)
 8000b14:	f000 fafc 	bl	8001110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b18:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b2a:	2306      	movs	r3, #6
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	4806      	ldr	r0, [pc, #24]	; (8000b50 <HAL_I2S_MspInit+0xfc>)
 8000b36:	f000 faeb 	bl	8001110 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3738      	adds	r7, #56	; 0x38
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40003c00 	.word	0x40003c00
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020000 	.word	0x40020000
 8000b50:	40020800 	.word	0x40020800

08000b54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a19      	ldr	r2, [pc, #100]	; (8000bd8 <HAL_SPI_MspInit+0x84>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d12b      	bne.n	8000bce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	4a17      	ldr	r2, [pc, #92]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b84:	6453      	str	r3, [r2, #68]	; 0x44
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a10      	ldr	r2, [pc, #64]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bae:	23e0      	movs	r3, #224	; 0xe0
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <HAL_SPI_MspInit+0x8c>)
 8000bca:	f000 faa1 	bl	8001110 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	; 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40013000 	.word	0x40013000
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a19      	ldr	r2, [pc, #100]	; (8000c68 <HAL_UART_MspInit+0x84>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d12b      	bne.n	8000c5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_UART_MspInit+0x88>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <HAL_UART_MspInit+0x88>)
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c14:	6413      	str	r3, [r2, #64]	; 0x40
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_UART_MspInit+0x88>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <HAL_UART_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a10      	ldr	r2, [pc, #64]	; (8000c6c <HAL_UART_MspInit+0x88>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <HAL_UART_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c3e:	230c      	movs	r3, #12
 8000c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c4e:	2307      	movs	r3, #7
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <HAL_UART_MspInit+0x8c>)
 8000c5a:	f000 fa59 	bl	8001110 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3728      	adds	r7, #40	; 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40004400 	.word	0x40004400
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020000 	.word	0x40020000

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <NMI_Handler+0x4>

08000c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <MemManage_Handler+0x4>

08000c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <BusFault_Handler+0x4>

08000c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <UsageFault_Handler+0x4>

08000c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc0:	f000 f8d0 	bl	8000e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <OTG_FS_IRQHandler+0x10>)
 8000cce:	f000 fe59 	bl	8001984 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200005b4 	.word	0x200005b4

08000cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce4:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <_sbrk+0x5c>)
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <_sbrk+0x60>)
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <_sbrk+0x64>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <_sbrk+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d207      	bcs.n	8000d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d0c:	f007 fb92 	bl	8008434 <__errno>
 8000d10:	4603      	mov	r3, r0
 8000d12:	220c      	movs	r2, #12
 8000d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d1a:	e009      	b.n	8000d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <_sbrk+0x64>)
 8000d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20020000 	.word	0x20020000
 8000d3c:	00000400 	.word	0x00000400
 8000d40:	200001d0 	.word	0x200001d0
 8000d44:	20000a00 	.word	0x20000a00

08000d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <SystemInit+0x20>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <SystemInit+0x20>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d70:	480d      	ldr	r0, [pc, #52]	; (8000da8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d72:	490e      	ldr	r1, [pc, #56]	; (8000dac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d74:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d78:	e002      	b.n	8000d80 <LoopCopyDataInit>

08000d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7e:	3304      	adds	r3, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d84:	d3f9      	bcc.n	8000d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d88:	4c0b      	ldr	r4, [pc, #44]	; (8000db8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d8c:	e001      	b.n	8000d92 <LoopFillZerobss>

08000d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d90:	3204      	adds	r2, #4

08000d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d94:	d3fb      	bcc.n	8000d8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d96:	f7ff ffd7 	bl	8000d48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f007 fb51 	bl	8008440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9e:	f7ff fb91 	bl	80004c4 <main>
  bx  lr    
 8000da2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000da4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000db0:	08008578 	.word	0x08008578
  ldr r2, =_sbss
 8000db4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000db8:	20000a00 	.word	0x20000a00

08000dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC_IRQHandler>
	...

08000dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <HAL_Init+0x40>)
 8000dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_Init+0x40>)
 8000dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_Init+0x40>)
 8000de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f94f 	bl	800108c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f000 f808 	bl	8000e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df4:	f7ff fdbe 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023c00 	.word	0x40023c00

08000e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_InitTick+0x54>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_InitTick+0x58>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f967 	bl	80010f6 <HAL_SYSTICK_Config>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00e      	b.n	8000e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b0f      	cmp	r3, #15
 8000e36:	d80a      	bhi.n	8000e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e40:	f000 f92f 	bl	80010a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e44:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <HAL_InitTick+0x5c>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e000      	b.n	8000e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000004 	.word	0x20000004

08000e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x20>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x24>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <HAL_IncTick+0x24>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008
 8000e88:	200001d4 	.word	0x200001d4

08000e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <HAL_GetTick+0x14>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	200001d4 	.word	0x200001d4

08000ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eac:	f7ff ffee 	bl	8000e8c <HAL_GetTick>
 8000eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ebc:	d005      	beq.n	8000eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_Delay+0x44>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eca:	bf00      	nop
 8000ecc:	f7ff ffde 	bl	8000e8c <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d8f7      	bhi.n	8000ecc <HAL_Delay+0x28>
  {
  }
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000008 	.word	0x20000008

08000eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1e:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	60d3      	str	r3, [r2, #12]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0b      	blt.n	8000f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4907      	ldr	r1, [pc, #28]	; (8000f88 <__NVIC_EnableIRQ+0x38>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	2001      	movs	r0, #1
 8000f72:	fa00 f202 	lsl.w	r2, r0, r2
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4908      	ldr	r1, [pc, #32]	; (8000fdc <__NVIC_SetPriority+0x50>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f1c3 0307 	rsb	r3, r3, #7
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf28      	it	cs
 8000ffe:	2304      	movcs	r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	2b06      	cmp	r3, #6
 8001008:	d902      	bls.n	8001010 <NVIC_EncodePriority+0x30>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3b03      	subs	r3, #3
 800100e:	e000      	b.n	8001012 <NVIC_EncodePriority+0x32>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43da      	mvns	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001028:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43d9      	mvns	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	4313      	orrs	r3, r2
         );
}
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001058:	d301      	bcc.n	800105e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105a:	2301      	movs	r3, #1
 800105c:	e00f      	b.n	800107e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <SysTick_Config+0x40>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001066:	210f      	movs	r1, #15
 8001068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800106c:	f7ff ff8e 	bl	8000f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <SysTick_Config+0x40>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <SysTick_Config+0x40>)
 8001078:	2207      	movs	r2, #7
 800107a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	e000e010 	.word	0xe000e010

0800108c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff29 	bl	8000eec <__NVIC_SetPriorityGrouping>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b4:	f7ff ff3e 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 80010b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	6978      	ldr	r0, [r7, #20]
 80010c0:	f7ff ff8e 	bl	8000fe0 <NVIC_EncodePriority>
 80010c4:	4602      	mov	r2, r0
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff5d 	bl	8000f8c <__NVIC_SetPriority>
}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff31 	bl	8000f50 <__NVIC_EnableIRQ>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ffa2 	bl	8001048 <SysTick_Config>
 8001104:	4603      	mov	r3, r0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	e16b      	b.n	8001404 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800112c:	2201      	movs	r2, #1
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	429a      	cmp	r2, r3
 8001146:	f040 815a 	bne.w	80013fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	2b01      	cmp	r3, #1
 8001154:	d005      	beq.n	8001162 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115e:	2b02      	cmp	r3, #2
 8001160:	d130      	bne.n	80011c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001198:	2201      	movs	r2, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	091b      	lsrs	r3, r3, #4
 80011ae:	f003 0201 	and.w	r2, r3, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d017      	beq.n	8001200 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d123      	bne.n	8001254 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	08da      	lsrs	r2, r3, #3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3208      	adds	r2, #8
 8001214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	220f      	movs	r2, #15
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	08da      	lsrs	r2, r3, #3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3208      	adds	r2, #8
 800124e:	69b9      	ldr	r1, [r7, #24]
 8001250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0203 	and.w	r2, r3, #3
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 80b4 	beq.w	80013fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b60      	ldr	r3, [pc, #384]	; (800141c <HAL_GPIO_Init+0x30c>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	4a5f      	ldr	r2, [pc, #380]	; (800141c <HAL_GPIO_Init+0x30c>)
 80012a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a4:	6453      	str	r3, [r2, #68]	; 0x44
 80012a6:	4b5d      	ldr	r3, [pc, #372]	; (800141c <HAL_GPIO_Init+0x30c>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012b2:	4a5b      	ldr	r2, [pc, #364]	; (8001420 <HAL_GPIO_Init+0x310>)
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	089b      	lsrs	r3, r3, #2
 80012b8:	3302      	adds	r3, #2
 80012ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	220f      	movs	r2, #15
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a52      	ldr	r2, [pc, #328]	; (8001424 <HAL_GPIO_Init+0x314>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d02b      	beq.n	8001336 <HAL_GPIO_Init+0x226>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a51      	ldr	r2, [pc, #324]	; (8001428 <HAL_GPIO_Init+0x318>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d025      	beq.n	8001332 <HAL_GPIO_Init+0x222>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a50      	ldr	r2, [pc, #320]	; (800142c <HAL_GPIO_Init+0x31c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d01f      	beq.n	800132e <HAL_GPIO_Init+0x21e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4f      	ldr	r2, [pc, #316]	; (8001430 <HAL_GPIO_Init+0x320>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d019      	beq.n	800132a <HAL_GPIO_Init+0x21a>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4e      	ldr	r2, [pc, #312]	; (8001434 <HAL_GPIO_Init+0x324>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d013      	beq.n	8001326 <HAL_GPIO_Init+0x216>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4d      	ldr	r2, [pc, #308]	; (8001438 <HAL_GPIO_Init+0x328>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d00d      	beq.n	8001322 <HAL_GPIO_Init+0x212>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4c      	ldr	r2, [pc, #304]	; (800143c <HAL_GPIO_Init+0x32c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d007      	beq.n	800131e <HAL_GPIO_Init+0x20e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4b      	ldr	r2, [pc, #300]	; (8001440 <HAL_GPIO_Init+0x330>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d101      	bne.n	800131a <HAL_GPIO_Init+0x20a>
 8001316:	2307      	movs	r3, #7
 8001318:	e00e      	b.n	8001338 <HAL_GPIO_Init+0x228>
 800131a:	2308      	movs	r3, #8
 800131c:	e00c      	b.n	8001338 <HAL_GPIO_Init+0x228>
 800131e:	2306      	movs	r3, #6
 8001320:	e00a      	b.n	8001338 <HAL_GPIO_Init+0x228>
 8001322:	2305      	movs	r3, #5
 8001324:	e008      	b.n	8001338 <HAL_GPIO_Init+0x228>
 8001326:	2304      	movs	r3, #4
 8001328:	e006      	b.n	8001338 <HAL_GPIO_Init+0x228>
 800132a:	2303      	movs	r3, #3
 800132c:	e004      	b.n	8001338 <HAL_GPIO_Init+0x228>
 800132e:	2302      	movs	r3, #2
 8001330:	e002      	b.n	8001338 <HAL_GPIO_Init+0x228>
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <HAL_GPIO_Init+0x228>
 8001336:	2300      	movs	r3, #0
 8001338:	69fa      	ldr	r2, [r7, #28]
 800133a:	f002 0203 	and.w	r2, r2, #3
 800133e:	0092      	lsls	r2, r2, #2
 8001340:	4093      	lsls	r3, r2
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001348:	4935      	ldr	r1, [pc, #212]	; (8001420 <HAL_GPIO_Init+0x310>)
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	089b      	lsrs	r3, r3, #2
 800134e:	3302      	adds	r3, #2
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001356:	4b3b      	ldr	r3, [pc, #236]	; (8001444 <HAL_GPIO_Init+0x334>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800137a:	4a32      	ldr	r2, [pc, #200]	; (8001444 <HAL_GPIO_Init+0x334>)
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001380:	4b30      	ldr	r3, [pc, #192]	; (8001444 <HAL_GPIO_Init+0x334>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a4:	4a27      	ldr	r2, [pc, #156]	; (8001444 <HAL_GPIO_Init+0x334>)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013aa:	4b26      	ldr	r3, [pc, #152]	; (8001444 <HAL_GPIO_Init+0x334>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ce:	4a1d      	ldr	r2, [pc, #116]	; (8001444 <HAL_GPIO_Init+0x334>)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <HAL_GPIO_Init+0x334>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013f8:	4a12      	ldr	r2, [pc, #72]	; (8001444 <HAL_GPIO_Init+0x334>)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3301      	adds	r3, #1
 8001402:	61fb      	str	r3, [r7, #28]
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	2b0f      	cmp	r3, #15
 8001408:	f67f ae90 	bls.w	800112c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3724      	adds	r7, #36	; 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40013800 	.word	0x40013800
 8001424:	40020000 	.word	0x40020000
 8001428:	40020400 	.word	0x40020400
 800142c:	40020800 	.word	0x40020800
 8001430:	40020c00 	.word	0x40020c00
 8001434:	40021000 	.word	0x40021000
 8001438:	40021400 	.word	0x40021400
 800143c:	40021800 	.word	0x40021800
 8001440:	40021c00 	.word	0x40021c00
 8001444:	40013c00 	.word	0x40013c00

08001448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]
 8001454:	4613      	mov	r3, r2
 8001456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001458:	787b      	ldrb	r3, [r7, #1]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001464:	e003      	b.n	800146e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001466:	887b      	ldrh	r3, [r7, #2]
 8001468:	041a      	lsls	r2, r3, #16
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	619a      	str	r2, [r3, #24]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800147a:	b480      	push	{r7}
 800147c:	b085      	sub	sp, #20
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800148c:	887a      	ldrh	r2, [r7, #2]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4013      	ands	r3, r2
 8001492:	041a      	lsls	r2, r3, #16
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	43d9      	mvns	r1, r3
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	400b      	ands	r3, r1
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	619a      	str	r2, [r3, #24]
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b0:	b08f      	sub	sp, #60	; 0x3c
 80014b2:	af0a      	add	r7, sp, #40	; 0x28
 80014b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e054      	b.n	800156a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d106      	bne.n	80014e0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f006 fc2c 	bl	8007d38 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2203      	movs	r2, #3
 80014e4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d102      	bne.n	80014fa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f003 fc58 	bl	8004db4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	687e      	ldr	r6, [r7, #4]
 800150c:	466d      	mov	r5, sp
 800150e:	f106 0410 	add.w	r4, r6, #16
 8001512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001514:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800151e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001522:	1d33      	adds	r3, r6, #4
 8001524:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001526:	6838      	ldr	r0, [r7, #0]
 8001528:	f003 fbd2 	bl	8004cd0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2101      	movs	r1, #1
 8001532:	4618      	mov	r0, r3
 8001534:	f003 fc4f 	bl	8004dd6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	687e      	ldr	r6, [r7, #4]
 8001540:	466d      	mov	r5, sp
 8001542:	f106 0410 	add.w	r4, r6, #16
 8001546:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001548:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800154a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800154c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800154e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001552:	e885 0003 	stmia.w	r5, {r0, r1}
 8001556:	1d33      	adds	r3, r6, #4
 8001558:	cb0e      	ldmia	r3, {r1, r2, r3}
 800155a:	6838      	ldr	r0, [r7, #0]
 800155c:	f003 fdd8 	bl	8005110 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001572 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001572:	b590      	push	{r4, r7, lr}
 8001574:	b089      	sub	sp, #36	; 0x24
 8001576:	af04      	add	r7, sp, #16
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	4608      	mov	r0, r1
 800157c:	4611      	mov	r1, r2
 800157e:	461a      	mov	r2, r3
 8001580:	4603      	mov	r3, r0
 8001582:	70fb      	strb	r3, [r7, #3]
 8001584:	460b      	mov	r3, r1
 8001586:	70bb      	strb	r3, [r7, #2]
 8001588:	4613      	mov	r3, r2
 800158a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001592:	2b01      	cmp	r3, #1
 8001594:	d101      	bne.n	800159a <HAL_HCD_HC_Init+0x28>
 8001596:	2302      	movs	r3, #2
 8001598:	e076      	b.n	8001688 <HAL_HCD_HC_Init+0x116>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	212c      	movs	r1, #44	; 0x2c
 80015a8:	fb01 f303 	mul.w	r3, r1, r3
 80015ac:	4413      	add	r3, r2
 80015ae:	333d      	adds	r3, #61	; 0x3d
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	212c      	movs	r1, #44	; 0x2c
 80015ba:	fb01 f303 	mul.w	r3, r1, r3
 80015be:	4413      	add	r3, r2
 80015c0:	3338      	adds	r3, #56	; 0x38
 80015c2:	787a      	ldrb	r2, [r7, #1]
 80015c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	212c      	movs	r1, #44	; 0x2c
 80015cc:	fb01 f303 	mul.w	r3, r1, r3
 80015d0:	4413      	add	r3, r2
 80015d2:	3340      	adds	r3, #64	; 0x40
 80015d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015d6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	212c      	movs	r1, #44	; 0x2c
 80015de:	fb01 f303 	mul.w	r3, r1, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	3339      	adds	r3, #57	; 0x39
 80015e6:	78fa      	ldrb	r2, [r7, #3]
 80015e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	212c      	movs	r1, #44	; 0x2c
 80015f0:	fb01 f303 	mul.w	r3, r1, r3
 80015f4:	4413      	add	r3, r2
 80015f6:	333f      	adds	r3, #63	; 0x3f
 80015f8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80015fe:	78fb      	ldrb	r3, [r7, #3]
 8001600:	78ba      	ldrb	r2, [r7, #2]
 8001602:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001606:	b2d0      	uxtb	r0, r2
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	212c      	movs	r1, #44	; 0x2c
 800160c:	fb01 f303 	mul.w	r3, r1, r3
 8001610:	4413      	add	r3, r2
 8001612:	333a      	adds	r3, #58	; 0x3a
 8001614:	4602      	mov	r2, r0
 8001616:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001618:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800161c:	2b00      	cmp	r3, #0
 800161e:	da09      	bge.n	8001634 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	212c      	movs	r1, #44	; 0x2c
 8001626:	fb01 f303 	mul.w	r3, r1, r3
 800162a:	4413      	add	r3, r2
 800162c:	333b      	adds	r3, #59	; 0x3b
 800162e:	2201      	movs	r2, #1
 8001630:	701a      	strb	r2, [r3, #0]
 8001632:	e008      	b.n	8001646 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001634:	78fb      	ldrb	r3, [r7, #3]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	212c      	movs	r1, #44	; 0x2c
 800163a:	fb01 f303 	mul.w	r3, r1, r3
 800163e:	4413      	add	r3, r2
 8001640:	333b      	adds	r3, #59	; 0x3b
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001646:	78fb      	ldrb	r3, [r7, #3]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	212c      	movs	r1, #44	; 0x2c
 800164c:	fb01 f303 	mul.w	r3, r1, r3
 8001650:	4413      	add	r3, r2
 8001652:	333c      	adds	r3, #60	; 0x3c
 8001654:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001658:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6818      	ldr	r0, [r3, #0]
 800165e:	787c      	ldrb	r4, [r7, #1]
 8001660:	78ba      	ldrb	r2, [r7, #2]
 8001662:	78f9      	ldrb	r1, [r7, #3]
 8001664:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001666:	9302      	str	r3, [sp, #8]
 8001668:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	4623      	mov	r3, r4
 8001676:	f003 fed1 	bl	800541c <USB_HC_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001686:	7bfb      	ldrb	r3, [r7, #15]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	bd90      	pop	{r4, r7, pc}

08001690 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d101      	bne.n	80016ae <HAL_HCD_HC_Halt+0x1e>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e00f      	b.n	80016ce <HAL_HCD_HC_Halt+0x3e>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	78fa      	ldrb	r2, [r7, #3]
 80016bc:	4611      	mov	r1, r2
 80016be:	4618      	mov	r0, r3
 80016c0:	f004 f921 	bl	8005906 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	4608      	mov	r0, r1
 80016e2:	4611      	mov	r1, r2
 80016e4:	461a      	mov	r2, r3
 80016e6:	4603      	mov	r3, r0
 80016e8:	70fb      	strb	r3, [r7, #3]
 80016ea:	460b      	mov	r3, r1
 80016ec:	70bb      	strb	r3, [r7, #2]
 80016ee:	4613      	mov	r3, r2
 80016f0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80016f2:	78fb      	ldrb	r3, [r7, #3]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	212c      	movs	r1, #44	; 0x2c
 80016f8:	fb01 f303 	mul.w	r3, r1, r3
 80016fc:	4413      	add	r3, r2
 80016fe:	333b      	adds	r3, #59	; 0x3b
 8001700:	78ba      	ldrb	r2, [r7, #2]
 8001702:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	212c      	movs	r1, #44	; 0x2c
 800170a:	fb01 f303 	mul.w	r3, r1, r3
 800170e:	4413      	add	r3, r2
 8001710:	333f      	adds	r3, #63	; 0x3f
 8001712:	787a      	ldrb	r2, [r7, #1]
 8001714:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001716:	7c3b      	ldrb	r3, [r7, #16]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d112      	bne.n	8001742 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	212c      	movs	r1, #44	; 0x2c
 8001722:	fb01 f303 	mul.w	r3, r1, r3
 8001726:	4413      	add	r3, r2
 8001728:	3342      	adds	r3, #66	; 0x42
 800172a:	2203      	movs	r2, #3
 800172c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	212c      	movs	r1, #44	; 0x2c
 8001734:	fb01 f303 	mul.w	r3, r1, r3
 8001738:	4413      	add	r3, r2
 800173a:	333d      	adds	r3, #61	; 0x3d
 800173c:	7f3a      	ldrb	r2, [r7, #28]
 800173e:	701a      	strb	r2, [r3, #0]
 8001740:	e008      	b.n	8001754 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	212c      	movs	r1, #44	; 0x2c
 8001748:	fb01 f303 	mul.w	r3, r1, r3
 800174c:	4413      	add	r3, r2
 800174e:	3342      	adds	r3, #66	; 0x42
 8001750:	2202      	movs	r2, #2
 8001752:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001754:	787b      	ldrb	r3, [r7, #1]
 8001756:	2b03      	cmp	r3, #3
 8001758:	f200 80c6 	bhi.w	80018e8 <HAL_HCD_HC_SubmitRequest+0x210>
 800175c:	a201      	add	r2, pc, #4	; (adr r2, 8001764 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800175e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001762:	bf00      	nop
 8001764:	08001775 	.word	0x08001775
 8001768:	080018d5 	.word	0x080018d5
 800176c:	080017d9 	.word	0x080017d9
 8001770:	08001857 	.word	0x08001857
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001774:	7c3b      	ldrb	r3, [r7, #16]
 8001776:	2b01      	cmp	r3, #1
 8001778:	f040 80b8 	bne.w	80018ec <HAL_HCD_HC_SubmitRequest+0x214>
 800177c:	78bb      	ldrb	r3, [r7, #2]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f040 80b4 	bne.w	80018ec <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001784:	8b3b      	ldrh	r3, [r7, #24]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d108      	bne.n	800179c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	212c      	movs	r1, #44	; 0x2c
 8001790:	fb01 f303 	mul.w	r3, r1, r3
 8001794:	4413      	add	r3, r2
 8001796:	3355      	adds	r3, #85	; 0x55
 8001798:	2201      	movs	r2, #1
 800179a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	212c      	movs	r1, #44	; 0x2c
 80017a2:	fb01 f303 	mul.w	r3, r1, r3
 80017a6:	4413      	add	r3, r2
 80017a8:	3355      	adds	r3, #85	; 0x55
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d109      	bne.n	80017c4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	212c      	movs	r1, #44	; 0x2c
 80017b6:	fb01 f303 	mul.w	r3, r1, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	3342      	adds	r3, #66	; 0x42
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017c2:	e093      	b.n	80018ec <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	212c      	movs	r1, #44	; 0x2c
 80017ca:	fb01 f303 	mul.w	r3, r1, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	3342      	adds	r3, #66	; 0x42
 80017d2:	2202      	movs	r2, #2
 80017d4:	701a      	strb	r2, [r3, #0]
      break;
 80017d6:	e089      	b.n	80018ec <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80017d8:	78bb      	ldrb	r3, [r7, #2]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d11d      	bne.n	800181a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	212c      	movs	r1, #44	; 0x2c
 80017e4:	fb01 f303 	mul.w	r3, r1, r3
 80017e8:	4413      	add	r3, r2
 80017ea:	3355      	adds	r3, #85	; 0x55
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d109      	bne.n	8001806 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	212c      	movs	r1, #44	; 0x2c
 80017f8:	fb01 f303 	mul.w	r3, r1, r3
 80017fc:	4413      	add	r3, r2
 80017fe:	3342      	adds	r3, #66	; 0x42
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001804:	e073      	b.n	80018ee <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	212c      	movs	r1, #44	; 0x2c
 800180c:	fb01 f303 	mul.w	r3, r1, r3
 8001810:	4413      	add	r3, r2
 8001812:	3342      	adds	r3, #66	; 0x42
 8001814:	2202      	movs	r2, #2
 8001816:	701a      	strb	r2, [r3, #0]
      break;
 8001818:	e069      	b.n	80018ee <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	212c      	movs	r1, #44	; 0x2c
 8001820:	fb01 f303 	mul.w	r3, r1, r3
 8001824:	4413      	add	r3, r2
 8001826:	3354      	adds	r3, #84	; 0x54
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d109      	bne.n	8001842 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	212c      	movs	r1, #44	; 0x2c
 8001834:	fb01 f303 	mul.w	r3, r1, r3
 8001838:	4413      	add	r3, r2
 800183a:	3342      	adds	r3, #66	; 0x42
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
      break;
 8001840:	e055      	b.n	80018ee <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	212c      	movs	r1, #44	; 0x2c
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	4413      	add	r3, r2
 800184e:	3342      	adds	r3, #66	; 0x42
 8001850:	2202      	movs	r2, #2
 8001852:	701a      	strb	r2, [r3, #0]
      break;
 8001854:	e04b      	b.n	80018ee <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001856:	78bb      	ldrb	r3, [r7, #2]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d11d      	bne.n	8001898 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800185c:	78fb      	ldrb	r3, [r7, #3]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	212c      	movs	r1, #44	; 0x2c
 8001862:	fb01 f303 	mul.w	r3, r1, r3
 8001866:	4413      	add	r3, r2
 8001868:	3355      	adds	r3, #85	; 0x55
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d109      	bne.n	8001884 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	212c      	movs	r1, #44	; 0x2c
 8001876:	fb01 f303 	mul.w	r3, r1, r3
 800187a:	4413      	add	r3, r2
 800187c:	3342      	adds	r3, #66	; 0x42
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001882:	e034      	b.n	80018ee <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	212c      	movs	r1, #44	; 0x2c
 800188a:	fb01 f303 	mul.w	r3, r1, r3
 800188e:	4413      	add	r3, r2
 8001890:	3342      	adds	r3, #66	; 0x42
 8001892:	2202      	movs	r2, #2
 8001894:	701a      	strb	r2, [r3, #0]
      break;
 8001896:	e02a      	b.n	80018ee <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	212c      	movs	r1, #44	; 0x2c
 800189e:	fb01 f303 	mul.w	r3, r1, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	3354      	adds	r3, #84	; 0x54
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d109      	bne.n	80018c0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	212c      	movs	r1, #44	; 0x2c
 80018b2:	fb01 f303 	mul.w	r3, r1, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	3342      	adds	r3, #66	; 0x42
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
      break;
 80018be:	e016      	b.n	80018ee <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	212c      	movs	r1, #44	; 0x2c
 80018c6:	fb01 f303 	mul.w	r3, r1, r3
 80018ca:	4413      	add	r3, r2
 80018cc:	3342      	adds	r3, #66	; 0x42
 80018ce:	2202      	movs	r2, #2
 80018d0:	701a      	strb	r2, [r3, #0]
      break;
 80018d2:	e00c      	b.n	80018ee <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	212c      	movs	r1, #44	; 0x2c
 80018da:	fb01 f303 	mul.w	r3, r1, r3
 80018de:	4413      	add	r3, r2
 80018e0:	3342      	adds	r3, #66	; 0x42
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
      break;
 80018e6:	e002      	b.n	80018ee <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80018e8:	bf00      	nop
 80018ea:	e000      	b.n	80018ee <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80018ec:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018ee:	78fb      	ldrb	r3, [r7, #3]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	212c      	movs	r1, #44	; 0x2c
 80018f4:	fb01 f303 	mul.w	r3, r1, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	3344      	adds	r3, #68	; 0x44
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	8b3a      	ldrh	r2, [r7, #24]
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	202c      	movs	r0, #44	; 0x2c
 8001908:	fb00 f303 	mul.w	r3, r0, r3
 800190c:	440b      	add	r3, r1
 800190e:	334c      	adds	r3, #76	; 0x4c
 8001910:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	212c      	movs	r1, #44	; 0x2c
 8001918:	fb01 f303 	mul.w	r3, r1, r3
 800191c:	4413      	add	r3, r2
 800191e:	3360      	adds	r3, #96	; 0x60
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	212c      	movs	r1, #44	; 0x2c
 800192a:	fb01 f303 	mul.w	r3, r1, r3
 800192e:	4413      	add	r3, r2
 8001930:	3350      	adds	r3, #80	; 0x50
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	212c      	movs	r1, #44	; 0x2c
 800193c:	fb01 f303 	mul.w	r3, r1, r3
 8001940:	4413      	add	r3, r2
 8001942:	3339      	adds	r3, #57	; 0x39
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	212c      	movs	r1, #44	; 0x2c
 800194e:	fb01 f303 	mul.w	r3, r1, r3
 8001952:	4413      	add	r3, r2
 8001954:	3361      	adds	r3, #97	; 0x61
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6818      	ldr	r0, [r3, #0]
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	222c      	movs	r2, #44	; 0x2c
 8001962:	fb02 f303 	mul.w	r3, r2, r3
 8001966:	3338      	adds	r3, #56	; 0x38
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	18d1      	adds	r1, r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	461a      	mov	r2, r3
 8001974:	f003 fe74 	bl	8005660 <USB_HC_StartXfer>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop

08001984 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f003 fb75 	bl	800508a <USB_GetMode>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	f040 80f6 	bne.w	8001b94 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f003 fb59 	bl	8005064 <USB_ReadInterrupts>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 80ec 	beq.w	8001b92 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f003 fb50 	bl	8005064 <USB_ReadInterrupts>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019ce:	d104      	bne.n	80019da <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f003 fb40 	bl	8005064 <USB_ReadInterrupts>
 80019e4:	4603      	mov	r3, r0
 80019e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019ee:	d104      	bne.n	80019fa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f003 fb30 	bl	8005064 <USB_ReadInterrupts>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a0e:	d104      	bne.n	8001a1a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f003 fb20 	bl	8005064 <USB_ReadInterrupts>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d103      	bne.n	8001a36 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2202      	movs	r2, #2
 8001a34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f003 fb12 	bl	8005064 <USB_ReadInterrupts>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a4a:	d11c      	bne.n	8001a86 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a54:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10f      	bne.n	8001a86 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a66:	2110      	movs	r1, #16
 8001a68:	6938      	ldr	r0, [r7, #16]
 8001a6a:	f003 fa01 	bl	8004e70 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a6e:	6938      	ldr	r0, [r7, #16]
 8001a70:	f003 fa32 	bl	8004ed8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2101      	movs	r1, #1
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f003 fc08 	bl	8005290 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f006 f9d7 	bl	8007e34 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f003 faea 	bl	8005064 <USB_ReadInterrupts>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a9a:	d102      	bne.n	8001aa2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f001 f89e 	bl	8002bde <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f003 fadc 	bl	8005064 <USB_ReadInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d106      	bne.n	8001ac4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f006 f9a0 	bl	8007dfc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2208      	movs	r2, #8
 8001ac2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f003 facb 	bl	8005064 <USB_ReadInterrupts>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f003 0310 	and.w	r3, r3, #16
 8001ad4:	2b10      	cmp	r3, #16
 8001ad6:	d101      	bne.n	8001adc <HAL_HCD_IRQHandler+0x158>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <HAL_HCD_IRQHandler+0x15a>
 8001adc:	2300      	movs	r3, #0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d012      	beq.n	8001b08 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	699a      	ldr	r2, [r3, #24]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0210 	bic.w	r2, r2, #16
 8001af0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 ffa1 	bl	8002a3a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	699a      	ldr	r2, [r3, #24]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 0210 	orr.w	r2, r2, #16
 8001b06:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f003 faa9 	bl	8005064 <USB_ReadInterrupts>
 8001b12:	4603      	mov	r3, r0
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b1c:	d13a      	bne.n	8001b94 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 fede 	bl	80058e4 <USB_HC_ReadInterrupt>
 8001b28:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	e025      	b.n	8001b7c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d018      	beq.n	8001b76 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	015a      	lsls	r2, r3, #5
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b5a:	d106      	bne.n	8001b6a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	4619      	mov	r1, r3
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f8ab 	bl	8001cbe <HCD_HC_IN_IRQHandler>
 8001b68:	e005      	b.n	8001b76 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	4619      	mov	r1, r3
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 fbf9 	bl	8002368 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d3d4      	bcc.n	8001b30 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b8e:	615a      	str	r2, [r3, #20]
 8001b90:	e000      	b.n	8001b94 <HAL_HCD_IRQHandler+0x210>
      return;
 8001b92:	bf00      	nop
    }
  }
}
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_HCD_Start+0x16>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e013      	b.n	8001bd8 <HAL_HCD_Start+0x3e>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f003 fbca 	bl	8005358 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f003 f8e2 	bl	8004d92 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <HAL_HCD_Stop+0x16>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e00d      	b.n	8001c12 <HAL_HCD_Stop+0x32>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f003 ffb8 	bl	8005b78 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 fb6c 	bl	8005304 <USB_ResetPort>
 8001c2c:	4603      	mov	r3, r0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c42:	78fb      	ldrb	r3, [r7, #3]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	212c      	movs	r1, #44	; 0x2c
 8001c48:	fb01 f303 	mul.w	r3, r1, r3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	3360      	adds	r3, #96	; 0x60
 8001c50:	781b      	ldrb	r3, [r3, #0]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	460b      	mov	r3, r1
 8001c68:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	212c      	movs	r1, #44	; 0x2c
 8001c70:	fb01 f303 	mul.w	r3, r1, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	3350      	adds	r3, #80	; 0x50
 8001c78:	681b      	ldr	r3, [r3, #0]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 fbb0 	bl	80053f8 <USB_GetCurrentFrame>
 8001c98:	4603      	mov	r3, r0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f003 fb8b 	bl	80053ca <USB_GetHostSpeed>
 8001cb4:	4603      	mov	r3, r0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	015a      	lsls	r2, r3, #5
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4413      	add	r3, r2
 8001ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d11a      	bne.n	8001d24 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	015a      	lsls	r2, r3, #5
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	212c      	movs	r1, #44	; 0x2c
 8001d06:	fb01 f303 	mul.w	r3, r1, r3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3361      	adds	r3, #97	; 0x61
 8001d0e:	2206      	movs	r2, #6
 8001d10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 fdf2 	bl	8005906 <USB_HC_Halt>
 8001d22:	e0af      	b.n	8001e84 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	015a      	lsls	r2, r3, #5
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d3a:	d11b      	bne.n	8001d74 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	015a      	lsls	r2, r3, #5
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4413      	add	r3, r2
 8001d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d48:	461a      	mov	r2, r3
 8001d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	212c      	movs	r1, #44	; 0x2c
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3361      	adds	r3, #97	; 0x61
 8001d5e:	2207      	movs	r2, #7
 8001d60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 fdca 	bl	8005906 <USB_HC_Halt>
 8001d72:	e087      	b.n	8001e84 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	015a      	lsls	r2, r3, #5
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 0320 	and.w	r3, r3, #32
 8001d86:	2b20      	cmp	r3, #32
 8001d88:	d109      	bne.n	8001d9e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	015a      	lsls	r2, r3, #5
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4413      	add	r3, r2
 8001d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d96:	461a      	mov	r2, r3
 8001d98:	2320      	movs	r3, #32
 8001d9a:	6093      	str	r3, [r2, #8]
 8001d9c:	e072      	b.n	8001e84 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	015a      	lsls	r2, r3, #5
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d11a      	bne.n	8001dea <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2308      	movs	r3, #8
 8001dc4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	212c      	movs	r1, #44	; 0x2c
 8001dcc:	fb01 f303 	mul.w	r3, r1, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3361      	adds	r3, #97	; 0x61
 8001dd4:	2205      	movs	r2, #5
 8001dd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	4611      	mov	r1, r2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 fd8f 	bl	8005906 <USB_HC_Halt>
 8001de8:	e04c      	b.n	8001e84 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e00:	d11b      	bne.n	8001e3a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e14:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	212c      	movs	r1, #44	; 0x2c
 8001e1c:	fb01 f303 	mul.w	r3, r1, r3
 8001e20:	4413      	add	r3, r2
 8001e22:	3361      	adds	r3, #97	; 0x61
 8001e24:	2208      	movs	r2, #8
 8001e26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	4611      	mov	r1, r2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 fd67 	bl	8005906 <USB_HC_Halt>
 8001e38:	e024      	b.n	8001e84 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	015a      	lsls	r2, r3, #5
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4413      	add	r3, r2
 8001e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4c:	2b80      	cmp	r3, #128	; 0x80
 8001e4e:	d119      	bne.n	8001e84 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	015a      	lsls	r2, r3, #5
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4413      	add	r3, r2
 8001e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	212c      	movs	r1, #44	; 0x2c
 8001e68:	fb01 f303 	mul.w	r3, r1, r3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3361      	adds	r3, #97	; 0x61
 8001e70:	2206      	movs	r2, #6
 8001e72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f003 fd41 	bl	8005906 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	015a      	lsls	r2, r3, #5
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e9a:	d112      	bne.n	8001ec2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f003 fd2d 	bl	8005906 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb8:	461a      	mov	r2, r3
 8001eba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ebe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001ec0:	e24e      	b.n	8002360 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	015a      	lsls	r2, r3, #5
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	f040 80df 	bne.w	8002098 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d019      	beq.n	8001f16 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	212c      	movs	r1, #44	; 0x2c
 8001ee8:	fb01 f303 	mul.w	r3, r1, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	3348      	adds	r3, #72	; 0x48
 8001ef0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	0159      	lsls	r1, r3, #5
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	440b      	add	r3, r1
 8001efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f04:	1ad2      	subs	r2, r2, r3
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	202c      	movs	r0, #44	; 0x2c
 8001f0c:	fb00 f303 	mul.w	r3, r0, r3
 8001f10:	440b      	add	r3, r1
 8001f12:	3350      	adds	r3, #80	; 0x50
 8001f14:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	212c      	movs	r1, #44	; 0x2c
 8001f1c:	fb01 f303 	mul.w	r3, r1, r3
 8001f20:	4413      	add	r3, r2
 8001f22:	3361      	adds	r3, #97	; 0x61
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	212c      	movs	r1, #44	; 0x2c
 8001f2e:	fb01 f303 	mul.w	r3, r1, r3
 8001f32:	4413      	add	r3, r2
 8001f34:	335c      	adds	r3, #92	; 0x5c
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	015a      	lsls	r2, r3, #5
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f46:	461a      	mov	r2, r3
 8001f48:	2301      	movs	r3, #1
 8001f4a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	212c      	movs	r1, #44	; 0x2c
 8001f52:	fb01 f303 	mul.w	r3, r1, r3
 8001f56:	4413      	add	r3, r2
 8001f58:	333f      	adds	r3, #63	; 0x3f
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d009      	beq.n	8001f74 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	212c      	movs	r1, #44	; 0x2c
 8001f66:	fb01 f303 	mul.w	r3, r1, r3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	333f      	adds	r3, #63	; 0x3f
 8001f6e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d111      	bne.n	8001f98 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 fcc1 	bl	8005906 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	015a      	lsls	r2, r3, #5
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f90:	461a      	mov	r2, r3
 8001f92:	2310      	movs	r3, #16
 8001f94:	6093      	str	r3, [r2, #8]
 8001f96:	e03a      	b.n	800200e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	212c      	movs	r1, #44	; 0x2c
 8001f9e:	fb01 f303 	mul.w	r3, r1, r3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	333f      	adds	r3, #63	; 0x3f
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d009      	beq.n	8001fc0 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	212c      	movs	r1, #44	; 0x2c
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	333f      	adds	r3, #63	; 0x3f
 8001fba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d126      	bne.n	800200e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	015a      	lsls	r2, r3, #5
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	0151      	lsls	r1, r2, #5
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	440a      	add	r2, r1
 8001fd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fde:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	212c      	movs	r1, #44	; 0x2c
 8001fe6:	fb01 f303 	mul.w	r3, r1, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	3360      	adds	r3, #96	; 0x60
 8001fee:	2201      	movs	r2, #1
 8001ff0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	b2d9      	uxtb	r1, r3
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	202c      	movs	r0, #44	; 0x2c
 8001ffc:	fb00 f303 	mul.w	r3, r0, r3
 8002000:	4413      	add	r3, r2
 8002002:	3360      	adds	r3, #96	; 0x60
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f005 ff21 	bl	8007e50 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d12b      	bne.n	800206e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	212c      	movs	r1, #44	; 0x2c
 800201c:	fb01 f303 	mul.w	r3, r1, r3
 8002020:	4413      	add	r3, r2
 8002022:	3348      	adds	r3, #72	; 0x48
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	202c      	movs	r0, #44	; 0x2c
 800202c:	fb00 f202 	mul.w	r2, r0, r2
 8002030:	440a      	add	r2, r1
 8002032:	3240      	adds	r2, #64	; 0x40
 8002034:	8812      	ldrh	r2, [r2, #0]
 8002036:	fbb3 f3f2 	udiv	r3, r3, r2
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 818e 	beq.w	8002360 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	212c      	movs	r1, #44	; 0x2c
 800204a:	fb01 f303 	mul.w	r3, r1, r3
 800204e:	4413      	add	r3, r2
 8002050:	3354      	adds	r3, #84	; 0x54
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	f083 0301 	eor.w	r3, r3, #1
 8002058:	b2d8      	uxtb	r0, r3
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	212c      	movs	r1, #44	; 0x2c
 8002060:	fb01 f303 	mul.w	r3, r1, r3
 8002064:	4413      	add	r3, r2
 8002066:	3354      	adds	r3, #84	; 0x54
 8002068:	4602      	mov	r2, r0
 800206a:	701a      	strb	r2, [r3, #0]
}
 800206c:	e178      	b.n	8002360 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	212c      	movs	r1, #44	; 0x2c
 8002074:	fb01 f303 	mul.w	r3, r1, r3
 8002078:	4413      	add	r3, r2
 800207a:	3354      	adds	r3, #84	; 0x54
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	f083 0301 	eor.w	r3, r3, #1
 8002082:	b2d8      	uxtb	r0, r3
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	212c      	movs	r1, #44	; 0x2c
 800208a:	fb01 f303 	mul.w	r3, r1, r3
 800208e:	4413      	add	r3, r2
 8002090:	3354      	adds	r3, #84	; 0x54
 8002092:	4602      	mov	r2, r0
 8002094:	701a      	strb	r2, [r3, #0]
}
 8002096:	e163      	b.n	8002360 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	015a      	lsls	r2, r3, #5
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4413      	add	r3, r2
 80020a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	f040 80f6 	bne.w	800229c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	212c      	movs	r1, #44	; 0x2c
 80020b6:	fb01 f303 	mul.w	r3, r1, r3
 80020ba:	4413      	add	r3, r2
 80020bc:	3361      	adds	r3, #97	; 0x61
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d109      	bne.n	80020d8 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	212c      	movs	r1, #44	; 0x2c
 80020ca:	fb01 f303 	mul.w	r3, r1, r3
 80020ce:	4413      	add	r3, r2
 80020d0:	3360      	adds	r3, #96	; 0x60
 80020d2:	2201      	movs	r2, #1
 80020d4:	701a      	strb	r2, [r3, #0]
 80020d6:	e0c9      	b.n	800226c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	212c      	movs	r1, #44	; 0x2c
 80020de:	fb01 f303 	mul.w	r3, r1, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	3361      	adds	r3, #97	; 0x61
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b05      	cmp	r3, #5
 80020ea:	d109      	bne.n	8002100 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	212c      	movs	r1, #44	; 0x2c
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	3360      	adds	r3, #96	; 0x60
 80020fa:	2205      	movs	r2, #5
 80020fc:	701a      	strb	r2, [r3, #0]
 80020fe:	e0b5      	b.n	800226c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	212c      	movs	r1, #44	; 0x2c
 8002106:	fb01 f303 	mul.w	r3, r1, r3
 800210a:	4413      	add	r3, r2
 800210c:	3361      	adds	r3, #97	; 0x61
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b06      	cmp	r3, #6
 8002112:	d009      	beq.n	8002128 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	212c      	movs	r1, #44	; 0x2c
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	4413      	add	r3, r2
 8002120:	3361      	adds	r3, #97	; 0x61
 8002122:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002124:	2b08      	cmp	r3, #8
 8002126:	d150      	bne.n	80021ca <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	212c      	movs	r1, #44	; 0x2c
 800212e:	fb01 f303 	mul.w	r3, r1, r3
 8002132:	4413      	add	r3, r2
 8002134:	335c      	adds	r3, #92	; 0x5c
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	202c      	movs	r0, #44	; 0x2c
 8002140:	fb00 f303 	mul.w	r3, r0, r3
 8002144:	440b      	add	r3, r1
 8002146:	335c      	adds	r3, #92	; 0x5c
 8002148:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	212c      	movs	r1, #44	; 0x2c
 8002150:	fb01 f303 	mul.w	r3, r1, r3
 8002154:	4413      	add	r3, r2
 8002156:	335c      	adds	r3, #92	; 0x5c
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d912      	bls.n	8002184 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	212c      	movs	r1, #44	; 0x2c
 8002164:	fb01 f303 	mul.w	r3, r1, r3
 8002168:	4413      	add	r3, r2
 800216a:	335c      	adds	r3, #92	; 0x5c
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	212c      	movs	r1, #44	; 0x2c
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	4413      	add	r3, r2
 800217c:	3360      	adds	r3, #96	; 0x60
 800217e:	2204      	movs	r2, #4
 8002180:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002182:	e073      	b.n	800226c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	212c      	movs	r1, #44	; 0x2c
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	4413      	add	r3, r2
 8002190:	3360      	adds	r3, #96	; 0x60
 8002192:	2202      	movs	r2, #2
 8002194:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	015a      	lsls	r2, r3, #5
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4413      	add	r3, r2
 800219e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021ac:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021b4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c2:	461a      	mov	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021c8:	e050      	b.n	800226c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	212c      	movs	r1, #44	; 0x2c
 80021d0:	fb01 f303 	mul.w	r3, r1, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	3361      	adds	r3, #97	; 0x61
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d122      	bne.n	8002224 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	212c      	movs	r1, #44	; 0x2c
 80021e4:	fb01 f303 	mul.w	r3, r1, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	3360      	adds	r3, #96	; 0x60
 80021ec:	2202      	movs	r2, #2
 80021ee:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	015a      	lsls	r2, r3, #5
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002206:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800220e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4413      	add	r3, r2
 8002218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221c:	461a      	mov	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	e023      	b.n	800226c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	212c      	movs	r1, #44	; 0x2c
 800222a:	fb01 f303 	mul.w	r3, r1, r3
 800222e:	4413      	add	r3, r2
 8002230:	3361      	adds	r3, #97	; 0x61
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b07      	cmp	r3, #7
 8002236:	d119      	bne.n	800226c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	212c      	movs	r1, #44	; 0x2c
 800223e:	fb01 f303 	mul.w	r3, r1, r3
 8002242:	4413      	add	r3, r2
 8002244:	335c      	adds	r3, #92	; 0x5c
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	202c      	movs	r0, #44	; 0x2c
 8002250:	fb00 f303 	mul.w	r3, r0, r3
 8002254:	440b      	add	r3, r1
 8002256:	335c      	adds	r3, #92	; 0x5c
 8002258:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	212c      	movs	r1, #44	; 0x2c
 8002260:	fb01 f303 	mul.w	r3, r1, r3
 8002264:	4413      	add	r3, r2
 8002266:	3360      	adds	r3, #96	; 0x60
 8002268:	2204      	movs	r2, #4
 800226a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	015a      	lsls	r2, r3, #5
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4413      	add	r3, r2
 8002274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002278:	461a      	mov	r2, r3
 800227a:	2302      	movs	r3, #2
 800227c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	b2d9      	uxtb	r1, r3
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	202c      	movs	r0, #44	; 0x2c
 8002288:	fb00 f303 	mul.w	r3, r0, r3
 800228c:	4413      	add	r3, r2
 800228e:	3360      	adds	r3, #96	; 0x60
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f005 fddb 	bl	8007e50 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800229a:	e061      	b.n	8002360 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	2b10      	cmp	r3, #16
 80022b0:	d156      	bne.n	8002360 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	212c      	movs	r1, #44	; 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	333f      	adds	r3, #63	; 0x3f
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d111      	bne.n	80022ea <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	212c      	movs	r1, #44	; 0x2c
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	4413      	add	r3, r2
 80022d2:	335c      	adds	r3, #92	; 0x5c
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	4611      	mov	r1, r2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f003 fb0f 	bl	8005906 <USB_HC_Halt>
 80022e8:	e031      	b.n	800234e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	212c      	movs	r1, #44	; 0x2c
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	4413      	add	r3, r2
 80022f6:	333f      	adds	r3, #63	; 0x3f
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d009      	beq.n	8002312 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	212c      	movs	r1, #44	; 0x2c
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	4413      	add	r3, r2
 800230a:	333f      	adds	r3, #63	; 0x3f
 800230c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800230e:	2b02      	cmp	r3, #2
 8002310:	d11d      	bne.n	800234e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	212c      	movs	r1, #44	; 0x2c
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	4413      	add	r3, r2
 800231e:	335c      	adds	r3, #92	; 0x5c
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d110      	bne.n	800234e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	212c      	movs	r1, #44	; 0x2c
 8002332:	fb01 f303 	mul.w	r3, r1, r3
 8002336:	4413      	add	r3, r2
 8002338:	3361      	adds	r3, #97	; 0x61
 800233a:	2203      	movs	r2, #3
 800233c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f003 fadc 	bl	8005906 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	015a      	lsls	r2, r3, #5
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4413      	add	r3, r2
 8002356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235a:	461a      	mov	r2, r3
 800235c:	2310      	movs	r3, #16
 800235e:	6093      	str	r3, [r2, #8]
}
 8002360:	bf00      	nop
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800237e:	78fb      	ldrb	r3, [r7, #3]
 8002380:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	015a      	lsls	r2, r3, #5
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	4413      	add	r3, r2
 800238a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b04      	cmp	r3, #4
 8002396:	d11a      	bne.n	80023ce <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a4:	461a      	mov	r2, r3
 80023a6:	2304      	movs	r3, #4
 80023a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	212c      	movs	r1, #44	; 0x2c
 80023b0:	fb01 f303 	mul.w	r3, r1, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	3361      	adds	r3, #97	; 0x61
 80023b8:	2206      	movs	r2, #6
 80023ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	4611      	mov	r1, r2
 80023c6:	4618      	mov	r0, r3
 80023c8:	f003 fa9d 	bl	8005906 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80023cc:	e331      	b.n	8002a32 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 0320 	and.w	r3, r3, #32
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	d12e      	bne.n	8002442 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	015a      	lsls	r2, r3, #5
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	4413      	add	r3, r2
 80023ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f0:	461a      	mov	r2, r3
 80023f2:	2320      	movs	r3, #32
 80023f4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	212c      	movs	r1, #44	; 0x2c
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	4413      	add	r3, r2
 8002402:	333d      	adds	r3, #61	; 0x3d
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b01      	cmp	r3, #1
 8002408:	f040 8313 	bne.w	8002a32 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	212c      	movs	r1, #44	; 0x2c
 8002412:	fb01 f303 	mul.w	r3, r1, r3
 8002416:	4413      	add	r3, r2
 8002418:	333d      	adds	r3, #61	; 0x3d
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	212c      	movs	r1, #44	; 0x2c
 8002424:	fb01 f303 	mul.w	r3, r1, r3
 8002428:	4413      	add	r3, r2
 800242a:	3360      	adds	r3, #96	; 0x60
 800242c:	2202      	movs	r2, #2
 800242e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	4611      	mov	r1, r2
 800243a:	4618      	mov	r0, r3
 800243c:	f003 fa63 	bl	8005906 <USB_HC_Halt>
}
 8002440:	e2f7      	b.n	8002a32 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	4413      	add	r3, r2
 800244a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002458:	d112      	bne.n	8002480 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	4413      	add	r3, r2
 8002462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002466:	461a      	mov	r2, r3
 8002468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800246c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f003 fa44 	bl	8005906 <USB_HC_Halt>
}
 800247e:	e2d8      	b.n	8002a32 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	4413      	add	r3, r2
 8002488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b01      	cmp	r3, #1
 8002494:	d140      	bne.n	8002518 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	212c      	movs	r1, #44	; 0x2c
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	335c      	adds	r3, #92	; 0x5c
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ba:	2b40      	cmp	r3, #64	; 0x40
 80024bc:	d111      	bne.n	80024e2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	212c      	movs	r1, #44	; 0x2c
 80024c4:	fb01 f303 	mul.w	r3, r1, r3
 80024c8:	4413      	add	r3, r2
 80024ca:	333d      	adds	r3, #61	; 0x3d
 80024cc:	2201      	movs	r2, #1
 80024ce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	015a      	lsls	r2, r3, #5
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024dc:	461a      	mov	r2, r3
 80024de:	2340      	movs	r3, #64	; 0x40
 80024e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ee:	461a      	mov	r2, r3
 80024f0:	2301      	movs	r3, #1
 80024f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	212c      	movs	r1, #44	; 0x2c
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	3361      	adds	r3, #97	; 0x61
 8002502:	2201      	movs	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f003 f9f8 	bl	8005906 <USB_HC_Halt>
}
 8002516:	e28c      	b.n	8002a32 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	4413      	add	r3, r2
 8002520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252a:	2b40      	cmp	r3, #64	; 0x40
 800252c:	d12c      	bne.n	8002588 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	212c      	movs	r1, #44	; 0x2c
 8002534:	fb01 f303 	mul.w	r3, r1, r3
 8002538:	4413      	add	r3, r2
 800253a:	3361      	adds	r3, #97	; 0x61
 800253c:	2204      	movs	r2, #4
 800253e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	212c      	movs	r1, #44	; 0x2c
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	4413      	add	r3, r2
 800254c:	333d      	adds	r3, #61	; 0x3d
 800254e:	2201      	movs	r2, #1
 8002550:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	212c      	movs	r1, #44	; 0x2c
 8002558:	fb01 f303 	mul.w	r3, r1, r3
 800255c:	4413      	add	r3, r2
 800255e:	335c      	adds	r3, #92	; 0x5c
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	4611      	mov	r1, r2
 800256e:	4618      	mov	r0, r3
 8002570:	f003 f9c9 	bl	8005906 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	4413      	add	r3, r2
 800257c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002580:	461a      	mov	r2, r3
 8002582:	2340      	movs	r3, #64	; 0x40
 8002584:	6093      	str	r3, [r2, #8]
}
 8002586:	e254      	b.n	8002a32 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b08      	cmp	r3, #8
 800259c:	d11a      	bne.n	80025d4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025aa:	461a      	mov	r2, r3
 80025ac:	2308      	movs	r3, #8
 80025ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	212c      	movs	r1, #44	; 0x2c
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	3361      	adds	r3, #97	; 0x61
 80025be:	2205      	movs	r2, #5
 80025c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	4611      	mov	r1, r2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f003 f99a 	bl	8005906 <USB_HC_Halt>
}
 80025d2:	e22e      	b.n	8002a32 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	2b10      	cmp	r3, #16
 80025e8:	d140      	bne.n	800266c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	212c      	movs	r1, #44	; 0x2c
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	4413      	add	r3, r2
 80025f6:	335c      	adds	r3, #92	; 0x5c
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	212c      	movs	r1, #44	; 0x2c
 8002602:	fb01 f303 	mul.w	r3, r1, r3
 8002606:	4413      	add	r3, r2
 8002608:	3361      	adds	r3, #97	; 0x61
 800260a:	2203      	movs	r2, #3
 800260c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	212c      	movs	r1, #44	; 0x2c
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	333d      	adds	r3, #61	; 0x3d
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d112      	bne.n	8002648 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	212c      	movs	r1, #44	; 0x2c
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	4413      	add	r3, r2
 800262e:	333c      	adds	r3, #60	; 0x3c
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d108      	bne.n	8002648 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	212c      	movs	r1, #44	; 0x2c
 800263c:	fb01 f303 	mul.w	r3, r1, r3
 8002640:	4413      	add	r3, r2
 8002642:	333d      	adds	r3, #61	; 0x3d
 8002644:	2201      	movs	r2, #1
 8002646:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	4611      	mov	r1, r2
 8002652:	4618      	mov	r0, r3
 8002654:	f003 f957 	bl	8005906 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	4413      	add	r3, r2
 8002660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002664:	461a      	mov	r2, r3
 8002666:	2310      	movs	r3, #16
 8002668:	6093      	str	r3, [r2, #8]
}
 800266a:	e1e2      	b.n	8002a32 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	4413      	add	r3, r2
 8002674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267e:	2b80      	cmp	r3, #128	; 0x80
 8002680:	d164      	bne.n	800274c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d111      	bne.n	80026ae <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	3361      	adds	r3, #97	; 0x61
 8002698:	2206      	movs	r2, #6
 800269a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	4611      	mov	r1, r2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f003 f92d 	bl	8005906 <USB_HC_Halt>
 80026ac:	e044      	b.n	8002738 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	212c      	movs	r1, #44	; 0x2c
 80026b4:	fb01 f303 	mul.w	r3, r1, r3
 80026b8:	4413      	add	r3, r2
 80026ba:	335c      	adds	r3, #92	; 0x5c
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	202c      	movs	r0, #44	; 0x2c
 80026c6:	fb00 f303 	mul.w	r3, r0, r3
 80026ca:	440b      	add	r3, r1
 80026cc:	335c      	adds	r3, #92	; 0x5c
 80026ce:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	212c      	movs	r1, #44	; 0x2c
 80026d6:	fb01 f303 	mul.w	r3, r1, r3
 80026da:	4413      	add	r3, r2
 80026dc:	335c      	adds	r3, #92	; 0x5c
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d920      	bls.n	8002726 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	212c      	movs	r1, #44	; 0x2c
 80026ea:	fb01 f303 	mul.w	r3, r1, r3
 80026ee:	4413      	add	r3, r2
 80026f0:	335c      	adds	r3, #92	; 0x5c
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	3360      	adds	r3, #96	; 0x60
 8002704:	2204      	movs	r2, #4
 8002706:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	b2d9      	uxtb	r1, r3
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	202c      	movs	r0, #44	; 0x2c
 8002712:	fb00 f303 	mul.w	r3, r0, r3
 8002716:	4413      	add	r3, r2
 8002718:	3360      	adds	r3, #96	; 0x60
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f005 fb96 	bl	8007e50 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002724:	e008      	b.n	8002738 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	212c      	movs	r1, #44	; 0x2c
 800272c:	fb01 f303 	mul.w	r3, r1, r3
 8002730:	4413      	add	r3, r2
 8002732:	3360      	adds	r3, #96	; 0x60
 8002734:	2202      	movs	r2, #2
 8002736:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002744:	461a      	mov	r2, r3
 8002746:	2380      	movs	r3, #128	; 0x80
 8002748:	6093      	str	r3, [r2, #8]
}
 800274a:	e172      	b.n	8002a32 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002762:	d11b      	bne.n	800279c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	212c      	movs	r1, #44	; 0x2c
 800276a:	fb01 f303 	mul.w	r3, r1, r3
 800276e:	4413      	add	r3, r2
 8002770:	3361      	adds	r3, #97	; 0x61
 8002772:	2208      	movs	r2, #8
 8002774:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f003 f8c0 	bl	8005906 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	4413      	add	r3, r2
 800278e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002792:	461a      	mov	r2, r3
 8002794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002798:	6093      	str	r3, [r2, #8]
}
 800279a:	e14a      	b.n	8002a32 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	f040 813f 	bne.w	8002a32 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	212c      	movs	r1, #44	; 0x2c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	4413      	add	r3, r2
 80027c0:	3361      	adds	r3, #97	; 0x61
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d17d      	bne.n	80028c4 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	212c      	movs	r1, #44	; 0x2c
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	3360      	adds	r3, #96	; 0x60
 80027d6:	2201      	movs	r2, #1
 80027d8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	212c      	movs	r1, #44	; 0x2c
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	4413      	add	r3, r2
 80027e6:	333f      	adds	r3, #63	; 0x3f
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d00a      	beq.n	8002804 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	212c      	movs	r1, #44	; 0x2c
 80027f4:	fb01 f303 	mul.w	r3, r1, r3
 80027f8:	4413      	add	r3, r2
 80027fa:	333f      	adds	r3, #63	; 0x3f
 80027fc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027fe:	2b03      	cmp	r3, #3
 8002800:	f040 8100 	bne.w	8002a04 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d113      	bne.n	8002834 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	212c      	movs	r1, #44	; 0x2c
 8002812:	fb01 f303 	mul.w	r3, r1, r3
 8002816:	4413      	add	r3, r2
 8002818:	3355      	adds	r3, #85	; 0x55
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	f083 0301 	eor.w	r3, r3, #1
 8002820:	b2d8      	uxtb	r0, r3
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	212c      	movs	r1, #44	; 0x2c
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	4413      	add	r3, r2
 800282e:	3355      	adds	r3, #85	; 0x55
 8002830:	4602      	mov	r2, r0
 8002832:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	2b01      	cmp	r3, #1
 800283a:	f040 80e3 	bne.w	8002a04 <HCD_HC_OUT_IRQHandler+0x69c>
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	212c      	movs	r1, #44	; 0x2c
 8002844:	fb01 f303 	mul.w	r3, r1, r3
 8002848:	4413      	add	r3, r2
 800284a:	334c      	adds	r3, #76	; 0x4c
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 80d8 	beq.w	8002a04 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	212c      	movs	r1, #44	; 0x2c
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	334c      	adds	r3, #76	; 0x4c
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	202c      	movs	r0, #44	; 0x2c
 800286a:	fb00 f202 	mul.w	r2, r0, r2
 800286e:	440a      	add	r2, r1
 8002870:	3240      	adds	r2, #64	; 0x40
 8002872:	8812      	ldrh	r2, [r2, #0]
 8002874:	4413      	add	r3, r2
 8002876:	3b01      	subs	r3, #1
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	202c      	movs	r0, #44	; 0x2c
 800287e:	fb00 f202 	mul.w	r2, r0, r2
 8002882:	440a      	add	r2, r1
 8002884:	3240      	adds	r2, #64	; 0x40
 8002886:	8812      	ldrh	r2, [r2, #0]
 8002888:	fbb3 f3f2 	udiv	r3, r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80b5 	beq.w	8002a04 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	212c      	movs	r1, #44	; 0x2c
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	3355      	adds	r3, #85	; 0x55
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	f083 0301 	eor.w	r3, r3, #1
 80028ae:	b2d8      	uxtb	r0, r3
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	212c      	movs	r1, #44	; 0x2c
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	3355      	adds	r3, #85	; 0x55
 80028be:	4602      	mov	r2, r0
 80028c0:	701a      	strb	r2, [r3, #0]
 80028c2:	e09f      	b.n	8002a04 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	212c      	movs	r1, #44	; 0x2c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	3361      	adds	r3, #97	; 0x61
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d109      	bne.n	80028ec <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3360      	adds	r3, #96	; 0x60
 80028e6:	2202      	movs	r2, #2
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	e08b      	b.n	8002a04 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	3361      	adds	r3, #97	; 0x61
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d109      	bne.n	8002914 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	3360      	adds	r3, #96	; 0x60
 800290e:	2202      	movs	r2, #2
 8002910:	701a      	strb	r2, [r3, #0]
 8002912:	e077      	b.n	8002a04 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	212c      	movs	r1, #44	; 0x2c
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	3361      	adds	r3, #97	; 0x61
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b05      	cmp	r3, #5
 8002926:	d109      	bne.n	800293c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	3360      	adds	r3, #96	; 0x60
 8002936:	2205      	movs	r2, #5
 8002938:	701a      	strb	r2, [r3, #0]
 800293a:	e063      	b.n	8002a04 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	212c      	movs	r1, #44	; 0x2c
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	4413      	add	r3, r2
 8002948:	3361      	adds	r3, #97	; 0x61
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b06      	cmp	r3, #6
 800294e:	d009      	beq.n	8002964 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	212c      	movs	r1, #44	; 0x2c
 8002956:	fb01 f303 	mul.w	r3, r1, r3
 800295a:	4413      	add	r3, r2
 800295c:	3361      	adds	r3, #97	; 0x61
 800295e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002960:	2b08      	cmp	r3, #8
 8002962:	d14f      	bne.n	8002a04 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	335c      	adds	r3, #92	; 0x5c
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	202c      	movs	r0, #44	; 0x2c
 800297c:	fb00 f303 	mul.w	r3, r0, r3
 8002980:	440b      	add	r3, r1
 8002982:	335c      	adds	r3, #92	; 0x5c
 8002984:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	212c      	movs	r1, #44	; 0x2c
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	4413      	add	r3, r2
 8002992:	335c      	adds	r3, #92	; 0x5c
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d912      	bls.n	80029c0 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	212c      	movs	r1, #44	; 0x2c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	335c      	adds	r3, #92	; 0x5c
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	3360      	adds	r3, #96	; 0x60
 80029ba:	2204      	movs	r2, #4
 80029bc:	701a      	strb	r2, [r3, #0]
 80029be:	e021      	b.n	8002a04 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	212c      	movs	r1, #44	; 0x2c
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	3360      	adds	r3, #96	; 0x60
 80029ce:	2202      	movs	r2, #2
 80029d0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029e8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029f0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fe:	461a      	mov	r2, r3
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a10:	461a      	mov	r2, r3
 8002a12:	2302      	movs	r3, #2
 8002a14:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	b2d9      	uxtb	r1, r3
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	202c      	movs	r0, #44	; 0x2c
 8002a20:	fb00 f303 	mul.w	r3, r0, r3
 8002a24:	4413      	add	r3, r2
 8002a26:	3360      	adds	r3, #96	; 0x60
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f005 fa0f 	bl	8007e50 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a32:	bf00      	nop
 8002a34:	3720      	adds	r7, #32
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b08a      	sub	sp, #40	; 0x28
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	0c5b      	lsrs	r3, r3, #17
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a6e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d004      	beq.n	8002a80 <HCD_RXQLVL_IRQHandler+0x46>
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2b05      	cmp	r3, #5
 8002a7a:	f000 80a9 	beq.w	8002bd0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a7e:	e0aa      	b.n	8002bd6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 80a6 	beq.w	8002bd4 <HCD_RXQLVL_IRQHandler+0x19a>
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	3344      	adds	r3, #68	; 0x44
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 809b 	beq.w	8002bd4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	212c      	movs	r1, #44	; 0x2c
 8002aa4:	fb01 f303 	mul.w	r3, r1, r3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3350      	adds	r3, #80	; 0x50
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	441a      	add	r2, r3
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	202c      	movs	r0, #44	; 0x2c
 8002ab8:	fb00 f303 	mul.w	r3, r0, r3
 8002abc:	440b      	add	r3, r1
 8002abe:	334c      	adds	r3, #76	; 0x4c
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d87a      	bhi.n	8002bbc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3344      	adds	r3, #68	; 0x44
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	b292      	uxth	r2, r2
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f002 fa68 	bl	8004fb4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	212c      	movs	r1, #44	; 0x2c
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	3344      	adds	r3, #68	; 0x44
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	441a      	add	r2, r3
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	202c      	movs	r0, #44	; 0x2c
 8002afe:	fb00 f303 	mul.w	r3, r0, r3
 8002b02:	440b      	add	r3, r1
 8002b04:	3344      	adds	r3, #68	; 0x44
 8002b06:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	212c      	movs	r1, #44	; 0x2c
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	3350      	adds	r3, #80	; 0x50
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	441a      	add	r2, r3
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	202c      	movs	r0, #44	; 0x2c
 8002b22:	fb00 f303 	mul.w	r3, r0, r3
 8002b26:	440b      	add	r3, r1
 8002b28:	3350      	adds	r3, #80	; 0x50
 8002b2a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	0cdb      	lsrs	r3, r3, #19
 8002b3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b40:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	212c      	movs	r1, #44	; 0x2c
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3340      	adds	r3, #64	; 0x40
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d13c      	bne.n	8002bd4 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d039      	beq.n	8002bd4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b76:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b7e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	212c      	movs	r1, #44	; 0x2c
 8002b98:	fb01 f303 	mul.w	r3, r1, r3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3354      	adds	r3, #84	; 0x54
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	f083 0301 	eor.w	r3, r3, #1
 8002ba6:	b2d8      	uxtb	r0, r3
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	212c      	movs	r1, #44	; 0x2c
 8002bae:	fb01 f303 	mul.w	r3, r1, r3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3354      	adds	r3, #84	; 0x54
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	701a      	strb	r2, [r3, #0]
      break;
 8002bba:	e00b      	b.n	8002bd4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	212c      	movs	r1, #44	; 0x2c
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3360      	adds	r3, #96	; 0x60
 8002bca:	2204      	movs	r2, #4
 8002bcc:	701a      	strb	r2, [r3, #0]
      break;
 8002bce:	e001      	b.n	8002bd4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002bd0:	bf00      	nop
 8002bd2:	e000      	b.n	8002bd6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002bd4:	bf00      	nop
  }
}
 8002bd6:	bf00      	nop
 8002bd8:	3728      	adds	r7, #40	; 0x28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b086      	sub	sp, #24
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c0a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d10b      	bne.n	8002c2e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d102      	bne.n	8002c26 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f005 f8f9 	bl	8007e18 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f043 0302 	orr.w	r3, r3, #2
 8002c2c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d132      	bne.n	8002c9e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f043 0308 	orr.w	r3, r3, #8
 8002c3e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d126      	bne.n	8002c98 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d113      	bne.n	8002c7a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c5c:	d106      	bne.n	8002c6c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2102      	movs	r1, #2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f002 fb13 	bl	8005290 <USB_InitFSLSPClkSel>
 8002c6a:	e011      	b.n	8002c90 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2101      	movs	r1, #1
 8002c72:	4618      	mov	r0, r3
 8002c74:	f002 fb0c 	bl	8005290 <USB_InitFSLSPClkSel>
 8002c78:	e00a      	b.n	8002c90 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d106      	bne.n	8002c90 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c88:	461a      	mov	r2, r3
 8002c8a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c8e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f005 f8eb 	bl	8007e6c <HAL_HCD_PortEnabled_Callback>
 8002c96:	e002      	b.n	8002c9e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f005 f8f5 	bl	8007e88 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	d103      	bne.n	8002cb0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f043 0320 	orr.w	r3, r3, #32
 8002cae:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	6013      	str	r3, [r2, #0]
}
 8002cbc:	bf00      	nop
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e12b      	b.n	8002f2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d106      	bne.n	8002cf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7fd fe6a 	bl	80009c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2224      	movs	r2, #36	; 0x24
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0201 	bic.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d28:	f001 fa20 	bl	800416c <HAL_RCC_GetPCLK1Freq>
 8002d2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	4a81      	ldr	r2, [pc, #516]	; (8002f38 <HAL_I2C_Init+0x274>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d807      	bhi.n	8002d48 <HAL_I2C_Init+0x84>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4a80      	ldr	r2, [pc, #512]	; (8002f3c <HAL_I2C_Init+0x278>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	bf94      	ite	ls
 8002d40:	2301      	movls	r3, #1
 8002d42:	2300      	movhi	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	e006      	b.n	8002d56 <HAL_I2C_Init+0x92>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4a7d      	ldr	r2, [pc, #500]	; (8002f40 <HAL_I2C_Init+0x27c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	bf94      	ite	ls
 8002d50:	2301      	movls	r3, #1
 8002d52:	2300      	movhi	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e0e7      	b.n	8002f2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4a78      	ldr	r2, [pc, #480]	; (8002f44 <HAL_I2C_Init+0x280>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	0c9b      	lsrs	r3, r3, #18
 8002d68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	4a6a      	ldr	r2, [pc, #424]	; (8002f38 <HAL_I2C_Init+0x274>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d802      	bhi.n	8002d98 <HAL_I2C_Init+0xd4>
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	3301      	adds	r3, #1
 8002d96:	e009      	b.n	8002dac <HAL_I2C_Init+0xe8>
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d9e:	fb02 f303 	mul.w	r3, r2, r3
 8002da2:	4a69      	ldr	r2, [pc, #420]	; (8002f48 <HAL_I2C_Init+0x284>)
 8002da4:	fba2 2303 	umull	r2, r3, r2, r3
 8002da8:	099b      	lsrs	r3, r3, #6
 8002daa:	3301      	adds	r3, #1
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	430b      	orrs	r3, r1
 8002db2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	495c      	ldr	r1, [pc, #368]	; (8002f38 <HAL_I2C_Init+0x274>)
 8002dc8:	428b      	cmp	r3, r1
 8002dca:	d819      	bhi.n	8002e00 <HAL_I2C_Init+0x13c>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	1e59      	subs	r1, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dda:	1c59      	adds	r1, r3, #1
 8002ddc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002de0:	400b      	ands	r3, r1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00a      	beq.n	8002dfc <HAL_I2C_Init+0x138>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	1e59      	subs	r1, r3, #1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002df4:	3301      	adds	r3, #1
 8002df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfa:	e051      	b.n	8002ea0 <HAL_I2C_Init+0x1dc>
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	e04f      	b.n	8002ea0 <HAL_I2C_Init+0x1dc>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d111      	bne.n	8002e2c <HAL_I2C_Init+0x168>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1e58      	subs	r0, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6859      	ldr	r1, [r3, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	440b      	add	r3, r1
 8002e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf0c      	ite	eq
 8002e24:	2301      	moveq	r3, #1
 8002e26:	2300      	movne	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	e012      	b.n	8002e52 <HAL_I2C_Init+0x18e>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1e58      	subs	r0, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6859      	ldr	r1, [r3, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	0099      	lsls	r1, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e42:	3301      	adds	r3, #1
 8002e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf0c      	ite	eq
 8002e4c:	2301      	moveq	r3, #1
 8002e4e:	2300      	movne	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_I2C_Init+0x196>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e022      	b.n	8002ea0 <HAL_I2C_Init+0x1dc>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10e      	bne.n	8002e80 <HAL_I2C_Init+0x1bc>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1e58      	subs	r0, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6859      	ldr	r1, [r3, #4]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	440b      	add	r3, r1
 8002e70:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e74:	3301      	adds	r3, #1
 8002e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e7e:	e00f      	b.n	8002ea0 <HAL_I2C_Init+0x1dc>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	1e58      	subs	r0, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6859      	ldr	r1, [r3, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	0099      	lsls	r1, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e96:	3301      	adds	r3, #1
 8002e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	6809      	ldr	r1, [r1, #0]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69da      	ldr	r2, [r3, #28]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ece:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6911      	ldr	r1, [r2, #16]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68d2      	ldr	r2, [r2, #12]
 8002eda:	4311      	orrs	r1, r2
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	000186a0 	.word	0x000186a0
 8002f3c:	001e847f 	.word	0x001e847f
 8002f40:	003d08ff 	.word	0x003d08ff
 8002f44:	431bde83 	.word	0x431bde83
 8002f48:	10624dd3 	.word	0x10624dd3

08002f4c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e128      	b.n	80031b0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a90      	ldr	r2, [pc, #576]	; (80031b8 <HAL_I2S_Init+0x26c>)
 8002f76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7fd fd6b 	bl	8000a54 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2202      	movs	r2, #2
 8002f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f94:	f023 030f 	bic.w	r3, r3, #15
 8002f98:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d060      	beq.n	800306c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d102      	bne.n	8002fb8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002fb2:	2310      	movs	r3, #16
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	e001      	b.n	8002fbc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002fb8:	2320      	movs	r3, #32
 8002fba:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	d802      	bhi.n	8002fca <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f001 f9d8 	bl	8004380 <HAL_RCCEx_GetPeriphCLKFreq>
 8002fd0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fda:	d125      	bne.n	8003028 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d010      	beq.n	8003006 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003000:	3305      	adds	r3, #5
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	e01f      	b.n	8003046 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	461a      	mov	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003022:	3305      	adds	r3, #5
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	e00e      	b.n	8003046 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	461a      	mov	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003042:	3305      	adds	r3, #5
 8003044:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4a5c      	ldr	r2, [pc, #368]	; (80031bc <HAL_I2S_Init+0x270>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	08db      	lsrs	r3, r3, #3
 8003050:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	085b      	lsrs	r3, r3, #1
 8003062:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	e003      	b.n	8003074 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800306c:	2302      	movs	r3, #2
 800306e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d902      	bls.n	8003080 <HAL_I2S_Init+0x134>
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	2bff      	cmp	r3, #255	; 0xff
 800307e:	d907      	bls.n	8003090 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003084:	f043 0210 	orr.w	r2, r3, #16
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e08f      	b.n	80031b0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	ea42 0103 	orr.w	r1, r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	69fa      	ldr	r2, [r7, #28]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030ae:	f023 030f 	bic.w	r3, r3, #15
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6851      	ldr	r1, [r2, #4]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6892      	ldr	r2, [r2, #8]
 80030ba:	4311      	orrs	r1, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	68d2      	ldr	r2, [r2, #12]
 80030c0:	4311      	orrs	r1, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6992      	ldr	r2, [r2, #24]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030d2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d161      	bne.n	80031a0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a38      	ldr	r2, [pc, #224]	; (80031c0 <HAL_I2S_Init+0x274>)
 80030e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a37      	ldr	r2, [pc, #220]	; (80031c4 <HAL_I2S_Init+0x278>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d101      	bne.n	80030f0 <HAL_I2S_Init+0x1a4>
 80030ec:	4b36      	ldr	r3, [pc, #216]	; (80031c8 <HAL_I2S_Init+0x27c>)
 80030ee:	e001      	b.n	80030f4 <HAL_I2S_Init+0x1a8>
 80030f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6812      	ldr	r2, [r2, #0]
 80030fa:	4932      	ldr	r1, [pc, #200]	; (80031c4 <HAL_I2S_Init+0x278>)
 80030fc:	428a      	cmp	r2, r1
 80030fe:	d101      	bne.n	8003104 <HAL_I2S_Init+0x1b8>
 8003100:	4a31      	ldr	r2, [pc, #196]	; (80031c8 <HAL_I2S_Init+0x27c>)
 8003102:	e001      	b.n	8003108 <HAL_I2S_Init+0x1bc>
 8003104:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003108:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800310c:	f023 030f 	bic.w	r3, r3, #15
 8003110:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a2b      	ldr	r2, [pc, #172]	; (80031c4 <HAL_I2S_Init+0x278>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d101      	bne.n	8003120 <HAL_I2S_Init+0x1d4>
 800311c:	4b2a      	ldr	r3, [pc, #168]	; (80031c8 <HAL_I2S_Init+0x27c>)
 800311e:	e001      	b.n	8003124 <HAL_I2S_Init+0x1d8>
 8003120:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003124:	2202      	movs	r2, #2
 8003126:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a25      	ldr	r2, [pc, #148]	; (80031c4 <HAL_I2S_Init+0x278>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d101      	bne.n	8003136 <HAL_I2S_Init+0x1ea>
 8003132:	4b25      	ldr	r3, [pc, #148]	; (80031c8 <HAL_I2S_Init+0x27c>)
 8003134:	e001      	b.n	800313a <HAL_I2S_Init+0x1ee>
 8003136:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003146:	d003      	beq.n	8003150 <HAL_I2S_Init+0x204>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d103      	bne.n	8003158 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	e001      	b.n	800315c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003158:	2300      	movs	r3, #0
 800315a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003166:	4313      	orrs	r3, r2
 8003168:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003170:	4313      	orrs	r3, r2
 8003172:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800317a:	4313      	orrs	r3, r2
 800317c:	b29a      	uxth	r2, r3
 800317e:	897b      	ldrh	r3, [r7, #10]
 8003180:	4313      	orrs	r3, r2
 8003182:	b29b      	uxth	r3, r3
 8003184:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003188:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a0d      	ldr	r2, [pc, #52]	; (80031c4 <HAL_I2S_Init+0x278>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d101      	bne.n	8003198 <HAL_I2S_Init+0x24c>
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <HAL_I2S_Init+0x27c>)
 8003196:	e001      	b.n	800319c <HAL_I2S_Init+0x250>
 8003198:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800319c:	897a      	ldrh	r2, [r7, #10]
 800319e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3720      	adds	r7, #32
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	080032c3 	.word	0x080032c3
 80031bc:	cccccccd 	.word	0xcccccccd
 80031c0:	080033d9 	.word	0x080033d9
 80031c4:	40003800 	.word	0x40003800
 80031c8:	40003400 	.word	0x40003400

080031cc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	881a      	ldrh	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	1c9a      	adds	r2, r3, #2
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10e      	bne.n	800325c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800324c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff ffb8 	bl	80031cc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800325c:	bf00      	nop
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	b292      	uxth	r2, r2
 8003278:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	1c9a      	adds	r2, r3, #2
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10e      	bne.n	80032ba <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032aa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff ff93 	bl	80031e0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b086      	sub	sp, #24
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d13a      	bne.n	8003354 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d109      	bne.n	80032fc <I2S_IRQHandler+0x3a>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f2:	2b40      	cmp	r3, #64	; 0x40
 80032f4:	d102      	bne.n	80032fc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff ffb4 	bl	8003264 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003302:	2b40      	cmp	r3, #64	; 0x40
 8003304:	d126      	bne.n	8003354 <I2S_IRQHandler+0x92>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b20      	cmp	r3, #32
 8003312:	d11f      	bne.n	8003354 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003322:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003324:	2300      	movs	r3, #0
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003346:	f043 0202 	orr.w	r2, r3, #2
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff ff50 	bl	80031f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b03      	cmp	r3, #3
 800335e:	d136      	bne.n	80033ce <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b02      	cmp	r3, #2
 8003368:	d109      	bne.n	800337e <I2S_IRQHandler+0xbc>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003374:	2b80      	cmp	r3, #128	; 0x80
 8003376:	d102      	bne.n	800337e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff ff45 	bl	8003208 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b08      	cmp	r3, #8
 8003386:	d122      	bne.n	80033ce <I2S_IRQHandler+0x10c>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b20      	cmp	r3, #32
 8003394:	d11b      	bne.n	80033ce <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033a4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c0:	f043 0204 	orr.w	r2, r3, #4
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff ff13 	bl	80031f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033ce:	bf00      	nop
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a92      	ldr	r2, [pc, #584]	; (8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80033f2:	4b92      	ldr	r3, [pc, #584]	; (800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033f4:	e001      	b.n	80033fa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80033f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a8b      	ldr	r2, [pc, #556]	; (8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d101      	bne.n	8003414 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003410:	4b8a      	ldr	r3, [pc, #552]	; (800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003412:	e001      	b.n	8003418 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003414:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003424:	d004      	beq.n	8003430 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	f040 8099 	bne.w	8003562 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b02      	cmp	r3, #2
 8003438:	d107      	bne.n	800344a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f925 	bl	8003694 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b01      	cmp	r3, #1
 8003452:	d107      	bne.n	8003464 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f9c8 	bl	80037f4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346a:	2b40      	cmp	r3, #64	; 0x40
 800346c:	d13a      	bne.n	80034e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d035      	beq.n	80034e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a6e      	ldr	r2, [pc, #440]	; (8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d101      	bne.n	8003486 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003482:	4b6e      	ldr	r3, [pc, #440]	; (800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003484:	e001      	b.n	800348a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003486:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4969      	ldr	r1, [pc, #420]	; (8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003492:	428b      	cmp	r3, r1
 8003494:	d101      	bne.n	800349a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003496:	4b69      	ldr	r3, [pc, #420]	; (800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003498:	e001      	b.n	800349e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800349a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800349e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034a2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034b2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	f043 0202 	orr.w	r2, r3, #2
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7ff fe88 	bl	80031f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	f040 80c3 	bne.w	8003676 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f003 0320 	and.w	r3, r3, #32
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 80bd 	beq.w	8003676 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800350a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a49      	ldr	r2, [pc, #292]	; (8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d101      	bne.n	800351a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003516:	4b49      	ldr	r3, [pc, #292]	; (800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003518:	e001      	b.n	800351e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800351a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4944      	ldr	r1, [pc, #272]	; (8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003526:	428b      	cmp	r3, r1
 8003528:	d101      	bne.n	800352e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800352a:	4b44      	ldr	r3, [pc, #272]	; (800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800352c:	e001      	b.n	8003532 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800352e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003532:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003536:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003538:	2300      	movs	r3, #0
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003552:	f043 0204 	orr.w	r2, r3, #4
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff fe4a 	bl	80031f4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003560:	e089      	b.n	8003676 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b02      	cmp	r3, #2
 800356a:	d107      	bne.n	800357c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f8be 	bl	80036f8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b01      	cmp	r3, #1
 8003584:	d107      	bne.n	8003596 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f8fd 	bl	8003790 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359c:	2b40      	cmp	r3, #64	; 0x40
 800359e:	d12f      	bne.n	8003600 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d02a      	beq.n	8003600 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035b8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a1e      	ldr	r2, [pc, #120]	; (8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d101      	bne.n	80035c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80035c4:	4b1d      	ldr	r3, [pc, #116]	; (800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035c6:	e001      	b.n	80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80035c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4919      	ldr	r1, [pc, #100]	; (8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035d4:	428b      	cmp	r3, r1
 80035d6:	d101      	bne.n	80035dc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80035d8:	4b18      	ldr	r3, [pc, #96]	; (800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035da:	e001      	b.n	80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80035dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035e4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f2:	f043 0202 	orr.w	r2, r3, #2
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff fdfa 	bl	80031f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b08      	cmp	r3, #8
 8003608:	d136      	bne.n	8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b00      	cmp	r3, #0
 8003612:	d031      	beq.n	8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a07      	ldr	r2, [pc, #28]	; (8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800361e:	4b07      	ldr	r3, [pc, #28]	; (800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003620:	e001      	b.n	8003626 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003622:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4902      	ldr	r1, [pc, #8]	; (8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800362e:	428b      	cmp	r3, r1
 8003630:	d106      	bne.n	8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003632:	4b02      	ldr	r3, [pc, #8]	; (800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003634:	e006      	b.n	8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003636:	bf00      	nop
 8003638:	40003800 	.word	0x40003800
 800363c:	40003400 	.word	0x40003400
 8003640:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003644:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003648:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003658:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003666:	f043 0204 	orr.w	r2, r3, #4
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff fdc0 	bl	80031f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003674:	e000      	b.n	8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003676:	bf00      	nop
}
 8003678:	bf00      	nop
 800367a:	3720      	adds	r7, #32
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	1c99      	adds	r1, r3, #2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6251      	str	r1, [r2, #36]	; 0x24
 80036a6:	881a      	ldrh	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d113      	bne.n	80036ee <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d106      	bne.n	80036ee <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff ffc9 	bl	8003680 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	1c99      	adds	r1, r3, #2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6251      	str	r1, [r2, #36]	; 0x24
 800370a:	8819      	ldrh	r1, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1d      	ldr	r2, [pc, #116]	; (8003788 <I2SEx_TxISR_I2SExt+0x90>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d101      	bne.n	800371a <I2SEx_TxISR_I2SExt+0x22>
 8003716:	4b1d      	ldr	r3, [pc, #116]	; (800378c <I2SEx_TxISR_I2SExt+0x94>)
 8003718:	e001      	b.n	800371e <I2SEx_TxISR_I2SExt+0x26>
 800371a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800371e:	460a      	mov	r2, r1
 8003720:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d121      	bne.n	800377e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a12      	ldr	r2, [pc, #72]	; (8003788 <I2SEx_TxISR_I2SExt+0x90>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d101      	bne.n	8003748 <I2SEx_TxISR_I2SExt+0x50>
 8003744:	4b11      	ldr	r3, [pc, #68]	; (800378c <I2SEx_TxISR_I2SExt+0x94>)
 8003746:	e001      	b.n	800374c <I2SEx_TxISR_I2SExt+0x54>
 8003748:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	490d      	ldr	r1, [pc, #52]	; (8003788 <I2SEx_TxISR_I2SExt+0x90>)
 8003754:	428b      	cmp	r3, r1
 8003756:	d101      	bne.n	800375c <I2SEx_TxISR_I2SExt+0x64>
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <I2SEx_TxISR_I2SExt+0x94>)
 800375a:	e001      	b.n	8003760 <I2SEx_TxISR_I2SExt+0x68>
 800375c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003760:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003764:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d106      	bne.n	800377e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff ff81 	bl	8003680 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40003800 	.word	0x40003800
 800378c:	40003400 	.word	0x40003400

08003790 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68d8      	ldr	r0, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	1c99      	adds	r1, r3, #2
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037a8:	b282      	uxth	r2, r0
 80037aa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d113      	bne.n	80037ec <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037d2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff ff4a 	bl	8003680 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a20      	ldr	r2, [pc, #128]	; (8003884 <I2SEx_RxISR_I2SExt+0x90>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d101      	bne.n	800380a <I2SEx_RxISR_I2SExt+0x16>
 8003806:	4b20      	ldr	r3, [pc, #128]	; (8003888 <I2SEx_RxISR_I2SExt+0x94>)
 8003808:	e001      	b.n	800380e <I2SEx_RxISR_I2SExt+0x1a>
 800380a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800380e:	68d8      	ldr	r0, [r3, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	1c99      	adds	r1, r3, #2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	62d1      	str	r1, [r2, #44]	; 0x2c
 800381a:	b282      	uxth	r2, r0
 800381c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003822:	b29b      	uxth	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d121      	bne.n	800387a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a12      	ldr	r2, [pc, #72]	; (8003884 <I2SEx_RxISR_I2SExt+0x90>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d101      	bne.n	8003844 <I2SEx_RxISR_I2SExt+0x50>
 8003840:	4b11      	ldr	r3, [pc, #68]	; (8003888 <I2SEx_RxISR_I2SExt+0x94>)
 8003842:	e001      	b.n	8003848 <I2SEx_RxISR_I2SExt+0x54>
 8003844:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	490d      	ldr	r1, [pc, #52]	; (8003884 <I2SEx_RxISR_I2SExt+0x90>)
 8003850:	428b      	cmp	r3, r1
 8003852:	d101      	bne.n	8003858 <I2SEx_RxISR_I2SExt+0x64>
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <I2SEx_RxISR_I2SExt+0x94>)
 8003856:	e001      	b.n	800385c <I2SEx_RxISR_I2SExt+0x68>
 8003858:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800385c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003860:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d106      	bne.n	800387a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7ff ff03 	bl	8003680 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40003800 	.word	0x40003800
 8003888:	40003400 	.word	0x40003400

0800388c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e267      	b.n	8003d6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d075      	beq.n	8003996 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038aa:	4b88      	ldr	r3, [pc, #544]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d00c      	beq.n	80038d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038b6:	4b85      	ldr	r3, [pc, #532]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d112      	bne.n	80038e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038c2:	4b82      	ldr	r3, [pc, #520]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ce:	d10b      	bne.n	80038e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d0:	4b7e      	ldr	r3, [pc, #504]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d05b      	beq.n	8003994 <HAL_RCC_OscConfig+0x108>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d157      	bne.n	8003994 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e242      	b.n	8003d6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f0:	d106      	bne.n	8003900 <HAL_RCC_OscConfig+0x74>
 80038f2:	4b76      	ldr	r3, [pc, #472]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a75      	ldr	r2, [pc, #468]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 80038f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e01d      	b.n	800393c <HAL_RCC_OscConfig+0xb0>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003908:	d10c      	bne.n	8003924 <HAL_RCC_OscConfig+0x98>
 800390a:	4b70      	ldr	r3, [pc, #448]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a6f      	ldr	r2, [pc, #444]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 8003910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	4b6d      	ldr	r3, [pc, #436]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a6c      	ldr	r2, [pc, #432]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 800391c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e00b      	b.n	800393c <HAL_RCC_OscConfig+0xb0>
 8003924:	4b69      	ldr	r3, [pc, #420]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a68      	ldr	r2, [pc, #416]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 800392a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	4b66      	ldr	r3, [pc, #408]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a65      	ldr	r2, [pc, #404]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 8003936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800393a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d013      	beq.n	800396c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7fd faa2 	bl	8000e8c <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800394c:	f7fd fa9e 	bl	8000e8c <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	; 0x64
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e207      	b.n	8003d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	4b5b      	ldr	r3, [pc, #364]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f0      	beq.n	800394c <HAL_RCC_OscConfig+0xc0>
 800396a:	e014      	b.n	8003996 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396c:	f7fd fa8e 	bl	8000e8c <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003974:	f7fd fa8a 	bl	8000e8c <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	; 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e1f3      	b.n	8003d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003986:	4b51      	ldr	r3, [pc, #324]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0xe8>
 8003992:	e000      	b.n	8003996 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d063      	beq.n	8003a6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039a2:	4b4a      	ldr	r3, [pc, #296]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00b      	beq.n	80039c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ae:	4b47      	ldr	r3, [pc, #284]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d11c      	bne.n	80039f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ba:	4b44      	ldr	r3, [pc, #272]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d116      	bne.n	80039f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c6:	4b41      	ldr	r3, [pc, #260]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <HAL_RCC_OscConfig+0x152>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d001      	beq.n	80039de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e1c7      	b.n	8003d6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039de:	4b3b      	ldr	r3, [pc, #236]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	4937      	ldr	r1, [pc, #220]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039f2:	e03a      	b.n	8003a6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d020      	beq.n	8003a3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039fc:	4b34      	ldr	r3, [pc, #208]	; (8003ad0 <HAL_RCC_OscConfig+0x244>)
 80039fe:	2201      	movs	r2, #1
 8003a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a02:	f7fd fa43 	bl	8000e8c <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a0a:	f7fd fa3f 	bl	8000e8c <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e1a8      	b.n	8003d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a1c:	4b2b      	ldr	r3, [pc, #172]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0f0      	beq.n	8003a0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a28:	4b28      	ldr	r3, [pc, #160]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	4925      	ldr	r1, [pc, #148]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	600b      	str	r3, [r1, #0]
 8003a3c:	e015      	b.n	8003a6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a3e:	4b24      	ldr	r3, [pc, #144]	; (8003ad0 <HAL_RCC_OscConfig+0x244>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a44:	f7fd fa22 	bl	8000e8c <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a4c:	f7fd fa1e 	bl	8000e8c <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e187      	b.n	8003d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a5e:	4b1b      	ldr	r3, [pc, #108]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d036      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d016      	beq.n	8003aac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a7e:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <HAL_RCC_OscConfig+0x248>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a84:	f7fd fa02 	bl	8000e8c <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a8c:	f7fd f9fe 	bl	8000e8c <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e167      	b.n	8003d6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a9e:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_RCC_OscConfig+0x240>)
 8003aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCC_OscConfig+0x200>
 8003aaa:	e01b      	b.n	8003ae4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aac:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <HAL_RCC_OscConfig+0x248>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab2:	f7fd f9eb 	bl	8000e8c <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab8:	e00e      	b.n	8003ad8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aba:	f7fd f9e7 	bl	8000e8c <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d907      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e150      	b.n	8003d6e <HAL_RCC_OscConfig+0x4e2>
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	42470000 	.word	0x42470000
 8003ad4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad8:	4b88      	ldr	r3, [pc, #544]	; (8003cfc <HAL_RCC_OscConfig+0x470>)
 8003ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1ea      	bne.n	8003aba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 8097 	beq.w	8003c20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003af2:	2300      	movs	r3, #0
 8003af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af6:	4b81      	ldr	r3, [pc, #516]	; (8003cfc <HAL_RCC_OscConfig+0x470>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10f      	bne.n	8003b22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b02:	2300      	movs	r3, #0
 8003b04:	60bb      	str	r3, [r7, #8]
 8003b06:	4b7d      	ldr	r3, [pc, #500]	; (8003cfc <HAL_RCC_OscConfig+0x470>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	4a7c      	ldr	r2, [pc, #496]	; (8003cfc <HAL_RCC_OscConfig+0x470>)
 8003b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b10:	6413      	str	r3, [r2, #64]	; 0x40
 8003b12:	4b7a      	ldr	r3, [pc, #488]	; (8003cfc <HAL_RCC_OscConfig+0x470>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1a:	60bb      	str	r3, [r7, #8]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b22:	4b77      	ldr	r3, [pc, #476]	; (8003d00 <HAL_RCC_OscConfig+0x474>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d118      	bne.n	8003b60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b2e:	4b74      	ldr	r3, [pc, #464]	; (8003d00 <HAL_RCC_OscConfig+0x474>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a73      	ldr	r2, [pc, #460]	; (8003d00 <HAL_RCC_OscConfig+0x474>)
 8003b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b3a:	f7fd f9a7 	bl	8000e8c <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b42:	f7fd f9a3 	bl	8000e8c <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e10c      	b.n	8003d6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b54:	4b6a      	ldr	r3, [pc, #424]	; (8003d00 <HAL_RCC_OscConfig+0x474>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0f0      	beq.n	8003b42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d106      	bne.n	8003b76 <HAL_RCC_OscConfig+0x2ea>
 8003b68:	4b64      	ldr	r3, [pc, #400]	; (8003cfc <HAL_RCC_OscConfig+0x470>)
 8003b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6c:	4a63      	ldr	r2, [pc, #396]	; (8003cfc <HAL_RCC_OscConfig+0x470>)
 8003b6e:	f043 0301 	orr.w	r3, r3, #1
 8003b72:	6713      	str	r3, [r2, #112]	; 0x70
 8003b74:	e01c      	b.n	8003bb0 <HAL_RCC_OscConfig+0x324>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2b05      	cmp	r3, #5
 8003b7c:	d10c      	bne.n	8003b98 <HAL_RCC_OscConfig+0x30c>
 8003b7e:	4b5f      	ldr	r3, [pc, #380]	; (8003cfc <HAL_RCC_OscConfig+0x470>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b82:	4a5e      	ldr	r2, [pc, #376]	; (8003cfc <HAL_RCC_OscConfig+0x470>)
 8003b84:	f043 0304 	orr.w	r3, r3, #4
 8003b88:	6713      	str	r3, [r2, #112]	; 0x70
 8003b8a:	4b5c      	ldr	r3, [pc, #368]	; (8003cfc <HAL_RCC_OscConfig+0x470>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8e:	4a5b      	ldr	r2, [pc, #364]	; (8003cfc <HAL_RCC_OscConfig+0x470>)
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	6713      	str	r3, [r2, #112]	; 0x70
 8003b96:	e00b      	b.n	8003bb0 <HAL_RCC_OscConfig+0x324>
 8003b98:	4b58      	ldr	r3, [pc, #352]	; (8003cfc <HAL_RCC_OscConfig+0x470>)
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9c:	4a57      	ldr	r2, [pc, #348]	; (8003cfc <HAL_RCC_OscConfig+0x470>)
 8003b9e:	f023 0301 	bic.w	r3, r3, #1
 8003ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba4:	4b55      	ldr	r3, [pc, #340]	; (8003cfc <HAL_RCC_OscConfig+0x470>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	4a54      	ldr	r2, [pc, #336]	; (8003cfc <HAL_RCC_OscConfig+0x470>)
 8003baa:	f023 0304 	bic.w	r3, r3, #4
 8003bae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d015      	beq.n	8003be4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb8:	f7fd f968 	bl	8000e8c <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bbe:	e00a      	b.n	8003bd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc0:	f7fd f964 	bl	8000e8c <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e0cb      	b.n	8003d6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd6:	4b49      	ldr	r3, [pc, #292]	; (8003cfc <HAL_RCC_OscConfig+0x470>)
 8003bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0ee      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x334>
 8003be2:	e014      	b.n	8003c0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be4:	f7fd f952 	bl	8000e8c <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bea:	e00a      	b.n	8003c02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bec:	f7fd f94e 	bl	8000e8c <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e0b5      	b.n	8003d6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c02:	4b3e      	ldr	r3, [pc, #248]	; (8003cfc <HAL_RCC_OscConfig+0x470>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1ee      	bne.n	8003bec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c0e:	7dfb      	ldrb	r3, [r7, #23]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d105      	bne.n	8003c20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c14:	4b39      	ldr	r3, [pc, #228]	; (8003cfc <HAL_RCC_OscConfig+0x470>)
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	4a38      	ldr	r2, [pc, #224]	; (8003cfc <HAL_RCC_OscConfig+0x470>)
 8003c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 80a1 	beq.w	8003d6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c2a:	4b34      	ldr	r3, [pc, #208]	; (8003cfc <HAL_RCC_OscConfig+0x470>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 030c 	and.w	r3, r3, #12
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d05c      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d141      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3e:	4b31      	ldr	r3, [pc, #196]	; (8003d04 <HAL_RCC_OscConfig+0x478>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c44:	f7fd f922 	bl	8000e8c <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c4c:	f7fd f91e 	bl	8000e8c <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e087      	b.n	8003d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c5e:	4b27      	ldr	r3, [pc, #156]	; (8003cfc <HAL_RCC_OscConfig+0x470>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f0      	bne.n	8003c4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69da      	ldr	r2, [r3, #28]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	019b      	lsls	r3, r3, #6
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c80:	085b      	lsrs	r3, r3, #1
 8003c82:	3b01      	subs	r3, #1
 8003c84:	041b      	lsls	r3, r3, #16
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8c:	061b      	lsls	r3, r3, #24
 8003c8e:	491b      	ldr	r1, [pc, #108]	; (8003cfc <HAL_RCC_OscConfig+0x470>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c94:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <HAL_RCC_OscConfig+0x478>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9a:	f7fd f8f7 	bl	8000e8c <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ca2:	f7fd f8f3 	bl	8000e8c <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e05c      	b.n	8003d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb4:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <HAL_RCC_OscConfig+0x470>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0f0      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x416>
 8003cc0:	e054      	b.n	8003d6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc2:	4b10      	ldr	r3, [pc, #64]	; (8003d04 <HAL_RCC_OscConfig+0x478>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7fd f8e0 	bl	8000e8c <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd0:	f7fd f8dc 	bl	8000e8c <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e045      	b.n	8003d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce2:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <HAL_RCC_OscConfig+0x470>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x444>
 8003cee:	e03d      	b.n	8003d6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d107      	bne.n	8003d08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e038      	b.n	8003d6e <HAL_RCC_OscConfig+0x4e2>
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	40007000 	.word	0x40007000
 8003d04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d08:	4b1b      	ldr	r3, [pc, #108]	; (8003d78 <HAL_RCC_OscConfig+0x4ec>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d028      	beq.n	8003d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d121      	bne.n	8003d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d11a      	bne.n	8003d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d38:	4013      	ands	r3, r2
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d111      	bne.n	8003d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4e:	085b      	lsrs	r3, r3, #1
 8003d50:	3b01      	subs	r3, #1
 8003d52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d107      	bne.n	8003d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d001      	beq.n	8003d6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40023800 	.word	0x40023800

08003d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0cc      	b.n	8003f2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d90:	4b68      	ldr	r3, [pc, #416]	; (8003f34 <HAL_RCC_ClockConfig+0x1b8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d90c      	bls.n	8003db8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9e:	4b65      	ldr	r3, [pc, #404]	; (8003f34 <HAL_RCC_ClockConfig+0x1b8>)
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da6:	4b63      	ldr	r3, [pc, #396]	; (8003f34 <HAL_RCC_ClockConfig+0x1b8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d001      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0b8      	b.n	8003f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d020      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dd0:	4b59      	ldr	r3, [pc, #356]	; (8003f38 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	4a58      	ldr	r2, [pc, #352]	; (8003f38 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003de8:	4b53      	ldr	r3, [pc, #332]	; (8003f38 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	4a52      	ldr	r2, [pc, #328]	; (8003f38 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003df2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df4:	4b50      	ldr	r3, [pc, #320]	; (8003f38 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	494d      	ldr	r1, [pc, #308]	; (8003f38 <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d044      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d107      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1a:	4b47      	ldr	r3, [pc, #284]	; (8003f38 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d119      	bne.n	8003e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e07f      	b.n	8003f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d003      	beq.n	8003e3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e36:	2b03      	cmp	r3, #3
 8003e38:	d107      	bne.n	8003e4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e3a:	4b3f      	ldr	r3, [pc, #252]	; (8003f38 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d109      	bne.n	8003e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e06f      	b.n	8003f2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e4a:	4b3b      	ldr	r3, [pc, #236]	; (8003f38 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e067      	b.n	8003f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e5a:	4b37      	ldr	r3, [pc, #220]	; (8003f38 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f023 0203 	bic.w	r2, r3, #3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	4934      	ldr	r1, [pc, #208]	; (8003f38 <HAL_RCC_ClockConfig+0x1bc>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e6c:	f7fd f80e 	bl	8000e8c <HAL_GetTick>
 8003e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e72:	e00a      	b.n	8003e8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e74:	f7fd f80a 	bl	8000e8c <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e04f      	b.n	8003f2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8a:	4b2b      	ldr	r3, [pc, #172]	; (8003f38 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 020c 	and.w	r2, r3, #12
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d1eb      	bne.n	8003e74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e9c:	4b25      	ldr	r3, [pc, #148]	; (8003f34 <HAL_RCC_ClockConfig+0x1b8>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d20c      	bcs.n	8003ec4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eaa:	4b22      	ldr	r3, [pc, #136]	; (8003f34 <HAL_RCC_ClockConfig+0x1b8>)
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb2:	4b20      	ldr	r3, [pc, #128]	; (8003f34 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d001      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e032      	b.n	8003f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d008      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ed0:	4b19      	ldr	r3, [pc, #100]	; (8003f38 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	4916      	ldr	r1, [pc, #88]	; (8003f38 <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d009      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eee:	4b12      	ldr	r3, [pc, #72]	; (8003f38 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	490e      	ldr	r1, [pc, #56]	; (8003f38 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f02:	f000 f821 	bl	8003f48 <HAL_RCC_GetSysClockFreq>
 8003f06:	4602      	mov	r2, r0
 8003f08:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	091b      	lsrs	r3, r3, #4
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	490a      	ldr	r1, [pc, #40]	; (8003f3c <HAL_RCC_ClockConfig+0x1c0>)
 8003f14:	5ccb      	ldrb	r3, [r1, r3]
 8003f16:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1a:	4a09      	ldr	r2, [pc, #36]	; (8003f40 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f1e:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <HAL_RCC_ClockConfig+0x1c8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fc ff6e 	bl	8000e04 <HAL_InitTick>

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40023c00 	.word	0x40023c00
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	08008550 	.word	0x08008550
 8003f40:	20000000 	.word	0x20000000
 8003f44:	20000004 	.word	0x20000004

08003f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f4c:	b094      	sub	sp, #80	; 0x50
 8003f4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	647b      	str	r3, [r7, #68]	; 0x44
 8003f54:	2300      	movs	r3, #0
 8003f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f58:	2300      	movs	r3, #0
 8003f5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f60:	4b79      	ldr	r3, [pc, #484]	; (8004148 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 030c 	and.w	r3, r3, #12
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d00d      	beq.n	8003f88 <HAL_RCC_GetSysClockFreq+0x40>
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	f200 80e1 	bhi.w	8004134 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <HAL_RCC_GetSysClockFreq+0x34>
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d003      	beq.n	8003f82 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f7a:	e0db      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f7c:	4b73      	ldr	r3, [pc, #460]	; (800414c <HAL_RCC_GetSysClockFreq+0x204>)
 8003f7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f80:	e0db      	b.n	800413a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f82:	4b73      	ldr	r3, [pc, #460]	; (8004150 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f86:	e0d8      	b.n	800413a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f88:	4b6f      	ldr	r3, [pc, #444]	; (8004148 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f92:	4b6d      	ldr	r3, [pc, #436]	; (8004148 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d063      	beq.n	8004066 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9e:	4b6a      	ldr	r3, [pc, #424]	; (8004148 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	099b      	lsrs	r3, r3, #6
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fa8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb0:	633b      	str	r3, [r7, #48]	; 0x30
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8003fb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003fba:	4622      	mov	r2, r4
 8003fbc:	462b      	mov	r3, r5
 8003fbe:	f04f 0000 	mov.w	r0, #0
 8003fc2:	f04f 0100 	mov.w	r1, #0
 8003fc6:	0159      	lsls	r1, r3, #5
 8003fc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fcc:	0150      	lsls	r0, r2, #5
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	1a51      	subs	r1, r2, r1
 8003fd6:	6139      	str	r1, [r7, #16]
 8003fd8:	4629      	mov	r1, r5
 8003fda:	eb63 0301 	sbc.w	r3, r3, r1
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fec:	4659      	mov	r1, fp
 8003fee:	018b      	lsls	r3, r1, #6
 8003ff0:	4651      	mov	r1, sl
 8003ff2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ff6:	4651      	mov	r1, sl
 8003ff8:	018a      	lsls	r2, r1, #6
 8003ffa:	4651      	mov	r1, sl
 8003ffc:	ebb2 0801 	subs.w	r8, r2, r1
 8004000:	4659      	mov	r1, fp
 8004002:	eb63 0901 	sbc.w	r9, r3, r1
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	f04f 0300 	mov.w	r3, #0
 800400e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004012:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004016:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800401a:	4690      	mov	r8, r2
 800401c:	4699      	mov	r9, r3
 800401e:	4623      	mov	r3, r4
 8004020:	eb18 0303 	adds.w	r3, r8, r3
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	462b      	mov	r3, r5
 8004028:	eb49 0303 	adc.w	r3, r9, r3
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	f04f 0200 	mov.w	r2, #0
 8004032:	f04f 0300 	mov.w	r3, #0
 8004036:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800403a:	4629      	mov	r1, r5
 800403c:	024b      	lsls	r3, r1, #9
 800403e:	4621      	mov	r1, r4
 8004040:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004044:	4621      	mov	r1, r4
 8004046:	024a      	lsls	r2, r1, #9
 8004048:	4610      	mov	r0, r2
 800404a:	4619      	mov	r1, r3
 800404c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800404e:	2200      	movs	r2, #0
 8004050:	62bb      	str	r3, [r7, #40]	; 0x28
 8004052:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004054:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004058:	f7fc f8b6 	bl	80001c8 <__aeabi_uldivmod>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4613      	mov	r3, r2
 8004062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004064:	e058      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004066:	4b38      	ldr	r3, [pc, #224]	; (8004148 <HAL_RCC_GetSysClockFreq+0x200>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	099b      	lsrs	r3, r3, #6
 800406c:	2200      	movs	r2, #0
 800406e:	4618      	mov	r0, r3
 8004070:	4611      	mov	r1, r2
 8004072:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004076:	623b      	str	r3, [r7, #32]
 8004078:	2300      	movs	r3, #0
 800407a:	627b      	str	r3, [r7, #36]	; 0x24
 800407c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004080:	4642      	mov	r2, r8
 8004082:	464b      	mov	r3, r9
 8004084:	f04f 0000 	mov.w	r0, #0
 8004088:	f04f 0100 	mov.w	r1, #0
 800408c:	0159      	lsls	r1, r3, #5
 800408e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004092:	0150      	lsls	r0, r2, #5
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4641      	mov	r1, r8
 800409a:	ebb2 0a01 	subs.w	sl, r2, r1
 800409e:	4649      	mov	r1, r9
 80040a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040b8:	ebb2 040a 	subs.w	r4, r2, sl
 80040bc:	eb63 050b 	sbc.w	r5, r3, fp
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	00eb      	lsls	r3, r5, #3
 80040ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ce:	00e2      	lsls	r2, r4, #3
 80040d0:	4614      	mov	r4, r2
 80040d2:	461d      	mov	r5, r3
 80040d4:	4643      	mov	r3, r8
 80040d6:	18e3      	adds	r3, r4, r3
 80040d8:	603b      	str	r3, [r7, #0]
 80040da:	464b      	mov	r3, r9
 80040dc:	eb45 0303 	adc.w	r3, r5, r3
 80040e0:	607b      	str	r3, [r7, #4]
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ee:	4629      	mov	r1, r5
 80040f0:	028b      	lsls	r3, r1, #10
 80040f2:	4621      	mov	r1, r4
 80040f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040f8:	4621      	mov	r1, r4
 80040fa:	028a      	lsls	r2, r1, #10
 80040fc:	4610      	mov	r0, r2
 80040fe:	4619      	mov	r1, r3
 8004100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004102:	2200      	movs	r2, #0
 8004104:	61bb      	str	r3, [r7, #24]
 8004106:	61fa      	str	r2, [r7, #28]
 8004108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800410c:	f7fc f85c 	bl	80001c8 <__aeabi_uldivmod>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4613      	mov	r3, r2
 8004116:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004118:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <HAL_RCC_GetSysClockFreq+0x200>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	0c1b      	lsrs	r3, r3, #16
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	3301      	adds	r3, #1
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004128:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800412a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800412c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004130:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004132:	e002      	b.n	800413a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004134:	4b05      	ldr	r3, [pc, #20]	; (800414c <HAL_RCC_GetSysClockFreq+0x204>)
 8004136:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800413a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800413c:	4618      	mov	r0, r3
 800413e:	3750      	adds	r7, #80	; 0x50
 8004140:	46bd      	mov	sp, r7
 8004142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004146:	bf00      	nop
 8004148:	40023800 	.word	0x40023800
 800414c:	00f42400 	.word	0x00f42400
 8004150:	007a1200 	.word	0x007a1200

08004154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004158:	4b03      	ldr	r3, [pc, #12]	; (8004168 <HAL_RCC_GetHCLKFreq+0x14>)
 800415a:	681b      	ldr	r3, [r3, #0]
}
 800415c:	4618      	mov	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	20000000 	.word	0x20000000

0800416c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004170:	f7ff fff0 	bl	8004154 <HAL_RCC_GetHCLKFreq>
 8004174:	4602      	mov	r2, r0
 8004176:	4b05      	ldr	r3, [pc, #20]	; (800418c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	0a9b      	lsrs	r3, r3, #10
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	4903      	ldr	r1, [pc, #12]	; (8004190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004182:	5ccb      	ldrb	r3, [r1, r3]
 8004184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004188:	4618      	mov	r0, r3
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40023800 	.word	0x40023800
 8004190:	08008560 	.word	0x08008560

08004194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004198:	f7ff ffdc 	bl	8004154 <HAL_RCC_GetHCLKFreq>
 800419c:	4602      	mov	r2, r0
 800419e:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	0b5b      	lsrs	r3, r3, #13
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	4903      	ldr	r1, [pc, #12]	; (80041b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041aa:	5ccb      	ldrb	r3, [r1, r3]
 80041ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	40023800 	.word	0x40023800
 80041b8:	08008560 	.word	0x08008560

080041bc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d105      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d035      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041e4:	4b62      	ldr	r3, [pc, #392]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041ea:	f7fc fe4f 	bl	8000e8c <HAL_GetTick>
 80041ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041f0:	e008      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041f2:	f7fc fe4b 	bl	8000e8c <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e0b0      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004204:	4b5b      	ldr	r3, [pc, #364]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1f0      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	019a      	lsls	r2, r3, #6
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	071b      	lsls	r3, r3, #28
 800421c:	4955      	ldr	r1, [pc, #340]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004224:	4b52      	ldr	r3, [pc, #328]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004226:	2201      	movs	r2, #1
 8004228:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800422a:	f7fc fe2f 	bl	8000e8c <HAL_GetTick>
 800422e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004230:	e008      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004232:	f7fc fe2b 	bl	8000e8c <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e090      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004244:	4b4b      	ldr	r3, [pc, #300]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0f0      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 8083 	beq.w	8004364 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	4b44      	ldr	r3, [pc, #272]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	4a43      	ldr	r2, [pc, #268]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800426c:	6413      	str	r3, [r2, #64]	; 0x40
 800426e:	4b41      	ldr	r3, [pc, #260]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800427a:	4b3f      	ldr	r3, [pc, #252]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a3e      	ldr	r2, [pc, #248]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004284:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004286:	f7fc fe01 	bl	8000e8c <HAL_GetTick>
 800428a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800428c:	e008      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800428e:	f7fc fdfd 	bl	8000e8c <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e062      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042a0:	4b35      	ldr	r3, [pc, #212]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0f0      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042ac:	4b31      	ldr	r3, [pc, #196]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d02f      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d028      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042ca:	4b2a      	ldr	r3, [pc, #168]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042d4:	4b29      	ldr	r3, [pc, #164]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042d6:	2201      	movs	r2, #1
 80042d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042da:	4b28      	ldr	r3, [pc, #160]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80042e0:	4a24      	ldr	r2, [pc, #144]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042e6:	4b23      	ldr	r3, [pc, #140]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d114      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80042f2:	f7fc fdcb 	bl	8000e8c <HAL_GetTick>
 80042f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f8:	e00a      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042fa:	f7fc fdc7 	bl	8000e8c <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	f241 3288 	movw	r2, #5000	; 0x1388
 8004308:	4293      	cmp	r3, r2
 800430a:	d901      	bls.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e02a      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004310:	4b18      	ldr	r3, [pc, #96]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0ee      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004324:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004328:	d10d      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800432a:	4b12      	ldr	r3, [pc, #72]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800433a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800433e:	490d      	ldr	r1, [pc, #52]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004340:	4313      	orrs	r3, r2
 8004342:	608b      	str	r3, [r1, #8]
 8004344:	e005      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004346:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	4a0a      	ldr	r2, [pc, #40]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800434c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004350:	6093      	str	r3, [r2, #8]
 8004352:	4b08      	ldr	r3, [pc, #32]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004354:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800435e:	4905      	ldr	r1, [pc, #20]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004360:	4313      	orrs	r3, r2
 8004362:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	42470068 	.word	0x42470068
 8004374:	40023800 	.word	0x40023800
 8004378:	40007000 	.word	0x40007000
 800437c:	42470e40 	.word	0x42470e40

08004380 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d13e      	bne.n	800441c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800439e:	4b23      	ldr	r3, [pc, #140]	; (800442c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d005      	beq.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d12f      	bne.n	8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80043b4:	4b1e      	ldr	r3, [pc, #120]	; (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043b6:	617b      	str	r3, [r7, #20]
          break;
 80043b8:	e02f      	b.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043ba:	4b1c      	ldr	r3, [pc, #112]	; (800442c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043c6:	d108      	bne.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043c8:	4b18      	ldr	r3, [pc, #96]	; (800442c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043d0:	4a18      	ldr	r2, [pc, #96]	; (8004434 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80043d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d6:	613b      	str	r3, [r7, #16]
 80043d8:	e007      	b.n	80043ea <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043da:	4b14      	ldr	r3, [pc, #80]	; (800442c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043e2:	4a15      	ldr	r2, [pc, #84]	; (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80043e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80043ea:	4b10      	ldr	r3, [pc, #64]	; (800442c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f0:	099b      	lsrs	r3, r3, #6
 80043f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	fb02 f303 	mul.w	r3, r2, r3
 80043fc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80043fe:	4b0b      	ldr	r3, [pc, #44]	; (800442c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004404:	0f1b      	lsrs	r3, r3, #28
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004410:	617b      	str	r3, [r7, #20]
          break;
 8004412:	e002      	b.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]
          break;
 8004418:	bf00      	nop
        }
      }
      break;
 800441a:	bf00      	nop
    }
  }
  return frequency;
 800441c:	697b      	ldr	r3, [r7, #20]
}
 800441e:	4618      	mov	r0, r3
 8004420:	371c      	adds	r7, #28
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40023800 	.word	0x40023800
 8004430:	00bb8000 	.word	0x00bb8000
 8004434:	007a1200 	.word	0x007a1200
 8004438:	00f42400 	.word	0x00f42400

0800443c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e07b      	b.n	8004546 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	2b00      	cmp	r3, #0
 8004454:	d108      	bne.n	8004468 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800445e:	d009      	beq.n	8004474 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	61da      	str	r2, [r3, #28]
 8004466:	e005      	b.n	8004474 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d106      	bne.n	8004494 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fc fb60 	bl	8000b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f8:	ea42 0103 	orr.w	r1, r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004500:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	0c1b      	lsrs	r3, r3, #16
 8004512:	f003 0104 	and.w	r1, r3, #4
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	f003 0210 	and.w	r2, r3, #16
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	69da      	ldr	r2, [r3, #28]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004534:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b082      	sub	sp, #8
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e03f      	b.n	80045e0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	d106      	bne.n	800457a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f7fc fb35 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2224      	movs	r2, #36	; 0x24
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68da      	ldr	r2, [r3, #12]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004590:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f928 	bl	80047e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695a      	ldr	r2, [r3, #20]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045b6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045c6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	; 0x28
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	4613      	mov	r3, r2
 80045f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b20      	cmp	r3, #32
 8004606:	d17c      	bne.n	8004702 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <HAL_UART_Transmit+0x2c>
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e075      	b.n	8004704 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461e:	2b01      	cmp	r3, #1
 8004620:	d101      	bne.n	8004626 <HAL_UART_Transmit+0x3e>
 8004622:	2302      	movs	r3, #2
 8004624:	e06e      	b.n	8004704 <HAL_UART_Transmit+0x11c>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2221      	movs	r2, #33	; 0x21
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800463c:	f7fc fc26 	bl	8000e8c <HAL_GetTick>
 8004640:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	88fa      	ldrh	r2, [r7, #6]
 8004646:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	88fa      	ldrh	r2, [r7, #6]
 800464c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004656:	d108      	bne.n	800466a <HAL_UART_Transmit+0x82>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d104      	bne.n	800466a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004660:	2300      	movs	r3, #0
 8004662:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	61bb      	str	r3, [r7, #24]
 8004668:	e003      	b.n	8004672 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800466e:	2300      	movs	r3, #0
 8004670:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800467a:	e02a      	b.n	80046d2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2200      	movs	r2, #0
 8004684:	2180      	movs	r1, #128	; 0x80
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 f840 	bl	800470c <UART_WaitOnFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e036      	b.n	8004704 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10b      	bne.n	80046b4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	461a      	mov	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046aa:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	3302      	adds	r3, #2
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	e007      	b.n	80046c4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	781a      	ldrb	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	3301      	adds	r3, #1
 80046c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1cf      	bne.n	800467c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2200      	movs	r2, #0
 80046e4:	2140      	movs	r1, #64	; 0x40
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 f810 	bl	800470c <UART_WaitOnFlagUntilTimeout>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e006      	b.n	8004704 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	e000      	b.n	8004704 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004702:	2302      	movs	r3, #2
  }
}
 8004704:	4618      	mov	r0, r3
 8004706:	3720      	adds	r7, #32
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b090      	sub	sp, #64	; 0x40
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800471c:	e050      	b.n	80047c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800471e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004724:	d04c      	beq.n	80047c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004728:	2b00      	cmp	r3, #0
 800472a:	d007      	beq.n	800473c <UART_WaitOnFlagUntilTimeout+0x30>
 800472c:	f7fc fbae 	bl	8000e8c <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004738:	429a      	cmp	r2, r3
 800473a:	d241      	bcs.n	80047c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	330c      	adds	r3, #12
 8004742:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004746:	e853 3f00 	ldrex	r3, [r3]
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	330c      	adds	r3, #12
 800475a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800475c:	637a      	str	r2, [r7, #52]	; 0x34
 800475e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004760:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004764:	e841 2300 	strex	r3, r2, [r1]
 8004768:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800476a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e5      	bne.n	800473c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3314      	adds	r3, #20
 8004776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	e853 3f00 	ldrex	r3, [r3]
 800477e:	613b      	str	r3, [r7, #16]
   return(result);
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	f023 0301 	bic.w	r3, r3, #1
 8004786:	63bb      	str	r3, [r7, #56]	; 0x38
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3314      	adds	r3, #20
 800478e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004790:	623a      	str	r2, [r7, #32]
 8004792:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004794:	69f9      	ldr	r1, [r7, #28]
 8004796:	6a3a      	ldr	r2, [r7, #32]
 8004798:	e841 2300 	strex	r3, r2, [r1]
 800479c:	61bb      	str	r3, [r7, #24]
   return(result);
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1e5      	bne.n	8004770 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e00f      	b.n	80047e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	4013      	ands	r3, r2
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	bf0c      	ite	eq
 80047d0:	2301      	moveq	r3, #1
 80047d2:	2300      	movne	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	461a      	mov	r2, r3
 80047d8:	79fb      	ldrb	r3, [r7, #7]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d09f      	beq.n	800471e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3740      	adds	r7, #64	; 0x40
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047ec:	b0c0      	sub	sp, #256	; 0x100
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004804:	68d9      	ldr	r1, [r3, #12]
 8004806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	ea40 0301 	orr.w	r3, r0, r1
 8004810:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	431a      	orrs	r2, r3
 8004820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	431a      	orrs	r2, r3
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004840:	f021 010c 	bic.w	r1, r1, #12
 8004844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800484e:	430b      	orrs	r3, r1
 8004850:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800485e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004862:	6999      	ldr	r1, [r3, #24]
 8004864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	ea40 0301 	orr.w	r3, r0, r1
 800486e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	4b8f      	ldr	r3, [pc, #572]	; (8004ab4 <UART_SetConfig+0x2cc>)
 8004878:	429a      	cmp	r2, r3
 800487a:	d005      	beq.n	8004888 <UART_SetConfig+0xa0>
 800487c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	4b8d      	ldr	r3, [pc, #564]	; (8004ab8 <UART_SetConfig+0x2d0>)
 8004884:	429a      	cmp	r2, r3
 8004886:	d104      	bne.n	8004892 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004888:	f7ff fc84 	bl	8004194 <HAL_RCC_GetPCLK2Freq>
 800488c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004890:	e003      	b.n	800489a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004892:	f7ff fc6b 	bl	800416c <HAL_RCC_GetPCLK1Freq>
 8004896:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800489a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a4:	f040 810c 	bne.w	8004ac0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ac:	2200      	movs	r2, #0
 80048ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80048b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80048ba:	4622      	mov	r2, r4
 80048bc:	462b      	mov	r3, r5
 80048be:	1891      	adds	r1, r2, r2
 80048c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80048c2:	415b      	adcs	r3, r3
 80048c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048ca:	4621      	mov	r1, r4
 80048cc:	eb12 0801 	adds.w	r8, r2, r1
 80048d0:	4629      	mov	r1, r5
 80048d2:	eb43 0901 	adc.w	r9, r3, r1
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048ea:	4690      	mov	r8, r2
 80048ec:	4699      	mov	r9, r3
 80048ee:	4623      	mov	r3, r4
 80048f0:	eb18 0303 	adds.w	r3, r8, r3
 80048f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048f8:	462b      	mov	r3, r5
 80048fa:	eb49 0303 	adc.w	r3, r9, r3
 80048fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800490e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004912:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004916:	460b      	mov	r3, r1
 8004918:	18db      	adds	r3, r3, r3
 800491a:	653b      	str	r3, [r7, #80]	; 0x50
 800491c:	4613      	mov	r3, r2
 800491e:	eb42 0303 	adc.w	r3, r2, r3
 8004922:	657b      	str	r3, [r7, #84]	; 0x54
 8004924:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004928:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800492c:	f7fb fc4c 	bl	80001c8 <__aeabi_uldivmod>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4b61      	ldr	r3, [pc, #388]	; (8004abc <UART_SetConfig+0x2d4>)
 8004936:	fba3 2302 	umull	r2, r3, r3, r2
 800493a:	095b      	lsrs	r3, r3, #5
 800493c:	011c      	lsls	r4, r3, #4
 800493e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004942:	2200      	movs	r2, #0
 8004944:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004948:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800494c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004950:	4642      	mov	r2, r8
 8004952:	464b      	mov	r3, r9
 8004954:	1891      	adds	r1, r2, r2
 8004956:	64b9      	str	r1, [r7, #72]	; 0x48
 8004958:	415b      	adcs	r3, r3
 800495a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800495c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004960:	4641      	mov	r1, r8
 8004962:	eb12 0a01 	adds.w	sl, r2, r1
 8004966:	4649      	mov	r1, r9
 8004968:	eb43 0b01 	adc.w	fp, r3, r1
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	f04f 0300 	mov.w	r3, #0
 8004974:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004978:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800497c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004980:	4692      	mov	sl, r2
 8004982:	469b      	mov	fp, r3
 8004984:	4643      	mov	r3, r8
 8004986:	eb1a 0303 	adds.w	r3, sl, r3
 800498a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800498e:	464b      	mov	r3, r9
 8004990:	eb4b 0303 	adc.w	r3, fp, r3
 8004994:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80049a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049ac:	460b      	mov	r3, r1
 80049ae:	18db      	adds	r3, r3, r3
 80049b0:	643b      	str	r3, [r7, #64]	; 0x40
 80049b2:	4613      	mov	r3, r2
 80049b4:	eb42 0303 	adc.w	r3, r2, r3
 80049b8:	647b      	str	r3, [r7, #68]	; 0x44
 80049ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80049c2:	f7fb fc01 	bl	80001c8 <__aeabi_uldivmod>
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	4611      	mov	r1, r2
 80049cc:	4b3b      	ldr	r3, [pc, #236]	; (8004abc <UART_SetConfig+0x2d4>)
 80049ce:	fba3 2301 	umull	r2, r3, r3, r1
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	2264      	movs	r2, #100	; 0x64
 80049d6:	fb02 f303 	mul.w	r3, r2, r3
 80049da:	1acb      	subs	r3, r1, r3
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049e2:	4b36      	ldr	r3, [pc, #216]	; (8004abc <UART_SetConfig+0x2d4>)
 80049e4:	fba3 2302 	umull	r2, r3, r3, r2
 80049e8:	095b      	lsrs	r3, r3, #5
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049f0:	441c      	add	r4, r3
 80049f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049f6:	2200      	movs	r2, #0
 80049f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a04:	4642      	mov	r2, r8
 8004a06:	464b      	mov	r3, r9
 8004a08:	1891      	adds	r1, r2, r2
 8004a0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a0c:	415b      	adcs	r3, r3
 8004a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a14:	4641      	mov	r1, r8
 8004a16:	1851      	adds	r1, r2, r1
 8004a18:	6339      	str	r1, [r7, #48]	; 0x30
 8004a1a:	4649      	mov	r1, r9
 8004a1c:	414b      	adcs	r3, r1
 8004a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a2c:	4659      	mov	r1, fp
 8004a2e:	00cb      	lsls	r3, r1, #3
 8004a30:	4651      	mov	r1, sl
 8004a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a36:	4651      	mov	r1, sl
 8004a38:	00ca      	lsls	r2, r1, #3
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4603      	mov	r3, r0
 8004a40:	4642      	mov	r2, r8
 8004a42:	189b      	adds	r3, r3, r2
 8004a44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a48:	464b      	mov	r3, r9
 8004a4a:	460a      	mov	r2, r1
 8004a4c:	eb42 0303 	adc.w	r3, r2, r3
 8004a50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a68:	460b      	mov	r3, r1
 8004a6a:	18db      	adds	r3, r3, r3
 8004a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a6e:	4613      	mov	r3, r2
 8004a70:	eb42 0303 	adc.w	r3, r2, r3
 8004a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a7e:	f7fb fba3 	bl	80001c8 <__aeabi_uldivmod>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4b0d      	ldr	r3, [pc, #52]	; (8004abc <UART_SetConfig+0x2d4>)
 8004a88:	fba3 1302 	umull	r1, r3, r3, r2
 8004a8c:	095b      	lsrs	r3, r3, #5
 8004a8e:	2164      	movs	r1, #100	; 0x64
 8004a90:	fb01 f303 	mul.w	r3, r1, r3
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	3332      	adds	r3, #50	; 0x32
 8004a9a:	4a08      	ldr	r2, [pc, #32]	; (8004abc <UART_SetConfig+0x2d4>)
 8004a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa0:	095b      	lsrs	r3, r3, #5
 8004aa2:	f003 0207 	and.w	r2, r3, #7
 8004aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4422      	add	r2, r4
 8004aae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ab0:	e106      	b.n	8004cc0 <UART_SetConfig+0x4d8>
 8004ab2:	bf00      	nop
 8004ab4:	40011000 	.word	0x40011000
 8004ab8:	40011400 	.word	0x40011400
 8004abc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004aca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ace:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ad2:	4642      	mov	r2, r8
 8004ad4:	464b      	mov	r3, r9
 8004ad6:	1891      	adds	r1, r2, r2
 8004ad8:	6239      	str	r1, [r7, #32]
 8004ada:	415b      	adcs	r3, r3
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ade:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ae2:	4641      	mov	r1, r8
 8004ae4:	1854      	adds	r4, r2, r1
 8004ae6:	4649      	mov	r1, r9
 8004ae8:	eb43 0501 	adc.w	r5, r3, r1
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	00eb      	lsls	r3, r5, #3
 8004af6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004afa:	00e2      	lsls	r2, r4, #3
 8004afc:	4614      	mov	r4, r2
 8004afe:	461d      	mov	r5, r3
 8004b00:	4643      	mov	r3, r8
 8004b02:	18e3      	adds	r3, r4, r3
 8004b04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b08:	464b      	mov	r3, r9
 8004b0a:	eb45 0303 	adc.w	r3, r5, r3
 8004b0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b2e:	4629      	mov	r1, r5
 8004b30:	008b      	lsls	r3, r1, #2
 8004b32:	4621      	mov	r1, r4
 8004b34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b38:	4621      	mov	r1, r4
 8004b3a:	008a      	lsls	r2, r1, #2
 8004b3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b40:	f7fb fb42 	bl	80001c8 <__aeabi_uldivmod>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4b60      	ldr	r3, [pc, #384]	; (8004ccc <UART_SetConfig+0x4e4>)
 8004b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	011c      	lsls	r4, r3, #4
 8004b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b64:	4642      	mov	r2, r8
 8004b66:	464b      	mov	r3, r9
 8004b68:	1891      	adds	r1, r2, r2
 8004b6a:	61b9      	str	r1, [r7, #24]
 8004b6c:	415b      	adcs	r3, r3
 8004b6e:	61fb      	str	r3, [r7, #28]
 8004b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b74:	4641      	mov	r1, r8
 8004b76:	1851      	adds	r1, r2, r1
 8004b78:	6139      	str	r1, [r7, #16]
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	414b      	adcs	r3, r1
 8004b7e:	617b      	str	r3, [r7, #20]
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b8c:	4659      	mov	r1, fp
 8004b8e:	00cb      	lsls	r3, r1, #3
 8004b90:	4651      	mov	r1, sl
 8004b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b96:	4651      	mov	r1, sl
 8004b98:	00ca      	lsls	r2, r1, #3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	4642      	mov	r2, r8
 8004ba2:	189b      	adds	r3, r3, r2
 8004ba4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ba8:	464b      	mov	r3, r9
 8004baa:	460a      	mov	r2, r1
 8004bac:	eb42 0303 	adc.w	r3, r2, r3
 8004bb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004bcc:	4649      	mov	r1, r9
 8004bce:	008b      	lsls	r3, r1, #2
 8004bd0:	4641      	mov	r1, r8
 8004bd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bd6:	4641      	mov	r1, r8
 8004bd8:	008a      	lsls	r2, r1, #2
 8004bda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004bde:	f7fb faf3 	bl	80001c8 <__aeabi_uldivmod>
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4611      	mov	r1, r2
 8004be8:	4b38      	ldr	r3, [pc, #224]	; (8004ccc <UART_SetConfig+0x4e4>)
 8004bea:	fba3 2301 	umull	r2, r3, r3, r1
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	2264      	movs	r2, #100	; 0x64
 8004bf2:	fb02 f303 	mul.w	r3, r2, r3
 8004bf6:	1acb      	subs	r3, r1, r3
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	3332      	adds	r3, #50	; 0x32
 8004bfc:	4a33      	ldr	r2, [pc, #204]	; (8004ccc <UART_SetConfig+0x4e4>)
 8004bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004c02:	095b      	lsrs	r3, r3, #5
 8004c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c08:	441c      	add	r4, r3
 8004c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c0e:	2200      	movs	r2, #0
 8004c10:	673b      	str	r3, [r7, #112]	; 0x70
 8004c12:	677a      	str	r2, [r7, #116]	; 0x74
 8004c14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c18:	4642      	mov	r2, r8
 8004c1a:	464b      	mov	r3, r9
 8004c1c:	1891      	adds	r1, r2, r2
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	415b      	adcs	r3, r3
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c28:	4641      	mov	r1, r8
 8004c2a:	1851      	adds	r1, r2, r1
 8004c2c:	6039      	str	r1, [r7, #0]
 8004c2e:	4649      	mov	r1, r9
 8004c30:	414b      	adcs	r3, r1
 8004c32:	607b      	str	r3, [r7, #4]
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c40:	4659      	mov	r1, fp
 8004c42:	00cb      	lsls	r3, r1, #3
 8004c44:	4651      	mov	r1, sl
 8004c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c4a:	4651      	mov	r1, sl
 8004c4c:	00ca      	lsls	r2, r1, #3
 8004c4e:	4610      	mov	r0, r2
 8004c50:	4619      	mov	r1, r3
 8004c52:	4603      	mov	r3, r0
 8004c54:	4642      	mov	r2, r8
 8004c56:	189b      	adds	r3, r3, r2
 8004c58:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c5a:	464b      	mov	r3, r9
 8004c5c:	460a      	mov	r2, r1
 8004c5e:	eb42 0303 	adc.w	r3, r2, r3
 8004c62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	663b      	str	r3, [r7, #96]	; 0x60
 8004c6e:	667a      	str	r2, [r7, #100]	; 0x64
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c7c:	4649      	mov	r1, r9
 8004c7e:	008b      	lsls	r3, r1, #2
 8004c80:	4641      	mov	r1, r8
 8004c82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c86:	4641      	mov	r1, r8
 8004c88:	008a      	lsls	r2, r1, #2
 8004c8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c8e:	f7fb fa9b 	bl	80001c8 <__aeabi_uldivmod>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4b0d      	ldr	r3, [pc, #52]	; (8004ccc <UART_SetConfig+0x4e4>)
 8004c98:	fba3 1302 	umull	r1, r3, r3, r2
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	2164      	movs	r1, #100	; 0x64
 8004ca0:	fb01 f303 	mul.w	r3, r1, r3
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	3332      	adds	r3, #50	; 0x32
 8004caa:	4a08      	ldr	r2, [pc, #32]	; (8004ccc <UART_SetConfig+0x4e4>)
 8004cac:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	f003 020f 	and.w	r2, r3, #15
 8004cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4422      	add	r2, r4
 8004cbe:	609a      	str	r2, [r3, #8]
}
 8004cc0:	bf00      	nop
 8004cc2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ccc:	51eb851f 	.word	0x51eb851f

08004cd0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	f107 001c 	add.w	r0, r7, #28
 8004cde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d122      	bne.n	8004d2e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004cfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d105      	bne.n	8004d22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f9c0 	bl	80050a8 <USB_CoreReset>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	73fb      	strb	r3, [r7, #15]
 8004d2c:	e01a      	b.n	8004d64 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f9b4 	bl	80050a8 <USB_CoreReset>
 8004d40:	4603      	mov	r3, r0
 8004d42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d106      	bne.n	8004d58 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	639a      	str	r2, [r3, #56]	; 0x38
 8004d56:	e005      	b.n	8004d64 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d10b      	bne.n	8004d82 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f043 0206 	orr.w	r2, r3, #6
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f043 0220 	orr.w	r2, r3, #32
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d8e:	b004      	add	sp, #16
 8004d90:	4770      	bx	lr

08004d92 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f043 0201 	orr.w	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f023 0201 	bic.w	r2, r3, #1
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b084      	sub	sp, #16
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
 8004dde:	460b      	mov	r3, r1
 8004de0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004df2:	78fb      	ldrb	r3, [r7, #3]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d115      	bne.n	8004e24 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e04:	2001      	movs	r0, #1
 8004e06:	f7fc f84d 	bl	8000ea4 <HAL_Delay>
      ms++;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f93a 	bl	800508a <USB_GetMode>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d01e      	beq.n	8004e5a <USB_SetCurrentMode+0x84>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b31      	cmp	r3, #49	; 0x31
 8004e20:	d9f0      	bls.n	8004e04 <USB_SetCurrentMode+0x2e>
 8004e22:	e01a      	b.n	8004e5a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d115      	bne.n	8004e56 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e36:	2001      	movs	r0, #1
 8004e38:	f7fc f834 	bl	8000ea4 <HAL_Delay>
      ms++;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f921 	bl	800508a <USB_GetMode>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d005      	beq.n	8004e5a <USB_SetCurrentMode+0x84>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b31      	cmp	r3, #49	; 0x31
 8004e52:	d9f0      	bls.n	8004e36 <USB_SetCurrentMode+0x60>
 8004e54:	e001      	b.n	8004e5a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e005      	b.n	8004e66 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2b32      	cmp	r3, #50	; 0x32
 8004e5e:	d101      	bne.n	8004e64 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e000      	b.n	8004e66 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3301      	adds	r3, #1
 8004e82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4a13      	ldr	r2, [pc, #76]	; (8004ed4 <USB_FlushTxFifo+0x64>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d901      	bls.n	8004e90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e01b      	b.n	8004ec8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	daf2      	bge.n	8004e7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	019b      	lsls	r3, r3, #6
 8004ea0:	f043 0220 	orr.w	r2, r3, #32
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4a08      	ldr	r2, [pc, #32]	; (8004ed4 <USB_FlushTxFifo+0x64>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d901      	bls.n	8004eba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e006      	b.n	8004ec8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b20      	cmp	r3, #32
 8004ec4:	d0f0      	beq.n	8004ea8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	00030d40 	.word	0x00030d40

08004ed8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4a11      	ldr	r2, [pc, #68]	; (8004f34 <USB_FlushRxFifo+0x5c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d901      	bls.n	8004ef6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e018      	b.n	8004f28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	daf2      	bge.n	8004ee4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2210      	movs	r2, #16
 8004f06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4a08      	ldr	r2, [pc, #32]	; (8004f34 <USB_FlushRxFifo+0x5c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d901      	bls.n	8004f1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e006      	b.n	8004f28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f003 0310 	and.w	r3, r3, #16
 8004f22:	2b10      	cmp	r3, #16
 8004f24:	d0f0      	beq.n	8004f08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	00030d40 	.word	0x00030d40

08004f38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b089      	sub	sp, #36	; 0x24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	4611      	mov	r1, r2
 8004f44:	461a      	mov	r2, r3
 8004f46:	460b      	mov	r3, r1
 8004f48:	71fb      	strb	r3, [r7, #7]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d123      	bne.n	8004fa6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f5e:	88bb      	ldrh	r3, [r7, #4]
 8004f60:	3303      	adds	r3, #3
 8004f62:	089b      	lsrs	r3, r3, #2
 8004f64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f66:	2300      	movs	r3, #0
 8004f68:	61bb      	str	r3, [r7, #24]
 8004f6a:	e018      	b.n	8004f9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f6c:	79fb      	ldrb	r3, [r7, #7]
 8004f6e:	031a      	lsls	r2, r3, #12
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f78:	461a      	mov	r2, r3
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	3301      	adds	r3, #1
 8004f84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	3301      	adds	r3, #1
 8004f96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	61bb      	str	r3, [r7, #24]
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d3e2      	bcc.n	8004f6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3724      	adds	r7, #36	; 0x24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b08b      	sub	sp, #44	; 0x2c
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004fca:	88fb      	ldrh	r3, [r7, #6]
 8004fcc:	089b      	lsrs	r3, r3, #2
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	f003 0303 	and.w	r3, r3, #3
 8004fd8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004fda:	2300      	movs	r3, #0
 8004fdc:	623b      	str	r3, [r7, #32]
 8004fde:	e014      	b.n	800500a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	601a      	str	r2, [r3, #0]
    pDest++;
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	3301      	adds	r3, #1
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	3301      	adds	r3, #1
 8005002:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	3301      	adds	r3, #1
 8005008:	623b      	str	r3, [r7, #32]
 800500a:	6a3a      	ldr	r2, [r7, #32]
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	429a      	cmp	r2, r3
 8005010:	d3e6      	bcc.n	8004fe0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005012:	8bfb      	ldrh	r3, [r7, #30]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d01e      	beq.n	8005056 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005022:	461a      	mov	r2, r3
 8005024:	f107 0310 	add.w	r3, r7, #16
 8005028:	6812      	ldr	r2, [r2, #0]
 800502a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	b2db      	uxtb	r3, r3
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	fa22 f303 	lsr.w	r3, r2, r3
 8005038:	b2da      	uxtb	r2, r3
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	701a      	strb	r2, [r3, #0]
      i++;
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	3301      	adds	r3, #1
 8005042:	623b      	str	r3, [r7, #32]
      pDest++;
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	3301      	adds	r3, #1
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800504a:	8bfb      	ldrh	r3, [r7, #30]
 800504c:	3b01      	subs	r3, #1
 800504e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005050:	8bfb      	ldrh	r3, [r7, #30]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1ea      	bne.n	800502c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005058:	4618      	mov	r0, r3
 800505a:	372c      	adds	r7, #44	; 0x2c
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4013      	ands	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800507c:	68fb      	ldr	r3, [r7, #12]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f003 0301 	and.w	r3, r3, #1
}
 800509a:	4618      	mov	r0, r3
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
	...

080050a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3301      	adds	r3, #1
 80050b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	4a13      	ldr	r2, [pc, #76]	; (800510c <USB_CoreReset+0x64>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d901      	bls.n	80050c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e01b      	b.n	80050fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	daf2      	bge.n	80050b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f043 0201 	orr.w	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	3301      	adds	r3, #1
 80050e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4a09      	ldr	r2, [pc, #36]	; (800510c <USB_CoreReset+0x64>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d901      	bls.n	80050f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e006      	b.n	80050fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d0f0      	beq.n	80050de <USB_CoreReset+0x36>

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	00030d40 	.word	0x00030d40

08005110 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005110:	b084      	sub	sp, #16
 8005112:	b580      	push	{r7, lr}
 8005114:	b086      	sub	sp, #24
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800511e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005130:	461a      	mov	r2, r3
 8005132:	2300      	movs	r3, #0
 8005134:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005162:	2b00      	cmp	r3, #0
 8005164:	d018      	beq.n	8005198 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005168:	2b01      	cmp	r3, #1
 800516a:	d10a      	bne.n	8005182 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800517a:	f043 0304 	orr.w	r3, r3, #4
 800517e:	6013      	str	r3, [r2, #0]
 8005180:	e014      	b.n	80051ac <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005190:	f023 0304 	bic.w	r3, r3, #4
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	e009      	b.n	80051ac <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051a6:	f023 0304 	bic.w	r3, r3, #4
 80051aa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051ac:	2110      	movs	r1, #16
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff fe5e 	bl	8004e70 <USB_FlushTxFifo>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff fe8a 	bl	8004ed8 <USB_FlushRxFifo>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80051ce:	2300      	movs	r3, #0
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	e015      	b.n	8005200 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e0:	461a      	mov	r2, r3
 80051e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051e6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f4:	461a      	mov	r2, r3
 80051f6:	2300      	movs	r3, #0
 80051f8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	3301      	adds	r3, #1
 80051fe:	613b      	str	r3, [r7, #16]
 8005200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	429a      	cmp	r2, r3
 8005206:	d3e5      	bcc.n	80051d4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005214:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00b      	beq.n	800523a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005228:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a13      	ldr	r2, [pc, #76]	; (800527c <USB_HostInit+0x16c>)
 800522e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a13      	ldr	r2, [pc, #76]	; (8005280 <USB_HostInit+0x170>)
 8005234:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005238:	e009      	b.n	800524e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2280      	movs	r2, #128	; 0x80
 800523e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a10      	ldr	r2, [pc, #64]	; (8005284 <USB_HostInit+0x174>)
 8005244:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a0f      	ldr	r2, [pc, #60]	; (8005288 <USB_HostInit+0x178>)
 800524a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005250:	2b00      	cmp	r3, #0
 8005252:	d105      	bne.n	8005260 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	f043 0210 	orr.w	r2, r3, #16
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	699a      	ldr	r2, [r3, #24]
 8005264:	4b09      	ldr	r3, [pc, #36]	; (800528c <USB_HostInit+0x17c>)
 8005266:	4313      	orrs	r3, r2
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800526c:	7dfb      	ldrb	r3, [r7, #23]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005278:	b004      	add	sp, #16
 800527a:	4770      	bx	lr
 800527c:	01000200 	.word	0x01000200
 8005280:	00e00300 	.word	0x00e00300
 8005284:	00600080 	.word	0x00600080
 8005288:	004000e0 	.word	0x004000e0
 800528c:	a3200008 	.word	0xa3200008

08005290 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	460b      	mov	r3, r1
 800529a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052ae:	f023 0303 	bic.w	r3, r3, #3
 80052b2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	78fb      	ldrb	r3, [r7, #3]
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	68f9      	ldr	r1, [r7, #12]
 80052c4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052c8:	4313      	orrs	r3, r2
 80052ca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d107      	bne.n	80052e2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052d8:	461a      	mov	r2, r3
 80052da:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80052de:	6053      	str	r3, [r2, #4]
 80052e0:	e009      	b.n	80052f6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80052e2:	78fb      	ldrb	r3, [r7, #3]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d106      	bne.n	80052f6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ee:	461a      	mov	r2, r3
 80052f0:	f241 7370 	movw	r3, #6000	; 0x1770
 80052f4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005324:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800532e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005332:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005334:	2064      	movs	r0, #100	; 0x64
 8005336:	f7fb fdb5 	bl	8000ea4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005342:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005346:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005348:	200a      	movs	r0, #10
 800534a:	f7fb fdab 	bl	8000ea4 <HAL_Delay>

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800537c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d109      	bne.n	800539c <USB_DriveVbus+0x44>
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d106      	bne.n	800539c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005396:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800539a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a6:	d109      	bne.n	80053bc <USB_DriveVbus+0x64>
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053ba:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b085      	sub	sp, #20
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	0c5b      	lsrs	r3, r3, #17
 80053e8:	f003 0303 	and.w	r3, r3, #3
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	b29b      	uxth	r3, r3
}
 800540e:	4618      	mov	r0, r3
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
	...

0800541c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b088      	sub	sp, #32
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	4608      	mov	r0, r1
 8005426:	4611      	mov	r1, r2
 8005428:	461a      	mov	r2, r3
 800542a:	4603      	mov	r3, r0
 800542c:	70fb      	strb	r3, [r7, #3]
 800542e:	460b      	mov	r3, r1
 8005430:	70bb      	strb	r3, [r7, #2]
 8005432:	4613      	mov	r3, r2
 8005434:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	4413      	add	r3, r2
 8005446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544a:	461a      	mov	r2, r3
 800544c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005450:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005452:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005456:	2b03      	cmp	r3, #3
 8005458:	d87e      	bhi.n	8005558 <USB_HC_Init+0x13c>
 800545a:	a201      	add	r2, pc, #4	; (adr r2, 8005460 <USB_HC_Init+0x44>)
 800545c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005460:	08005471 	.word	0x08005471
 8005464:	0800551b 	.word	0x0800551b
 8005468:	08005471 	.word	0x08005471
 800546c:	080054dd 	.word	0x080054dd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	4413      	add	r3, r2
 8005478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800547c:	461a      	mov	r2, r3
 800547e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005482:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005484:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005488:	2b00      	cmp	r3, #0
 800548a:	da10      	bge.n	80054ae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800548c:	78fb      	ldrb	r3, [r7, #3]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	4413      	add	r3, r2
 8005494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	78fa      	ldrb	r2, [r7, #3]
 800549c:	0151      	lsls	r1, r2, #5
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	440a      	add	r2, r1
 80054a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054aa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80054ac:	e057      	b.n	800555e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d051      	beq.n	800555e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	78fa      	ldrb	r2, [r7, #3]
 80054ca:	0151      	lsls	r1, r2, #5
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	440a      	add	r2, r1
 80054d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80054d8:	60d3      	str	r3, [r2, #12]
      break;
 80054da:	e040      	b.n	800555e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80054dc:	78fb      	ldrb	r3, [r7, #3]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e8:	461a      	mov	r2, r3
 80054ea:	f240 639d 	movw	r3, #1693	; 0x69d
 80054ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80054f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	da34      	bge.n	8005562 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80054f8:	78fb      	ldrb	r3, [r7, #3]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	78fa      	ldrb	r2, [r7, #3]
 8005508:	0151      	lsls	r1, r2, #5
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	440a      	add	r2, r1
 800550e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005516:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005518:	e023      	b.n	8005562 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	4413      	add	r3, r2
 8005522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005526:	461a      	mov	r2, r3
 8005528:	f240 2325 	movw	r3, #549	; 0x225
 800552c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800552e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005532:	2b00      	cmp	r3, #0
 8005534:	da17      	bge.n	8005566 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005536:	78fb      	ldrb	r3, [r7, #3]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	4413      	add	r3, r2
 800553e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	78fa      	ldrb	r2, [r7, #3]
 8005546:	0151      	lsls	r1, r2, #5
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	440a      	add	r2, r1
 800554c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005550:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005554:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005556:	e006      	b.n	8005566 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	77fb      	strb	r3, [r7, #31]
      break;
 800555c:	e004      	b.n	8005568 <USB_HC_Init+0x14c>
      break;
 800555e:	bf00      	nop
 8005560:	e002      	b.n	8005568 <USB_HC_Init+0x14c>
      break;
 8005562:	bf00      	nop
 8005564:	e000      	b.n	8005568 <USB_HC_Init+0x14c>
      break;
 8005566:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	4413      	add	r3, r2
 8005570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	78fa      	ldrb	r2, [r7, #3]
 8005578:	0151      	lsls	r1, r2, #5
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	440a      	add	r2, r1
 800557e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005582:	f043 0302 	orr.w	r3, r3, #2
 8005586:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800558e:	699a      	ldr	r2, [r3, #24]
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	f003 030f 	and.w	r3, r3, #15
 8005596:	2101      	movs	r1, #1
 8005598:	fa01 f303 	lsl.w	r3, r1, r3
 800559c:	6939      	ldr	r1, [r7, #16]
 800559e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80055a2:	4313      	orrs	r3, r2
 80055a4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80055b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	da03      	bge.n	80055c2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80055ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055be:	61bb      	str	r3, [r7, #24]
 80055c0:	e001      	b.n	80055c6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7ff feff 	bl	80053ca <USB_GetHostSpeed>
 80055cc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80055ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d106      	bne.n	80055e4 <USB_HC_Init+0x1c8>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d003      	beq.n	80055e4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80055dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055e0:	617b      	str	r3, [r7, #20]
 80055e2:	e001      	b.n	80055e8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055e8:	787b      	ldrb	r3, [r7, #1]
 80055ea:	059b      	lsls	r3, r3, #22
 80055ec:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80055f0:	78bb      	ldrb	r3, [r7, #2]
 80055f2:	02db      	lsls	r3, r3, #11
 80055f4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055f8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80055fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055fe:	049b      	lsls	r3, r3, #18
 8005600:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005604:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005606:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005608:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800560c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005612:	78fb      	ldrb	r3, [r7, #3]
 8005614:	0159      	lsls	r1, r3, #5
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	440b      	add	r3, r1
 800561a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800561e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005624:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005626:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800562a:	2b03      	cmp	r3, #3
 800562c:	d003      	beq.n	8005636 <USB_HC_Init+0x21a>
 800562e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005632:	2b01      	cmp	r3, #1
 8005634:	d10f      	bne.n	8005656 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005636:	78fb      	ldrb	r3, [r7, #3]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	4413      	add	r3, r2
 800563e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	78fa      	ldrb	r2, [r7, #3]
 8005646:	0151      	lsls	r1, r2, #5
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	440a      	add	r2, r1
 800564c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005650:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005654:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005656:	7ffb      	ldrb	r3, [r7, #31]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3720      	adds	r7, #32
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b08c      	sub	sp, #48	; 0x30
 8005664:	af02      	add	r7, sp, #8
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	4613      	mov	r3, r2
 800566c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	785b      	ldrb	r3, [r3, #1]
 8005676:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800567c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005686:	2b00      	cmp	r3, #0
 8005688:	d02d      	beq.n	80056e6 <USB_HC_StartXfer+0x86>
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	791b      	ldrb	r3, [r3, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d129      	bne.n	80056e6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d117      	bne.n	80056c8 <USB_HC_StartXfer+0x68>
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	79db      	ldrb	r3, [r3, #7]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <USB_HC_StartXfer+0x48>
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	79db      	ldrb	r3, [r3, #7]
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d10f      	bne.n	80056c8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	69fa      	ldr	r2, [r7, #28]
 80056b8:	0151      	lsls	r1, r2, #5
 80056ba:	6a3a      	ldr	r2, [r7, #32]
 80056bc:	440a      	add	r2, r1
 80056be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80056c8:	79fb      	ldrb	r3, [r7, #7]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10b      	bne.n	80056e6 <USB_HC_StartXfer+0x86>
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	795b      	ldrb	r3, [r3, #5]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d107      	bne.n	80056e6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	785b      	ldrb	r3, [r3, #1]
 80056da:	4619      	mov	r1, r3
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 fa0f 	bl	8005b00 <USB_DoPing>
      return HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	e0f8      	b.n	80058d8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d018      	beq.n	8005720 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	8912      	ldrh	r2, [r2, #8]
 80056f6:	4413      	add	r3, r2
 80056f8:	3b01      	subs	r3, #1
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	8912      	ldrh	r2, [r2, #8]
 80056fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005702:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005704:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005706:	8b7b      	ldrh	r3, [r7, #26]
 8005708:	429a      	cmp	r2, r3
 800570a:	d90b      	bls.n	8005724 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800570c:	8b7b      	ldrh	r3, [r7, #26]
 800570e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005710:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	8912      	ldrh	r2, [r2, #8]
 8005716:	fb03 f202 	mul.w	r2, r3, r2
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	611a      	str	r2, [r3, #16]
 800571e:	e001      	b.n	8005724 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005720:	2301      	movs	r3, #1
 8005722:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	78db      	ldrb	r3, [r3, #3]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d007      	beq.n	800573c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800572c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	8912      	ldrh	r2, [r2, #8]
 8005732:	fb03 f202 	mul.w	r2, r3, r2
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	611a      	str	r2, [r3, #16]
 800573a:	e003      	b.n	8005744 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	695a      	ldr	r2, [r3, #20]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800574c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800574e:	04d9      	lsls	r1, r3, #19
 8005750:	4b63      	ldr	r3, [pc, #396]	; (80058e0 <USB_HC_StartXfer+0x280>)
 8005752:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005754:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	7a9b      	ldrb	r3, [r3, #10]
 800575a:	075b      	lsls	r3, r3, #29
 800575c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005760:	69f9      	ldr	r1, [r7, #28]
 8005762:	0148      	lsls	r0, r1, #5
 8005764:	6a39      	ldr	r1, [r7, #32]
 8005766:	4401      	add	r1, r0
 8005768:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800576c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800576e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005770:	79fb      	ldrb	r3, [r7, #7]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d009      	beq.n	800578a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	68d9      	ldr	r1, [r3, #12]
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	4413      	add	r3, r2
 8005782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005786:	460a      	mov	r2, r1
 8005788:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b00      	cmp	r3, #0
 8005798:	bf0c      	ite	eq
 800579a:	2301      	moveq	r3, #1
 800579c:	2300      	movne	r3, #0
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	69fa      	ldr	r2, [r7, #28]
 80057b2:	0151      	lsls	r1, r2, #5
 80057b4:	6a3a      	ldr	r2, [r7, #32]
 80057b6:	440a      	add	r2, r1
 80057b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80057c0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	7e7b      	ldrb	r3, [r7, #25]
 80057d2:	075b      	lsls	r3, r3, #29
 80057d4:	69f9      	ldr	r1, [r7, #28]
 80057d6:	0148      	lsls	r0, r1, #5
 80057d8:	6a39      	ldr	r1, [r7, #32]
 80057da:	4401      	add	r1, r0
 80057dc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80057e0:	4313      	orrs	r3, r2
 80057e2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057fa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	78db      	ldrb	r3, [r3, #3]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d004      	beq.n	800580e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800580a:	613b      	str	r3, [r7, #16]
 800580c:	e003      	b.n	8005816 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005814:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800581c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	4413      	add	r3, r2
 8005826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800582a:	461a      	mov	r2, r3
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005830:	79fb      	ldrb	r3, [r7, #7]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005836:	2300      	movs	r3, #0
 8005838:	e04e      	b.n	80058d8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	78db      	ldrb	r3, [r3, #3]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d149      	bne.n	80058d6 <USB_HC_StartXfer+0x276>
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d045      	beq.n	80058d6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	79db      	ldrb	r3, [r3, #7]
 800584e:	2b03      	cmp	r3, #3
 8005850:	d830      	bhi.n	80058b4 <USB_HC_StartXfer+0x254>
 8005852:	a201      	add	r2, pc, #4	; (adr r2, 8005858 <USB_HC_StartXfer+0x1f8>)
 8005854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005858:	08005869 	.word	0x08005869
 800585c:	0800588d 	.word	0x0800588d
 8005860:	08005869 	.word	0x08005869
 8005864:	0800588d 	.word	0x0800588d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	3303      	adds	r3, #3
 800586e:	089b      	lsrs	r3, r3, #2
 8005870:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005872:	8afa      	ldrh	r2, [r7, #22]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	b29b      	uxth	r3, r3
 800587a:	429a      	cmp	r2, r3
 800587c:	d91c      	bls.n	80058b8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	f043 0220 	orr.w	r2, r3, #32
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	619a      	str	r2, [r3, #24]
        }
        break;
 800588a:	e015      	b.n	80058b8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	3303      	adds	r3, #3
 8005892:	089b      	lsrs	r3, r3, #2
 8005894:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005896:	8afa      	ldrh	r2, [r7, #22]
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d90a      	bls.n	80058bc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	619a      	str	r2, [r3, #24]
        }
        break;
 80058b2:	e003      	b.n	80058bc <USB_HC_StartXfer+0x25c>

      default:
        break;
 80058b4:	bf00      	nop
 80058b6:	e002      	b.n	80058be <USB_HC_StartXfer+0x25e>
        break;
 80058b8:	bf00      	nop
 80058ba:	e000      	b.n	80058be <USB_HC_StartXfer+0x25e>
        break;
 80058bc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	68d9      	ldr	r1, [r3, #12]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	785a      	ldrb	r2, [r3, #1]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	2000      	movs	r0, #0
 80058ce:	9000      	str	r0, [sp, #0]
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f7ff fb31 	bl	8004f38 <USB_WritePacket>
  }

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3728      	adds	r7, #40	; 0x28
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	1ff80000 	.word	0x1ff80000

080058e4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	b29b      	uxth	r3, r3
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005906:	b480      	push	{r7}
 8005908:	b089      	sub	sp, #36	; 0x24
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	460b      	mov	r3, r1
 8005910:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005916:	78fb      	ldrb	r3, [r7, #3]
 8005918:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	4413      	add	r3, r2
 8005926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	0c9b      	lsrs	r3, r3, #18
 800592e:	f003 0303 	and.w	r3, r3, #3
 8005932:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	4413      	add	r3, r2
 800593c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	0fdb      	lsrs	r3, r3, #31
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b20      	cmp	r3, #32
 8005954:	d104      	bne.n	8005960 <USB_HC_Halt+0x5a>
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	e0c8      	b.n	8005af2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <USB_HC_Halt+0x66>
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	2b02      	cmp	r3, #2
 800596a:	d163      	bne.n	8005a34 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	4413      	add	r3, r2
 8005974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	0151      	lsls	r1, r2, #5
 800597e:	69fa      	ldr	r2, [r7, #28]
 8005980:	440a      	add	r2, r1
 8005982:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005986:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800598a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f003 0320 	and.w	r3, r3, #32
 8005994:	2b00      	cmp	r3, #0
 8005996:	f040 80ab 	bne.w	8005af0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d133      	bne.n	8005a0e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	0151      	lsls	r1, r2, #5
 80059b8:	69fa      	ldr	r2, [r7, #28]
 80059ba:	440a      	add	r2, r1
 80059bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059c4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	0151      	lsls	r1, r2, #5
 80059d8:	69fa      	ldr	r2, [r7, #28]
 80059da:	440a      	add	r2, r1
 80059dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059e4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3301      	adds	r3, #1
 80059ea:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059f2:	d81d      	bhi.n	8005a30 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a0a:	d0ec      	beq.n	80059e6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a0c:	e070      	b.n	8005af0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	0151      	lsls	r1, r2, #5
 8005a20:	69fa      	ldr	r2, [r7, #28]
 8005a22:	440a      	add	r2, r1
 8005a24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a2c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a2e:	e05f      	b.n	8005af0 <USB_HC_Halt+0x1ea>
            break;
 8005a30:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a32:	e05d      	b.n	8005af0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	0151      	lsls	r1, r2, #5
 8005a46:	69fa      	ldr	r2, [r7, #28]
 8005a48:	440a      	add	r2, r1
 8005a4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a52:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d133      	bne.n	8005acc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	0151      	lsls	r1, r2, #5
 8005a76:	69fa      	ldr	r2, [r7, #28]
 8005a78:	440a      	add	r2, r1
 8005a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a82:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	0151      	lsls	r1, r2, #5
 8005a96:	69fa      	ldr	r2, [r7, #28]
 8005a98:	440a      	add	r2, r1
 8005a9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005aa2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ab0:	d81d      	bhi.n	8005aee <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ac8:	d0ec      	beq.n	8005aa4 <USB_HC_Halt+0x19e>
 8005aca:	e011      	b.n	8005af0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	0151      	lsls	r1, r2, #5
 8005ade:	69fa      	ldr	r2, [r7, #28]
 8005ae0:	440a      	add	r2, r1
 8005ae2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	e000      	b.n	8005af0 <USB_HC_Halt+0x1ea>
          break;
 8005aee:	bf00      	nop
    }
  }

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3724      	adds	r7, #36	; 0x24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
	...

08005b00 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005b10:	78fb      	ldrb	r3, [r7, #3]
 8005b12:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005b14:	2301      	movs	r3, #1
 8005b16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	04da      	lsls	r2, r3, #19
 8005b1c:	4b15      	ldr	r3, [pc, #84]	; (8005b74 <USB_DoPing+0x74>)
 8005b1e:	4013      	ands	r3, r2
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	0151      	lsls	r1, r2, #5
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	440a      	add	r2, r1
 8005b28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b30:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b48:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b50:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b5e:	461a      	mov	r2, r3
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	371c      	adds	r7, #28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	1ff80000 	.word	0x1ff80000

08005b78 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b088      	sub	sp, #32
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b80:	2300      	movs	r3, #0
 8005b82:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7ff f911 	bl	8004db4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b92:	2110      	movs	r1, #16
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7ff f96b 	bl	8004e70 <USB_FlushTxFifo>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7ff f997 	bl	8004ed8 <USB_FlushRxFifo>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	61bb      	str	r3, [r7, #24]
 8005bb8:	e01f      	b.n	8005bfa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bd0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bd8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005be0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bee:	461a      	mov	r2, r3
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	61bb      	str	r3, [r7, #24]
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	2b0f      	cmp	r3, #15
 8005bfe:	d9dc      	bls.n	8005bba <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005c00:	2300      	movs	r3, #0
 8005c02:	61bb      	str	r3, [r7, #24]
 8005c04:	e034      	b.n	8005c70 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c1c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c24:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c2c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	3301      	adds	r3, #1
 8005c44:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c4c:	d80c      	bhi.n	8005c68 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c64:	d0ec      	beq.n	8005c40 <USB_StopHost+0xc8>
 8005c66:	e000      	b.n	8005c6a <USB_StopHost+0xf2>
        break;
 8005c68:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	61bb      	str	r3, [r7, #24]
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	2b0f      	cmp	r3, #15
 8005c74:	d9c7      	bls.n	8005c06 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c82:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c8a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7ff f880 	bl	8004d92 <USB_EnableGlobalInt>

  return ret;
 8005c92:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3720      	adds	r7, #32
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005c9c:	b590      	push	{r4, r7, lr}
 8005c9e:	b089      	sub	sp, #36	; 0x24
 8005ca0:	af04      	add	r7, sp, #16
 8005ca2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	2102      	movs	r1, #2
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fc66 	bl	800657c <USBH_FindInterface>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005cb4:	7bfb      	ldrb	r3, [r7, #15]
 8005cb6:	2bff      	cmp	r3, #255	; 0xff
 8005cb8:	d002      	beq.n	8005cc0 <USBH_CDC_InterfaceInit+0x24>
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d901      	bls.n	8005cc4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e13d      	b.n	8005f40 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 fc3b 	bl	8006544 <USBH_SelectInterface>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005cd2:	7bbb      	ldrb	r3, [r7, #14]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e131      	b.n	8005f40 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005ce2:	2050      	movs	r0, #80	; 0x50
 8005ce4:	f002 fad2 	bl	800828c <malloc>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e11f      	b.n	8005f40 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005d00:	2250      	movs	r2, #80	; 0x50
 8005d02:	2100      	movs	r1, #0
 8005d04:	68b8      	ldr	r0, [r7, #8]
 8005d06:	f002 fb7d 	bl	8008404 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	211a      	movs	r1, #26
 8005d10:	fb01 f303 	mul.w	r3, r1, r3
 8005d14:	4413      	add	r3, r2
 8005d16:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	b25b      	sxtb	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	da15      	bge.n	8005d4e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	211a      	movs	r1, #26
 8005d28:	fb01 f303 	mul.w	r3, r1, r3
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d32:	781a      	ldrb	r2, [r3, #0]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	211a      	movs	r1, #26
 8005d3e:	fb01 f303 	mul.w	r3, r1, r3
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d48:	881a      	ldrh	r2, [r3, #0]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	785b      	ldrb	r3, [r3, #1]
 8005d52:	4619      	mov	r1, r3
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f001 ff2e 	bl	8007bb6 <USBH_AllocPipe>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	7819      	ldrb	r1, [r3, #0]
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	7858      	ldrb	r0, [r3, #1]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	8952      	ldrh	r2, [r2, #10]
 8005d7a:	9202      	str	r2, [sp, #8]
 8005d7c:	2203      	movs	r2, #3
 8005d7e:	9201      	str	r2, [sp, #4]
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	4623      	mov	r3, r4
 8005d84:	4602      	mov	r2, r0
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f001 fee6 	bl	8007b58 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	2200      	movs	r2, #0
 8005d92:	4619      	mov	r1, r3
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f002 f9f5 	bl	8008184 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	210a      	movs	r1, #10
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fbeb 	bl	800657c <USBH_FindInterface>
 8005da6:	4603      	mov	r3, r0
 8005da8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005daa:	7bfb      	ldrb	r3, [r7, #15]
 8005dac:	2bff      	cmp	r3, #255	; 0xff
 8005dae:	d002      	beq.n	8005db6 <USBH_CDC_InterfaceInit+0x11a>
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d901      	bls.n	8005dba <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005db6:	2302      	movs	r3, #2
 8005db8:	e0c2      	b.n	8005f40 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005dba:	7bfb      	ldrb	r3, [r7, #15]
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	211a      	movs	r1, #26
 8005dc0:	fb01 f303 	mul.w	r3, r1, r3
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	b25b      	sxtb	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	da16      	bge.n	8005e00 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	211a      	movs	r1, #26
 8005dd8:	fb01 f303 	mul.w	r3, r1, r3
 8005ddc:	4413      	add	r3, r2
 8005dde:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005de2:	781a      	ldrb	r2, [r3, #0]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005de8:	7bfb      	ldrb	r3, [r7, #15]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	211a      	movs	r1, #26
 8005dee:	fb01 f303 	mul.w	r3, r1, r3
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005df8:	881a      	ldrh	r2, [r3, #0]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	835a      	strh	r2, [r3, #26]
 8005dfe:	e015      	b.n	8005e2c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	211a      	movs	r1, #26
 8005e06:	fb01 f303 	mul.w	r3, r1, r3
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e10:	781a      	ldrb	r2, [r3, #0]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	211a      	movs	r1, #26
 8005e1c:	fb01 f303 	mul.w	r3, r1, r3
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e26:	881a      	ldrh	r2, [r3, #0]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	211a      	movs	r1, #26
 8005e32:	fb01 f303 	mul.w	r3, r1, r3
 8005e36:	4413      	add	r3, r2
 8005e38:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	b25b      	sxtb	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	da16      	bge.n	8005e72 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	211a      	movs	r1, #26
 8005e4a:	fb01 f303 	mul.w	r3, r1, r3
 8005e4e:	4413      	add	r3, r2
 8005e50:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e54:	781a      	ldrb	r2, [r3, #0]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	211a      	movs	r1, #26
 8005e60:	fb01 f303 	mul.w	r3, r1, r3
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005e6a:	881a      	ldrh	r2, [r3, #0]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	835a      	strh	r2, [r3, #26]
 8005e70:	e015      	b.n	8005e9e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	211a      	movs	r1, #26
 8005e78:	fb01 f303 	mul.w	r3, r1, r3
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e82:	781a      	ldrb	r2, [r3, #0]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e88:	7bfb      	ldrb	r3, [r7, #15]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	211a      	movs	r1, #26
 8005e8e:	fb01 f303 	mul.w	r3, r1, r3
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005e98:	881a      	ldrh	r2, [r3, #0]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	7b9b      	ldrb	r3, [r3, #14]
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f001 fe86 	bl	8007bb6 <USBH_AllocPipe>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	461a      	mov	r2, r3
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	7bdb      	ldrb	r3, [r3, #15]
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f001 fe7c 	bl	8007bb6 <USBH_AllocPipe>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	7b59      	ldrb	r1, [r3, #13]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	7b98      	ldrb	r0, [r3, #14]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	8b12      	ldrh	r2, [r2, #24]
 8005ede:	9202      	str	r2, [sp, #8]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	9201      	str	r2, [sp, #4]
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	4623      	mov	r3, r4
 8005ee8:	4602      	mov	r2, r0
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f001 fe34 	bl	8007b58 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	7b19      	ldrb	r1, [r3, #12]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	7bd8      	ldrb	r0, [r3, #15]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	8b52      	ldrh	r2, [r2, #26]
 8005f08:	9202      	str	r2, [sp, #8]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	9201      	str	r2, [sp, #4]
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	4623      	mov	r3, r4
 8005f12:	4602      	mov	r2, r0
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f001 fe1f 	bl	8007b58 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	7b5b      	ldrb	r3, [r3, #13]
 8005f26:	2200      	movs	r2, #0
 8005f28:	4619      	mov	r1, r3
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f002 f92a 	bl	8008184 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	7b1b      	ldrb	r3, [r3, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f002 f923 	bl	8008184 <USBH_LL_SetToggle>

  return USBH_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd90      	pop	{r4, r7, pc}

08005f48 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00e      	beq.n	8005f80 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	4619      	mov	r1, r3
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f001 fe14 	bl	8007b96 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	4619      	mov	r1, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f001 fe3f 	bl	8007bf8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	7b1b      	ldrb	r3, [r3, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00e      	beq.n	8005fa6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	7b1b      	ldrb	r3, [r3, #12]
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f001 fe01 	bl	8007b96 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	7b1b      	ldrb	r3, [r3, #12]
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f001 fe2c 	bl	8007bf8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	7b5b      	ldrb	r3, [r3, #13]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00e      	beq.n	8005fcc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	7b5b      	ldrb	r3, [r3, #13]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f001 fdee 	bl	8007b96 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	7b5b      	ldrb	r3, [r3, #13]
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f001 fe19 	bl	8007bf8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00b      	beq.n	8005ff0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f002 f95b 	bl	800829c <free>
    phost->pActiveClass->pData = 0U;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fec:	2200      	movs	r2, #0
 8005fee:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3340      	adds	r3, #64	; 0x40
 8006010:	4619      	mov	r1, r3
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f8b1 	bl	800617a <GetLineCoding>
 8006018:	4603      	mov	r3, r0
 800601a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800601c:	7afb      	ldrb	r3, [r7, #11]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d105      	bne.n	800602e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006028:	2102      	movs	r1, #2
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800602e:	7afb      	ldrb	r3, [r7, #11]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006040:	2301      	movs	r3, #1
 8006042:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006058:	2b04      	cmp	r3, #4
 800605a:	d877      	bhi.n	800614c <USBH_CDC_Process+0x114>
 800605c:	a201      	add	r2, pc, #4	; (adr r2, 8006064 <USBH_CDC_Process+0x2c>)
 800605e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006062:	bf00      	nop
 8006064:	08006079 	.word	0x08006079
 8006068:	0800607f 	.word	0x0800607f
 800606c:	080060af 	.word	0x080060af
 8006070:	08006123 	.word	0x08006123
 8006074:	08006131 	.word	0x08006131
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006078:	2300      	movs	r3, #0
 800607a:	73fb      	strb	r3, [r7, #15]
      break;
 800607c:	e06d      	b.n	800615a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f897 	bl	80061b8 <SetLineCoding>
 800608a:	4603      	mov	r3, r0
 800608c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800608e:	7bbb      	ldrb	r3, [r7, #14]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d104      	bne.n	800609e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2202      	movs	r2, #2
 8006098:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800609c:	e058      	b.n	8006150 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800609e:	7bbb      	ldrb	r3, [r7, #14]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d055      	beq.n	8006150 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2204      	movs	r2, #4
 80060a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80060ac:	e050      	b.n	8006150 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	3340      	adds	r3, #64	; 0x40
 80060b2:	4619      	mov	r1, r3
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f860 	bl	800617a <GetLineCoding>
 80060ba:	4603      	mov	r3, r0
 80060bc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80060be:	7bbb      	ldrb	r3, [r7, #14]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d126      	bne.n	8006112 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060d6:	791b      	ldrb	r3, [r3, #4]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d13b      	bne.n	8006154 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060e6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d133      	bne.n	8006154 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060f6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d12b      	bne.n	8006154 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006104:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006106:	429a      	cmp	r2, r3
 8006108:	d124      	bne.n	8006154 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f958 	bl	80063c0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006110:	e020      	b.n	8006154 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006112:	7bbb      	ldrb	r3, [r7, #14]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d01d      	beq.n	8006154 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2204      	movs	r2, #4
 800611c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006120:	e018      	b.n	8006154 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f867 	bl	80061f6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f8da 	bl	80062e2 <CDC_ProcessReception>
      break;
 800612e:	e014      	b.n	800615a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006130:	2100      	movs	r1, #0
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 ffef 	bl	8007116 <USBH_ClrFeature>
 8006138:	4603      	mov	r3, r0
 800613a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800613c:	7bbb      	ldrb	r3, [r7, #14]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10a      	bne.n	8006158 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800614a:	e005      	b.n	8006158 <USBH_CDC_Process+0x120>

    default:
      break;
 800614c:	bf00      	nop
 800614e:	e004      	b.n	800615a <USBH_CDC_Process+0x122>
      break;
 8006150:	bf00      	nop
 8006152:	e002      	b.n	800615a <USBH_CDC_Process+0x122>
      break;
 8006154:	bf00      	nop
 8006156:	e000      	b.n	800615a <USBH_CDC_Process+0x122>
      break;
 8006158:	bf00      	nop

  }

  return status;
 800615a:	7bfb      	ldrb	r3, [r7, #15]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b082      	sub	sp, #8
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	22a1      	movs	r2, #161	; 0xa1
 8006188:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2221      	movs	r2, #33	; 0x21
 800618e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2207      	movs	r2, #7
 80061a0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2207      	movs	r2, #7
 80061a6:	4619      	mov	r1, r3
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f001 fa83 	bl	80076b4 <USBH_CtlReq>
 80061ae:	4603      	mov	r3, r0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2221      	movs	r2, #33	; 0x21
 80061c6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2220      	movs	r2, #32
 80061cc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2207      	movs	r2, #7
 80061de:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2207      	movs	r2, #7
 80061e4:	4619      	mov	r1, r3
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f001 fa64 	bl	80076b4 <USBH_CtlReq>
 80061ec:	4603      	mov	r3, r0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b086      	sub	sp, #24
 80061fa:	af02      	add	r7, sp, #8
 80061fc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006208:	2300      	movs	r3, #0
 800620a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006212:	2b01      	cmp	r3, #1
 8006214:	d002      	beq.n	800621c <CDC_ProcessTransmission+0x26>
 8006216:	2b02      	cmp	r3, #2
 8006218:	d023      	beq.n	8006262 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800621a:	e05e      	b.n	80062da <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	8b12      	ldrh	r2, [r2, #24]
 8006224:	4293      	cmp	r3, r2
 8006226:	d90b      	bls.n	8006240 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	69d9      	ldr	r1, [r3, #28]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8b1a      	ldrh	r2, [r3, #24]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	7b5b      	ldrb	r3, [r3, #13]
 8006234:	2001      	movs	r0, #1
 8006236:	9000      	str	r0, [sp, #0]
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 fc4a 	bl	8007ad2 <USBH_BulkSendData>
 800623e:	e00b      	b.n	8006258 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006248:	b29a      	uxth	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	7b5b      	ldrb	r3, [r3, #13]
 800624e:	2001      	movs	r0, #1
 8006250:	9000      	str	r0, [sp, #0]
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f001 fc3d 	bl	8007ad2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006260:	e03b      	b.n	80062da <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	7b5b      	ldrb	r3, [r3, #13]
 8006266:	4619      	mov	r1, r3
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f001 ff61 	bl	8008130 <USBH_LL_GetURBState>
 800626e:	4603      	mov	r3, r0
 8006270:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006272:	7afb      	ldrb	r3, [r7, #11]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d128      	bne.n	80062ca <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	8b12      	ldrh	r2, [r2, #24]
 8006280:	4293      	cmp	r3, r2
 8006282:	d90e      	bls.n	80062a2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	8b12      	ldrh	r2, [r2, #24]
 800628c:	1a9a      	subs	r2, r3, r2
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	8b12      	ldrh	r2, [r2, #24]
 800629a:	441a      	add	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	61da      	str	r2, [r3, #28]
 80062a0:	e002      	b.n	80062a8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d004      	beq.n	80062ba <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80062b8:	e00e      	b.n	80062d8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f868 	bl	8006398 <USBH_CDC_TransmitCallback>
      break;
 80062c8:	e006      	b.n	80062d8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80062ca:	7afb      	ldrb	r3, [r7, #11]
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d103      	bne.n	80062d8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80062d8:	bf00      	nop
  }
}
 80062da:	bf00      	nop
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b086      	sub	sp, #24
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80062f4:	2300      	movs	r3, #0
 80062f6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80062fe:	2b03      	cmp	r3, #3
 8006300:	d002      	beq.n	8006308 <CDC_ProcessReception+0x26>
 8006302:	2b04      	cmp	r3, #4
 8006304:	d00e      	beq.n	8006324 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006306:	e043      	b.n	8006390 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	6a19      	ldr	r1, [r3, #32]
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	8b5a      	ldrh	r2, [r3, #26]
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	7b1b      	ldrb	r3, [r3, #12]
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f001 fc01 	bl	8007b1c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2204      	movs	r2, #4
 800631e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006322:	e035      	b.n	8006390 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	7b1b      	ldrb	r3, [r3, #12]
 8006328:	4619      	mov	r1, r3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f001 ff00 	bl	8008130 <USBH_LL_GetURBState>
 8006330:	4603      	mov	r3, r0
 8006332:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006334:	7cfb      	ldrb	r3, [r7, #19]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d129      	bne.n	800638e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	7b1b      	ldrb	r3, [r3, #12]
 800633e:	4619      	mov	r1, r3
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f001 fe63 	bl	800800c <USBH_LL_GetLastXferSize>
 8006346:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	429a      	cmp	r2, r3
 8006350:	d016      	beq.n	8006380 <CDC_ProcessReception+0x9e>
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	8b5b      	ldrh	r3, [r3, #26]
 8006356:	461a      	mov	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4293      	cmp	r3, r2
 800635c:	d910      	bls.n	8006380 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	1ad2      	subs	r2, r2, r3
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	6a1a      	ldr	r2, [r3, #32]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	441a      	add	r2, r3
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2203      	movs	r2, #3
 800637a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800637e:	e006      	b.n	800638e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f80f 	bl	80063ac <USBH_CDC_ReceiveCallback>
      break;
 800638e:	bf00      	nop
  }
}
 8006390:	bf00      	nop
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	4613      	mov	r3, r2
 80063e0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80063e8:	2302      	movs	r3, #2
 80063ea:	e029      	b.n	8006440 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	79fa      	ldrb	r2, [r7, #7]
 80063f0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 f81f 	bl	8006448 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f001 fd33 	bl	8007ea4 <USBH_LL_Init>

  return USBH_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006454:	2300      	movs	r3, #0
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	e009      	b.n	800646e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	33e0      	adds	r3, #224	; 0xe0
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	2200      	movs	r2, #0
 8006466:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	3301      	adds	r3, #1
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b0f      	cmp	r3, #15
 8006472:	d9f2      	bls.n	800645a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006474:	2300      	movs	r3, #0
 8006476:	60fb      	str	r3, [r7, #12]
 8006478:	e009      	b.n	800648e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4413      	add	r3, r2
 8006480:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006484:	2200      	movs	r2, #0
 8006486:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3301      	adds	r3, #1
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006494:	d3f1      	bcc.n	800647a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2240      	movs	r2, #64	; 0x40
 80064ba:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d016      	beq.n	8006532 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10e      	bne.n	800652c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006514:	1c59      	adds	r1, r3, #1
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	33de      	adds	r3, #222	; 0xde
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	73fb      	strb	r3, [r7, #15]
 800652a:	e004      	b.n	8006536 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800652c:	2302      	movs	r3, #2
 800652e:	73fb      	strb	r3, [r7, #15]
 8006530:	e001      	b.n	8006536 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006532:	2302      	movs	r3, #2
 8006534:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006536:	7bfb      	ldrb	r3, [r7, #15]
}
 8006538:	4618      	mov	r0, r3
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	460b      	mov	r3, r1
 800654e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800655a:	78fa      	ldrb	r2, [r7, #3]
 800655c:	429a      	cmp	r2, r3
 800655e:	d204      	bcs.n	800656a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	78fa      	ldrb	r2, [r7, #3]
 8006564:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006568:	e001      	b.n	800656e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800656a:	2302      	movs	r3, #2
 800656c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800656e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	4608      	mov	r0, r1
 8006586:	4611      	mov	r1, r2
 8006588:	461a      	mov	r2, r3
 800658a:	4603      	mov	r3, r0
 800658c:	70fb      	strb	r3, [r7, #3]
 800658e:	460b      	mov	r3, r1
 8006590:	70bb      	strb	r3, [r7, #2]
 8006592:	4613      	mov	r3, r2
 8006594:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006596:	2300      	movs	r3, #0
 8006598:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800659a:	2300      	movs	r3, #0
 800659c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80065a4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80065a6:	e025      	b.n	80065f4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
 80065aa:	221a      	movs	r2, #26
 80065ac:	fb02 f303 	mul.w	r3, r2, r3
 80065b0:	3308      	adds	r3, #8
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	4413      	add	r3, r2
 80065b6:	3302      	adds	r3, #2
 80065b8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	795b      	ldrb	r3, [r3, #5]
 80065be:	78fa      	ldrb	r2, [r7, #3]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d002      	beq.n	80065ca <USBH_FindInterface+0x4e>
 80065c4:	78fb      	ldrb	r3, [r7, #3]
 80065c6:	2bff      	cmp	r3, #255	; 0xff
 80065c8:	d111      	bne.n	80065ee <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80065ce:	78ba      	ldrb	r2, [r7, #2]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d002      	beq.n	80065da <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80065d4:	78bb      	ldrb	r3, [r7, #2]
 80065d6:	2bff      	cmp	r3, #255	; 0xff
 80065d8:	d109      	bne.n	80065ee <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80065de:	787a      	ldrb	r2, [r7, #1]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d002      	beq.n	80065ea <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80065e4:	787b      	ldrb	r3, [r7, #1]
 80065e6:	2bff      	cmp	r3, #255	; 0xff
 80065e8:	d101      	bne.n	80065ee <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80065ea:	7dfb      	ldrb	r3, [r7, #23]
 80065ec:	e006      	b.n	80065fc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
 80065f0:	3301      	adds	r3, #1
 80065f2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80065f4:	7dfb      	ldrb	r3, [r7, #23]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d9d6      	bls.n	80065a8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80065fa:	23ff      	movs	r3, #255	; 0xff
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	371c      	adds	r7, #28
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f001 fc83 	bl	8007f1c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006616:	2101      	movs	r1, #1
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f001 fd9c 	bl	8008156 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b088      	sub	sp, #32
 800662c:	af04      	add	r7, sp, #16
 800662e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006630:	2302      	movs	r3, #2
 8006632:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b01      	cmp	r3, #1
 8006642:	d102      	bne.n	800664a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2203      	movs	r2, #3
 8006648:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b0b      	cmp	r3, #11
 8006652:	f200 81be 	bhi.w	80069d2 <USBH_Process+0x3aa>
 8006656:	a201      	add	r2, pc, #4	; (adr r2, 800665c <USBH_Process+0x34>)
 8006658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665c:	0800668d 	.word	0x0800668d
 8006660:	080066bf 	.word	0x080066bf
 8006664:	08006727 	.word	0x08006727
 8006668:	0800696d 	.word	0x0800696d
 800666c:	080069d3 	.word	0x080069d3
 8006670:	080067cb 	.word	0x080067cb
 8006674:	08006913 	.word	0x08006913
 8006678:	08006801 	.word	0x08006801
 800667c:	08006821 	.word	0x08006821
 8006680:	08006841 	.word	0x08006841
 8006684:	08006885 	.word	0x08006885
 8006688:	08006955 	.word	0x08006955
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 819e 	beq.w	80069d6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80066a0:	20c8      	movs	r0, #200	; 0xc8
 80066a2:	f001 fd9f 	bl	80081e4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f001 fc95 	bl	8007fd6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80066bc:	e18b      	b.n	80069d6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d107      	bne.n	80066d8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2202      	movs	r2, #2
 80066d4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80066d6:	e18d      	b.n	80069f4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80066de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066e2:	d914      	bls.n	800670e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80066ea:	3301      	adds	r3, #1
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80066fa:	2b03      	cmp	r3, #3
 80066fc:	d903      	bls.n	8006706 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	220d      	movs	r2, #13
 8006702:	701a      	strb	r2, [r3, #0]
      break;
 8006704:	e176      	b.n	80069f4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	701a      	strb	r2, [r3, #0]
      break;
 800670c:	e172      	b.n	80069f4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006714:	f103 020a 	add.w	r2, r3, #10
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800671e:	200a      	movs	r0, #10
 8006720:	f001 fd60 	bl	80081e4 <USBH_Delay>
      break;
 8006724:	e166      	b.n	80069f4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800672c:	2b00      	cmp	r3, #0
 800672e:	d005      	beq.n	800673c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006736:	2104      	movs	r1, #4
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800673c:	2064      	movs	r0, #100	; 0x64
 800673e:	f001 fd51 	bl	80081e4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f001 fc20 	bl	8007f88 <USBH_LL_GetSpeed>
 8006748:	4603      	mov	r3, r0
 800674a:	461a      	mov	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2205      	movs	r2, #5
 8006756:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006758:	2100      	movs	r1, #0
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f001 fa2b 	bl	8007bb6 <USBH_AllocPipe>
 8006760:	4603      	mov	r3, r0
 8006762:	461a      	mov	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006768:	2180      	movs	r1, #128	; 0x80
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f001 fa23 	bl	8007bb6 <USBH_AllocPipe>
 8006770:	4603      	mov	r3, r0
 8006772:	461a      	mov	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	7919      	ldrb	r1, [r3, #4]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800678c:	b292      	uxth	r2, r2
 800678e:	9202      	str	r2, [sp, #8]
 8006790:	2200      	movs	r2, #0
 8006792:	9201      	str	r2, [sp, #4]
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	4603      	mov	r3, r0
 8006798:	2280      	movs	r2, #128	; 0x80
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f001 f9dc 	bl	8007b58 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	7959      	ldrb	r1, [r3, #5]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80067b4:	b292      	uxth	r2, r2
 80067b6:	9202      	str	r2, [sp, #8]
 80067b8:	2200      	movs	r2, #0
 80067ba:	9201      	str	r2, [sp, #4]
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	4603      	mov	r3, r0
 80067c0:	2200      	movs	r2, #0
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f001 f9c8 	bl	8007b58 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80067c8:	e114      	b.n	80069f4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f918 	bl	8006a00 <USBH_HandleEnum>
 80067d0:	4603      	mov	r3, r0
 80067d2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80067d4:	7bbb      	ldrb	r3, [r7, #14]
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f040 80fe 	bne.w	80069da <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d103      	bne.n	80067f8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2208      	movs	r2, #8
 80067f4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80067f6:	e0f0      	b.n	80069da <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2207      	movs	r2, #7
 80067fc:	701a      	strb	r2, [r3, #0]
      break;
 80067fe:	e0ec      	b.n	80069da <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 80e9 	beq.w	80069de <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006812:	2101      	movs	r1, #1
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2208      	movs	r2, #8
 800681c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800681e:	e0de      	b.n	80069de <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006826:	b29b      	uxth	r3, r3
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fc2c 	bl	8007088 <USBH_SetCfg>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	f040 80d5 	bne.w	80069e2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2209      	movs	r2, #9
 800683c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800683e:	e0d0      	b.n	80069e2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006846:	f003 0320 	and.w	r3, r3, #32
 800684a:	2b00      	cmp	r3, #0
 800684c:	d016      	beq.n	800687c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800684e:	2101      	movs	r1, #1
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fc3c 	bl	80070ce <USBH_SetFeature>
 8006856:	4603      	mov	r3, r0
 8006858:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800685a:	7bbb      	ldrb	r3, [r7, #14]
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d103      	bne.n	800686a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	220a      	movs	r2, #10
 8006866:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006868:	e0bd      	b.n	80069e6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800686a:	7bbb      	ldrb	r3, [r7, #14]
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b03      	cmp	r3, #3
 8006870:	f040 80b9 	bne.w	80069e6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	220a      	movs	r2, #10
 8006878:	701a      	strb	r2, [r3, #0]
      break;
 800687a:	e0b4      	b.n	80069e6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	220a      	movs	r2, #10
 8006880:	701a      	strb	r2, [r3, #0]
      break;
 8006882:	e0b0      	b.n	80069e6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 80ad 	beq.w	80069ea <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006898:	2300      	movs	r3, #0
 800689a:	73fb      	strb	r3, [r7, #15]
 800689c:	e016      	b.n	80068cc <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800689e:	7bfa      	ldrb	r2, [r7, #15]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	32de      	adds	r2, #222	; 0xde
 80068a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a8:	791a      	ldrb	r2, [r3, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d108      	bne.n	80068c6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80068b4:	7bfa      	ldrb	r2, [r7, #15]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	32de      	adds	r2, #222	; 0xde
 80068ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80068c4:	e005      	b.n	80068d2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
 80068c8:	3301      	adds	r3, #1
 80068ca:	73fb      	strb	r3, [r7, #15]
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d0e5      	beq.n	800689e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d016      	beq.n	800690a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	4798      	blx	r3
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d109      	bne.n	8006902 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2206      	movs	r2, #6
 80068f2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068fa:	2103      	movs	r1, #3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006900:	e073      	b.n	80069ea <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	220d      	movs	r2, #13
 8006906:	701a      	strb	r2, [r3, #0]
      break;
 8006908:	e06f      	b.n	80069ea <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	220d      	movs	r2, #13
 800690e:	701a      	strb	r2, [r3, #0]
      break;
 8006910:	e06b      	b.n	80069ea <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006918:	2b00      	cmp	r3, #0
 800691a:	d017      	beq.n	800694c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	4798      	blx	r3
 8006928:	4603      	mov	r3, r0
 800692a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800692c:	7bbb      	ldrb	r3, [r7, #14]
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	d103      	bne.n	800693c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	220b      	movs	r2, #11
 8006938:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800693a:	e058      	b.n	80069ee <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800693c:	7bbb      	ldrb	r3, [r7, #14]
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b02      	cmp	r3, #2
 8006942:	d154      	bne.n	80069ee <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	220d      	movs	r2, #13
 8006948:	701a      	strb	r2, [r3, #0]
      break;
 800694a:	e050      	b.n	80069ee <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	220d      	movs	r2, #13
 8006950:	701a      	strb	r2, [r3, #0]
      break;
 8006952:	e04c      	b.n	80069ee <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800695a:	2b00      	cmp	r3, #0
 800695c:	d049      	beq.n	80069f2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	4798      	blx	r3
      }
      break;
 800696a:	e042      	b.n	80069f2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f7ff fd67 	bl	8006448 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006980:	2b00      	cmp	r3, #0
 8006982:	d009      	beq.n	8006998 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d005      	beq.n	80069ae <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069a8:	2105      	movs	r1, #5
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d107      	bne.n	80069ca <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff fe20 	bl	8006608 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80069c8:	e014      	b.n	80069f4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f001 faa6 	bl	8007f1c <USBH_LL_Start>
      break;
 80069d0:	e010      	b.n	80069f4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80069d2:	bf00      	nop
 80069d4:	e00e      	b.n	80069f4 <USBH_Process+0x3cc>
      break;
 80069d6:	bf00      	nop
 80069d8:	e00c      	b.n	80069f4 <USBH_Process+0x3cc>
      break;
 80069da:	bf00      	nop
 80069dc:	e00a      	b.n	80069f4 <USBH_Process+0x3cc>
    break;
 80069de:	bf00      	nop
 80069e0:	e008      	b.n	80069f4 <USBH_Process+0x3cc>
      break;
 80069e2:	bf00      	nop
 80069e4:	e006      	b.n	80069f4 <USBH_Process+0x3cc>
      break;
 80069e6:	bf00      	nop
 80069e8:	e004      	b.n	80069f4 <USBH_Process+0x3cc>
      break;
 80069ea:	bf00      	nop
 80069ec:	e002      	b.n	80069f4 <USBH_Process+0x3cc>
      break;
 80069ee:	bf00      	nop
 80069f0:	e000      	b.n	80069f4 <USBH_Process+0x3cc>
      break;
 80069f2:	bf00      	nop
  }
  return USBH_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop

08006a00 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b088      	sub	sp, #32
 8006a04:	af04      	add	r7, sp, #16
 8006a06:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	785b      	ldrb	r3, [r3, #1]
 8006a14:	2b07      	cmp	r3, #7
 8006a16:	f200 81c1 	bhi.w	8006d9c <USBH_HandleEnum+0x39c>
 8006a1a:	a201      	add	r2, pc, #4	; (adr r2, 8006a20 <USBH_HandleEnum+0x20>)
 8006a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a20:	08006a41 	.word	0x08006a41
 8006a24:	08006aff 	.word	0x08006aff
 8006a28:	08006b69 	.word	0x08006b69
 8006a2c:	08006bf7 	.word	0x08006bf7
 8006a30:	08006c61 	.word	0x08006c61
 8006a34:	08006cd1 	.word	0x08006cd1
 8006a38:	08006d17 	.word	0x08006d17
 8006a3c:	08006d5d 	.word	0x08006d5d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006a40:	2108      	movs	r1, #8
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fa50 	bl	8006ee8 <USBH_Get_DevDesc>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006a4c:	7bbb      	ldrb	r3, [r7, #14]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d130      	bne.n	8006ab4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	7919      	ldrb	r1, [r3, #4]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006a76:	b292      	uxth	r2, r2
 8006a78:	9202      	str	r2, [sp, #8]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	9201      	str	r2, [sp, #4]
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	4603      	mov	r3, r0
 8006a82:	2280      	movs	r2, #128	; 0x80
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f001 f867 	bl	8007b58 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	7959      	ldrb	r1, [r3, #5]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006a9e:	b292      	uxth	r2, r2
 8006aa0:	9202      	str	r2, [sp, #8]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	9201      	str	r2, [sp, #4]
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2200      	movs	r2, #0
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f001 f853 	bl	8007b58 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006ab2:	e175      	b.n	8006da0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	f040 8172 	bne.w	8006da0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	d903      	bls.n	8006ade <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	220d      	movs	r2, #13
 8006ada:	701a      	strb	r2, [r3, #0]
      break;
 8006adc:	e160      	b.n	8006da0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	795b      	ldrb	r3, [r3, #5]
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f001 f887 	bl	8007bf8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	791b      	ldrb	r3, [r3, #4]
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f001 f881 	bl	8007bf8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	701a      	strb	r2, [r3, #0]
      break;
 8006afc:	e150      	b.n	8006da0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006afe:	2112      	movs	r1, #18
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f9f1 	bl	8006ee8 <USBH_Get_DevDesc>
 8006b06:	4603      	mov	r3, r0
 8006b08:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b0a:	7bbb      	ldrb	r3, [r7, #14]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d103      	bne.n	8006b18 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006b16:	e145      	b.n	8006da4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b18:	7bbb      	ldrb	r3, [r7, #14]
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	f040 8142 	bne.w	8006da4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006b26:	3301      	adds	r3, #1
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d903      	bls.n	8006b42 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	220d      	movs	r2, #13
 8006b3e:	701a      	strb	r2, [r3, #0]
      break;
 8006b40:	e130      	b.n	8006da4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	795b      	ldrb	r3, [r3, #5]
 8006b46:	4619      	mov	r1, r3
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f001 f855 	bl	8007bf8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	791b      	ldrb	r3, [r3, #4]
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f001 f84f 	bl	8007bf8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	701a      	strb	r2, [r3, #0]
      break;
 8006b66:	e11d      	b.n	8006da4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006b68:	2101      	movs	r1, #1
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fa68 	bl	8007040 <USBH_SetAddress>
 8006b70:	4603      	mov	r3, r0
 8006b72:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b74:	7bbb      	ldrb	r3, [r7, #14]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d132      	bne.n	8006be0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006b7a:	2002      	movs	r0, #2
 8006b7c:	f001 fb32 	bl	80081e4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2203      	movs	r2, #3
 8006b8c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	7919      	ldrb	r1, [r3, #4]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006ba2:	b292      	uxth	r2, r2
 8006ba4:	9202      	str	r2, [sp, #8]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	9201      	str	r2, [sp, #4]
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	4603      	mov	r3, r0
 8006bae:	2280      	movs	r2, #128	; 0x80
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 ffd1 	bl	8007b58 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	7959      	ldrb	r1, [r3, #5]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006bca:	b292      	uxth	r2, r2
 8006bcc:	9202      	str	r2, [sp, #8]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	9201      	str	r2, [sp, #4]
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 ffbd 	bl	8007b58 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006bde:	e0e3      	b.n	8006da8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006be0:	7bbb      	ldrb	r3, [r7, #14]
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	f040 80e0 	bne.w	8006da8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	220d      	movs	r2, #13
 8006bec:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	705a      	strb	r2, [r3, #1]
      break;
 8006bf4:	e0d8      	b.n	8006da8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006bf6:	2109      	movs	r1, #9
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f99d 	bl	8006f38 <USBH_Get_CfgDesc>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c02:	7bbb      	ldrb	r3, [r7, #14]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d103      	bne.n	8006c10 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2204      	movs	r2, #4
 8006c0c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c0e:	e0cd      	b.n	8006dac <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c10:	7bbb      	ldrb	r3, [r7, #14]
 8006c12:	2b03      	cmp	r3, #3
 8006c14:	f040 80ca 	bne.w	8006dac <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c1e:	3301      	adds	r3, #1
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	d903      	bls.n	8006c3a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	220d      	movs	r2, #13
 8006c36:	701a      	strb	r2, [r3, #0]
      break;
 8006c38:	e0b8      	b.n	8006dac <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	795b      	ldrb	r3, [r3, #5]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 ffd9 	bl	8007bf8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	791b      	ldrb	r3, [r3, #4]
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 ffd3 	bl	8007bf8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	701a      	strb	r2, [r3, #0]
      break;
 8006c5e:	e0a5      	b.n	8006dac <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f965 	bl	8006f38 <USBH_Get_CfgDesc>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c72:	7bbb      	ldrb	r3, [r7, #14]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d103      	bne.n	8006c80 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2205      	movs	r2, #5
 8006c7c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c7e:	e097      	b.n	8006db0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c80:	7bbb      	ldrb	r3, [r7, #14]
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	f040 8094 	bne.w	8006db0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c8e:	3301      	adds	r3, #1
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d903      	bls.n	8006caa <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	220d      	movs	r2, #13
 8006ca6:	701a      	strb	r2, [r3, #0]
      break;
 8006ca8:	e082      	b.n	8006db0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	795b      	ldrb	r3, [r3, #5]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 ffa1 	bl	8007bf8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	791b      	ldrb	r3, [r3, #4]
 8006cba:	4619      	mov	r1, r3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 ff9b 	bl	8007bf8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	701a      	strb	r2, [r3, #0]
      break;
 8006cce:	e06f      	b.n	8006db0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d019      	beq.n	8006d0e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006ce6:	23ff      	movs	r3, #255	; 0xff
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f949 	bl	8006f80 <USBH_Get_StringDesc>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006cf2:	7bbb      	ldrb	r3, [r7, #14]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d103      	bne.n	8006d00 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2206      	movs	r2, #6
 8006cfc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006cfe:	e059      	b.n	8006db4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d00:	7bbb      	ldrb	r3, [r7, #14]
 8006d02:	2b03      	cmp	r3, #3
 8006d04:	d156      	bne.n	8006db4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2206      	movs	r2, #6
 8006d0a:	705a      	strb	r2, [r3, #1]
      break;
 8006d0c:	e052      	b.n	8006db4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2206      	movs	r2, #6
 8006d12:	705a      	strb	r2, [r3, #1]
      break;
 8006d14:	e04e      	b.n	8006db4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d019      	beq.n	8006d54 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006d2c:	23ff      	movs	r3, #255	; 0xff
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f926 	bl	8006f80 <USBH_Get_StringDesc>
 8006d34:	4603      	mov	r3, r0
 8006d36:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006d38:	7bbb      	ldrb	r3, [r7, #14]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d103      	bne.n	8006d46 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2207      	movs	r2, #7
 8006d42:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006d44:	e038      	b.n	8006db8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d46:	7bbb      	ldrb	r3, [r7, #14]
 8006d48:	2b03      	cmp	r3, #3
 8006d4a:	d135      	bne.n	8006db8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2207      	movs	r2, #7
 8006d50:	705a      	strb	r2, [r3, #1]
      break;
 8006d52:	e031      	b.n	8006db8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2207      	movs	r2, #7
 8006d58:	705a      	strb	r2, [r3, #1]
      break;
 8006d5a:	e02d      	b.n	8006db8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d017      	beq.n	8006d96 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006d72:	23ff      	movs	r3, #255	; 0xff
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f903 	bl	8006f80 <USBH_Get_StringDesc>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006d7e:	7bbb      	ldrb	r3, [r7, #14]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d102      	bne.n	8006d8a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006d84:	2300      	movs	r3, #0
 8006d86:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006d88:	e018      	b.n	8006dbc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d8a:	7bbb      	ldrb	r3, [r7, #14]
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d115      	bne.n	8006dbc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006d90:	2300      	movs	r3, #0
 8006d92:	73fb      	strb	r3, [r7, #15]
      break;
 8006d94:	e012      	b.n	8006dbc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	73fb      	strb	r3, [r7, #15]
      break;
 8006d9a:	e00f      	b.n	8006dbc <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006d9c:	bf00      	nop
 8006d9e:	e00e      	b.n	8006dbe <USBH_HandleEnum+0x3be>
      break;
 8006da0:	bf00      	nop
 8006da2:	e00c      	b.n	8006dbe <USBH_HandleEnum+0x3be>
      break;
 8006da4:	bf00      	nop
 8006da6:	e00a      	b.n	8006dbe <USBH_HandleEnum+0x3be>
      break;
 8006da8:	bf00      	nop
 8006daa:	e008      	b.n	8006dbe <USBH_HandleEnum+0x3be>
      break;
 8006dac:	bf00      	nop
 8006dae:	e006      	b.n	8006dbe <USBH_HandleEnum+0x3be>
      break;
 8006db0:	bf00      	nop
 8006db2:	e004      	b.n	8006dbe <USBH_HandleEnum+0x3be>
      break;
 8006db4:	bf00      	nop
 8006db6:	e002      	b.n	8006dbe <USBH_HandleEnum+0x3be>
      break;
 8006db8:	bf00      	nop
 8006dba:	e000      	b.n	8006dbe <USBH_HandleEnum+0x3be>
      break;
 8006dbc:	bf00      	nop
  }
  return Status;
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	683a      	ldr	r2, [r7, #0]
 8006dd6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006dda:	bf00      	nop
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006df4:	1c5a      	adds	r2, r3, #1
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 f804 	bl	8006e0a <USBH_HandleSof>
}
 8006e02:	bf00      	nop
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b082      	sub	sp, #8
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b0b      	cmp	r3, #11
 8006e1a:	d10a      	bne.n	8006e32 <USBH_HandleSof+0x28>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d005      	beq.n	8006e32 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	4798      	blx	r3
  }
}
 8006e32:	bf00      	nop
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006e4a:	bf00      	nop
}
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006e66:	bf00      	nop
}
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b083      	sub	sp, #12
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f001 f846 	bl	8007f52 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	791b      	ldrb	r3, [r3, #4]
 8006eca:	4619      	mov	r1, r3
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fe93 	bl	8007bf8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	795b      	ldrb	r3, [r3, #5]
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fe8d 	bl	8007bf8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af02      	add	r7, sp, #8
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006efa:	78fb      	ldrb	r3, [r7, #3]
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	4613      	mov	r3, r2
 8006f02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f06:	2100      	movs	r1, #0
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f864 	bl	8006fd6 <USBH_GetDescriptor>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10a      	bne.n	8006f2e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f24:	78fa      	ldrb	r2, [r7, #3]
 8006f26:	b292      	uxth	r2, r2
 8006f28:	4619      	mov	r1, r3
 8006f2a:	f000 f919 	bl	8007160 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af02      	add	r7, sp, #8
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	460b      	mov	r3, r1
 8006f42:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	331c      	adds	r3, #28
 8006f48:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006f4a:	887b      	ldrh	r3, [r7, #2]
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f54:	2100      	movs	r1, #0
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f83d 	bl	8006fd6 <USBH_GetDescriptor>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006f60:	7bfb      	ldrb	r3, [r7, #15]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d107      	bne.n	8006f76 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006f66:	887b      	ldrh	r3, [r7, #2]
 8006f68:	461a      	mov	r2, r3
 8006f6a:	68b9      	ldr	r1, [r7, #8]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f989 	bl	8007284 <USBH_ParseCfgDesc>
 8006f72:	4603      	mov	r3, r0
 8006f74:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b088      	sub	sp, #32
 8006f84:	af02      	add	r7, sp, #8
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	607a      	str	r2, [r7, #4]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	72fb      	strb	r3, [r7, #11]
 8006f90:	4613      	mov	r3, r2
 8006f92:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006f94:	7afb      	ldrb	r3, [r7, #11]
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006f9c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006fa4:	893b      	ldrh	r3, [r7, #8]
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	2100      	movs	r1, #0
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f000 f812 	bl	8006fd6 <USBH_GetDescriptor>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006fb6:	7dfb      	ldrb	r3, [r7, #23]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d107      	bne.n	8006fcc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006fc2:	893a      	ldrh	r2, [r7, #8]
 8006fc4:	6879      	ldr	r1, [r7, #4]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 fb26 	bl	8007618 <USBH_ParseStringDesc>
  }

  return status;
 8006fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3718      	adds	r7, #24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b084      	sub	sp, #16
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	607b      	str	r3, [r7, #4]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	72fb      	strb	r3, [r7, #11]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	789b      	ldrb	r3, [r3, #2]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d11c      	bne.n	800702a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006ff0:	7afb      	ldrb	r3, [r7, #11]
 8006ff2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2206      	movs	r2, #6
 8007000:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	893a      	ldrh	r2, [r7, #8]
 8007006:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007008:	893b      	ldrh	r3, [r7, #8]
 800700a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800700e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007012:	d104      	bne.n	800701e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f240 4209 	movw	r2, #1033	; 0x409
 800701a:	829a      	strh	r2, [r3, #20]
 800701c:	e002      	b.n	8007024 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8b3a      	ldrh	r2, [r7, #24]
 8007028:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800702a:	8b3b      	ldrh	r3, [r7, #24]
 800702c:	461a      	mov	r2, r3
 800702e:	6879      	ldr	r1, [r7, #4]
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f000 fb3f 	bl	80076b4 <USBH_CtlReq>
 8007036:	4603      	mov	r3, r0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	460b      	mov	r3, r1
 800704a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	789b      	ldrb	r3, [r3, #2]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d10f      	bne.n	8007074 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2205      	movs	r2, #5
 800705e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	b29a      	uxth	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007074:	2200      	movs	r2, #0
 8007076:	2100      	movs	r1, #0
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fb1b 	bl	80076b4 <USBH_CtlReq>
 800707e:	4603      	mov	r3, r0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	460b      	mov	r3, r1
 8007092:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	789b      	ldrb	r3, [r3, #2]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d10e      	bne.n	80070ba <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2209      	movs	r2, #9
 80070a6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	887a      	ldrh	r2, [r7, #2]
 80070ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80070ba:	2200      	movs	r2, #0
 80070bc:	2100      	movs	r1, #0
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 faf8 	bl	80076b4 <USBH_CtlReq>
 80070c4:	4603      	mov	r3, r0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3708      	adds	r7, #8
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b082      	sub	sp, #8
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
 80070d6:	460b      	mov	r3, r1
 80070d8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	789b      	ldrb	r3, [r3, #2]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d10f      	bne.n	8007102 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2203      	movs	r2, #3
 80070ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80070ee:	78fb      	ldrb	r3, [r7, #3]
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007102:	2200      	movs	r2, #0
 8007104:	2100      	movs	r1, #0
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fad4 	bl	80076b4 <USBH_CtlReq>
 800710c:	4603      	mov	r3, r0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b082      	sub	sp, #8
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	460b      	mov	r3, r1
 8007120:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	789b      	ldrb	r3, [r3, #2]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d10f      	bne.n	800714a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2202      	movs	r2, #2
 800712e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800713c:	78fb      	ldrb	r3, [r7, #3]
 800713e:	b29a      	uxth	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800714a:	2200      	movs	r2, #0
 800714c:	2100      	movs	r1, #0
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fab0 	bl	80076b4 <USBH_CtlReq>
 8007154:	4603      	mov	r3, r0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
	...

08007160 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	4613      	mov	r3, r2
 800716c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	781a      	ldrb	r2, [r3, #0]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	785a      	ldrb	r2, [r3, #1]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	3302      	adds	r3, #2
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	b29a      	uxth	r2, r3
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	3303      	adds	r3, #3
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	b29b      	uxth	r3, r3
 800718e:	021b      	lsls	r3, r3, #8
 8007190:	b29b      	uxth	r3, r3
 8007192:	4313      	orrs	r3, r2
 8007194:	b29a      	uxth	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	791a      	ldrb	r2, [r3, #4]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	795a      	ldrb	r2, [r3, #5]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	799a      	ldrb	r2, [r3, #6]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	79da      	ldrb	r2, [r3, #7]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	79db      	ldrb	r3, [r3, #7]
 80071be:	2b20      	cmp	r3, #32
 80071c0:	dc0f      	bgt.n	80071e2 <USBH_ParseDevDesc+0x82>
 80071c2:	2b08      	cmp	r3, #8
 80071c4:	db14      	blt.n	80071f0 <USBH_ParseDevDesc+0x90>
 80071c6:	3b08      	subs	r3, #8
 80071c8:	4a2d      	ldr	r2, [pc, #180]	; (8007280 <USBH_ParseDevDesc+0x120>)
 80071ca:	fa22 f303 	lsr.w	r3, r2, r3
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	bf14      	ite	ne
 80071d6:	2301      	movne	r3, #1
 80071d8:	2300      	moveq	r3, #0
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d102      	bne.n	80071e6 <USBH_ParseDevDesc+0x86>
 80071e0:	e006      	b.n	80071f0 <USBH_ParseDevDesc+0x90>
 80071e2:	2b40      	cmp	r3, #64	; 0x40
 80071e4:	d104      	bne.n	80071f0 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	79da      	ldrb	r2, [r3, #7]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	71da      	strb	r2, [r3, #7]
      break;
 80071ee:	e003      	b.n	80071f8 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2240      	movs	r2, #64	; 0x40
 80071f4:	71da      	strb	r2, [r3, #7]
      break;
 80071f6:	bf00      	nop
  }

  if (length > 8U)
 80071f8:	88fb      	ldrh	r3, [r7, #6]
 80071fa:	2b08      	cmp	r3, #8
 80071fc:	d939      	bls.n	8007272 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	3308      	adds	r3, #8
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	b29a      	uxth	r2, r3
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	3309      	adds	r3, #9
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	b29b      	uxth	r3, r3
 800720e:	021b      	lsls	r3, r3, #8
 8007210:	b29b      	uxth	r3, r3
 8007212:	4313      	orrs	r3, r2
 8007214:	b29a      	uxth	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	330a      	adds	r3, #10
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	b29a      	uxth	r2, r3
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	330b      	adds	r3, #11
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	b29b      	uxth	r3, r3
 800722a:	021b      	lsls	r3, r3, #8
 800722c:	b29b      	uxth	r3, r3
 800722e:	4313      	orrs	r3, r2
 8007230:	b29a      	uxth	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	330c      	adds	r3, #12
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	b29a      	uxth	r2, r3
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	330d      	adds	r3, #13
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	b29b      	uxth	r3, r3
 8007246:	021b      	lsls	r3, r3, #8
 8007248:	b29b      	uxth	r3, r3
 800724a:	4313      	orrs	r3, r2
 800724c:	b29a      	uxth	r2, r3
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	7b9a      	ldrb	r2, [r3, #14]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	7bda      	ldrb	r2, [r3, #15]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	7c1a      	ldrb	r2, [r3, #16]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	7c5a      	ldrb	r2, [r3, #17]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	745a      	strb	r2, [r3, #17]
  }
}
 8007272:	bf00      	nop
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	01000101 	.word	0x01000101

08007284 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b08c      	sub	sp, #48	; 0x30
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	4613      	mov	r3, r2
 8007290:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007298:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80072a4:	2300      	movs	r3, #0
 80072a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80072aa:	2300      	movs	r3, #0
 80072ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	781a      	ldrb	r2, [r3, #0]
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	785a      	ldrb	r2, [r3, #1]
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	3302      	adds	r3, #2
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	3303      	adds	r3, #3
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	021b      	lsls	r3, r3, #8
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	4313      	orrs	r3, r2
 80072da:	b29b      	uxth	r3, r3
 80072dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072e0:	bf28      	it	cs
 80072e2:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	791a      	ldrb	r2, [r3, #4]
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	795a      	ldrb	r2, [r3, #5]
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	799a      	ldrb	r2, [r3, #6]
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	79da      	ldrb	r2, [r3, #7]
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	7a1a      	ldrb	r2, [r3, #8]
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	2b09      	cmp	r3, #9
 800731a:	d002      	beq.n	8007322 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	2209      	movs	r2, #9
 8007320:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007322:	88fb      	ldrh	r3, [r7, #6]
 8007324:	2b09      	cmp	r3, #9
 8007326:	f240 809d 	bls.w	8007464 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800732a:	2309      	movs	r3, #9
 800732c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800732e:	2300      	movs	r3, #0
 8007330:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007332:	e081      	b.n	8007438 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007334:	f107 0316 	add.w	r3, r7, #22
 8007338:	4619      	mov	r1, r3
 800733a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800733c:	f000 f99f 	bl	800767e <USBH_GetNextDesc>
 8007340:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007344:	785b      	ldrb	r3, [r3, #1]
 8007346:	2b04      	cmp	r3, #4
 8007348:	d176      	bne.n	8007438 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	2b09      	cmp	r3, #9
 8007350:	d002      	beq.n	8007358 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007354:	2209      	movs	r2, #9
 8007356:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800735c:	221a      	movs	r2, #26
 800735e:	fb02 f303 	mul.w	r3, r2, r3
 8007362:	3308      	adds	r3, #8
 8007364:	6a3a      	ldr	r2, [r7, #32]
 8007366:	4413      	add	r3, r2
 8007368:	3302      	adds	r3, #2
 800736a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800736c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800736e:	69f8      	ldr	r0, [r7, #28]
 8007370:	f000 f87e 	bl	8007470 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007374:	2300      	movs	r3, #0
 8007376:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800737a:	2300      	movs	r3, #0
 800737c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800737e:	e043      	b.n	8007408 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007380:	f107 0316 	add.w	r3, r7, #22
 8007384:	4619      	mov	r1, r3
 8007386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007388:	f000 f979 	bl	800767e <USBH_GetNextDesc>
 800738c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800738e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007390:	785b      	ldrb	r3, [r3, #1]
 8007392:	2b05      	cmp	r3, #5
 8007394:	d138      	bne.n	8007408 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	795b      	ldrb	r3, [r3, #5]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d10f      	bne.n	80073be <USBH_ParseCfgDesc+0x13a>
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	799b      	ldrb	r3, [r3, #6]
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d10b      	bne.n	80073be <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	79db      	ldrb	r3, [r3, #7]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10f      	bne.n	80073ce <USBH_ParseCfgDesc+0x14a>
 80073ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	2b09      	cmp	r3, #9
 80073b4:	d00b      	beq.n	80073ce <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80073b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b8:	2209      	movs	r2, #9
 80073ba:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80073bc:	e007      	b.n	80073ce <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80073be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	2b07      	cmp	r3, #7
 80073c4:	d004      	beq.n	80073d0 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80073c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c8:	2207      	movs	r2, #7
 80073ca:	701a      	strb	r2, [r3, #0]
 80073cc:	e000      	b.n	80073d0 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80073ce:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80073d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073d4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80073d8:	3201      	adds	r2, #1
 80073da:	00d2      	lsls	r2, r2, #3
 80073dc:	211a      	movs	r1, #26
 80073de:	fb01 f303 	mul.w	r3, r1, r3
 80073e2:	4413      	add	r3, r2
 80073e4:	3308      	adds	r3, #8
 80073e6:	6a3a      	ldr	r2, [r7, #32]
 80073e8:	4413      	add	r3, r2
 80073ea:	3304      	adds	r3, #4
 80073ec:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80073ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073f0:	69b9      	ldr	r1, [r7, #24]
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f000 f86b 	bl	80074ce <USBH_ParseEPDesc>
 80073f8:	4603      	mov	r3, r0
 80073fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80073fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007402:	3301      	adds	r3, #1
 8007404:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	791b      	ldrb	r3, [r3, #4]
 800740c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007410:	429a      	cmp	r2, r3
 8007412:	d204      	bcs.n	800741e <USBH_ParseCfgDesc+0x19a>
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	885a      	ldrh	r2, [r3, #2]
 8007418:	8afb      	ldrh	r3, [r7, #22]
 800741a:	429a      	cmp	r2, r3
 800741c:	d8b0      	bhi.n	8007380 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	791b      	ldrb	r3, [r3, #4]
 8007422:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007426:	429a      	cmp	r2, r3
 8007428:	d201      	bcs.n	800742e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800742a:	2303      	movs	r3, #3
 800742c:	e01c      	b.n	8007468 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800742e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007432:	3301      	adds	r3, #1
 8007434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800743c:	2b01      	cmp	r3, #1
 800743e:	d805      	bhi.n	800744c <USBH_ParseCfgDesc+0x1c8>
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	885a      	ldrh	r2, [r3, #2]
 8007444:	8afb      	ldrh	r3, [r7, #22]
 8007446:	429a      	cmp	r2, r3
 8007448:	f63f af74 	bhi.w	8007334 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	791b      	ldrb	r3, [r3, #4]
 8007450:	2b02      	cmp	r3, #2
 8007452:	bf28      	it	cs
 8007454:	2302      	movcs	r3, #2
 8007456:	b2db      	uxtb	r3, r3
 8007458:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800745c:	429a      	cmp	r2, r3
 800745e:	d201      	bcs.n	8007464 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007460:	2303      	movs	r3, #3
 8007462:	e001      	b.n	8007468 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007464:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007468:	4618      	mov	r0, r3
 800746a:	3730      	adds	r7, #48	; 0x30
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	781a      	ldrb	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	785a      	ldrb	r2, [r3, #1]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	789a      	ldrb	r2, [r3, #2]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	78da      	ldrb	r2, [r3, #3]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	791a      	ldrb	r2, [r3, #4]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	795a      	ldrb	r2, [r3, #5]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	799a      	ldrb	r2, [r3, #6]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	79da      	ldrb	r2, [r3, #7]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	7a1a      	ldrb	r2, [r3, #8]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	721a      	strb	r2, [r3, #8]
}
 80074c2:	bf00      	nop
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b087      	sub	sp, #28
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	60f8      	str	r0, [r7, #12]
 80074d6:	60b9      	str	r1, [r7, #8]
 80074d8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	781a      	ldrb	r2, [r3, #0]
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	785a      	ldrb	r2, [r3, #1]
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	789a      	ldrb	r2, [r3, #2]
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	78da      	ldrb	r2, [r3, #3]
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	3304      	adds	r3, #4
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	b29a      	uxth	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	3305      	adds	r3, #5
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	b29b      	uxth	r3, r3
 800750e:	021b      	lsls	r3, r3, #8
 8007510:	b29b      	uxth	r3, r3
 8007512:	4313      	orrs	r3, r2
 8007514:	b29a      	uxth	r2, r3
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	799a      	ldrb	r2, [r3, #6]
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	889b      	ldrh	r3, [r3, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d102      	bne.n	8007530 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800752a:	2303      	movs	r3, #3
 800752c:	75fb      	strb	r3, [r7, #23]
 800752e:	e033      	b.n	8007598 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	889b      	ldrh	r3, [r3, #4]
 8007534:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007538:	f023 0307 	bic.w	r3, r3, #7
 800753c:	b29a      	uxth	r2, r3
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	889b      	ldrh	r3, [r3, #4]
 8007546:	b21a      	sxth	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	3304      	adds	r3, #4
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	b299      	uxth	r1, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	3305      	adds	r3, #5
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	b29b      	uxth	r3, r3
 8007558:	021b      	lsls	r3, r3, #8
 800755a:	b29b      	uxth	r3, r3
 800755c:	430b      	orrs	r3, r1
 800755e:	b29b      	uxth	r3, r3
 8007560:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007564:	2b00      	cmp	r3, #0
 8007566:	d110      	bne.n	800758a <USBH_ParseEPDesc+0xbc>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3304      	adds	r3, #4
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	b299      	uxth	r1, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3305      	adds	r3, #5
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	b29b      	uxth	r3, r3
 8007578:	021b      	lsls	r3, r3, #8
 800757a:	b29b      	uxth	r3, r3
 800757c:	430b      	orrs	r3, r1
 800757e:	b29b      	uxth	r3, r3
 8007580:	b21b      	sxth	r3, r3
 8007582:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007586:	b21b      	sxth	r3, r3
 8007588:	e001      	b.n	800758e <USBH_ParseEPDesc+0xc0>
 800758a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800758e:	4313      	orrs	r3, r2
 8007590:	b21b      	sxth	r3, r3
 8007592:	b29a      	uxth	r2, r3
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d116      	bne.n	80075d0 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	78db      	ldrb	r3, [r3, #3]
 80075a6:	f003 0303 	and.w	r3, r3, #3
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d005      	beq.n	80075ba <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	78db      	ldrb	r3, [r3, #3]
 80075b2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d127      	bne.n	800760a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	799b      	ldrb	r3, [r3, #6]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d003      	beq.n	80075ca <USBH_ParseEPDesc+0xfc>
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	799b      	ldrb	r3, [r3, #6]
 80075c6:	2b10      	cmp	r3, #16
 80075c8:	d91f      	bls.n	800760a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80075ca:	2303      	movs	r3, #3
 80075cc:	75fb      	strb	r3, [r7, #23]
 80075ce:	e01c      	b.n	800760a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	78db      	ldrb	r3, [r3, #3]
 80075d4:	f003 0303 	and.w	r3, r3, #3
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d10a      	bne.n	80075f2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	799b      	ldrb	r3, [r3, #6]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d003      	beq.n	80075ec <USBH_ParseEPDesc+0x11e>
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	799b      	ldrb	r3, [r3, #6]
 80075e8:	2b10      	cmp	r3, #16
 80075ea:	d90e      	bls.n	800760a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80075ec:	2303      	movs	r3, #3
 80075ee:	75fb      	strb	r3, [r7, #23]
 80075f0:	e00b      	b.n	800760a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	78db      	ldrb	r3, [r3, #3]
 80075f6:	f003 0303 	and.w	r3, r3, #3
 80075fa:	2b03      	cmp	r3, #3
 80075fc:	d105      	bne.n	800760a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	799b      	ldrb	r3, [r3, #6]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007606:	2303      	movs	r3, #3
 8007608:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800760a:	7dfb      	ldrb	r3, [r7, #23]
}
 800760c:	4618      	mov	r0, r3
 800760e:	371c      	adds	r7, #28
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	4613      	mov	r3, r2
 8007624:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	3301      	adds	r3, #1
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	2b03      	cmp	r3, #3
 800762e:	d120      	bne.n	8007672 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	1e9a      	subs	r2, r3, #2
 8007636:	88fb      	ldrh	r3, [r7, #6]
 8007638:	4293      	cmp	r3, r2
 800763a:	bf28      	it	cs
 800763c:	4613      	movcs	r3, r2
 800763e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	3302      	adds	r3, #2
 8007644:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007646:	2300      	movs	r3, #0
 8007648:	82fb      	strh	r3, [r7, #22]
 800764a:	e00b      	b.n	8007664 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800764c:	8afb      	ldrh	r3, [r7, #22]
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	4413      	add	r3, r2
 8007652:	781a      	ldrb	r2, [r3, #0]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	3301      	adds	r3, #1
 800765c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800765e:	8afb      	ldrh	r3, [r7, #22]
 8007660:	3302      	adds	r3, #2
 8007662:	82fb      	strh	r3, [r7, #22]
 8007664:	8afa      	ldrh	r2, [r7, #22]
 8007666:	8abb      	ldrh	r3, [r7, #20]
 8007668:	429a      	cmp	r2, r3
 800766a:	d3ef      	bcc.n	800764c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2200      	movs	r2, #0
 8007670:	701a      	strb	r2, [r3, #0]
  }
}
 8007672:	bf00      	nop
 8007674:	371c      	adds	r7, #28
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800767e:	b480      	push	{r7}
 8007680:	b085      	sub	sp, #20
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	881a      	ldrh	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	b29b      	uxth	r3, r3
 8007692:	4413      	add	r3, r2
 8007694:	b29a      	uxth	r2, r3
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4413      	add	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80076a6:	68fb      	ldr	r3, [r7, #12]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	4613      	mov	r3, r2
 80076c0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80076c2:	2301      	movs	r3, #1
 80076c4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	789b      	ldrb	r3, [r3, #2]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d002      	beq.n	80076d4 <USBH_CtlReq+0x20>
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d00f      	beq.n	80076f2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80076d2:	e027      	b.n	8007724 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	88fa      	ldrh	r2, [r7, #6]
 80076de:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2201      	movs	r2, #1
 80076e4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2202      	movs	r2, #2
 80076ea:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80076ec:	2301      	movs	r3, #1
 80076ee:	75fb      	strb	r3, [r7, #23]
      break;
 80076f0:	e018      	b.n	8007724 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 f81c 	bl	8007730 <USBH_HandleControl>
 80076f8:	4603      	mov	r3, r0
 80076fa:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80076fc:	7dfb      	ldrb	r3, [r7, #23]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d002      	beq.n	8007708 <USBH_CtlReq+0x54>
 8007702:	7dfb      	ldrb	r3, [r7, #23]
 8007704:	2b03      	cmp	r3, #3
 8007706:	d106      	bne.n	8007716 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2201      	movs	r2, #1
 800770c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	761a      	strb	r2, [r3, #24]
      break;
 8007714:	e005      	b.n	8007722 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	2b02      	cmp	r3, #2
 800771a:	d102      	bne.n	8007722 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2201      	movs	r2, #1
 8007720:	709a      	strb	r2, [r3, #2]
      break;
 8007722:	bf00      	nop
  }
  return status;
 8007724:	7dfb      	ldrb	r3, [r7, #23]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
	...

08007730 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af02      	add	r7, sp, #8
 8007736:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007738:	2301      	movs	r3, #1
 800773a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800773c:	2300      	movs	r3, #0
 800773e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	7e1b      	ldrb	r3, [r3, #24]
 8007744:	3b01      	subs	r3, #1
 8007746:	2b0a      	cmp	r3, #10
 8007748:	f200 8156 	bhi.w	80079f8 <USBH_HandleControl+0x2c8>
 800774c:	a201      	add	r2, pc, #4	; (adr r2, 8007754 <USBH_HandleControl+0x24>)
 800774e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007752:	bf00      	nop
 8007754:	08007781 	.word	0x08007781
 8007758:	0800779b 	.word	0x0800779b
 800775c:	08007805 	.word	0x08007805
 8007760:	0800782b 	.word	0x0800782b
 8007764:	08007863 	.word	0x08007863
 8007768:	0800788d 	.word	0x0800788d
 800776c:	080078df 	.word	0x080078df
 8007770:	08007901 	.word	0x08007901
 8007774:	0800793d 	.word	0x0800793d
 8007778:	08007963 	.word	0x08007963
 800777c:	080079a1 	.word	0x080079a1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f103 0110 	add.w	r1, r3, #16
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	795b      	ldrb	r3, [r3, #5]
 800778a:	461a      	mov	r2, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 f943 	bl	8007a18 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2202      	movs	r2, #2
 8007796:	761a      	strb	r2, [r3, #24]
      break;
 8007798:	e139      	b.n	8007a0e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	795b      	ldrb	r3, [r3, #5]
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fcc5 	bl	8008130 <USBH_LL_GetURBState>
 80077a6:	4603      	mov	r3, r0
 80077a8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80077aa:	7bbb      	ldrb	r3, [r7, #14]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d11e      	bne.n	80077ee <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	7c1b      	ldrb	r3, [r3, #16]
 80077b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80077b8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	8adb      	ldrh	r3, [r3, #22]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00a      	beq.n	80077d8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80077c2:	7b7b      	ldrb	r3, [r7, #13]
 80077c4:	2b80      	cmp	r3, #128	; 0x80
 80077c6:	d103      	bne.n	80077d0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2203      	movs	r2, #3
 80077cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80077ce:	e115      	b.n	80079fc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2205      	movs	r2, #5
 80077d4:	761a      	strb	r2, [r3, #24]
      break;
 80077d6:	e111      	b.n	80079fc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80077d8:	7b7b      	ldrb	r3, [r7, #13]
 80077da:	2b80      	cmp	r3, #128	; 0x80
 80077dc:	d103      	bne.n	80077e6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2209      	movs	r2, #9
 80077e2:	761a      	strb	r2, [r3, #24]
      break;
 80077e4:	e10a      	b.n	80079fc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2207      	movs	r2, #7
 80077ea:	761a      	strb	r2, [r3, #24]
      break;
 80077ec:	e106      	b.n	80079fc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80077ee:	7bbb      	ldrb	r3, [r7, #14]
 80077f0:	2b04      	cmp	r3, #4
 80077f2:	d003      	beq.n	80077fc <USBH_HandleControl+0xcc>
 80077f4:	7bbb      	ldrb	r3, [r7, #14]
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	f040 8100 	bne.w	80079fc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	220b      	movs	r2, #11
 8007800:	761a      	strb	r2, [r3, #24]
      break;
 8007802:	e0fb      	b.n	80079fc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800780a:	b29a      	uxth	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6899      	ldr	r1, [r3, #8]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	899a      	ldrh	r2, [r3, #12]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	791b      	ldrb	r3, [r3, #4]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f93a 	bl	8007a96 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2204      	movs	r2, #4
 8007826:	761a      	strb	r2, [r3, #24]
      break;
 8007828:	e0f1      	b.n	8007a0e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	791b      	ldrb	r3, [r3, #4]
 800782e:	4619      	mov	r1, r3
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fc7d 	bl	8008130 <USBH_LL_GetURBState>
 8007836:	4603      	mov	r3, r0
 8007838:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800783a:	7bbb      	ldrb	r3, [r7, #14]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d102      	bne.n	8007846 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2209      	movs	r2, #9
 8007844:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	2b05      	cmp	r3, #5
 800784a:	d102      	bne.n	8007852 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800784c:	2303      	movs	r3, #3
 800784e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007850:	e0d6      	b.n	8007a00 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007852:	7bbb      	ldrb	r3, [r7, #14]
 8007854:	2b04      	cmp	r3, #4
 8007856:	f040 80d3 	bne.w	8007a00 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	220b      	movs	r2, #11
 800785e:	761a      	strb	r2, [r3, #24]
      break;
 8007860:	e0ce      	b.n	8007a00 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6899      	ldr	r1, [r3, #8]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	899a      	ldrh	r2, [r3, #12]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	795b      	ldrb	r3, [r3, #5]
 800786e:	2001      	movs	r0, #1
 8007870:	9000      	str	r0, [sp, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f8ea 	bl	8007a4c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800787e:	b29a      	uxth	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2206      	movs	r2, #6
 8007888:	761a      	strb	r2, [r3, #24]
      break;
 800788a:	e0c0      	b.n	8007a0e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	795b      	ldrb	r3, [r3, #5]
 8007890:	4619      	mov	r1, r3
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fc4c 	bl	8008130 <USBH_LL_GetURBState>
 8007898:	4603      	mov	r3, r0
 800789a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800789c:	7bbb      	ldrb	r3, [r7, #14]
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d103      	bne.n	80078aa <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2207      	movs	r2, #7
 80078a6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80078a8:	e0ac      	b.n	8007a04 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80078aa:	7bbb      	ldrb	r3, [r7, #14]
 80078ac:	2b05      	cmp	r3, #5
 80078ae:	d105      	bne.n	80078bc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	220c      	movs	r2, #12
 80078b4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80078b6:	2303      	movs	r3, #3
 80078b8:	73fb      	strb	r3, [r7, #15]
      break;
 80078ba:	e0a3      	b.n	8007a04 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d103      	bne.n	80078ca <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2205      	movs	r2, #5
 80078c6:	761a      	strb	r2, [r3, #24]
      break;
 80078c8:	e09c      	b.n	8007a04 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
 80078cc:	2b04      	cmp	r3, #4
 80078ce:	f040 8099 	bne.w	8007a04 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	220b      	movs	r2, #11
 80078d6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80078d8:	2302      	movs	r3, #2
 80078da:	73fb      	strb	r3, [r7, #15]
      break;
 80078dc:	e092      	b.n	8007a04 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	791b      	ldrb	r3, [r3, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	2100      	movs	r1, #0
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f8d5 	bl	8007a96 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2208      	movs	r2, #8
 80078fc:	761a      	strb	r2, [r3, #24]

      break;
 80078fe:	e086      	b.n	8007a0e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	791b      	ldrb	r3, [r3, #4]
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fc12 	bl	8008130 <USBH_LL_GetURBState>
 800790c:	4603      	mov	r3, r0
 800790e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007910:	7bbb      	ldrb	r3, [r7, #14]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d105      	bne.n	8007922 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	220d      	movs	r2, #13
 800791a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007920:	e072      	b.n	8007a08 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007922:	7bbb      	ldrb	r3, [r7, #14]
 8007924:	2b04      	cmp	r3, #4
 8007926:	d103      	bne.n	8007930 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	220b      	movs	r2, #11
 800792c:	761a      	strb	r2, [r3, #24]
      break;
 800792e:	e06b      	b.n	8007a08 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007930:	7bbb      	ldrb	r3, [r7, #14]
 8007932:	2b05      	cmp	r3, #5
 8007934:	d168      	bne.n	8007a08 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007936:	2303      	movs	r3, #3
 8007938:	73fb      	strb	r3, [r7, #15]
      break;
 800793a:	e065      	b.n	8007a08 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	795b      	ldrb	r3, [r3, #5]
 8007940:	2201      	movs	r2, #1
 8007942:	9200      	str	r2, [sp, #0]
 8007944:	2200      	movs	r2, #0
 8007946:	2100      	movs	r1, #0
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f87f 	bl	8007a4c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007954:	b29a      	uxth	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	220a      	movs	r2, #10
 800795e:	761a      	strb	r2, [r3, #24]
      break;
 8007960:	e055      	b.n	8007a0e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	795b      	ldrb	r3, [r3, #5]
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fbe1 	bl	8008130 <USBH_LL_GetURBState>
 800796e:	4603      	mov	r3, r0
 8007970:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007972:	7bbb      	ldrb	r3, [r7, #14]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d105      	bne.n	8007984 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	220d      	movs	r2, #13
 8007980:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007982:	e043      	b.n	8007a0c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007984:	7bbb      	ldrb	r3, [r7, #14]
 8007986:	2b02      	cmp	r3, #2
 8007988:	d103      	bne.n	8007992 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2209      	movs	r2, #9
 800798e:	761a      	strb	r2, [r3, #24]
      break;
 8007990:	e03c      	b.n	8007a0c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007992:	7bbb      	ldrb	r3, [r7, #14]
 8007994:	2b04      	cmp	r3, #4
 8007996:	d139      	bne.n	8007a0c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	220b      	movs	r2, #11
 800799c:	761a      	strb	r2, [r3, #24]
      break;
 800799e:	e035      	b.n	8007a0c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	7e5b      	ldrb	r3, [r3, #25]
 80079a4:	3301      	adds	r3, #1
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	765a      	strb	r2, [r3, #25]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	7e5b      	ldrb	r3, [r3, #25]
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d806      	bhi.n	80079c2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80079c0:	e025      	b.n	8007a0e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079c8:	2106      	movs	r1, #6
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	795b      	ldrb	r3, [r3, #5]
 80079d8:	4619      	mov	r1, r3
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f90c 	bl	8007bf8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	791b      	ldrb	r3, [r3, #4]
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f906 	bl	8007bf8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80079f2:	2302      	movs	r3, #2
 80079f4:	73fb      	strb	r3, [r7, #15]
      break;
 80079f6:	e00a      	b.n	8007a0e <USBH_HandleControl+0x2de>

    default:
      break;
 80079f8:	bf00      	nop
 80079fa:	e008      	b.n	8007a0e <USBH_HandleControl+0x2de>
      break;
 80079fc:	bf00      	nop
 80079fe:	e006      	b.n	8007a0e <USBH_HandleControl+0x2de>
      break;
 8007a00:	bf00      	nop
 8007a02:	e004      	b.n	8007a0e <USBH_HandleControl+0x2de>
      break;
 8007a04:	bf00      	nop
 8007a06:	e002      	b.n	8007a0e <USBH_HandleControl+0x2de>
      break;
 8007a08:	bf00      	nop
 8007a0a:	e000      	b.n	8007a0e <USBH_HandleControl+0x2de>
      break;
 8007a0c:	bf00      	nop
  }

  return status;
 8007a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b088      	sub	sp, #32
 8007a1c:	af04      	add	r7, sp, #16
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	4613      	mov	r3, r2
 8007a24:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a26:	79f9      	ldrb	r1, [r7, #7]
 8007a28:	2300      	movs	r3, #0
 8007a2a:	9303      	str	r3, [sp, #12]
 8007a2c:	2308      	movs	r3, #8
 8007a2e:	9302      	str	r3, [sp, #8]
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	9301      	str	r3, [sp, #4]
 8007a34:	2300      	movs	r3, #0
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	2300      	movs	r3, #0
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 fb46 	bl	80080ce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b088      	sub	sp, #32
 8007a50:	af04      	add	r7, sp, #16
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	4611      	mov	r1, r2
 8007a58:	461a      	mov	r2, r3
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	80fb      	strh	r3, [r7, #6]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a70:	7979      	ldrb	r1, [r7, #5]
 8007a72:	7e3b      	ldrb	r3, [r7, #24]
 8007a74:	9303      	str	r3, [sp, #12]
 8007a76:	88fb      	ldrh	r3, [r7, #6]
 8007a78:	9302      	str	r3, [sp, #8]
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	9301      	str	r3, [sp, #4]
 8007a7e:	2301      	movs	r3, #1
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	2300      	movs	r3, #0
 8007a84:	2200      	movs	r2, #0
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f000 fb21 	bl	80080ce <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b088      	sub	sp, #32
 8007a9a:	af04      	add	r7, sp, #16
 8007a9c:	60f8      	str	r0, [r7, #12]
 8007a9e:	60b9      	str	r1, [r7, #8]
 8007aa0:	4611      	mov	r1, r2
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	80fb      	strh	r3, [r7, #6]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007aac:	7979      	ldrb	r1, [r7, #5]
 8007aae:	2300      	movs	r3, #0
 8007ab0:	9303      	str	r3, [sp, #12]
 8007ab2:	88fb      	ldrh	r3, [r7, #6]
 8007ab4:	9302      	str	r3, [sp, #8]
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	9301      	str	r3, [sp, #4]
 8007aba:	2301      	movs	r3, #1
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	2300      	movs	r3, #0
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f000 fb03 	bl	80080ce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007ac8:	2300      	movs	r3, #0

}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b088      	sub	sp, #32
 8007ad6:	af04      	add	r7, sp, #16
 8007ad8:	60f8      	str	r0, [r7, #12]
 8007ada:	60b9      	str	r1, [r7, #8]
 8007adc:	4611      	mov	r1, r2
 8007ade:	461a      	mov	r2, r3
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	80fb      	strh	r3, [r7, #6]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007af2:	2300      	movs	r3, #0
 8007af4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007af6:	7979      	ldrb	r1, [r7, #5]
 8007af8:	7e3b      	ldrb	r3, [r7, #24]
 8007afa:	9303      	str	r3, [sp, #12]
 8007afc:	88fb      	ldrh	r3, [r7, #6]
 8007afe:	9302      	str	r3, [sp, #8]
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	9301      	str	r3, [sp, #4]
 8007b04:	2301      	movs	r3, #1
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	2302      	movs	r3, #2
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f000 fade 	bl	80080ce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b088      	sub	sp, #32
 8007b20:	af04      	add	r7, sp, #16
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	4611      	mov	r1, r2
 8007b28:	461a      	mov	r2, r3
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	80fb      	strh	r3, [r7, #6]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b32:	7979      	ldrb	r1, [r7, #5]
 8007b34:	2300      	movs	r3, #0
 8007b36:	9303      	str	r3, [sp, #12]
 8007b38:	88fb      	ldrh	r3, [r7, #6]
 8007b3a:	9302      	str	r3, [sp, #8]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	9301      	str	r3, [sp, #4]
 8007b40:	2301      	movs	r3, #1
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	2302      	movs	r3, #2
 8007b46:	2201      	movs	r2, #1
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f000 fac0 	bl	80080ce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af04      	add	r7, sp, #16
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	4608      	mov	r0, r1
 8007b62:	4611      	mov	r1, r2
 8007b64:	461a      	mov	r2, r3
 8007b66:	4603      	mov	r3, r0
 8007b68:	70fb      	strb	r3, [r7, #3]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	70bb      	strb	r3, [r7, #2]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007b72:	7878      	ldrb	r0, [r7, #1]
 8007b74:	78ba      	ldrb	r2, [r7, #2]
 8007b76:	78f9      	ldrb	r1, [r7, #3]
 8007b78:	8b3b      	ldrh	r3, [r7, #24]
 8007b7a:	9302      	str	r3, [sp, #8]
 8007b7c:	7d3b      	ldrb	r3, [r7, #20]
 8007b7e:	9301      	str	r3, [sp, #4]
 8007b80:	7c3b      	ldrb	r3, [r7, #16]
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	4603      	mov	r3, r0
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fa53 	bl	8008032 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b082      	sub	sp, #8
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007ba2:	78fb      	ldrb	r3, [r7, #3]
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fa72 	bl	8008090 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b084      	sub	sp, #16
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f836 	bl	8007c34 <USBH_GetFreePipe>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007bcc:	89fb      	ldrh	r3, [r7, #14]
 8007bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d00a      	beq.n	8007bec <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007bd6:	78fa      	ldrb	r2, [r7, #3]
 8007bd8:	89fb      	ldrh	r3, [r7, #14]
 8007bda:	f003 030f 	and.w	r3, r3, #15
 8007bde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007be2:	6879      	ldr	r1, [r7, #4]
 8007be4:	33e0      	adds	r3, #224	; 0xe0
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	440b      	add	r3, r1
 8007bea:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007bec:	89fb      	ldrh	r3, [r7, #14]
 8007bee:	b2db      	uxtb	r3, r3
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007c04:	78fb      	ldrb	r3, [r7, #3]
 8007c06:	2b0f      	cmp	r3, #15
 8007c08:	d80d      	bhi.n	8007c26 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007c0a:	78fb      	ldrb	r3, [r7, #3]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	33e0      	adds	r3, #224	; 0xe0
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	685a      	ldr	r2, [r3, #4]
 8007c16:	78fb      	ldrb	r3, [r7, #3]
 8007c18:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007c1c:	6879      	ldr	r1, [r7, #4]
 8007c1e:	33e0      	adds	r3, #224	; 0xe0
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	440b      	add	r3, r1
 8007c24:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007c40:	2300      	movs	r3, #0
 8007c42:	73fb      	strb	r3, [r7, #15]
 8007c44:	e00f      	b.n	8007c66 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	33e0      	adds	r3, #224	; 0xe0
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d102      	bne.n	8007c60 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	e007      	b.n	8007c70 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007c60:	7bfb      	ldrb	r3, [r7, #15]
 8007c62:	3301      	adds	r3, #1
 8007c64:	73fb      	strb	r3, [r7, #15]
 8007c66:	7bfb      	ldrb	r3, [r7, #15]
 8007c68:	2b0f      	cmp	r3, #15
 8007c6a:	d9ec      	bls.n	8007c46 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007c6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007c80:	2201      	movs	r2, #1
 8007c82:	490e      	ldr	r1, [pc, #56]	; (8007cbc <MX_USB_HOST_Init+0x40>)
 8007c84:	480e      	ldr	r0, [pc, #56]	; (8007cc0 <MX_USB_HOST_Init+0x44>)
 8007c86:	f7fe fba5 	bl	80063d4 <USBH_Init>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d001      	beq.n	8007c94 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007c90:	f7f8 fe6a 	bl	8000968 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007c94:	490b      	ldr	r1, [pc, #44]	; (8007cc4 <MX_USB_HOST_Init+0x48>)
 8007c96:	480a      	ldr	r0, [pc, #40]	; (8007cc0 <MX_USB_HOST_Init+0x44>)
 8007c98:	f7fe fc2a 	bl	80064f0 <USBH_RegisterClass>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d001      	beq.n	8007ca6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007ca2:	f7f8 fe61 	bl	8000968 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007ca6:	4806      	ldr	r0, [pc, #24]	; (8007cc0 <MX_USB_HOST_Init+0x44>)
 8007ca8:	f7fe fcae 	bl	8006608 <USBH_Start>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007cb2:	f7f8 fe59 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007cb6:	bf00      	nop
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	08007cdd 	.word	0x08007cdd
 8007cc0:	200001d8 	.word	0x200001d8
 8007cc4:	2000000c 	.word	0x2000000c

08007cc8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007ccc:	4802      	ldr	r0, [pc, #8]	; (8007cd8 <MX_USB_HOST_Process+0x10>)
 8007cce:	f7fe fcab 	bl	8006628 <USBH_Process>
}
 8007cd2:	bf00      	nop
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	200001d8 	.word	0x200001d8

08007cdc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007ce8:	78fb      	ldrb	r3, [r7, #3]
 8007cea:	3b01      	subs	r3, #1
 8007cec:	2b04      	cmp	r3, #4
 8007cee:	d819      	bhi.n	8007d24 <USBH_UserProcess+0x48>
 8007cf0:	a201      	add	r2, pc, #4	; (adr r2, 8007cf8 <USBH_UserProcess+0x1c>)
 8007cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf6:	bf00      	nop
 8007cf8:	08007d25 	.word	0x08007d25
 8007cfc:	08007d15 	.word	0x08007d15
 8007d00:	08007d25 	.word	0x08007d25
 8007d04:	08007d1d 	.word	0x08007d1d
 8007d08:	08007d0d 	.word	0x08007d0d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007d0c:	4b09      	ldr	r3, [pc, #36]	; (8007d34 <USBH_UserProcess+0x58>)
 8007d0e:	2203      	movs	r2, #3
 8007d10:	701a      	strb	r2, [r3, #0]
  break;
 8007d12:	e008      	b.n	8007d26 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007d14:	4b07      	ldr	r3, [pc, #28]	; (8007d34 <USBH_UserProcess+0x58>)
 8007d16:	2202      	movs	r2, #2
 8007d18:	701a      	strb	r2, [r3, #0]
  break;
 8007d1a:	e004      	b.n	8007d26 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007d1c:	4b05      	ldr	r3, [pc, #20]	; (8007d34 <USBH_UserProcess+0x58>)
 8007d1e:	2201      	movs	r2, #1
 8007d20:	701a      	strb	r2, [r3, #0]
  break;
 8007d22:	e000      	b.n	8007d26 <USBH_UserProcess+0x4a>

  default:
  break;
 8007d24:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007d26:	bf00      	nop
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	200005b0 	.word	0x200005b0

08007d38 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08a      	sub	sp, #40	; 0x28
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d40:	f107 0314 	add.w	r3, r7, #20
 8007d44:	2200      	movs	r2, #0
 8007d46:	601a      	str	r2, [r3, #0]
 8007d48:	605a      	str	r2, [r3, #4]
 8007d4a:	609a      	str	r2, [r3, #8]
 8007d4c:	60da      	str	r2, [r3, #12]
 8007d4e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d58:	d147      	bne.n	8007dea <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	613b      	str	r3, [r7, #16]
 8007d5e:	4b25      	ldr	r3, [pc, #148]	; (8007df4 <HAL_HCD_MspInit+0xbc>)
 8007d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d62:	4a24      	ldr	r2, [pc, #144]	; (8007df4 <HAL_HCD_MspInit+0xbc>)
 8007d64:	f043 0301 	orr.w	r3, r3, #1
 8007d68:	6313      	str	r3, [r2, #48]	; 0x30
 8007d6a:	4b22      	ldr	r3, [pc, #136]	; (8007df4 <HAL_HCD_MspInit+0xbc>)
 8007d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	613b      	str	r3, [r7, #16]
 8007d74:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d80:	2300      	movs	r3, #0
 8007d82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007d84:	f107 0314 	add.w	r3, r7, #20
 8007d88:	4619      	mov	r1, r3
 8007d8a:	481b      	ldr	r0, [pc, #108]	; (8007df8 <HAL_HCD_MspInit+0xc0>)
 8007d8c:	f7f9 f9c0 	bl	8001110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007d90:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d96:	2302      	movs	r3, #2
 8007d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007da2:	230a      	movs	r3, #10
 8007da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007da6:	f107 0314 	add.w	r3, r7, #20
 8007daa:	4619      	mov	r1, r3
 8007dac:	4812      	ldr	r0, [pc, #72]	; (8007df8 <HAL_HCD_MspInit+0xc0>)
 8007dae:	f7f9 f9af 	bl	8001110 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007db2:	4b10      	ldr	r3, [pc, #64]	; (8007df4 <HAL_HCD_MspInit+0xbc>)
 8007db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007db6:	4a0f      	ldr	r2, [pc, #60]	; (8007df4 <HAL_HCD_MspInit+0xbc>)
 8007db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dbc:	6353      	str	r3, [r2, #52]	; 0x34
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	60fb      	str	r3, [r7, #12]
 8007dc2:	4b0c      	ldr	r3, [pc, #48]	; (8007df4 <HAL_HCD_MspInit+0xbc>)
 8007dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dc6:	4a0b      	ldr	r2, [pc, #44]	; (8007df4 <HAL_HCD_MspInit+0xbc>)
 8007dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8007dce:	4b09      	ldr	r3, [pc, #36]	; (8007df4 <HAL_HCD_MspInit+0xbc>)
 8007dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dd6:	60fb      	str	r3, [r7, #12]
 8007dd8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2100      	movs	r1, #0
 8007dde:	2043      	movs	r0, #67	; 0x43
 8007de0:	f7f9 f95f 	bl	80010a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007de4:	2043      	movs	r0, #67	; 0x43
 8007de6:	f7f9 f978 	bl	80010da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007dea:	bf00      	nop
 8007dec:	3728      	adds	r7, #40	; 0x28
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	40023800 	.word	0x40023800
 8007df8:	40020000 	.word	0x40020000

08007dfc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fe ffeb 	bl	8006de6 <USBH_LL_IncTimer>
}
 8007e10:	bf00      	nop
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7ff f823 	bl	8006e72 <USBH_LL_Connect>
}
 8007e2c:	bf00      	nop
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7ff f82c 	bl	8006ea0 <USBH_LL_Disconnect>
}
 8007e48:	bf00      	nop
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	70fb      	strb	r3, [r7, #3]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fe ffdd 	bl	8006e3a <USBH_LL_PortEnabled>
}
 8007e80:	bf00      	nop
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fe ffdd 	bl	8006e56 <USBH_LL_PortDisabled>
}
 8007e9c:	bf00      	nop
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d12a      	bne.n	8007f0c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007eb6:	4a18      	ldr	r2, [pc, #96]	; (8007f18 <USBH_LL_Init+0x74>)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a15      	ldr	r2, [pc, #84]	; (8007f18 <USBH_LL_Init+0x74>)
 8007ec2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ec6:	4b14      	ldr	r3, [pc, #80]	; (8007f18 <USBH_LL_Init+0x74>)
 8007ec8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007ecc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007ece:	4b12      	ldr	r3, [pc, #72]	; (8007f18 <USBH_LL_Init+0x74>)
 8007ed0:	2208      	movs	r2, #8
 8007ed2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007ed4:	4b10      	ldr	r3, [pc, #64]	; (8007f18 <USBH_LL_Init+0x74>)
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007eda:	4b0f      	ldr	r3, [pc, #60]	; (8007f18 <USBH_LL_Init+0x74>)
 8007edc:	2200      	movs	r2, #0
 8007ede:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007ee0:	4b0d      	ldr	r3, [pc, #52]	; (8007f18 <USBH_LL_Init+0x74>)
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007ee6:	4b0c      	ldr	r3, [pc, #48]	; (8007f18 <USBH_LL_Init+0x74>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007eec:	480a      	ldr	r0, [pc, #40]	; (8007f18 <USBH_LL_Init+0x74>)
 8007eee:	f7f9 fade 	bl	80014ae <HAL_HCD_Init>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007ef8:	f7f8 fd36 	bl	8000968 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007efc:	4806      	ldr	r0, [pc, #24]	; (8007f18 <USBH_LL_Init+0x74>)
 8007efe:	f7f9 fec2 	bl	8001c86 <HAL_HCD_GetCurrentFrame>
 8007f02:	4603      	mov	r3, r0
 8007f04:	4619      	mov	r1, r3
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f7fe ff5e 	bl	8006dc8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	200005b4 	.word	0x200005b4

08007f1c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f24:	2300      	movs	r3, #0
 8007f26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7f9 fe31 	bl	8001b9a <HAL_HCD_Start>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 f95c 	bl	80081fc <USBH_Get_USB_Status>
 8007f44:	4603      	mov	r3, r0
 8007f46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f48:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b084      	sub	sp, #16
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7f9 fe39 	bl	8001be0 <HAL_HCD_Stop>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f72:	7bfb      	ldrb	r3, [r7, #15]
 8007f74:	4618      	mov	r0, r3
 8007f76:	f000 f941 	bl	80081fc <USBH_Get_USB_Status>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007f90:	2301      	movs	r3, #1
 8007f92:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7f9 fe81 	bl	8001ca2 <HAL_HCD_GetCurrentSpeed>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d00c      	beq.n	8007fc0 <USBH_LL_GetSpeed+0x38>
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d80d      	bhi.n	8007fc6 <USBH_LL_GetSpeed+0x3e>
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d002      	beq.n	8007fb4 <USBH_LL_GetSpeed+0x2c>
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d003      	beq.n	8007fba <USBH_LL_GetSpeed+0x32>
 8007fb2:	e008      	b.n	8007fc6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb8:	e008      	b.n	8007fcc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	73fb      	strb	r3, [r7, #15]
    break;
 8007fbe:	e005      	b.n	8007fcc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc4:	e002      	b.n	8007fcc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	73fb      	strb	r3, [r7, #15]
    break;
 8007fca:	bf00      	nop
  }
  return  speed;
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b084      	sub	sp, #16
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7f9 fe14 	bl	8001c1a <HAL_HCD_ResetPort>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 f8ff 	bl	80081fc <USBH_Get_USB_Status>
 8007ffe:	4603      	mov	r3, r0
 8008000:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008002:	7bbb      	ldrb	r3, [r7, #14]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	460b      	mov	r3, r1
 8008016:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800801e:	78fa      	ldrb	r2, [r7, #3]
 8008020:	4611      	mov	r1, r2
 8008022:	4618      	mov	r0, r3
 8008024:	f7f9 fe1b 	bl	8001c5e <HAL_HCD_HC_GetXferCount>
 8008028:	4603      	mov	r3, r0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008032:	b590      	push	{r4, r7, lr}
 8008034:	b089      	sub	sp, #36	; 0x24
 8008036:	af04      	add	r7, sp, #16
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	4608      	mov	r0, r1
 800803c:	4611      	mov	r1, r2
 800803e:	461a      	mov	r2, r3
 8008040:	4603      	mov	r3, r0
 8008042:	70fb      	strb	r3, [r7, #3]
 8008044:	460b      	mov	r3, r1
 8008046:	70bb      	strb	r3, [r7, #2]
 8008048:	4613      	mov	r3, r2
 800804a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800804c:	2300      	movs	r3, #0
 800804e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800805a:	787c      	ldrb	r4, [r7, #1]
 800805c:	78ba      	ldrb	r2, [r7, #2]
 800805e:	78f9      	ldrb	r1, [r7, #3]
 8008060:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008062:	9302      	str	r3, [sp, #8]
 8008064:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008068:	9301      	str	r3, [sp, #4]
 800806a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	4623      	mov	r3, r4
 8008072:	f7f9 fa7e 	bl	8001572 <HAL_HCD_HC_Init>
 8008076:	4603      	mov	r3, r0
 8008078:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800807a:	7bfb      	ldrb	r3, [r7, #15]
 800807c:	4618      	mov	r0, r3
 800807e:	f000 f8bd 	bl	80081fc <USBH_Get_USB_Status>
 8008082:	4603      	mov	r3, r0
 8008084:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008086:	7bbb      	ldrb	r3, [r7, #14]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	bd90      	pop	{r4, r7, pc}

08008090 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	460b      	mov	r3, r1
 800809a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080aa:	78fa      	ldrb	r2, [r7, #3]
 80080ac:	4611      	mov	r1, r2
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7f9 faee 	bl	8001690 <HAL_HCD_HC_Halt>
 80080b4:	4603      	mov	r3, r0
 80080b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 f89e 	bl	80081fc <USBH_Get_USB_Status>
 80080c0:	4603      	mov	r3, r0
 80080c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80080ce:	b590      	push	{r4, r7, lr}
 80080d0:	b089      	sub	sp, #36	; 0x24
 80080d2:	af04      	add	r7, sp, #16
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	4608      	mov	r0, r1
 80080d8:	4611      	mov	r1, r2
 80080da:	461a      	mov	r2, r3
 80080dc:	4603      	mov	r3, r0
 80080de:	70fb      	strb	r3, [r7, #3]
 80080e0:	460b      	mov	r3, r1
 80080e2:	70bb      	strb	r3, [r7, #2]
 80080e4:	4613      	mov	r3, r2
 80080e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080e8:	2300      	movs	r3, #0
 80080ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80080f6:	787c      	ldrb	r4, [r7, #1]
 80080f8:	78ba      	ldrb	r2, [r7, #2]
 80080fa:	78f9      	ldrb	r1, [r7, #3]
 80080fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008100:	9303      	str	r3, [sp, #12]
 8008102:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008104:	9302      	str	r3, [sp, #8]
 8008106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008108:	9301      	str	r3, [sp, #4]
 800810a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800810e:	9300      	str	r3, [sp, #0]
 8008110:	4623      	mov	r3, r4
 8008112:	f7f9 fae1 	bl	80016d8 <HAL_HCD_HC_SubmitRequest>
 8008116:	4603      	mov	r3, r0
 8008118:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800811a:	7bfb      	ldrb	r3, [r7, #15]
 800811c:	4618      	mov	r0, r3
 800811e:	f000 f86d 	bl	80081fc <USBH_Get_USB_Status>
 8008122:	4603      	mov	r3, r0
 8008124:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008126:	7bbb      	ldrb	r3, [r7, #14]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3714      	adds	r7, #20
 800812c:	46bd      	mov	sp, r7
 800812e:	bd90      	pop	{r4, r7, pc}

08008130 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	460b      	mov	r3, r1
 800813a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008142:	78fa      	ldrb	r2, [r7, #3]
 8008144:	4611      	mov	r1, r2
 8008146:	4618      	mov	r0, r3
 8008148:	f7f9 fd75 	bl	8001c36 <HAL_HCD_HC_GetURBState>
 800814c:	4603      	mov	r3, r0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b082      	sub	sp, #8
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
 800815e:	460b      	mov	r3, r1
 8008160:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008168:	2b01      	cmp	r3, #1
 800816a:	d103      	bne.n	8008174 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800816c:	78fb      	ldrb	r3, [r7, #3]
 800816e:	4618      	mov	r0, r3
 8008170:	f000 f870 	bl	8008254 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008174:	20c8      	movs	r0, #200	; 0xc8
 8008176:	f7f8 fe95 	bl	8000ea4 <HAL_Delay>
  return USBH_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	460b      	mov	r3, r1
 800818e:	70fb      	strb	r3, [r7, #3]
 8008190:	4613      	mov	r3, r2
 8008192:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800819a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800819c:	78fb      	ldrb	r3, [r7, #3]
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	212c      	movs	r1, #44	; 0x2c
 80081a2:	fb01 f303 	mul.w	r3, r1, r3
 80081a6:	4413      	add	r3, r2
 80081a8:	333b      	adds	r3, #59	; 0x3b
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d009      	beq.n	80081c4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80081b0:	78fb      	ldrb	r3, [r7, #3]
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	212c      	movs	r1, #44	; 0x2c
 80081b6:	fb01 f303 	mul.w	r3, r1, r3
 80081ba:	4413      	add	r3, r2
 80081bc:	3354      	adds	r3, #84	; 0x54
 80081be:	78ba      	ldrb	r2, [r7, #2]
 80081c0:	701a      	strb	r2, [r3, #0]
 80081c2:	e008      	b.n	80081d6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80081c4:	78fb      	ldrb	r3, [r7, #3]
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	212c      	movs	r1, #44	; 0x2c
 80081ca:	fb01 f303 	mul.w	r3, r1, r3
 80081ce:	4413      	add	r3, r2
 80081d0:	3355      	adds	r3, #85	; 0x55
 80081d2:	78ba      	ldrb	r2, [r7, #2]
 80081d4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f7f8 fe59 	bl	8000ea4 <HAL_Delay>
}
 80081f2:	bf00      	nop
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
	...

080081fc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	4603      	mov	r3, r0
 8008204:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008206:	2300      	movs	r3, #0
 8008208:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800820a:	79fb      	ldrb	r3, [r7, #7]
 800820c:	2b03      	cmp	r3, #3
 800820e:	d817      	bhi.n	8008240 <USBH_Get_USB_Status+0x44>
 8008210:	a201      	add	r2, pc, #4	; (adr r2, 8008218 <USBH_Get_USB_Status+0x1c>)
 8008212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008216:	bf00      	nop
 8008218:	08008229 	.word	0x08008229
 800821c:	0800822f 	.word	0x0800822f
 8008220:	08008235 	.word	0x08008235
 8008224:	0800823b 	.word	0x0800823b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008228:	2300      	movs	r3, #0
 800822a:	73fb      	strb	r3, [r7, #15]
    break;
 800822c:	e00b      	b.n	8008246 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800822e:	2302      	movs	r3, #2
 8008230:	73fb      	strb	r3, [r7, #15]
    break;
 8008232:	e008      	b.n	8008246 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008234:	2301      	movs	r3, #1
 8008236:	73fb      	strb	r3, [r7, #15]
    break;
 8008238:	e005      	b.n	8008246 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800823a:	2302      	movs	r3, #2
 800823c:	73fb      	strb	r3, [r7, #15]
    break;
 800823e:	e002      	b.n	8008246 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008240:	2302      	movs	r3, #2
 8008242:	73fb      	strb	r3, [r7, #15]
    break;
 8008244:	bf00      	nop
  }
  return usb_status;
 8008246:	7bfb      	ldrb	r3, [r7, #15]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	4603      	mov	r3, r0
 800825c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800825e:	79fb      	ldrb	r3, [r7, #7]
 8008260:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008262:	79fb      	ldrb	r3, [r7, #7]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d102      	bne.n	800826e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008268:	2300      	movs	r3, #0
 800826a:	73fb      	strb	r3, [r7, #15]
 800826c:	e001      	b.n	8008272 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800826e:	2301      	movs	r3, #1
 8008270:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008272:	7bfb      	ldrb	r3, [r7, #15]
 8008274:	461a      	mov	r2, r3
 8008276:	2101      	movs	r1, #1
 8008278:	4803      	ldr	r0, [pc, #12]	; (8008288 <MX_DriverVbusFS+0x34>)
 800827a:	f7f9 f8e5 	bl	8001448 <HAL_GPIO_WritePin>
}
 800827e:	bf00      	nop
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	40020800 	.word	0x40020800

0800828c <malloc>:
 800828c:	4b02      	ldr	r3, [pc, #8]	; (8008298 <malloc+0xc>)
 800828e:	4601      	mov	r1, r0
 8008290:	6818      	ldr	r0, [r3, #0]
 8008292:	f000 b82b 	b.w	80082ec <_malloc_r>
 8008296:	bf00      	nop
 8008298:	20000078 	.word	0x20000078

0800829c <free>:
 800829c:	4b02      	ldr	r3, [pc, #8]	; (80082a8 <free+0xc>)
 800829e:	4601      	mov	r1, r0
 80082a0:	6818      	ldr	r0, [r3, #0]
 80082a2:	f000 b8f3 	b.w	800848c <_free_r>
 80082a6:	bf00      	nop
 80082a8:	20000078 	.word	0x20000078

080082ac <sbrk_aligned>:
 80082ac:	b570      	push	{r4, r5, r6, lr}
 80082ae:	4e0e      	ldr	r6, [pc, #56]	; (80082e8 <sbrk_aligned+0x3c>)
 80082b0:	460c      	mov	r4, r1
 80082b2:	6831      	ldr	r1, [r6, #0]
 80082b4:	4605      	mov	r5, r0
 80082b6:	b911      	cbnz	r1, 80082be <sbrk_aligned+0x12>
 80082b8:	f000 f8ac 	bl	8008414 <_sbrk_r>
 80082bc:	6030      	str	r0, [r6, #0]
 80082be:	4621      	mov	r1, r4
 80082c0:	4628      	mov	r0, r5
 80082c2:	f000 f8a7 	bl	8008414 <_sbrk_r>
 80082c6:	1c43      	adds	r3, r0, #1
 80082c8:	d00a      	beq.n	80082e0 <sbrk_aligned+0x34>
 80082ca:	1cc4      	adds	r4, r0, #3
 80082cc:	f024 0403 	bic.w	r4, r4, #3
 80082d0:	42a0      	cmp	r0, r4
 80082d2:	d007      	beq.n	80082e4 <sbrk_aligned+0x38>
 80082d4:	1a21      	subs	r1, r4, r0
 80082d6:	4628      	mov	r0, r5
 80082d8:	f000 f89c 	bl	8008414 <_sbrk_r>
 80082dc:	3001      	adds	r0, #1
 80082de:	d101      	bne.n	80082e4 <sbrk_aligned+0x38>
 80082e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80082e4:	4620      	mov	r0, r4
 80082e6:	bd70      	pop	{r4, r5, r6, pc}
 80082e8:	200008bc 	.word	0x200008bc

080082ec <_malloc_r>:
 80082ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082f0:	1ccd      	adds	r5, r1, #3
 80082f2:	f025 0503 	bic.w	r5, r5, #3
 80082f6:	3508      	adds	r5, #8
 80082f8:	2d0c      	cmp	r5, #12
 80082fa:	bf38      	it	cc
 80082fc:	250c      	movcc	r5, #12
 80082fe:	2d00      	cmp	r5, #0
 8008300:	4607      	mov	r7, r0
 8008302:	db01      	blt.n	8008308 <_malloc_r+0x1c>
 8008304:	42a9      	cmp	r1, r5
 8008306:	d905      	bls.n	8008314 <_malloc_r+0x28>
 8008308:	230c      	movs	r3, #12
 800830a:	603b      	str	r3, [r7, #0]
 800830c:	2600      	movs	r6, #0
 800830e:	4630      	mov	r0, r6
 8008310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008314:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80083e8 <_malloc_r+0xfc>
 8008318:	f000 f868 	bl	80083ec <__malloc_lock>
 800831c:	f8d8 3000 	ldr.w	r3, [r8]
 8008320:	461c      	mov	r4, r3
 8008322:	bb5c      	cbnz	r4, 800837c <_malloc_r+0x90>
 8008324:	4629      	mov	r1, r5
 8008326:	4638      	mov	r0, r7
 8008328:	f7ff ffc0 	bl	80082ac <sbrk_aligned>
 800832c:	1c43      	adds	r3, r0, #1
 800832e:	4604      	mov	r4, r0
 8008330:	d155      	bne.n	80083de <_malloc_r+0xf2>
 8008332:	f8d8 4000 	ldr.w	r4, [r8]
 8008336:	4626      	mov	r6, r4
 8008338:	2e00      	cmp	r6, #0
 800833a:	d145      	bne.n	80083c8 <_malloc_r+0xdc>
 800833c:	2c00      	cmp	r4, #0
 800833e:	d048      	beq.n	80083d2 <_malloc_r+0xe6>
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	4631      	mov	r1, r6
 8008344:	4638      	mov	r0, r7
 8008346:	eb04 0903 	add.w	r9, r4, r3
 800834a:	f000 f863 	bl	8008414 <_sbrk_r>
 800834e:	4581      	cmp	r9, r0
 8008350:	d13f      	bne.n	80083d2 <_malloc_r+0xe6>
 8008352:	6821      	ldr	r1, [r4, #0]
 8008354:	1a6d      	subs	r5, r5, r1
 8008356:	4629      	mov	r1, r5
 8008358:	4638      	mov	r0, r7
 800835a:	f7ff ffa7 	bl	80082ac <sbrk_aligned>
 800835e:	3001      	adds	r0, #1
 8008360:	d037      	beq.n	80083d2 <_malloc_r+0xe6>
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	442b      	add	r3, r5
 8008366:	6023      	str	r3, [r4, #0]
 8008368:	f8d8 3000 	ldr.w	r3, [r8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d038      	beq.n	80083e2 <_malloc_r+0xf6>
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	42a2      	cmp	r2, r4
 8008374:	d12b      	bne.n	80083ce <_malloc_r+0xe2>
 8008376:	2200      	movs	r2, #0
 8008378:	605a      	str	r2, [r3, #4]
 800837a:	e00f      	b.n	800839c <_malloc_r+0xb0>
 800837c:	6822      	ldr	r2, [r4, #0]
 800837e:	1b52      	subs	r2, r2, r5
 8008380:	d41f      	bmi.n	80083c2 <_malloc_r+0xd6>
 8008382:	2a0b      	cmp	r2, #11
 8008384:	d917      	bls.n	80083b6 <_malloc_r+0xca>
 8008386:	1961      	adds	r1, r4, r5
 8008388:	42a3      	cmp	r3, r4
 800838a:	6025      	str	r5, [r4, #0]
 800838c:	bf18      	it	ne
 800838e:	6059      	strne	r1, [r3, #4]
 8008390:	6863      	ldr	r3, [r4, #4]
 8008392:	bf08      	it	eq
 8008394:	f8c8 1000 	streq.w	r1, [r8]
 8008398:	5162      	str	r2, [r4, r5]
 800839a:	604b      	str	r3, [r1, #4]
 800839c:	4638      	mov	r0, r7
 800839e:	f104 060b 	add.w	r6, r4, #11
 80083a2:	f000 f829 	bl	80083f8 <__malloc_unlock>
 80083a6:	f026 0607 	bic.w	r6, r6, #7
 80083aa:	1d23      	adds	r3, r4, #4
 80083ac:	1af2      	subs	r2, r6, r3
 80083ae:	d0ae      	beq.n	800830e <_malloc_r+0x22>
 80083b0:	1b9b      	subs	r3, r3, r6
 80083b2:	50a3      	str	r3, [r4, r2]
 80083b4:	e7ab      	b.n	800830e <_malloc_r+0x22>
 80083b6:	42a3      	cmp	r3, r4
 80083b8:	6862      	ldr	r2, [r4, #4]
 80083ba:	d1dd      	bne.n	8008378 <_malloc_r+0x8c>
 80083bc:	f8c8 2000 	str.w	r2, [r8]
 80083c0:	e7ec      	b.n	800839c <_malloc_r+0xb0>
 80083c2:	4623      	mov	r3, r4
 80083c4:	6864      	ldr	r4, [r4, #4]
 80083c6:	e7ac      	b.n	8008322 <_malloc_r+0x36>
 80083c8:	4634      	mov	r4, r6
 80083ca:	6876      	ldr	r6, [r6, #4]
 80083cc:	e7b4      	b.n	8008338 <_malloc_r+0x4c>
 80083ce:	4613      	mov	r3, r2
 80083d0:	e7cc      	b.n	800836c <_malloc_r+0x80>
 80083d2:	230c      	movs	r3, #12
 80083d4:	603b      	str	r3, [r7, #0]
 80083d6:	4638      	mov	r0, r7
 80083d8:	f000 f80e 	bl	80083f8 <__malloc_unlock>
 80083dc:	e797      	b.n	800830e <_malloc_r+0x22>
 80083de:	6025      	str	r5, [r4, #0]
 80083e0:	e7dc      	b.n	800839c <_malloc_r+0xb0>
 80083e2:	605b      	str	r3, [r3, #4]
 80083e4:	deff      	udf	#255	; 0xff
 80083e6:	bf00      	nop
 80083e8:	200008b8 	.word	0x200008b8

080083ec <__malloc_lock>:
 80083ec:	4801      	ldr	r0, [pc, #4]	; (80083f4 <__malloc_lock+0x8>)
 80083ee:	f000 b84b 	b.w	8008488 <__retarget_lock_acquire_recursive>
 80083f2:	bf00      	nop
 80083f4:	200009fc 	.word	0x200009fc

080083f8 <__malloc_unlock>:
 80083f8:	4801      	ldr	r0, [pc, #4]	; (8008400 <__malloc_unlock+0x8>)
 80083fa:	f000 b846 	b.w	800848a <__retarget_lock_release_recursive>
 80083fe:	bf00      	nop
 8008400:	200009fc 	.word	0x200009fc

08008404 <memset>:
 8008404:	4402      	add	r2, r0
 8008406:	4603      	mov	r3, r0
 8008408:	4293      	cmp	r3, r2
 800840a:	d100      	bne.n	800840e <memset+0xa>
 800840c:	4770      	bx	lr
 800840e:	f803 1b01 	strb.w	r1, [r3], #1
 8008412:	e7f9      	b.n	8008408 <memset+0x4>

08008414 <_sbrk_r>:
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	4d06      	ldr	r5, [pc, #24]	; (8008430 <_sbrk_r+0x1c>)
 8008418:	2300      	movs	r3, #0
 800841a:	4604      	mov	r4, r0
 800841c:	4608      	mov	r0, r1
 800841e:	602b      	str	r3, [r5, #0]
 8008420:	f7f8 fc5c 	bl	8000cdc <_sbrk>
 8008424:	1c43      	adds	r3, r0, #1
 8008426:	d102      	bne.n	800842e <_sbrk_r+0x1a>
 8008428:	682b      	ldr	r3, [r5, #0]
 800842a:	b103      	cbz	r3, 800842e <_sbrk_r+0x1a>
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	bd38      	pop	{r3, r4, r5, pc}
 8008430:	200009f8 	.word	0x200009f8

08008434 <__errno>:
 8008434:	4b01      	ldr	r3, [pc, #4]	; (800843c <__errno+0x8>)
 8008436:	6818      	ldr	r0, [r3, #0]
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	20000078 	.word	0x20000078

08008440 <__libc_init_array>:
 8008440:	b570      	push	{r4, r5, r6, lr}
 8008442:	4d0d      	ldr	r5, [pc, #52]	; (8008478 <__libc_init_array+0x38>)
 8008444:	4c0d      	ldr	r4, [pc, #52]	; (800847c <__libc_init_array+0x3c>)
 8008446:	1b64      	subs	r4, r4, r5
 8008448:	10a4      	asrs	r4, r4, #2
 800844a:	2600      	movs	r6, #0
 800844c:	42a6      	cmp	r6, r4
 800844e:	d109      	bne.n	8008464 <__libc_init_array+0x24>
 8008450:	4d0b      	ldr	r5, [pc, #44]	; (8008480 <__libc_init_array+0x40>)
 8008452:	4c0c      	ldr	r4, [pc, #48]	; (8008484 <__libc_init_array+0x44>)
 8008454:	f000 f866 	bl	8008524 <_init>
 8008458:	1b64      	subs	r4, r4, r5
 800845a:	10a4      	asrs	r4, r4, #2
 800845c:	2600      	movs	r6, #0
 800845e:	42a6      	cmp	r6, r4
 8008460:	d105      	bne.n	800846e <__libc_init_array+0x2e>
 8008462:	bd70      	pop	{r4, r5, r6, pc}
 8008464:	f855 3b04 	ldr.w	r3, [r5], #4
 8008468:	4798      	blx	r3
 800846a:	3601      	adds	r6, #1
 800846c:	e7ee      	b.n	800844c <__libc_init_array+0xc>
 800846e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008472:	4798      	blx	r3
 8008474:	3601      	adds	r6, #1
 8008476:	e7f2      	b.n	800845e <__libc_init_array+0x1e>
 8008478:	08008570 	.word	0x08008570
 800847c:	08008570 	.word	0x08008570
 8008480:	08008570 	.word	0x08008570
 8008484:	08008574 	.word	0x08008574

08008488 <__retarget_lock_acquire_recursive>:
 8008488:	4770      	bx	lr

0800848a <__retarget_lock_release_recursive>:
 800848a:	4770      	bx	lr

0800848c <_free_r>:
 800848c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800848e:	2900      	cmp	r1, #0
 8008490:	d044      	beq.n	800851c <_free_r+0x90>
 8008492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008496:	9001      	str	r0, [sp, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	f1a1 0404 	sub.w	r4, r1, #4
 800849e:	bfb8      	it	lt
 80084a0:	18e4      	addlt	r4, r4, r3
 80084a2:	f7ff ffa3 	bl	80083ec <__malloc_lock>
 80084a6:	4a1e      	ldr	r2, [pc, #120]	; (8008520 <_free_r+0x94>)
 80084a8:	9801      	ldr	r0, [sp, #4]
 80084aa:	6813      	ldr	r3, [r2, #0]
 80084ac:	b933      	cbnz	r3, 80084bc <_free_r+0x30>
 80084ae:	6063      	str	r3, [r4, #4]
 80084b0:	6014      	str	r4, [r2, #0]
 80084b2:	b003      	add	sp, #12
 80084b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084b8:	f7ff bf9e 	b.w	80083f8 <__malloc_unlock>
 80084bc:	42a3      	cmp	r3, r4
 80084be:	d908      	bls.n	80084d2 <_free_r+0x46>
 80084c0:	6825      	ldr	r5, [r4, #0]
 80084c2:	1961      	adds	r1, r4, r5
 80084c4:	428b      	cmp	r3, r1
 80084c6:	bf01      	itttt	eq
 80084c8:	6819      	ldreq	r1, [r3, #0]
 80084ca:	685b      	ldreq	r3, [r3, #4]
 80084cc:	1949      	addeq	r1, r1, r5
 80084ce:	6021      	streq	r1, [r4, #0]
 80084d0:	e7ed      	b.n	80084ae <_free_r+0x22>
 80084d2:	461a      	mov	r2, r3
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	b10b      	cbz	r3, 80084dc <_free_r+0x50>
 80084d8:	42a3      	cmp	r3, r4
 80084da:	d9fa      	bls.n	80084d2 <_free_r+0x46>
 80084dc:	6811      	ldr	r1, [r2, #0]
 80084de:	1855      	adds	r5, r2, r1
 80084e0:	42a5      	cmp	r5, r4
 80084e2:	d10b      	bne.n	80084fc <_free_r+0x70>
 80084e4:	6824      	ldr	r4, [r4, #0]
 80084e6:	4421      	add	r1, r4
 80084e8:	1854      	adds	r4, r2, r1
 80084ea:	42a3      	cmp	r3, r4
 80084ec:	6011      	str	r1, [r2, #0]
 80084ee:	d1e0      	bne.n	80084b2 <_free_r+0x26>
 80084f0:	681c      	ldr	r4, [r3, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	6053      	str	r3, [r2, #4]
 80084f6:	440c      	add	r4, r1
 80084f8:	6014      	str	r4, [r2, #0]
 80084fa:	e7da      	b.n	80084b2 <_free_r+0x26>
 80084fc:	d902      	bls.n	8008504 <_free_r+0x78>
 80084fe:	230c      	movs	r3, #12
 8008500:	6003      	str	r3, [r0, #0]
 8008502:	e7d6      	b.n	80084b2 <_free_r+0x26>
 8008504:	6825      	ldr	r5, [r4, #0]
 8008506:	1961      	adds	r1, r4, r5
 8008508:	428b      	cmp	r3, r1
 800850a:	bf04      	itt	eq
 800850c:	6819      	ldreq	r1, [r3, #0]
 800850e:	685b      	ldreq	r3, [r3, #4]
 8008510:	6063      	str	r3, [r4, #4]
 8008512:	bf04      	itt	eq
 8008514:	1949      	addeq	r1, r1, r5
 8008516:	6021      	streq	r1, [r4, #0]
 8008518:	6054      	str	r4, [r2, #4]
 800851a:	e7ca      	b.n	80084b2 <_free_r+0x26>
 800851c:	b003      	add	sp, #12
 800851e:	bd30      	pop	{r4, r5, pc}
 8008520:	200008b8 	.word	0x200008b8

08008524 <_init>:
 8008524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008526:	bf00      	nop
 8008528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800852a:	bc08      	pop	{r3}
 800852c:	469e      	mov	lr, r3
 800852e:	4770      	bx	lr

08008530 <_fini>:
 8008530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008532:	bf00      	nop
 8008534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008536:	bc08      	pop	{r3}
 8008538:	469e      	mov	lr, r3
 800853a:	4770      	bx	lr
