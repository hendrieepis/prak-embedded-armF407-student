
F4Disc-p06d-SchTimer_Pre-emptive-Tugas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800a57c  0800a57c  0001a57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6a8  0800a6a8  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6a8  0800a6a8  0001a6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6b0  0800a6b0  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6b0  0800a6b0  0001a6b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6b4  0800a6b4  0001a6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800a6b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002015c  2**0
                  CONTENTS
 10 .bss          00001f10  2000015c  2000015c  0002015c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000206c  2000206c  0002015c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a907  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004698  00000000  00000000  0003aad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001928  00000000  00000000  0003f170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000134c  00000000  00000000  00040a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027064  00000000  00000000  00041de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020c88  00000000  00000000  00068e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d4eee  00000000  00000000  00089ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006fc4  00000000  00000000  0015e9c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  00165984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000015c 	.word	0x2000015c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a564 	.word	0x0800a564

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000160 	.word	0x20000160
 80001cc:	0800a564 	.word	0x0800a564

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <checkBoard>:
 */

#include "checkboard.h"
#include "main.h"
#include "stdio.h"
void checkBoard(void){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
	  HAL_Delay(5000);
 8000572:	f241 3088 	movw	r0, #5000	; 0x1388
 8000576:	f001 f945 	bl	8001804 <HAL_Delay>
	  printf("Cek BarLED, buzzer, USER LED \n\r");
 800057a:	482c      	ldr	r0, [pc, #176]	; (800062c <checkBoard+0xc0>)
 800057c:	f009 f97e 	bl	800987c <iprintf>
	  HAL_Delay(1000);
 8000580:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000584:	f001 f93e 	bl	8001804 <HAL_Delay>
	  for (uint8_t cnt=0;cnt<8;cnt++){
 8000588:	2300      	movs	r3, #0
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	e044      	b.n	8000618 <checkBoard+0xac>

		  HAL_GPIO_TogglePin(BAR0_GPIO_Port, BAR0_Pin);
 800058e:	2140      	movs	r1, #64	; 0x40
 8000590:	4827      	ldr	r0, [pc, #156]	; (8000630 <checkBoard+0xc4>)
 8000592:	f001 fc3a 	bl	8001e0a <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR1_GPIO_Port, BAR1_Pin);
 8000596:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059a:	4826      	ldr	r0, [pc, #152]	; (8000634 <checkBoard+0xc8>)
 800059c:	f001 fc35 	bl	8001e0a <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR2_GPIO_Port, BAR2_Pin);
 80005a0:	2110      	movs	r1, #16
 80005a2:	4823      	ldr	r0, [pc, #140]	; (8000630 <checkBoard+0xc4>)
 80005a4:	f001 fc31 	bl	8001e0a <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR3_GPIO_Port, BAR3_Pin);
 80005a8:	2120      	movs	r1, #32
 80005aa:	4821      	ldr	r0, [pc, #132]	; (8000630 <checkBoard+0xc4>)
 80005ac:	f001 fc2d 	bl	8001e0a <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR4_GPIO_Port, BAR4_Pin);
 80005b0:	2104      	movs	r1, #4
 80005b2:	481f      	ldr	r0, [pc, #124]	; (8000630 <checkBoard+0xc4>)
 80005b4:	f001 fc29 	bl	8001e0a <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR5_GPIO_Port, BAR5_Pin);
 80005b8:	2110      	movs	r1, #16
 80005ba:	481f      	ldr	r0, [pc, #124]	; (8000638 <checkBoard+0xcc>)
 80005bc:	f001 fc25 	bl	8001e0a <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR6_GPIO_Port, BAR6_Pin);
 80005c0:	2120      	movs	r1, #32
 80005c2:	481d      	ldr	r0, [pc, #116]	; (8000638 <checkBoard+0xcc>)
 80005c4:	f001 fc21 	bl	8001e0a <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR7_GPIO_Port, BAR7_Pin);
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	481c      	ldr	r0, [pc, #112]	; (800063c <checkBoard+0xd0>)
 80005cc:	f001 fc1d 	bl	8001e0a <HAL_GPIO_TogglePin>

		  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80005d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d4:	4817      	ldr	r0, [pc, #92]	; (8000634 <checkBoard+0xc8>)
 80005d6:	f001 fc18 	bl	8001e0a <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80005da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005de:	4817      	ldr	r0, [pc, #92]	; (800063c <checkBoard+0xd0>)
 80005e0:	f001 fc13 	bl	8001e0a <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80005e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e8:	4814      	ldr	r0, [pc, #80]	; (800063c <checkBoard+0xd0>)
 80005ea:	f001 fc0e 	bl	8001e0a <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 80005ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f2:	4812      	ldr	r0, [pc, #72]	; (800063c <checkBoard+0xd0>)
 80005f4:	f001 fc09 	bl	8001e0a <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 80005f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005fc:	480f      	ldr	r0, [pc, #60]	; (800063c <checkBoard+0xd0>)
 80005fe:	f001 fc04 	bl	8001e0a <HAL_GPIO_TogglePin>
		  printf("count: %d \n\r",cnt);
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	4619      	mov	r1, r3
 8000606:	480e      	ldr	r0, [pc, #56]	; (8000640 <checkBoard+0xd4>)
 8000608:	f009 f938 	bl	800987c <iprintf>
		  HAL_Delay(100);
 800060c:	2064      	movs	r0, #100	; 0x64
 800060e:	f001 f8f9 	bl	8001804 <HAL_Delay>
	  for (uint8_t cnt=0;cnt<8;cnt++){
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	3301      	adds	r3, #1
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	2b07      	cmp	r3, #7
 800061c:	d9b7      	bls.n	800058e <checkBoard+0x22>
	  }

	  printf("Cek Button \n\r");
 800061e:	4809      	ldr	r0, [pc, #36]	; (8000644 <checkBoard+0xd8>)
 8000620:	f009 f92c 	bl	800987c <iprintf>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	0800a57c 	.word	0x0800a57c
 8000630:	40021000 	.word	0x40021000
 8000634:	40020800 	.word	0x40020800
 8000638:	40020400 	.word	0x40020400
 800063c:	40020c00 	.word	0x40020c00
 8000640:	0800a59c 	.word	0x0800a59c
 8000644:	0800a5ac 	.word	0x0800a5ac

08000648 <CounterUpdate>:
	HAL_GPIO_WritePin(BAR5_GPIO_Port,BAR5_Pin,count & (1<<5));
	HAL_GPIO_WritePin(BAR6_GPIO_Port,BAR6_Pin,count & (1<<6));
	HAL_GPIO_WritePin(BAR7_GPIO_Port,BAR7_Pin,count & (1<<7));
	return count;
}
void CounterUpdate(void){
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
	++count;
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <CounterUpdate+0x1c>)
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	3301      	adds	r3, #1
 8000652:	b29a      	uxth	r2, r3
 8000654:	4b03      	ldr	r3, [pc, #12]	; (8000664 <CounterUpdate+0x1c>)
 8000656:	801a      	strh	r2, [r3, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000178 	.word	0x20000178

08000668 <CounterZero>:

void CounterZero(void){
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
	count=0;
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <CounterZero+0x14>)
 800066e:	2200      	movs	r2, #0
 8000670:	801a      	strh	r2, [r3, #0]
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	20000178 	.word	0x20000178

08000680 <CounterGetValue>:

uint8_t CounterGetValue(void){
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
	return (count);
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <CounterGetValue+0x14>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	b2db      	uxtb	r3, r3
}
 800068a:	4618      	mov	r0, r3
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	20000178 	.word	0x20000178

08000698 <_write>:
I2S_HandleTypeDef hi2s3;
SPI_HandleTypeDef hspi1;

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*) ptr, len); return len;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	4619      	mov	r1, r3
 80006aa:	68b8      	ldr	r0, [r7, #8]
 80006ac:	f008 fbcc 	bl	8008e48 <CDC_Transmit_FS>
 80006b0:	687b      	ldr	r3, [r7, #4]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	2230      	movs	r2, #48	; 0x30
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f009 f92b 	bl	8009926 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemClock_Config+0xcc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a27      	ldr	r2, [pc, #156]	; (8000788 <SystemClock_Config+0xcc>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b25      	ldr	r3, [pc, #148]	; (8000788 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemClock_Config+0xd0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a21      	ldr	r2, [pc, #132]	; (800078c <SystemClock_Config+0xd0>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000718:	2301      	movs	r3, #1
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800071c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000722:	2302      	movs	r3, #2
 8000724:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000726:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800072a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800072c:	2308      	movs	r3, #8
 800072e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000730:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000734:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000736:	2302      	movs	r3, #2
 8000738:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800073a:	2307      	movs	r3, #7
 800073c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	4618      	mov	r0, r3
 8000744:	f003 fbde 	bl	8003f04 <HAL_RCC_OscConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800074e:	f000 f9fd 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	230f      	movs	r3, #15
 8000754:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2302      	movs	r3, #2
 8000758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800075e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000762:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000768:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	2105      	movs	r1, #5
 8000770:	4618      	mov	r0, r3
 8000772:	f003 fe3f 	bl	80043f4 <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800077c:	f000 f9e6 	bl	8000b4c <Error_Handler>
  }
}
 8000780:	bf00      	nop
 8000782:	3750      	adds	r7, #80	; 0x50
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_I2C1_Init+0x50>)
 8000796:	4a13      	ldr	r2, [pc, #76]	; (80007e4 <MX_I2C1_Init+0x54>)
 8000798:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_I2C1_Init+0x50>)
 800079c:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <MX_I2C1_Init+0x58>)
 800079e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_I2C1_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_I2C1_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_I2C1_Init+0x50>)
 80007ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_I2C1_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_I2C1_Init+0x50>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <MX_I2C1_Init+0x50>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_I2C1_Init+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_I2C1_Init+0x50>)
 80007ce:	f001 fb37 	bl	8001e40 <HAL_I2C_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007d8:	f000 f9b8 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000017c 	.word	0x2000017c
 80007e4:	40005400 	.word	0x40005400
 80007e8:	000186a0 	.word	0x000186a0

080007ec <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2S3_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007f0:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_I2S3_Init+0x54>)
 80007f2:	4a14      	ldr	r2, [pc, #80]	; (8000844 <MX_I2S3_Init+0x58>)
 80007f4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_I2S3_Init+0x54>)
 80007f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_I2S3_Init+0x54>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_I2S3_Init+0x54>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <MX_I2S3_Init+0x54>)
 800080c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000810:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_I2S3_Init+0x54>)
 8000814:	4a0c      	ldr	r2, [pc, #48]	; (8000848 <MX_I2S3_Init+0x5c>)
 8000816:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_I2S3_Init+0x54>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_I2S3_Init+0x54>)
 8000820:	2200      	movs	r2, #0
 8000822:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_I2S3_Init+0x54>)
 8000826:	2200      	movs	r2, #0
 8000828:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_I2S3_Init+0x54>)
 800082c:	f001 fc4c 	bl	80020c8 <HAL_I2S_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000836:	f000 f989 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200001d0 	.word	0x200001d0
 8000844:	40003c00 	.word	0x40003c00
 8000848:	00017700 	.word	0x00017700

0800084c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_SPI1_Init+0x64>)
 8000852:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <MX_SPI1_Init+0x68>)
 8000854:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_SPI1_Init+0x64>)
 8000858:	f44f 7282 	mov.w	r2, #260	; 0x104
 800085c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_SPI1_Init+0x64>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_SPI1_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_SPI1_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_SPI1_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_SPI1_Init+0x64>)
 8000878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_SPI1_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_SPI1_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_SPI1_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_SPI1_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_SPI1_Init+0x64>)
 8000898:	220a      	movs	r2, #10
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_SPI1_Init+0x64>)
 800089e:	f004 f8f5 	bl	8004a8c <HAL_SPI_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008a8:	f000 f950 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000218 	.word	0x20000218
 80008b4:	40013000 	.word	0x40013000

080008b8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	; 0x30
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
 80008d2:	4b98      	ldr	r3, [pc, #608]	; (8000b34 <MX_GPIO_Init+0x27c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a97      	ldr	r2, [pc, #604]	; (8000b34 <MX_GPIO_Init+0x27c>)
 80008d8:	f043 0310 	orr.w	r3, r3, #16
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b95      	ldr	r3, [pc, #596]	; (8000b34 <MX_GPIO_Init+0x27c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0310 	and.w	r3, r3, #16
 80008e6:	61bb      	str	r3, [r7, #24]
 80008e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	4b91      	ldr	r3, [pc, #580]	; (8000b34 <MX_GPIO_Init+0x27c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a90      	ldr	r2, [pc, #576]	; (8000b34 <MX_GPIO_Init+0x27c>)
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b8e      	ldr	r3, [pc, #568]	; (8000b34 <MX_GPIO_Init+0x27c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b8a      	ldr	r3, [pc, #552]	; (8000b34 <MX_GPIO_Init+0x27c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a89      	ldr	r2, [pc, #548]	; (8000b34 <MX_GPIO_Init+0x27c>)
 8000910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b87      	ldr	r3, [pc, #540]	; (8000b34 <MX_GPIO_Init+0x27c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b83      	ldr	r3, [pc, #524]	; (8000b34 <MX_GPIO_Init+0x27c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a82      	ldr	r2, [pc, #520]	; (8000b34 <MX_GPIO_Init+0x27c>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b80      	ldr	r3, [pc, #512]	; (8000b34 <MX_GPIO_Init+0x27c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	4b7c      	ldr	r3, [pc, #496]	; (8000b34 <MX_GPIO_Init+0x27c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a7b      	ldr	r2, [pc, #492]	; (8000b34 <MX_GPIO_Init+0x27c>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b79      	ldr	r3, [pc, #484]	; (8000b34 <MX_GPIO_Init+0x27c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b75      	ldr	r3, [pc, #468]	; (8000b34 <MX_GPIO_Init+0x27c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a74      	ldr	r2, [pc, #464]	; (8000b34 <MX_GPIO_Init+0x27c>)
 8000964:	f043 0308 	orr.w	r3, r3, #8
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b72      	ldr	r3, [pc, #456]	; (8000b34 <MX_GPIO_Init+0x27c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0308 	and.w	r3, r3, #8
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BAR4_Pin|CS_I2C_SPI_Pin|BAR2_Pin|BAR3_Pin
 8000976:	2200      	movs	r2, #0
 8000978:	217c      	movs	r1, #124	; 0x7c
 800097a:	486f      	ldr	r0, [pc, #444]	; (8000b38 <MX_GPIO_Init+0x280>)
 800097c:	f001 fa2c 	bl	8001dd8 <HAL_GPIO_WritePin>
                          |BAR0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BAR1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8000986:	486d      	ldr	r0, [pc, #436]	; (8000b3c <MX_GPIO_Init+0x284>)
 8000988:	f001 fa26 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	2101      	movs	r1, #1
 8000990:	486a      	ldr	r0, [pc, #424]	; (8000b3c <MX_GPIO_Init+0x284>)
 8000992:	f001 fa21 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000996:	2200      	movs	r2, #0
 8000998:	f24f 0190 	movw	r1, #61584	; 0xf090
 800099c:	4868      	ldr	r0, [pc, #416]	; (8000b40 <MX_GPIO_Init+0x288>)
 800099e:	f001 fa1b 	bl	8001dd8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin|BAR7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BAR5_Pin|BAR6_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2130      	movs	r1, #48	; 0x30
 80009a6:	4867      	ldr	r0, [pc, #412]	; (8000b44 <MX_GPIO_Init+0x28c>)
 80009a8:	f001 fa16 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BAR4_Pin CS_I2C_SPI_Pin BAR2_Pin BAR3_Pin
                           BAR0_Pin */
  GPIO_InitStruct.Pin = BAR4_Pin|CS_I2C_SPI_Pin|BAR2_Pin|BAR3_Pin
 80009ac:	237c      	movs	r3, #124	; 0x7c
 80009ae:	61fb      	str	r3, [r7, #28]
                          |BAR0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	485d      	ldr	r0, [pc, #372]	; (8000b38 <MX_GPIO_Init+0x280>)
 80009c4:	f001 f854 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : BAR1_Pin OTG_FS_PowerSwitchOn_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = BAR1_Pin|OTG_FS_PowerSwitchOn_Pin|BUZZER_Pin;
 80009c8:	f642 0301 	movw	r3, #10241	; 0x2801
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4856      	ldr	r0, [pc, #344]	; (8000b3c <MX_GPIO_Init+0x284>)
 80009e2:	f001 f845 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009e6:	2308      	movs	r3, #8
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009f6:	2305      	movs	r3, #5
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	484e      	ldr	r0, [pc, #312]	; (8000b3c <MX_GPIO_Init+0x284>)
 8000a02:	f001 f835 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a06:	2301      	movs	r3, #1
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a0a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	484b      	ldr	r0, [pc, #300]	; (8000b48 <MX_GPIO_Init+0x290>)
 8000a1c:	f001 f828 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_UP_Pin BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_RIGHT_Pin;
 8000a20:	2330      	movs	r3, #48	; 0x30
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4842      	ldr	r0, [pc, #264]	; (8000b3c <MX_GPIO_Init+0x284>)
 8000a34:	f001 f81c 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_DN_Pin BTN_LEFT_Pin SW3_Pin SW4_Pin */
  GPIO_InitStruct.Pin = BTN_DN_Pin|BTN_LEFT_Pin|SW3_Pin|SW4_Pin;
 8000a38:	f641 0303 	movw	r3, #6147	; 0x1803
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	483d      	ldr	r0, [pc, #244]	; (8000b44 <MX_GPIO_Init+0x28c>)
 8000a4e:	f001 f80f 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a52:	2304      	movs	r3, #4
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4837      	ldr	r0, [pc, #220]	; (8000b44 <MX_GPIO_Init+0x28c>)
 8000a66:	f001 f803 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_OK_Pin BTN_CANCEL_Pin */
  GPIO_InitStruct.Pin = BTN_OK_Pin|BTN_CANCEL_Pin;
 8000a6a:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	482e      	ldr	r0, [pc, #184]	; (8000b38 <MX_GPIO_Init+0x280>)
 8000a80:	f000 fff6 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a96:	2305      	movs	r3, #5
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4828      	ldr	r0, [pc, #160]	; (8000b44 <MX_GPIO_Init+0x28c>)
 8000aa2:	f000 ffe5 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin SW1_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|SW1_Pin;
 8000aa6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4821      	ldr	r0, [pc, #132]	; (8000b40 <MX_GPIO_Init+0x288>)
 8000abc:	f000 ffd8 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin BAR7_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ac0:	f24f 0390 	movw	r3, #61584	; 0xf090
 8000ac4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin|BAR7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4819      	ldr	r0, [pc, #100]	; (8000b40 <MX_GPIO_Init+0x288>)
 8000ada:	f000 ffc9 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ade:	2320      	movs	r3, #32
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	4813      	ldr	r0, [pc, #76]	; (8000b40 <MX_GPIO_Init+0x288>)
 8000af2:	f000 ffbd 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : BAR5_Pin BAR6_Pin */
  GPIO_InitStruct.Pin = BAR5_Pin|BAR6_Pin;
 8000af6:	2330      	movs	r3, #48	; 0x30
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <MX_GPIO_Init+0x28c>)
 8000b0e:	f000 ffaf 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b12:	2302      	movs	r3, #2
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b16:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	4619      	mov	r1, r3
 8000b26:	4804      	ldr	r0, [pc, #16]	; (8000b38 <MX_GPIO_Init+0x280>)
 8000b28:	f000 ffa2 	bl	8001a70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2c:	bf00      	nop
 8000b2e:	3730      	adds	r7, #48	; 0x30
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40020800 	.word	0x40020800
 8000b40:	40020c00 	.word	0x40020c00
 8000b44:	40020400 	.word	0x40020400
 8000b48:	40020000 	.word	0x40020000

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <Error_Handler+0x8>
	...

08000b58 <main>:
#include "seos.h"
#include "checkboard.h"
#include "task.h"

int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0

	HAL_Init();
 8000b5c:	f000 fde0 	bl	8001720 <HAL_Init>
	SystemClock_Config();
 8000b60:	f7ff fdac 	bl	80006bc <SystemClock_Config>
	MX_GPIO_Init();
 8000b64:	f7ff fea8 	bl	80008b8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000b68:	f7ff fe12 	bl	8000790 <MX_I2C1_Init>
	MX_I2S3_Init();
 8000b6c:	f7ff fe3e 	bl	80007ec <MX_I2S3_Init>
	MX_SPI1_Init();
 8000b70:	f7ff fe6c 	bl	800084c <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8000b74:	f008 f8aa 	bl	8008ccc <MX_USB_DEVICE_Init>
	checkBoard();
 8000b78:	f7ff fcf8 	bl	800056c <checkBoard>
    hSCH_init(1);
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f000 f93f 	bl	8000e00 <hSCH_init>
    hSCH_Add_Task(task1_update, 0, 1000,0);   //object counting
 8000b82:	2300      	movs	r3, #0
 8000b84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b88:	2100      	movs	r1, #0
 8000b8a:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <main+0x68>)
 8000b8c:	f000 f94e 	bl	8000e2c <hSCH_Add_Task>
    hSCH_Add_Task(task2_update, 0, 100,0); //task 2 on 100ms off 5000ms
 8000b90:	2300      	movs	r3, #0
 8000b92:	2264      	movs	r2, #100	; 0x64
 8000b94:	2100      	movs	r1, #0
 8000b96:	480b      	ldr	r0, [pc, #44]	; (8000bc4 <main+0x6c>)
 8000b98:	f000 f948 	bl	8000e2c <hSCH_Add_Task>
    hSCH_Add_Task(task3_update, 0, 2,0); // Task 3 object counting dengan reset dan timeout
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <main+0x70>)
 8000ba4:	f000 f942 	bl	8000e2c <hSCH_Add_Task>
    hSCH_Add_Task(task4_update, 0, 1,0); //  tombol userLED ditekan-> LED on 100ms off 3000ms
 8000ba8:	2300      	movs	r3, #0
 8000baa:	2201      	movs	r2, #1
 8000bac:	2100      	movs	r1, #0
 8000bae:	4807      	ldr	r0, [pc, #28]	; (8000bcc <main+0x74>)
 8000bb0:	f000 f93c 	bl	8000e2c <hSCH_Add_Task>

    /* Start the scheduler */
    hSCH_Start();
 8000bb4:	f000 f930 	bl	8000e18 <hSCH_Start>
    while (1)
    {
        hSCH_Dispatch_Tasks();
 8000bb8:	f000 f99c 	bl	8000ef4 <hSCH_Dispatch_Tasks>
 8000bbc:	e7fc      	b.n	8000bb8 <main+0x60>
 8000bbe:	bf00      	nop
 8000bc0:	0800158d 	.word	0x0800158d
 8000bc4:	080015a5 	.word	0x080015a5
 8000bc8:	08001625 	.word	0x08001625
 8000bcc:	08001669 	.word	0x08001669

08000bd0 <sensorDetectedTimeout>:
		detectedFLag=1;
	}
	return detectedFLag;
}

uint8_t sensorDetectedTimeout(void){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
	static unsigned char debounce=0xFF;
	unsigned char detectedFLag=0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	71fb      	strb	r3, [r7, #7]

	static uint32_t  Timeout_loop=0;
	uint32_t  Timeout_value=2000;
 8000bda:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bde:	603b      	str	r3, [r7, #0]

	if(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_RESET){
 8000be0:	2102      	movs	r1, #2
 8000be2:	4823      	ldr	r0, [pc, #140]	; (8000c70 <sensorDetectedTimeout+0xa0>)
 8000be4:	f001 f8e0 	bl	8001da8 <HAL_GPIO_ReadPin>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d122      	bne.n	8000c34 <sensorDetectedTimeout+0x64>
		if ((Timeout_loop++<=Timeout_value))
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <sensorDetectedTimeout+0xa4>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	1c5a      	adds	r2, r3, #1
 8000bf4:	491f      	ldr	r1, [pc, #124]	; (8000c74 <sensorDetectedTimeout+0xa4>)
 8000bf6:	600a      	str	r2, [r1, #0]
 8000bf8:	683a      	ldr	r2, [r7, #0]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d306      	bcc.n	8000c0c <sensorDetectedTimeout+0x3c>
			debounce=(debounce<<1);
 8000bfe:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <sensorDetectedTimeout+0xa8>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <sensorDetectedTimeout+0xa8>)
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	e020      	b.n	8000c4e <sensorDetectedTimeout+0x7e>
		else {
			printf("Err:001-btn cnt error  \n\r");
 8000c0c:	481b      	ldr	r0, [pc, #108]	; (8000c7c <sensorDetectedTimeout+0xac>)
 8000c0e:	f008 fe35 	bl	800987c <iprintf>
			if ((Timeout_value%200)==0) {
 8000c12:	683a      	ldr	r2, [r7, #0]
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <sensorDetectedTimeout+0xb0>)
 8000c16:	fba3 1302 	umull	r1, r3, r3, r2
 8000c1a:	099b      	lsrs	r3, r3, #6
 8000c1c:	21c8      	movs	r1, #200	; 0xc8
 8000c1e:	fb01 f303 	mul.w	r3, r1, r3
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d112      	bne.n	8000c4e <sensorDetectedTimeout+0x7e>
				HAL_GPIO_TogglePin(BUZZER_GPIO_Port,BUZZER_Pin);
 8000c28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c2c:	4815      	ldr	r0, [pc, #84]	; (8000c84 <sensorDetectedTimeout+0xb4>)
 8000c2e:	f001 f8ec 	bl	8001e0a <HAL_GPIO_TogglePin>
 8000c32:	e00c      	b.n	8000c4e <sensorDetectedTimeout+0x7e>
			}
		}

	} else {
		debounce= (debounce<<1)|1;
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <sensorDetectedTimeout+0xa8>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	b25b      	sxtb	r3, r3
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	b25b      	sxtb	r3, r3
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <sensorDetectedTimeout+0xa8>)
 8000c46:	701a      	strb	r2, [r3, #0]
		Timeout_loop=0;
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <sensorDetectedTimeout+0xa4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]

	}
	if (debounce==0x03) {
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <sensorDetectedTimeout+0xa8>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b03      	cmp	r3, #3
 8000c54:	d107      	bne.n	8000c66 <sensorDetectedTimeout+0x96>
		detectedFLag=1;
 8000c56:	2301      	movs	r3, #1
 8000c58:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port,BUZZER_Pin,GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c60:	4808      	ldr	r0, [pc, #32]	; (8000c84 <sensorDetectedTimeout+0xb4>)
 8000c62:	f001 f8b9 	bl	8001dd8 <HAL_GPIO_WritePin>
	}
	return detectedFLag;
 8000c66:	79fb      	ldrb	r3, [r7, #7]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40020400 	.word	0x40020400
 8000c74:	20000270 	.word	0x20000270
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	0800a5bc 	.word	0x0800a5bc
 8000c80:	51eb851f 	.word	0x51eb851f
 8000c84:	40020800 	.word	0x40020800

08000c88 <resetDetectedTimeout>:
	}
	return detectedFLag;
}


uint8_t resetDetectedTimeout(void){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
	static unsigned char debounce=0xFF;
	unsigned char detectedFLag=0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	71fb      	strb	r3, [r7, #7]

	static uint32_t  Timeout_loop=0;
	uint32_t  Timeout_value=2000;
 8000c92:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c96:	603b      	str	r3, [r7, #0]

	if(HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port,BTN_RIGHT_Pin)== GPIO_PIN_RESET){
 8000c98:	2120      	movs	r1, #32
 8000c9a:	4823      	ldr	r0, [pc, #140]	; (8000d28 <resetDetectedTimeout+0xa0>)
 8000c9c:	f001 f884 	bl	8001da8 <HAL_GPIO_ReadPin>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d122      	bne.n	8000cec <resetDetectedTimeout+0x64>
		if ((Timeout_loop++<=Timeout_value))
 8000ca6:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <resetDetectedTimeout+0xa4>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	1c5a      	adds	r2, r3, #1
 8000cac:	491f      	ldr	r1, [pc, #124]	; (8000d2c <resetDetectedTimeout+0xa4>)
 8000cae:	600a      	str	r2, [r1, #0]
 8000cb0:	683a      	ldr	r2, [r7, #0]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d306      	bcc.n	8000cc4 <resetDetectedTimeout+0x3c>
			debounce=(debounce<<1);
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	; (8000d30 <resetDetectedTimeout+0xa8>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <resetDetectedTimeout+0xa8>)
 8000cc0:	701a      	strb	r2, [r3, #0]
 8000cc2:	e020      	b.n	8000d06 <resetDetectedTimeout+0x7e>
		else {
			printf("Err:002-btn reset error  \n\r");
 8000cc4:	481b      	ldr	r0, [pc, #108]	; (8000d34 <resetDetectedTimeout+0xac>)
 8000cc6:	f008 fdd9 	bl	800987c <iprintf>
			if ((Timeout_value%50)==0) {
 8000cca:	683a      	ldr	r2, [r7, #0]
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <resetDetectedTimeout+0xb0>)
 8000cce:	fba3 1302 	umull	r1, r3, r3, r2
 8000cd2:	091b      	lsrs	r3, r3, #4
 8000cd4:	2132      	movs	r1, #50	; 0x32
 8000cd6:	fb01 f303 	mul.w	r3, r1, r3
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d112      	bne.n	8000d06 <resetDetectedTimeout+0x7e>
				HAL_GPIO_TogglePin(BUZZER_GPIO_Port,BUZZER_Pin);
 8000ce0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ce4:	4810      	ldr	r0, [pc, #64]	; (8000d28 <resetDetectedTimeout+0xa0>)
 8000ce6:	f001 f890 	bl	8001e0a <HAL_GPIO_TogglePin>
 8000cea:	e00c      	b.n	8000d06 <resetDetectedTimeout+0x7e>
			}
		}

	} else {
		debounce= (debounce<<1)|1;
 8000cec:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <resetDetectedTimeout+0xa8>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	b25b      	sxtb	r3, r3
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	b25b      	sxtb	r3, r3
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <resetDetectedTimeout+0xa8>)
 8000cfe:	701a      	strb	r2, [r3, #0]
		Timeout_loop=0;
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <resetDetectedTimeout+0xa4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
//		HAL_GPIO_WritePin(BUZZER_GPIO_Port,BUZZER_Pin,GPIO_PIN_RESET);
	}
	if (debounce==0x03) {
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <resetDetectedTimeout+0xa8>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b03      	cmp	r3, #3
 8000d0c:	d107      	bne.n	8000d1e <resetDetectedTimeout+0x96>
		detectedFLag=1;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port,BUZZER_Pin,GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <resetDetectedTimeout+0xa0>)
 8000d1a:	f001 f85d 	bl	8001dd8 <HAL_GPIO_WritePin>
	}
	return detectedFLag;
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40020800 	.word	0x40020800
 8000d2c:	20000274 	.word	0x20000274
 8000d30:	20000001 	.word	0x20000001
 8000d34:	0800a5d8 	.word	0x0800a5d8
 8000d38:	51eb851f 	.word	0x51eb851f

08000d3c <HAL_TIM_PeriodElapsedCallback>:
uint8_t Error_code_G;
sTask hSCH_tasks_G[hSCH_MAX_TASKS];



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	if((htim->Instance)==TIM2){
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d4c:	d101      	bne.n	8000d52 <HAL_TIM_PeriodElapsedCallback+0x16>
//		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //debuging LED
		hSCH_Update();
 8000d4e:	f000 f92d 	bl	8000fac <hSCH_Update>
	}
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <MX_TIM2_Init>:


void MX_TIM2_Init(uint32_t periode)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000d7c:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <MX_TIM2_Init+0xa0>)
 8000d7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d82:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 42000-1; // harusnya 16 bit (0-65536)
 8000d84:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <MX_TIM2_Init+0xa0>)
 8000d86:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000d8a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <MX_TIM2_Init+0xa0>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = (periode*2)-1;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	3b01      	subs	r3, #1
 8000d98:	4a18      	ldr	r2, [pc, #96]	; (8000dfc <MX_TIM2_Init+0xa0>)
 8000d9a:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <MX_TIM2_Init+0xa0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <MX_TIM2_Init+0xa0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000da8:	4814      	ldr	r0, [pc, #80]	; (8000dfc <MX_TIM2_Init+0xa0>)
 8000daa:	f003 fef8 	bl	8004b9e <HAL_TIM_Base_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8000db4:	f7ff feca 	bl	8000b4c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dbc:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <MX_TIM2_Init+0xa0>)
 8000dc6:	f004 f8b1 	bl	8004f2c <HAL_TIM_ConfigClockSource>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM2_Init+0x78>
	{
		Error_Handler();
 8000dd0:	f7ff febc 	bl	8000b4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ddc:	f107 0308 	add.w	r3, r7, #8
 8000de0:	4619      	mov	r1, r3
 8000de2:	4806      	ldr	r0, [pc, #24]	; (8000dfc <MX_TIM2_Init+0xa0>)
 8000de4:	f004 facc 	bl	8005380 <HAL_TIMEx_MasterConfigSynchronization>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 8000dee:	f7ff fead 	bl	8000b4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	3720      	adds	r7, #32
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000278 	.word	0x20000278

08000e00 <hSCH_init>:


void hSCH_init(uint32_t periode){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	/* Scheduler in ms */
	MX_TIM2_Init(periode);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ffa7 	bl	8000d5c <MX_TIM2_Init>

	/* USER CODE END 2 */
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <hSCH_Start>:

void hSCH_Start(void){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <hSCH_Start+0x10>)
 8000e1e:	f003 ff0d 	bl	8004c3c <HAL_TIM_Base_Start_IT>
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000278 	.word	0x20000278

08000e2c <hSCH_Add_Task>:


uint8_t hSCH_Add_Task(void (* pFunction)(),uint16_t DELAY,uint16_t PERIOD,uint8_t Co_op)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b087      	sub	sp, #28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	4608      	mov	r0, r1
 8000e36:	4611      	mov	r1, r2
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	817b      	strh	r3, [r7, #10]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	813b      	strh	r3, [r7, #8]
 8000e42:	4613      	mov	r3, r2
 8000e44:	71fb      	strb	r3, [r7, #7]
	uint8_t  Index = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	75fb      	strb	r3, [r7, #23]
	// First find a gap in the array (if there is one)
	while ((hSCH_tasks_G[Index].pTask != 0) && (Index < hSCH_MAX_TASKS))
 8000e4a:	e002      	b.n	8000e52 <hSCH_Add_Task+0x26>
	{
		Index++;
 8000e4c:	7dfb      	ldrb	r3, [r7, #23]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	75fb      	strb	r3, [r7, #23]
	while ((hSCH_tasks_G[Index].pTask != 0) && (Index < hSCH_MAX_TASKS))
 8000e52:	7dfa      	ldrb	r2, [r7, #23]
 8000e54:	4925      	ldr	r1, [pc, #148]	; (8000eec <hSCH_Add_Task+0xc0>)
 8000e56:	4613      	mov	r3, r2
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	4413      	add	r3, r2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	440b      	add	r3, r1
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d002      	beq.n	8000e6c <hSCH_Add_Task+0x40>
 8000e66:	7dfb      	ldrb	r3, [r7, #23]
 8000e68:	2b04      	cmp	r3, #4
 8000e6a:	d9ef      	bls.n	8000e4c <hSCH_Add_Task+0x20>
	}
	// Have we reached the end of the list?
	if (Index == hSCH_MAX_TASKS)
 8000e6c:	7dfb      	ldrb	r3, [r7, #23]
 8000e6e:	2b05      	cmp	r3, #5
 8000e70:	d104      	bne.n	8000e7c <hSCH_Add_Task+0x50>
	{
		// Task list is full
		//
		// Set the global error variable
		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 8000e72:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <hSCH_Add_Task+0xc4>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	701a      	strb	r2, [r3, #0]
		// Also return an error code
		return hSCH_MAX_TASKS;
 8000e78:	2305      	movs	r3, #5
 8000e7a:	e031      	b.n	8000ee0 <hSCH_Add_Task+0xb4>
	}
	// If we�re here, there is a space in the task array
	hSCH_tasks_G[Index].pTask = pFunction;
 8000e7c:	7dfa      	ldrb	r2, [r7, #23]
 8000e7e:	491b      	ldr	r1, [pc, #108]	; (8000eec <hSCH_Add_Task+0xc0>)
 8000e80:	4613      	mov	r3, r2
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	4413      	add	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	440b      	add	r3, r1
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	601a      	str	r2, [r3, #0]
	hSCH_tasks_G[Index].Delay = DELAY;
 8000e8e:	7dfa      	ldrb	r2, [r7, #23]
 8000e90:	4916      	ldr	r1, [pc, #88]	; (8000eec <hSCH_Add_Task+0xc0>)
 8000e92:	4613      	mov	r3, r2
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	4413      	add	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	897a      	ldrh	r2, [r7, #10]
 8000ea0:	801a      	strh	r2, [r3, #0]
	hSCH_tasks_G[Index].Period = PERIOD;
 8000ea2:	7dfa      	ldrb	r2, [r7, #23]
 8000ea4:	4911      	ldr	r1, [pc, #68]	; (8000eec <hSCH_Add_Task+0xc0>)
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	440b      	add	r3, r1
 8000eb0:	3306      	adds	r3, #6
 8000eb2:	893a      	ldrh	r2, [r7, #8]
 8000eb4:	801a      	strh	r2, [r3, #0]
	hSCH_tasks_G[Index].Co_op = Co_op;
 8000eb6:	7dfa      	ldrb	r2, [r7, #23]
 8000eb8:	490c      	ldr	r1, [pc, #48]	; (8000eec <hSCH_Add_Task+0xc0>)
 8000eba:	4613      	mov	r3, r2
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	4413      	add	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	3309      	adds	r3, #9
 8000ec6:	79fa      	ldrb	r2, [r7, #7]
 8000ec8:	701a      	strb	r2, [r3, #0]
	hSCH_tasks_G[Index].RunMe = 0;
 8000eca:	7dfa      	ldrb	r2, [r7, #23]
 8000ecc:	4907      	ldr	r1, [pc, #28]	; (8000eec <hSCH_Add_Task+0xc0>)
 8000ece:	4613      	mov	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	3308      	adds	r3, #8
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
	return Index; // return position of task (to allow later deletion)
 8000ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	371c      	adds	r7, #28
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	200002c4 	.word	0x200002c4
 8000ef0:	200002c0 	.word	0x200002c0

08000ef4 <hSCH_Dispatch_Tasks>:
void hSCH_Dispatch_Tasks(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
	uint8_t Index;
	// Dispatches (runs) the next task (if one is ready)
	for (Index = 0; Index < hSCH_MAX_TASKS; Index++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	71fb      	strb	r3, [r7, #7]
 8000efe:	e04a      	b.n	8000f96 <hSCH_Dispatch_Tasks+0xa2>
	{
		// Only dispatching co-operative tasks
		if ((hSCH_tasks_G[Index].Co_op) && (hSCH_tasks_G[Index].RunMe > 0))
 8000f00:	79fa      	ldrb	r2, [r7, #7]
 8000f02:	4929      	ldr	r1, [pc, #164]	; (8000fa8 <hSCH_Dispatch_Tasks+0xb4>)
 8000f04:	4613      	mov	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4413      	add	r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	3309      	adds	r3, #9
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d03c      	beq.n	8000f90 <hSCH_Dispatch_Tasks+0x9c>
 8000f16:	79fa      	ldrb	r2, [r7, #7]
 8000f18:	4923      	ldr	r1, [pc, #140]	; (8000fa8 <hSCH_Dispatch_Tasks+0xb4>)
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	4413      	add	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	440b      	add	r3, r1
 8000f24:	3308      	adds	r3, #8
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d031      	beq.n	8000f90 <hSCH_Dispatch_Tasks+0x9c>
		{
			(*hSCH_tasks_G[Index].pTask)(); // Run the task
 8000f2c:	79fa      	ldrb	r2, [r7, #7]
 8000f2e:	491e      	ldr	r1, [pc, #120]	; (8000fa8 <hSCH_Dispatch_Tasks+0xb4>)
 8000f30:	4613      	mov	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4798      	blx	r3
			hSCH_tasks_G[Index].RunMe -= 1; // Reset / reduce RunMe flag
 8000f3e:	79fa      	ldrb	r2, [r7, #7]
 8000f40:	4919      	ldr	r1, [pc, #100]	; (8000fa8 <hSCH_Dispatch_Tasks+0xb4>)
 8000f42:	4613      	mov	r3, r2
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	4413      	add	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	3308      	adds	r3, #8
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	79fa      	ldrb	r2, [r7, #7]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	b2d8      	uxtb	r0, r3
 8000f56:	4914      	ldr	r1, [pc, #80]	; (8000fa8 <hSCH_Dispatch_Tasks+0xb4>)
 8000f58:	4613      	mov	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	4413      	add	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	440b      	add	r3, r1
 8000f62:	3308      	adds	r3, #8
 8000f64:	4602      	mov	r2, r0
 8000f66:	701a      	strb	r2, [r3, #0]
			// Periodic tasks will automatically run again
			// - if this is a �one shot� task, remove it from the array
			if (hSCH_tasks_G[Index].Period == 0)
 8000f68:	79fa      	ldrb	r2, [r7, #7]
 8000f6a:	490f      	ldr	r1, [pc, #60]	; (8000fa8 <hSCH_Dispatch_Tasks+0xb4>)
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	440b      	add	r3, r1
 8000f76:	3306      	adds	r3, #6
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d108      	bne.n	8000f90 <hSCH_Dispatch_Tasks+0x9c>
			{
				// Faster than call to delete task
				hSCH_tasks_G[Index].pTask = 0;
 8000f7e:	79fa      	ldrb	r2, [r7, #7]
 8000f80:	4909      	ldr	r1, [pc, #36]	; (8000fa8 <hSCH_Dispatch_Tasks+0xb4>)
 8000f82:	4613      	mov	r3, r2
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4413      	add	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
	for (Index = 0; Index < hSCH_MAX_TASKS; Index++)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	3301      	adds	r3, #1
 8000f94:	71fb      	strb	r3, [r7, #7]
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d9b1      	bls.n	8000f00 <hSCH_Dispatch_Tasks+0xc>
			}
		}
	}
	// Report system status
	hSCH_Report_Status();
 8000f9c:	f000 f8b8 	bl	8001110 <hSCH_Report_Status>
	// The scheduler enters idle mode at this point
	//    sleep_mode();
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200002c4 	.word	0x200002c4

08000fac <hSCH_Update>:
	hSCH_tasks_G[Task_index].RunMe = 0;
	return Return_code; // return status
}

void hSCH_Update(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
	uint8_t Index;
	// NOTE: calculations are in *TICKS* (not milliseconds)
	for (Index = 0; Index < hSCH_MAX_TASKS; Index++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	e09f      	b.n	80010f8 <hSCH_Update+0x14c>
	{
		// Check if there is a task at this location
		if (hSCH_tasks_G[Index].pTask)
 8000fb8:	79fa      	ldrb	r2, [r7, #7]
 8000fba:	4954      	ldr	r1, [pc, #336]	; (800110c <hSCH_Update+0x160>)
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	4413      	add	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 8092 	beq.w	80010f2 <hSCH_Update+0x146>
		{
			if (hSCH_tasks_G[Index].Delay == 0)
 8000fce:	79fa      	ldrb	r2, [r7, #7]
 8000fd0:	494e      	ldr	r1, [pc, #312]	; (800110c <hSCH_Update+0x160>)
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	3304      	adds	r3, #4
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d171      	bne.n	80010c8 <hSCH_Update+0x11c>
			{
				// The task is due to run
				//
				if (hSCH_tasks_G[Index].Co_op)
 8000fe4:	79fa      	ldrb	r2, [r7, #7]
 8000fe6:	4949      	ldr	r1, [pc, #292]	; (800110c <hSCH_Update+0x160>)
 8000fe8:	4613      	mov	r3, r2
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	4413      	add	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	3309      	adds	r3, #9
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d015      	beq.n	8001026 <hSCH_Update+0x7a>
				{
					// If it is a co-operative task, increment the RunMe flag
					hSCH_tasks_G[Index].RunMe += 1;
 8000ffa:	79fa      	ldrb	r2, [r7, #7]
 8000ffc:	4943      	ldr	r1, [pc, #268]	; (800110c <hSCH_Update+0x160>)
 8000ffe:	4613      	mov	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4413      	add	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	440b      	add	r3, r1
 8001008:	3308      	adds	r3, #8
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	79fa      	ldrb	r2, [r7, #7]
 800100e:	3301      	adds	r3, #1
 8001010:	b2d8      	uxtb	r0, r3
 8001012:	493e      	ldr	r1, [pc, #248]	; (800110c <hSCH_Update+0x160>)
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	3308      	adds	r3, #8
 8001020:	4602      	mov	r2, r0
 8001022:	701a      	strb	r2, [r3, #0]
 8001024:	e031      	b.n	800108a <hSCH_Update+0xde>
				}
				else
				{
					// If it is a pre-emptive task, run it IMMEDIATELY
					(*hSCH_tasks_G[Index].pTask)(); // Run the task
 8001026:	79fa      	ldrb	r2, [r7, #7]
 8001028:	4938      	ldr	r1, [pc, #224]	; (800110c <hSCH_Update+0x160>)
 800102a:	4613      	mov	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	4413      	add	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	440b      	add	r3, r1
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4798      	blx	r3
					hSCH_tasks_G[Index].RunMe -= 1; // Reset / reduce RunMe flag
 8001038:	79fa      	ldrb	r2, [r7, #7]
 800103a:	4934      	ldr	r1, [pc, #208]	; (800110c <hSCH_Update+0x160>)
 800103c:	4613      	mov	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	440b      	add	r3, r1
 8001046:	3308      	adds	r3, #8
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	79fa      	ldrb	r2, [r7, #7]
 800104c:	3b01      	subs	r3, #1
 800104e:	b2d8      	uxtb	r0, r3
 8001050:	492e      	ldr	r1, [pc, #184]	; (800110c <hSCH_Update+0x160>)
 8001052:	4613      	mov	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	3308      	adds	r3, #8
 800105e:	4602      	mov	r2, r0
 8001060:	701a      	strb	r2, [r3, #0]
					// Periodic tasks will automatically run again
					// - if this is a �one shot� task, remove it from the array
					if (hSCH_tasks_G[Index].Period == 0)
 8001062:	79fa      	ldrb	r2, [r7, #7]
 8001064:	4929      	ldr	r1, [pc, #164]	; (800110c <hSCH_Update+0x160>)
 8001066:	4613      	mov	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	3306      	adds	r3, #6
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d108      	bne.n	800108a <hSCH_Update+0xde>
					{
						hSCH_tasks_G[Index].pTask = 0;
 8001078:	79fa      	ldrb	r2, [r7, #7]
 800107a:	4924      	ldr	r1, [pc, #144]	; (800110c <hSCH_Update+0x160>)
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
					}
				}
				if (hSCH_tasks_G[Index].Period)
 800108a:	79fa      	ldrb	r2, [r7, #7]
 800108c:	491f      	ldr	r1, [pc, #124]	; (800110c <hSCH_Update+0x160>)
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	440b      	add	r3, r1
 8001098:	3306      	adds	r3, #6
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d028      	beq.n	80010f2 <hSCH_Update+0x146>
				{
					// Schedule regular tasks to run again
					hSCH_tasks_G[Index].Delay = hSCH_tasks_G[Index].Period;
 80010a0:	79f9      	ldrb	r1, [r7, #7]
 80010a2:	79fa      	ldrb	r2, [r7, #7]
 80010a4:	4819      	ldr	r0, [pc, #100]	; (800110c <hSCH_Update+0x160>)
 80010a6:	460b      	mov	r3, r1
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	440b      	add	r3, r1
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4403      	add	r3, r0
 80010b0:	3306      	adds	r3, #6
 80010b2:	8818      	ldrh	r0, [r3, #0]
 80010b4:	4915      	ldr	r1, [pc, #84]	; (800110c <hSCH_Update+0x160>)
 80010b6:	4613      	mov	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	440b      	add	r3, r1
 80010c0:	3304      	adds	r3, #4
 80010c2:	4602      	mov	r2, r0
 80010c4:	801a      	strh	r2, [r3, #0]
 80010c6:	e014      	b.n	80010f2 <hSCH_Update+0x146>
				}
			}
			else
			{
				// Not yet ready to run: just decrement the delay
				hSCH_tasks_G[Index].Delay -= 1;
 80010c8:	79fa      	ldrb	r2, [r7, #7]
 80010ca:	4910      	ldr	r1, [pc, #64]	; (800110c <hSCH_Update+0x160>)
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	3304      	adds	r3, #4
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	79fa      	ldrb	r2, [r7, #7]
 80010dc:	3b01      	subs	r3, #1
 80010de:	b298      	uxth	r0, r3
 80010e0:	490a      	ldr	r1, [pc, #40]	; (800110c <hSCH_Update+0x160>)
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	440b      	add	r3, r1
 80010ec:	3304      	adds	r3, #4
 80010ee:	4602      	mov	r2, r0
 80010f0:	801a      	strh	r2, [r3, #0]
	for (Index = 0; Index < hSCH_MAX_TASKS; Index++)
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	3301      	adds	r3, #1
 80010f6:	71fb      	strb	r3, [r7, #7]
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	f67f af5c 	bls.w	8000fb8 <hSCH_Update+0xc>
			}
		}
	}
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200002c4 	.word	0x200002c4

08001110 <hSCH_Report_Status>:


void hSCH_Report_Status(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
			}
		}
	}
#endif

}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <HAL_MspInit+0x4c>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	4a0f      	ldr	r2, [pc, #60]	; (800116c <HAL_MspInit+0x4c>)
 8001130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001134:	6453      	str	r3, [r2, #68]	; 0x44
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <HAL_MspInit+0x4c>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_MspInit+0x4c>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <HAL_MspInit+0x4c>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001150:	6413      	str	r3, [r2, #64]	; 0x40
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_MspInit+0x4c>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800115e:	2007      	movs	r0, #7
 8001160:	f000 fc44 	bl	80019ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40023800 	.word	0x40023800

08001170 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a19      	ldr	r2, [pc, #100]	; (80011f4 <HAL_I2C_MspInit+0x84>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d12c      	bne.n	80011ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <HAL_I2C_MspInit+0x88>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <HAL_I2C_MspInit+0x88>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <HAL_I2C_MspInit+0x88>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80011ae:	f44f 7310 	mov.w	r3, #576	; 0x240
 80011b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b4:	2312      	movs	r3, #18
 80011b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011c0:	2304      	movs	r3, #4
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	480c      	ldr	r0, [pc, #48]	; (80011fc <HAL_I2C_MspInit+0x8c>)
 80011cc:	f000 fc50 	bl	8001a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <HAL_I2C_MspInit+0x88>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <HAL_I2C_MspInit+0x88>)
 80011da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011de:	6413      	str	r3, [r2, #64]	; 0x40
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <HAL_I2C_MspInit+0x88>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011ec:	bf00      	nop
 80011ee:	3728      	adds	r7, #40	; 0x28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40005400 	.word	0x40005400
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020400 	.word	0x40020400

08001200 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08e      	sub	sp, #56	; 0x38
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a31      	ldr	r2, [pc, #196]	; (80012f0 <HAL_I2S_MspInit+0xf0>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d15a      	bne.n	80012e6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001230:	2301      	movs	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001234:	23c0      	movs	r3, #192	; 0xc0
 8001236:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001238:	2302      	movs	r3, #2
 800123a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4618      	mov	r0, r3
 8001242:	f003 fae3 	bl	800480c <HAL_RCCEx_PeriphCLKConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800124c:	f7ff fc7e 	bl	8000b4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <HAL_I2S_MspInit+0xf4>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	4a26      	ldr	r2, [pc, #152]	; (80012f4 <HAL_I2S_MspInit+0xf4>)
 800125a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800125e:	6413      	str	r3, [r2, #64]	; 0x40
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <HAL_I2S_MspInit+0xf4>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <HAL_I2S_MspInit+0xf4>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	4a1f      	ldr	r2, [pc, #124]	; (80012f4 <HAL_I2S_MspInit+0xf4>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6313      	str	r3, [r2, #48]	; 0x30
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <HAL_I2S_MspInit+0xf4>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_I2S_MspInit+0xf4>)
 800128e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001290:	4a18      	ldr	r2, [pc, #96]	; (80012f4 <HAL_I2S_MspInit+0xf4>)
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	6313      	str	r3, [r2, #48]	; 0x30
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <HAL_I2S_MspInit+0xf4>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80012a4:	2310      	movs	r3, #16
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012b4:	2306      	movs	r3, #6
 80012b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012bc:	4619      	mov	r1, r3
 80012be:	480e      	ldr	r0, [pc, #56]	; (80012f8 <HAL_I2S_MspInit+0xf8>)
 80012c0:	f000 fbd6 	bl	8001a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80012c4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012d6:	2306      	movs	r3, #6
 80012d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012de:	4619      	mov	r1, r3
 80012e0:	4806      	ldr	r0, [pc, #24]	; (80012fc <HAL_I2S_MspInit+0xfc>)
 80012e2:	f000 fbc5 	bl	8001a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012e6:	bf00      	nop
 80012e8:	3738      	adds	r7, #56	; 0x38
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40003c00 	.word	0x40003c00
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020000 	.word	0x40020000
 80012fc:	40020800 	.word	0x40020800

08001300 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a19      	ldr	r2, [pc, #100]	; (8001384 <HAL_SPI_MspInit+0x84>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d12b      	bne.n	800137a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <HAL_SPI_MspInit+0x88>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4a17      	ldr	r2, [pc, #92]	; (8001388 <HAL_SPI_MspInit+0x88>)
 800132c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <HAL_SPI_MspInit+0x88>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <HAL_SPI_MspInit+0x88>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a10      	ldr	r2, [pc, #64]	; (8001388 <HAL_SPI_MspInit+0x88>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <HAL_SPI_MspInit+0x88>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800135a:	23e0      	movs	r3, #224	; 0xe0
 800135c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800136a:	2305      	movs	r3, #5
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <HAL_SPI_MspInit+0x8c>)
 8001376:	f000 fb7b 	bl	8001a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800137a:	bf00      	nop
 800137c:	3728      	adds	r7, #40	; 0x28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40013000 	.word	0x40013000
 8001388:	40023800 	.word	0x40023800
 800138c:	40020000 	.word	0x40020000

08001390 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013a0:	d115      	bne.n	80013ce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <HAL_TIM_Base_MspInit+0x48>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <HAL_TIM_Base_MspInit+0x48>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6413      	str	r3, [r2, #64]	; 0x40
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <HAL_TIM_Base_MspInit+0x48>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	201c      	movs	r0, #28
 80013c4:	f000 fb1d 	bl	8001a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013c8:	201c      	movs	r0, #28
 80013ca:	f000 fb36 	bl	8001a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800

080013dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <NMI_Handler+0x4>

080013e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <HardFault_Handler+0x4>

080013e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <MemManage_Handler+0x4>

080013ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <BusFault_Handler+0x4>

080013f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <UsageFault_Handler+0x4>

080013fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001428:	f000 f9cc 	bl	80017c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}

08001430 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <TIM2_IRQHandler+0x10>)
 8001436:	f003 fc71 	bl	8004d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000278 	.word	0x20000278

08001444 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <OTG_FS_IRQHandler+0x10>)
 800144a:	f001 fc2d 	bl	8002ca8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200017f4 	.word	0x200017f4

08001458 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	e00a      	b.n	8001480 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800146a:	f3af 8000 	nop.w
 800146e:	4601      	mov	r1, r0
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	60ba      	str	r2, [r7, #8]
 8001476:	b2ca      	uxtb	r2, r1
 8001478:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	3301      	adds	r3, #1
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	429a      	cmp	r2, r3
 8001486:	dbf0      	blt.n	800146a <_read+0x12>
  }

  return len;
 8001488:	687b      	ldr	r3, [r7, #4]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ba:	605a      	str	r2, [r3, #4]
  return 0;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <_isatty>:

int _isatty(int file)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014d2:	2301      	movs	r3, #1
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
	...

080014fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001504:	4a14      	ldr	r2, [pc, #80]	; (8001558 <_sbrk+0x5c>)
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <_sbrk+0x60>)
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <_sbrk+0x64>)
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <_sbrk+0x68>)
 800151c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	429a      	cmp	r2, r3
 800152a:	d207      	bcs.n	800153c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800152c:	f008 fa4a 	bl	80099c4 <__errno>
 8001530:	4603      	mov	r3, r0
 8001532:	220c      	movs	r2, #12
 8001534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800153a:	e009      	b.n	8001550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <_sbrk+0x64>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	4a05      	ldr	r2, [pc, #20]	; (8001560 <_sbrk+0x64>)
 800154c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800154e:	68fb      	ldr	r3, [r7, #12]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20020000 	.word	0x20020000
 800155c:	00000400 	.word	0x00000400
 8001560:	20000300 	.word	0x20000300
 8001564:	20002070 	.word	0x20002070

08001568 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <SystemInit+0x20>)
 800156e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001572:	4a05      	ldr	r2, [pc, #20]	; (8001588 <SystemInit+0x20>)
 8001574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <task1_update>:
enum state {s_on	, s_off} stateku=s_on;
unsigned int Time_in_state=0;
volatile uint32_t buttonPressTime = 0;

void task1_update(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001590:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <task1_update+0x14>)
 8001596:	f000 fc38 	bl	8001e0a <HAL_GPIO_TogglePin>
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40020c00 	.word	0x40020c00

080015a4 <task2_update>:

void task2_update(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	switch(stateku)
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <task2_update+0x74>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d002      	beq.n	80015b6 <task2_update+0x12>
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d016      	beq.n	80015e2 <task2_update+0x3e>
	        	}

	        	break;
	        }
	}
}
 80015b4:	e02e      	b.n	8001614 <task2_update+0x70>
				LED2ON;
 80015b6:	2201      	movs	r2, #1
 80015b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015bc:	4817      	ldr	r0, [pc, #92]	; (800161c <task2_update+0x78>)
 80015be:	f000 fc0b 	bl	8001dd8 <HAL_GPIO_WritePin>
	        	if (++Time_in_state==LAMA_LED2ON)
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <task2_update+0x7c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	4a15      	ldr	r2, [pc, #84]	; (8001620 <task2_update+0x7c>)
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <task2_update+0x7c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d11c      	bne.n	800160e <task2_update+0x6a>
	        		stateku=s_off;
 80015d4:	4b10      	ldr	r3, [pc, #64]	; (8001618 <task2_update+0x74>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
	        		Time_in_state=0;
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <task2_update+0x7c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
	        	break;
 80015e0:	e015      	b.n	800160e <task2_update+0x6a>
	        	LED2OFF;
 80015e2:	2200      	movs	r2, #0
 80015e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015e8:	480c      	ldr	r0, [pc, #48]	; (800161c <task2_update+0x78>)
 80015ea:	f000 fbf5 	bl	8001dd8 <HAL_GPIO_WritePin>
	        	if (++Time_in_state==LAMA_LED2OFF)
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <task2_update+0x7c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <task2_update+0x7c>)
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <task2_update+0x7c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b32      	cmp	r3, #50	; 0x32
 80015fe:	d108      	bne.n	8001612 <task2_update+0x6e>
	        		stateku=s_on;
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <task2_update+0x74>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
	        		Time_in_state=0;
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <task2_update+0x7c>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
	        	break;
 800160c:	e001      	b.n	8001612 <task2_update+0x6e>
	        	break;
 800160e:	bf00      	nop
 8001610:	e000      	b.n	8001614 <task2_update+0x70>
	        	break;
 8001612:	bf00      	nop
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000304 	.word	0x20000304
 800161c:	40020c00 	.word	0x40020c00
 8001620:	20000308 	.word	0x20000308

08001624 <task3_update>:


void task3_update(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	//dummy running task

	if(sensorDetectedTimeout())
 8001628:	f7ff fad2 	bl	8000bd0 <sensorDetectedTimeout>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d008      	beq.n	8001644 <task3_update+0x20>
	{
		CounterUpdate();
 8001632:	f7ff f809 	bl	8000648 <CounterUpdate>
		printf ("count:%d \n\r",CounterGetValue());
 8001636:	f7ff f823 	bl	8000680 <CounterGetValue>
 800163a:	4603      	mov	r3, r0
 800163c:	4619      	mov	r1, r3
 800163e:	4809      	ldr	r0, [pc, #36]	; (8001664 <task3_update+0x40>)
 8001640:	f008 f91c 	bl	800987c <iprintf>
	}

	if(resetDetectedTimeout())
 8001644:	f7ff fb20 	bl	8000c88 <resetDetectedTimeout>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d008      	beq.n	8001660 <task3_update+0x3c>
	{
		CounterZero();
 800164e:	f7ff f80b 	bl	8000668 <CounterZero>
		printf ("count:%d \n\r",CounterGetValue());
 8001652:	f7ff f815 	bl	8000680 <CounterGetValue>
 8001656:	4603      	mov	r3, r0
 8001658:	4619      	mov	r1, r3
 800165a:	4802      	ldr	r0, [pc, #8]	; (8001664 <task3_update+0x40>)
 800165c:	f008 f90e 	bl	800987c <iprintf>
	}
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	0800a5f4 	.word	0x0800a5f4

08001668 <task4_update>:


void task4_update(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) {
 800166c:	2101      	movs	r1, #1
 800166e:	4813      	ldr	r0, [pc, #76]	; (80016bc <task4_update+0x54>)
 8001670:	f000 fb9a 	bl	8001da8 <HAL_GPIO_ReadPin>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00d      	beq.n	8001696 <task4_update+0x2e>
		printf("tombol ditekan \n\r");
 800167a:	4811      	ldr	r0, [pc, #68]	; (80016c0 <task4_update+0x58>)
 800167c:	f008 f8fe 	bl	800987c <iprintf>
		 HAL_GPIO_WritePin(LD6_GPIO_Port,LD6_Pin,GPIO_PIN_SET);
 8001680:	2201      	movs	r2, #1
 8001682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001686:	480f      	ldr	r0, [pc, #60]	; (80016c4 <task4_update+0x5c>)
 8001688:	f000 fba6 	bl	8001dd8 <HAL_GPIO_WritePin>
		 buttonPressTime = HAL_GetTick();
 800168c:	f000 f8ae 	bl	80017ec <HAL_GetTick>
 8001690:	4603      	mov	r3, r0
 8001692:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <task4_update+0x60>)
 8001694:	6013      	str	r3, [r2, #0]
	}

	if (HAL_GetTick()-buttonPressTime >=3000) {
 8001696:	f000 f8a9 	bl	80017ec <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <task4_update+0x60>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d905      	bls.n	80016b6 <task4_update+0x4e>
		HAL_GPIO_WritePin(LD6_GPIO_Port,LD6_Pin,GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016b0:	4804      	ldr	r0, [pc, #16]	; (80016c4 <task4_update+0x5c>)
 80016b2:	f000 fb91 	bl	8001dd8 <HAL_GPIO_WritePin>
	}
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40020000 	.word	0x40020000
 80016c0:	0800a600 	.word	0x0800a600
 80016c4:	40020c00 	.word	0x40020c00
 80016c8:	2000030c 	.word	0x2000030c

080016cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001704 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016d0:	480d      	ldr	r0, [pc, #52]	; (8001708 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016d2:	490e      	ldr	r1, [pc, #56]	; (800170c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016d4:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d8:	e002      	b.n	80016e0 <LoopCopyDataInit>

080016da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016de:	3304      	adds	r3, #4

080016e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e4:	d3f9      	bcc.n	80016da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e6:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016e8:	4c0b      	ldr	r4, [pc, #44]	; (8001718 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ec:	e001      	b.n	80016f2 <LoopFillZerobss>

080016ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f0:	3204      	adds	r2, #4

080016f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f4:	d3fb      	bcc.n	80016ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016f6:	f7ff ff37 	bl	8001568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016fa:	f008 f969 	bl	80099d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016fe:	f7ff fa2b 	bl	8000b58 <main>
  bx  lr    
 8001702:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001704:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800170c:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8001710:	0800a6b8 	.word	0x0800a6b8
  ldr r2, =_sbss
 8001714:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8001718:	2000206c 	.word	0x2000206c

0800171c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800171c:	e7fe      	b.n	800171c <ADC_IRQHandler>
	...

08001720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001724:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <HAL_Init+0x40>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0d      	ldr	r2, [pc, #52]	; (8001760 <HAL_Init+0x40>)
 800172a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800172e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_Init+0x40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <HAL_Init+0x40>)
 8001736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800173a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a07      	ldr	r2, [pc, #28]	; (8001760 <HAL_Init+0x40>)
 8001742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001748:	2003      	movs	r0, #3
 800174a:	f000 f94f 	bl	80019ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800174e:	2000      	movs	r0, #0
 8001750:	f000 f808 	bl	8001764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001754:	f7ff fce4 	bl	8001120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40023c00 	.word	0x40023c00

08001764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_InitTick+0x54>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_InitTick+0x58>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4619      	mov	r1, r3
 8001776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177a:	fbb3 f3f1 	udiv	r3, r3, r1
 800177e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001782:	4618      	mov	r0, r3
 8001784:	f000 f967 	bl	8001a56 <HAL_SYSTICK_Config>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e00e      	b.n	80017b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b0f      	cmp	r3, #15
 8001796:	d80a      	bhi.n	80017ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001798:	2200      	movs	r2, #0
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017a0:	f000 f92f 	bl	8001a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a4:	4a06      	ldr	r2, [pc, #24]	; (80017c0 <HAL_InitTick+0x5c>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	e000      	b.n	80017b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000004 	.word	0x20000004
 80017bc:	2000000c 	.word	0x2000000c
 80017c0:	20000008 	.word	0x20000008

080017c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_IncTick+0x20>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_IncTick+0x24>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <HAL_IncTick+0x24>)
 80017d6:	6013      	str	r3, [r2, #0]
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	2000000c 	.word	0x2000000c
 80017e8:	20000310 	.word	0x20000310

080017ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return uwTick;
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <HAL_GetTick+0x14>)
 80017f2:	681b      	ldr	r3, [r3, #0]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000310 	.word	0x20000310

08001804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800180c:	f7ff ffee 	bl	80017ec <HAL_GetTick>
 8001810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800181c:	d005      	beq.n	800182a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <HAL_Delay+0x44>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800182a:	bf00      	nop
 800182c:	f7ff ffde 	bl	80017ec <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	429a      	cmp	r2, r3
 800183a:	d8f7      	bhi.n	800182c <HAL_Delay+0x28>
  {
  }
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	2000000c 	.word	0x2000000c

0800184c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001868:	4013      	ands	r3, r2
 800186a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <__NVIC_GetPriorityGrouping+0x18>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	f003 0307 	and.w	r3, r3, #7
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	db0b      	blt.n	80018da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	f003 021f 	and.w	r2, r3, #31
 80018c8:	4907      	ldr	r1, [pc, #28]	; (80018e8 <__NVIC_EnableIRQ+0x38>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	2001      	movs	r0, #1
 80018d2:	fa00 f202 	lsl.w	r2, r0, r2
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000e100 	.word	0xe000e100

080018ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db0a      	blt.n	8001916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	490c      	ldr	r1, [pc, #48]	; (8001938 <__NVIC_SetPriority+0x4c>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	0112      	lsls	r2, r2, #4
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	440b      	add	r3, r1
 8001910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001914:	e00a      	b.n	800192c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4908      	ldr	r1, [pc, #32]	; (800193c <__NVIC_SetPriority+0x50>)
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	3b04      	subs	r3, #4
 8001924:	0112      	lsls	r2, r2, #4
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	440b      	add	r3, r1
 800192a:	761a      	strb	r2, [r3, #24]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000e100 	.word	0xe000e100
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001940:	b480      	push	{r7}
 8001942:	b089      	sub	sp, #36	; 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f1c3 0307 	rsb	r3, r3, #7
 800195a:	2b04      	cmp	r3, #4
 800195c:	bf28      	it	cs
 800195e:	2304      	movcs	r3, #4
 8001960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3304      	adds	r3, #4
 8001966:	2b06      	cmp	r3, #6
 8001968:	d902      	bls.n	8001970 <NVIC_EncodePriority+0x30>
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3b03      	subs	r3, #3
 800196e:	e000      	b.n	8001972 <NVIC_EncodePriority+0x32>
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43da      	mvns	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	401a      	ands	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001988:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	43d9      	mvns	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	4313      	orrs	r3, r2
         );
}
 800199a:	4618      	mov	r0, r3
 800199c:	3724      	adds	r7, #36	; 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b8:	d301      	bcc.n	80019be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00f      	b.n	80019de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <SysTick_Config+0x40>)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c6:	210f      	movs	r1, #15
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019cc:	f7ff ff8e 	bl	80018ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <SysTick_Config+0x40>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d6:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <SysTick_Config+0x40>)
 80019d8:	2207      	movs	r2, #7
 80019da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	e000e010 	.word	0xe000e010

080019ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ff29 	bl	800184c <__NVIC_SetPriorityGrouping>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b086      	sub	sp, #24
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
 8001a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a14:	f7ff ff3e 	bl	8001894 <__NVIC_GetPriorityGrouping>
 8001a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	6978      	ldr	r0, [r7, #20]
 8001a20:	f7ff ff8e 	bl	8001940 <NVIC_EncodePriority>
 8001a24:	4602      	mov	r2, r0
 8001a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff5d 	bl	80018ec <__NVIC_SetPriority>
}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff31 	bl	80018b0 <__NVIC_EnableIRQ>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffa2 	bl	80019a8 <SysTick_Config>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	e16b      	b.n	8001d64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	f040 815a 	bne.w	8001d5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d005      	beq.n	8001ac2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d130      	bne.n	8001b24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	2203      	movs	r2, #3
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af8:	2201      	movs	r2, #1
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f003 0201 	and.w	r2, r3, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d017      	beq.n	8001b60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d123      	bne.n	8001bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	08da      	lsrs	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3208      	adds	r2, #8
 8001b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	220f      	movs	r2, #15
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	08da      	lsrs	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3208      	adds	r2, #8
 8001bae:	69b9      	ldr	r1, [r7, #24]
 8001bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0203 	and.w	r2, r3, #3
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80b4 	beq.w	8001d5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b60      	ldr	r3, [pc, #384]	; (8001d7c <HAL_GPIO_Init+0x30c>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	4a5f      	ldr	r2, [pc, #380]	; (8001d7c <HAL_GPIO_Init+0x30c>)
 8001c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c04:	6453      	str	r3, [r2, #68]	; 0x44
 8001c06:	4b5d      	ldr	r3, [pc, #372]	; (8001d7c <HAL_GPIO_Init+0x30c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c12:	4a5b      	ldr	r2, [pc, #364]	; (8001d80 <HAL_GPIO_Init+0x310>)
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	3302      	adds	r3, #2
 8001c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	220f      	movs	r2, #15
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a52      	ldr	r2, [pc, #328]	; (8001d84 <HAL_GPIO_Init+0x314>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d02b      	beq.n	8001c96 <HAL_GPIO_Init+0x226>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a51      	ldr	r2, [pc, #324]	; (8001d88 <HAL_GPIO_Init+0x318>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d025      	beq.n	8001c92 <HAL_GPIO_Init+0x222>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a50      	ldr	r2, [pc, #320]	; (8001d8c <HAL_GPIO_Init+0x31c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d01f      	beq.n	8001c8e <HAL_GPIO_Init+0x21e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a4f      	ldr	r2, [pc, #316]	; (8001d90 <HAL_GPIO_Init+0x320>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d019      	beq.n	8001c8a <HAL_GPIO_Init+0x21a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4e      	ldr	r2, [pc, #312]	; (8001d94 <HAL_GPIO_Init+0x324>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d013      	beq.n	8001c86 <HAL_GPIO_Init+0x216>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a4d      	ldr	r2, [pc, #308]	; (8001d98 <HAL_GPIO_Init+0x328>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00d      	beq.n	8001c82 <HAL_GPIO_Init+0x212>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4c      	ldr	r2, [pc, #304]	; (8001d9c <HAL_GPIO_Init+0x32c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d007      	beq.n	8001c7e <HAL_GPIO_Init+0x20e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4b      	ldr	r2, [pc, #300]	; (8001da0 <HAL_GPIO_Init+0x330>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d101      	bne.n	8001c7a <HAL_GPIO_Init+0x20a>
 8001c76:	2307      	movs	r3, #7
 8001c78:	e00e      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c7a:	2308      	movs	r3, #8
 8001c7c:	e00c      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c7e:	2306      	movs	r3, #6
 8001c80:	e00a      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c82:	2305      	movs	r3, #5
 8001c84:	e008      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c86:	2304      	movs	r3, #4
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e004      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e002      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c96:	2300      	movs	r3, #0
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	f002 0203 	and.w	r2, r2, #3
 8001c9e:	0092      	lsls	r2, r2, #2
 8001ca0:	4093      	lsls	r3, r2
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca8:	4935      	ldr	r1, [pc, #212]	; (8001d80 <HAL_GPIO_Init+0x310>)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	3302      	adds	r3, #2
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb6:	4b3b      	ldr	r3, [pc, #236]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cda:	4a32      	ldr	r2, [pc, #200]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce0:	4b30      	ldr	r3, [pc, #192]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d04:	4a27      	ldr	r2, [pc, #156]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d0a:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d2e:	4a1d      	ldr	r2, [pc, #116]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d58:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3301      	adds	r3, #1
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	2b0f      	cmp	r3, #15
 8001d68:	f67f ae90 	bls.w	8001a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3724      	adds	r7, #36	; 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40013800 	.word	0x40013800
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	40020800 	.word	0x40020800
 8001d90:	40020c00 	.word	0x40020c00
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40021400 	.word	0x40021400
 8001d9c:	40021800 	.word	0x40021800
 8001da0:	40021c00 	.word	0x40021c00
 8001da4:	40013c00 	.word	0x40013c00

08001da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	e001      	b.n	8001dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	807b      	strh	r3, [r7, #2]
 8001de4:	4613      	mov	r3, r2
 8001de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de8:	787b      	ldrb	r3, [r7, #1]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dee:	887a      	ldrh	r2, [r7, #2]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001df4:	e003      	b.n	8001dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001df6:	887b      	ldrh	r3, [r7, #2]
 8001df8:	041a      	lsls	r2, r3, #16
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	619a      	str	r2, [r3, #24]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b085      	sub	sp, #20
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	460b      	mov	r3, r1
 8001e14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e1c:	887a      	ldrh	r2, [r7, #2]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4013      	ands	r3, r2
 8001e22:	041a      	lsls	r2, r3, #16
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	43d9      	mvns	r1, r3
 8001e28:	887b      	ldrh	r3, [r7, #2]
 8001e2a:	400b      	ands	r3, r1
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	619a      	str	r2, [r3, #24]
}
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e12b      	b.n	80020aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff f982 	bl	8001170 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2224      	movs	r2, #36	; 0x24
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ea2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ea4:	f002 fc9e 	bl	80047e4 <HAL_RCC_GetPCLK1Freq>
 8001ea8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	4a81      	ldr	r2, [pc, #516]	; (80020b4 <HAL_I2C_Init+0x274>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d807      	bhi.n	8001ec4 <HAL_I2C_Init+0x84>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4a80      	ldr	r2, [pc, #512]	; (80020b8 <HAL_I2C_Init+0x278>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	bf94      	ite	ls
 8001ebc:	2301      	movls	r3, #1
 8001ebe:	2300      	movhi	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	e006      	b.n	8001ed2 <HAL_I2C_Init+0x92>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4a7d      	ldr	r2, [pc, #500]	; (80020bc <HAL_I2C_Init+0x27c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	bf94      	ite	ls
 8001ecc:	2301      	movls	r3, #1
 8001ece:	2300      	movhi	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e0e7      	b.n	80020aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4a78      	ldr	r2, [pc, #480]	; (80020c0 <HAL_I2C_Init+0x280>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	0c9b      	lsrs	r3, r3, #18
 8001ee4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4a6a      	ldr	r2, [pc, #424]	; (80020b4 <HAL_I2C_Init+0x274>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d802      	bhi.n	8001f14 <HAL_I2C_Init+0xd4>
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3301      	adds	r3, #1
 8001f12:	e009      	b.n	8001f28 <HAL_I2C_Init+0xe8>
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	4a69      	ldr	r2, [pc, #420]	; (80020c4 <HAL_I2C_Init+0x284>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	099b      	lsrs	r3, r3, #6
 8001f26:	3301      	adds	r3, #1
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	495c      	ldr	r1, [pc, #368]	; (80020b4 <HAL_I2C_Init+0x274>)
 8001f44:	428b      	cmp	r3, r1
 8001f46:	d819      	bhi.n	8001f7c <HAL_I2C_Init+0x13c>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1e59      	subs	r1, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f56:	1c59      	adds	r1, r3, #1
 8001f58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f5c:	400b      	ands	r3, r1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <HAL_I2C_Init+0x138>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1e59      	subs	r1, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f76:	e051      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001f78:	2304      	movs	r3, #4
 8001f7a:	e04f      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d111      	bne.n	8001fa8 <HAL_I2C_Init+0x168>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	1e58      	subs	r0, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6859      	ldr	r1, [r3, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	440b      	add	r3, r1
 8001f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f96:	3301      	adds	r3, #1
 8001f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	e012      	b.n	8001fce <HAL_I2C_Init+0x18e>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1e58      	subs	r0, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6859      	ldr	r1, [r3, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	0099      	lsls	r1, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2301      	moveq	r3, #1
 8001fca:	2300      	movne	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_I2C_Init+0x196>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e022      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10e      	bne.n	8001ffc <HAL_I2C_Init+0x1bc>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1e58      	subs	r0, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6859      	ldr	r1, [r3, #4]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	440b      	add	r3, r1
 8001fec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ffa:	e00f      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1e58      	subs	r0, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6859      	ldr	r1, [r3, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	0099      	lsls	r1, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002012:	3301      	adds	r3, #1
 8002014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002018:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	6809      	ldr	r1, [r1, #0]
 8002020:	4313      	orrs	r3, r2
 8002022:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69da      	ldr	r2, [r3, #28]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800204a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6911      	ldr	r1, [r2, #16]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68d2      	ldr	r2, [r2, #12]
 8002056:	4311      	orrs	r1, r2
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	430b      	orrs	r3, r1
 800205e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2220      	movs	r2, #32
 8002096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	000186a0 	.word	0x000186a0
 80020b8:	001e847f 	.word	0x001e847f
 80020bc:	003d08ff 	.word	0x003d08ff
 80020c0:	431bde83 	.word	0x431bde83
 80020c4:	10624dd3 	.word	0x10624dd3

080020c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e128      	b.n	800232c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d109      	bne.n	80020fa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a90      	ldr	r2, [pc, #576]	; (8002334 <HAL_I2S_Init+0x26c>)
 80020f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff f883 	bl	8001200 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2202      	movs	r2, #2
 80020fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002110:	f023 030f 	bic.w	r3, r3, #15
 8002114:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2202      	movs	r2, #2
 800211c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d060      	beq.n	80021e8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d102      	bne.n	8002134 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800212e:	2310      	movs	r3, #16
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	e001      	b.n	8002138 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002134:	2320      	movs	r3, #32
 8002136:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b20      	cmp	r3, #32
 800213e:	d802      	bhi.n	8002146 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002146:	2001      	movs	r0, #1
 8002148:	f002 fc42 	bl	80049d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800214c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002156:	d125      	bne.n	80021a4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d010      	beq.n	8002182 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	fbb2 f2f3 	udiv	r2, r2, r3
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	461a      	mov	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	fbb2 f3f3 	udiv	r3, r2, r3
 800217c:	3305      	adds	r3, #5
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	e01f      	b.n	80021c2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	fbb2 f2f3 	udiv	r2, r2, r3
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	461a      	mov	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	fbb2 f3f3 	udiv	r3, r2, r3
 800219e:	3305      	adds	r3, #5
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	e00e      	b.n	80021c2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	461a      	mov	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80021be:	3305      	adds	r3, #5
 80021c0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4a5c      	ldr	r2, [pc, #368]	; (8002338 <HAL_I2S_Init+0x270>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	08db      	lsrs	r3, r3, #3
 80021cc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	085b      	lsrs	r3, r3, #1
 80021de:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	021b      	lsls	r3, r3, #8
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	e003      	b.n	80021f0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80021e8:	2302      	movs	r3, #2
 80021ea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d902      	bls.n	80021fc <HAL_I2S_Init+0x134>
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	2bff      	cmp	r3, #255	; 0xff
 80021fa:	d907      	bls.n	800220c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002200:	f043 0210 	orr.w	r2, r3, #16
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e08f      	b.n	800232c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	ea42 0103 	orr.w	r1, r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	69fa      	ldr	r2, [r7, #28]
 800221c:	430a      	orrs	r2, r1
 800221e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800222a:	f023 030f 	bic.w	r3, r3, #15
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6851      	ldr	r1, [r2, #4]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6892      	ldr	r2, [r2, #8]
 8002236:	4311      	orrs	r1, r2
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	68d2      	ldr	r2, [r2, #12]
 800223c:	4311      	orrs	r1, r2
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6992      	ldr	r2, [r2, #24]
 8002242:	430a      	orrs	r2, r1
 8002244:	431a      	orrs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800224e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d161      	bne.n	800231c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a38      	ldr	r2, [pc, #224]	; (800233c <HAL_I2S_Init+0x274>)
 800225c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a37      	ldr	r2, [pc, #220]	; (8002340 <HAL_I2S_Init+0x278>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d101      	bne.n	800226c <HAL_I2S_Init+0x1a4>
 8002268:	4b36      	ldr	r3, [pc, #216]	; (8002344 <HAL_I2S_Init+0x27c>)
 800226a:	e001      	b.n	8002270 <HAL_I2S_Init+0x1a8>
 800226c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6812      	ldr	r2, [r2, #0]
 8002276:	4932      	ldr	r1, [pc, #200]	; (8002340 <HAL_I2S_Init+0x278>)
 8002278:	428a      	cmp	r2, r1
 800227a:	d101      	bne.n	8002280 <HAL_I2S_Init+0x1b8>
 800227c:	4a31      	ldr	r2, [pc, #196]	; (8002344 <HAL_I2S_Init+0x27c>)
 800227e:	e001      	b.n	8002284 <HAL_I2S_Init+0x1bc>
 8002280:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002284:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002288:	f023 030f 	bic.w	r3, r3, #15
 800228c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a2b      	ldr	r2, [pc, #172]	; (8002340 <HAL_I2S_Init+0x278>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d101      	bne.n	800229c <HAL_I2S_Init+0x1d4>
 8002298:	4b2a      	ldr	r3, [pc, #168]	; (8002344 <HAL_I2S_Init+0x27c>)
 800229a:	e001      	b.n	80022a0 <HAL_I2S_Init+0x1d8>
 800229c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022a0:	2202      	movs	r2, #2
 80022a2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a25      	ldr	r2, [pc, #148]	; (8002340 <HAL_I2S_Init+0x278>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d101      	bne.n	80022b2 <HAL_I2S_Init+0x1ea>
 80022ae:	4b25      	ldr	r3, [pc, #148]	; (8002344 <HAL_I2S_Init+0x27c>)
 80022b0:	e001      	b.n	80022b6 <HAL_I2S_Init+0x1ee>
 80022b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c2:	d003      	beq.n	80022cc <HAL_I2S_Init+0x204>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d103      	bne.n	80022d4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80022cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	e001      	b.n	80022d8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022e2:	4313      	orrs	r3, r2
 80022e4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022ec:	4313      	orrs	r3, r2
 80022ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022f6:	4313      	orrs	r3, r2
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	897b      	ldrh	r3, [r7, #10]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	b29b      	uxth	r3, r3
 8002300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002304:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <HAL_I2S_Init+0x278>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d101      	bne.n	8002314 <HAL_I2S_Init+0x24c>
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <HAL_I2S_Init+0x27c>)
 8002312:	e001      	b.n	8002318 <HAL_I2S_Init+0x250>
 8002314:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002318:	897a      	ldrh	r2, [r7, #10]
 800231a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3720      	adds	r7, #32
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	0800243f 	.word	0x0800243f
 8002338:	cccccccd 	.word	0xcccccccd
 800233c:	08002555 	.word	0x08002555
 8002340:	40003800 	.word	0x40003800
 8002344:	40003400 	.word	0x40003400

08002348 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	881a      	ldrh	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	1c9a      	adds	r2, r3, #2
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10e      	bne.n	80023d8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023c8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff ffb8 	bl	8002348 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	b292      	uxth	r2, r2
 80023f4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fa:	1c9a      	adds	r2, r3, #2
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002404:	b29b      	uxth	r3, r3
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002412:	b29b      	uxth	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10e      	bne.n	8002436 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002426:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff ff93 	bl	800235c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b086      	sub	sp, #24
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b04      	cmp	r3, #4
 8002458:	d13a      	bne.n	80024d0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b01      	cmp	r3, #1
 8002462:	d109      	bne.n	8002478 <I2S_IRQHandler+0x3a>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246e:	2b40      	cmp	r3, #64	; 0x40
 8002470:	d102      	bne.n	8002478 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ffb4 	bl	80023e0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247e:	2b40      	cmp	r3, #64	; 0x40
 8002480:	d126      	bne.n	80024d0 <I2S_IRQHandler+0x92>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 0320 	and.w	r3, r3, #32
 800248c:	2b20      	cmp	r3, #32
 800248e:	d11f      	bne.n	80024d0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800249e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80024a0:	2300      	movs	r3, #0
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	f043 0202 	orr.w	r2, r3, #2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff ff50 	bl	8002370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d136      	bne.n	800254a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d109      	bne.n	80024fa <I2S_IRQHandler+0xbc>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f0:	2b80      	cmp	r3, #128	; 0x80
 80024f2:	d102      	bne.n	80024fa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ff45 	bl	8002384 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b08      	cmp	r3, #8
 8002502:	d122      	bne.n	800254a <I2S_IRQHandler+0x10c>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	2b20      	cmp	r3, #32
 8002510:	d11b      	bne.n	800254a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002520:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253c:	f043 0204 	orr.w	r2, r3, #4
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ff13 	bl	8002370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800254a:	bf00      	nop
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a92      	ldr	r2, [pc, #584]	; (80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d101      	bne.n	8002572 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800256e:	4b92      	ldr	r3, [pc, #584]	; (80027b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002570:	e001      	b.n	8002576 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002572:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a8b      	ldr	r2, [pc, #556]	; (80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d101      	bne.n	8002590 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800258c:	4b8a      	ldr	r3, [pc, #552]	; (80027b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800258e:	e001      	b.n	8002594 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002590:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a0:	d004      	beq.n	80025ac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f040 8099 	bne.w	80026de <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d107      	bne.n	80025c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f925 	bl	8002810 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d107      	bne.n	80025e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f9c8 	bl	8002970 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e6:	2b40      	cmp	r3, #64	; 0x40
 80025e8:	d13a      	bne.n	8002660 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f003 0320 	and.w	r3, r3, #32
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d035      	beq.n	8002660 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a6e      	ldr	r2, [pc, #440]	; (80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d101      	bne.n	8002602 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80025fe:	4b6e      	ldr	r3, [pc, #440]	; (80027b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002600:	e001      	b.n	8002606 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002602:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4969      	ldr	r1, [pc, #420]	; (80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800260e:	428b      	cmp	r3, r1
 8002610:	d101      	bne.n	8002616 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002612:	4b69      	ldr	r3, [pc, #420]	; (80027b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002614:	e001      	b.n	800261a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002616:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800261a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800261e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800262e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	f043 0202 	orr.w	r2, r3, #2
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff fe88 	bl	8002370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b08      	cmp	r3, #8
 8002668:	f040 80c3 	bne.w	80027f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 80bd 	beq.w	80027f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002686:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a49      	ldr	r2, [pc, #292]	; (80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d101      	bne.n	8002696 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002692:	4b49      	ldr	r3, [pc, #292]	; (80027b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002694:	e001      	b.n	800269a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002696:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4944      	ldr	r1, [pc, #272]	; (80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80026a2:	428b      	cmp	r3, r1
 80026a4:	d101      	bne.n	80026aa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80026a6:	4b44      	ldr	r3, [pc, #272]	; (80027b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80026a8:	e001      	b.n	80026ae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80026aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026b2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80026b4:	2300      	movs	r3, #0
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f043 0204 	orr.w	r2, r3, #4
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff fe4a 	bl	8002370 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80026dc:	e089      	b.n	80027f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d107      	bne.n	80026f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f8be 	bl	8002874 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d107      	bne.n	8002712 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f8fd 	bl	800290c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002718:	2b40      	cmp	r3, #64	; 0x40
 800271a:	d12f      	bne.n	800277c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b00      	cmp	r3, #0
 8002724:	d02a      	beq.n	800277c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002734:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a1e      	ldr	r2, [pc, #120]	; (80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d101      	bne.n	8002744 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002740:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002742:	e001      	b.n	8002748 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002744:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4919      	ldr	r1, [pc, #100]	; (80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002750:	428b      	cmp	r3, r1
 8002752:	d101      	bne.n	8002758 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002754:	4b18      	ldr	r3, [pc, #96]	; (80027b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002756:	e001      	b.n	800275c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002758:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800275c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002760:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f043 0202 	orr.w	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff fdfa 	bl	8002370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b08      	cmp	r3, #8
 8002784:	d136      	bne.n	80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f003 0320 	and.w	r3, r3, #32
 800278c:	2b00      	cmp	r3, #0
 800278e:	d031      	beq.n	80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a07      	ldr	r2, [pc, #28]	; (80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d101      	bne.n	800279e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800279a:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800279c:	e001      	b.n	80027a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800279e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4902      	ldr	r1, [pc, #8]	; (80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80027aa:	428b      	cmp	r3, r1
 80027ac:	d106      	bne.n	80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80027ae:	4b02      	ldr	r3, [pc, #8]	; (80027b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80027b0:	e006      	b.n	80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80027b2:	bf00      	nop
 80027b4:	40003800 	.word	0x40003800
 80027b8:	40003400 	.word	0x40003400
 80027bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027c4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	f043 0204 	orr.w	r2, r3, #4
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff fdc0 	bl	8002370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80027f0:	e000      	b.n	80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80027f2:	bf00      	nop
}
 80027f4:	bf00      	nop
 80027f6:	3720      	adds	r7, #32
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	1c99      	adds	r1, r3, #2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6251      	str	r1, [r2, #36]	; 0x24
 8002822:	881a      	ldrh	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d113      	bne.n	800286a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002850:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002856:	b29b      	uxth	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d106      	bne.n	800286a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff ffc9 	bl	80027fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	1c99      	adds	r1, r3, #2
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6251      	str	r1, [r2, #36]	; 0x24
 8002886:	8819      	ldrh	r1, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1d      	ldr	r2, [pc, #116]	; (8002904 <I2SEx_TxISR_I2SExt+0x90>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d101      	bne.n	8002896 <I2SEx_TxISR_I2SExt+0x22>
 8002892:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <I2SEx_TxISR_I2SExt+0x94>)
 8002894:	e001      	b.n	800289a <I2SEx_TxISR_I2SExt+0x26>
 8002896:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800289a:	460a      	mov	r2, r1
 800289c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d121      	bne.n	80028fa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a12      	ldr	r2, [pc, #72]	; (8002904 <I2SEx_TxISR_I2SExt+0x90>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d101      	bne.n	80028c4 <I2SEx_TxISR_I2SExt+0x50>
 80028c0:	4b11      	ldr	r3, [pc, #68]	; (8002908 <I2SEx_TxISR_I2SExt+0x94>)
 80028c2:	e001      	b.n	80028c8 <I2SEx_TxISR_I2SExt+0x54>
 80028c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	490d      	ldr	r1, [pc, #52]	; (8002904 <I2SEx_TxISR_I2SExt+0x90>)
 80028d0:	428b      	cmp	r3, r1
 80028d2:	d101      	bne.n	80028d8 <I2SEx_TxISR_I2SExt+0x64>
 80028d4:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <I2SEx_TxISR_I2SExt+0x94>)
 80028d6:	e001      	b.n	80028dc <I2SEx_TxISR_I2SExt+0x68>
 80028d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d106      	bne.n	80028fa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff ff81 	bl	80027fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40003800 	.word	0x40003800
 8002908:	40003400 	.word	0x40003400

0800290c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68d8      	ldr	r0, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	1c99      	adds	r1, r3, #2
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002924:	b282      	uxth	r2, r0
 8002926:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d113      	bne.n	8002968 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800294e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff ff4a 	bl	80027fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002968:	bf00      	nop
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a20      	ldr	r2, [pc, #128]	; (8002a00 <I2SEx_RxISR_I2SExt+0x90>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d101      	bne.n	8002986 <I2SEx_RxISR_I2SExt+0x16>
 8002982:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <I2SEx_RxISR_I2SExt+0x94>)
 8002984:	e001      	b.n	800298a <I2SEx_RxISR_I2SExt+0x1a>
 8002986:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800298a:	68d8      	ldr	r0, [r3, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	1c99      	adds	r1, r3, #2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002996:	b282      	uxth	r2, r0
 8002998:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d121      	bne.n	80029f6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a12      	ldr	r2, [pc, #72]	; (8002a00 <I2SEx_RxISR_I2SExt+0x90>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d101      	bne.n	80029c0 <I2SEx_RxISR_I2SExt+0x50>
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <I2SEx_RxISR_I2SExt+0x94>)
 80029be:	e001      	b.n	80029c4 <I2SEx_RxISR_I2SExt+0x54>
 80029c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	490d      	ldr	r1, [pc, #52]	; (8002a00 <I2SEx_RxISR_I2SExt+0x90>)
 80029cc:	428b      	cmp	r3, r1
 80029ce:	d101      	bne.n	80029d4 <I2SEx_RxISR_I2SExt+0x64>
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <I2SEx_RxISR_I2SExt+0x94>)
 80029d2:	e001      	b.n	80029d8 <I2SEx_RxISR_I2SExt+0x68>
 80029d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029dc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d106      	bne.n	80029f6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff ff03 	bl	80027fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40003800 	.word	0x40003800
 8002a04:	40003400 	.word	0x40003400

08002a08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a0a:	b08f      	sub	sp, #60	; 0x3c
 8002a0c:	af0a      	add	r7, sp, #40	; 0x28
 8002a0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e10f      	b.n	8002c3a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d106      	bne.n	8002a3a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f006 fb4f 	bl	80090d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2203      	movs	r2, #3
 8002a3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d102      	bne.n	8002a54 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f002 fe36 	bl	80056ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	687e      	ldr	r6, [r7, #4]
 8002a66:	466d      	mov	r5, sp
 8002a68:	f106 0410 	add.w	r4, r6, #16
 8002a6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a78:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a7c:	1d33      	adds	r3, r6, #4
 8002a7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a80:	6838      	ldr	r0, [r7, #0]
 8002a82:	f002 fd0d 	bl	80054a0 <USB_CoreInit>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0d0      	b.n	8002c3a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f002 fe24 	bl	80056ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	73fb      	strb	r3, [r7, #15]
 8002aa8:	e04a      	b.n	8002b40 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002aaa:	7bfa      	ldrb	r2, [r7, #15]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	333d      	adds	r3, #61	; 0x3d
 8002aba:	2201      	movs	r2, #1
 8002abc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002abe:	7bfa      	ldrb	r2, [r7, #15]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	333c      	adds	r3, #60	; 0x3c
 8002ace:	7bfa      	ldrb	r2, [r7, #15]
 8002ad0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ad2:	7bfa      	ldrb	r2, [r7, #15]
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	b298      	uxth	r0, r3
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	3344      	adds	r3, #68	; 0x44
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002aea:	7bfa      	ldrb	r2, [r7, #15]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4413      	add	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	3340      	adds	r3, #64	; 0x40
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002afe:	7bfa      	ldrb	r2, [r7, #15]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	3348      	adds	r3, #72	; 0x48
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b12:	7bfa      	ldrb	r2, [r7, #15]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	334c      	adds	r3, #76	; 0x4c
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b26:	7bfa      	ldrb	r2, [r7, #15]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	3354      	adds	r3, #84	; 0x54
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
 8002b40:	7bfa      	ldrb	r2, [r7, #15]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d3af      	bcc.n	8002aaa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	73fb      	strb	r3, [r7, #15]
 8002b4e:	e044      	b.n	8002bda <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b50:	7bfa      	ldrb	r2, [r7, #15]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4413      	add	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b66:	7bfa      	ldrb	r2, [r7, #15]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002b78:	7bfa      	ldrb	r2, [r7, #15]
 8002b7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b7c:	7bfa      	ldrb	r2, [r7, #15]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4413      	add	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b92:	7bfa      	ldrb	r2, [r7, #15]
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ba8:	7bfa      	ldrb	r2, [r7, #15]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bbe:	7bfa      	ldrb	r2, [r7, #15]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
 8002bda:	7bfa      	ldrb	r2, [r7, #15]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d3b5      	bcc.n	8002b50 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	687e      	ldr	r6, [r7, #4]
 8002bec:	466d      	mov	r5, sp
 8002bee:	f106 0410 	add.w	r4, r6, #16
 8002bf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bfa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bfe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c02:	1d33      	adds	r3, r6, #4
 8002c04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c06:	6838      	ldr	r0, [r7, #0]
 8002c08:	f002 fdbc 	bl	8005784 <USB_DevInit>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d005      	beq.n	8002c1e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2202      	movs	r2, #2
 8002c16:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e00d      	b.n	8002c3a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f003 ff0b 	bl	8006a4e <USB_DevDisconnect>

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c42 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_PCD_Start+0x1c>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e020      	b.n	8002ca0 <HAL_PCD_Start+0x5e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d109      	bne.n	8002c82 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d005      	beq.n	8002c82 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f002 fd0e 	bl	80056a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f003 febb 	bl	8006a0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ca8:	b590      	push	{r4, r7, lr}
 8002caa:	b08d      	sub	sp, #52	; 0x34
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f003 ff79 	bl	8006bb6 <USB_GetMode>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f040 848a 	bne.w	80035e0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f003 fedd 	bl	8006a90 <USB_ReadInterrupts>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8480 	beq.w	80035de <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	0a1b      	lsrs	r3, r3, #8
 8002ce8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f003 feca 	bl	8006a90 <USB_ReadInterrupts>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d107      	bne.n	8002d16 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695a      	ldr	r2, [r3, #20]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f002 0202 	and.w	r2, r2, #2
 8002d14:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f003 feb8 	bl	8006a90 <USB_ReadInterrupts>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b10      	cmp	r3, #16
 8002d28:	d161      	bne.n	8002dee <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699a      	ldr	r2, [r3, #24]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0210 	bic.w	r2, r2, #16
 8002d38:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	f003 020f 	and.w	r2, r3, #15
 8002d46:	4613      	mov	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	3304      	adds	r3, #4
 8002d58:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	0c5b      	lsrs	r3, r3, #17
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d124      	bne.n	8002db0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d035      	beq.n	8002dde <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	461a      	mov	r2, r3
 8002d84:	6a38      	ldr	r0, [r7, #32]
 8002d86:	f003 fcef 	bl	8006768 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d96:	441a      	add	r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	6a1a      	ldr	r2, [r3, #32]
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002da8:	441a      	add	r2, r3
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	621a      	str	r2, [r3, #32]
 8002dae:	e016      	b.n	8002dde <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	0c5b      	lsrs	r3, r3, #17
 8002db4:	f003 030f 	and.w	r3, r3, #15
 8002db8:	2b06      	cmp	r3, #6
 8002dba:	d110      	bne.n	8002dde <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002dc2:	2208      	movs	r2, #8
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	6a38      	ldr	r0, [r7, #32]
 8002dc8:	f003 fcce 	bl	8006768 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	6a1a      	ldr	r2, [r3, #32]
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	091b      	lsrs	r3, r3, #4
 8002dd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dd8:	441a      	add	r2, r3
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	699a      	ldr	r2, [r3, #24]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 0210 	orr.w	r2, r2, #16
 8002dec:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f003 fe4c 	bl	8006a90 <USB_ReadInterrupts>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dfe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e02:	f040 80a7 	bne.w	8002f54 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f003 fe51 	bl	8006ab6 <USB_ReadDevAllOutEpInterrupt>
 8002e14:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e16:	e099      	b.n	8002f4c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 808e 	beq.w	8002f40 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f003 fe75 	bl	8006b1e <USB_ReadDevOutEPInterrupt>
 8002e34:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00c      	beq.n	8002e5a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	2301      	movs	r3, #1
 8002e50:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 fec3 	bl	8003be0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00c      	beq.n	8002e7e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e70:	461a      	mov	r2, r3
 8002e72:	2308      	movs	r3, #8
 8002e74:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 ff99 	bl	8003db0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f003 0310 	and.w	r3, r3, #16
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e94:	461a      	mov	r2, r3
 8002e96:	2310      	movs	r3, #16
 8002e98:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d030      	beq.n	8002f06 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eac:	2b80      	cmp	r3, #128	; 0x80
 8002eae:	d109      	bne.n	8002ec4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	69fa      	ldr	r2, [r7, #28]
 8002eba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ec2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	4413      	add	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	78db      	ldrb	r3, [r3, #3]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d108      	bne.n	8002ef4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	4619      	mov	r1, r3
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f006 fa06 	bl	8009300 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f00:	461a      	mov	r2, r3
 8002f02:	2302      	movs	r3, #2
 8002f04:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	2320      	movs	r3, #32
 8002f20:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d009      	beq.n	8002f40 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f38:	461a      	mov	r2, r3
 8002f3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f3e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	3301      	adds	r3, #1
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f48:	085b      	lsrs	r3, r3, #1
 8002f4a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f47f af62 	bne.w	8002e18 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f003 fd99 	bl	8006a90 <USB_ReadInterrupts>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f68:	f040 80db 	bne.w	8003122 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f003 fdba 	bl	8006aea <USB_ReadDevAllInEpInterrupt>
 8002f76:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f7c:	e0cd      	b.n	800311a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 80c2 	beq.w	800310e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f003 fde0 	bl	8006b5a <USB_ReadDevInEPInterrupt>
 8002f9a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d057      	beq.n	8003056 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	2201      	movs	r2, #1
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69f9      	ldr	r1, [r7, #28]
 8002fc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2301      	movs	r3, #1
 8002fda:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d132      	bne.n	800304a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe8:	4613      	mov	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	334c      	adds	r3, #76	; 0x4c
 8002ff4:	6819      	ldr	r1, [r3, #0]
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4403      	add	r3, r0
 8003004:	3348      	adds	r3, #72	; 0x48
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4419      	add	r1, r3
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300e:	4613      	mov	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4403      	add	r3, r0
 8003018:	334c      	adds	r3, #76	; 0x4c
 800301a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	2b00      	cmp	r3, #0
 8003020:	d113      	bne.n	800304a <HAL_PCD_IRQHandler+0x3a2>
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003026:	4613      	mov	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	3354      	adds	r3, #84	; 0x54
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d108      	bne.n	800304a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003042:	461a      	mov	r2, r3
 8003044:	2101      	movs	r1, #1
 8003046:	f003 fde7 	bl	8006c18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	b2db      	uxtb	r3, r3
 800304e:	4619      	mov	r1, r3
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f006 f8d0 	bl	80091f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	4413      	add	r3, r2
 8003068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800306c:	461a      	mov	r2, r3
 800306e:	2308      	movs	r3, #8
 8003070:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	4413      	add	r3, r2
 8003084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003088:	461a      	mov	r2, r3
 800308a:	2310      	movs	r3, #16
 800308c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003094:	2b00      	cmp	r3, #0
 8003096:	d008      	beq.n	80030aa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030a4:	461a      	mov	r2, r3
 80030a6:	2340      	movs	r3, #64	; 0x40
 80030a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d023      	beq.n	80030fc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80030b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030b6:	6a38      	ldr	r0, [r7, #32]
 80030b8:	f002 fcc8 	bl	8005a4c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80030bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030be:	4613      	mov	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	3338      	adds	r3, #56	; 0x38
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	4413      	add	r3, r2
 80030cc:	3304      	adds	r3, #4
 80030ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	78db      	ldrb	r3, [r3, #3]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d108      	bne.n	80030ea <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2200      	movs	r2, #0
 80030dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	4619      	mov	r1, r3
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f006 f91d 	bl	8009324 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f6:	461a      	mov	r2, r3
 80030f8:	2302      	movs	r3, #2
 80030fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003106:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 fcdb 	bl	8003ac4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	3301      	adds	r3, #1
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003116:	085b      	lsrs	r3, r3, #1
 8003118:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311c:	2b00      	cmp	r3, #0
 800311e:	f47f af2e 	bne.w	8002f7e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f003 fcb2 	bl	8006a90 <USB_ReadInterrupts>
 800312c:	4603      	mov	r3, r0
 800312e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003132:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003136:	d122      	bne.n	800317e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003146:	f023 0301 	bic.w	r3, r3, #1
 800314a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003152:	2b01      	cmp	r3, #1
 8003154:	d108      	bne.n	8003168 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800315e:	2100      	movs	r1, #0
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 fec3 	bl	8003eec <HAL_PCDEx_LPM_Callback>
 8003166:	e002      	b.n	800316e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f006 f8bb 	bl	80092e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695a      	ldr	r2, [r3, #20]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800317c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f003 fc84 	bl	8006a90 <USB_ReadInterrupts>
 8003188:	4603      	mov	r3, r0
 800318a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800318e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003192:	d112      	bne.n	80031ba <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d102      	bne.n	80031aa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f006 f877 	bl	8009298 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695a      	ldr	r2, [r3, #20]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80031b8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f003 fc66 	bl	8006a90 <USB_ReadInterrupts>
 80031c4:	4603      	mov	r3, r0
 80031c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ce:	f040 80b7 	bne.w	8003340 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2110      	movs	r1, #16
 80031ec:	4618      	mov	r0, r3
 80031ee:	f002 fc2d 	bl	8005a4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031f6:	e046      	b.n	8003286 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80031f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003204:	461a      	mov	r2, r3
 8003206:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800320a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	4413      	add	r3, r2
 8003214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800321c:	0151      	lsls	r1, r2, #5
 800321e:	69fa      	ldr	r2, [r7, #28]
 8003220:	440a      	add	r2, r1
 8003222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003226:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800322a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800322c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	4413      	add	r3, r2
 8003234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003238:	461a      	mov	r2, r3
 800323a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800323e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	4413      	add	r3, r2
 8003248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003250:	0151      	lsls	r1, r2, #5
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	440a      	add	r2, r1
 8003256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800325a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800325e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	4413      	add	r3, r2
 8003268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003270:	0151      	lsls	r1, r2, #5
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	440a      	add	r2, r1
 8003276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800327a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800327e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003282:	3301      	adds	r3, #1
 8003284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800328c:	429a      	cmp	r2, r3
 800328e:	d3b3      	bcc.n	80031f8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	69fa      	ldr	r2, [r7, #28]
 800329a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800329e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80032a2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d016      	beq.n	80032da <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032b6:	69fa      	ldr	r2, [r7, #28]
 80032b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032bc:	f043 030b 	orr.w	r3, r3, #11
 80032c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032cc:	69fa      	ldr	r2, [r7, #28]
 80032ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032d2:	f043 030b 	orr.w	r3, r3, #11
 80032d6:	6453      	str	r3, [r2, #68]	; 0x44
 80032d8:	e015      	b.n	8003306 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	69fa      	ldr	r2, [r7, #28]
 80032e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032ec:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80032f0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003300:	f043 030b 	orr.w	r3, r3, #11
 8003304:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69fa      	ldr	r2, [r7, #28]
 8003310:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003314:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003318:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800332a:	461a      	mov	r2, r3
 800332c:	f003 fc74 	bl	8006c18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695a      	ldr	r2, [r3, #20]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800333e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f003 fba3 	bl	8006a90 <USB_ReadInterrupts>
 800334a:	4603      	mov	r3, r0
 800334c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003354:	d124      	bne.n	80033a0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f003 fc39 	bl	8006bd2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f002 fbee 	bl	8005b46 <USB_GetDevSpeed>
 800336a:	4603      	mov	r3, r0
 800336c:	461a      	mov	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681c      	ldr	r4, [r3, #0]
 8003376:	f001 fa29 	bl	80047cc <HAL_RCC_GetHCLKFreq>
 800337a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003380:	b2db      	uxtb	r3, r3
 8003382:	461a      	mov	r2, r3
 8003384:	4620      	mov	r0, r4
 8003386:	f002 f8ed 	bl	8005564 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f005 ff5b 	bl	8009246 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695a      	ldr	r2, [r3, #20]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800339e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f003 fb73 	bl	8006a90 <USB_ReadInterrupts>
 80033aa:	4603      	mov	r3, r0
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d10a      	bne.n	80033ca <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f005 ff38 	bl	800922a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695a      	ldr	r2, [r3, #20]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f002 0208 	and.w	r2, r2, #8
 80033c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f003 fb5e 	bl	8006a90 <USB_ReadInterrupts>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033da:	2b80      	cmp	r3, #128	; 0x80
 80033dc:	d122      	bne.n	8003424 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033ea:	2301      	movs	r3, #1
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
 80033ee:	e014      	b.n	800341a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f4:	4613      	mov	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	4413      	add	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d105      	bne.n	8003414 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	b2db      	uxtb	r3, r3
 800340c:	4619      	mov	r1, r3
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 fb27 	bl	8003a62 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	3301      	adds	r3, #1
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003420:	429a      	cmp	r2, r3
 8003422:	d3e5      	bcc.n	80033f0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f003 fb31 	bl	8006a90 <USB_ReadInterrupts>
 800342e:	4603      	mov	r3, r0
 8003430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003438:	d13b      	bne.n	80034b2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800343a:	2301      	movs	r3, #1
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
 800343e:	e02b      	b.n	8003498 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003454:	4613      	mov	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4413      	add	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	3340      	adds	r3, #64	; 0x40
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d115      	bne.n	8003492 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003466:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003468:	2b00      	cmp	r3, #0
 800346a:	da12      	bge.n	8003492 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003470:	4613      	mov	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	333f      	adds	r3, #63	; 0x3f
 800347c:	2201      	movs	r2, #1
 800347e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	b2db      	uxtb	r3, r3
 8003484:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003488:	b2db      	uxtb	r3, r3
 800348a:	4619      	mov	r1, r3
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fae8 	bl	8003a62 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	3301      	adds	r3, #1
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349e:	429a      	cmp	r2, r3
 80034a0:	d3ce      	bcc.n	8003440 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695a      	ldr	r2, [r3, #20]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80034b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f003 faea 	bl	8006a90 <USB_ReadInterrupts>
 80034bc:	4603      	mov	r3, r0
 80034be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034c6:	d155      	bne.n	8003574 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034c8:	2301      	movs	r3, #1
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
 80034cc:	e045      	b.n	800355a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e2:	4613      	mov	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d12e      	bne.n	8003554 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80034f6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	da2b      	bge.n	8003554 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003508:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800350c:	429a      	cmp	r2, r3
 800350e:	d121      	bne.n	8003554 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003514:	4613      	mov	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003522:	2201      	movs	r2, #1
 8003524:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10a      	bne.n	8003554 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	69fa      	ldr	r2, [r7, #28]
 8003548:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800354c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003550:	6053      	str	r3, [r2, #4]
            break;
 8003552:	e007      	b.n	8003564 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	3301      	adds	r3, #1
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003560:	429a      	cmp	r2, r3
 8003562:	d3b4      	bcc.n	80034ce <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695a      	ldr	r2, [r3, #20]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003572:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f003 fa89 	bl	8006a90 <USB_ReadInterrupts>
 800357e:	4603      	mov	r3, r0
 8003580:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003588:	d10a      	bne.n	80035a0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f005 fedc 	bl	8009348 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800359e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f003 fa73 	bl	8006a90 <USB_ReadInterrupts>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d115      	bne.n	80035e0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f005 fecc 	bl	8009364 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6859      	ldr	r1, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	430a      	orrs	r2, r1
 80035da:	605a      	str	r2, [r3, #4]
 80035dc:	e000      	b.n	80035e0 <HAL_PCD_IRQHandler+0x938>
      return;
 80035de:	bf00      	nop
    }
  }
}
 80035e0:	3734      	adds	r7, #52	; 0x34
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd90      	pop	{r4, r7, pc}

080035e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	460b      	mov	r3, r1
 80035f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_PCD_SetAddress+0x1a>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e013      	b.n	8003628 <HAL_PCD_SetAddress+0x42>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	78fa      	ldrb	r2, [r7, #3]
 8003616:	4611      	mov	r1, r2
 8003618:	4618      	mov	r0, r3
 800361a:	f003 f9d1 	bl	80069c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	4608      	mov	r0, r1
 800363a:	4611      	mov	r1, r2
 800363c:	461a      	mov	r2, r3
 800363e:	4603      	mov	r3, r0
 8003640:	70fb      	strb	r3, [r7, #3]
 8003642:	460b      	mov	r3, r1
 8003644:	803b      	strh	r3, [r7, #0]
 8003646:	4613      	mov	r3, r2
 8003648:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800364e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003652:	2b00      	cmp	r3, #0
 8003654:	da0f      	bge.n	8003676 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003656:	78fb      	ldrb	r3, [r7, #3]
 8003658:	f003 020f 	and.w	r2, r3, #15
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	3338      	adds	r3, #56	; 0x38
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	4413      	add	r3, r2
 800366a:	3304      	adds	r3, #4
 800366c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2201      	movs	r2, #1
 8003672:	705a      	strb	r2, [r3, #1]
 8003674:	e00f      	b.n	8003696 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003676:	78fb      	ldrb	r3, [r7, #3]
 8003678:	f003 020f 	and.w	r2, r3, #15
 800367c:	4613      	mov	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	4413      	add	r3, r2
 800368c:	3304      	adds	r3, #4
 800368e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	b2da      	uxtb	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036a2:	883a      	ldrh	r2, [r7, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	78ba      	ldrb	r2, [r7, #2]
 80036ac:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	785b      	ldrb	r3, [r3, #1]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d004      	beq.n	80036c0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036c0:	78bb      	ldrb	r3, [r7, #2]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d102      	bne.n	80036cc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_PCD_EP_Open+0xaa>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e00e      	b.n	80036f8 <HAL_PCD_EP_Open+0xc8>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68f9      	ldr	r1, [r7, #12]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f002 fa51 	bl	8005b90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80036f6:	7afb      	ldrb	r3, [r7, #11]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800370c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003710:	2b00      	cmp	r3, #0
 8003712:	da0f      	bge.n	8003734 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003714:	78fb      	ldrb	r3, [r7, #3]
 8003716:	f003 020f 	and.w	r2, r3, #15
 800371a:	4613      	mov	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	4413      	add	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	3338      	adds	r3, #56	; 0x38
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	4413      	add	r3, r2
 8003728:	3304      	adds	r3, #4
 800372a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2201      	movs	r2, #1
 8003730:	705a      	strb	r2, [r3, #1]
 8003732:	e00f      	b.n	8003754 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003734:	78fb      	ldrb	r3, [r7, #3]
 8003736:	f003 020f 	and.w	r2, r3, #15
 800373a:	4613      	mov	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	4413      	add	r3, r2
 800374a:	3304      	adds	r3, #4
 800374c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	b2da      	uxtb	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_PCD_EP_Close+0x6e>
 800376a:	2302      	movs	r3, #2
 800376c:	e00e      	b.n	800378c <HAL_PCD_EP_Close+0x8c>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68f9      	ldr	r1, [r7, #12]
 800377c:	4618      	mov	r0, r3
 800377e:	f002 fa8f 	bl	8005ca0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	607a      	str	r2, [r7, #4]
 800379e:	603b      	str	r3, [r7, #0]
 80037a0:	460b      	mov	r3, r1
 80037a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037a4:	7afb      	ldrb	r3, [r7, #11]
 80037a6:	f003 020f 	and.w	r2, r3, #15
 80037aa:	4613      	mov	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	4413      	add	r3, r2
 80037ba:	3304      	adds	r3, #4
 80037bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2200      	movs	r2, #0
 80037ce:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	2200      	movs	r2, #0
 80037d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037d6:	7afb      	ldrb	r3, [r7, #11]
 80037d8:	f003 030f 	and.w	r3, r3, #15
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d102      	bne.n	80037f0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037f0:	7afb      	ldrb	r3, [r7, #11]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	461a      	mov	r2, r3
 8003806:	6979      	ldr	r1, [r7, #20]
 8003808:	f002 fd6e 	bl	80062e8 <USB_EP0StartXfer>
 800380c:	e008      	b.n	8003820 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	b2db      	uxtb	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	6979      	ldr	r1, [r7, #20]
 800381c:	f002 fb1c 	bl	8005e58 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	460b      	mov	r3, r1
 8003834:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003836:	78fb      	ldrb	r3, [r7, #3]
 8003838:	f003 020f 	and.w	r2, r3, #15
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	4413      	add	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800384c:	681b      	ldr	r3, [r3, #0]
}
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b086      	sub	sp, #24
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	460b      	mov	r3, r1
 8003868:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800386a:	7afb      	ldrb	r3, [r7, #11]
 800386c:	f003 020f 	and.w	r2, r3, #15
 8003870:	4613      	mov	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	3338      	adds	r3, #56	; 0x38
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4413      	add	r3, r2
 800387e:	3304      	adds	r3, #4
 8003880:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2200      	movs	r2, #0
 8003892:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	2201      	movs	r2, #1
 8003898:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800389a:	7afb      	ldrb	r3, [r7, #11]
 800389c:	f003 030f 	and.w	r3, r3, #15
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d102      	bne.n	80038b4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038b4:	7afb      	ldrb	r3, [r7, #11]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	461a      	mov	r2, r3
 80038ca:	6979      	ldr	r1, [r7, #20]
 80038cc:	f002 fd0c 	bl	80062e8 <USB_EP0StartXfer>
 80038d0:	e008      	b.n	80038e4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	461a      	mov	r2, r3
 80038de:	6979      	ldr	r1, [r7, #20]
 80038e0:	f002 faba 	bl	8005e58 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	460b      	mov	r3, r1
 80038f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038fa:	78fb      	ldrb	r3, [r7, #3]
 80038fc:	f003 020f 	and.w	r2, r3, #15
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	429a      	cmp	r2, r3
 8003906:	d901      	bls.n	800390c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e050      	b.n	80039ae <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800390c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003910:	2b00      	cmp	r3, #0
 8003912:	da0f      	bge.n	8003934 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	f003 020f 	and.w	r2, r3, #15
 800391a:	4613      	mov	r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	3338      	adds	r3, #56	; 0x38
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	4413      	add	r3, r2
 8003928:	3304      	adds	r3, #4
 800392a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	705a      	strb	r2, [r3, #1]
 8003932:	e00d      	b.n	8003950 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003934:	78fa      	ldrb	r2, [r7, #3]
 8003936:	4613      	mov	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	4413      	add	r3, r2
 8003946:	3304      	adds	r3, #4
 8003948:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2201      	movs	r2, #1
 8003954:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003956:	78fb      	ldrb	r3, [r7, #3]
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	b2da      	uxtb	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_PCD_EP_SetStall+0x82>
 800396c:	2302      	movs	r3, #2
 800396e:	e01e      	b.n	80039ae <HAL_PCD_EP_SetStall+0xc0>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68f9      	ldr	r1, [r7, #12]
 800397e:	4618      	mov	r0, r3
 8003980:	f002 ff4a 	bl	8006818 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10a      	bne.n	80039a4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6818      	ldr	r0, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	b2d9      	uxtb	r1, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800399e:	461a      	mov	r2, r3
 80039a0:	f003 f93a 	bl	8006c18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	460b      	mov	r3, r1
 80039c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039c2:	78fb      	ldrb	r3, [r7, #3]
 80039c4:	f003 020f 	and.w	r2, r3, #15
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d901      	bls.n	80039d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e042      	b.n	8003a5a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	da0f      	bge.n	80039fc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	f003 020f 	and.w	r2, r3, #15
 80039e2:	4613      	mov	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	3338      	adds	r3, #56	; 0x38
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	4413      	add	r3, r2
 80039f0:	3304      	adds	r3, #4
 80039f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	705a      	strb	r2, [r3, #1]
 80039fa:	e00f      	b.n	8003a1c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	f003 020f 	and.w	r2, r3, #15
 8003a02:	4613      	mov	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	4413      	add	r3, r2
 8003a12:	3304      	adds	r3, #4
 8003a14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a22:	78fb      	ldrb	r3, [r7, #3]
 8003a24:	f003 030f 	and.w	r3, r3, #15
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_PCD_EP_ClrStall+0x86>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e00e      	b.n	8003a5a <HAL_PCD_EP_ClrStall+0xa4>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68f9      	ldr	r1, [r7, #12]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f002 ff52 	bl	80068f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003a6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	da0c      	bge.n	8003a90 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	f003 020f 	and.w	r2, r3, #15
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	3338      	adds	r3, #56	; 0x38
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	e00c      	b.n	8003aaa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	f003 020f 	and.w	r2, r3, #15
 8003a96:	4613      	mov	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68f9      	ldr	r1, [r7, #12]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f002 fd71 	bl	8006598 <USB_EPStopXfer>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003aba:	7afb      	ldrb	r3, [r7, #11]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08a      	sub	sp, #40	; 0x28
 8003ac8:	af02      	add	r7, sp, #8
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	4613      	mov	r3, r2
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	4413      	add	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	3338      	adds	r3, #56	; 0x38
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	3304      	adds	r3, #4
 8003aea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a1a      	ldr	r2, [r3, #32]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d901      	bls.n	8003afc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e06c      	b.n	8003bd6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	699a      	ldr	r2, [r3, #24]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d902      	bls.n	8003b18 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	3303      	adds	r3, #3
 8003b1c:	089b      	lsrs	r3, r3, #2
 8003b1e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b20:	e02b      	b.n	8003b7a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d902      	bls.n	8003b3e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	3303      	adds	r3, #3
 8003b42:	089b      	lsrs	r3, r3, #2
 8003b44:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6919      	ldr	r1, [r3, #16]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	6978      	ldr	r0, [r7, #20]
 8003b5e:	f002 fdc5 	bl	80066ec <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	441a      	add	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a1a      	ldr	r2, [r3, #32]
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	441a      	add	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d809      	bhi.n	8003ba4 <PCD_WriteEmptyTxFifo+0xe0>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a1a      	ldr	r2, [r3, #32]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d203      	bcs.n	8003ba4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1be      	bne.n	8003b22 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	699a      	ldr	r2, [r3, #24]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d811      	bhi.n	8003bd4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	6939      	ldr	r1, [r7, #16]
 8003bcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3720      	adds	r7, #32
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	333c      	adds	r3, #60	; 0x3c
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d17b      	bne.n	8003d0e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d015      	beq.n	8003c4c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	4a61      	ldr	r2, [pc, #388]	; (8003da8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	f240 80b9 	bls.w	8003d9c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80b3 	beq.w	8003d9c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c42:	461a      	mov	r2, r3
 8003c44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c48:	6093      	str	r3, [r2, #8]
 8003c4a:	e0a7      	b.n	8003d9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c62:	461a      	mov	r2, r3
 8003c64:	2320      	movs	r3, #32
 8003c66:	6093      	str	r3, [r2, #8]
 8003c68:	e098      	b.n	8003d9c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f040 8093 	bne.w	8003d9c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	4a4b      	ldr	r2, [pc, #300]	; (8003da8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d90f      	bls.n	8003c9e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c94:	461a      	mov	r2, r3
 8003c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c9a:	6093      	str	r3, [r2, #8]
 8003c9c:	e07e      	b.n	8003d9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	4413      	add	r3, r2
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	69da      	ldr	r2, [r3, #28]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	0159      	lsls	r1, r3, #5
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	440b      	add	r3, r1
 8003cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cca:	1ad2      	subs	r2, r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d114      	bne.n	8003d00 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d109      	bne.n	8003cf2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ce8:	461a      	mov	r2, r3
 8003cea:	2101      	movs	r1, #1
 8003cec:	f002 ff94 	bl	8006c18 <USB_EP0_OutStart>
 8003cf0:	e006      	b.n	8003d00 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	441a      	add	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	4619      	mov	r1, r3
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f005 fa5a 	bl	80091c0 <HAL_PCD_DataOutStageCallback>
 8003d0c:	e046      	b.n	8003d9c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	4a26      	ldr	r2, [pc, #152]	; (8003dac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d124      	bne.n	8003d60 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d32:	6093      	str	r3, [r2, #8]
 8003d34:	e032      	b.n	8003d9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	2320      	movs	r3, #32
 8003d50:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	4619      	mov	r1, r3
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f005 fa31 	bl	80091c0 <HAL_PCD_DataOutStageCallback>
 8003d5e:	e01d      	b.n	8003d9c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d114      	bne.n	8003d90 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4413      	add	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d108      	bne.n	8003d90 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d88:	461a      	mov	r2, r3
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	f002 ff44 	bl	8006c18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	4619      	mov	r1, r3
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f005 fa12 	bl	80091c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3720      	adds	r7, #32
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	4f54300a 	.word	0x4f54300a
 8003dac:	4f54310a 	.word	0x4f54310a

08003db0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	333c      	adds	r3, #60	; 0x3c
 8003dc8:	3304      	adds	r3, #4
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4a15      	ldr	r2, [pc, #84]	; (8003e38 <PCD_EP_OutSetupPacket_int+0x88>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d90e      	bls.n	8003e04 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d009      	beq.n	8003e04 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e02:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f005 f9c9 	bl	800919c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4a0a      	ldr	r2, [pc, #40]	; (8003e38 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d90c      	bls.n	8003e2c <PCD_EP_OutSetupPacket_int+0x7c>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d108      	bne.n	8003e2c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6818      	ldr	r0, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e24:	461a      	mov	r2, r3
 8003e26:	2101      	movs	r1, #1
 8003e28:	f002 fef6 	bl	8006c18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	4f54300a 	.word	0x4f54300a

08003e3c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	70fb      	strb	r3, [r7, #3]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e54:	78fb      	ldrb	r3, [r7, #3]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d107      	bne.n	8003e6a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e5a:	883b      	ldrh	r3, [r7, #0]
 8003e5c:	0419      	lsls	r1, r3, #16
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	629a      	str	r2, [r3, #40]	; 0x28
 8003e68:	e028      	b.n	8003ebc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e70:	0c1b      	lsrs	r3, r3, #16
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	4413      	add	r3, r2
 8003e76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e78:	2300      	movs	r3, #0
 8003e7a:	73fb      	strb	r3, [r7, #15]
 8003e7c:	e00d      	b.n	8003e9a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
 8003e84:	3340      	adds	r3, #64	; 0x40
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	0c1b      	lsrs	r3, r3, #16
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	4413      	add	r3, r2
 8003e92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	3301      	adds	r3, #1
 8003e98:	73fb      	strb	r3, [r7, #15]
 8003e9a:	7bfa      	ldrb	r2, [r7, #15]
 8003e9c:	78fb      	ldrb	r3, [r7, #3]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d3ec      	bcc.n	8003e7e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ea4:	883b      	ldrh	r3, [r7, #0]
 8003ea6:	0418      	lsls	r0, r3, #16
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6819      	ldr	r1, [r3, #0]
 8003eac:	78fb      	ldrb	r3, [r7, #3]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	4302      	orrs	r2, r0
 8003eb4:	3340      	adds	r3, #64	; 0x40
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	887a      	ldrh	r2, [r7, #2]
 8003edc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e267      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d075      	beq.n	800400e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f22:	4b88      	ldr	r3, [pc, #544]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 030c 	and.w	r3, r3, #12
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d00c      	beq.n	8003f48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f2e:	4b85      	ldr	r3, [pc, #532]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d112      	bne.n	8003f60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f3a:	4b82      	ldr	r3, [pc, #520]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f46:	d10b      	bne.n	8003f60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f48:	4b7e      	ldr	r3, [pc, #504]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d05b      	beq.n	800400c <HAL_RCC_OscConfig+0x108>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d157      	bne.n	800400c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e242      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f68:	d106      	bne.n	8003f78 <HAL_RCC_OscConfig+0x74>
 8003f6a:	4b76      	ldr	r3, [pc, #472]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a75      	ldr	r2, [pc, #468]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	e01d      	b.n	8003fb4 <HAL_RCC_OscConfig+0xb0>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f80:	d10c      	bne.n	8003f9c <HAL_RCC_OscConfig+0x98>
 8003f82:	4b70      	ldr	r3, [pc, #448]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a6f      	ldr	r2, [pc, #444]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	4b6d      	ldr	r3, [pc, #436]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a6c      	ldr	r2, [pc, #432]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	e00b      	b.n	8003fb4 <HAL_RCC_OscConfig+0xb0>
 8003f9c:	4b69      	ldr	r3, [pc, #420]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a68      	ldr	r2, [pc, #416]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	4b66      	ldr	r3, [pc, #408]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a65      	ldr	r2, [pc, #404]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d013      	beq.n	8003fe4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbc:	f7fd fc16 	bl	80017ec <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fc4:	f7fd fc12 	bl	80017ec <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b64      	cmp	r3, #100	; 0x64
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e207      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd6:	4b5b      	ldr	r3, [pc, #364]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0f0      	beq.n	8003fc4 <HAL_RCC_OscConfig+0xc0>
 8003fe2:	e014      	b.n	800400e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe4:	f7fd fc02 	bl	80017ec <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fec:	f7fd fbfe 	bl	80017ec <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b64      	cmp	r3, #100	; 0x64
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e1f3      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ffe:	4b51      	ldr	r3, [pc, #324]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f0      	bne.n	8003fec <HAL_RCC_OscConfig+0xe8>
 800400a:	e000      	b.n	800400e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800400c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d063      	beq.n	80040e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800401a:	4b4a      	ldr	r3, [pc, #296]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 030c 	and.w	r3, r3, #12
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00b      	beq.n	800403e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004026:	4b47      	ldr	r3, [pc, #284]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800402e:	2b08      	cmp	r3, #8
 8004030:	d11c      	bne.n	800406c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004032:	4b44      	ldr	r3, [pc, #272]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d116      	bne.n	800406c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800403e:	4b41      	ldr	r3, [pc, #260]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <HAL_RCC_OscConfig+0x152>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d001      	beq.n	8004056 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e1c7      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004056:	4b3b      	ldr	r3, [pc, #236]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4937      	ldr	r1, [pc, #220]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8004066:	4313      	orrs	r3, r2
 8004068:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406a:	e03a      	b.n	80040e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d020      	beq.n	80040b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004074:	4b34      	ldr	r3, [pc, #208]	; (8004148 <HAL_RCC_OscConfig+0x244>)
 8004076:	2201      	movs	r2, #1
 8004078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407a:	f7fd fbb7 	bl	80017ec <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004082:	f7fd fbb3 	bl	80017ec <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e1a8      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004094:	4b2b      	ldr	r3, [pc, #172]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0f0      	beq.n	8004082 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a0:	4b28      	ldr	r3, [pc, #160]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	4925      	ldr	r1, [pc, #148]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	600b      	str	r3, [r1, #0]
 80040b4:	e015      	b.n	80040e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040b6:	4b24      	ldr	r3, [pc, #144]	; (8004148 <HAL_RCC_OscConfig+0x244>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7fd fb96 	bl	80017ec <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040c4:	f7fd fb92 	bl	80017ec <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e187      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040d6:	4b1b      	ldr	r3, [pc, #108]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d036      	beq.n	800415c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d016      	beq.n	8004124 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040f6:	4b15      	ldr	r3, [pc, #84]	; (800414c <HAL_RCC_OscConfig+0x248>)
 80040f8:	2201      	movs	r2, #1
 80040fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fc:	f7fd fb76 	bl	80017ec <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004104:	f7fd fb72 	bl	80017ec <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e167      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004116:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8004118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0x200>
 8004122:	e01b      	b.n	800415c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004124:	4b09      	ldr	r3, [pc, #36]	; (800414c <HAL_RCC_OscConfig+0x248>)
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800412a:	f7fd fb5f 	bl	80017ec <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004130:	e00e      	b.n	8004150 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004132:	f7fd fb5b 	bl	80017ec <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d907      	bls.n	8004150 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e150      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
 8004144:	40023800 	.word	0x40023800
 8004148:	42470000 	.word	0x42470000
 800414c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004150:	4b88      	ldr	r3, [pc, #544]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 8004152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1ea      	bne.n	8004132 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 8097 	beq.w	8004298 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416a:	2300      	movs	r3, #0
 800416c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800416e:	4b81      	ldr	r3, [pc, #516]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10f      	bne.n	800419a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800417a:	2300      	movs	r3, #0
 800417c:	60bb      	str	r3, [r7, #8]
 800417e:	4b7d      	ldr	r3, [pc, #500]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	4a7c      	ldr	r2, [pc, #496]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 8004184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004188:	6413      	str	r3, [r2, #64]	; 0x40
 800418a:	4b7a      	ldr	r3, [pc, #488]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004192:	60bb      	str	r3, [r7, #8]
 8004194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004196:	2301      	movs	r3, #1
 8004198:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419a:	4b77      	ldr	r3, [pc, #476]	; (8004378 <HAL_RCC_OscConfig+0x474>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d118      	bne.n	80041d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041a6:	4b74      	ldr	r3, [pc, #464]	; (8004378 <HAL_RCC_OscConfig+0x474>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a73      	ldr	r2, [pc, #460]	; (8004378 <HAL_RCC_OscConfig+0x474>)
 80041ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b2:	f7fd fb1b 	bl	80017ec <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ba:	f7fd fb17 	bl	80017ec <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e10c      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041cc:	4b6a      	ldr	r3, [pc, #424]	; (8004378 <HAL_RCC_OscConfig+0x474>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0f0      	beq.n	80041ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d106      	bne.n	80041ee <HAL_RCC_OscConfig+0x2ea>
 80041e0:	4b64      	ldr	r3, [pc, #400]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 80041e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e4:	4a63      	ldr	r2, [pc, #396]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 80041e6:	f043 0301 	orr.w	r3, r3, #1
 80041ea:	6713      	str	r3, [r2, #112]	; 0x70
 80041ec:	e01c      	b.n	8004228 <HAL_RCC_OscConfig+0x324>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b05      	cmp	r3, #5
 80041f4:	d10c      	bne.n	8004210 <HAL_RCC_OscConfig+0x30c>
 80041f6:	4b5f      	ldr	r3, [pc, #380]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	4a5e      	ldr	r2, [pc, #376]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 80041fc:	f043 0304 	orr.w	r3, r3, #4
 8004200:	6713      	str	r3, [r2, #112]	; 0x70
 8004202:	4b5c      	ldr	r3, [pc, #368]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	4a5b      	ldr	r2, [pc, #364]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	6713      	str	r3, [r2, #112]	; 0x70
 800420e:	e00b      	b.n	8004228 <HAL_RCC_OscConfig+0x324>
 8004210:	4b58      	ldr	r3, [pc, #352]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 8004212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004214:	4a57      	ldr	r2, [pc, #348]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	6713      	str	r3, [r2, #112]	; 0x70
 800421c:	4b55      	ldr	r3, [pc, #340]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 800421e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004220:	4a54      	ldr	r2, [pc, #336]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 8004222:	f023 0304 	bic.w	r3, r3, #4
 8004226:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d015      	beq.n	800425c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004230:	f7fd fadc 	bl	80017ec <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004236:	e00a      	b.n	800424e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004238:	f7fd fad8 	bl	80017ec <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	f241 3288 	movw	r2, #5000	; 0x1388
 8004246:	4293      	cmp	r3, r2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e0cb      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424e:	4b49      	ldr	r3, [pc, #292]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0ee      	beq.n	8004238 <HAL_RCC_OscConfig+0x334>
 800425a:	e014      	b.n	8004286 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425c:	f7fd fac6 	bl	80017ec <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004262:	e00a      	b.n	800427a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004264:	f7fd fac2 	bl	80017ec <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004272:	4293      	cmp	r3, r2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e0b5      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800427a:	4b3e      	ldr	r3, [pc, #248]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1ee      	bne.n	8004264 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004286:	7dfb      	ldrb	r3, [r7, #23]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d105      	bne.n	8004298 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800428c:	4b39      	ldr	r3, [pc, #228]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	4a38      	ldr	r2, [pc, #224]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 8004292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004296:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 80a1 	beq.w	80043e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042a2:	4b34      	ldr	r3, [pc, #208]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 030c 	and.w	r3, r3, #12
 80042aa:	2b08      	cmp	r3, #8
 80042ac:	d05c      	beq.n	8004368 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d141      	bne.n	800433a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b6:	4b31      	ldr	r3, [pc, #196]	; (800437c <HAL_RCC_OscConfig+0x478>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042bc:	f7fd fa96 	bl	80017ec <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c4:	f7fd fa92 	bl	80017ec <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e087      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d6:	4b27      	ldr	r3, [pc, #156]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f0      	bne.n	80042c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69da      	ldr	r2, [r3, #28]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	019b      	lsls	r3, r3, #6
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f8:	085b      	lsrs	r3, r3, #1
 80042fa:	3b01      	subs	r3, #1
 80042fc:	041b      	lsls	r3, r3, #16
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	061b      	lsls	r3, r3, #24
 8004306:	491b      	ldr	r1, [pc, #108]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 8004308:	4313      	orrs	r3, r2
 800430a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800430c:	4b1b      	ldr	r3, [pc, #108]	; (800437c <HAL_RCC_OscConfig+0x478>)
 800430e:	2201      	movs	r2, #1
 8004310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004312:	f7fd fa6b 	bl	80017ec <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800431a:	f7fd fa67 	bl	80017ec <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e05c      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800432c:	4b11      	ldr	r3, [pc, #68]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0f0      	beq.n	800431a <HAL_RCC_OscConfig+0x416>
 8004338:	e054      	b.n	80043e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800433a:	4b10      	ldr	r3, [pc, #64]	; (800437c <HAL_RCC_OscConfig+0x478>)
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004340:	f7fd fa54 	bl	80017ec <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004348:	f7fd fa50 	bl	80017ec <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e045      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435a:	4b06      	ldr	r3, [pc, #24]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1f0      	bne.n	8004348 <HAL_RCC_OscConfig+0x444>
 8004366:	e03d      	b.n	80043e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d107      	bne.n	8004380 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e038      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
 8004374:	40023800 	.word	0x40023800
 8004378:	40007000 	.word	0x40007000
 800437c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004380:	4b1b      	ldr	r3, [pc, #108]	; (80043f0 <HAL_RCC_OscConfig+0x4ec>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d028      	beq.n	80043e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004398:	429a      	cmp	r2, r3
 800439a:	d121      	bne.n	80043e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d11a      	bne.n	80043e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043b0:	4013      	ands	r3, r2
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d111      	bne.n	80043e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c6:	085b      	lsrs	r3, r3, #1
 80043c8:	3b01      	subs	r3, #1
 80043ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d107      	bne.n	80043e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043dc:	429a      	cmp	r2, r3
 80043de:	d001      	beq.n	80043e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e000      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40023800 	.word	0x40023800

080043f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e0cc      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004408:	4b68      	ldr	r3, [pc, #416]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d90c      	bls.n	8004430 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004416:	4b65      	ldr	r3, [pc, #404]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800441e:	4b63      	ldr	r3, [pc, #396]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d001      	beq.n	8004430 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e0b8      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d020      	beq.n	800447e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004448:	4b59      	ldr	r3, [pc, #356]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	4a58      	ldr	r2, [pc, #352]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004452:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0308 	and.w	r3, r3, #8
 800445c:	2b00      	cmp	r3, #0
 800445e:	d005      	beq.n	800446c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004460:	4b53      	ldr	r3, [pc, #332]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	4a52      	ldr	r2, [pc, #328]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800446a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800446c:	4b50      	ldr	r3, [pc, #320]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	494d      	ldr	r1, [pc, #308]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	4313      	orrs	r3, r2
 800447c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d044      	beq.n	8004514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d107      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004492:	4b47      	ldr	r3, [pc, #284]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d119      	bne.n	80044d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e07f      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d003      	beq.n	80044b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d107      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b2:	4b3f      	ldr	r3, [pc, #252]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d109      	bne.n	80044d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e06f      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c2:	4b3b      	ldr	r3, [pc, #236]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e067      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044d2:	4b37      	ldr	r3, [pc, #220]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f023 0203 	bic.w	r2, r3, #3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	4934      	ldr	r1, [pc, #208]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044e4:	f7fd f982 	bl	80017ec <HAL_GetTick>
 80044e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ea:	e00a      	b.n	8004502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ec:	f7fd f97e 	bl	80017ec <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e04f      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004502:	4b2b      	ldr	r3, [pc, #172]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 020c 	and.w	r2, r3, #12
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	429a      	cmp	r2, r3
 8004512:	d1eb      	bne.n	80044ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004514:	4b25      	ldr	r3, [pc, #148]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d20c      	bcs.n	800453c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004522:	4b22      	ldr	r3, [pc, #136]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452a:	4b20      	ldr	r3, [pc, #128]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	d001      	beq.n	800453c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e032      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004548:	4b19      	ldr	r3, [pc, #100]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4916      	ldr	r1, [pc, #88]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	4313      	orrs	r3, r2
 8004558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d009      	beq.n	800457a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004566:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	490e      	ldr	r1, [pc, #56]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	4313      	orrs	r3, r2
 8004578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800457a:	f000 f821 	bl	80045c0 <HAL_RCC_GetSysClockFreq>
 800457e:	4602      	mov	r2, r0
 8004580:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	091b      	lsrs	r3, r3, #4
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	490a      	ldr	r1, [pc, #40]	; (80045b4 <HAL_RCC_ClockConfig+0x1c0>)
 800458c:	5ccb      	ldrb	r3, [r1, r3]
 800458e:	fa22 f303 	lsr.w	r3, r2, r3
 8004592:	4a09      	ldr	r2, [pc, #36]	; (80045b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004596:	4b09      	ldr	r3, [pc, #36]	; (80045bc <HAL_RCC_ClockConfig+0x1c8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f7fd f8e2 	bl	8001764 <HAL_InitTick>

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40023c00 	.word	0x40023c00
 80045b0:	40023800 	.word	0x40023800
 80045b4:	0800a65c 	.word	0x0800a65c
 80045b8:	20000004 	.word	0x20000004
 80045bc:	20000008 	.word	0x20000008

080045c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045c4:	b094      	sub	sp, #80	; 0x50
 80045c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	647b      	str	r3, [r7, #68]	; 0x44
 80045cc:	2300      	movs	r3, #0
 80045ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045d0:	2300      	movs	r3, #0
 80045d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045d8:	4b79      	ldr	r3, [pc, #484]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 030c 	and.w	r3, r3, #12
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d00d      	beq.n	8004600 <HAL_RCC_GetSysClockFreq+0x40>
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	f200 80e1 	bhi.w	80047ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <HAL_RCC_GetSysClockFreq+0x34>
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d003      	beq.n	80045fa <HAL_RCC_GetSysClockFreq+0x3a>
 80045f2:	e0db      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045f4:	4b73      	ldr	r3, [pc, #460]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80045f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80045f8:	e0db      	b.n	80047b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045fa:	4b73      	ldr	r3, [pc, #460]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80045fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045fe:	e0d8      	b.n	80047b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004600:	4b6f      	ldr	r3, [pc, #444]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004608:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800460a:	4b6d      	ldr	r3, [pc, #436]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d063      	beq.n	80046de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004616:	4b6a      	ldr	r3, [pc, #424]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	099b      	lsrs	r3, r3, #6
 800461c:	2200      	movs	r2, #0
 800461e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004620:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004628:	633b      	str	r3, [r7, #48]	; 0x30
 800462a:	2300      	movs	r3, #0
 800462c:	637b      	str	r3, [r7, #52]	; 0x34
 800462e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004632:	4622      	mov	r2, r4
 8004634:	462b      	mov	r3, r5
 8004636:	f04f 0000 	mov.w	r0, #0
 800463a:	f04f 0100 	mov.w	r1, #0
 800463e:	0159      	lsls	r1, r3, #5
 8004640:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004644:	0150      	lsls	r0, r2, #5
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	4621      	mov	r1, r4
 800464c:	1a51      	subs	r1, r2, r1
 800464e:	6139      	str	r1, [r7, #16]
 8004650:	4629      	mov	r1, r5
 8004652:	eb63 0301 	sbc.w	r3, r3, r1
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004664:	4659      	mov	r1, fp
 8004666:	018b      	lsls	r3, r1, #6
 8004668:	4651      	mov	r1, sl
 800466a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800466e:	4651      	mov	r1, sl
 8004670:	018a      	lsls	r2, r1, #6
 8004672:	4651      	mov	r1, sl
 8004674:	ebb2 0801 	subs.w	r8, r2, r1
 8004678:	4659      	mov	r1, fp
 800467a:	eb63 0901 	sbc.w	r9, r3, r1
 800467e:	f04f 0200 	mov.w	r2, #0
 8004682:	f04f 0300 	mov.w	r3, #0
 8004686:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800468a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800468e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004692:	4690      	mov	r8, r2
 8004694:	4699      	mov	r9, r3
 8004696:	4623      	mov	r3, r4
 8004698:	eb18 0303 	adds.w	r3, r8, r3
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	462b      	mov	r3, r5
 80046a0:	eb49 0303 	adc.w	r3, r9, r3
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	f04f 0200 	mov.w	r2, #0
 80046aa:	f04f 0300 	mov.w	r3, #0
 80046ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046b2:	4629      	mov	r1, r5
 80046b4:	024b      	lsls	r3, r1, #9
 80046b6:	4621      	mov	r1, r4
 80046b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046bc:	4621      	mov	r1, r4
 80046be:	024a      	lsls	r2, r1, #9
 80046c0:	4610      	mov	r0, r2
 80046c2:	4619      	mov	r1, r3
 80046c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c6:	2200      	movs	r2, #0
 80046c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046d0:	f7fb fdce 	bl	8000270 <__aeabi_uldivmod>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	4613      	mov	r3, r2
 80046da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046dc:	e058      	b.n	8004790 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046de:	4b38      	ldr	r3, [pc, #224]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	099b      	lsrs	r3, r3, #6
 80046e4:	2200      	movs	r2, #0
 80046e6:	4618      	mov	r0, r3
 80046e8:	4611      	mov	r1, r2
 80046ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046ee:	623b      	str	r3, [r7, #32]
 80046f0:	2300      	movs	r3, #0
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
 80046f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046f8:	4642      	mov	r2, r8
 80046fa:	464b      	mov	r3, r9
 80046fc:	f04f 0000 	mov.w	r0, #0
 8004700:	f04f 0100 	mov.w	r1, #0
 8004704:	0159      	lsls	r1, r3, #5
 8004706:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800470a:	0150      	lsls	r0, r2, #5
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4641      	mov	r1, r8
 8004712:	ebb2 0a01 	subs.w	sl, r2, r1
 8004716:	4649      	mov	r1, r9
 8004718:	eb63 0b01 	sbc.w	fp, r3, r1
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004728:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800472c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004730:	ebb2 040a 	subs.w	r4, r2, sl
 8004734:	eb63 050b 	sbc.w	r5, r3, fp
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	00eb      	lsls	r3, r5, #3
 8004742:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004746:	00e2      	lsls	r2, r4, #3
 8004748:	4614      	mov	r4, r2
 800474a:	461d      	mov	r5, r3
 800474c:	4643      	mov	r3, r8
 800474e:	18e3      	adds	r3, r4, r3
 8004750:	603b      	str	r3, [r7, #0]
 8004752:	464b      	mov	r3, r9
 8004754:	eb45 0303 	adc.w	r3, r5, r3
 8004758:	607b      	str	r3, [r7, #4]
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004766:	4629      	mov	r1, r5
 8004768:	028b      	lsls	r3, r1, #10
 800476a:	4621      	mov	r1, r4
 800476c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004770:	4621      	mov	r1, r4
 8004772:	028a      	lsls	r2, r1, #10
 8004774:	4610      	mov	r0, r2
 8004776:	4619      	mov	r1, r3
 8004778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800477a:	2200      	movs	r2, #0
 800477c:	61bb      	str	r3, [r7, #24]
 800477e:	61fa      	str	r2, [r7, #28]
 8004780:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004784:	f7fb fd74 	bl	8000270 <__aeabi_uldivmod>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4613      	mov	r3, r2
 800478e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	0c1b      	lsrs	r3, r3, #16
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	3301      	adds	r3, #1
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80047a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047aa:	e002      	b.n	80047b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047ac:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80047ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3750      	adds	r7, #80	; 0x50
 80047b8:	46bd      	mov	sp, r7
 80047ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047be:	bf00      	nop
 80047c0:	40023800 	.word	0x40023800
 80047c4:	00f42400 	.word	0x00f42400
 80047c8:	007a1200 	.word	0x007a1200

080047cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d0:	4b03      	ldr	r3, [pc, #12]	; (80047e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047d2:	681b      	ldr	r3, [r3, #0]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	20000004 	.word	0x20000004

080047e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047e8:	f7ff fff0 	bl	80047cc <HAL_RCC_GetHCLKFreq>
 80047ec:	4602      	mov	r2, r0
 80047ee:	4b05      	ldr	r3, [pc, #20]	; (8004804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	0a9b      	lsrs	r3, r3, #10
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	4903      	ldr	r1, [pc, #12]	; (8004808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047fa:	5ccb      	ldrb	r3, [r1, r3]
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004800:	4618      	mov	r0, r3
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40023800 	.word	0x40023800
 8004808:	0800a66c 	.word	0x0800a66c

0800480c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004814:	2300      	movs	r3, #0
 8004816:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b00      	cmp	r3, #0
 8004826:	d105      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004830:	2b00      	cmp	r3, #0
 8004832:	d035      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004834:	4b62      	ldr	r3, [pc, #392]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004836:	2200      	movs	r2, #0
 8004838:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800483a:	f7fc ffd7 	bl	80017ec <HAL_GetTick>
 800483e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004840:	e008      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004842:	f7fc ffd3 	bl	80017ec <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e0b0      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004854:	4b5b      	ldr	r3, [pc, #364]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1f0      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	019a      	lsls	r2, r3, #6
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	071b      	lsls	r3, r3, #28
 800486c:	4955      	ldr	r1, [pc, #340]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800486e:	4313      	orrs	r3, r2
 8004870:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004874:	4b52      	ldr	r3, [pc, #328]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004876:	2201      	movs	r2, #1
 8004878:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800487a:	f7fc ffb7 	bl	80017ec <HAL_GetTick>
 800487e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004880:	e008      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004882:	f7fc ffb3 	bl	80017ec <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e090      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004894:	4b4b      	ldr	r3, [pc, #300]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f0      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 8083 	beq.w	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	4b44      	ldr	r3, [pc, #272]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	4a43      	ldr	r2, [pc, #268]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048bc:	6413      	str	r3, [r2, #64]	; 0x40
 80048be:	4b41      	ldr	r3, [pc, #260]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80048ca:	4b3f      	ldr	r3, [pc, #252]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a3e      	ldr	r2, [pc, #248]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80048d6:	f7fc ff89 	bl	80017ec <HAL_GetTick>
 80048da:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80048dc:	e008      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80048de:	f7fc ff85 	bl	80017ec <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e062      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80048f0:	4b35      	ldr	r3, [pc, #212]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0f0      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048fc:	4b31      	ldr	r3, [pc, #196]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004904:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d02f      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	429a      	cmp	r2, r3
 8004918:	d028      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800491a:	4b2a      	ldr	r3, [pc, #168]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800491c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004922:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004924:	4b29      	ldr	r3, [pc, #164]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004926:	2201      	movs	r2, #1
 8004928:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800492a:	4b28      	ldr	r3, [pc, #160]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004930:	4a24      	ldr	r2, [pc, #144]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004936:	4b23      	ldr	r3, [pc, #140]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b01      	cmp	r3, #1
 8004940:	d114      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004942:	f7fc ff53 	bl	80017ec <HAL_GetTick>
 8004946:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004948:	e00a      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800494a:	f7fc ff4f 	bl	80017ec <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	f241 3288 	movw	r2, #5000	; 0x1388
 8004958:	4293      	cmp	r3, r2
 800495a:	d901      	bls.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e02a      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004960:	4b18      	ldr	r3, [pc, #96]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0ee      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004974:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004978:	d10d      	bne.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800497a:	4b12      	ldr	r3, [pc, #72]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800498a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498e:	490d      	ldr	r1, [pc, #52]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004990:	4313      	orrs	r3, r2
 8004992:	608b      	str	r3, [r1, #8]
 8004994:	e005      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004996:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	4a0a      	ldr	r2, [pc, #40]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800499c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80049a0:	6093      	str	r3, [r2, #8]
 80049a2:	4b08      	ldr	r3, [pc, #32]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ae:	4905      	ldr	r1, [pc, #20]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	42470068 	.word	0x42470068
 80049c4:	40023800 	.word	0x40023800
 80049c8:	40007000 	.word	0x40007000
 80049cc:	42470e40 	.word	0x42470e40

080049d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d13e      	bne.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80049ee:	4b23      	ldr	r3, [pc, #140]	; (8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d005      	beq.n	8004a0a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d12f      	bne.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a04:	4b1e      	ldr	r3, [pc, #120]	; (8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a06:	617b      	str	r3, [r7, #20]
          break;
 8004a08:	e02f      	b.n	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004a0a:	4b1c      	ldr	r3, [pc, #112]	; (8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a16:	d108      	bne.n	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a18:	4b18      	ldr	r3, [pc, #96]	; (8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a20:	4a18      	ldr	r2, [pc, #96]	; (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	e007      	b.n	8004a3a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a2a:	4b14      	ldr	r3, [pc, #80]	; (8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a32:	4a15      	ldr	r2, [pc, #84]	; (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a38:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004a3a:	4b10      	ldr	r3, [pc, #64]	; (8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a40:	099b      	lsrs	r3, r3, #6
 8004a42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	fb02 f303 	mul.w	r3, r2, r3
 8004a4c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004a4e:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a54:	0f1b      	lsrs	r3, r3, #28
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a60:	617b      	str	r3, [r7, #20]
          break;
 8004a62:	e002      	b.n	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	617b      	str	r3, [r7, #20]
          break;
 8004a68:	bf00      	nop
        }
      }
      break;
 8004a6a:	bf00      	nop
    }
  }
  return frequency;
 8004a6c:	697b      	ldr	r3, [r7, #20]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	00bb8000 	.word	0x00bb8000
 8004a84:	007a1200 	.word	0x007a1200
 8004a88:	00f42400 	.word	0x00f42400

08004a8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e07b      	b.n	8004b96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d108      	bne.n	8004ab8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aae:	d009      	beq.n	8004ac4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	61da      	str	r2, [r3, #28]
 8004ab6:	e005      	b.n	8004ac4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7fc fc0e 	bl	8001300 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004afa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	431a      	orrs	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b48:	ea42 0103 	orr.w	r1, r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	0c1b      	lsrs	r3, r3, #16
 8004b62:	f003 0104 	and.w	r1, r3, #4
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	f003 0210 	and.w	r2, r3, #16
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69da      	ldr	r2, [r3, #28]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b082      	sub	sp, #8
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e041      	b.n	8004c34 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d106      	bne.n	8004bca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7fc fbe3 	bl	8001390 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	3304      	adds	r3, #4
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4610      	mov	r0, r2
 8004bde:	f000 fa95 	bl	800510c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d001      	beq.n	8004c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e04e      	b.n	8004cf2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 0201 	orr.w	r2, r2, #1
 8004c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a23      	ldr	r2, [pc, #140]	; (8004d00 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d022      	beq.n	8004cbc <HAL_TIM_Base_Start_IT+0x80>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7e:	d01d      	beq.n	8004cbc <HAL_TIM_Base_Start_IT+0x80>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1f      	ldr	r2, [pc, #124]	; (8004d04 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d018      	beq.n	8004cbc <HAL_TIM_Base_Start_IT+0x80>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a1e      	ldr	r2, [pc, #120]	; (8004d08 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d013      	beq.n	8004cbc <HAL_TIM_Base_Start_IT+0x80>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a1c      	ldr	r2, [pc, #112]	; (8004d0c <HAL_TIM_Base_Start_IT+0xd0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00e      	beq.n	8004cbc <HAL_TIM_Base_Start_IT+0x80>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a1b      	ldr	r2, [pc, #108]	; (8004d10 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d009      	beq.n	8004cbc <HAL_TIM_Base_Start_IT+0x80>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a19      	ldr	r2, [pc, #100]	; (8004d14 <HAL_TIM_Base_Start_IT+0xd8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d004      	beq.n	8004cbc <HAL_TIM_Base_Start_IT+0x80>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a18      	ldr	r2, [pc, #96]	; (8004d18 <HAL_TIM_Base_Start_IT+0xdc>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d111      	bne.n	8004ce0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2b06      	cmp	r3, #6
 8004ccc:	d010      	beq.n	8004cf0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f042 0201 	orr.w	r2, r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cde:	e007      	b.n	8004cf0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0201 	orr.w	r2, r2, #1
 8004cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40010000 	.word	0x40010000
 8004d04:	40000400 	.word	0x40000400
 8004d08:	40000800 	.word	0x40000800
 8004d0c:	40000c00 	.word	0x40000c00
 8004d10:	40010400 	.word	0x40010400
 8004d14:	40014000 	.word	0x40014000
 8004d18:	40001800 	.word	0x40001800

08004d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d122      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d11b      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f06f 0202 	mvn.w	r2, #2
 8004d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f9b5 	bl	80050ce <HAL_TIM_IC_CaptureCallback>
 8004d64:	e005      	b.n	8004d72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f9a7 	bl	80050ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f9b8 	bl	80050e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d122      	bne.n	8004dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	d11b      	bne.n	8004dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f06f 0204 	mvn.w	r2, #4
 8004d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2202      	movs	r2, #2
 8004da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f98b 	bl	80050ce <HAL_TIM_IC_CaptureCallback>
 8004db8:	e005      	b.n	8004dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f97d 	bl	80050ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f98e 	bl	80050e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b08      	cmp	r3, #8
 8004dd8:	d122      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f003 0308 	and.w	r3, r3, #8
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d11b      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f06f 0208 	mvn.w	r2, #8
 8004df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2204      	movs	r2, #4
 8004df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f961 	bl	80050ce <HAL_TIM_IC_CaptureCallback>
 8004e0c:	e005      	b.n	8004e1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f953 	bl	80050ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f964 	bl	80050e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	f003 0310 	and.w	r3, r3, #16
 8004e2a:	2b10      	cmp	r3, #16
 8004e2c:	d122      	bne.n	8004e74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f003 0310 	and.w	r3, r3, #16
 8004e38:	2b10      	cmp	r3, #16
 8004e3a:	d11b      	bne.n	8004e74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f06f 0210 	mvn.w	r2, #16
 8004e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2208      	movs	r2, #8
 8004e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f937 	bl	80050ce <HAL_TIM_IC_CaptureCallback>
 8004e60:	e005      	b.n	8004e6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f929 	bl	80050ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f93a 	bl	80050e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d10e      	bne.n	8004ea0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d107      	bne.n	8004ea0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f06f 0201 	mvn.w	r2, #1
 8004e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fb ff4e 	bl	8000d3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eaa:	2b80      	cmp	r3, #128	; 0x80
 8004eac:	d10e      	bne.n	8004ecc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb8:	2b80      	cmp	r3, #128	; 0x80
 8004eba:	d107      	bne.n	8004ecc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fae0 	bl	800548c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed6:	2b40      	cmp	r3, #64	; 0x40
 8004ed8:	d10e      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee4:	2b40      	cmp	r3, #64	; 0x40
 8004ee6:	d107      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f8ff 	bl	80050f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f003 0320 	and.w	r3, r3, #32
 8004f02:	2b20      	cmp	r3, #32
 8004f04:	d10e      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f003 0320 	and.w	r3, r3, #32
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	d107      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f06f 0220 	mvn.w	r2, #32
 8004f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 faaa 	bl	8005478 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f24:	bf00      	nop
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_TIM_ConfigClockSource+0x1c>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e0b4      	b.n	80050b2 <HAL_TIM_ConfigClockSource+0x186>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f80:	d03e      	beq.n	8005000 <HAL_TIM_ConfigClockSource+0xd4>
 8004f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f86:	f200 8087 	bhi.w	8005098 <HAL_TIM_ConfigClockSource+0x16c>
 8004f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f8e:	f000 8086 	beq.w	800509e <HAL_TIM_ConfigClockSource+0x172>
 8004f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f96:	d87f      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x16c>
 8004f98:	2b70      	cmp	r3, #112	; 0x70
 8004f9a:	d01a      	beq.n	8004fd2 <HAL_TIM_ConfigClockSource+0xa6>
 8004f9c:	2b70      	cmp	r3, #112	; 0x70
 8004f9e:	d87b      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa0:	2b60      	cmp	r3, #96	; 0x60
 8004fa2:	d050      	beq.n	8005046 <HAL_TIM_ConfigClockSource+0x11a>
 8004fa4:	2b60      	cmp	r3, #96	; 0x60
 8004fa6:	d877      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa8:	2b50      	cmp	r3, #80	; 0x50
 8004faa:	d03c      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0xfa>
 8004fac:	2b50      	cmp	r3, #80	; 0x50
 8004fae:	d873      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb0:	2b40      	cmp	r3, #64	; 0x40
 8004fb2:	d058      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x13a>
 8004fb4:	2b40      	cmp	r3, #64	; 0x40
 8004fb6:	d86f      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb8:	2b30      	cmp	r3, #48	; 0x30
 8004fba:	d064      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x15a>
 8004fbc:	2b30      	cmp	r3, #48	; 0x30
 8004fbe:	d86b      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc0:	2b20      	cmp	r3, #32
 8004fc2:	d060      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x15a>
 8004fc4:	2b20      	cmp	r3, #32
 8004fc6:	d867      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d05c      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x15a>
 8004fcc:	2b10      	cmp	r3, #16
 8004fce:	d05a      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x15a>
 8004fd0:	e062      	b.n	8005098 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6818      	ldr	r0, [r3, #0]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	6899      	ldr	r1, [r3, #8]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f000 f9ad 	bl	8005340 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ff4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	609a      	str	r2, [r3, #8]
      break;
 8004ffe:	e04f      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6818      	ldr	r0, [r3, #0]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	6899      	ldr	r1, [r3, #8]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f000 f996 	bl	8005340 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005022:	609a      	str	r2, [r3, #8]
      break;
 8005024:	e03c      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6818      	ldr	r0, [r3, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6859      	ldr	r1, [r3, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	461a      	mov	r2, r3
 8005034:	f000 f90a 	bl	800524c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2150      	movs	r1, #80	; 0x50
 800503e:	4618      	mov	r0, r3
 8005040:	f000 f963 	bl	800530a <TIM_ITRx_SetConfig>
      break;
 8005044:	e02c      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	6859      	ldr	r1, [r3, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	461a      	mov	r2, r3
 8005054:	f000 f929 	bl	80052aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2160      	movs	r1, #96	; 0x60
 800505e:	4618      	mov	r0, r3
 8005060:	f000 f953 	bl	800530a <TIM_ITRx_SetConfig>
      break;
 8005064:	e01c      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6859      	ldr	r1, [r3, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	461a      	mov	r2, r3
 8005074:	f000 f8ea 	bl	800524c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2140      	movs	r1, #64	; 0x40
 800507e:	4618      	mov	r0, r3
 8005080:	f000 f943 	bl	800530a <TIM_ITRx_SetConfig>
      break;
 8005084:	e00c      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4619      	mov	r1, r3
 8005090:	4610      	mov	r0, r2
 8005092:	f000 f93a 	bl	800530a <TIM_ITRx_SetConfig>
      break;
 8005096:	e003      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	73fb      	strb	r3, [r7, #15]
      break;
 800509c:	e000      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800509e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
	...

0800510c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a40      	ldr	r2, [pc, #256]	; (8005220 <TIM_Base_SetConfig+0x114>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d013      	beq.n	800514c <TIM_Base_SetConfig+0x40>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512a:	d00f      	beq.n	800514c <TIM_Base_SetConfig+0x40>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a3d      	ldr	r2, [pc, #244]	; (8005224 <TIM_Base_SetConfig+0x118>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00b      	beq.n	800514c <TIM_Base_SetConfig+0x40>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a3c      	ldr	r2, [pc, #240]	; (8005228 <TIM_Base_SetConfig+0x11c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d007      	beq.n	800514c <TIM_Base_SetConfig+0x40>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a3b      	ldr	r2, [pc, #236]	; (800522c <TIM_Base_SetConfig+0x120>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d003      	beq.n	800514c <TIM_Base_SetConfig+0x40>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a3a      	ldr	r2, [pc, #232]	; (8005230 <TIM_Base_SetConfig+0x124>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d108      	bne.n	800515e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a2f      	ldr	r2, [pc, #188]	; (8005220 <TIM_Base_SetConfig+0x114>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d02b      	beq.n	80051be <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800516c:	d027      	beq.n	80051be <TIM_Base_SetConfig+0xb2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a2c      	ldr	r2, [pc, #176]	; (8005224 <TIM_Base_SetConfig+0x118>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d023      	beq.n	80051be <TIM_Base_SetConfig+0xb2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a2b      	ldr	r2, [pc, #172]	; (8005228 <TIM_Base_SetConfig+0x11c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d01f      	beq.n	80051be <TIM_Base_SetConfig+0xb2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a2a      	ldr	r2, [pc, #168]	; (800522c <TIM_Base_SetConfig+0x120>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d01b      	beq.n	80051be <TIM_Base_SetConfig+0xb2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a29      	ldr	r2, [pc, #164]	; (8005230 <TIM_Base_SetConfig+0x124>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d017      	beq.n	80051be <TIM_Base_SetConfig+0xb2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a28      	ldr	r2, [pc, #160]	; (8005234 <TIM_Base_SetConfig+0x128>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d013      	beq.n	80051be <TIM_Base_SetConfig+0xb2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a27      	ldr	r2, [pc, #156]	; (8005238 <TIM_Base_SetConfig+0x12c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00f      	beq.n	80051be <TIM_Base_SetConfig+0xb2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a26      	ldr	r2, [pc, #152]	; (800523c <TIM_Base_SetConfig+0x130>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00b      	beq.n	80051be <TIM_Base_SetConfig+0xb2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a25      	ldr	r2, [pc, #148]	; (8005240 <TIM_Base_SetConfig+0x134>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d007      	beq.n	80051be <TIM_Base_SetConfig+0xb2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a24      	ldr	r2, [pc, #144]	; (8005244 <TIM_Base_SetConfig+0x138>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d003      	beq.n	80051be <TIM_Base_SetConfig+0xb2>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a23      	ldr	r2, [pc, #140]	; (8005248 <TIM_Base_SetConfig+0x13c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d108      	bne.n	80051d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a0a      	ldr	r2, [pc, #40]	; (8005220 <TIM_Base_SetConfig+0x114>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d003      	beq.n	8005204 <TIM_Base_SetConfig+0xf8>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a0c      	ldr	r2, [pc, #48]	; (8005230 <TIM_Base_SetConfig+0x124>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d103      	bne.n	800520c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	615a      	str	r2, [r3, #20]
}
 8005212:	bf00      	nop
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40010000 	.word	0x40010000
 8005224:	40000400 	.word	0x40000400
 8005228:	40000800 	.word	0x40000800
 800522c:	40000c00 	.word	0x40000c00
 8005230:	40010400 	.word	0x40010400
 8005234:	40014000 	.word	0x40014000
 8005238:	40014400 	.word	0x40014400
 800523c:	40014800 	.word	0x40014800
 8005240:	40001800 	.word	0x40001800
 8005244:	40001c00 	.word	0x40001c00
 8005248:	40002000 	.word	0x40002000

0800524c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f023 0201 	bic.w	r2, r3, #1
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f023 030a 	bic.w	r3, r3, #10
 8005288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	621a      	str	r2, [r3, #32]
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b087      	sub	sp, #28
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	60f8      	str	r0, [r7, #12]
 80052b2:	60b9      	str	r1, [r7, #8]
 80052b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	f023 0210 	bic.w	r2, r3, #16
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	031b      	lsls	r3, r3, #12
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	4313      	orrs	r3, r2
 80052de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	621a      	str	r2, [r3, #32]
}
 80052fe:	bf00      	nop
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800530a:	b480      	push	{r7}
 800530c:	b085      	sub	sp, #20
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005320:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	f043 0307 	orr.w	r3, r3, #7
 800532c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	609a      	str	r2, [r3, #8]
}
 8005334:	bf00      	nop
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800535a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	021a      	lsls	r2, r3, #8
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	431a      	orrs	r2, r3
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4313      	orrs	r3, r2
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	609a      	str	r2, [r3, #8]
}
 8005374:	bf00      	nop
 8005376:	371c      	adds	r7, #28
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005390:	2b01      	cmp	r3, #1
 8005392:	d101      	bne.n	8005398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005394:	2302      	movs	r3, #2
 8005396:	e05a      	b.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a21      	ldr	r2, [pc, #132]	; (800545c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d022      	beq.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e4:	d01d      	beq.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a1d      	ldr	r2, [pc, #116]	; (8005460 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d018      	beq.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a1b      	ldr	r2, [pc, #108]	; (8005464 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d013      	beq.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a1a      	ldr	r2, [pc, #104]	; (8005468 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d00e      	beq.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a18      	ldr	r2, [pc, #96]	; (800546c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d009      	beq.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a17      	ldr	r2, [pc, #92]	; (8005470 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d004      	beq.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a15      	ldr	r2, [pc, #84]	; (8005474 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d10c      	bne.n	800543c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005428:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	4313      	orrs	r3, r2
 8005432:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40010000 	.word	0x40010000
 8005460:	40000400 	.word	0x40000400
 8005464:	40000800 	.word	0x40000800
 8005468:	40000c00 	.word	0x40000c00
 800546c:	40010400 	.word	0x40010400
 8005470:	40014000 	.word	0x40014000
 8005474:	40001800 	.word	0x40001800

08005478 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054a0:	b084      	sub	sp, #16
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	f107 001c 	add.w	r0, r7, #28
 80054ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d122      	bne.n	80054fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80054cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d105      	bne.n	80054f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f001 fbee 	bl	8006cd4 <USB_CoreReset>
 80054f8:	4603      	mov	r3, r0
 80054fa:	73fb      	strb	r3, [r7, #15]
 80054fc:	e01a      	b.n	8005534 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f001 fbe2 	bl	8006cd4 <USB_CoreReset>
 8005510:	4603      	mov	r3, r0
 8005512:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005516:	2b00      	cmp	r3, #0
 8005518:	d106      	bne.n	8005528 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	639a      	str	r2, [r3, #56]	; 0x38
 8005526:	e005      	b.n	8005534 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005536:	2b01      	cmp	r3, #1
 8005538:	d10b      	bne.n	8005552 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f043 0206 	orr.w	r2, r3, #6
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f043 0220 	orr.w	r2, r3, #32
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005552:	7bfb      	ldrb	r3, [r7, #15]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800555e:	b004      	add	sp, #16
 8005560:	4770      	bx	lr
	...

08005564 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	4613      	mov	r3, r2
 8005570:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005572:	79fb      	ldrb	r3, [r7, #7]
 8005574:	2b02      	cmp	r3, #2
 8005576:	d165      	bne.n	8005644 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4a41      	ldr	r2, [pc, #260]	; (8005680 <USB_SetTurnaroundTime+0x11c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d906      	bls.n	800558e <USB_SetTurnaroundTime+0x2a>
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	4a40      	ldr	r2, [pc, #256]	; (8005684 <USB_SetTurnaroundTime+0x120>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d202      	bcs.n	800558e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005588:	230f      	movs	r3, #15
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	e062      	b.n	8005654 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	4a3c      	ldr	r2, [pc, #240]	; (8005684 <USB_SetTurnaroundTime+0x120>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d306      	bcc.n	80055a4 <USB_SetTurnaroundTime+0x40>
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	4a3b      	ldr	r2, [pc, #236]	; (8005688 <USB_SetTurnaroundTime+0x124>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d202      	bcs.n	80055a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800559e:	230e      	movs	r3, #14
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	e057      	b.n	8005654 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4a38      	ldr	r2, [pc, #224]	; (8005688 <USB_SetTurnaroundTime+0x124>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d306      	bcc.n	80055ba <USB_SetTurnaroundTime+0x56>
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4a37      	ldr	r2, [pc, #220]	; (800568c <USB_SetTurnaroundTime+0x128>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d202      	bcs.n	80055ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80055b4:	230d      	movs	r3, #13
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	e04c      	b.n	8005654 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	4a33      	ldr	r2, [pc, #204]	; (800568c <USB_SetTurnaroundTime+0x128>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d306      	bcc.n	80055d0 <USB_SetTurnaroundTime+0x6c>
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	4a32      	ldr	r2, [pc, #200]	; (8005690 <USB_SetTurnaroundTime+0x12c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d802      	bhi.n	80055d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80055ca:	230c      	movs	r3, #12
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	e041      	b.n	8005654 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4a2f      	ldr	r2, [pc, #188]	; (8005690 <USB_SetTurnaroundTime+0x12c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d906      	bls.n	80055e6 <USB_SetTurnaroundTime+0x82>
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	4a2e      	ldr	r2, [pc, #184]	; (8005694 <USB_SetTurnaroundTime+0x130>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d802      	bhi.n	80055e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80055e0:	230b      	movs	r3, #11
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	e036      	b.n	8005654 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	4a2a      	ldr	r2, [pc, #168]	; (8005694 <USB_SetTurnaroundTime+0x130>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d906      	bls.n	80055fc <USB_SetTurnaroundTime+0x98>
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	4a29      	ldr	r2, [pc, #164]	; (8005698 <USB_SetTurnaroundTime+0x134>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d802      	bhi.n	80055fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80055f6:	230a      	movs	r3, #10
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	e02b      	b.n	8005654 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4a26      	ldr	r2, [pc, #152]	; (8005698 <USB_SetTurnaroundTime+0x134>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d906      	bls.n	8005612 <USB_SetTurnaroundTime+0xae>
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4a25      	ldr	r2, [pc, #148]	; (800569c <USB_SetTurnaroundTime+0x138>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d202      	bcs.n	8005612 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800560c:	2309      	movs	r3, #9
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	e020      	b.n	8005654 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	4a21      	ldr	r2, [pc, #132]	; (800569c <USB_SetTurnaroundTime+0x138>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d306      	bcc.n	8005628 <USB_SetTurnaroundTime+0xc4>
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	4a20      	ldr	r2, [pc, #128]	; (80056a0 <USB_SetTurnaroundTime+0x13c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d802      	bhi.n	8005628 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005622:	2308      	movs	r3, #8
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	e015      	b.n	8005654 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	4a1d      	ldr	r2, [pc, #116]	; (80056a0 <USB_SetTurnaroundTime+0x13c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d906      	bls.n	800563e <USB_SetTurnaroundTime+0xda>
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	4a1c      	ldr	r2, [pc, #112]	; (80056a4 <USB_SetTurnaroundTime+0x140>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d202      	bcs.n	800563e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005638:	2307      	movs	r3, #7
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	e00a      	b.n	8005654 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800563e:	2306      	movs	r3, #6
 8005640:	617b      	str	r3, [r7, #20]
 8005642:	e007      	b.n	8005654 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005644:	79fb      	ldrb	r3, [r7, #7]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d102      	bne.n	8005650 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800564a:	2309      	movs	r3, #9
 800564c:	617b      	str	r3, [r7, #20]
 800564e:	e001      	b.n	8005654 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005650:	2309      	movs	r3, #9
 8005652:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	029b      	lsls	r3, r3, #10
 8005668:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800566c:	431a      	orrs	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	371c      	adds	r7, #28
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	00d8acbf 	.word	0x00d8acbf
 8005684:	00e4e1c0 	.word	0x00e4e1c0
 8005688:	00f42400 	.word	0x00f42400
 800568c:	01067380 	.word	0x01067380
 8005690:	011a499f 	.word	0x011a499f
 8005694:	01312cff 	.word	0x01312cff
 8005698:	014ca43f 	.word	0x014ca43f
 800569c:	016e3600 	.word	0x016e3600
 80056a0:	01a6ab1f 	.word	0x01a6ab1f
 80056a4:	01e84800 	.word	0x01e84800

080056a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f043 0201 	orr.w	r2, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f023 0201 	bic.w	r2, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	460b      	mov	r3, r1
 80056f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005708:	78fb      	ldrb	r3, [r7, #3]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d115      	bne.n	800573a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800571a:	2001      	movs	r0, #1
 800571c:	f7fc f872 	bl	8001804 <HAL_Delay>
      ms++;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	3301      	adds	r3, #1
 8005724:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f001 fa45 	bl	8006bb6 <USB_GetMode>
 800572c:	4603      	mov	r3, r0
 800572e:	2b01      	cmp	r3, #1
 8005730:	d01e      	beq.n	8005770 <USB_SetCurrentMode+0x84>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2b31      	cmp	r3, #49	; 0x31
 8005736:	d9f0      	bls.n	800571a <USB_SetCurrentMode+0x2e>
 8005738:	e01a      	b.n	8005770 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800573a:	78fb      	ldrb	r3, [r7, #3]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d115      	bne.n	800576c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800574c:	2001      	movs	r0, #1
 800574e:	f7fc f859 	bl	8001804 <HAL_Delay>
      ms++;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	3301      	adds	r3, #1
 8005756:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f001 fa2c 	bl	8006bb6 <USB_GetMode>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d005      	beq.n	8005770 <USB_SetCurrentMode+0x84>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b31      	cmp	r3, #49	; 0x31
 8005768:	d9f0      	bls.n	800574c <USB_SetCurrentMode+0x60>
 800576a:	e001      	b.n	8005770 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e005      	b.n	800577c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b32      	cmp	r3, #50	; 0x32
 8005774:	d101      	bne.n	800577a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005784:	b084      	sub	sp, #16
 8005786:	b580      	push	{r7, lr}
 8005788:	b086      	sub	sp, #24
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
 800578e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005792:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800579e:	2300      	movs	r3, #0
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	e009      	b.n	80057b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	3340      	adds	r3, #64	; 0x40
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	2200      	movs	r2, #0
 80057b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	3301      	adds	r3, #1
 80057b6:	613b      	str	r3, [r7, #16]
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	2b0e      	cmp	r3, #14
 80057bc:	d9f2      	bls.n	80057a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80057be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d11c      	bne.n	80057fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057d2:	f043 0302 	orr.w	r3, r3, #2
 80057d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	639a      	str	r2, [r3, #56]	; 0x38
 80057fc:	e00b      	b.n	8005816 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800581c:	461a      	mov	r2, r3
 800581e:	2300      	movs	r3, #0
 8005820:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005828:	4619      	mov	r1, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005830:	461a      	mov	r2, r3
 8005832:	680b      	ldr	r3, [r1, #0]
 8005834:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005838:	2b01      	cmp	r3, #1
 800583a:	d10c      	bne.n	8005856 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800583c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583e:	2b00      	cmp	r3, #0
 8005840:	d104      	bne.n	800584c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005842:	2100      	movs	r1, #0
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f965 	bl	8005b14 <USB_SetDevSpeed>
 800584a:	e008      	b.n	800585e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800584c:	2101      	movs	r1, #1
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f960 	bl	8005b14 <USB_SetDevSpeed>
 8005854:	e003      	b.n	800585e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005856:	2103      	movs	r1, #3
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f95b 	bl	8005b14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800585e:	2110      	movs	r1, #16
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f8f3 	bl	8005a4c <USB_FlushTxFifo>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f91f 	bl	8005ab4 <USB_FlushRxFifo>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005886:	461a      	mov	r2, r3
 8005888:	2300      	movs	r3, #0
 800588a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005892:	461a      	mov	r2, r3
 8005894:	2300      	movs	r3, #0
 8005896:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589e:	461a      	mov	r2, r3
 80058a0:	2300      	movs	r3, #0
 80058a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058a4:	2300      	movs	r3, #0
 80058a6:	613b      	str	r3, [r7, #16]
 80058a8:	e043      	b.n	8005932 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	015a      	lsls	r2, r3, #5
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	4413      	add	r3, r2
 80058b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058c0:	d118      	bne.n	80058f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10a      	bne.n	80058de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d4:	461a      	mov	r2, r3
 80058d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058da:	6013      	str	r3, [r2, #0]
 80058dc:	e013      	b.n	8005906 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ea:	461a      	mov	r2, r3
 80058ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058f0:	6013      	str	r3, [r2, #0]
 80058f2:	e008      	b.n	8005906 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005900:	461a      	mov	r2, r3
 8005902:	2300      	movs	r3, #0
 8005904:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005912:	461a      	mov	r2, r3
 8005914:	2300      	movs	r3, #0
 8005916:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005924:	461a      	mov	r2, r3
 8005926:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800592a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	3301      	adds	r3, #1
 8005930:	613b      	str	r3, [r7, #16]
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	429a      	cmp	r2, r3
 8005938:	d3b7      	bcc.n	80058aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800593a:	2300      	movs	r3, #0
 800593c:	613b      	str	r3, [r7, #16]
 800593e:	e043      	b.n	80059c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005952:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005956:	d118      	bne.n	800598a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10a      	bne.n	8005974 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4413      	add	r3, r2
 8005966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596a:	461a      	mov	r2, r3
 800596c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	e013      	b.n	800599c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005980:	461a      	mov	r2, r3
 8005982:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005986:	6013      	str	r3, [r2, #0]
 8005988:	e008      	b.n	800599c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005996:	461a      	mov	r2, r3
 8005998:	2300      	movs	r3, #0
 800599a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a8:	461a      	mov	r2, r3
 80059aa:	2300      	movs	r3, #0
 80059ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ba:	461a      	mov	r2, r3
 80059bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	3301      	adds	r3, #1
 80059c6:	613b      	str	r3, [r7, #16]
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d3b7      	bcc.n	8005940 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80059f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d105      	bne.n	8005a04 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	f043 0210 	orr.w	r2, r3, #16
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	699a      	ldr	r2, [r3, #24]
 8005a08:	4b0f      	ldr	r3, [pc, #60]	; (8005a48 <USB_DevInit+0x2c4>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d005      	beq.n	8005a22 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	f043 0208 	orr.w	r2, r3, #8
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d107      	bne.n	8005a38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a30:	f043 0304 	orr.w	r3, r3, #4
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a44:	b004      	add	sp, #16
 8005a46:	4770      	bx	lr
 8005a48:	803c3800 	.word	0x803c3800

08005a4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4a13      	ldr	r2, [pc, #76]	; (8005ab0 <USB_FlushTxFifo+0x64>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d901      	bls.n	8005a6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e01b      	b.n	8005aa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	daf2      	bge.n	8005a5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	019b      	lsls	r3, r3, #6
 8005a7c:	f043 0220 	orr.w	r2, r3, #32
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3301      	adds	r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4a08      	ldr	r2, [pc, #32]	; (8005ab0 <USB_FlushTxFifo+0x64>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d901      	bls.n	8005a96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e006      	b.n	8005aa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f003 0320 	and.w	r3, r3, #32
 8005a9e:	2b20      	cmp	r3, #32
 8005aa0:	d0f0      	beq.n	8005a84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	00030d40 	.word	0x00030d40

08005ab4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4a11      	ldr	r2, [pc, #68]	; (8005b10 <USB_FlushRxFifo+0x5c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d901      	bls.n	8005ad2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e018      	b.n	8005b04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	daf2      	bge.n	8005ac0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2210      	movs	r2, #16
 8005ae2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	4a08      	ldr	r2, [pc, #32]	; (8005b10 <USB_FlushRxFifo+0x5c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d901      	bls.n	8005af6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e006      	b.n	8005b04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f003 0310 	and.w	r3, r3, #16
 8005afe:	2b10      	cmp	r3, #16
 8005b00:	d0f0      	beq.n	8005ae4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	00030d40 	.word	0x00030d40

08005b14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	68f9      	ldr	r1, [r7, #12]
 8005b30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b34:	4313      	orrs	r3, r2
 8005b36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b087      	sub	sp, #28
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 0306 	and.w	r3, r3, #6
 8005b5e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d102      	bne.n	8005b6c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005b66:	2300      	movs	r3, #0
 8005b68:	75fb      	strb	r3, [r7, #23]
 8005b6a:	e00a      	b.n	8005b82 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d002      	beq.n	8005b78 <USB_GetDevSpeed+0x32>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b06      	cmp	r3, #6
 8005b76:	d102      	bne.n	8005b7e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005b78:	2302      	movs	r3, #2
 8005b7a:	75fb      	strb	r3, [r7, #23]
 8005b7c:	e001      	b.n	8005b82 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005b7e:	230f      	movs	r3, #15
 8005b80:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	371c      	adds	r7, #28
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	785b      	ldrb	r3, [r3, #1]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d13a      	bne.n	8005c22 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb2:	69da      	ldr	r2, [r3, #28]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	f003 030f 	and.w	r3, r3, #15
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	68f9      	ldr	r1, [r7, #12]
 8005bc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d155      	bne.n	8005c90 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	791b      	ldrb	r3, [r3, #4]
 8005bfe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	059b      	lsls	r3, r3, #22
 8005c06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	0151      	lsls	r1, r2, #5
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	440a      	add	r2, r1
 8005c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c1e:	6013      	str	r3, [r2, #0]
 8005c20:	e036      	b.n	8005c90 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c28:	69da      	ldr	r2, [r3, #28]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	f003 030f 	and.w	r3, r3, #15
 8005c32:	2101      	movs	r1, #1
 8005c34:	fa01 f303 	lsl.w	r3, r1, r3
 8005c38:	041b      	lsls	r3, r3, #16
 8005c3a:	68f9      	ldr	r1, [r7, #12]
 8005c3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c40:	4313      	orrs	r3, r2
 8005c42:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d11a      	bne.n	8005c90 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	791b      	ldrb	r3, [r3, #4]
 8005c74:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c76:	430b      	orrs	r3, r1
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	0151      	lsls	r1, r2, #5
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	440a      	add	r2, r1
 8005c82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c8e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
	...

08005ca0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	785b      	ldrb	r3, [r3, #1]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d161      	bne.n	8005d80 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cd2:	d11f      	bne.n	8005d14 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	0151      	lsls	r1, r2, #5
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	440a      	add	r2, r1
 8005cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cf2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	f003 030f 	and.w	r3, r3, #15
 8005d24:	2101      	movs	r1, #1
 8005d26:	fa01 f303 	lsl.w	r3, r1, r3
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	43db      	mvns	r3, r3
 8005d2e:	68f9      	ldr	r1, [r7, #12]
 8005d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d34:	4013      	ands	r3, r2
 8005d36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3e:	69da      	ldr	r2, [r3, #28]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	f003 030f 	and.w	r3, r3, #15
 8005d48:	2101      	movs	r1, #1
 8005d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	43db      	mvns	r3, r3
 8005d52:	68f9      	ldr	r1, [r7, #12]
 8005d54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d58:	4013      	ands	r3, r2
 8005d5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	0159      	lsls	r1, r3, #5
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	440b      	add	r3, r1
 8005d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d76:	4619      	mov	r1, r3
 8005d78:	4b35      	ldr	r3, [pc, #212]	; (8005e50 <USB_DeactivateEndpoint+0x1b0>)
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	600b      	str	r3, [r1, #0]
 8005d7e:	e060      	b.n	8005e42 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d96:	d11f      	bne.n	8005dd8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	0151      	lsls	r1, r2, #5
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	440a      	add	r2, r1
 8005dae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005db2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005db6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	0151      	lsls	r1, r2, #5
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	440a      	add	r2, r1
 8005dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	f003 030f 	and.w	r3, r3, #15
 8005de8:	2101      	movs	r1, #1
 8005dea:	fa01 f303 	lsl.w	r3, r1, r3
 8005dee:	041b      	lsls	r3, r3, #16
 8005df0:	43db      	mvns	r3, r3
 8005df2:	68f9      	ldr	r1, [r7, #12]
 8005df4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005df8:	4013      	ands	r3, r2
 8005dfa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e02:	69da      	ldr	r2, [r3, #28]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	f003 030f 	and.w	r3, r3, #15
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e12:	041b      	lsls	r3, r3, #16
 8005e14:	43db      	mvns	r3, r3
 8005e16:	68f9      	ldr	r1, [r7, #12]
 8005e18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	0159      	lsls	r1, r3, #5
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	440b      	add	r3, r1
 8005e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4b05      	ldr	r3, [pc, #20]	; (8005e54 <USB_DeactivateEndpoint+0x1b4>)
 8005e3e:	4013      	ands	r3, r2
 8005e40:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	ec337800 	.word	0xec337800
 8005e54:	eff37800 	.word	0xeff37800

08005e58 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08a      	sub	sp, #40	; 0x28
 8005e5c:	af02      	add	r7, sp, #8
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	4613      	mov	r3, r2
 8005e64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	785b      	ldrb	r3, [r3, #1]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	f040 815c 	bne.w	8006132 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d132      	bne.n	8005ee8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	0151      	lsls	r1, r2, #5
 8005e94:	69fa      	ldr	r2, [r7, #28]
 8005e96:	440a      	add	r2, r1
 8005e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ea0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ea4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	0151      	lsls	r1, r2, #5
 8005eb8:	69fa      	ldr	r2, [r7, #28]
 8005eba:	440a      	add	r2, r1
 8005ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ec4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	0151      	lsls	r1, r2, #5
 8005ed8:	69fa      	ldr	r2, [r7, #28]
 8005eda:	440a      	add	r2, r1
 8005edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee0:	0cdb      	lsrs	r3, r3, #19
 8005ee2:	04db      	lsls	r3, r3, #19
 8005ee4:	6113      	str	r3, [r2, #16]
 8005ee6:	e074      	b.n	8005fd2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	0151      	lsls	r1, r2, #5
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	440a      	add	r2, r1
 8005efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f02:	0cdb      	lsrs	r3, r3, #19
 8005f04:	04db      	lsls	r3, r3, #19
 8005f06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	0151      	lsls	r1, r2, #5
 8005f1a:	69fa      	ldr	r2, [r7, #28]
 8005f1c:	440a      	add	r2, r1
 8005f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f22:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f26:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f38:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	6999      	ldr	r1, [r3, #24]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	440b      	add	r3, r1
 8005f44:	1e59      	subs	r1, r3, #1
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f4e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005f50:	4b9d      	ldr	r3, [pc, #628]	; (80061c8 <USB_EPStartXfer+0x370>)
 8005f52:	400b      	ands	r3, r1
 8005f54:	69b9      	ldr	r1, [r7, #24]
 8005f56:	0148      	lsls	r0, r1, #5
 8005f58:	69f9      	ldr	r1, [r7, #28]
 8005f5a:	4401      	add	r1, r0
 8005f5c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f60:	4313      	orrs	r3, r2
 8005f62:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f70:	691a      	ldr	r2, [r3, #16]
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f7a:	69b9      	ldr	r1, [r7, #24]
 8005f7c:	0148      	lsls	r0, r1, #5
 8005f7e:	69f9      	ldr	r1, [r7, #28]
 8005f80:	4401      	add	r1, r0
 8005f82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f86:	4313      	orrs	r3, r2
 8005f88:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	791b      	ldrb	r3, [r3, #4]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d11f      	bne.n	8005fd2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	0151      	lsls	r1, r2, #5
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005fb0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	0151      	lsls	r1, r2, #5
 8005fc4:	69fa      	ldr	r2, [r7, #28]
 8005fc6:	440a      	add	r2, r1
 8005fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fd0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005fd2:	79fb      	ldrb	r3, [r7, #7]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d14b      	bne.n	8006070 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d009      	beq.n	8005ff4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fec:	461a      	mov	r2, r3
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	791b      	ldrb	r3, [r3, #4]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d128      	bne.n	800604e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006008:	2b00      	cmp	r3, #0
 800600a:	d110      	bne.n	800602e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	0151      	lsls	r1, r2, #5
 800601e:	69fa      	ldr	r2, [r7, #28]
 8006020:	440a      	add	r2, r1
 8006022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006026:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800602a:	6013      	str	r3, [r2, #0]
 800602c:	e00f      	b.n	800604e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	4413      	add	r3, r2
 8006036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	0151      	lsls	r1, r2, #5
 8006040:	69fa      	ldr	r2, [r7, #28]
 8006042:	440a      	add	r2, r1
 8006044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800604c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	0151      	lsls	r1, r2, #5
 8006060:	69fa      	ldr	r2, [r7, #28]
 8006062:	440a      	add	r2, r1
 8006064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006068:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	e133      	b.n	80062d8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	0151      	lsls	r1, r2, #5
 8006082:	69fa      	ldr	r2, [r7, #28]
 8006084:	440a      	add	r2, r1
 8006086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800608a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800608e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	791b      	ldrb	r3, [r3, #4]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d015      	beq.n	80060c4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 811b 	beq.w	80062d8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	f003 030f 	and.w	r3, r3, #15
 80060b2:	2101      	movs	r1, #1
 80060b4:	fa01 f303 	lsl.w	r3, r1, r3
 80060b8:	69f9      	ldr	r1, [r7, #28]
 80060ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060be:	4313      	orrs	r3, r2
 80060c0:	634b      	str	r3, [r1, #52]	; 0x34
 80060c2:	e109      	b.n	80062d8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d110      	bne.n	80060f6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	69fa      	ldr	r2, [r7, #28]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	e00f      	b.n	8006116 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	0151      	lsls	r1, r2, #5
 8006108:	69fa      	ldr	r2, [r7, #28]
 800610a:	440a      	add	r2, r1
 800610c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006114:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	6919      	ldr	r1, [r3, #16]
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	781a      	ldrb	r2, [r3, #0]
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	b298      	uxth	r0, r3
 8006124:	79fb      	ldrb	r3, [r7, #7]
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	4603      	mov	r3, r0
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 fade 	bl	80066ec <USB_WritePacket>
 8006130:	e0d2      	b.n	80062d8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	0151      	lsls	r1, r2, #5
 8006144:	69fa      	ldr	r2, [r7, #28]
 8006146:	440a      	add	r2, r1
 8006148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800614c:	0cdb      	lsrs	r3, r3, #19
 800614e:	04db      	lsls	r3, r3, #19
 8006150:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	0151      	lsls	r1, r2, #5
 8006164:	69fa      	ldr	r2, [r7, #28]
 8006166:	440a      	add	r2, r1
 8006168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800616c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006170:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006174:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d126      	bne.n	80061cc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618a:	691a      	ldr	r2, [r3, #16]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006194:	69b9      	ldr	r1, [r7, #24]
 8006196:	0148      	lsls	r0, r1, #5
 8006198:	69f9      	ldr	r1, [r7, #28]
 800619a:	4401      	add	r1, r0
 800619c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061a0:	4313      	orrs	r3, r2
 80061a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	0151      	lsls	r1, r2, #5
 80061b6:	69fa      	ldr	r2, [r7, #28]
 80061b8:	440a      	add	r2, r1
 80061ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061c2:	6113      	str	r3, [r2, #16]
 80061c4:	e03a      	b.n	800623c <USB_EPStartXfer+0x3e4>
 80061c6:	bf00      	nop
 80061c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	699a      	ldr	r2, [r3, #24]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	4413      	add	r3, r2
 80061d6:	1e5a      	subs	r2, r3, #1
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	8afa      	ldrh	r2, [r7, #22]
 80061e8:	fb03 f202 	mul.w	r2, r3, r2
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fc:	691a      	ldr	r2, [r3, #16]
 80061fe:	8afb      	ldrh	r3, [r7, #22]
 8006200:	04d9      	lsls	r1, r3, #19
 8006202:	4b38      	ldr	r3, [pc, #224]	; (80062e4 <USB_EPStartXfer+0x48c>)
 8006204:	400b      	ands	r3, r1
 8006206:	69b9      	ldr	r1, [r7, #24]
 8006208:	0148      	lsls	r0, r1, #5
 800620a:	69f9      	ldr	r1, [r7, #28]
 800620c:	4401      	add	r1, r0
 800620e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006212:	4313      	orrs	r3, r2
 8006214:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	4413      	add	r3, r2
 800621e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006222:	691a      	ldr	r2, [r3, #16]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800622c:	69b9      	ldr	r1, [r7, #24]
 800622e:	0148      	lsls	r0, r1, #5
 8006230:	69f9      	ldr	r1, [r7, #28]
 8006232:	4401      	add	r1, r0
 8006234:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006238:	4313      	orrs	r3, r2
 800623a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d10d      	bne.n	800625e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d009      	beq.n	800625e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	6919      	ldr	r1, [r3, #16]
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625a:	460a      	mov	r2, r1
 800625c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	791b      	ldrb	r3, [r3, #4]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d128      	bne.n	80062b8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006272:	2b00      	cmp	r3, #0
 8006274:	d110      	bne.n	8006298 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	4413      	add	r3, r2
 800627e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	0151      	lsls	r1, r2, #5
 8006288:	69fa      	ldr	r2, [r7, #28]
 800628a:	440a      	add	r2, r1
 800628c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006290:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	e00f      	b.n	80062b8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	0151      	lsls	r1, r2, #5
 80062aa:	69fa      	ldr	r2, [r7, #28]
 80062ac:	440a      	add	r2, r1
 80062ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	0151      	lsls	r1, r2, #5
 80062ca:	69fa      	ldr	r2, [r7, #28]
 80062cc:	440a      	add	r2, r1
 80062ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3720      	adds	r7, #32
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	1ff80000 	.word	0x1ff80000

080062e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	4613      	mov	r3, r2
 80062f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	785b      	ldrb	r3, [r3, #1]
 8006304:	2b01      	cmp	r3, #1
 8006306:	f040 80ce 	bne.w	80064a6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d132      	bne.n	8006378 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	0151      	lsls	r1, r2, #5
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	440a      	add	r2, r1
 8006328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800632c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006330:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006334:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	0151      	lsls	r1, r2, #5
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	440a      	add	r2, r1
 800634c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006350:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006354:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	4413      	add	r3, r2
 800635e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	0151      	lsls	r1, r2, #5
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	440a      	add	r2, r1
 800636c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006370:	0cdb      	lsrs	r3, r3, #19
 8006372:	04db      	lsls	r3, r3, #19
 8006374:	6113      	str	r3, [r2, #16]
 8006376:	e04e      	b.n	8006416 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	0151      	lsls	r1, r2, #5
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	440a      	add	r2, r1
 800638e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006392:	0cdb      	lsrs	r3, r3, #19
 8006394:	04db      	lsls	r3, r3, #19
 8006396:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	0151      	lsls	r1, r2, #5
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	440a      	add	r2, r1
 80063ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063ba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	699a      	ldr	r2, [r3, #24]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d903      	bls.n	80063d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	68da      	ldr	r2, [r3, #12]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	0151      	lsls	r1, r2, #5
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	440a      	add	r2, r1
 80063e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fc:	691a      	ldr	r2, [r3, #16]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006406:	6939      	ldr	r1, [r7, #16]
 8006408:	0148      	lsls	r0, r1, #5
 800640a:	6979      	ldr	r1, [r7, #20]
 800640c:	4401      	add	r1, r0
 800640e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006412:	4313      	orrs	r3, r2
 8006414:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006416:	79fb      	ldrb	r3, [r7, #7]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d11e      	bne.n	800645a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d009      	beq.n	8006438 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	4413      	add	r3, r2
 800642c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006430:	461a      	mov	r2, r3
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	0151      	lsls	r1, r2, #5
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	440a      	add	r2, r1
 800644e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006452:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	e097      	b.n	800658a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	4413      	add	r3, r2
 8006462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	0151      	lsls	r1, r2, #5
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	440a      	add	r2, r1
 8006470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006474:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006478:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	2b00      	cmp	r3, #0
 8006480:	f000 8083 	beq.w	800658a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	f003 030f 	and.w	r3, r3, #15
 8006494:	2101      	movs	r1, #1
 8006496:	fa01 f303 	lsl.w	r3, r1, r3
 800649a:	6979      	ldr	r1, [r7, #20]
 800649c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064a0:	4313      	orrs	r3, r2
 80064a2:	634b      	str	r3, [r1, #52]	; 0x34
 80064a4:	e071      	b.n	800658a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	0151      	lsls	r1, r2, #5
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	440a      	add	r2, r1
 80064bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c0:	0cdb      	lsrs	r3, r3, #19
 80064c2:	04db      	lsls	r3, r3, #19
 80064c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	0151      	lsls	r1, r2, #5
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	440a      	add	r2, r1
 80064dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064e8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	68da      	ldr	r2, [r3, #12]
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	0151      	lsls	r1, r2, #5
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	440a      	add	r2, r1
 8006518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800651c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006520:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	015a      	lsls	r2, r3, #5
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	4413      	add	r3, r2
 800652a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652e:	691a      	ldr	r2, [r3, #16]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	69db      	ldr	r3, [r3, #28]
 8006534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006538:	6939      	ldr	r1, [r7, #16]
 800653a:	0148      	lsls	r0, r1, #5
 800653c:	6979      	ldr	r1, [r7, #20]
 800653e:	4401      	add	r1, r0
 8006540:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006544:	4313      	orrs	r3, r2
 8006546:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006548:	79fb      	ldrb	r3, [r7, #7]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d10d      	bne.n	800656a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d009      	beq.n	800656a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	6919      	ldr	r1, [r3, #16]
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	4413      	add	r3, r2
 8006562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006566:	460a      	mov	r2, r1
 8006568:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	0151      	lsls	r1, r2, #5
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	440a      	add	r2, r1
 8006580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006584:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006588:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	371c      	adds	r7, #28
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	785b      	ldrb	r3, [r3, #1]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d14a      	bne.n	800664c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065ce:	f040 8086 	bne.w	80066de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	7812      	ldrb	r2, [r2, #0]
 80065e6:	0151      	lsls	r1, r2, #5
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	440a      	add	r2, r1
 80065ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	7812      	ldrb	r2, [r2, #0]
 800660a:	0151      	lsls	r1, r2, #5
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	440a      	add	r2, r1
 8006610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006614:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006618:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3301      	adds	r3, #1
 800661e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f242 7210 	movw	r2, #10000	; 0x2710
 8006626:	4293      	cmp	r3, r2
 8006628:	d902      	bls.n	8006630 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	75fb      	strb	r3, [r7, #23]
          break;
 800662e:	e056      	b.n	80066de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	4413      	add	r3, r2
 800663a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006648:	d0e7      	beq.n	800661a <USB_EPStopXfer+0x82>
 800664a:	e048      	b.n	80066de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006660:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006664:	d13b      	bne.n	80066de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	4413      	add	r3, r2
 8006670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	7812      	ldrb	r2, [r2, #0]
 800667a:	0151      	lsls	r1, r2, #5
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	440a      	add	r2, r1
 8006680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006684:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006688:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	7812      	ldrb	r2, [r2, #0]
 800669e:	0151      	lsls	r1, r2, #5
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	440a      	add	r2, r1
 80066a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3301      	adds	r3, #1
 80066b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d902      	bls.n	80066c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	75fb      	strb	r3, [r7, #23]
          break;
 80066c2:	e00c      	b.n	80066de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066dc:	d0e7      	beq.n	80066ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80066de:	7dfb      	ldrb	r3, [r7, #23]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	371c      	adds	r7, #28
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b089      	sub	sp, #36	; 0x24
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	4611      	mov	r1, r2
 80066f8:	461a      	mov	r2, r3
 80066fa:	460b      	mov	r3, r1
 80066fc:	71fb      	strb	r3, [r7, #7]
 80066fe:	4613      	mov	r3, r2
 8006700:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800670a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800670e:	2b00      	cmp	r3, #0
 8006710:	d123      	bne.n	800675a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006712:	88bb      	ldrh	r3, [r7, #4]
 8006714:	3303      	adds	r3, #3
 8006716:	089b      	lsrs	r3, r3, #2
 8006718:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800671a:	2300      	movs	r3, #0
 800671c:	61bb      	str	r3, [r7, #24]
 800671e:	e018      	b.n	8006752 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006720:	79fb      	ldrb	r3, [r7, #7]
 8006722:	031a      	lsls	r2, r3, #12
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	4413      	add	r3, r2
 8006728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800672c:	461a      	mov	r2, r3
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	3301      	adds	r3, #1
 8006738:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	3301      	adds	r3, #1
 800673e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	3301      	adds	r3, #1
 8006744:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	3301      	adds	r3, #1
 800674a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	3301      	adds	r3, #1
 8006750:	61bb      	str	r3, [r7, #24]
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	429a      	cmp	r2, r3
 8006758:	d3e2      	bcc.n	8006720 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3724      	adds	r7, #36	; 0x24
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006768:	b480      	push	{r7}
 800676a:	b08b      	sub	sp, #44	; 0x2c
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	4613      	mov	r3, r2
 8006774:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800677e:	88fb      	ldrh	r3, [r7, #6]
 8006780:	089b      	lsrs	r3, r3, #2
 8006782:	b29b      	uxth	r3, r3
 8006784:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006786:	88fb      	ldrh	r3, [r7, #6]
 8006788:	f003 0303 	and.w	r3, r3, #3
 800678c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800678e:	2300      	movs	r3, #0
 8006790:	623b      	str	r3, [r7, #32]
 8006792:	e014      	b.n	80067be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	601a      	str	r2, [r3, #0]
    pDest++;
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	3301      	adds	r3, #1
 80067a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	3301      	adds	r3, #1
 80067aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	3301      	adds	r3, #1
 80067b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	3301      	adds	r3, #1
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80067b8:	6a3b      	ldr	r3, [r7, #32]
 80067ba:	3301      	adds	r3, #1
 80067bc:	623b      	str	r3, [r7, #32]
 80067be:	6a3a      	ldr	r2, [r7, #32]
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d3e6      	bcc.n	8006794 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80067c6:	8bfb      	ldrh	r3, [r7, #30]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d01e      	beq.n	800680a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067d6:	461a      	mov	r2, r3
 80067d8:	f107 0310 	add.w	r3, r7, #16
 80067dc:	6812      	ldr	r2, [r2, #0]
 80067de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	00db      	lsls	r3, r3, #3
 80067e8:	fa22 f303 	lsr.w	r3, r2, r3
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	701a      	strb	r2, [r3, #0]
      i++;
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	3301      	adds	r3, #1
 80067f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	3301      	adds	r3, #1
 80067fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80067fe:	8bfb      	ldrh	r3, [r7, #30]
 8006800:	3b01      	subs	r3, #1
 8006802:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006804:	8bfb      	ldrh	r3, [r7, #30]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1ea      	bne.n	80067e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800680c:	4618      	mov	r0, r3
 800680e:	372c      	adds	r7, #44	; 0x2c
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	785b      	ldrb	r3, [r3, #1]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d12c      	bne.n	800688e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4413      	add	r3, r2
 800683c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	db12      	blt.n	800686c <USB_EPSetStall+0x54>
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00f      	beq.n	800686c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	0151      	lsls	r1, r2, #5
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	440a      	add	r2, r1
 8006862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006866:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800686a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4413      	add	r3, r2
 8006874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	0151      	lsls	r1, r2, #5
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	440a      	add	r2, r1
 8006882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006886:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800688a:	6013      	str	r3, [r2, #0]
 800688c:	e02b      	b.n	80068e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	4413      	add	r3, r2
 8006896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	db12      	blt.n	80068c6 <USB_EPSetStall+0xae>
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00f      	beq.n	80068c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	0151      	lsls	r1, r2, #5
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	440a      	add	r2, r1
 80068bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	0151      	lsls	r1, r2, #5
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	440a      	add	r2, r1
 80068dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80068e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	785b      	ldrb	r3, [r3, #1]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d128      	bne.n	8006962 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	4413      	add	r3, r2
 8006918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	0151      	lsls	r1, r2, #5
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	440a      	add	r2, r1
 8006926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800692a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800692e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	791b      	ldrb	r3, [r3, #4]
 8006934:	2b03      	cmp	r3, #3
 8006936:	d003      	beq.n	8006940 <USB_EPClearStall+0x4c>
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	791b      	ldrb	r3, [r3, #4]
 800693c:	2b02      	cmp	r3, #2
 800693e:	d138      	bne.n	80069b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	0151      	lsls	r1, r2, #5
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	440a      	add	r2, r1
 8006956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800695a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	e027      	b.n	80069b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	4413      	add	r3, r2
 800696a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	0151      	lsls	r1, r2, #5
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	440a      	add	r2, r1
 8006978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800697c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006980:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	791b      	ldrb	r3, [r3, #4]
 8006986:	2b03      	cmp	r3, #3
 8006988:	d003      	beq.n	8006992 <USB_EPClearStall+0x9e>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	791b      	ldrb	r3, [r3, #4]
 800698e:	2b02      	cmp	r3, #2
 8006990:	d10f      	bne.n	80069b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4413      	add	r3, r2
 800699a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	0151      	lsls	r1, r2, #5
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	440a      	add	r2, r1
 80069a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	460b      	mov	r3, r1
 80069ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80069e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	78fb      	ldrb	r3, [r7, #3]
 80069ee:	011b      	lsls	r3, r3, #4
 80069f0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80069f4:	68f9      	ldr	r1, [r7, #12]
 80069f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069fa:	4313      	orrs	r3, r2
 80069fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a26:	f023 0303 	bic.w	r3, r3, #3
 8006a2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a3a:	f023 0302 	bic.w	r3, r3, #2
 8006a3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b085      	sub	sp, #20
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a68:	f023 0303 	bic.w	r3, r3, #3
 8006a6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a7c:	f043 0302 	orr.w	r3, r3, #2
 8006a80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b085      	sub	sp, #20
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	0c1b      	lsrs	r3, r3, #16
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b085      	sub	sp, #20
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b06:	69db      	ldr	r3, [r3, #28]
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	b29b      	uxth	r3, r3
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b085      	sub	sp, #20
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
 8006b26:	460b      	mov	r3, r1
 8006b28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006b2e:	78fb      	ldrb	r3, [r7, #3]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	4013      	ands	r3, r2
 8006b4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b087      	sub	sp, #28
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	460b      	mov	r3, r1
 8006b64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006b7e:	78fb      	ldrb	r3, [r7, #3]
 8006b80:	f003 030f 	and.w	r3, r3, #15
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	fa22 f303 	lsr.w	r3, r2, r3
 8006b8a:	01db      	lsls	r3, r3, #7
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006b94:	78fb      	ldrb	r3, [r7, #3]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	371c      	adds	r7, #28
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	f003 0301 	and.w	r3, r3, #1
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	370c      	adds	r7, #12
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b085      	sub	sp, #20
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006bf0:	f023 0307 	bic.w	r3, r3, #7
 8006bf4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	460b      	mov	r3, r1
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	333c      	adds	r3, #60	; 0x3c
 8006c2e:	3304      	adds	r3, #4
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	4a26      	ldr	r2, [pc, #152]	; (8006cd0 <USB_EP0_OutStart+0xb8>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d90a      	bls.n	8006c52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c4c:	d101      	bne.n	8006c52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e037      	b.n	8006cc2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c58:	461a      	mov	r2, r3
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c80:	f043 0318 	orr.w	r3, r3, #24
 8006c84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c94:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006c98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006c9a:	7afb      	ldrb	r3, [r7, #11]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d10f      	bne.n	8006cc0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006cbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	371c      	adds	r7, #28
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	4f54300a 	.word	0x4f54300a

08006cd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	4a13      	ldr	r2, [pc, #76]	; (8006d38 <USB_CoreReset+0x64>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d901      	bls.n	8006cf2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e01b      	b.n	8006d2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	daf2      	bge.n	8006ce0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	f043 0201 	orr.w	r2, r3, #1
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4a09      	ldr	r2, [pc, #36]	; (8006d38 <USB_CoreReset+0x64>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d901      	bls.n	8006d1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e006      	b.n	8006d2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d0f0      	beq.n	8006d0a <USB_CoreReset+0x36>

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3714      	adds	r7, #20
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	00030d40 	.word	0x00030d40

08006d3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	460b      	mov	r3, r1
 8006d46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d48:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d4c:	f002 fca2 	bl	8009694 <USBD_static_malloc>
 8006d50:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d109      	bne.n	8006d6c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	32b0      	adds	r2, #176	; 0xb0
 8006d62:	2100      	movs	r1, #0
 8006d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e0d4      	b.n	8006f16 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006d6c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006d70:	2100      	movs	r1, #0
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f002 fdd7 	bl	8009926 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	32b0      	adds	r2, #176	; 0xb0
 8006d82:	68f9      	ldr	r1, [r7, #12]
 8006d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	32b0      	adds	r2, #176	; 0xb0
 8006d92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	7c1b      	ldrb	r3, [r3, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d138      	bne.n	8006e16 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006da4:	4b5e      	ldr	r3, [pc, #376]	; (8006f20 <USBD_CDC_Init+0x1e4>)
 8006da6:	7819      	ldrb	r1, [r3, #0]
 8006da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dac:	2202      	movs	r2, #2
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f002 fb4d 	bl	800944e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006db4:	4b5a      	ldr	r3, [pc, #360]	; (8006f20 <USBD_CDC_Init+0x1e4>)
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	f003 020f 	and.w	r2, r3, #15
 8006dbc:	6879      	ldr	r1, [r7, #4]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	440b      	add	r3, r1
 8006dc8:	3324      	adds	r3, #36	; 0x24
 8006dca:	2201      	movs	r2, #1
 8006dcc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006dce:	4b55      	ldr	r3, [pc, #340]	; (8006f24 <USBD_CDC_Init+0x1e8>)
 8006dd0:	7819      	ldrb	r1, [r3, #0]
 8006dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f002 fb38 	bl	800944e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006dde:	4b51      	ldr	r3, [pc, #324]	; (8006f24 <USBD_CDC_Init+0x1e8>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	f003 020f 	and.w	r2, r3, #15
 8006de6:	6879      	ldr	r1, [r7, #4]
 8006de8:	4613      	mov	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	440b      	add	r3, r1
 8006df2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006df6:	2201      	movs	r2, #1
 8006df8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006dfa:	4b4b      	ldr	r3, [pc, #300]	; (8006f28 <USBD_CDC_Init+0x1ec>)
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	f003 020f 	and.w	r2, r3, #15
 8006e02:	6879      	ldr	r1, [r7, #4]
 8006e04:	4613      	mov	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	440b      	add	r3, r1
 8006e0e:	3326      	adds	r3, #38	; 0x26
 8006e10:	2210      	movs	r2, #16
 8006e12:	801a      	strh	r2, [r3, #0]
 8006e14:	e035      	b.n	8006e82 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e16:	4b42      	ldr	r3, [pc, #264]	; (8006f20 <USBD_CDC_Init+0x1e4>)
 8006e18:	7819      	ldrb	r1, [r3, #0]
 8006e1a:	2340      	movs	r3, #64	; 0x40
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f002 fb15 	bl	800944e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e24:	4b3e      	ldr	r3, [pc, #248]	; (8006f20 <USBD_CDC_Init+0x1e4>)
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	f003 020f 	and.w	r2, r3, #15
 8006e2c:	6879      	ldr	r1, [r7, #4]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	440b      	add	r3, r1
 8006e38:	3324      	adds	r3, #36	; 0x24
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e3e:	4b39      	ldr	r3, [pc, #228]	; (8006f24 <USBD_CDC_Init+0x1e8>)
 8006e40:	7819      	ldrb	r1, [r3, #0]
 8006e42:	2340      	movs	r3, #64	; 0x40
 8006e44:	2202      	movs	r2, #2
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f002 fb01 	bl	800944e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e4c:	4b35      	ldr	r3, [pc, #212]	; (8006f24 <USBD_CDC_Init+0x1e8>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	f003 020f 	and.w	r2, r3, #15
 8006e54:	6879      	ldr	r1, [r7, #4]
 8006e56:	4613      	mov	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	440b      	add	r3, r1
 8006e60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e64:	2201      	movs	r2, #1
 8006e66:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006e68:	4b2f      	ldr	r3, [pc, #188]	; (8006f28 <USBD_CDC_Init+0x1ec>)
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	f003 020f 	and.w	r2, r3, #15
 8006e70:	6879      	ldr	r1, [r7, #4]
 8006e72:	4613      	mov	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4413      	add	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	440b      	add	r3, r1
 8006e7c:	3326      	adds	r3, #38	; 0x26
 8006e7e:	2210      	movs	r2, #16
 8006e80:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e82:	4b29      	ldr	r3, [pc, #164]	; (8006f28 <USBD_CDC_Init+0x1ec>)
 8006e84:	7819      	ldrb	r1, [r3, #0]
 8006e86:	2308      	movs	r3, #8
 8006e88:	2203      	movs	r2, #3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f002 fadf 	bl	800944e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006e90:	4b25      	ldr	r3, [pc, #148]	; (8006f28 <USBD_CDC_Init+0x1ec>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	f003 020f 	and.w	r2, r3, #15
 8006e98:	6879      	ldr	r1, [r7, #4]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	440b      	add	r3, r1
 8006ea4:	3324      	adds	r3, #36	; 0x24
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	33b0      	adds	r3, #176	; 0xb0
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4413      	add	r3, r2
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	e018      	b.n	8006f16 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	7c1b      	ldrb	r3, [r3, #16]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10a      	bne.n	8006f02 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006eec:	4b0d      	ldr	r3, [pc, #52]	; (8006f24 <USBD_CDC_Init+0x1e8>)
 8006eee:	7819      	ldrb	r1, [r3, #0]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f002 fb96 	bl	800962c <USBD_LL_PrepareReceive>
 8006f00:	e008      	b.n	8006f14 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f02:	4b08      	ldr	r3, [pc, #32]	; (8006f24 <USBD_CDC_Init+0x1e8>)
 8006f04:	7819      	ldrb	r1, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f0c:	2340      	movs	r3, #64	; 0x40
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f002 fb8c 	bl	800962c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20000097 	.word	0x20000097
 8006f24:	20000098 	.word	0x20000098
 8006f28:	20000099 	.word	0x20000099

08006f2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006f38:	4b3a      	ldr	r3, [pc, #232]	; (8007024 <USBD_CDC_DeInit+0xf8>)
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f002 faab 	bl	800949a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006f44:	4b37      	ldr	r3, [pc, #220]	; (8007024 <USBD_CDC_DeInit+0xf8>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	f003 020f 	and.w	r2, r3, #15
 8006f4c:	6879      	ldr	r1, [r7, #4]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	440b      	add	r3, r1
 8006f58:	3324      	adds	r3, #36	; 0x24
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006f5e:	4b32      	ldr	r3, [pc, #200]	; (8007028 <USBD_CDC_DeInit+0xfc>)
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	4619      	mov	r1, r3
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f002 fa98 	bl	800949a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006f6a:	4b2f      	ldr	r3, [pc, #188]	; (8007028 <USBD_CDC_DeInit+0xfc>)
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	f003 020f 	and.w	r2, r3, #15
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	4613      	mov	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4413      	add	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	440b      	add	r3, r1
 8006f7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f82:	2200      	movs	r2, #0
 8006f84:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006f86:	4b29      	ldr	r3, [pc, #164]	; (800702c <USBD_CDC_DeInit+0x100>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f002 fa84 	bl	800949a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006f92:	4b26      	ldr	r3, [pc, #152]	; (800702c <USBD_CDC_DeInit+0x100>)
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	f003 020f 	and.w	r2, r3, #15
 8006f9a:	6879      	ldr	r1, [r7, #4]
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	440b      	add	r3, r1
 8006fa6:	3324      	adds	r3, #36	; 0x24
 8006fa8:	2200      	movs	r2, #0
 8006faa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006fac:	4b1f      	ldr	r3, [pc, #124]	; (800702c <USBD_CDC_DeInit+0x100>)
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	f003 020f 	and.w	r2, r3, #15
 8006fb4:	6879      	ldr	r1, [r7, #4]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	440b      	add	r3, r1
 8006fc0:	3326      	adds	r3, #38	; 0x26
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	32b0      	adds	r2, #176	; 0xb0
 8006fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d01f      	beq.n	8007018 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	33b0      	adds	r3, #176	; 0xb0
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	32b0      	adds	r2, #176	; 0xb0
 8006ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f002 fb58 	bl	80096b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	32b0      	adds	r2, #176	; 0xb0
 800700a:	2100      	movs	r1, #0
 800700c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20000097 	.word	0x20000097
 8007028:	20000098 	.word	0x20000098
 800702c:	20000099 	.word	0x20000099

08007030 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	32b0      	adds	r2, #176	; 0xb0
 8007044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007048:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d101      	bne.n	8007060 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800705c:	2303      	movs	r3, #3
 800705e:	e0bf      	b.n	80071e0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007068:	2b00      	cmp	r3, #0
 800706a:	d050      	beq.n	800710e <USBD_CDC_Setup+0xde>
 800706c:	2b20      	cmp	r3, #32
 800706e:	f040 80af 	bne.w	80071d0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	88db      	ldrh	r3, [r3, #6]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d03a      	beq.n	80070f0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	b25b      	sxtb	r3, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	da1b      	bge.n	80070bc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	33b0      	adds	r3, #176	; 0xb0
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800709a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800709c:	683a      	ldr	r2, [r7, #0]
 800709e:	88d2      	ldrh	r2, [r2, #6]
 80070a0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	88db      	ldrh	r3, [r3, #6]
 80070a6:	2b07      	cmp	r3, #7
 80070a8:	bf28      	it	cs
 80070aa:	2307      	movcs	r3, #7
 80070ac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	89fa      	ldrh	r2, [r7, #14]
 80070b2:	4619      	mov	r1, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 fd89 	bl	8008bcc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80070ba:	e090      	b.n	80071de <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	785a      	ldrb	r2, [r3, #1]
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	88db      	ldrh	r3, [r3, #6]
 80070ca:	2b3f      	cmp	r3, #63	; 0x3f
 80070cc:	d803      	bhi.n	80070d6 <USBD_CDC_Setup+0xa6>
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	88db      	ldrh	r3, [r3, #6]
 80070d2:	b2da      	uxtb	r2, r3
 80070d4:	e000      	b.n	80070d8 <USBD_CDC_Setup+0xa8>
 80070d6:	2240      	movs	r2, #64	; 0x40
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80070de:	6939      	ldr	r1, [r7, #16]
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80070e6:	461a      	mov	r2, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f001 fd9b 	bl	8008c24 <USBD_CtlPrepareRx>
      break;
 80070ee:	e076      	b.n	80071de <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	33b0      	adds	r3, #176	; 0xb0
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	7850      	ldrb	r0, [r2, #1]
 8007106:	2200      	movs	r2, #0
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	4798      	blx	r3
      break;
 800710c:	e067      	b.n	80071de <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	785b      	ldrb	r3, [r3, #1]
 8007112:	2b0b      	cmp	r3, #11
 8007114:	d851      	bhi.n	80071ba <USBD_CDC_Setup+0x18a>
 8007116:	a201      	add	r2, pc, #4	; (adr r2, 800711c <USBD_CDC_Setup+0xec>)
 8007118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711c:	0800714d 	.word	0x0800714d
 8007120:	080071c9 	.word	0x080071c9
 8007124:	080071bb 	.word	0x080071bb
 8007128:	080071bb 	.word	0x080071bb
 800712c:	080071bb 	.word	0x080071bb
 8007130:	080071bb 	.word	0x080071bb
 8007134:	080071bb 	.word	0x080071bb
 8007138:	080071bb 	.word	0x080071bb
 800713c:	080071bb 	.word	0x080071bb
 8007140:	080071bb 	.word	0x080071bb
 8007144:	08007177 	.word	0x08007177
 8007148:	080071a1 	.word	0x080071a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b03      	cmp	r3, #3
 8007156:	d107      	bne.n	8007168 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007158:	f107 030a 	add.w	r3, r7, #10
 800715c:	2202      	movs	r2, #2
 800715e:	4619      	mov	r1, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f001 fd33 	bl	8008bcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007166:	e032      	b.n	80071ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f001 fcbd 	bl	8008aea <USBD_CtlError>
            ret = USBD_FAIL;
 8007170:	2303      	movs	r3, #3
 8007172:	75fb      	strb	r3, [r7, #23]
          break;
 8007174:	e02b      	b.n	80071ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b03      	cmp	r3, #3
 8007180:	d107      	bne.n	8007192 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007182:	f107 030d 	add.w	r3, r7, #13
 8007186:	2201      	movs	r2, #1
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f001 fd1e 	bl	8008bcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007190:	e01d      	b.n	80071ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 fca8 	bl	8008aea <USBD_CtlError>
            ret = USBD_FAIL;
 800719a:	2303      	movs	r3, #3
 800719c:	75fb      	strb	r3, [r7, #23]
          break;
 800719e:	e016      	b.n	80071ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b03      	cmp	r3, #3
 80071aa:	d00f      	beq.n	80071cc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80071ac:	6839      	ldr	r1, [r7, #0]
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f001 fc9b 	bl	8008aea <USBD_CtlError>
            ret = USBD_FAIL;
 80071b4:	2303      	movs	r3, #3
 80071b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80071b8:	e008      	b.n	80071cc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80071ba:	6839      	ldr	r1, [r7, #0]
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f001 fc94 	bl	8008aea <USBD_CtlError>
          ret = USBD_FAIL;
 80071c2:	2303      	movs	r3, #3
 80071c4:	75fb      	strb	r3, [r7, #23]
          break;
 80071c6:	e002      	b.n	80071ce <USBD_CDC_Setup+0x19e>
          break;
 80071c8:	bf00      	nop
 80071ca:	e008      	b.n	80071de <USBD_CDC_Setup+0x1ae>
          break;
 80071cc:	bf00      	nop
      }
      break;
 80071ce:	e006      	b.n	80071de <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80071d0:	6839      	ldr	r1, [r7, #0]
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f001 fc89 	bl	8008aea <USBD_CtlError>
      ret = USBD_FAIL;
 80071d8:	2303      	movs	r3, #3
 80071da:	75fb      	strb	r3, [r7, #23]
      break;
 80071dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80071de:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	460b      	mov	r3, r1
 80071f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80071fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	32b0      	adds	r2, #176	; 0xb0
 8007206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800720e:	2303      	movs	r3, #3
 8007210:	e065      	b.n	80072de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	32b0      	adds	r2, #176	; 0xb0
 800721c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007220:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007222:	78fb      	ldrb	r3, [r7, #3]
 8007224:	f003 020f 	and.w	r2, r3, #15
 8007228:	6879      	ldr	r1, [r7, #4]
 800722a:	4613      	mov	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	440b      	add	r3, r1
 8007234:	3318      	adds	r3, #24
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d02f      	beq.n	800729c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800723c:	78fb      	ldrb	r3, [r7, #3]
 800723e:	f003 020f 	and.w	r2, r3, #15
 8007242:	6879      	ldr	r1, [r7, #4]
 8007244:	4613      	mov	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	440b      	add	r3, r1
 800724e:	3318      	adds	r3, #24
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	78fb      	ldrb	r3, [r7, #3]
 8007254:	f003 010f 	and.w	r1, r3, #15
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	460b      	mov	r3, r1
 800725c:	00db      	lsls	r3, r3, #3
 800725e:	440b      	add	r3, r1
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4403      	add	r3, r0
 8007264:	3348      	adds	r3, #72	; 0x48
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	fbb2 f1f3 	udiv	r1, r2, r3
 800726c:	fb01 f303 	mul.w	r3, r1, r3
 8007270:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007272:	2b00      	cmp	r3, #0
 8007274:	d112      	bne.n	800729c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007276:	78fb      	ldrb	r3, [r7, #3]
 8007278:	f003 020f 	and.w	r2, r3, #15
 800727c:	6879      	ldr	r1, [r7, #4]
 800727e:	4613      	mov	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	440b      	add	r3, r1
 8007288:	3318      	adds	r3, #24
 800728a:	2200      	movs	r2, #0
 800728c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800728e:	78f9      	ldrb	r1, [r7, #3]
 8007290:	2300      	movs	r3, #0
 8007292:	2200      	movs	r2, #0
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f002 f9a8 	bl	80095ea <USBD_LL_Transmit>
 800729a:	e01f      	b.n	80072dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2200      	movs	r2, #0
 80072a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	33b0      	adds	r3, #176	; 0xb0
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d010      	beq.n	80072dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	33b0      	adds	r3, #176	; 0xb0
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80072d8:	78fa      	ldrb	r2, [r7, #3]
 80072da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	460b      	mov	r3, r1
 80072f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	32b0      	adds	r2, #176	; 0xb0
 80072fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007300:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	32b0      	adds	r2, #176	; 0xb0
 800730c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d101      	bne.n	8007318 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007314:	2303      	movs	r3, #3
 8007316:	e01a      	b.n	800734e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007318:	78fb      	ldrb	r3, [r7, #3]
 800731a:	4619      	mov	r1, r3
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f002 f9a6 	bl	800966e <USBD_LL_GetRxDataSize>
 8007322:	4602      	mov	r2, r0
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	33b0      	adds	r3, #176	; 0xb0
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007348:	4611      	mov	r1, r2
 800734a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b084      	sub	sp, #16
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	32b0      	adds	r2, #176	; 0xb0
 8007368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800736c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007374:	2303      	movs	r3, #3
 8007376:	e025      	b.n	80073c4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	33b0      	adds	r3, #176	; 0xb0
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4413      	add	r3, r2
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01a      	beq.n	80073c2 <USBD_CDC_EP0_RxReady+0x6c>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007392:	2bff      	cmp	r3, #255	; 0xff
 8007394:	d015      	beq.n	80073c2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	33b0      	adds	r3, #176	; 0xb0
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80073ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80073b6:	b292      	uxth	r2, r2
 80073b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	22ff      	movs	r2, #255	; 0xff
 80073be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80073d4:	2182      	movs	r1, #130	; 0x82
 80073d6:	4818      	ldr	r0, [pc, #96]	; (8007438 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80073d8:	f000 fd4f 	bl	8007e7a <USBD_GetEpDesc>
 80073dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80073de:	2101      	movs	r1, #1
 80073e0:	4815      	ldr	r0, [pc, #84]	; (8007438 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80073e2:	f000 fd4a 	bl	8007e7a <USBD_GetEpDesc>
 80073e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80073e8:	2181      	movs	r1, #129	; 0x81
 80073ea:	4813      	ldr	r0, [pc, #76]	; (8007438 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80073ec:	f000 fd45 	bl	8007e7a <USBD_GetEpDesc>
 80073f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	2210      	movs	r2, #16
 80073fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d006      	beq.n	8007412 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	2200      	movs	r2, #0
 8007408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800740c:	711a      	strb	r2, [r3, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d006      	beq.n	8007426 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2200      	movs	r2, #0
 800741c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007420:	711a      	strb	r2, [r3, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2243      	movs	r2, #67	; 0x43
 800742a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800742c:	4b02      	ldr	r3, [pc, #8]	; (8007438 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800742e:	4618      	mov	r0, r3
 8007430:	3718      	adds	r7, #24
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	20000054 	.word	0x20000054

0800743c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007444:	2182      	movs	r1, #130	; 0x82
 8007446:	4818      	ldr	r0, [pc, #96]	; (80074a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007448:	f000 fd17 	bl	8007e7a <USBD_GetEpDesc>
 800744c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800744e:	2101      	movs	r1, #1
 8007450:	4815      	ldr	r0, [pc, #84]	; (80074a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007452:	f000 fd12 	bl	8007e7a <USBD_GetEpDesc>
 8007456:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007458:	2181      	movs	r1, #129	; 0x81
 800745a:	4813      	ldr	r0, [pc, #76]	; (80074a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800745c:	f000 fd0d 	bl	8007e7a <USBD_GetEpDesc>
 8007460:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d002      	beq.n	800746e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	2210      	movs	r2, #16
 800746c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d006      	beq.n	8007482 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	2200      	movs	r2, #0
 8007478:	711a      	strb	r2, [r3, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f042 0202 	orr.w	r2, r2, #2
 8007480:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d006      	beq.n	8007496 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	711a      	strb	r2, [r3, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f042 0202 	orr.w	r2, r2, #2
 8007494:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2243      	movs	r2, #67	; 0x43
 800749a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800749c:	4b02      	ldr	r3, [pc, #8]	; (80074a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	20000054 	.word	0x20000054

080074ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074b4:	2182      	movs	r1, #130	; 0x82
 80074b6:	4818      	ldr	r0, [pc, #96]	; (8007518 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074b8:	f000 fcdf 	bl	8007e7a <USBD_GetEpDesc>
 80074bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074be:	2101      	movs	r1, #1
 80074c0:	4815      	ldr	r0, [pc, #84]	; (8007518 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074c2:	f000 fcda 	bl	8007e7a <USBD_GetEpDesc>
 80074c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074c8:	2181      	movs	r1, #129	; 0x81
 80074ca:	4813      	ldr	r0, [pc, #76]	; (8007518 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074cc:	f000 fcd5 	bl	8007e7a <USBD_GetEpDesc>
 80074d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	2210      	movs	r2, #16
 80074dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d006      	beq.n	80074f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074ec:	711a      	strb	r2, [r3, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d006      	beq.n	8007506 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007500:	711a      	strb	r2, [r3, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2243      	movs	r2, #67	; 0x43
 800750a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800750c:	4b02      	ldr	r3, [pc, #8]	; (8007518 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800750e:	4618      	mov	r0, r3
 8007510:	3718      	adds	r7, #24
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	20000054 	.word	0x20000054

0800751c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	220a      	movs	r2, #10
 8007528:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800752a:	4b03      	ldr	r3, [pc, #12]	; (8007538 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800752c:	4618      	mov	r0, r3
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr
 8007538:	20000010 	.word	0x20000010

0800753c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800754c:	2303      	movs	r3, #3
 800754e:	e009      	b.n	8007564 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	33b0      	adds	r3, #176	; 0xb0
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4413      	add	r3, r2
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007570:	b480      	push	{r7}
 8007572:	b087      	sub	sp, #28
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	32b0      	adds	r2, #176	; 0xb0
 8007586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800758a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007592:	2303      	movs	r3, #3
 8007594:	e008      	b.n	80075a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	371c      	adds	r7, #28
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	32b0      	adds	r2, #176	; 0xb0
 80075c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e004      	b.n	80075e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
	...

080075f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	32b0      	adds	r2, #176	; 0xb0
 8007602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007606:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007608:	2301      	movs	r3, #1
 800760a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	32b0      	adds	r2, #176	; 0xb0
 8007616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800761e:	2303      	movs	r3, #3
 8007620:	e025      	b.n	800766e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007628:	2b00      	cmp	r3, #0
 800762a:	d11f      	bne.n	800766c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	2201      	movs	r2, #1
 8007630:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007634:	4b10      	ldr	r3, [pc, #64]	; (8007678 <USBD_CDC_TransmitPacket+0x88>)
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	f003 020f 	and.w	r2, r3, #15
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	4613      	mov	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4403      	add	r3, r0
 800764e:	3318      	adds	r3, #24
 8007650:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007652:	4b09      	ldr	r3, [pc, #36]	; (8007678 <USBD_CDC_TransmitPacket+0x88>)
 8007654:	7819      	ldrb	r1, [r3, #0]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f001 ffc1 	bl	80095ea <USBD_LL_Transmit>

    ret = USBD_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800766c:	7bfb      	ldrb	r3, [r7, #15]
}
 800766e:	4618      	mov	r0, r3
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	20000097 	.word	0x20000097

0800767c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	32b0      	adds	r2, #176	; 0xb0
 800768e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007692:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	32b0      	adds	r2, #176	; 0xb0
 800769e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e018      	b.n	80076dc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	7c1b      	ldrb	r3, [r3, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10a      	bne.n	80076c8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076b2:	4b0c      	ldr	r3, [pc, #48]	; (80076e4 <USBD_CDC_ReceivePacket+0x68>)
 80076b4:	7819      	ldrb	r1, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f001 ffb3 	bl	800962c <USBD_LL_PrepareReceive>
 80076c6:	e008      	b.n	80076da <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076c8:	4b06      	ldr	r3, [pc, #24]	; (80076e4 <USBD_CDC_ReceivePacket+0x68>)
 80076ca:	7819      	ldrb	r1, [r3, #0]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076d2:	2340      	movs	r3, #64	; 0x40
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f001 ffa9 	bl	800962c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	20000098 	.word	0x20000098

080076e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	4613      	mov	r3, r2
 80076f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e01f      	b.n	8007740 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	79fa      	ldrb	r2, [r7, #7]
 8007732:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f001 fe23 	bl	8009380 <USBD_LL_Init>
 800773a:	4603      	mov	r3, r0
 800773c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800773e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007752:	2300      	movs	r3, #0
 8007754:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800775c:	2303      	movs	r3, #3
 800775e:	e025      	b.n	80077ac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	32ae      	adds	r2, #174	; 0xae
 8007772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00f      	beq.n	800779c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	32ae      	adds	r2, #174	; 0xae
 8007786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778c:	f107 020e 	add.w	r2, r7, #14
 8007790:	4610      	mov	r0, r2
 8007792:	4798      	blx	r3
 8007794:	4602      	mov	r2, r0
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80077a2:	1c5a      	adds	r2, r3, #1
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f001 fe2b 	bl	8009418 <USBD_LL_Start>
 80077c2:	4603      	mov	r3, r0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80077d4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b084      	sub	sp, #16
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	460b      	mov	r3, r1
 80077ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ee:	2300      	movs	r3, #0
 80077f0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d009      	beq.n	8007810 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	78fa      	ldrb	r2, [r7, #3]
 8007806:	4611      	mov	r1, r2
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	4798      	blx	r3
 800780c:	4603      	mov	r3, r0
 800780e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007810:	7bfb      	ldrb	r3, [r7, #15]
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b084      	sub	sp, #16
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	460b      	mov	r3, r1
 8007824:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	78fa      	ldrb	r2, [r7, #3]
 8007834:	4611      	mov	r1, r2
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	4798      	blx	r3
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d001      	beq.n	8007844 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007840:	2303      	movs	r3, #3
 8007842:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007844:	7bfb      	ldrb	r3, [r7, #15]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b084      	sub	sp, #16
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	4618      	mov	r0, r3
 8007862:	f001 f908 	bl	8008a76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007874:	461a      	mov	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007882:	f003 031f 	and.w	r3, r3, #31
 8007886:	2b02      	cmp	r3, #2
 8007888:	d01a      	beq.n	80078c0 <USBD_LL_SetupStage+0x72>
 800788a:	2b02      	cmp	r3, #2
 800788c:	d822      	bhi.n	80078d4 <USBD_LL_SetupStage+0x86>
 800788e:	2b00      	cmp	r3, #0
 8007890:	d002      	beq.n	8007898 <USBD_LL_SetupStage+0x4a>
 8007892:	2b01      	cmp	r3, #1
 8007894:	d00a      	beq.n	80078ac <USBD_LL_SetupStage+0x5e>
 8007896:	e01d      	b.n	80078d4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800789e:	4619      	mov	r1, r3
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fb5f 	bl	8007f64 <USBD_StdDevReq>
 80078a6:	4603      	mov	r3, r0
 80078a8:	73fb      	strb	r3, [r7, #15]
      break;
 80078aa:	e020      	b.n	80078ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078b2:	4619      	mov	r1, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fbc7 	bl	8008048 <USBD_StdItfReq>
 80078ba:	4603      	mov	r3, r0
 80078bc:	73fb      	strb	r3, [r7, #15]
      break;
 80078be:	e016      	b.n	80078ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078c6:	4619      	mov	r1, r3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fc29 	bl	8008120 <USBD_StdEPReq>
 80078ce:	4603      	mov	r3, r0
 80078d0:	73fb      	strb	r3, [r7, #15]
      break;
 80078d2:	e00c      	b.n	80078ee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	4619      	mov	r1, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f001 fdf8 	bl	80094d8 <USBD_LL_StallEP>
 80078e8:	4603      	mov	r3, r0
 80078ea:	73fb      	strb	r3, [r7, #15]
      break;
 80078ec:	bf00      	nop
  }

  return ret;
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	460b      	mov	r3, r1
 8007902:	607a      	str	r2, [r7, #4]
 8007904:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800790a:	7afb      	ldrb	r3, [r7, #11]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d16e      	bne.n	80079ee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007916:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800791e:	2b03      	cmp	r3, #3
 8007920:	f040 8098 	bne.w	8007a54 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	429a      	cmp	r2, r3
 800792e:	d913      	bls.n	8007958 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	689a      	ldr	r2, [r3, #8]
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	1ad2      	subs	r2, r2, r3
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	68da      	ldr	r2, [r3, #12]
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	4293      	cmp	r3, r2
 8007948:	bf28      	it	cs
 800794a:	4613      	movcs	r3, r2
 800794c:	461a      	mov	r2, r3
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f001 f984 	bl	8008c5e <USBD_CtlContinueRx>
 8007956:	e07d      	b.n	8007a54 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800795e:	f003 031f 	and.w	r3, r3, #31
 8007962:	2b02      	cmp	r3, #2
 8007964:	d014      	beq.n	8007990 <USBD_LL_DataOutStage+0x98>
 8007966:	2b02      	cmp	r3, #2
 8007968:	d81d      	bhi.n	80079a6 <USBD_LL_DataOutStage+0xae>
 800796a:	2b00      	cmp	r3, #0
 800796c:	d002      	beq.n	8007974 <USBD_LL_DataOutStage+0x7c>
 800796e:	2b01      	cmp	r3, #1
 8007970:	d003      	beq.n	800797a <USBD_LL_DataOutStage+0x82>
 8007972:	e018      	b.n	80079a6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007974:	2300      	movs	r3, #0
 8007976:	75bb      	strb	r3, [r7, #22]
            break;
 8007978:	e018      	b.n	80079ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007980:	b2db      	uxtb	r3, r3
 8007982:	4619      	mov	r1, r3
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 fa5e 	bl	8007e46 <USBD_CoreFindIF>
 800798a:	4603      	mov	r3, r0
 800798c:	75bb      	strb	r3, [r7, #22]
            break;
 800798e:	e00d      	b.n	80079ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007996:	b2db      	uxtb	r3, r3
 8007998:	4619      	mov	r1, r3
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f000 fa60 	bl	8007e60 <USBD_CoreFindEP>
 80079a0:	4603      	mov	r3, r0
 80079a2:	75bb      	strb	r3, [r7, #22]
            break;
 80079a4:	e002      	b.n	80079ac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80079a6:	2300      	movs	r3, #0
 80079a8:	75bb      	strb	r3, [r7, #22]
            break;
 80079aa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80079ac:	7dbb      	ldrb	r3, [r7, #22]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d119      	bne.n	80079e6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d113      	bne.n	80079e6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80079be:	7dba      	ldrb	r2, [r7, #22]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	32ae      	adds	r2, #174	; 0xae
 80079c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00b      	beq.n	80079e6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80079ce:	7dba      	ldrb	r2, [r7, #22]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80079d6:	7dba      	ldrb	r2, [r7, #22]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	32ae      	adds	r2, #174	; 0xae
 80079dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f001 f94a 	bl	8008c80 <USBD_CtlSendStatus>
 80079ec:	e032      	b.n	8007a54 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80079ee:	7afb      	ldrb	r3, [r7, #11]
 80079f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	4619      	mov	r1, r3
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f000 fa31 	bl	8007e60 <USBD_CoreFindEP>
 80079fe:	4603      	mov	r3, r0
 8007a00:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a02:	7dbb      	ldrb	r3, [r7, #22]
 8007a04:	2bff      	cmp	r3, #255	; 0xff
 8007a06:	d025      	beq.n	8007a54 <USBD_LL_DataOutStage+0x15c>
 8007a08:	7dbb      	ldrb	r3, [r7, #22]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d122      	bne.n	8007a54 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	d117      	bne.n	8007a4a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007a1a:	7dba      	ldrb	r2, [r7, #22]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	32ae      	adds	r2, #174	; 0xae
 8007a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00f      	beq.n	8007a4a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007a2a:	7dba      	ldrb	r2, [r7, #22]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007a32:	7dba      	ldrb	r2, [r7, #22]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	32ae      	adds	r2, #174	; 0xae
 8007a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	7afa      	ldrb	r2, [r7, #11]
 8007a40:	4611      	mov	r1, r2
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	4798      	blx	r3
 8007a46:	4603      	mov	r3, r0
 8007a48:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d001      	beq.n	8007a54 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007a50:	7dfb      	ldrb	r3, [r7, #23]
 8007a52:	e000      	b.n	8007a56 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b086      	sub	sp, #24
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	460b      	mov	r3, r1
 8007a68:	607a      	str	r2, [r7, #4]
 8007a6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007a6c:	7afb      	ldrb	r3, [r7, #11]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d16f      	bne.n	8007b52 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	3314      	adds	r3, #20
 8007a76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d15a      	bne.n	8007b38 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	689a      	ldr	r2, [r3, #8]
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d914      	bls.n	8007ab8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	689a      	ldr	r2, [r3, #8]
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	1ad2      	subs	r2, r2, r3
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	6879      	ldr	r1, [r7, #4]
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f001 f8ac 	bl	8008c02 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007aaa:	2300      	movs	r3, #0
 8007aac:	2200      	movs	r2, #0
 8007aae:	2100      	movs	r1, #0
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f001 fdbb 	bl	800962c <USBD_LL_PrepareReceive>
 8007ab6:	e03f      	b.n	8007b38 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d11c      	bne.n	8007afe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d316      	bcc.n	8007afe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d20f      	bcs.n	8007afe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ade:	2200      	movs	r2, #0
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f001 f88d 	bl	8008c02 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007af0:	2300      	movs	r3, #0
 8007af2:	2200      	movs	r2, #0
 8007af4:	2100      	movs	r1, #0
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f001 fd98 	bl	800962c <USBD_LL_PrepareReceive>
 8007afc:	e01c      	b.n	8007b38 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	d10f      	bne.n	8007b2a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d009      	beq.n	8007b2a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b2a:	2180      	movs	r1, #128	; 0x80
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f001 fcd3 	bl	80094d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f001 f8b7 	bl	8008ca6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d03a      	beq.n	8007bb8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f7ff fe42 	bl	80077cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007b50:	e032      	b.n	8007bb8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007b52:	7afb      	ldrb	r3, [r7, #11]
 8007b54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 f97f 	bl	8007e60 <USBD_CoreFindEP>
 8007b62:	4603      	mov	r3, r0
 8007b64:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b66:	7dfb      	ldrb	r3, [r7, #23]
 8007b68:	2bff      	cmp	r3, #255	; 0xff
 8007b6a:	d025      	beq.n	8007bb8 <USBD_LL_DataInStage+0x15a>
 8007b6c:	7dfb      	ldrb	r3, [r7, #23]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d122      	bne.n	8007bb8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b03      	cmp	r3, #3
 8007b7c:	d11c      	bne.n	8007bb8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007b7e:	7dfa      	ldrb	r2, [r7, #23]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	32ae      	adds	r2, #174	; 0xae
 8007b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d014      	beq.n	8007bb8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007b8e:	7dfa      	ldrb	r2, [r7, #23]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007b96:	7dfa      	ldrb	r2, [r7, #23]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	32ae      	adds	r2, #174	; 0xae
 8007b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	7afa      	ldrb	r2, [r7, #11]
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	4798      	blx	r3
 8007baa:	4603      	mov	r3, r0
 8007bac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007bae:	7dbb      	ldrb	r3, [r7, #22]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d001      	beq.n	8007bb8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007bb4:	7dbb      	ldrb	r3, [r7, #22]
 8007bb6:	e000      	b.n	8007bba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3718      	adds	r7, #24
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d014      	beq.n	8007c28 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00e      	beq.n	8007c28 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	6852      	ldr	r2, [r2, #4]
 8007c16:	b2d2      	uxtb	r2, r2
 8007c18:	4611      	mov	r1, r2
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	4798      	blx	r3
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007c24:	2303      	movs	r3, #3
 8007c26:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c28:	2340      	movs	r3, #64	; 0x40
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f001 fc0d 	bl	800944e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2240      	movs	r2, #64	; 0x40
 8007c40:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c44:	2340      	movs	r3, #64	; 0x40
 8007c46:	2200      	movs	r2, #0
 8007c48:	2180      	movs	r1, #128	; 0x80
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f001 fbff 	bl	800944e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2240      	movs	r2, #64	; 0x40
 8007c5a:	621a      	str	r2, [r3, #32]

  return ret;
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b083      	sub	sp, #12
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	78fa      	ldrb	r2, [r7, #3]
 8007c76:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	370c      	adds	r7, #12
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b083      	sub	sp, #12
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c94:	b2da      	uxtb	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2204      	movs	r2, #4
 8007ca0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b083      	sub	sp, #12
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b04      	cmp	r3, #4
 8007cc4:	d106      	bne.n	8007cd4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007ccc:	b2da      	uxtb	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b082      	sub	sp, #8
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	d110      	bne.n	8007d18 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00b      	beq.n	8007d18 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d06:	69db      	ldr	r3, [r3, #28]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d005      	beq.n	8007d18 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b082      	sub	sp, #8
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	32ae      	adds	r2, #174	; 0xae
 8007d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e01c      	b.n	8007d7e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	d115      	bne.n	8007d7c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	32ae      	adds	r2, #174	; 0xae
 8007d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5e:	6a1b      	ldr	r3, [r3, #32]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00b      	beq.n	8007d7c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	32ae      	adds	r2, #174	; 0xae
 8007d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d72:	6a1b      	ldr	r3, [r3, #32]
 8007d74:	78fa      	ldrb	r2, [r7, #3]
 8007d76:	4611      	mov	r1, r2
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b082      	sub	sp, #8
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	460b      	mov	r3, r1
 8007d90:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	32ae      	adds	r2, #174	; 0xae
 8007d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d101      	bne.n	8007da8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e01c      	b.n	8007de2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2b03      	cmp	r3, #3
 8007db2:	d115      	bne.n	8007de0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	32ae      	adds	r2, #174	; 0xae
 8007dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00b      	beq.n	8007de0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	32ae      	adds	r2, #174	; 0xae
 8007dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd8:	78fa      	ldrb	r2, [r7, #3]
 8007dda:	4611      	mov	r1, r2
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b083      	sub	sp, #12
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00e      	beq.n	8007e3c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	6852      	ldr	r2, [r2, #4]
 8007e2a:	b2d2      	uxtb	r2, r2
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	4798      	blx	r3
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d001      	beq.n	8007e3c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b083      	sub	sp, #12
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	460b      	mov	r3, r1
 8007e50:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007e52:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007e6c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b086      	sub	sp, #24
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	460b      	mov	r3, r1
 8007e84:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	885b      	ldrh	r3, [r3, #2]
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d920      	bls.n	8007ee4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007eaa:	e013      	b.n	8007ed4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007eac:	f107 030a 	add.w	r3, r7, #10
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6978      	ldr	r0, [r7, #20]
 8007eb4:	f000 f81b 	bl	8007eee <USBD_GetNextDesc>
 8007eb8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	785b      	ldrb	r3, [r3, #1]
 8007ebe:	2b05      	cmp	r3, #5
 8007ec0:	d108      	bne.n	8007ed4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	789b      	ldrb	r3, [r3, #2]
 8007eca:	78fa      	ldrb	r2, [r7, #3]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d008      	beq.n	8007ee2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	885b      	ldrh	r3, [r3, #2]
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	897b      	ldrh	r3, [r7, #10]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d8e5      	bhi.n	8007eac <USBD_GetEpDesc+0x32>
 8007ee0:	e000      	b.n	8007ee4 <USBD_GetEpDesc+0x6a>
          break;
 8007ee2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007ee4:	693b      	ldr	r3, [r7, #16]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3718      	adds	r7, #24
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b085      	sub	sp, #20
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	881a      	ldrh	r2, [r3, #0]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	4413      	add	r3, r2
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	461a      	mov	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4413      	add	r3, r2
 8007f18:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b087      	sub	sp, #28
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007f46:	8a3b      	ldrh	r3, [r7, #16]
 8007f48:	021b      	lsls	r3, r3, #8
 8007f4a:	b21a      	sxth	r2, r3
 8007f4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	b21b      	sxth	r3, r3
 8007f54:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007f56:	89fb      	ldrh	r3, [r7, #14]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	371c      	adds	r7, #28
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f7a:	2b40      	cmp	r3, #64	; 0x40
 8007f7c:	d005      	beq.n	8007f8a <USBD_StdDevReq+0x26>
 8007f7e:	2b40      	cmp	r3, #64	; 0x40
 8007f80:	d857      	bhi.n	8008032 <USBD_StdDevReq+0xce>
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00f      	beq.n	8007fa6 <USBD_StdDevReq+0x42>
 8007f86:	2b20      	cmp	r3, #32
 8007f88:	d153      	bne.n	8008032 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	32ae      	adds	r2, #174	; 0xae
 8007f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	4798      	blx	r3
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fa4:	e04a      	b.n	800803c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	785b      	ldrb	r3, [r3, #1]
 8007faa:	2b09      	cmp	r3, #9
 8007fac:	d83b      	bhi.n	8008026 <USBD_StdDevReq+0xc2>
 8007fae:	a201      	add	r2, pc, #4	; (adr r2, 8007fb4 <USBD_StdDevReq+0x50>)
 8007fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb4:	08008009 	.word	0x08008009
 8007fb8:	0800801d 	.word	0x0800801d
 8007fbc:	08008027 	.word	0x08008027
 8007fc0:	08008013 	.word	0x08008013
 8007fc4:	08008027 	.word	0x08008027
 8007fc8:	08007fe7 	.word	0x08007fe7
 8007fcc:	08007fdd 	.word	0x08007fdd
 8007fd0:	08008027 	.word	0x08008027
 8007fd4:	08007fff 	.word	0x08007fff
 8007fd8:	08007ff1 	.word	0x08007ff1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fa3c 	bl	800845c <USBD_GetDescriptor>
          break;
 8007fe4:	e024      	b.n	8008030 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fba1 	bl	8008730 <USBD_SetAddress>
          break;
 8007fee:	e01f      	b.n	8008030 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fbe0 	bl	80087b8 <USBD_SetConfig>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	73fb      	strb	r3, [r7, #15]
          break;
 8007ffc:	e018      	b.n	8008030 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fc83 	bl	800890c <USBD_GetConfig>
          break;
 8008006:	e013      	b.n	8008030 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fcb4 	bl	8008978 <USBD_GetStatus>
          break;
 8008010:	e00e      	b.n	8008030 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008012:	6839      	ldr	r1, [r7, #0]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fce3 	bl	80089e0 <USBD_SetFeature>
          break;
 800801a:	e009      	b.n	8008030 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800801c:	6839      	ldr	r1, [r7, #0]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fd07 	bl	8008a32 <USBD_ClrFeature>
          break;
 8008024:	e004      	b.n	8008030 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008026:	6839      	ldr	r1, [r7, #0]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 fd5e 	bl	8008aea <USBD_CtlError>
          break;
 800802e:	bf00      	nop
      }
      break;
 8008030:	e004      	b.n	800803c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fd58 	bl	8008aea <USBD_CtlError>
      break;
 800803a:	bf00      	nop
  }

  return ret;
 800803c:	7bfb      	ldrb	r3, [r7, #15]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop

08008048 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800805e:	2b40      	cmp	r3, #64	; 0x40
 8008060:	d005      	beq.n	800806e <USBD_StdItfReq+0x26>
 8008062:	2b40      	cmp	r3, #64	; 0x40
 8008064:	d852      	bhi.n	800810c <USBD_StdItfReq+0xc4>
 8008066:	2b00      	cmp	r3, #0
 8008068:	d001      	beq.n	800806e <USBD_StdItfReq+0x26>
 800806a:	2b20      	cmp	r3, #32
 800806c:	d14e      	bne.n	800810c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008074:	b2db      	uxtb	r3, r3
 8008076:	3b01      	subs	r3, #1
 8008078:	2b02      	cmp	r3, #2
 800807a:	d840      	bhi.n	80080fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	889b      	ldrh	r3, [r3, #4]
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b01      	cmp	r3, #1
 8008084:	d836      	bhi.n	80080f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	889b      	ldrh	r3, [r3, #4]
 800808a:	b2db      	uxtb	r3, r3
 800808c:	4619      	mov	r1, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f7ff fed9 	bl	8007e46 <USBD_CoreFindIF>
 8008094:	4603      	mov	r3, r0
 8008096:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008098:	7bbb      	ldrb	r3, [r7, #14]
 800809a:	2bff      	cmp	r3, #255	; 0xff
 800809c:	d01d      	beq.n	80080da <USBD_StdItfReq+0x92>
 800809e:	7bbb      	ldrb	r3, [r7, #14]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d11a      	bne.n	80080da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80080a4:	7bba      	ldrb	r2, [r7, #14]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	32ae      	adds	r2, #174	; 0xae
 80080aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00f      	beq.n	80080d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80080b4:	7bba      	ldrb	r2, [r7, #14]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80080bc:	7bba      	ldrb	r2, [r7, #14]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	32ae      	adds	r2, #174	; 0xae
 80080c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	6839      	ldr	r1, [r7, #0]
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	4798      	blx	r3
 80080ce:	4603      	mov	r3, r0
 80080d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80080d2:	e004      	b.n	80080de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80080d4:	2303      	movs	r3, #3
 80080d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80080d8:	e001      	b.n	80080de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80080da:	2303      	movs	r3, #3
 80080dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	88db      	ldrh	r3, [r3, #6]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d110      	bne.n	8008108 <USBD_StdItfReq+0xc0>
 80080e6:	7bfb      	ldrb	r3, [r7, #15]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10d      	bne.n	8008108 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 fdc7 	bl	8008c80 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80080f2:	e009      	b.n	8008108 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fcf7 	bl	8008aea <USBD_CtlError>
          break;
 80080fc:	e004      	b.n	8008108 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 fcf2 	bl	8008aea <USBD_CtlError>
          break;
 8008106:	e000      	b.n	800810a <USBD_StdItfReq+0xc2>
          break;
 8008108:	bf00      	nop
      }
      break;
 800810a:	e004      	b.n	8008116 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fceb 	bl	8008aea <USBD_CtlError>
      break;
 8008114:	bf00      	nop
  }

  return ret;
 8008116:	7bfb      	ldrb	r3, [r7, #15]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	889b      	ldrh	r3, [r3, #4]
 8008132:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800813c:	2b40      	cmp	r3, #64	; 0x40
 800813e:	d007      	beq.n	8008150 <USBD_StdEPReq+0x30>
 8008140:	2b40      	cmp	r3, #64	; 0x40
 8008142:	f200 817f 	bhi.w	8008444 <USBD_StdEPReq+0x324>
 8008146:	2b00      	cmp	r3, #0
 8008148:	d02a      	beq.n	80081a0 <USBD_StdEPReq+0x80>
 800814a:	2b20      	cmp	r3, #32
 800814c:	f040 817a 	bne.w	8008444 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008150:	7bbb      	ldrb	r3, [r7, #14]
 8008152:	4619      	mov	r1, r3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f7ff fe83 	bl	8007e60 <USBD_CoreFindEP>
 800815a:	4603      	mov	r3, r0
 800815c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800815e:	7b7b      	ldrb	r3, [r7, #13]
 8008160:	2bff      	cmp	r3, #255	; 0xff
 8008162:	f000 8174 	beq.w	800844e <USBD_StdEPReq+0x32e>
 8008166:	7b7b      	ldrb	r3, [r7, #13]
 8008168:	2b00      	cmp	r3, #0
 800816a:	f040 8170 	bne.w	800844e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800816e:	7b7a      	ldrb	r2, [r7, #13]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008176:	7b7a      	ldrb	r2, [r7, #13]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	32ae      	adds	r2, #174	; 0xae
 800817c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	2b00      	cmp	r3, #0
 8008184:	f000 8163 	beq.w	800844e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008188:	7b7a      	ldrb	r2, [r7, #13]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	32ae      	adds	r2, #174	; 0xae
 800818e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	4798      	blx	r3
 800819a:	4603      	mov	r3, r0
 800819c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800819e:	e156      	b.n	800844e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	785b      	ldrb	r3, [r3, #1]
 80081a4:	2b03      	cmp	r3, #3
 80081a6:	d008      	beq.n	80081ba <USBD_StdEPReq+0x9a>
 80081a8:	2b03      	cmp	r3, #3
 80081aa:	f300 8145 	bgt.w	8008438 <USBD_StdEPReq+0x318>
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f000 809b 	beq.w	80082ea <USBD_StdEPReq+0x1ca>
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d03c      	beq.n	8008232 <USBD_StdEPReq+0x112>
 80081b8:	e13e      	b.n	8008438 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	d002      	beq.n	80081cc <USBD_StdEPReq+0xac>
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	d016      	beq.n	80081f8 <USBD_StdEPReq+0xd8>
 80081ca:	e02c      	b.n	8008226 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081cc:	7bbb      	ldrb	r3, [r7, #14]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00d      	beq.n	80081ee <USBD_StdEPReq+0xce>
 80081d2:	7bbb      	ldrb	r3, [r7, #14]
 80081d4:	2b80      	cmp	r3, #128	; 0x80
 80081d6:	d00a      	beq.n	80081ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f001 f97b 	bl	80094d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80081e2:	2180      	movs	r1, #128	; 0x80
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f001 f977 	bl	80094d8 <USBD_LL_StallEP>
 80081ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081ec:	e020      	b.n	8008230 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80081ee:	6839      	ldr	r1, [r7, #0]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fc7a 	bl	8008aea <USBD_CtlError>
              break;
 80081f6:	e01b      	b.n	8008230 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	885b      	ldrh	r3, [r3, #2]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10e      	bne.n	800821e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008200:	7bbb      	ldrb	r3, [r7, #14]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00b      	beq.n	800821e <USBD_StdEPReq+0xfe>
 8008206:	7bbb      	ldrb	r3, [r7, #14]
 8008208:	2b80      	cmp	r3, #128	; 0x80
 800820a:	d008      	beq.n	800821e <USBD_StdEPReq+0xfe>
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	88db      	ldrh	r3, [r3, #6]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d104      	bne.n	800821e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	4619      	mov	r1, r3
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f001 f95d 	bl	80094d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fd2e 	bl	8008c80 <USBD_CtlSendStatus>

              break;
 8008224:	e004      	b.n	8008230 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008226:	6839      	ldr	r1, [r7, #0]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fc5e 	bl	8008aea <USBD_CtlError>
              break;
 800822e:	bf00      	nop
          }
          break;
 8008230:	e107      	b.n	8008442 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b02      	cmp	r3, #2
 800823c:	d002      	beq.n	8008244 <USBD_StdEPReq+0x124>
 800823e:	2b03      	cmp	r3, #3
 8008240:	d016      	beq.n	8008270 <USBD_StdEPReq+0x150>
 8008242:	e04b      	b.n	80082dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008244:	7bbb      	ldrb	r3, [r7, #14]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00d      	beq.n	8008266 <USBD_StdEPReq+0x146>
 800824a:	7bbb      	ldrb	r3, [r7, #14]
 800824c:	2b80      	cmp	r3, #128	; 0x80
 800824e:	d00a      	beq.n	8008266 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	4619      	mov	r1, r3
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f001 f93f 	bl	80094d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800825a:	2180      	movs	r1, #128	; 0x80
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f001 f93b 	bl	80094d8 <USBD_LL_StallEP>
 8008262:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008264:	e040      	b.n	80082e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008266:	6839      	ldr	r1, [r7, #0]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fc3e 	bl	8008aea <USBD_CtlError>
              break;
 800826e:	e03b      	b.n	80082e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	885b      	ldrh	r3, [r3, #2]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d136      	bne.n	80082e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008278:	7bbb      	ldrb	r3, [r7, #14]
 800827a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800827e:	2b00      	cmp	r3, #0
 8008280:	d004      	beq.n	800828c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008282:	7bbb      	ldrb	r3, [r7, #14]
 8008284:	4619      	mov	r1, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f001 f945 	bl	8009516 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fcf7 	bl	8008c80 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008292:	7bbb      	ldrb	r3, [r7, #14]
 8008294:	4619      	mov	r1, r3
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f7ff fde2 	bl	8007e60 <USBD_CoreFindEP>
 800829c:	4603      	mov	r3, r0
 800829e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082a0:	7b7b      	ldrb	r3, [r7, #13]
 80082a2:	2bff      	cmp	r3, #255	; 0xff
 80082a4:	d01f      	beq.n	80082e6 <USBD_StdEPReq+0x1c6>
 80082a6:	7b7b      	ldrb	r3, [r7, #13]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d11c      	bne.n	80082e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80082ac:	7b7a      	ldrb	r2, [r7, #13]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80082b4:	7b7a      	ldrb	r2, [r7, #13]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	32ae      	adds	r2, #174	; 0xae
 80082ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d010      	beq.n	80082e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80082c4:	7b7a      	ldrb	r2, [r7, #13]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	32ae      	adds	r2, #174	; 0xae
 80082ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	4798      	blx	r3
 80082d6:	4603      	mov	r3, r0
 80082d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80082da:	e004      	b.n	80082e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fc03 	bl	8008aea <USBD_CtlError>
              break;
 80082e4:	e000      	b.n	80082e8 <USBD_StdEPReq+0x1c8>
              break;
 80082e6:	bf00      	nop
          }
          break;
 80082e8:	e0ab      	b.n	8008442 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d002      	beq.n	80082fc <USBD_StdEPReq+0x1dc>
 80082f6:	2b03      	cmp	r3, #3
 80082f8:	d032      	beq.n	8008360 <USBD_StdEPReq+0x240>
 80082fa:	e097      	b.n	800842c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082fc:	7bbb      	ldrb	r3, [r7, #14]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d007      	beq.n	8008312 <USBD_StdEPReq+0x1f2>
 8008302:	7bbb      	ldrb	r3, [r7, #14]
 8008304:	2b80      	cmp	r3, #128	; 0x80
 8008306:	d004      	beq.n	8008312 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008308:	6839      	ldr	r1, [r7, #0]
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fbed 	bl	8008aea <USBD_CtlError>
                break;
 8008310:	e091      	b.n	8008436 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008312:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008316:	2b00      	cmp	r3, #0
 8008318:	da0b      	bge.n	8008332 <USBD_StdEPReq+0x212>
 800831a:	7bbb      	ldrb	r3, [r7, #14]
 800831c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008320:	4613      	mov	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4413      	add	r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	3310      	adds	r3, #16
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	4413      	add	r3, r2
 800832e:	3304      	adds	r3, #4
 8008330:	e00b      	b.n	800834a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008332:	7bbb      	ldrb	r3, [r7, #14]
 8008334:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008338:	4613      	mov	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4413      	add	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	4413      	add	r3, r2
 8008348:	3304      	adds	r3, #4
 800834a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	2200      	movs	r2, #0
 8008350:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	2202      	movs	r2, #2
 8008356:	4619      	mov	r1, r3
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 fc37 	bl	8008bcc <USBD_CtlSendData>
              break;
 800835e:	e06a      	b.n	8008436 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008360:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008364:	2b00      	cmp	r3, #0
 8008366:	da11      	bge.n	800838c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008368:	7bbb      	ldrb	r3, [r7, #14]
 800836a:	f003 020f 	and.w	r2, r3, #15
 800836e:	6879      	ldr	r1, [r7, #4]
 8008370:	4613      	mov	r3, r2
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	440b      	add	r3, r1
 800837a:	3324      	adds	r3, #36	; 0x24
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d117      	bne.n	80083b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fbb0 	bl	8008aea <USBD_CtlError>
                  break;
 800838a:	e054      	b.n	8008436 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800838c:	7bbb      	ldrb	r3, [r7, #14]
 800838e:	f003 020f 	and.w	r2, r3, #15
 8008392:	6879      	ldr	r1, [r7, #4]
 8008394:	4613      	mov	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	440b      	add	r3, r1
 800839e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80083a2:	881b      	ldrh	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d104      	bne.n	80083b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80083a8:	6839      	ldr	r1, [r7, #0]
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fb9d 	bl	8008aea <USBD_CtlError>
                  break;
 80083b0:	e041      	b.n	8008436 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	da0b      	bge.n	80083d2 <USBD_StdEPReq+0x2b2>
 80083ba:	7bbb      	ldrb	r3, [r7, #14]
 80083bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083c0:	4613      	mov	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	3310      	adds	r3, #16
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	4413      	add	r3, r2
 80083ce:	3304      	adds	r3, #4
 80083d0:	e00b      	b.n	80083ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083d2:	7bbb      	ldrb	r3, [r7, #14]
 80083d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083d8:	4613      	mov	r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	4413      	add	r3, r2
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	4413      	add	r3, r2
 80083e8:	3304      	adds	r3, #4
 80083ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80083ec:	7bbb      	ldrb	r3, [r7, #14]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d002      	beq.n	80083f8 <USBD_StdEPReq+0x2d8>
 80083f2:	7bbb      	ldrb	r3, [r7, #14]
 80083f4:	2b80      	cmp	r3, #128	; 0x80
 80083f6:	d103      	bne.n	8008400 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	2200      	movs	r2, #0
 80083fc:	601a      	str	r2, [r3, #0]
 80083fe:	e00e      	b.n	800841e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008400:	7bbb      	ldrb	r3, [r7, #14]
 8008402:	4619      	mov	r1, r3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f001 f8a5 	bl	8009554 <USBD_LL_IsStallEP>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d003      	beq.n	8008418 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	2201      	movs	r2, #1
 8008414:	601a      	str	r2, [r3, #0]
 8008416:	e002      	b.n	800841e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	2200      	movs	r2, #0
 800841c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	2202      	movs	r2, #2
 8008422:	4619      	mov	r1, r3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fbd1 	bl	8008bcc <USBD_CtlSendData>
              break;
 800842a:	e004      	b.n	8008436 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800842c:	6839      	ldr	r1, [r7, #0]
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fb5b 	bl	8008aea <USBD_CtlError>
              break;
 8008434:	bf00      	nop
          }
          break;
 8008436:	e004      	b.n	8008442 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fb55 	bl	8008aea <USBD_CtlError>
          break;
 8008440:	bf00      	nop
      }
      break;
 8008442:	e005      	b.n	8008450 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fb4f 	bl	8008aea <USBD_CtlError>
      break;
 800844c:	e000      	b.n	8008450 <USBD_StdEPReq+0x330>
      break;
 800844e:	bf00      	nop
  }

  return ret;
 8008450:	7bfb      	ldrb	r3, [r7, #15]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
	...

0800845c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008466:	2300      	movs	r3, #0
 8008468:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800846a:	2300      	movs	r3, #0
 800846c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800846e:	2300      	movs	r3, #0
 8008470:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	885b      	ldrh	r3, [r3, #2]
 8008476:	0a1b      	lsrs	r3, r3, #8
 8008478:	b29b      	uxth	r3, r3
 800847a:	3b01      	subs	r3, #1
 800847c:	2b06      	cmp	r3, #6
 800847e:	f200 8128 	bhi.w	80086d2 <USBD_GetDescriptor+0x276>
 8008482:	a201      	add	r2, pc, #4	; (adr r2, 8008488 <USBD_GetDescriptor+0x2c>)
 8008484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008488:	080084a5 	.word	0x080084a5
 800848c:	080084bd 	.word	0x080084bd
 8008490:	080084fd 	.word	0x080084fd
 8008494:	080086d3 	.word	0x080086d3
 8008498:	080086d3 	.word	0x080086d3
 800849c:	08008673 	.word	0x08008673
 80084a0:	0800869f 	.word	0x0800869f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	7c12      	ldrb	r2, [r2, #16]
 80084b0:	f107 0108 	add.w	r1, r7, #8
 80084b4:	4610      	mov	r0, r2
 80084b6:	4798      	blx	r3
 80084b8:	60f8      	str	r0, [r7, #12]
      break;
 80084ba:	e112      	b.n	80086e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	7c1b      	ldrb	r3, [r3, #16]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10d      	bne.n	80084e0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084cc:	f107 0208 	add.w	r2, r7, #8
 80084d0:	4610      	mov	r0, r2
 80084d2:	4798      	blx	r3
 80084d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3301      	adds	r3, #1
 80084da:	2202      	movs	r2, #2
 80084dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80084de:	e100      	b.n	80086e2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e8:	f107 0208 	add.w	r2, r7, #8
 80084ec:	4610      	mov	r0, r2
 80084ee:	4798      	blx	r3
 80084f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	3301      	adds	r3, #1
 80084f6:	2202      	movs	r2, #2
 80084f8:	701a      	strb	r2, [r3, #0]
      break;
 80084fa:	e0f2      	b.n	80086e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	885b      	ldrh	r3, [r3, #2]
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b05      	cmp	r3, #5
 8008504:	f200 80ac 	bhi.w	8008660 <USBD_GetDescriptor+0x204>
 8008508:	a201      	add	r2, pc, #4	; (adr r2, 8008510 <USBD_GetDescriptor+0xb4>)
 800850a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800850e:	bf00      	nop
 8008510:	08008529 	.word	0x08008529
 8008514:	0800855d 	.word	0x0800855d
 8008518:	08008591 	.word	0x08008591
 800851c:	080085c5 	.word	0x080085c5
 8008520:	080085f9 	.word	0x080085f9
 8008524:	0800862d 	.word	0x0800862d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00b      	beq.n	800854c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	7c12      	ldrb	r2, [r2, #16]
 8008540:	f107 0108 	add.w	r1, r7, #8
 8008544:	4610      	mov	r0, r2
 8008546:	4798      	blx	r3
 8008548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800854a:	e091      	b.n	8008670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800854c:	6839      	ldr	r1, [r7, #0]
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 facb 	bl	8008aea <USBD_CtlError>
            err++;
 8008554:	7afb      	ldrb	r3, [r7, #11]
 8008556:	3301      	adds	r3, #1
 8008558:	72fb      	strb	r3, [r7, #11]
          break;
 800855a:	e089      	b.n	8008670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00b      	beq.n	8008580 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	7c12      	ldrb	r2, [r2, #16]
 8008574:	f107 0108 	add.w	r1, r7, #8
 8008578:	4610      	mov	r0, r2
 800857a:	4798      	blx	r3
 800857c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800857e:	e077      	b.n	8008670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008580:	6839      	ldr	r1, [r7, #0]
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 fab1 	bl	8008aea <USBD_CtlError>
            err++;
 8008588:	7afb      	ldrb	r3, [r7, #11]
 800858a:	3301      	adds	r3, #1
 800858c:	72fb      	strb	r3, [r7, #11]
          break;
 800858e:	e06f      	b.n	8008670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00b      	beq.n	80085b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	7c12      	ldrb	r2, [r2, #16]
 80085a8:	f107 0108 	add.w	r1, r7, #8
 80085ac:	4610      	mov	r0, r2
 80085ae:	4798      	blx	r3
 80085b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085b2:	e05d      	b.n	8008670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085b4:	6839      	ldr	r1, [r7, #0]
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fa97 	bl	8008aea <USBD_CtlError>
            err++;
 80085bc:	7afb      	ldrb	r3, [r7, #11]
 80085be:	3301      	adds	r3, #1
 80085c0:	72fb      	strb	r3, [r7, #11]
          break;
 80085c2:	e055      	b.n	8008670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00b      	beq.n	80085e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	7c12      	ldrb	r2, [r2, #16]
 80085dc:	f107 0108 	add.w	r1, r7, #8
 80085e0:	4610      	mov	r0, r2
 80085e2:	4798      	blx	r3
 80085e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085e6:	e043      	b.n	8008670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fa7d 	bl	8008aea <USBD_CtlError>
            err++;
 80085f0:	7afb      	ldrb	r3, [r7, #11]
 80085f2:	3301      	adds	r3, #1
 80085f4:	72fb      	strb	r3, [r7, #11]
          break;
 80085f6:	e03b      	b.n	8008670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085fe:	695b      	ldr	r3, [r3, #20]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00b      	beq.n	800861c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800860a:	695b      	ldr	r3, [r3, #20]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	7c12      	ldrb	r2, [r2, #16]
 8008610:	f107 0108 	add.w	r1, r7, #8
 8008614:	4610      	mov	r0, r2
 8008616:	4798      	blx	r3
 8008618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800861a:	e029      	b.n	8008670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800861c:	6839      	ldr	r1, [r7, #0]
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fa63 	bl	8008aea <USBD_CtlError>
            err++;
 8008624:	7afb      	ldrb	r3, [r7, #11]
 8008626:	3301      	adds	r3, #1
 8008628:	72fb      	strb	r3, [r7, #11]
          break;
 800862a:	e021      	b.n	8008670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00b      	beq.n	8008650 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800863e:	699b      	ldr	r3, [r3, #24]
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	7c12      	ldrb	r2, [r2, #16]
 8008644:	f107 0108 	add.w	r1, r7, #8
 8008648:	4610      	mov	r0, r2
 800864a:	4798      	blx	r3
 800864c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800864e:	e00f      	b.n	8008670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008650:	6839      	ldr	r1, [r7, #0]
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fa49 	bl	8008aea <USBD_CtlError>
            err++;
 8008658:	7afb      	ldrb	r3, [r7, #11]
 800865a:	3301      	adds	r3, #1
 800865c:	72fb      	strb	r3, [r7, #11]
          break;
 800865e:	e007      	b.n	8008670 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008660:	6839      	ldr	r1, [r7, #0]
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fa41 	bl	8008aea <USBD_CtlError>
          err++;
 8008668:	7afb      	ldrb	r3, [r7, #11]
 800866a:	3301      	adds	r3, #1
 800866c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800866e:	bf00      	nop
      }
      break;
 8008670:	e037      	b.n	80086e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	7c1b      	ldrb	r3, [r3, #16]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d109      	bne.n	800868e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008682:	f107 0208 	add.w	r2, r7, #8
 8008686:	4610      	mov	r0, r2
 8008688:	4798      	blx	r3
 800868a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800868c:	e029      	b.n	80086e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800868e:	6839      	ldr	r1, [r7, #0]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fa2a 	bl	8008aea <USBD_CtlError>
        err++;
 8008696:	7afb      	ldrb	r3, [r7, #11]
 8008698:	3301      	adds	r3, #1
 800869a:	72fb      	strb	r3, [r7, #11]
      break;
 800869c:	e021      	b.n	80086e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	7c1b      	ldrb	r3, [r3, #16]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d10d      	bne.n	80086c2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ae:	f107 0208 	add.w	r2, r7, #8
 80086b2:	4610      	mov	r0, r2
 80086b4:	4798      	blx	r3
 80086b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	3301      	adds	r3, #1
 80086bc:	2207      	movs	r2, #7
 80086be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086c0:	e00f      	b.n	80086e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086c2:	6839      	ldr	r1, [r7, #0]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 fa10 	bl	8008aea <USBD_CtlError>
        err++;
 80086ca:	7afb      	ldrb	r3, [r7, #11]
 80086cc:	3301      	adds	r3, #1
 80086ce:	72fb      	strb	r3, [r7, #11]
      break;
 80086d0:	e007      	b.n	80086e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80086d2:	6839      	ldr	r1, [r7, #0]
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fa08 	bl	8008aea <USBD_CtlError>
      err++;
 80086da:	7afb      	ldrb	r3, [r7, #11]
 80086dc:	3301      	adds	r3, #1
 80086de:	72fb      	strb	r3, [r7, #11]
      break;
 80086e0:	bf00      	nop
  }

  if (err != 0U)
 80086e2:	7afb      	ldrb	r3, [r7, #11]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d11e      	bne.n	8008726 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	88db      	ldrh	r3, [r3, #6]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d016      	beq.n	800871e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80086f0:	893b      	ldrh	r3, [r7, #8]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00e      	beq.n	8008714 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	88da      	ldrh	r2, [r3, #6]
 80086fa:	893b      	ldrh	r3, [r7, #8]
 80086fc:	4293      	cmp	r3, r2
 80086fe:	bf28      	it	cs
 8008700:	4613      	movcs	r3, r2
 8008702:	b29b      	uxth	r3, r3
 8008704:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008706:	893b      	ldrh	r3, [r7, #8]
 8008708:	461a      	mov	r2, r3
 800870a:	68f9      	ldr	r1, [r7, #12]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fa5d 	bl	8008bcc <USBD_CtlSendData>
 8008712:	e009      	b.n	8008728 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008714:	6839      	ldr	r1, [r7, #0]
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f9e7 	bl	8008aea <USBD_CtlError>
 800871c:	e004      	b.n	8008728 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 faae 	bl	8008c80 <USBD_CtlSendStatus>
 8008724:	e000      	b.n	8008728 <USBD_GetDescriptor+0x2cc>
    return;
 8008726:	bf00      	nop
  }
}
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop

08008730 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	889b      	ldrh	r3, [r3, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d131      	bne.n	80087a6 <USBD_SetAddress+0x76>
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	88db      	ldrh	r3, [r3, #6]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d12d      	bne.n	80087a6 <USBD_SetAddress+0x76>
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	885b      	ldrh	r3, [r3, #2]
 800874e:	2b7f      	cmp	r3, #127	; 0x7f
 8008750:	d829      	bhi.n	80087a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	885b      	ldrh	r3, [r3, #2]
 8008756:	b2db      	uxtb	r3, r3
 8008758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800875c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b03      	cmp	r3, #3
 8008768:	d104      	bne.n	8008774 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800876a:	6839      	ldr	r1, [r7, #0]
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f9bc 	bl	8008aea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008772:	e01d      	b.n	80087b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	7bfa      	ldrb	r2, [r7, #15]
 8008778:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800877c:	7bfb      	ldrb	r3, [r7, #15]
 800877e:	4619      	mov	r1, r3
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 ff13 	bl	80095ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 fa7a 	bl	8008c80 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800878c:	7bfb      	ldrb	r3, [r7, #15]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d004      	beq.n	800879c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2202      	movs	r2, #2
 8008796:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800879a:	e009      	b.n	80087b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087a4:	e004      	b.n	80087b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80087a6:	6839      	ldr	r1, [r7, #0]
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f99e 	bl	8008aea <USBD_CtlError>
  }
}
 80087ae:	bf00      	nop
 80087b0:	bf00      	nop
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	885b      	ldrh	r3, [r3, #2]
 80087ca:	b2da      	uxtb	r2, r3
 80087cc:	4b4e      	ldr	r3, [pc, #312]	; (8008908 <USBD_SetConfig+0x150>)
 80087ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80087d0:	4b4d      	ldr	r3, [pc, #308]	; (8008908 <USBD_SetConfig+0x150>)
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d905      	bls.n	80087e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80087d8:	6839      	ldr	r1, [r7, #0]
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f985 	bl	8008aea <USBD_CtlError>
    return USBD_FAIL;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e08c      	b.n	80088fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d002      	beq.n	80087f6 <USBD_SetConfig+0x3e>
 80087f0:	2b03      	cmp	r3, #3
 80087f2:	d029      	beq.n	8008848 <USBD_SetConfig+0x90>
 80087f4:	e075      	b.n	80088e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80087f6:	4b44      	ldr	r3, [pc, #272]	; (8008908 <USBD_SetConfig+0x150>)
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d020      	beq.n	8008840 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80087fe:	4b42      	ldr	r3, [pc, #264]	; (8008908 <USBD_SetConfig+0x150>)
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	461a      	mov	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008808:	4b3f      	ldr	r3, [pc, #252]	; (8008908 <USBD_SetConfig+0x150>)
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	4619      	mov	r1, r3
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f7fe ffe7 	bl	80077e2 <USBD_SetClassConfig>
 8008814:	4603      	mov	r3, r0
 8008816:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008818:	7bfb      	ldrb	r3, [r7, #15]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d008      	beq.n	8008830 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800881e:	6839      	ldr	r1, [r7, #0]
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 f962 	bl	8008aea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2202      	movs	r2, #2
 800882a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800882e:	e065      	b.n	80088fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fa25 	bl	8008c80 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2203      	movs	r2, #3
 800883a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800883e:	e05d      	b.n	80088fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fa1d 	bl	8008c80 <USBD_CtlSendStatus>
      break;
 8008846:	e059      	b.n	80088fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008848:	4b2f      	ldr	r3, [pc, #188]	; (8008908 <USBD_SetConfig+0x150>)
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d112      	bne.n	8008876 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2202      	movs	r2, #2
 8008854:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008858:	4b2b      	ldr	r3, [pc, #172]	; (8008908 <USBD_SetConfig+0x150>)
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	461a      	mov	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008862:	4b29      	ldr	r3, [pc, #164]	; (8008908 <USBD_SetConfig+0x150>)
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	4619      	mov	r1, r3
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f7fe ffd6 	bl	800781a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fa06 	bl	8008c80 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008874:	e042      	b.n	80088fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008876:	4b24      	ldr	r3, [pc, #144]	; (8008908 <USBD_SetConfig+0x150>)
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	461a      	mov	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	429a      	cmp	r2, r3
 8008882:	d02a      	beq.n	80088da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	b2db      	uxtb	r3, r3
 800888a:	4619      	mov	r1, r3
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f7fe ffc4 	bl	800781a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008892:	4b1d      	ldr	r3, [pc, #116]	; (8008908 <USBD_SetConfig+0x150>)
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	461a      	mov	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800889c:	4b1a      	ldr	r3, [pc, #104]	; (8008908 <USBD_SetConfig+0x150>)
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	4619      	mov	r1, r3
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7fe ff9d 	bl	80077e2 <USBD_SetClassConfig>
 80088a8:	4603      	mov	r3, r0
 80088aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00f      	beq.n	80088d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80088b2:	6839      	ldr	r1, [r7, #0]
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 f918 	bl	8008aea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	4619      	mov	r1, r3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7fe ffa9 	bl	800781a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2202      	movs	r2, #2
 80088cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088d0:	e014      	b.n	80088fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f9d4 	bl	8008c80 <USBD_CtlSendStatus>
      break;
 80088d8:	e010      	b.n	80088fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f9d0 	bl	8008c80 <USBD_CtlSendStatus>
      break;
 80088e0:	e00c      	b.n	80088fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80088e2:	6839      	ldr	r1, [r7, #0]
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f900 	bl	8008aea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088ea:	4b07      	ldr	r3, [pc, #28]	; (8008908 <USBD_SetConfig+0x150>)
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	4619      	mov	r1, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7fe ff92 	bl	800781a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80088f6:	2303      	movs	r3, #3
 80088f8:	73fb      	strb	r3, [r7, #15]
      break;
 80088fa:	bf00      	nop
  }

  return ret;
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	20000314 	.word	0x20000314

0800890c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	88db      	ldrh	r3, [r3, #6]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d004      	beq.n	8008928 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800891e:	6839      	ldr	r1, [r7, #0]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f8e2 	bl	8008aea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008926:	e023      	b.n	8008970 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800892e:	b2db      	uxtb	r3, r3
 8008930:	2b02      	cmp	r3, #2
 8008932:	dc02      	bgt.n	800893a <USBD_GetConfig+0x2e>
 8008934:	2b00      	cmp	r3, #0
 8008936:	dc03      	bgt.n	8008940 <USBD_GetConfig+0x34>
 8008938:	e015      	b.n	8008966 <USBD_GetConfig+0x5a>
 800893a:	2b03      	cmp	r3, #3
 800893c:	d00b      	beq.n	8008956 <USBD_GetConfig+0x4a>
 800893e:	e012      	b.n	8008966 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	3308      	adds	r3, #8
 800894a:	2201      	movs	r2, #1
 800894c:	4619      	mov	r1, r3
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f93c 	bl	8008bcc <USBD_CtlSendData>
        break;
 8008954:	e00c      	b.n	8008970 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	3304      	adds	r3, #4
 800895a:	2201      	movs	r2, #1
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f934 	bl	8008bcc <USBD_CtlSendData>
        break;
 8008964:	e004      	b.n	8008970 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008966:	6839      	ldr	r1, [r7, #0]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f8be 	bl	8008aea <USBD_CtlError>
        break;
 800896e:	bf00      	nop
}
 8008970:	bf00      	nop
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008988:	b2db      	uxtb	r3, r3
 800898a:	3b01      	subs	r3, #1
 800898c:	2b02      	cmp	r3, #2
 800898e:	d81e      	bhi.n	80089ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	88db      	ldrh	r3, [r3, #6]
 8008994:	2b02      	cmp	r3, #2
 8008996:	d004      	beq.n	80089a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008998:	6839      	ldr	r1, [r7, #0]
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f8a5 	bl	8008aea <USBD_CtlError>
        break;
 80089a0:	e01a      	b.n	80089d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d005      	beq.n	80089be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	f043 0202 	orr.w	r2, r3, #2
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	330c      	adds	r3, #12
 80089c2:	2202      	movs	r2, #2
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 f900 	bl	8008bcc <USBD_CtlSendData>
      break;
 80089cc:	e004      	b.n	80089d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80089ce:	6839      	ldr	r1, [r7, #0]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 f88a 	bl	8008aea <USBD_CtlError>
      break;
 80089d6:	bf00      	nop
  }
}
 80089d8:	bf00      	nop
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	885b      	ldrh	r3, [r3, #2]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d107      	bne.n	8008a02 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f940 	bl	8008c80 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008a00:	e013      	b.n	8008a2a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	885b      	ldrh	r3, [r3, #2]
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d10b      	bne.n	8008a22 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	889b      	ldrh	r3, [r3, #4]
 8008a0e:	0a1b      	lsrs	r3, r3, #8
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	b2da      	uxtb	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f930 	bl	8008c80 <USBD_CtlSendStatus>
}
 8008a20:	e003      	b.n	8008a2a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f860 	bl	8008aea <USBD_CtlError>
}
 8008a2a:	bf00      	nop
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b082      	sub	sp, #8
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	3b01      	subs	r3, #1
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d80b      	bhi.n	8008a62 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	885b      	ldrh	r3, [r3, #2]
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d10c      	bne.n	8008a6c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f910 	bl	8008c80 <USBD_CtlSendStatus>
      }
      break;
 8008a60:	e004      	b.n	8008a6c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f840 	bl	8008aea <USBD_CtlError>
      break;
 8008a6a:	e000      	b.n	8008a6e <USBD_ClrFeature+0x3c>
      break;
 8008a6c:	bf00      	nop
  }
}
 8008a6e:	bf00      	nop
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b084      	sub	sp, #16
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	781a      	ldrb	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	781a      	ldrb	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f7ff fa41 	bl	8007f28 <SWAPBYTE>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f7ff fa34 	bl	8007f28 <SWAPBYTE>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	3301      	adds	r3, #1
 8008acc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f7ff fa27 	bl	8007f28 <SWAPBYTE>
 8008ada:	4603      	mov	r3, r0
 8008adc:	461a      	mov	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	80da      	strh	r2, [r3, #6]
}
 8008ae2:	bf00      	nop
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b082      	sub	sp, #8
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008af4:	2180      	movs	r1, #128	; 0x80
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fcee 	bl	80094d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008afc:	2100      	movs	r1, #0
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fcea 	bl	80094d8 <USBD_LL_StallEP>
}
 8008b04:	bf00      	nop
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b086      	sub	sp, #24
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d036      	beq.n	8008b90 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008b26:	6938      	ldr	r0, [r7, #16]
 8008b28:	f000 f836 	bl	8008b98 <USBD_GetLen>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	3301      	adds	r3, #1
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	005b      	lsls	r3, r3, #1
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008b3a:	7dfb      	ldrb	r3, [r7, #23]
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	4413      	add	r3, r2
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	7812      	ldrb	r2, [r2, #0]
 8008b44:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b46:	7dfb      	ldrb	r3, [r7, #23]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008b4c:	7dfb      	ldrb	r3, [r7, #23]
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	4413      	add	r3, r2
 8008b52:	2203      	movs	r2, #3
 8008b54:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b56:	7dfb      	ldrb	r3, [r7, #23]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008b5c:	e013      	b.n	8008b86 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008b5e:	7dfb      	ldrb	r3, [r7, #23]
 8008b60:	68ba      	ldr	r2, [r7, #8]
 8008b62:	4413      	add	r3, r2
 8008b64:	693a      	ldr	r2, [r7, #16]
 8008b66:	7812      	ldrb	r2, [r2, #0]
 8008b68:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	613b      	str	r3, [r7, #16]
    idx++;
 8008b70:	7dfb      	ldrb	r3, [r7, #23]
 8008b72:	3301      	adds	r3, #1
 8008b74:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008b76:	7dfb      	ldrb	r3, [r7, #23]
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008b80:	7dfb      	ldrb	r3, [r7, #23]
 8008b82:	3301      	adds	r3, #1
 8008b84:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1e7      	bne.n	8008b5e <USBD_GetString+0x52>
 8008b8e:	e000      	b.n	8008b92 <USBD_GetString+0x86>
    return;
 8008b90:	bf00      	nop
  }
}
 8008b92:	3718      	adds	r7, #24
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008ba8:	e005      	b.n	8008bb6 <USBD_GetLen+0x1e>
  {
    len++;
 8008baa:	7bfb      	ldrb	r3, [r7, #15]
 8008bac:	3301      	adds	r3, #1
 8008bae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d1f5      	bne.n	8008baa <USBD_GetLen+0x12>
  }

  return len;
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3714      	adds	r7, #20
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2202      	movs	r2, #2
 8008bdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f000 fcf9 	bl	80095ea <USBD_LL_Transmit>

  return USBD_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b084      	sub	sp, #16
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	60f8      	str	r0, [r7, #12]
 8008c0a:	60b9      	str	r1, [r7, #8]
 8008c0c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	2100      	movs	r1, #0
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f000 fce8 	bl	80095ea <USBD_LL_Transmit>

  return USBD_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2203      	movs	r2, #3
 8008c34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f000 fcec 	bl	800962c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	60f8      	str	r0, [r7, #12]
 8008c66:	60b9      	str	r1, [r7, #8]
 8008c68:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68ba      	ldr	r2, [r7, #8]
 8008c6e:	2100      	movs	r1, #0
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f000 fcdb 	bl	800962c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2204      	movs	r2, #4
 8008c8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c90:	2300      	movs	r3, #0
 8008c92:	2200      	movs	r2, #0
 8008c94:	2100      	movs	r1, #0
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fca7 	bl	80095ea <USBD_LL_Transmit>

  return USBD_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b082      	sub	sp, #8
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2205      	movs	r2, #5
 8008cb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	2200      	movs	r2, #0
 8008cba:	2100      	movs	r1, #0
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 fcb5 	bl	800962c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	4912      	ldr	r1, [pc, #72]	; (8008d1c <MX_USB_DEVICE_Init+0x50>)
 8008cd4:	4812      	ldr	r0, [pc, #72]	; (8008d20 <MX_USB_DEVICE_Init+0x54>)
 8008cd6:	f7fe fd07 	bl	80076e8 <USBD_Init>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d001      	beq.n	8008ce4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ce0:	f7f7 ff34 	bl	8000b4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ce4:	490f      	ldr	r1, [pc, #60]	; (8008d24 <MX_USB_DEVICE_Init+0x58>)
 8008ce6:	480e      	ldr	r0, [pc, #56]	; (8008d20 <MX_USB_DEVICE_Init+0x54>)
 8008ce8:	f7fe fd2e 	bl	8007748 <USBD_RegisterClass>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d001      	beq.n	8008cf6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008cf2:	f7f7 ff2b 	bl	8000b4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008cf6:	490c      	ldr	r1, [pc, #48]	; (8008d28 <MX_USB_DEVICE_Init+0x5c>)
 8008cf8:	4809      	ldr	r0, [pc, #36]	; (8008d20 <MX_USB_DEVICE_Init+0x54>)
 8008cfa:	f7fe fc1f 	bl	800753c <USBD_CDC_RegisterInterface>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d001      	beq.n	8008d08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d04:	f7f7 ff22 	bl	8000b4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d08:	4805      	ldr	r0, [pc, #20]	; (8008d20 <MX_USB_DEVICE_Init+0x54>)
 8008d0a:	f7fe fd53 	bl	80077b4 <USBD_Start>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d001      	beq.n	8008d18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d14:	f7f7 ff1a 	bl	8000b4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d18:	bf00      	nop
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	200000b0 	.word	0x200000b0
 8008d20:	20000318 	.word	0x20000318
 8008d24:	2000001c 	.word	0x2000001c
 8008d28:	2000009c 	.word	0x2000009c

08008d2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d30:	2200      	movs	r2, #0
 8008d32:	4905      	ldr	r1, [pc, #20]	; (8008d48 <CDC_Init_FS+0x1c>)
 8008d34:	4805      	ldr	r0, [pc, #20]	; (8008d4c <CDC_Init_FS+0x20>)
 8008d36:	f7fe fc1b 	bl	8007570 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d3a:	4905      	ldr	r1, [pc, #20]	; (8008d50 <CDC_Init_FS+0x24>)
 8008d3c:	4803      	ldr	r0, [pc, #12]	; (8008d4c <CDC_Init_FS+0x20>)
 8008d3e:	f7fe fc39 	bl	80075b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	20000df4 	.word	0x20000df4
 8008d4c:	20000318 	.word	0x20000318
 8008d50:	200005f4 	.word	0x200005f4

08008d54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008d54:	b480      	push	{r7}
 8008d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	6039      	str	r1, [r7, #0]
 8008d6e:	71fb      	strb	r3, [r7, #7]
 8008d70:	4613      	mov	r3, r2
 8008d72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d74:	79fb      	ldrb	r3, [r7, #7]
 8008d76:	2b23      	cmp	r3, #35	; 0x23
 8008d78:	d84a      	bhi.n	8008e10 <CDC_Control_FS+0xac>
 8008d7a:	a201      	add	r2, pc, #4	; (adr r2, 8008d80 <CDC_Control_FS+0x1c>)
 8008d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d80:	08008e11 	.word	0x08008e11
 8008d84:	08008e11 	.word	0x08008e11
 8008d88:	08008e11 	.word	0x08008e11
 8008d8c:	08008e11 	.word	0x08008e11
 8008d90:	08008e11 	.word	0x08008e11
 8008d94:	08008e11 	.word	0x08008e11
 8008d98:	08008e11 	.word	0x08008e11
 8008d9c:	08008e11 	.word	0x08008e11
 8008da0:	08008e11 	.word	0x08008e11
 8008da4:	08008e11 	.word	0x08008e11
 8008da8:	08008e11 	.word	0x08008e11
 8008dac:	08008e11 	.word	0x08008e11
 8008db0:	08008e11 	.word	0x08008e11
 8008db4:	08008e11 	.word	0x08008e11
 8008db8:	08008e11 	.word	0x08008e11
 8008dbc:	08008e11 	.word	0x08008e11
 8008dc0:	08008e11 	.word	0x08008e11
 8008dc4:	08008e11 	.word	0x08008e11
 8008dc8:	08008e11 	.word	0x08008e11
 8008dcc:	08008e11 	.word	0x08008e11
 8008dd0:	08008e11 	.word	0x08008e11
 8008dd4:	08008e11 	.word	0x08008e11
 8008dd8:	08008e11 	.word	0x08008e11
 8008ddc:	08008e11 	.word	0x08008e11
 8008de0:	08008e11 	.word	0x08008e11
 8008de4:	08008e11 	.word	0x08008e11
 8008de8:	08008e11 	.word	0x08008e11
 8008dec:	08008e11 	.word	0x08008e11
 8008df0:	08008e11 	.word	0x08008e11
 8008df4:	08008e11 	.word	0x08008e11
 8008df8:	08008e11 	.word	0x08008e11
 8008dfc:	08008e11 	.word	0x08008e11
 8008e00:	08008e11 	.word	0x08008e11
 8008e04:	08008e11 	.word	0x08008e11
 8008e08:	08008e11 	.word	0x08008e11
 8008e0c:	08008e11 	.word	0x08008e11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e10:	bf00      	nop
  }

  return (USBD_OK);
 8008e12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e2a:	6879      	ldr	r1, [r7, #4]
 8008e2c:	4805      	ldr	r0, [pc, #20]	; (8008e44 <CDC_Receive_FS+0x24>)
 8008e2e:	f7fe fbc1 	bl	80075b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008e32:	4804      	ldr	r0, [pc, #16]	; (8008e44 <CDC_Receive_FS+0x24>)
 8008e34:	f7fe fc22 	bl	800767c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008e38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	20000318 	.word	0x20000318

08008e48 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	460b      	mov	r3, r1
 8008e52:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008e54:	2300      	movs	r3, #0
 8008e56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008e58:	4b0d      	ldr	r3, [pc, #52]	; (8008e90 <CDC_Transmit_FS+0x48>)
 8008e5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e5e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e00b      	b.n	8008e86 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008e6e:	887b      	ldrh	r3, [r7, #2]
 8008e70:	461a      	mov	r2, r3
 8008e72:	6879      	ldr	r1, [r7, #4]
 8008e74:	4806      	ldr	r0, [pc, #24]	; (8008e90 <CDC_Transmit_FS+0x48>)
 8008e76:	f7fe fb7b 	bl	8007570 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008e7a:	4805      	ldr	r0, [pc, #20]	; (8008e90 <CDC_Transmit_FS+0x48>)
 8008e7c:	f7fe fbb8 	bl	80075f0 <USBD_CDC_TransmitPacket>
 8008e80:	4603      	mov	r3, r0
 8008e82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	20000318 	.word	0x20000318

08008e94 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b087      	sub	sp, #28
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008ea6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	371c      	adds	r7, #28
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
	...

08008eb8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	6039      	str	r1, [r7, #0]
 8008ec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	2212      	movs	r2, #18
 8008ec8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008eca:	4b03      	ldr	r3, [pc, #12]	; (8008ed8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr
 8008ed8:	200000cc 	.word	0x200000cc

08008edc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	6039      	str	r1, [r7, #0]
 8008ee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	2204      	movs	r2, #4
 8008eec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008eee:	4b03      	ldr	r3, [pc, #12]	; (8008efc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr
 8008efc:	200000e0 	.word	0x200000e0

08008f00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	4603      	mov	r3, r0
 8008f08:	6039      	str	r1, [r7, #0]
 8008f0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f0c:	79fb      	ldrb	r3, [r7, #7]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d105      	bne.n	8008f1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	4907      	ldr	r1, [pc, #28]	; (8008f34 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f16:	4808      	ldr	r0, [pc, #32]	; (8008f38 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f18:	f7ff fdf8 	bl	8008b0c <USBD_GetString>
 8008f1c:	e004      	b.n	8008f28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	4904      	ldr	r1, [pc, #16]	; (8008f34 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f22:	4805      	ldr	r0, [pc, #20]	; (8008f38 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f24:	f7ff fdf2 	bl	8008b0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f28:	4b02      	ldr	r3, [pc, #8]	; (8008f34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3708      	adds	r7, #8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	200015f4 	.word	0x200015f4
 8008f38:	0800a614 	.word	0x0800a614

08008f3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	4603      	mov	r3, r0
 8008f44:	6039      	str	r1, [r7, #0]
 8008f46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f48:	683a      	ldr	r2, [r7, #0]
 8008f4a:	4904      	ldr	r1, [pc, #16]	; (8008f5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008f4c:	4804      	ldr	r0, [pc, #16]	; (8008f60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008f4e:	f7ff fddd 	bl	8008b0c <USBD_GetString>
  return USBD_StrDesc;
 8008f52:	4b02      	ldr	r3, [pc, #8]	; (8008f5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	200015f4 	.word	0x200015f4
 8008f60:	0800a62c 	.word	0x0800a62c

08008f64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	6039      	str	r1, [r7, #0]
 8008f6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	221a      	movs	r2, #26
 8008f74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008f76:	f000 f843 	bl	8009000 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008f7a:	4b02      	ldr	r3, [pc, #8]	; (8008f84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	200000e4 	.word	0x200000e4

08008f88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	4603      	mov	r3, r0
 8008f90:	6039      	str	r1, [r7, #0]
 8008f92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f94:	79fb      	ldrb	r3, [r7, #7]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d105      	bne.n	8008fa6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f9a:	683a      	ldr	r2, [r7, #0]
 8008f9c:	4907      	ldr	r1, [pc, #28]	; (8008fbc <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f9e:	4808      	ldr	r0, [pc, #32]	; (8008fc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fa0:	f7ff fdb4 	bl	8008b0c <USBD_GetString>
 8008fa4:	e004      	b.n	8008fb0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	4904      	ldr	r1, [pc, #16]	; (8008fbc <USBD_FS_ConfigStrDescriptor+0x34>)
 8008faa:	4805      	ldr	r0, [pc, #20]	; (8008fc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fac:	f7ff fdae 	bl	8008b0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fb0:	4b02      	ldr	r3, [pc, #8]	; (8008fbc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	200015f4 	.word	0x200015f4
 8008fc0:	0800a640 	.word	0x0800a640

08008fc4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	4603      	mov	r3, r0
 8008fcc:	6039      	str	r1, [r7, #0]
 8008fce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fd0:	79fb      	ldrb	r3, [r7, #7]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d105      	bne.n	8008fe2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	4907      	ldr	r1, [pc, #28]	; (8008ff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008fda:	4808      	ldr	r0, [pc, #32]	; (8008ffc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008fdc:	f7ff fd96 	bl	8008b0c <USBD_GetString>
 8008fe0:	e004      	b.n	8008fec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	4904      	ldr	r1, [pc, #16]	; (8008ff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008fe6:	4805      	ldr	r0, [pc, #20]	; (8008ffc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008fe8:	f7ff fd90 	bl	8008b0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fec:	4b02      	ldr	r3, [pc, #8]	; (8008ff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	200015f4 	.word	0x200015f4
 8008ffc:	0800a64c 	.word	0x0800a64c

08009000 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009006:	4b0f      	ldr	r3, [pc, #60]	; (8009044 <Get_SerialNum+0x44>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800900c:	4b0e      	ldr	r3, [pc, #56]	; (8009048 <Get_SerialNum+0x48>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009012:	4b0e      	ldr	r3, [pc, #56]	; (800904c <Get_SerialNum+0x4c>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4413      	add	r3, r2
 800901e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d009      	beq.n	800903a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009026:	2208      	movs	r2, #8
 8009028:	4909      	ldr	r1, [pc, #36]	; (8009050 <Get_SerialNum+0x50>)
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 f814 	bl	8009058 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009030:	2204      	movs	r2, #4
 8009032:	4908      	ldr	r1, [pc, #32]	; (8009054 <Get_SerialNum+0x54>)
 8009034:	68b8      	ldr	r0, [r7, #8]
 8009036:	f000 f80f 	bl	8009058 <IntToUnicode>
  }
}
 800903a:	bf00      	nop
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	1fff7a10 	.word	0x1fff7a10
 8009048:	1fff7a14 	.word	0x1fff7a14
 800904c:	1fff7a18 	.word	0x1fff7a18
 8009050:	200000e6 	.word	0x200000e6
 8009054:	200000f6 	.word	0x200000f6

08009058 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	4613      	mov	r3, r2
 8009064:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009066:	2300      	movs	r3, #0
 8009068:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800906a:	2300      	movs	r3, #0
 800906c:	75fb      	strb	r3, [r7, #23]
 800906e:	e027      	b.n	80090c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	0f1b      	lsrs	r3, r3, #28
 8009074:	2b09      	cmp	r3, #9
 8009076:	d80b      	bhi.n	8009090 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	0f1b      	lsrs	r3, r3, #28
 800907c:	b2da      	uxtb	r2, r3
 800907e:	7dfb      	ldrb	r3, [r7, #23]
 8009080:	005b      	lsls	r3, r3, #1
 8009082:	4619      	mov	r1, r3
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	440b      	add	r3, r1
 8009088:	3230      	adds	r2, #48	; 0x30
 800908a:	b2d2      	uxtb	r2, r2
 800908c:	701a      	strb	r2, [r3, #0]
 800908e:	e00a      	b.n	80090a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	0f1b      	lsrs	r3, r3, #28
 8009094:	b2da      	uxtb	r2, r3
 8009096:	7dfb      	ldrb	r3, [r7, #23]
 8009098:	005b      	lsls	r3, r3, #1
 800909a:	4619      	mov	r1, r3
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	440b      	add	r3, r1
 80090a0:	3237      	adds	r2, #55	; 0x37
 80090a2:	b2d2      	uxtb	r2, r2
 80090a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	011b      	lsls	r3, r3, #4
 80090aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80090ac:	7dfb      	ldrb	r3, [r7, #23]
 80090ae:	005b      	lsls	r3, r3, #1
 80090b0:	3301      	adds	r3, #1
 80090b2:	68ba      	ldr	r2, [r7, #8]
 80090b4:	4413      	add	r3, r2
 80090b6:	2200      	movs	r2, #0
 80090b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80090ba:	7dfb      	ldrb	r3, [r7, #23]
 80090bc:	3301      	adds	r3, #1
 80090be:	75fb      	strb	r3, [r7, #23]
 80090c0:	7dfa      	ldrb	r2, [r7, #23]
 80090c2:	79fb      	ldrb	r3, [r7, #7]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d3d3      	bcc.n	8009070 <IntToUnicode+0x18>
  }
}
 80090c8:	bf00      	nop
 80090ca:	bf00      	nop
 80090cc:	371c      	adds	r7, #28
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr
	...

080090d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b08a      	sub	sp, #40	; 0x28
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090e0:	f107 0314 	add.w	r3, r7, #20
 80090e4:	2200      	movs	r2, #0
 80090e6:	601a      	str	r2, [r3, #0]
 80090e8:	605a      	str	r2, [r3, #4]
 80090ea:	609a      	str	r2, [r3, #8]
 80090ec:	60da      	str	r2, [r3, #12]
 80090ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090f8:	d147      	bne.n	800918a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090fa:	2300      	movs	r3, #0
 80090fc:	613b      	str	r3, [r7, #16]
 80090fe:	4b25      	ldr	r3, [pc, #148]	; (8009194 <HAL_PCD_MspInit+0xbc>)
 8009100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009102:	4a24      	ldr	r2, [pc, #144]	; (8009194 <HAL_PCD_MspInit+0xbc>)
 8009104:	f043 0301 	orr.w	r3, r3, #1
 8009108:	6313      	str	r3, [r2, #48]	; 0x30
 800910a:	4b22      	ldr	r3, [pc, #136]	; (8009194 <HAL_PCD_MspInit+0xbc>)
 800910c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	613b      	str	r3, [r7, #16]
 8009114:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009116:	f44f 7300 	mov.w	r3, #512	; 0x200
 800911a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800911c:	2300      	movs	r3, #0
 800911e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009120:	2300      	movs	r3, #0
 8009122:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009124:	f107 0314 	add.w	r3, r7, #20
 8009128:	4619      	mov	r1, r3
 800912a:	481b      	ldr	r0, [pc, #108]	; (8009198 <HAL_PCD_MspInit+0xc0>)
 800912c:	f7f8 fca0 	bl	8001a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009130:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009136:	2302      	movs	r3, #2
 8009138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800913a:	2300      	movs	r3, #0
 800913c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800913e:	2300      	movs	r3, #0
 8009140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009142:	230a      	movs	r3, #10
 8009144:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009146:	f107 0314 	add.w	r3, r7, #20
 800914a:	4619      	mov	r1, r3
 800914c:	4812      	ldr	r0, [pc, #72]	; (8009198 <HAL_PCD_MspInit+0xc0>)
 800914e:	f7f8 fc8f 	bl	8001a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009152:	4b10      	ldr	r3, [pc, #64]	; (8009194 <HAL_PCD_MspInit+0xbc>)
 8009154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009156:	4a0f      	ldr	r2, [pc, #60]	; (8009194 <HAL_PCD_MspInit+0xbc>)
 8009158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800915c:	6353      	str	r3, [r2, #52]	; 0x34
 800915e:	2300      	movs	r3, #0
 8009160:	60fb      	str	r3, [r7, #12]
 8009162:	4b0c      	ldr	r3, [pc, #48]	; (8009194 <HAL_PCD_MspInit+0xbc>)
 8009164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009166:	4a0b      	ldr	r2, [pc, #44]	; (8009194 <HAL_PCD_MspInit+0xbc>)
 8009168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800916c:	6453      	str	r3, [r2, #68]	; 0x44
 800916e:	4b09      	ldr	r3, [pc, #36]	; (8009194 <HAL_PCD_MspInit+0xbc>)
 8009170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009176:	60fb      	str	r3, [r7, #12]
 8009178:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800917a:	2200      	movs	r2, #0
 800917c:	2100      	movs	r1, #0
 800917e:	2043      	movs	r0, #67	; 0x43
 8009180:	f7f8 fc3f 	bl	8001a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009184:	2043      	movs	r0, #67	; 0x43
 8009186:	f7f8 fc58 	bl	8001a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800918a:	bf00      	nop
 800918c:	3728      	adds	r7, #40	; 0x28
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	40023800 	.word	0x40023800
 8009198:	40020000 	.word	0x40020000

0800919c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80091b0:	4619      	mov	r1, r3
 80091b2:	4610      	mov	r0, r2
 80091b4:	f7fe fb4b 	bl	800784e <USBD_LL_SetupStage>
}
 80091b8:	bf00      	nop
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	460b      	mov	r3, r1
 80091ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80091d2:	78fa      	ldrb	r2, [r7, #3]
 80091d4:	6879      	ldr	r1, [r7, #4]
 80091d6:	4613      	mov	r3, r2
 80091d8:	00db      	lsls	r3, r3, #3
 80091da:	4413      	add	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	440b      	add	r3, r1
 80091e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	78fb      	ldrb	r3, [r7, #3]
 80091e8:	4619      	mov	r1, r3
 80091ea:	f7fe fb85 	bl	80078f8 <USBD_LL_DataOutStage>
}
 80091ee:	bf00      	nop
 80091f0:	3708      	adds	r7, #8
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b082      	sub	sp, #8
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
 80091fe:	460b      	mov	r3, r1
 8009200:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009208:	78fa      	ldrb	r2, [r7, #3]
 800920a:	6879      	ldr	r1, [r7, #4]
 800920c:	4613      	mov	r3, r2
 800920e:	00db      	lsls	r3, r3, #3
 8009210:	4413      	add	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	440b      	add	r3, r1
 8009216:	334c      	adds	r3, #76	; 0x4c
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	78fb      	ldrb	r3, [r7, #3]
 800921c:	4619      	mov	r1, r3
 800921e:	f7fe fc1e 	bl	8007a5e <USBD_LL_DataInStage>
}
 8009222:	bf00      	nop
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b082      	sub	sp, #8
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009238:	4618      	mov	r0, r3
 800923a:	f7fe fd52 	bl	8007ce2 <USBD_LL_SOF>
}
 800923e:	bf00      	nop
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b084      	sub	sp, #16
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800924e:	2301      	movs	r3, #1
 8009250:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d102      	bne.n	8009260 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800925a:	2300      	movs	r3, #0
 800925c:	73fb      	strb	r3, [r7, #15]
 800925e:	e008      	b.n	8009272 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	2b02      	cmp	r3, #2
 8009266:	d102      	bne.n	800926e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009268:	2301      	movs	r3, #1
 800926a:	73fb      	strb	r3, [r7, #15]
 800926c:	e001      	b.n	8009272 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800926e:	f7f7 fc6d 	bl	8000b4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009278:	7bfa      	ldrb	r2, [r7, #15]
 800927a:	4611      	mov	r1, r2
 800927c:	4618      	mov	r0, r3
 800927e:	f7fe fcf2 	bl	8007c66 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009288:	4618      	mov	r0, r3
 800928a:	f7fe fc9a 	bl	8007bc2 <USBD_LL_Reset>
}
 800928e:	bf00      	nop
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
	...

08009298 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fe fced 	bl	8007c86 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	6812      	ldr	r2, [r2, #0]
 80092ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80092be:	f043 0301 	orr.w	r3, r3, #1
 80092c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a1b      	ldr	r3, [r3, #32]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d005      	beq.n	80092d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092cc:	4b04      	ldr	r3, [pc, #16]	; (80092e0 <HAL_PCD_SuspendCallback+0x48>)
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	4a03      	ldr	r2, [pc, #12]	; (80092e0 <HAL_PCD_SuspendCallback+0x48>)
 80092d2:	f043 0306 	orr.w	r3, r3, #6
 80092d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80092d8:	bf00      	nop
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	e000ed00 	.word	0xe000ed00

080092e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7fe fcdd 	bl	8007cb2 <USBD_LL_Resume>
}
 80092f8:	bf00      	nop
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	460b      	mov	r3, r1
 800930a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009312:	78fa      	ldrb	r2, [r7, #3]
 8009314:	4611      	mov	r1, r2
 8009316:	4618      	mov	r0, r3
 8009318:	f7fe fd35 	bl	8007d86 <USBD_LL_IsoOUTIncomplete>
}
 800931c:	bf00      	nop
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	460b      	mov	r3, r1
 800932e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009336:	78fa      	ldrb	r2, [r7, #3]
 8009338:	4611      	mov	r1, r2
 800933a:	4618      	mov	r0, r3
 800933c:	f7fe fcf1 	bl	8007d22 <USBD_LL_IsoINIncomplete>
}
 8009340:	bf00      	nop
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009356:	4618      	mov	r0, r3
 8009358:	f7fe fd47 	bl	8007dea <USBD_LL_DevConnected>
}
 800935c:	bf00      	nop
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009372:	4618      	mov	r0, r3
 8009374:	f7fe fd44 	bl	8007e00 <USBD_LL_DevDisconnected>
}
 8009378:	bf00      	nop
 800937a:	3708      	adds	r7, #8
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d13c      	bne.n	800940a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009390:	4a20      	ldr	r2, [pc, #128]	; (8009414 <USBD_LL_Init+0x94>)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	4a1e      	ldr	r2, [pc, #120]	; (8009414 <USBD_LL_Init+0x94>)
 800939c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80093a0:	4b1c      	ldr	r3, [pc, #112]	; (8009414 <USBD_LL_Init+0x94>)
 80093a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80093a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80093a8:	4b1a      	ldr	r3, [pc, #104]	; (8009414 <USBD_LL_Init+0x94>)
 80093aa:	2204      	movs	r2, #4
 80093ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80093ae:	4b19      	ldr	r3, [pc, #100]	; (8009414 <USBD_LL_Init+0x94>)
 80093b0:	2202      	movs	r2, #2
 80093b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80093b4:	4b17      	ldr	r3, [pc, #92]	; (8009414 <USBD_LL_Init+0x94>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80093ba:	4b16      	ldr	r3, [pc, #88]	; (8009414 <USBD_LL_Init+0x94>)
 80093bc:	2202      	movs	r2, #2
 80093be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80093c0:	4b14      	ldr	r3, [pc, #80]	; (8009414 <USBD_LL_Init+0x94>)
 80093c2:	2200      	movs	r2, #0
 80093c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80093c6:	4b13      	ldr	r3, [pc, #76]	; (8009414 <USBD_LL_Init+0x94>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80093cc:	4b11      	ldr	r3, [pc, #68]	; (8009414 <USBD_LL_Init+0x94>)
 80093ce:	2200      	movs	r2, #0
 80093d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80093d2:	4b10      	ldr	r3, [pc, #64]	; (8009414 <USBD_LL_Init+0x94>)
 80093d4:	2201      	movs	r2, #1
 80093d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80093d8:	4b0e      	ldr	r3, [pc, #56]	; (8009414 <USBD_LL_Init+0x94>)
 80093da:	2200      	movs	r2, #0
 80093dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80093de:	480d      	ldr	r0, [pc, #52]	; (8009414 <USBD_LL_Init+0x94>)
 80093e0:	f7f9 fb12 	bl	8002a08 <HAL_PCD_Init>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80093ea:	f7f7 fbaf 	bl	8000b4c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80093ee:	2180      	movs	r1, #128	; 0x80
 80093f0:	4808      	ldr	r0, [pc, #32]	; (8009414 <USBD_LL_Init+0x94>)
 80093f2:	f7fa fd6a 	bl	8003eca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80093f6:	2240      	movs	r2, #64	; 0x40
 80093f8:	2100      	movs	r1, #0
 80093fa:	4806      	ldr	r0, [pc, #24]	; (8009414 <USBD_LL_Init+0x94>)
 80093fc:	f7fa fd1e 	bl	8003e3c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009400:	2280      	movs	r2, #128	; 0x80
 8009402:	2101      	movs	r1, #1
 8009404:	4803      	ldr	r0, [pc, #12]	; (8009414 <USBD_LL_Init+0x94>)
 8009406:	f7fa fd19 	bl	8003e3c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	200017f4 	.word	0x200017f4

08009418 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009420:	2300      	movs	r3, #0
 8009422:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800942e:	4618      	mov	r0, r3
 8009430:	f7f9 fc07 	bl	8002c42 <HAL_PCD_Start>
 8009434:	4603      	mov	r3, r0
 8009436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009438:	7bfb      	ldrb	r3, [r7, #15]
 800943a:	4618      	mov	r0, r3
 800943c:	f000 f942 	bl	80096c4 <USBD_Get_USB_Status>
 8009440:	4603      	mov	r3, r0
 8009442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009444:	7bbb      	ldrb	r3, [r7, #14]
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b084      	sub	sp, #16
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	4608      	mov	r0, r1
 8009458:	4611      	mov	r1, r2
 800945a:	461a      	mov	r2, r3
 800945c:	4603      	mov	r3, r0
 800945e:	70fb      	strb	r3, [r7, #3]
 8009460:	460b      	mov	r3, r1
 8009462:	70bb      	strb	r3, [r7, #2]
 8009464:	4613      	mov	r3, r2
 8009466:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009468:	2300      	movs	r3, #0
 800946a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800946c:	2300      	movs	r3, #0
 800946e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009476:	78bb      	ldrb	r3, [r7, #2]
 8009478:	883a      	ldrh	r2, [r7, #0]
 800947a:	78f9      	ldrb	r1, [r7, #3]
 800947c:	f7fa f8d8 	bl	8003630 <HAL_PCD_EP_Open>
 8009480:	4603      	mov	r3, r0
 8009482:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009484:	7bfb      	ldrb	r3, [r7, #15]
 8009486:	4618      	mov	r0, r3
 8009488:	f000 f91c 	bl	80096c4 <USBD_Get_USB_Status>
 800948c:	4603      	mov	r3, r0
 800948e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009490:	7bbb      	ldrb	r3, [r7, #14]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b084      	sub	sp, #16
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
 80094a2:	460b      	mov	r3, r1
 80094a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094a6:	2300      	movs	r3, #0
 80094a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094b4:	78fa      	ldrb	r2, [r7, #3]
 80094b6:	4611      	mov	r1, r2
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fa f921 	bl	8003700 <HAL_PCD_EP_Close>
 80094be:	4603      	mov	r3, r0
 80094c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094c2:	7bfb      	ldrb	r3, [r7, #15]
 80094c4:	4618      	mov	r0, r3
 80094c6:	f000 f8fd 	bl	80096c4 <USBD_Get_USB_Status>
 80094ca:	4603      	mov	r3, r0
 80094cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3710      	adds	r7, #16
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	460b      	mov	r3, r1
 80094e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094f2:	78fa      	ldrb	r2, [r7, #3]
 80094f4:	4611      	mov	r1, r2
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fa f9f9 	bl	80038ee <HAL_PCD_EP_SetStall>
 80094fc:	4603      	mov	r3, r0
 80094fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009500:	7bfb      	ldrb	r3, [r7, #15]
 8009502:	4618      	mov	r0, r3
 8009504:	f000 f8de 	bl	80096c4 <USBD_Get_USB_Status>
 8009508:	4603      	mov	r3, r0
 800950a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800950c:	7bbb      	ldrb	r3, [r7, #14]
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b084      	sub	sp, #16
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	460b      	mov	r3, r1
 8009520:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009522:	2300      	movs	r3, #0
 8009524:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009530:	78fa      	ldrb	r2, [r7, #3]
 8009532:	4611      	mov	r1, r2
 8009534:	4618      	mov	r0, r3
 8009536:	f7fa fa3e 	bl	80039b6 <HAL_PCD_EP_ClrStall>
 800953a:	4603      	mov	r3, r0
 800953c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800953e:	7bfb      	ldrb	r3, [r7, #15]
 8009540:	4618      	mov	r0, r3
 8009542:	f000 f8bf 	bl	80096c4 <USBD_Get_USB_Status>
 8009546:	4603      	mov	r3, r0
 8009548:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800954a:	7bbb      	ldrb	r3, [r7, #14]
}
 800954c:	4618      	mov	r0, r3
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	460b      	mov	r3, r1
 800955e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009566:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800956c:	2b00      	cmp	r3, #0
 800956e:	da0b      	bge.n	8009588 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009570:	78fb      	ldrb	r3, [r7, #3]
 8009572:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009576:	68f9      	ldr	r1, [r7, #12]
 8009578:	4613      	mov	r3, r2
 800957a:	00db      	lsls	r3, r3, #3
 800957c:	4413      	add	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	440b      	add	r3, r1
 8009582:	333e      	adds	r3, #62	; 0x3e
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	e00b      	b.n	80095a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009588:	78fb      	ldrb	r3, [r7, #3]
 800958a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800958e:	68f9      	ldr	r1, [r7, #12]
 8009590:	4613      	mov	r3, r2
 8009592:	00db      	lsls	r3, r3, #3
 8009594:	4413      	add	r3, r2
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	440b      	add	r3, r1
 800959a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800959e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3714      	adds	r7, #20
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	460b      	mov	r3, r1
 80095b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095b8:	2300      	movs	r3, #0
 80095ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095bc:	2300      	movs	r3, #0
 80095be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095c6:	78fa      	ldrb	r2, [r7, #3]
 80095c8:	4611      	mov	r1, r2
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fa f80b 	bl	80035e6 <HAL_PCD_SetAddress>
 80095d0:	4603      	mov	r3, r0
 80095d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095d4:	7bfb      	ldrb	r3, [r7, #15]
 80095d6:	4618      	mov	r0, r3
 80095d8:	f000 f874 	bl	80096c4 <USBD_Get_USB_Status>
 80095dc:	4603      	mov	r3, r0
 80095de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b086      	sub	sp, #24
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	60f8      	str	r0, [r7, #12]
 80095f2:	607a      	str	r2, [r7, #4]
 80095f4:	603b      	str	r3, [r7, #0]
 80095f6:	460b      	mov	r3, r1
 80095f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009608:	7af9      	ldrb	r1, [r7, #11]
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	f7fa f924 	bl	800385a <HAL_PCD_EP_Transmit>
 8009612:	4603      	mov	r3, r0
 8009614:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009616:	7dfb      	ldrb	r3, [r7, #23]
 8009618:	4618      	mov	r0, r3
 800961a:	f000 f853 	bl	80096c4 <USBD_Get_USB_Status>
 800961e:	4603      	mov	r3, r0
 8009620:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009622:	7dbb      	ldrb	r3, [r7, #22]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3718      	adds	r7, #24
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	607a      	str	r2, [r7, #4]
 8009636:	603b      	str	r3, [r7, #0]
 8009638:	460b      	mov	r3, r1
 800963a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800963c:	2300      	movs	r3, #0
 800963e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800964a:	7af9      	ldrb	r1, [r7, #11]
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	f7fa f8a0 	bl	8003794 <HAL_PCD_EP_Receive>
 8009654:	4603      	mov	r3, r0
 8009656:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009658:	7dfb      	ldrb	r3, [r7, #23]
 800965a:	4618      	mov	r0, r3
 800965c:	f000 f832 	bl	80096c4 <USBD_Get_USB_Status>
 8009660:	4603      	mov	r3, r0
 8009662:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009664:	7dbb      	ldrb	r3, [r7, #22]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3718      	adds	r7, #24
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b082      	sub	sp, #8
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
 8009676:	460b      	mov	r3, r1
 8009678:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009680:	78fa      	ldrb	r2, [r7, #3]
 8009682:	4611      	mov	r1, r2
 8009684:	4618      	mov	r0, r3
 8009686:	f7fa f8d0 	bl	800382a <HAL_PCD_EP_GetRxCount>
 800968a:	4603      	mov	r3, r0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800969c:	4b03      	ldr	r3, [pc, #12]	; (80096ac <USBD_static_malloc+0x18>)
}
 800969e:	4618      	mov	r0, r3
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	20001d00 	.word	0x20001d00

080096b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]

}
 80096b8:	bf00      	nop
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	4603      	mov	r3, r0
 80096cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ce:	2300      	movs	r3, #0
 80096d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80096d2:	79fb      	ldrb	r3, [r7, #7]
 80096d4:	2b03      	cmp	r3, #3
 80096d6:	d817      	bhi.n	8009708 <USBD_Get_USB_Status+0x44>
 80096d8:	a201      	add	r2, pc, #4	; (adr r2, 80096e0 <USBD_Get_USB_Status+0x1c>)
 80096da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096de:	bf00      	nop
 80096e0:	080096f1 	.word	0x080096f1
 80096e4:	080096f7 	.word	0x080096f7
 80096e8:	080096fd 	.word	0x080096fd
 80096ec:	08009703 	.word	0x08009703
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80096f0:	2300      	movs	r3, #0
 80096f2:	73fb      	strb	r3, [r7, #15]
    break;
 80096f4:	e00b      	b.n	800970e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80096f6:	2303      	movs	r3, #3
 80096f8:	73fb      	strb	r3, [r7, #15]
    break;
 80096fa:	e008      	b.n	800970e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80096fc:	2301      	movs	r3, #1
 80096fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009700:	e005      	b.n	800970e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009702:	2303      	movs	r3, #3
 8009704:	73fb      	strb	r3, [r7, #15]
    break;
 8009706:	e002      	b.n	800970e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009708:	2303      	movs	r3, #3
 800970a:	73fb      	strb	r3, [r7, #15]
    break;
 800970c:	bf00      	nop
  }
  return usb_status;
 800970e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009710:	4618      	mov	r0, r3
 8009712:	3714      	adds	r7, #20
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <std>:
 800971c:	2300      	movs	r3, #0
 800971e:	b510      	push	{r4, lr}
 8009720:	4604      	mov	r4, r0
 8009722:	e9c0 3300 	strd	r3, r3, [r0]
 8009726:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800972a:	6083      	str	r3, [r0, #8]
 800972c:	8181      	strh	r1, [r0, #12]
 800972e:	6643      	str	r3, [r0, #100]	; 0x64
 8009730:	81c2      	strh	r2, [r0, #14]
 8009732:	6183      	str	r3, [r0, #24]
 8009734:	4619      	mov	r1, r3
 8009736:	2208      	movs	r2, #8
 8009738:	305c      	adds	r0, #92	; 0x5c
 800973a:	f000 f8f4 	bl	8009926 <memset>
 800973e:	4b05      	ldr	r3, [pc, #20]	; (8009754 <std+0x38>)
 8009740:	6263      	str	r3, [r4, #36]	; 0x24
 8009742:	4b05      	ldr	r3, [pc, #20]	; (8009758 <std+0x3c>)
 8009744:	62a3      	str	r3, [r4, #40]	; 0x28
 8009746:	4b05      	ldr	r3, [pc, #20]	; (800975c <std+0x40>)
 8009748:	62e3      	str	r3, [r4, #44]	; 0x2c
 800974a:	4b05      	ldr	r3, [pc, #20]	; (8009760 <std+0x44>)
 800974c:	6224      	str	r4, [r4, #32]
 800974e:	6323      	str	r3, [r4, #48]	; 0x30
 8009750:	bd10      	pop	{r4, pc}
 8009752:	bf00      	nop
 8009754:	080098a1 	.word	0x080098a1
 8009758:	080098c3 	.word	0x080098c3
 800975c:	080098fb 	.word	0x080098fb
 8009760:	0800991f 	.word	0x0800991f

08009764 <stdio_exit_handler>:
 8009764:	4a02      	ldr	r2, [pc, #8]	; (8009770 <stdio_exit_handler+0xc>)
 8009766:	4903      	ldr	r1, [pc, #12]	; (8009774 <stdio_exit_handler+0x10>)
 8009768:	4803      	ldr	r0, [pc, #12]	; (8009778 <stdio_exit_handler+0x14>)
 800976a:	f000 b869 	b.w	8009840 <_fwalk_sglue>
 800976e:	bf00      	nop
 8009770:	20000100 	.word	0x20000100
 8009774:	0800a2c1 	.word	0x0800a2c1
 8009778:	2000010c 	.word	0x2000010c

0800977c <cleanup_stdio>:
 800977c:	6841      	ldr	r1, [r0, #4]
 800977e:	4b0c      	ldr	r3, [pc, #48]	; (80097b0 <cleanup_stdio+0x34>)
 8009780:	4299      	cmp	r1, r3
 8009782:	b510      	push	{r4, lr}
 8009784:	4604      	mov	r4, r0
 8009786:	d001      	beq.n	800978c <cleanup_stdio+0x10>
 8009788:	f000 fd9a 	bl	800a2c0 <_fflush_r>
 800978c:	68a1      	ldr	r1, [r4, #8]
 800978e:	4b09      	ldr	r3, [pc, #36]	; (80097b4 <cleanup_stdio+0x38>)
 8009790:	4299      	cmp	r1, r3
 8009792:	d002      	beq.n	800979a <cleanup_stdio+0x1e>
 8009794:	4620      	mov	r0, r4
 8009796:	f000 fd93 	bl	800a2c0 <_fflush_r>
 800979a:	68e1      	ldr	r1, [r4, #12]
 800979c:	4b06      	ldr	r3, [pc, #24]	; (80097b8 <cleanup_stdio+0x3c>)
 800979e:	4299      	cmp	r1, r3
 80097a0:	d004      	beq.n	80097ac <cleanup_stdio+0x30>
 80097a2:	4620      	mov	r0, r4
 80097a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097a8:	f000 bd8a 	b.w	800a2c0 <_fflush_r>
 80097ac:	bd10      	pop	{r4, pc}
 80097ae:	bf00      	nop
 80097b0:	20001f20 	.word	0x20001f20
 80097b4:	20001f88 	.word	0x20001f88
 80097b8:	20001ff0 	.word	0x20001ff0

080097bc <global_stdio_init.part.0>:
 80097bc:	b510      	push	{r4, lr}
 80097be:	4b0b      	ldr	r3, [pc, #44]	; (80097ec <global_stdio_init.part.0+0x30>)
 80097c0:	4c0b      	ldr	r4, [pc, #44]	; (80097f0 <global_stdio_init.part.0+0x34>)
 80097c2:	4a0c      	ldr	r2, [pc, #48]	; (80097f4 <global_stdio_init.part.0+0x38>)
 80097c4:	601a      	str	r2, [r3, #0]
 80097c6:	4620      	mov	r0, r4
 80097c8:	2200      	movs	r2, #0
 80097ca:	2104      	movs	r1, #4
 80097cc:	f7ff ffa6 	bl	800971c <std>
 80097d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80097d4:	2201      	movs	r2, #1
 80097d6:	2109      	movs	r1, #9
 80097d8:	f7ff ffa0 	bl	800971c <std>
 80097dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80097e0:	2202      	movs	r2, #2
 80097e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097e6:	2112      	movs	r1, #18
 80097e8:	f7ff bf98 	b.w	800971c <std>
 80097ec:	20002058 	.word	0x20002058
 80097f0:	20001f20 	.word	0x20001f20
 80097f4:	08009765 	.word	0x08009765

080097f8 <__sfp_lock_acquire>:
 80097f8:	4801      	ldr	r0, [pc, #4]	; (8009800 <__sfp_lock_acquire+0x8>)
 80097fa:	f000 b90d 	b.w	8009a18 <__retarget_lock_acquire_recursive>
 80097fe:	bf00      	nop
 8009800:	20002061 	.word	0x20002061

08009804 <__sfp_lock_release>:
 8009804:	4801      	ldr	r0, [pc, #4]	; (800980c <__sfp_lock_release+0x8>)
 8009806:	f000 b908 	b.w	8009a1a <__retarget_lock_release_recursive>
 800980a:	bf00      	nop
 800980c:	20002061 	.word	0x20002061

08009810 <__sinit>:
 8009810:	b510      	push	{r4, lr}
 8009812:	4604      	mov	r4, r0
 8009814:	f7ff fff0 	bl	80097f8 <__sfp_lock_acquire>
 8009818:	6a23      	ldr	r3, [r4, #32]
 800981a:	b11b      	cbz	r3, 8009824 <__sinit+0x14>
 800981c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009820:	f7ff bff0 	b.w	8009804 <__sfp_lock_release>
 8009824:	4b04      	ldr	r3, [pc, #16]	; (8009838 <__sinit+0x28>)
 8009826:	6223      	str	r3, [r4, #32]
 8009828:	4b04      	ldr	r3, [pc, #16]	; (800983c <__sinit+0x2c>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1f5      	bne.n	800981c <__sinit+0xc>
 8009830:	f7ff ffc4 	bl	80097bc <global_stdio_init.part.0>
 8009834:	e7f2      	b.n	800981c <__sinit+0xc>
 8009836:	bf00      	nop
 8009838:	0800977d 	.word	0x0800977d
 800983c:	20002058 	.word	0x20002058

08009840 <_fwalk_sglue>:
 8009840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009844:	4607      	mov	r7, r0
 8009846:	4688      	mov	r8, r1
 8009848:	4614      	mov	r4, r2
 800984a:	2600      	movs	r6, #0
 800984c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009850:	f1b9 0901 	subs.w	r9, r9, #1
 8009854:	d505      	bpl.n	8009862 <_fwalk_sglue+0x22>
 8009856:	6824      	ldr	r4, [r4, #0]
 8009858:	2c00      	cmp	r4, #0
 800985a:	d1f7      	bne.n	800984c <_fwalk_sglue+0xc>
 800985c:	4630      	mov	r0, r6
 800985e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009862:	89ab      	ldrh	r3, [r5, #12]
 8009864:	2b01      	cmp	r3, #1
 8009866:	d907      	bls.n	8009878 <_fwalk_sglue+0x38>
 8009868:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800986c:	3301      	adds	r3, #1
 800986e:	d003      	beq.n	8009878 <_fwalk_sglue+0x38>
 8009870:	4629      	mov	r1, r5
 8009872:	4638      	mov	r0, r7
 8009874:	47c0      	blx	r8
 8009876:	4306      	orrs	r6, r0
 8009878:	3568      	adds	r5, #104	; 0x68
 800987a:	e7e9      	b.n	8009850 <_fwalk_sglue+0x10>

0800987c <iprintf>:
 800987c:	b40f      	push	{r0, r1, r2, r3}
 800987e:	b507      	push	{r0, r1, r2, lr}
 8009880:	4906      	ldr	r1, [pc, #24]	; (800989c <iprintf+0x20>)
 8009882:	ab04      	add	r3, sp, #16
 8009884:	6808      	ldr	r0, [r1, #0]
 8009886:	f853 2b04 	ldr.w	r2, [r3], #4
 800988a:	6881      	ldr	r1, [r0, #8]
 800988c:	9301      	str	r3, [sp, #4]
 800988e:	f000 f9e7 	bl	8009c60 <_vfiprintf_r>
 8009892:	b003      	add	sp, #12
 8009894:	f85d eb04 	ldr.w	lr, [sp], #4
 8009898:	b004      	add	sp, #16
 800989a:	4770      	bx	lr
 800989c:	20000158 	.word	0x20000158

080098a0 <__sread>:
 80098a0:	b510      	push	{r4, lr}
 80098a2:	460c      	mov	r4, r1
 80098a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a8:	f000 f868 	bl	800997c <_read_r>
 80098ac:	2800      	cmp	r0, #0
 80098ae:	bfab      	itete	ge
 80098b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098b2:	89a3      	ldrhlt	r3, [r4, #12]
 80098b4:	181b      	addge	r3, r3, r0
 80098b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098ba:	bfac      	ite	ge
 80098bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80098be:	81a3      	strhlt	r3, [r4, #12]
 80098c0:	bd10      	pop	{r4, pc}

080098c2 <__swrite>:
 80098c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098c6:	461f      	mov	r7, r3
 80098c8:	898b      	ldrh	r3, [r1, #12]
 80098ca:	05db      	lsls	r3, r3, #23
 80098cc:	4605      	mov	r5, r0
 80098ce:	460c      	mov	r4, r1
 80098d0:	4616      	mov	r6, r2
 80098d2:	d505      	bpl.n	80098e0 <__swrite+0x1e>
 80098d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d8:	2302      	movs	r3, #2
 80098da:	2200      	movs	r2, #0
 80098dc:	f000 f83c 	bl	8009958 <_lseek_r>
 80098e0:	89a3      	ldrh	r3, [r4, #12]
 80098e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098ea:	81a3      	strh	r3, [r4, #12]
 80098ec:	4632      	mov	r2, r6
 80098ee:	463b      	mov	r3, r7
 80098f0:	4628      	mov	r0, r5
 80098f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098f6:	f000 b853 	b.w	80099a0 <_write_r>

080098fa <__sseek>:
 80098fa:	b510      	push	{r4, lr}
 80098fc:	460c      	mov	r4, r1
 80098fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009902:	f000 f829 	bl	8009958 <_lseek_r>
 8009906:	1c43      	adds	r3, r0, #1
 8009908:	89a3      	ldrh	r3, [r4, #12]
 800990a:	bf15      	itete	ne
 800990c:	6560      	strne	r0, [r4, #84]	; 0x54
 800990e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009912:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009916:	81a3      	strheq	r3, [r4, #12]
 8009918:	bf18      	it	ne
 800991a:	81a3      	strhne	r3, [r4, #12]
 800991c:	bd10      	pop	{r4, pc}

0800991e <__sclose>:
 800991e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009922:	f000 b809 	b.w	8009938 <_close_r>

08009926 <memset>:
 8009926:	4402      	add	r2, r0
 8009928:	4603      	mov	r3, r0
 800992a:	4293      	cmp	r3, r2
 800992c:	d100      	bne.n	8009930 <memset+0xa>
 800992e:	4770      	bx	lr
 8009930:	f803 1b01 	strb.w	r1, [r3], #1
 8009934:	e7f9      	b.n	800992a <memset+0x4>
	...

08009938 <_close_r>:
 8009938:	b538      	push	{r3, r4, r5, lr}
 800993a:	4d06      	ldr	r5, [pc, #24]	; (8009954 <_close_r+0x1c>)
 800993c:	2300      	movs	r3, #0
 800993e:	4604      	mov	r4, r0
 8009940:	4608      	mov	r0, r1
 8009942:	602b      	str	r3, [r5, #0]
 8009944:	f7f7 fda5 	bl	8001492 <_close>
 8009948:	1c43      	adds	r3, r0, #1
 800994a:	d102      	bne.n	8009952 <_close_r+0x1a>
 800994c:	682b      	ldr	r3, [r5, #0]
 800994e:	b103      	cbz	r3, 8009952 <_close_r+0x1a>
 8009950:	6023      	str	r3, [r4, #0]
 8009952:	bd38      	pop	{r3, r4, r5, pc}
 8009954:	2000205c 	.word	0x2000205c

08009958 <_lseek_r>:
 8009958:	b538      	push	{r3, r4, r5, lr}
 800995a:	4d07      	ldr	r5, [pc, #28]	; (8009978 <_lseek_r+0x20>)
 800995c:	4604      	mov	r4, r0
 800995e:	4608      	mov	r0, r1
 8009960:	4611      	mov	r1, r2
 8009962:	2200      	movs	r2, #0
 8009964:	602a      	str	r2, [r5, #0]
 8009966:	461a      	mov	r2, r3
 8009968:	f7f7 fdba 	bl	80014e0 <_lseek>
 800996c:	1c43      	adds	r3, r0, #1
 800996e:	d102      	bne.n	8009976 <_lseek_r+0x1e>
 8009970:	682b      	ldr	r3, [r5, #0]
 8009972:	b103      	cbz	r3, 8009976 <_lseek_r+0x1e>
 8009974:	6023      	str	r3, [r4, #0]
 8009976:	bd38      	pop	{r3, r4, r5, pc}
 8009978:	2000205c 	.word	0x2000205c

0800997c <_read_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	4d07      	ldr	r5, [pc, #28]	; (800999c <_read_r+0x20>)
 8009980:	4604      	mov	r4, r0
 8009982:	4608      	mov	r0, r1
 8009984:	4611      	mov	r1, r2
 8009986:	2200      	movs	r2, #0
 8009988:	602a      	str	r2, [r5, #0]
 800998a:	461a      	mov	r2, r3
 800998c:	f7f7 fd64 	bl	8001458 <_read>
 8009990:	1c43      	adds	r3, r0, #1
 8009992:	d102      	bne.n	800999a <_read_r+0x1e>
 8009994:	682b      	ldr	r3, [r5, #0]
 8009996:	b103      	cbz	r3, 800999a <_read_r+0x1e>
 8009998:	6023      	str	r3, [r4, #0]
 800999a:	bd38      	pop	{r3, r4, r5, pc}
 800999c:	2000205c 	.word	0x2000205c

080099a0 <_write_r>:
 80099a0:	b538      	push	{r3, r4, r5, lr}
 80099a2:	4d07      	ldr	r5, [pc, #28]	; (80099c0 <_write_r+0x20>)
 80099a4:	4604      	mov	r4, r0
 80099a6:	4608      	mov	r0, r1
 80099a8:	4611      	mov	r1, r2
 80099aa:	2200      	movs	r2, #0
 80099ac:	602a      	str	r2, [r5, #0]
 80099ae:	461a      	mov	r2, r3
 80099b0:	f7f6 fe72 	bl	8000698 <_write>
 80099b4:	1c43      	adds	r3, r0, #1
 80099b6:	d102      	bne.n	80099be <_write_r+0x1e>
 80099b8:	682b      	ldr	r3, [r5, #0]
 80099ba:	b103      	cbz	r3, 80099be <_write_r+0x1e>
 80099bc:	6023      	str	r3, [r4, #0]
 80099be:	bd38      	pop	{r3, r4, r5, pc}
 80099c0:	2000205c 	.word	0x2000205c

080099c4 <__errno>:
 80099c4:	4b01      	ldr	r3, [pc, #4]	; (80099cc <__errno+0x8>)
 80099c6:	6818      	ldr	r0, [r3, #0]
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	20000158 	.word	0x20000158

080099d0 <__libc_init_array>:
 80099d0:	b570      	push	{r4, r5, r6, lr}
 80099d2:	4d0d      	ldr	r5, [pc, #52]	; (8009a08 <__libc_init_array+0x38>)
 80099d4:	4c0d      	ldr	r4, [pc, #52]	; (8009a0c <__libc_init_array+0x3c>)
 80099d6:	1b64      	subs	r4, r4, r5
 80099d8:	10a4      	asrs	r4, r4, #2
 80099da:	2600      	movs	r6, #0
 80099dc:	42a6      	cmp	r6, r4
 80099de:	d109      	bne.n	80099f4 <__libc_init_array+0x24>
 80099e0:	4d0b      	ldr	r5, [pc, #44]	; (8009a10 <__libc_init_array+0x40>)
 80099e2:	4c0c      	ldr	r4, [pc, #48]	; (8009a14 <__libc_init_array+0x44>)
 80099e4:	f000 fdbe 	bl	800a564 <_init>
 80099e8:	1b64      	subs	r4, r4, r5
 80099ea:	10a4      	asrs	r4, r4, #2
 80099ec:	2600      	movs	r6, #0
 80099ee:	42a6      	cmp	r6, r4
 80099f0:	d105      	bne.n	80099fe <__libc_init_array+0x2e>
 80099f2:	bd70      	pop	{r4, r5, r6, pc}
 80099f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80099f8:	4798      	blx	r3
 80099fa:	3601      	adds	r6, #1
 80099fc:	e7ee      	b.n	80099dc <__libc_init_array+0xc>
 80099fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a02:	4798      	blx	r3
 8009a04:	3601      	adds	r6, #1
 8009a06:	e7f2      	b.n	80099ee <__libc_init_array+0x1e>
 8009a08:	0800a6b0 	.word	0x0800a6b0
 8009a0c:	0800a6b0 	.word	0x0800a6b0
 8009a10:	0800a6b0 	.word	0x0800a6b0
 8009a14:	0800a6b4 	.word	0x0800a6b4

08009a18 <__retarget_lock_acquire_recursive>:
 8009a18:	4770      	bx	lr

08009a1a <__retarget_lock_release_recursive>:
 8009a1a:	4770      	bx	lr

08009a1c <_free_r>:
 8009a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a1e:	2900      	cmp	r1, #0
 8009a20:	d044      	beq.n	8009aac <_free_r+0x90>
 8009a22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a26:	9001      	str	r0, [sp, #4]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f1a1 0404 	sub.w	r4, r1, #4
 8009a2e:	bfb8      	it	lt
 8009a30:	18e4      	addlt	r4, r4, r3
 8009a32:	f000 f8df 	bl	8009bf4 <__malloc_lock>
 8009a36:	4a1e      	ldr	r2, [pc, #120]	; (8009ab0 <_free_r+0x94>)
 8009a38:	9801      	ldr	r0, [sp, #4]
 8009a3a:	6813      	ldr	r3, [r2, #0]
 8009a3c:	b933      	cbnz	r3, 8009a4c <_free_r+0x30>
 8009a3e:	6063      	str	r3, [r4, #4]
 8009a40:	6014      	str	r4, [r2, #0]
 8009a42:	b003      	add	sp, #12
 8009a44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a48:	f000 b8da 	b.w	8009c00 <__malloc_unlock>
 8009a4c:	42a3      	cmp	r3, r4
 8009a4e:	d908      	bls.n	8009a62 <_free_r+0x46>
 8009a50:	6825      	ldr	r5, [r4, #0]
 8009a52:	1961      	adds	r1, r4, r5
 8009a54:	428b      	cmp	r3, r1
 8009a56:	bf01      	itttt	eq
 8009a58:	6819      	ldreq	r1, [r3, #0]
 8009a5a:	685b      	ldreq	r3, [r3, #4]
 8009a5c:	1949      	addeq	r1, r1, r5
 8009a5e:	6021      	streq	r1, [r4, #0]
 8009a60:	e7ed      	b.n	8009a3e <_free_r+0x22>
 8009a62:	461a      	mov	r2, r3
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	b10b      	cbz	r3, 8009a6c <_free_r+0x50>
 8009a68:	42a3      	cmp	r3, r4
 8009a6a:	d9fa      	bls.n	8009a62 <_free_r+0x46>
 8009a6c:	6811      	ldr	r1, [r2, #0]
 8009a6e:	1855      	adds	r5, r2, r1
 8009a70:	42a5      	cmp	r5, r4
 8009a72:	d10b      	bne.n	8009a8c <_free_r+0x70>
 8009a74:	6824      	ldr	r4, [r4, #0]
 8009a76:	4421      	add	r1, r4
 8009a78:	1854      	adds	r4, r2, r1
 8009a7a:	42a3      	cmp	r3, r4
 8009a7c:	6011      	str	r1, [r2, #0]
 8009a7e:	d1e0      	bne.n	8009a42 <_free_r+0x26>
 8009a80:	681c      	ldr	r4, [r3, #0]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	6053      	str	r3, [r2, #4]
 8009a86:	440c      	add	r4, r1
 8009a88:	6014      	str	r4, [r2, #0]
 8009a8a:	e7da      	b.n	8009a42 <_free_r+0x26>
 8009a8c:	d902      	bls.n	8009a94 <_free_r+0x78>
 8009a8e:	230c      	movs	r3, #12
 8009a90:	6003      	str	r3, [r0, #0]
 8009a92:	e7d6      	b.n	8009a42 <_free_r+0x26>
 8009a94:	6825      	ldr	r5, [r4, #0]
 8009a96:	1961      	adds	r1, r4, r5
 8009a98:	428b      	cmp	r3, r1
 8009a9a:	bf04      	itt	eq
 8009a9c:	6819      	ldreq	r1, [r3, #0]
 8009a9e:	685b      	ldreq	r3, [r3, #4]
 8009aa0:	6063      	str	r3, [r4, #4]
 8009aa2:	bf04      	itt	eq
 8009aa4:	1949      	addeq	r1, r1, r5
 8009aa6:	6021      	streq	r1, [r4, #0]
 8009aa8:	6054      	str	r4, [r2, #4]
 8009aaa:	e7ca      	b.n	8009a42 <_free_r+0x26>
 8009aac:	b003      	add	sp, #12
 8009aae:	bd30      	pop	{r4, r5, pc}
 8009ab0:	20002064 	.word	0x20002064

08009ab4 <sbrk_aligned>:
 8009ab4:	b570      	push	{r4, r5, r6, lr}
 8009ab6:	4e0e      	ldr	r6, [pc, #56]	; (8009af0 <sbrk_aligned+0x3c>)
 8009ab8:	460c      	mov	r4, r1
 8009aba:	6831      	ldr	r1, [r6, #0]
 8009abc:	4605      	mov	r5, r0
 8009abe:	b911      	cbnz	r1, 8009ac6 <sbrk_aligned+0x12>
 8009ac0:	f000 fcbc 	bl	800a43c <_sbrk_r>
 8009ac4:	6030      	str	r0, [r6, #0]
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	4628      	mov	r0, r5
 8009aca:	f000 fcb7 	bl	800a43c <_sbrk_r>
 8009ace:	1c43      	adds	r3, r0, #1
 8009ad0:	d00a      	beq.n	8009ae8 <sbrk_aligned+0x34>
 8009ad2:	1cc4      	adds	r4, r0, #3
 8009ad4:	f024 0403 	bic.w	r4, r4, #3
 8009ad8:	42a0      	cmp	r0, r4
 8009ada:	d007      	beq.n	8009aec <sbrk_aligned+0x38>
 8009adc:	1a21      	subs	r1, r4, r0
 8009ade:	4628      	mov	r0, r5
 8009ae0:	f000 fcac 	bl	800a43c <_sbrk_r>
 8009ae4:	3001      	adds	r0, #1
 8009ae6:	d101      	bne.n	8009aec <sbrk_aligned+0x38>
 8009ae8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009aec:	4620      	mov	r0, r4
 8009aee:	bd70      	pop	{r4, r5, r6, pc}
 8009af0:	20002068 	.word	0x20002068

08009af4 <_malloc_r>:
 8009af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009af8:	1ccd      	adds	r5, r1, #3
 8009afa:	f025 0503 	bic.w	r5, r5, #3
 8009afe:	3508      	adds	r5, #8
 8009b00:	2d0c      	cmp	r5, #12
 8009b02:	bf38      	it	cc
 8009b04:	250c      	movcc	r5, #12
 8009b06:	2d00      	cmp	r5, #0
 8009b08:	4607      	mov	r7, r0
 8009b0a:	db01      	blt.n	8009b10 <_malloc_r+0x1c>
 8009b0c:	42a9      	cmp	r1, r5
 8009b0e:	d905      	bls.n	8009b1c <_malloc_r+0x28>
 8009b10:	230c      	movs	r3, #12
 8009b12:	603b      	str	r3, [r7, #0]
 8009b14:	2600      	movs	r6, #0
 8009b16:	4630      	mov	r0, r6
 8009b18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009bf0 <_malloc_r+0xfc>
 8009b20:	f000 f868 	bl	8009bf4 <__malloc_lock>
 8009b24:	f8d8 3000 	ldr.w	r3, [r8]
 8009b28:	461c      	mov	r4, r3
 8009b2a:	bb5c      	cbnz	r4, 8009b84 <_malloc_r+0x90>
 8009b2c:	4629      	mov	r1, r5
 8009b2e:	4638      	mov	r0, r7
 8009b30:	f7ff ffc0 	bl	8009ab4 <sbrk_aligned>
 8009b34:	1c43      	adds	r3, r0, #1
 8009b36:	4604      	mov	r4, r0
 8009b38:	d155      	bne.n	8009be6 <_malloc_r+0xf2>
 8009b3a:	f8d8 4000 	ldr.w	r4, [r8]
 8009b3e:	4626      	mov	r6, r4
 8009b40:	2e00      	cmp	r6, #0
 8009b42:	d145      	bne.n	8009bd0 <_malloc_r+0xdc>
 8009b44:	2c00      	cmp	r4, #0
 8009b46:	d048      	beq.n	8009bda <_malloc_r+0xe6>
 8009b48:	6823      	ldr	r3, [r4, #0]
 8009b4a:	4631      	mov	r1, r6
 8009b4c:	4638      	mov	r0, r7
 8009b4e:	eb04 0903 	add.w	r9, r4, r3
 8009b52:	f000 fc73 	bl	800a43c <_sbrk_r>
 8009b56:	4581      	cmp	r9, r0
 8009b58:	d13f      	bne.n	8009bda <_malloc_r+0xe6>
 8009b5a:	6821      	ldr	r1, [r4, #0]
 8009b5c:	1a6d      	subs	r5, r5, r1
 8009b5e:	4629      	mov	r1, r5
 8009b60:	4638      	mov	r0, r7
 8009b62:	f7ff ffa7 	bl	8009ab4 <sbrk_aligned>
 8009b66:	3001      	adds	r0, #1
 8009b68:	d037      	beq.n	8009bda <_malloc_r+0xe6>
 8009b6a:	6823      	ldr	r3, [r4, #0]
 8009b6c:	442b      	add	r3, r5
 8009b6e:	6023      	str	r3, [r4, #0]
 8009b70:	f8d8 3000 	ldr.w	r3, [r8]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d038      	beq.n	8009bea <_malloc_r+0xf6>
 8009b78:	685a      	ldr	r2, [r3, #4]
 8009b7a:	42a2      	cmp	r2, r4
 8009b7c:	d12b      	bne.n	8009bd6 <_malloc_r+0xe2>
 8009b7e:	2200      	movs	r2, #0
 8009b80:	605a      	str	r2, [r3, #4]
 8009b82:	e00f      	b.n	8009ba4 <_malloc_r+0xb0>
 8009b84:	6822      	ldr	r2, [r4, #0]
 8009b86:	1b52      	subs	r2, r2, r5
 8009b88:	d41f      	bmi.n	8009bca <_malloc_r+0xd6>
 8009b8a:	2a0b      	cmp	r2, #11
 8009b8c:	d917      	bls.n	8009bbe <_malloc_r+0xca>
 8009b8e:	1961      	adds	r1, r4, r5
 8009b90:	42a3      	cmp	r3, r4
 8009b92:	6025      	str	r5, [r4, #0]
 8009b94:	bf18      	it	ne
 8009b96:	6059      	strne	r1, [r3, #4]
 8009b98:	6863      	ldr	r3, [r4, #4]
 8009b9a:	bf08      	it	eq
 8009b9c:	f8c8 1000 	streq.w	r1, [r8]
 8009ba0:	5162      	str	r2, [r4, r5]
 8009ba2:	604b      	str	r3, [r1, #4]
 8009ba4:	4638      	mov	r0, r7
 8009ba6:	f104 060b 	add.w	r6, r4, #11
 8009baa:	f000 f829 	bl	8009c00 <__malloc_unlock>
 8009bae:	f026 0607 	bic.w	r6, r6, #7
 8009bb2:	1d23      	adds	r3, r4, #4
 8009bb4:	1af2      	subs	r2, r6, r3
 8009bb6:	d0ae      	beq.n	8009b16 <_malloc_r+0x22>
 8009bb8:	1b9b      	subs	r3, r3, r6
 8009bba:	50a3      	str	r3, [r4, r2]
 8009bbc:	e7ab      	b.n	8009b16 <_malloc_r+0x22>
 8009bbe:	42a3      	cmp	r3, r4
 8009bc0:	6862      	ldr	r2, [r4, #4]
 8009bc2:	d1dd      	bne.n	8009b80 <_malloc_r+0x8c>
 8009bc4:	f8c8 2000 	str.w	r2, [r8]
 8009bc8:	e7ec      	b.n	8009ba4 <_malloc_r+0xb0>
 8009bca:	4623      	mov	r3, r4
 8009bcc:	6864      	ldr	r4, [r4, #4]
 8009bce:	e7ac      	b.n	8009b2a <_malloc_r+0x36>
 8009bd0:	4634      	mov	r4, r6
 8009bd2:	6876      	ldr	r6, [r6, #4]
 8009bd4:	e7b4      	b.n	8009b40 <_malloc_r+0x4c>
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	e7cc      	b.n	8009b74 <_malloc_r+0x80>
 8009bda:	230c      	movs	r3, #12
 8009bdc:	603b      	str	r3, [r7, #0]
 8009bde:	4638      	mov	r0, r7
 8009be0:	f000 f80e 	bl	8009c00 <__malloc_unlock>
 8009be4:	e797      	b.n	8009b16 <_malloc_r+0x22>
 8009be6:	6025      	str	r5, [r4, #0]
 8009be8:	e7dc      	b.n	8009ba4 <_malloc_r+0xb0>
 8009bea:	605b      	str	r3, [r3, #4]
 8009bec:	deff      	udf	#255	; 0xff
 8009bee:	bf00      	nop
 8009bf0:	20002064 	.word	0x20002064

08009bf4 <__malloc_lock>:
 8009bf4:	4801      	ldr	r0, [pc, #4]	; (8009bfc <__malloc_lock+0x8>)
 8009bf6:	f7ff bf0f 	b.w	8009a18 <__retarget_lock_acquire_recursive>
 8009bfa:	bf00      	nop
 8009bfc:	20002060 	.word	0x20002060

08009c00 <__malloc_unlock>:
 8009c00:	4801      	ldr	r0, [pc, #4]	; (8009c08 <__malloc_unlock+0x8>)
 8009c02:	f7ff bf0a 	b.w	8009a1a <__retarget_lock_release_recursive>
 8009c06:	bf00      	nop
 8009c08:	20002060 	.word	0x20002060

08009c0c <__sfputc_r>:
 8009c0c:	6893      	ldr	r3, [r2, #8]
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	b410      	push	{r4}
 8009c14:	6093      	str	r3, [r2, #8]
 8009c16:	da08      	bge.n	8009c2a <__sfputc_r+0x1e>
 8009c18:	6994      	ldr	r4, [r2, #24]
 8009c1a:	42a3      	cmp	r3, r4
 8009c1c:	db01      	blt.n	8009c22 <__sfputc_r+0x16>
 8009c1e:	290a      	cmp	r1, #10
 8009c20:	d103      	bne.n	8009c2a <__sfputc_r+0x1e>
 8009c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c26:	f000 bb73 	b.w	800a310 <__swbuf_r>
 8009c2a:	6813      	ldr	r3, [r2, #0]
 8009c2c:	1c58      	adds	r0, r3, #1
 8009c2e:	6010      	str	r0, [r2, #0]
 8009c30:	7019      	strb	r1, [r3, #0]
 8009c32:	4608      	mov	r0, r1
 8009c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <__sfputs_r>:
 8009c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c3c:	4606      	mov	r6, r0
 8009c3e:	460f      	mov	r7, r1
 8009c40:	4614      	mov	r4, r2
 8009c42:	18d5      	adds	r5, r2, r3
 8009c44:	42ac      	cmp	r4, r5
 8009c46:	d101      	bne.n	8009c4c <__sfputs_r+0x12>
 8009c48:	2000      	movs	r0, #0
 8009c4a:	e007      	b.n	8009c5c <__sfputs_r+0x22>
 8009c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c50:	463a      	mov	r2, r7
 8009c52:	4630      	mov	r0, r6
 8009c54:	f7ff ffda 	bl	8009c0c <__sfputc_r>
 8009c58:	1c43      	adds	r3, r0, #1
 8009c5a:	d1f3      	bne.n	8009c44 <__sfputs_r+0xa>
 8009c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c60 <_vfiprintf_r>:
 8009c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c64:	460d      	mov	r5, r1
 8009c66:	b09d      	sub	sp, #116	; 0x74
 8009c68:	4614      	mov	r4, r2
 8009c6a:	4698      	mov	r8, r3
 8009c6c:	4606      	mov	r6, r0
 8009c6e:	b118      	cbz	r0, 8009c78 <_vfiprintf_r+0x18>
 8009c70:	6a03      	ldr	r3, [r0, #32]
 8009c72:	b90b      	cbnz	r3, 8009c78 <_vfiprintf_r+0x18>
 8009c74:	f7ff fdcc 	bl	8009810 <__sinit>
 8009c78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c7a:	07d9      	lsls	r1, r3, #31
 8009c7c:	d405      	bmi.n	8009c8a <_vfiprintf_r+0x2a>
 8009c7e:	89ab      	ldrh	r3, [r5, #12]
 8009c80:	059a      	lsls	r2, r3, #22
 8009c82:	d402      	bmi.n	8009c8a <_vfiprintf_r+0x2a>
 8009c84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c86:	f7ff fec7 	bl	8009a18 <__retarget_lock_acquire_recursive>
 8009c8a:	89ab      	ldrh	r3, [r5, #12]
 8009c8c:	071b      	lsls	r3, r3, #28
 8009c8e:	d501      	bpl.n	8009c94 <_vfiprintf_r+0x34>
 8009c90:	692b      	ldr	r3, [r5, #16]
 8009c92:	b99b      	cbnz	r3, 8009cbc <_vfiprintf_r+0x5c>
 8009c94:	4629      	mov	r1, r5
 8009c96:	4630      	mov	r0, r6
 8009c98:	f000 fb78 	bl	800a38c <__swsetup_r>
 8009c9c:	b170      	cbz	r0, 8009cbc <_vfiprintf_r+0x5c>
 8009c9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ca0:	07dc      	lsls	r4, r3, #31
 8009ca2:	d504      	bpl.n	8009cae <_vfiprintf_r+0x4e>
 8009ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ca8:	b01d      	add	sp, #116	; 0x74
 8009caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cae:	89ab      	ldrh	r3, [r5, #12]
 8009cb0:	0598      	lsls	r0, r3, #22
 8009cb2:	d4f7      	bmi.n	8009ca4 <_vfiprintf_r+0x44>
 8009cb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cb6:	f7ff feb0 	bl	8009a1a <__retarget_lock_release_recursive>
 8009cba:	e7f3      	b.n	8009ca4 <_vfiprintf_r+0x44>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8009cc0:	2320      	movs	r3, #32
 8009cc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cca:	2330      	movs	r3, #48	; 0x30
 8009ccc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009e80 <_vfiprintf_r+0x220>
 8009cd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cd4:	f04f 0901 	mov.w	r9, #1
 8009cd8:	4623      	mov	r3, r4
 8009cda:	469a      	mov	sl, r3
 8009cdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ce0:	b10a      	cbz	r2, 8009ce6 <_vfiprintf_r+0x86>
 8009ce2:	2a25      	cmp	r2, #37	; 0x25
 8009ce4:	d1f9      	bne.n	8009cda <_vfiprintf_r+0x7a>
 8009ce6:	ebba 0b04 	subs.w	fp, sl, r4
 8009cea:	d00b      	beq.n	8009d04 <_vfiprintf_r+0xa4>
 8009cec:	465b      	mov	r3, fp
 8009cee:	4622      	mov	r2, r4
 8009cf0:	4629      	mov	r1, r5
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	f7ff ffa1 	bl	8009c3a <__sfputs_r>
 8009cf8:	3001      	adds	r0, #1
 8009cfa:	f000 80a9 	beq.w	8009e50 <_vfiprintf_r+0x1f0>
 8009cfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d00:	445a      	add	r2, fp
 8009d02:	9209      	str	r2, [sp, #36]	; 0x24
 8009d04:	f89a 3000 	ldrb.w	r3, [sl]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	f000 80a1 	beq.w	8009e50 <_vfiprintf_r+0x1f0>
 8009d0e:	2300      	movs	r3, #0
 8009d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d18:	f10a 0a01 	add.w	sl, sl, #1
 8009d1c:	9304      	str	r3, [sp, #16]
 8009d1e:	9307      	str	r3, [sp, #28]
 8009d20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d24:	931a      	str	r3, [sp, #104]	; 0x68
 8009d26:	4654      	mov	r4, sl
 8009d28:	2205      	movs	r2, #5
 8009d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d2e:	4854      	ldr	r0, [pc, #336]	; (8009e80 <_vfiprintf_r+0x220>)
 8009d30:	f7f6 fa4e 	bl	80001d0 <memchr>
 8009d34:	9a04      	ldr	r2, [sp, #16]
 8009d36:	b9d8      	cbnz	r0, 8009d70 <_vfiprintf_r+0x110>
 8009d38:	06d1      	lsls	r1, r2, #27
 8009d3a:	bf44      	itt	mi
 8009d3c:	2320      	movmi	r3, #32
 8009d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d42:	0713      	lsls	r3, r2, #28
 8009d44:	bf44      	itt	mi
 8009d46:	232b      	movmi	r3, #43	; 0x2b
 8009d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d50:	2b2a      	cmp	r3, #42	; 0x2a
 8009d52:	d015      	beq.n	8009d80 <_vfiprintf_r+0x120>
 8009d54:	9a07      	ldr	r2, [sp, #28]
 8009d56:	4654      	mov	r4, sl
 8009d58:	2000      	movs	r0, #0
 8009d5a:	f04f 0c0a 	mov.w	ip, #10
 8009d5e:	4621      	mov	r1, r4
 8009d60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d64:	3b30      	subs	r3, #48	; 0x30
 8009d66:	2b09      	cmp	r3, #9
 8009d68:	d94d      	bls.n	8009e06 <_vfiprintf_r+0x1a6>
 8009d6a:	b1b0      	cbz	r0, 8009d9a <_vfiprintf_r+0x13a>
 8009d6c:	9207      	str	r2, [sp, #28]
 8009d6e:	e014      	b.n	8009d9a <_vfiprintf_r+0x13a>
 8009d70:	eba0 0308 	sub.w	r3, r0, r8
 8009d74:	fa09 f303 	lsl.w	r3, r9, r3
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	9304      	str	r3, [sp, #16]
 8009d7c:	46a2      	mov	sl, r4
 8009d7e:	e7d2      	b.n	8009d26 <_vfiprintf_r+0xc6>
 8009d80:	9b03      	ldr	r3, [sp, #12]
 8009d82:	1d19      	adds	r1, r3, #4
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	9103      	str	r1, [sp, #12]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	bfbb      	ittet	lt
 8009d8c:	425b      	neglt	r3, r3
 8009d8e:	f042 0202 	orrlt.w	r2, r2, #2
 8009d92:	9307      	strge	r3, [sp, #28]
 8009d94:	9307      	strlt	r3, [sp, #28]
 8009d96:	bfb8      	it	lt
 8009d98:	9204      	strlt	r2, [sp, #16]
 8009d9a:	7823      	ldrb	r3, [r4, #0]
 8009d9c:	2b2e      	cmp	r3, #46	; 0x2e
 8009d9e:	d10c      	bne.n	8009dba <_vfiprintf_r+0x15a>
 8009da0:	7863      	ldrb	r3, [r4, #1]
 8009da2:	2b2a      	cmp	r3, #42	; 0x2a
 8009da4:	d134      	bne.n	8009e10 <_vfiprintf_r+0x1b0>
 8009da6:	9b03      	ldr	r3, [sp, #12]
 8009da8:	1d1a      	adds	r2, r3, #4
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	9203      	str	r2, [sp, #12]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	bfb8      	it	lt
 8009db2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009db6:	3402      	adds	r4, #2
 8009db8:	9305      	str	r3, [sp, #20]
 8009dba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009e90 <_vfiprintf_r+0x230>
 8009dbe:	7821      	ldrb	r1, [r4, #0]
 8009dc0:	2203      	movs	r2, #3
 8009dc2:	4650      	mov	r0, sl
 8009dc4:	f7f6 fa04 	bl	80001d0 <memchr>
 8009dc8:	b138      	cbz	r0, 8009dda <_vfiprintf_r+0x17a>
 8009dca:	9b04      	ldr	r3, [sp, #16]
 8009dcc:	eba0 000a 	sub.w	r0, r0, sl
 8009dd0:	2240      	movs	r2, #64	; 0x40
 8009dd2:	4082      	lsls	r2, r0
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	3401      	adds	r4, #1
 8009dd8:	9304      	str	r3, [sp, #16]
 8009dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dde:	4829      	ldr	r0, [pc, #164]	; (8009e84 <_vfiprintf_r+0x224>)
 8009de0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009de4:	2206      	movs	r2, #6
 8009de6:	f7f6 f9f3 	bl	80001d0 <memchr>
 8009dea:	2800      	cmp	r0, #0
 8009dec:	d03f      	beq.n	8009e6e <_vfiprintf_r+0x20e>
 8009dee:	4b26      	ldr	r3, [pc, #152]	; (8009e88 <_vfiprintf_r+0x228>)
 8009df0:	bb1b      	cbnz	r3, 8009e3a <_vfiprintf_r+0x1da>
 8009df2:	9b03      	ldr	r3, [sp, #12]
 8009df4:	3307      	adds	r3, #7
 8009df6:	f023 0307 	bic.w	r3, r3, #7
 8009dfa:	3308      	adds	r3, #8
 8009dfc:	9303      	str	r3, [sp, #12]
 8009dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e00:	443b      	add	r3, r7
 8009e02:	9309      	str	r3, [sp, #36]	; 0x24
 8009e04:	e768      	b.n	8009cd8 <_vfiprintf_r+0x78>
 8009e06:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e0a:	460c      	mov	r4, r1
 8009e0c:	2001      	movs	r0, #1
 8009e0e:	e7a6      	b.n	8009d5e <_vfiprintf_r+0xfe>
 8009e10:	2300      	movs	r3, #0
 8009e12:	3401      	adds	r4, #1
 8009e14:	9305      	str	r3, [sp, #20]
 8009e16:	4619      	mov	r1, r3
 8009e18:	f04f 0c0a 	mov.w	ip, #10
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e22:	3a30      	subs	r2, #48	; 0x30
 8009e24:	2a09      	cmp	r2, #9
 8009e26:	d903      	bls.n	8009e30 <_vfiprintf_r+0x1d0>
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d0c6      	beq.n	8009dba <_vfiprintf_r+0x15a>
 8009e2c:	9105      	str	r1, [sp, #20]
 8009e2e:	e7c4      	b.n	8009dba <_vfiprintf_r+0x15a>
 8009e30:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e34:	4604      	mov	r4, r0
 8009e36:	2301      	movs	r3, #1
 8009e38:	e7f0      	b.n	8009e1c <_vfiprintf_r+0x1bc>
 8009e3a:	ab03      	add	r3, sp, #12
 8009e3c:	9300      	str	r3, [sp, #0]
 8009e3e:	462a      	mov	r2, r5
 8009e40:	4b12      	ldr	r3, [pc, #72]	; (8009e8c <_vfiprintf_r+0x22c>)
 8009e42:	a904      	add	r1, sp, #16
 8009e44:	4630      	mov	r0, r6
 8009e46:	f3af 8000 	nop.w
 8009e4a:	4607      	mov	r7, r0
 8009e4c:	1c78      	adds	r0, r7, #1
 8009e4e:	d1d6      	bne.n	8009dfe <_vfiprintf_r+0x19e>
 8009e50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e52:	07d9      	lsls	r1, r3, #31
 8009e54:	d405      	bmi.n	8009e62 <_vfiprintf_r+0x202>
 8009e56:	89ab      	ldrh	r3, [r5, #12]
 8009e58:	059a      	lsls	r2, r3, #22
 8009e5a:	d402      	bmi.n	8009e62 <_vfiprintf_r+0x202>
 8009e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e5e:	f7ff fddc 	bl	8009a1a <__retarget_lock_release_recursive>
 8009e62:	89ab      	ldrh	r3, [r5, #12]
 8009e64:	065b      	lsls	r3, r3, #25
 8009e66:	f53f af1d 	bmi.w	8009ca4 <_vfiprintf_r+0x44>
 8009e6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e6c:	e71c      	b.n	8009ca8 <_vfiprintf_r+0x48>
 8009e6e:	ab03      	add	r3, sp, #12
 8009e70:	9300      	str	r3, [sp, #0]
 8009e72:	462a      	mov	r2, r5
 8009e74:	4b05      	ldr	r3, [pc, #20]	; (8009e8c <_vfiprintf_r+0x22c>)
 8009e76:	a904      	add	r1, sp, #16
 8009e78:	4630      	mov	r0, r6
 8009e7a:	f000 f879 	bl	8009f70 <_printf_i>
 8009e7e:	e7e4      	b.n	8009e4a <_vfiprintf_r+0x1ea>
 8009e80:	0800a674 	.word	0x0800a674
 8009e84:	0800a67e 	.word	0x0800a67e
 8009e88:	00000000 	.word	0x00000000
 8009e8c:	08009c3b 	.word	0x08009c3b
 8009e90:	0800a67a 	.word	0x0800a67a

08009e94 <_printf_common>:
 8009e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e98:	4616      	mov	r6, r2
 8009e9a:	4699      	mov	r9, r3
 8009e9c:	688a      	ldr	r2, [r1, #8]
 8009e9e:	690b      	ldr	r3, [r1, #16]
 8009ea0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	bfb8      	it	lt
 8009ea8:	4613      	movlt	r3, r2
 8009eaa:	6033      	str	r3, [r6, #0]
 8009eac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009eb0:	4607      	mov	r7, r0
 8009eb2:	460c      	mov	r4, r1
 8009eb4:	b10a      	cbz	r2, 8009eba <_printf_common+0x26>
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	6033      	str	r3, [r6, #0]
 8009eba:	6823      	ldr	r3, [r4, #0]
 8009ebc:	0699      	lsls	r1, r3, #26
 8009ebe:	bf42      	ittt	mi
 8009ec0:	6833      	ldrmi	r3, [r6, #0]
 8009ec2:	3302      	addmi	r3, #2
 8009ec4:	6033      	strmi	r3, [r6, #0]
 8009ec6:	6825      	ldr	r5, [r4, #0]
 8009ec8:	f015 0506 	ands.w	r5, r5, #6
 8009ecc:	d106      	bne.n	8009edc <_printf_common+0x48>
 8009ece:	f104 0a19 	add.w	sl, r4, #25
 8009ed2:	68e3      	ldr	r3, [r4, #12]
 8009ed4:	6832      	ldr	r2, [r6, #0]
 8009ed6:	1a9b      	subs	r3, r3, r2
 8009ed8:	42ab      	cmp	r3, r5
 8009eda:	dc26      	bgt.n	8009f2a <_printf_common+0x96>
 8009edc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ee0:	1e13      	subs	r3, r2, #0
 8009ee2:	6822      	ldr	r2, [r4, #0]
 8009ee4:	bf18      	it	ne
 8009ee6:	2301      	movne	r3, #1
 8009ee8:	0692      	lsls	r2, r2, #26
 8009eea:	d42b      	bmi.n	8009f44 <_printf_common+0xb0>
 8009eec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ef0:	4649      	mov	r1, r9
 8009ef2:	4638      	mov	r0, r7
 8009ef4:	47c0      	blx	r8
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	d01e      	beq.n	8009f38 <_printf_common+0xa4>
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	6922      	ldr	r2, [r4, #16]
 8009efe:	f003 0306 	and.w	r3, r3, #6
 8009f02:	2b04      	cmp	r3, #4
 8009f04:	bf02      	ittt	eq
 8009f06:	68e5      	ldreq	r5, [r4, #12]
 8009f08:	6833      	ldreq	r3, [r6, #0]
 8009f0a:	1aed      	subeq	r5, r5, r3
 8009f0c:	68a3      	ldr	r3, [r4, #8]
 8009f0e:	bf0c      	ite	eq
 8009f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f14:	2500      	movne	r5, #0
 8009f16:	4293      	cmp	r3, r2
 8009f18:	bfc4      	itt	gt
 8009f1a:	1a9b      	subgt	r3, r3, r2
 8009f1c:	18ed      	addgt	r5, r5, r3
 8009f1e:	2600      	movs	r6, #0
 8009f20:	341a      	adds	r4, #26
 8009f22:	42b5      	cmp	r5, r6
 8009f24:	d11a      	bne.n	8009f5c <_printf_common+0xc8>
 8009f26:	2000      	movs	r0, #0
 8009f28:	e008      	b.n	8009f3c <_printf_common+0xa8>
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	4652      	mov	r2, sl
 8009f2e:	4649      	mov	r1, r9
 8009f30:	4638      	mov	r0, r7
 8009f32:	47c0      	blx	r8
 8009f34:	3001      	adds	r0, #1
 8009f36:	d103      	bne.n	8009f40 <_printf_common+0xac>
 8009f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f40:	3501      	adds	r5, #1
 8009f42:	e7c6      	b.n	8009ed2 <_printf_common+0x3e>
 8009f44:	18e1      	adds	r1, r4, r3
 8009f46:	1c5a      	adds	r2, r3, #1
 8009f48:	2030      	movs	r0, #48	; 0x30
 8009f4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f4e:	4422      	add	r2, r4
 8009f50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f58:	3302      	adds	r3, #2
 8009f5a:	e7c7      	b.n	8009eec <_printf_common+0x58>
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	4622      	mov	r2, r4
 8009f60:	4649      	mov	r1, r9
 8009f62:	4638      	mov	r0, r7
 8009f64:	47c0      	blx	r8
 8009f66:	3001      	adds	r0, #1
 8009f68:	d0e6      	beq.n	8009f38 <_printf_common+0xa4>
 8009f6a:	3601      	adds	r6, #1
 8009f6c:	e7d9      	b.n	8009f22 <_printf_common+0x8e>
	...

08009f70 <_printf_i>:
 8009f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f74:	7e0f      	ldrb	r7, [r1, #24]
 8009f76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f78:	2f78      	cmp	r7, #120	; 0x78
 8009f7a:	4691      	mov	r9, r2
 8009f7c:	4680      	mov	r8, r0
 8009f7e:	460c      	mov	r4, r1
 8009f80:	469a      	mov	sl, r3
 8009f82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f86:	d807      	bhi.n	8009f98 <_printf_i+0x28>
 8009f88:	2f62      	cmp	r7, #98	; 0x62
 8009f8a:	d80a      	bhi.n	8009fa2 <_printf_i+0x32>
 8009f8c:	2f00      	cmp	r7, #0
 8009f8e:	f000 80d4 	beq.w	800a13a <_printf_i+0x1ca>
 8009f92:	2f58      	cmp	r7, #88	; 0x58
 8009f94:	f000 80c0 	beq.w	800a118 <_printf_i+0x1a8>
 8009f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fa0:	e03a      	b.n	800a018 <_printf_i+0xa8>
 8009fa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fa6:	2b15      	cmp	r3, #21
 8009fa8:	d8f6      	bhi.n	8009f98 <_printf_i+0x28>
 8009faa:	a101      	add	r1, pc, #4	; (adr r1, 8009fb0 <_printf_i+0x40>)
 8009fac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fb0:	0800a009 	.word	0x0800a009
 8009fb4:	0800a01d 	.word	0x0800a01d
 8009fb8:	08009f99 	.word	0x08009f99
 8009fbc:	08009f99 	.word	0x08009f99
 8009fc0:	08009f99 	.word	0x08009f99
 8009fc4:	08009f99 	.word	0x08009f99
 8009fc8:	0800a01d 	.word	0x0800a01d
 8009fcc:	08009f99 	.word	0x08009f99
 8009fd0:	08009f99 	.word	0x08009f99
 8009fd4:	08009f99 	.word	0x08009f99
 8009fd8:	08009f99 	.word	0x08009f99
 8009fdc:	0800a121 	.word	0x0800a121
 8009fe0:	0800a049 	.word	0x0800a049
 8009fe4:	0800a0db 	.word	0x0800a0db
 8009fe8:	08009f99 	.word	0x08009f99
 8009fec:	08009f99 	.word	0x08009f99
 8009ff0:	0800a143 	.word	0x0800a143
 8009ff4:	08009f99 	.word	0x08009f99
 8009ff8:	0800a049 	.word	0x0800a049
 8009ffc:	08009f99 	.word	0x08009f99
 800a000:	08009f99 	.word	0x08009f99
 800a004:	0800a0e3 	.word	0x0800a0e3
 800a008:	682b      	ldr	r3, [r5, #0]
 800a00a:	1d1a      	adds	r2, r3, #4
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	602a      	str	r2, [r5, #0]
 800a010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a018:	2301      	movs	r3, #1
 800a01a:	e09f      	b.n	800a15c <_printf_i+0x1ec>
 800a01c:	6820      	ldr	r0, [r4, #0]
 800a01e:	682b      	ldr	r3, [r5, #0]
 800a020:	0607      	lsls	r7, r0, #24
 800a022:	f103 0104 	add.w	r1, r3, #4
 800a026:	6029      	str	r1, [r5, #0]
 800a028:	d501      	bpl.n	800a02e <_printf_i+0xbe>
 800a02a:	681e      	ldr	r6, [r3, #0]
 800a02c:	e003      	b.n	800a036 <_printf_i+0xc6>
 800a02e:	0646      	lsls	r6, r0, #25
 800a030:	d5fb      	bpl.n	800a02a <_printf_i+0xba>
 800a032:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a036:	2e00      	cmp	r6, #0
 800a038:	da03      	bge.n	800a042 <_printf_i+0xd2>
 800a03a:	232d      	movs	r3, #45	; 0x2d
 800a03c:	4276      	negs	r6, r6
 800a03e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a042:	485a      	ldr	r0, [pc, #360]	; (800a1ac <_printf_i+0x23c>)
 800a044:	230a      	movs	r3, #10
 800a046:	e012      	b.n	800a06e <_printf_i+0xfe>
 800a048:	682b      	ldr	r3, [r5, #0]
 800a04a:	6820      	ldr	r0, [r4, #0]
 800a04c:	1d19      	adds	r1, r3, #4
 800a04e:	6029      	str	r1, [r5, #0]
 800a050:	0605      	lsls	r5, r0, #24
 800a052:	d501      	bpl.n	800a058 <_printf_i+0xe8>
 800a054:	681e      	ldr	r6, [r3, #0]
 800a056:	e002      	b.n	800a05e <_printf_i+0xee>
 800a058:	0641      	lsls	r1, r0, #25
 800a05a:	d5fb      	bpl.n	800a054 <_printf_i+0xe4>
 800a05c:	881e      	ldrh	r6, [r3, #0]
 800a05e:	4853      	ldr	r0, [pc, #332]	; (800a1ac <_printf_i+0x23c>)
 800a060:	2f6f      	cmp	r7, #111	; 0x6f
 800a062:	bf0c      	ite	eq
 800a064:	2308      	moveq	r3, #8
 800a066:	230a      	movne	r3, #10
 800a068:	2100      	movs	r1, #0
 800a06a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a06e:	6865      	ldr	r5, [r4, #4]
 800a070:	60a5      	str	r5, [r4, #8]
 800a072:	2d00      	cmp	r5, #0
 800a074:	bfa2      	ittt	ge
 800a076:	6821      	ldrge	r1, [r4, #0]
 800a078:	f021 0104 	bicge.w	r1, r1, #4
 800a07c:	6021      	strge	r1, [r4, #0]
 800a07e:	b90e      	cbnz	r6, 800a084 <_printf_i+0x114>
 800a080:	2d00      	cmp	r5, #0
 800a082:	d04b      	beq.n	800a11c <_printf_i+0x1ac>
 800a084:	4615      	mov	r5, r2
 800a086:	fbb6 f1f3 	udiv	r1, r6, r3
 800a08a:	fb03 6711 	mls	r7, r3, r1, r6
 800a08e:	5dc7      	ldrb	r7, [r0, r7]
 800a090:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a094:	4637      	mov	r7, r6
 800a096:	42bb      	cmp	r3, r7
 800a098:	460e      	mov	r6, r1
 800a09a:	d9f4      	bls.n	800a086 <_printf_i+0x116>
 800a09c:	2b08      	cmp	r3, #8
 800a09e:	d10b      	bne.n	800a0b8 <_printf_i+0x148>
 800a0a0:	6823      	ldr	r3, [r4, #0]
 800a0a2:	07de      	lsls	r6, r3, #31
 800a0a4:	d508      	bpl.n	800a0b8 <_printf_i+0x148>
 800a0a6:	6923      	ldr	r3, [r4, #16]
 800a0a8:	6861      	ldr	r1, [r4, #4]
 800a0aa:	4299      	cmp	r1, r3
 800a0ac:	bfde      	ittt	le
 800a0ae:	2330      	movle	r3, #48	; 0x30
 800a0b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a0b8:	1b52      	subs	r2, r2, r5
 800a0ba:	6122      	str	r2, [r4, #16]
 800a0bc:	f8cd a000 	str.w	sl, [sp]
 800a0c0:	464b      	mov	r3, r9
 800a0c2:	aa03      	add	r2, sp, #12
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	4640      	mov	r0, r8
 800a0c8:	f7ff fee4 	bl	8009e94 <_printf_common>
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	d14a      	bne.n	800a166 <_printf_i+0x1f6>
 800a0d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0d4:	b004      	add	sp, #16
 800a0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0da:	6823      	ldr	r3, [r4, #0]
 800a0dc:	f043 0320 	orr.w	r3, r3, #32
 800a0e0:	6023      	str	r3, [r4, #0]
 800a0e2:	4833      	ldr	r0, [pc, #204]	; (800a1b0 <_printf_i+0x240>)
 800a0e4:	2778      	movs	r7, #120	; 0x78
 800a0e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a0ea:	6823      	ldr	r3, [r4, #0]
 800a0ec:	6829      	ldr	r1, [r5, #0]
 800a0ee:	061f      	lsls	r7, r3, #24
 800a0f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a0f4:	d402      	bmi.n	800a0fc <_printf_i+0x18c>
 800a0f6:	065f      	lsls	r7, r3, #25
 800a0f8:	bf48      	it	mi
 800a0fa:	b2b6      	uxthmi	r6, r6
 800a0fc:	07df      	lsls	r7, r3, #31
 800a0fe:	bf48      	it	mi
 800a100:	f043 0320 	orrmi.w	r3, r3, #32
 800a104:	6029      	str	r1, [r5, #0]
 800a106:	bf48      	it	mi
 800a108:	6023      	strmi	r3, [r4, #0]
 800a10a:	b91e      	cbnz	r6, 800a114 <_printf_i+0x1a4>
 800a10c:	6823      	ldr	r3, [r4, #0]
 800a10e:	f023 0320 	bic.w	r3, r3, #32
 800a112:	6023      	str	r3, [r4, #0]
 800a114:	2310      	movs	r3, #16
 800a116:	e7a7      	b.n	800a068 <_printf_i+0xf8>
 800a118:	4824      	ldr	r0, [pc, #144]	; (800a1ac <_printf_i+0x23c>)
 800a11a:	e7e4      	b.n	800a0e6 <_printf_i+0x176>
 800a11c:	4615      	mov	r5, r2
 800a11e:	e7bd      	b.n	800a09c <_printf_i+0x12c>
 800a120:	682b      	ldr	r3, [r5, #0]
 800a122:	6826      	ldr	r6, [r4, #0]
 800a124:	6961      	ldr	r1, [r4, #20]
 800a126:	1d18      	adds	r0, r3, #4
 800a128:	6028      	str	r0, [r5, #0]
 800a12a:	0635      	lsls	r5, r6, #24
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	d501      	bpl.n	800a134 <_printf_i+0x1c4>
 800a130:	6019      	str	r1, [r3, #0]
 800a132:	e002      	b.n	800a13a <_printf_i+0x1ca>
 800a134:	0670      	lsls	r0, r6, #25
 800a136:	d5fb      	bpl.n	800a130 <_printf_i+0x1c0>
 800a138:	8019      	strh	r1, [r3, #0]
 800a13a:	2300      	movs	r3, #0
 800a13c:	6123      	str	r3, [r4, #16]
 800a13e:	4615      	mov	r5, r2
 800a140:	e7bc      	b.n	800a0bc <_printf_i+0x14c>
 800a142:	682b      	ldr	r3, [r5, #0]
 800a144:	1d1a      	adds	r2, r3, #4
 800a146:	602a      	str	r2, [r5, #0]
 800a148:	681d      	ldr	r5, [r3, #0]
 800a14a:	6862      	ldr	r2, [r4, #4]
 800a14c:	2100      	movs	r1, #0
 800a14e:	4628      	mov	r0, r5
 800a150:	f7f6 f83e 	bl	80001d0 <memchr>
 800a154:	b108      	cbz	r0, 800a15a <_printf_i+0x1ea>
 800a156:	1b40      	subs	r0, r0, r5
 800a158:	6060      	str	r0, [r4, #4]
 800a15a:	6863      	ldr	r3, [r4, #4]
 800a15c:	6123      	str	r3, [r4, #16]
 800a15e:	2300      	movs	r3, #0
 800a160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a164:	e7aa      	b.n	800a0bc <_printf_i+0x14c>
 800a166:	6923      	ldr	r3, [r4, #16]
 800a168:	462a      	mov	r2, r5
 800a16a:	4649      	mov	r1, r9
 800a16c:	4640      	mov	r0, r8
 800a16e:	47d0      	blx	sl
 800a170:	3001      	adds	r0, #1
 800a172:	d0ad      	beq.n	800a0d0 <_printf_i+0x160>
 800a174:	6823      	ldr	r3, [r4, #0]
 800a176:	079b      	lsls	r3, r3, #30
 800a178:	d413      	bmi.n	800a1a2 <_printf_i+0x232>
 800a17a:	68e0      	ldr	r0, [r4, #12]
 800a17c:	9b03      	ldr	r3, [sp, #12]
 800a17e:	4298      	cmp	r0, r3
 800a180:	bfb8      	it	lt
 800a182:	4618      	movlt	r0, r3
 800a184:	e7a6      	b.n	800a0d4 <_printf_i+0x164>
 800a186:	2301      	movs	r3, #1
 800a188:	4632      	mov	r2, r6
 800a18a:	4649      	mov	r1, r9
 800a18c:	4640      	mov	r0, r8
 800a18e:	47d0      	blx	sl
 800a190:	3001      	adds	r0, #1
 800a192:	d09d      	beq.n	800a0d0 <_printf_i+0x160>
 800a194:	3501      	adds	r5, #1
 800a196:	68e3      	ldr	r3, [r4, #12]
 800a198:	9903      	ldr	r1, [sp, #12]
 800a19a:	1a5b      	subs	r3, r3, r1
 800a19c:	42ab      	cmp	r3, r5
 800a19e:	dcf2      	bgt.n	800a186 <_printf_i+0x216>
 800a1a0:	e7eb      	b.n	800a17a <_printf_i+0x20a>
 800a1a2:	2500      	movs	r5, #0
 800a1a4:	f104 0619 	add.w	r6, r4, #25
 800a1a8:	e7f5      	b.n	800a196 <_printf_i+0x226>
 800a1aa:	bf00      	nop
 800a1ac:	0800a685 	.word	0x0800a685
 800a1b0:	0800a696 	.word	0x0800a696

0800a1b4 <__sflush_r>:
 800a1b4:	898a      	ldrh	r2, [r1, #12]
 800a1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	0710      	lsls	r0, r2, #28
 800a1be:	460c      	mov	r4, r1
 800a1c0:	d458      	bmi.n	800a274 <__sflush_r+0xc0>
 800a1c2:	684b      	ldr	r3, [r1, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	dc05      	bgt.n	800a1d4 <__sflush_r+0x20>
 800a1c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	dc02      	bgt.n	800a1d4 <__sflush_r+0x20>
 800a1ce:	2000      	movs	r0, #0
 800a1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1d6:	2e00      	cmp	r6, #0
 800a1d8:	d0f9      	beq.n	800a1ce <__sflush_r+0x1a>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1e0:	682f      	ldr	r7, [r5, #0]
 800a1e2:	6a21      	ldr	r1, [r4, #32]
 800a1e4:	602b      	str	r3, [r5, #0]
 800a1e6:	d032      	beq.n	800a24e <__sflush_r+0x9a>
 800a1e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1ea:	89a3      	ldrh	r3, [r4, #12]
 800a1ec:	075a      	lsls	r2, r3, #29
 800a1ee:	d505      	bpl.n	800a1fc <__sflush_r+0x48>
 800a1f0:	6863      	ldr	r3, [r4, #4]
 800a1f2:	1ac0      	subs	r0, r0, r3
 800a1f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1f6:	b10b      	cbz	r3, 800a1fc <__sflush_r+0x48>
 800a1f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1fa:	1ac0      	subs	r0, r0, r3
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	4602      	mov	r2, r0
 800a200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a202:	6a21      	ldr	r1, [r4, #32]
 800a204:	4628      	mov	r0, r5
 800a206:	47b0      	blx	r6
 800a208:	1c43      	adds	r3, r0, #1
 800a20a:	89a3      	ldrh	r3, [r4, #12]
 800a20c:	d106      	bne.n	800a21c <__sflush_r+0x68>
 800a20e:	6829      	ldr	r1, [r5, #0]
 800a210:	291d      	cmp	r1, #29
 800a212:	d82b      	bhi.n	800a26c <__sflush_r+0xb8>
 800a214:	4a29      	ldr	r2, [pc, #164]	; (800a2bc <__sflush_r+0x108>)
 800a216:	410a      	asrs	r2, r1
 800a218:	07d6      	lsls	r6, r2, #31
 800a21a:	d427      	bmi.n	800a26c <__sflush_r+0xb8>
 800a21c:	2200      	movs	r2, #0
 800a21e:	6062      	str	r2, [r4, #4]
 800a220:	04d9      	lsls	r1, r3, #19
 800a222:	6922      	ldr	r2, [r4, #16]
 800a224:	6022      	str	r2, [r4, #0]
 800a226:	d504      	bpl.n	800a232 <__sflush_r+0x7e>
 800a228:	1c42      	adds	r2, r0, #1
 800a22a:	d101      	bne.n	800a230 <__sflush_r+0x7c>
 800a22c:	682b      	ldr	r3, [r5, #0]
 800a22e:	b903      	cbnz	r3, 800a232 <__sflush_r+0x7e>
 800a230:	6560      	str	r0, [r4, #84]	; 0x54
 800a232:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a234:	602f      	str	r7, [r5, #0]
 800a236:	2900      	cmp	r1, #0
 800a238:	d0c9      	beq.n	800a1ce <__sflush_r+0x1a>
 800a23a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a23e:	4299      	cmp	r1, r3
 800a240:	d002      	beq.n	800a248 <__sflush_r+0x94>
 800a242:	4628      	mov	r0, r5
 800a244:	f7ff fbea 	bl	8009a1c <_free_r>
 800a248:	2000      	movs	r0, #0
 800a24a:	6360      	str	r0, [r4, #52]	; 0x34
 800a24c:	e7c0      	b.n	800a1d0 <__sflush_r+0x1c>
 800a24e:	2301      	movs	r3, #1
 800a250:	4628      	mov	r0, r5
 800a252:	47b0      	blx	r6
 800a254:	1c41      	adds	r1, r0, #1
 800a256:	d1c8      	bne.n	800a1ea <__sflush_r+0x36>
 800a258:	682b      	ldr	r3, [r5, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d0c5      	beq.n	800a1ea <__sflush_r+0x36>
 800a25e:	2b1d      	cmp	r3, #29
 800a260:	d001      	beq.n	800a266 <__sflush_r+0xb2>
 800a262:	2b16      	cmp	r3, #22
 800a264:	d101      	bne.n	800a26a <__sflush_r+0xb6>
 800a266:	602f      	str	r7, [r5, #0]
 800a268:	e7b1      	b.n	800a1ce <__sflush_r+0x1a>
 800a26a:	89a3      	ldrh	r3, [r4, #12]
 800a26c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a270:	81a3      	strh	r3, [r4, #12]
 800a272:	e7ad      	b.n	800a1d0 <__sflush_r+0x1c>
 800a274:	690f      	ldr	r7, [r1, #16]
 800a276:	2f00      	cmp	r7, #0
 800a278:	d0a9      	beq.n	800a1ce <__sflush_r+0x1a>
 800a27a:	0793      	lsls	r3, r2, #30
 800a27c:	680e      	ldr	r6, [r1, #0]
 800a27e:	bf08      	it	eq
 800a280:	694b      	ldreq	r3, [r1, #20]
 800a282:	600f      	str	r7, [r1, #0]
 800a284:	bf18      	it	ne
 800a286:	2300      	movne	r3, #0
 800a288:	eba6 0807 	sub.w	r8, r6, r7
 800a28c:	608b      	str	r3, [r1, #8]
 800a28e:	f1b8 0f00 	cmp.w	r8, #0
 800a292:	dd9c      	ble.n	800a1ce <__sflush_r+0x1a>
 800a294:	6a21      	ldr	r1, [r4, #32]
 800a296:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a298:	4643      	mov	r3, r8
 800a29a:	463a      	mov	r2, r7
 800a29c:	4628      	mov	r0, r5
 800a29e:	47b0      	blx	r6
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	dc06      	bgt.n	800a2b2 <__sflush_r+0xfe>
 800a2a4:	89a3      	ldrh	r3, [r4, #12]
 800a2a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2aa:	81a3      	strh	r3, [r4, #12]
 800a2ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2b0:	e78e      	b.n	800a1d0 <__sflush_r+0x1c>
 800a2b2:	4407      	add	r7, r0
 800a2b4:	eba8 0800 	sub.w	r8, r8, r0
 800a2b8:	e7e9      	b.n	800a28e <__sflush_r+0xda>
 800a2ba:	bf00      	nop
 800a2bc:	dfbffffe 	.word	0xdfbffffe

0800a2c0 <_fflush_r>:
 800a2c0:	b538      	push	{r3, r4, r5, lr}
 800a2c2:	690b      	ldr	r3, [r1, #16]
 800a2c4:	4605      	mov	r5, r0
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	b913      	cbnz	r3, 800a2d0 <_fflush_r+0x10>
 800a2ca:	2500      	movs	r5, #0
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	bd38      	pop	{r3, r4, r5, pc}
 800a2d0:	b118      	cbz	r0, 800a2da <_fflush_r+0x1a>
 800a2d2:	6a03      	ldr	r3, [r0, #32]
 800a2d4:	b90b      	cbnz	r3, 800a2da <_fflush_r+0x1a>
 800a2d6:	f7ff fa9b 	bl	8009810 <__sinit>
 800a2da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d0f3      	beq.n	800a2ca <_fflush_r+0xa>
 800a2e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2e4:	07d0      	lsls	r0, r2, #31
 800a2e6:	d404      	bmi.n	800a2f2 <_fflush_r+0x32>
 800a2e8:	0599      	lsls	r1, r3, #22
 800a2ea:	d402      	bmi.n	800a2f2 <_fflush_r+0x32>
 800a2ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2ee:	f7ff fb93 	bl	8009a18 <__retarget_lock_acquire_recursive>
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	4621      	mov	r1, r4
 800a2f6:	f7ff ff5d 	bl	800a1b4 <__sflush_r>
 800a2fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2fc:	07da      	lsls	r2, r3, #31
 800a2fe:	4605      	mov	r5, r0
 800a300:	d4e4      	bmi.n	800a2cc <_fflush_r+0xc>
 800a302:	89a3      	ldrh	r3, [r4, #12]
 800a304:	059b      	lsls	r3, r3, #22
 800a306:	d4e1      	bmi.n	800a2cc <_fflush_r+0xc>
 800a308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a30a:	f7ff fb86 	bl	8009a1a <__retarget_lock_release_recursive>
 800a30e:	e7dd      	b.n	800a2cc <_fflush_r+0xc>

0800a310 <__swbuf_r>:
 800a310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a312:	460e      	mov	r6, r1
 800a314:	4614      	mov	r4, r2
 800a316:	4605      	mov	r5, r0
 800a318:	b118      	cbz	r0, 800a322 <__swbuf_r+0x12>
 800a31a:	6a03      	ldr	r3, [r0, #32]
 800a31c:	b90b      	cbnz	r3, 800a322 <__swbuf_r+0x12>
 800a31e:	f7ff fa77 	bl	8009810 <__sinit>
 800a322:	69a3      	ldr	r3, [r4, #24]
 800a324:	60a3      	str	r3, [r4, #8]
 800a326:	89a3      	ldrh	r3, [r4, #12]
 800a328:	071a      	lsls	r2, r3, #28
 800a32a:	d525      	bpl.n	800a378 <__swbuf_r+0x68>
 800a32c:	6923      	ldr	r3, [r4, #16]
 800a32e:	b31b      	cbz	r3, 800a378 <__swbuf_r+0x68>
 800a330:	6823      	ldr	r3, [r4, #0]
 800a332:	6922      	ldr	r2, [r4, #16]
 800a334:	1a98      	subs	r0, r3, r2
 800a336:	6963      	ldr	r3, [r4, #20]
 800a338:	b2f6      	uxtb	r6, r6
 800a33a:	4283      	cmp	r3, r0
 800a33c:	4637      	mov	r7, r6
 800a33e:	dc04      	bgt.n	800a34a <__swbuf_r+0x3a>
 800a340:	4621      	mov	r1, r4
 800a342:	4628      	mov	r0, r5
 800a344:	f7ff ffbc 	bl	800a2c0 <_fflush_r>
 800a348:	b9e0      	cbnz	r0, 800a384 <__swbuf_r+0x74>
 800a34a:	68a3      	ldr	r3, [r4, #8]
 800a34c:	3b01      	subs	r3, #1
 800a34e:	60a3      	str	r3, [r4, #8]
 800a350:	6823      	ldr	r3, [r4, #0]
 800a352:	1c5a      	adds	r2, r3, #1
 800a354:	6022      	str	r2, [r4, #0]
 800a356:	701e      	strb	r6, [r3, #0]
 800a358:	6962      	ldr	r2, [r4, #20]
 800a35a:	1c43      	adds	r3, r0, #1
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d004      	beq.n	800a36a <__swbuf_r+0x5a>
 800a360:	89a3      	ldrh	r3, [r4, #12]
 800a362:	07db      	lsls	r3, r3, #31
 800a364:	d506      	bpl.n	800a374 <__swbuf_r+0x64>
 800a366:	2e0a      	cmp	r6, #10
 800a368:	d104      	bne.n	800a374 <__swbuf_r+0x64>
 800a36a:	4621      	mov	r1, r4
 800a36c:	4628      	mov	r0, r5
 800a36e:	f7ff ffa7 	bl	800a2c0 <_fflush_r>
 800a372:	b938      	cbnz	r0, 800a384 <__swbuf_r+0x74>
 800a374:	4638      	mov	r0, r7
 800a376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a378:	4621      	mov	r1, r4
 800a37a:	4628      	mov	r0, r5
 800a37c:	f000 f806 	bl	800a38c <__swsetup_r>
 800a380:	2800      	cmp	r0, #0
 800a382:	d0d5      	beq.n	800a330 <__swbuf_r+0x20>
 800a384:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a388:	e7f4      	b.n	800a374 <__swbuf_r+0x64>
	...

0800a38c <__swsetup_r>:
 800a38c:	b538      	push	{r3, r4, r5, lr}
 800a38e:	4b2a      	ldr	r3, [pc, #168]	; (800a438 <__swsetup_r+0xac>)
 800a390:	4605      	mov	r5, r0
 800a392:	6818      	ldr	r0, [r3, #0]
 800a394:	460c      	mov	r4, r1
 800a396:	b118      	cbz	r0, 800a3a0 <__swsetup_r+0x14>
 800a398:	6a03      	ldr	r3, [r0, #32]
 800a39a:	b90b      	cbnz	r3, 800a3a0 <__swsetup_r+0x14>
 800a39c:	f7ff fa38 	bl	8009810 <__sinit>
 800a3a0:	89a3      	ldrh	r3, [r4, #12]
 800a3a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3a6:	0718      	lsls	r0, r3, #28
 800a3a8:	d422      	bmi.n	800a3f0 <__swsetup_r+0x64>
 800a3aa:	06d9      	lsls	r1, r3, #27
 800a3ac:	d407      	bmi.n	800a3be <__swsetup_r+0x32>
 800a3ae:	2309      	movs	r3, #9
 800a3b0:	602b      	str	r3, [r5, #0]
 800a3b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a3b6:	81a3      	strh	r3, [r4, #12]
 800a3b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3bc:	e034      	b.n	800a428 <__swsetup_r+0x9c>
 800a3be:	0758      	lsls	r0, r3, #29
 800a3c0:	d512      	bpl.n	800a3e8 <__swsetup_r+0x5c>
 800a3c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3c4:	b141      	cbz	r1, 800a3d8 <__swsetup_r+0x4c>
 800a3c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3ca:	4299      	cmp	r1, r3
 800a3cc:	d002      	beq.n	800a3d4 <__swsetup_r+0x48>
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	f7ff fb24 	bl	8009a1c <_free_r>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	6363      	str	r3, [r4, #52]	; 0x34
 800a3d8:	89a3      	ldrh	r3, [r4, #12]
 800a3da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3de:	81a3      	strh	r3, [r4, #12]
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	6063      	str	r3, [r4, #4]
 800a3e4:	6923      	ldr	r3, [r4, #16]
 800a3e6:	6023      	str	r3, [r4, #0]
 800a3e8:	89a3      	ldrh	r3, [r4, #12]
 800a3ea:	f043 0308 	orr.w	r3, r3, #8
 800a3ee:	81a3      	strh	r3, [r4, #12]
 800a3f0:	6923      	ldr	r3, [r4, #16]
 800a3f2:	b94b      	cbnz	r3, 800a408 <__swsetup_r+0x7c>
 800a3f4:	89a3      	ldrh	r3, [r4, #12]
 800a3f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a3fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3fe:	d003      	beq.n	800a408 <__swsetup_r+0x7c>
 800a400:	4621      	mov	r1, r4
 800a402:	4628      	mov	r0, r5
 800a404:	f000 f850 	bl	800a4a8 <__smakebuf_r>
 800a408:	89a0      	ldrh	r0, [r4, #12]
 800a40a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a40e:	f010 0301 	ands.w	r3, r0, #1
 800a412:	d00a      	beq.n	800a42a <__swsetup_r+0x9e>
 800a414:	2300      	movs	r3, #0
 800a416:	60a3      	str	r3, [r4, #8]
 800a418:	6963      	ldr	r3, [r4, #20]
 800a41a:	425b      	negs	r3, r3
 800a41c:	61a3      	str	r3, [r4, #24]
 800a41e:	6923      	ldr	r3, [r4, #16]
 800a420:	b943      	cbnz	r3, 800a434 <__swsetup_r+0xa8>
 800a422:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a426:	d1c4      	bne.n	800a3b2 <__swsetup_r+0x26>
 800a428:	bd38      	pop	{r3, r4, r5, pc}
 800a42a:	0781      	lsls	r1, r0, #30
 800a42c:	bf58      	it	pl
 800a42e:	6963      	ldrpl	r3, [r4, #20]
 800a430:	60a3      	str	r3, [r4, #8]
 800a432:	e7f4      	b.n	800a41e <__swsetup_r+0x92>
 800a434:	2000      	movs	r0, #0
 800a436:	e7f7      	b.n	800a428 <__swsetup_r+0x9c>
 800a438:	20000158 	.word	0x20000158

0800a43c <_sbrk_r>:
 800a43c:	b538      	push	{r3, r4, r5, lr}
 800a43e:	4d06      	ldr	r5, [pc, #24]	; (800a458 <_sbrk_r+0x1c>)
 800a440:	2300      	movs	r3, #0
 800a442:	4604      	mov	r4, r0
 800a444:	4608      	mov	r0, r1
 800a446:	602b      	str	r3, [r5, #0]
 800a448:	f7f7 f858 	bl	80014fc <_sbrk>
 800a44c:	1c43      	adds	r3, r0, #1
 800a44e:	d102      	bne.n	800a456 <_sbrk_r+0x1a>
 800a450:	682b      	ldr	r3, [r5, #0]
 800a452:	b103      	cbz	r3, 800a456 <_sbrk_r+0x1a>
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	bd38      	pop	{r3, r4, r5, pc}
 800a458:	2000205c 	.word	0x2000205c

0800a45c <__swhatbuf_r>:
 800a45c:	b570      	push	{r4, r5, r6, lr}
 800a45e:	460c      	mov	r4, r1
 800a460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a464:	2900      	cmp	r1, #0
 800a466:	b096      	sub	sp, #88	; 0x58
 800a468:	4615      	mov	r5, r2
 800a46a:	461e      	mov	r6, r3
 800a46c:	da0d      	bge.n	800a48a <__swhatbuf_r+0x2e>
 800a46e:	89a3      	ldrh	r3, [r4, #12]
 800a470:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a474:	f04f 0100 	mov.w	r1, #0
 800a478:	bf0c      	ite	eq
 800a47a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a47e:	2340      	movne	r3, #64	; 0x40
 800a480:	2000      	movs	r0, #0
 800a482:	6031      	str	r1, [r6, #0]
 800a484:	602b      	str	r3, [r5, #0]
 800a486:	b016      	add	sp, #88	; 0x58
 800a488:	bd70      	pop	{r4, r5, r6, pc}
 800a48a:	466a      	mov	r2, sp
 800a48c:	f000 f848 	bl	800a520 <_fstat_r>
 800a490:	2800      	cmp	r0, #0
 800a492:	dbec      	blt.n	800a46e <__swhatbuf_r+0x12>
 800a494:	9901      	ldr	r1, [sp, #4]
 800a496:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a49a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a49e:	4259      	negs	r1, r3
 800a4a0:	4159      	adcs	r1, r3
 800a4a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4a6:	e7eb      	b.n	800a480 <__swhatbuf_r+0x24>

0800a4a8 <__smakebuf_r>:
 800a4a8:	898b      	ldrh	r3, [r1, #12]
 800a4aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a4ac:	079d      	lsls	r5, r3, #30
 800a4ae:	4606      	mov	r6, r0
 800a4b0:	460c      	mov	r4, r1
 800a4b2:	d507      	bpl.n	800a4c4 <__smakebuf_r+0x1c>
 800a4b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a4b8:	6023      	str	r3, [r4, #0]
 800a4ba:	6123      	str	r3, [r4, #16]
 800a4bc:	2301      	movs	r3, #1
 800a4be:	6163      	str	r3, [r4, #20]
 800a4c0:	b002      	add	sp, #8
 800a4c2:	bd70      	pop	{r4, r5, r6, pc}
 800a4c4:	ab01      	add	r3, sp, #4
 800a4c6:	466a      	mov	r2, sp
 800a4c8:	f7ff ffc8 	bl	800a45c <__swhatbuf_r>
 800a4cc:	9900      	ldr	r1, [sp, #0]
 800a4ce:	4605      	mov	r5, r0
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	f7ff fb0f 	bl	8009af4 <_malloc_r>
 800a4d6:	b948      	cbnz	r0, 800a4ec <__smakebuf_r+0x44>
 800a4d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4dc:	059a      	lsls	r2, r3, #22
 800a4de:	d4ef      	bmi.n	800a4c0 <__smakebuf_r+0x18>
 800a4e0:	f023 0303 	bic.w	r3, r3, #3
 800a4e4:	f043 0302 	orr.w	r3, r3, #2
 800a4e8:	81a3      	strh	r3, [r4, #12]
 800a4ea:	e7e3      	b.n	800a4b4 <__smakebuf_r+0xc>
 800a4ec:	89a3      	ldrh	r3, [r4, #12]
 800a4ee:	6020      	str	r0, [r4, #0]
 800a4f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4f4:	81a3      	strh	r3, [r4, #12]
 800a4f6:	9b00      	ldr	r3, [sp, #0]
 800a4f8:	6163      	str	r3, [r4, #20]
 800a4fa:	9b01      	ldr	r3, [sp, #4]
 800a4fc:	6120      	str	r0, [r4, #16]
 800a4fe:	b15b      	cbz	r3, 800a518 <__smakebuf_r+0x70>
 800a500:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a504:	4630      	mov	r0, r6
 800a506:	f000 f81d 	bl	800a544 <_isatty_r>
 800a50a:	b128      	cbz	r0, 800a518 <__smakebuf_r+0x70>
 800a50c:	89a3      	ldrh	r3, [r4, #12]
 800a50e:	f023 0303 	bic.w	r3, r3, #3
 800a512:	f043 0301 	orr.w	r3, r3, #1
 800a516:	81a3      	strh	r3, [r4, #12]
 800a518:	89a3      	ldrh	r3, [r4, #12]
 800a51a:	431d      	orrs	r5, r3
 800a51c:	81a5      	strh	r5, [r4, #12]
 800a51e:	e7cf      	b.n	800a4c0 <__smakebuf_r+0x18>

0800a520 <_fstat_r>:
 800a520:	b538      	push	{r3, r4, r5, lr}
 800a522:	4d07      	ldr	r5, [pc, #28]	; (800a540 <_fstat_r+0x20>)
 800a524:	2300      	movs	r3, #0
 800a526:	4604      	mov	r4, r0
 800a528:	4608      	mov	r0, r1
 800a52a:	4611      	mov	r1, r2
 800a52c:	602b      	str	r3, [r5, #0]
 800a52e:	f7f6 ffbc 	bl	80014aa <_fstat>
 800a532:	1c43      	adds	r3, r0, #1
 800a534:	d102      	bne.n	800a53c <_fstat_r+0x1c>
 800a536:	682b      	ldr	r3, [r5, #0]
 800a538:	b103      	cbz	r3, 800a53c <_fstat_r+0x1c>
 800a53a:	6023      	str	r3, [r4, #0]
 800a53c:	bd38      	pop	{r3, r4, r5, pc}
 800a53e:	bf00      	nop
 800a540:	2000205c 	.word	0x2000205c

0800a544 <_isatty_r>:
 800a544:	b538      	push	{r3, r4, r5, lr}
 800a546:	4d06      	ldr	r5, [pc, #24]	; (800a560 <_isatty_r+0x1c>)
 800a548:	2300      	movs	r3, #0
 800a54a:	4604      	mov	r4, r0
 800a54c:	4608      	mov	r0, r1
 800a54e:	602b      	str	r3, [r5, #0]
 800a550:	f7f6 ffbb 	bl	80014ca <_isatty>
 800a554:	1c43      	adds	r3, r0, #1
 800a556:	d102      	bne.n	800a55e <_isatty_r+0x1a>
 800a558:	682b      	ldr	r3, [r5, #0]
 800a55a:	b103      	cbz	r3, 800a55e <_isatty_r+0x1a>
 800a55c:	6023      	str	r3, [r4, #0]
 800a55e:	bd38      	pop	{r3, r4, r5, pc}
 800a560:	2000205c 	.word	0x2000205c

0800a564 <_init>:
 800a564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a566:	bf00      	nop
 800a568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a56a:	bc08      	pop	{r3}
 800a56c:	469e      	mov	lr, r3
 800a56e:	4770      	bx	lr

0800a570 <_fini>:
 800a570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a572:	bf00      	nop
 800a574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a576:	bc08      	pop	{r3}
 800a578:	469e      	mov	lr, r3
 800a57a:	4770      	bx	lr
