
F4Disc-00f-helloworld-CDC_USBSerial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081e0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008368  08008368  00018368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083d8  080083d8  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  080083d8  080083d8  000183d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083e0  080083e0  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083e0  080083e0  000183e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083e4  080083e4  000183e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080083e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001d20  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001e1c  20001e1c  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001428b  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000036ef  00000000  00000000  000343fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011c8  00000000  00000000  00037af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d8d  00000000  00000000  00038cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023eda  00000000  00000000  00039a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000175d9  00000000  00000000  0005d91f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ca15f  00000000  00000000  00074ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000049a0  00000000  00000000  0013f058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  001439f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008350 	.word	0x08008350

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08008350 	.word	0x08008350

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fbcb 	bl	8000c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f81f 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f91b 	bl	800070c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d6:	f000 f885 	bl	80005e4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004da:	f000 f8b1 	bl	8000640 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004de:	f000 f8df 	bl	80006a0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004e2:	f007 f9e1 	bl	80078a8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t buffer[] = "Hello world \n\r";
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <main+0x48>)
 80004e8:	463c      	mov	r4, r7
 80004ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004ec:	c407      	stmia	r4!, {r0, r1, r2}
 80004ee:	8023      	strh	r3, [r4, #0]
 80004f0:	3402      	adds	r4, #2
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	7023      	strb	r3, [r4, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CDC_Transmit_FS(buffer,sizeof(buffer));
 80004f6:	463b      	mov	r3, r7
 80004f8:	210f      	movs	r1, #15
 80004fa:	4618      	mov	r0, r3
 80004fc:	f007 fa92 	bl	8007a24 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 8000500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000504:	f000 fc20 	bl	8000d48 <HAL_Delay>
	  CDC_Transmit_FS(buffer,sizeof(buffer));
 8000508:	e7f5      	b.n	80004f6 <main+0x32>
 800050a:	bf00      	nop
 800050c:	08008368 	.word	0x08008368

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b094      	sub	sp, #80	; 0x50
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0320 	add.w	r3, r7, #32
 800051a:	2230      	movs	r2, #48	; 0x30
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f007 feea 	bl	80082f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	4b28      	ldr	r3, [pc, #160]	; (80005dc <SystemClock_Config+0xcc>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053c:	4a27      	ldr	r2, [pc, #156]	; (80005dc <SystemClock_Config+0xcc>)
 800053e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000542:	6413      	str	r3, [r2, #64]	; 0x40
 8000544:	4b25      	ldr	r3, [pc, #148]	; (80005dc <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <SystemClock_Config+0xd0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a21      	ldr	r2, [pc, #132]	; (80005e0 <SystemClock_Config+0xd0>)
 800055a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056c:	2301      	movs	r3, #1
 800056e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000570:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000574:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000576:	2302      	movs	r3, #2
 8000578:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000580:	2308      	movs	r3, #8
 8000582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000584:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000588:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800058e:	2307      	movs	r3, #7
 8000590:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	4618      	mov	r0, r3
 8000598:	f002 ff24 	bl	80033e4 <HAL_RCC_OscConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005a2:	f000 f9b1 	bl	8000908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a6:	230f      	movs	r3, #15
 80005a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005aa:	2302      	movs	r3, #2
 80005ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	2105      	movs	r1, #5
 80005c4:	4618      	mov	r0, r3
 80005c6:	f003 f985 	bl	80038d4 <HAL_RCC_ClockConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005d0:	f000 f99a 	bl	8000908 <Error_Handler>
  }
}
 80005d4:	bf00      	nop
 80005d6:	3750      	adds	r7, #80	; 0x50
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_I2C1_Init+0x50>)
 80005ea:	4a13      	ldr	r2, [pc, #76]	; (8000638 <MX_I2C1_Init+0x54>)
 80005ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_I2C1_Init+0x50>)
 80005f0:	4a12      	ldr	r2, [pc, #72]	; (800063c <MX_I2C1_Init+0x58>)
 80005f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_I2C1_Init+0x50>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_I2C1_Init+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_I2C1_Init+0x50>)
 8000602:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000606:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <MX_I2C1_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_I2C1_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <MX_I2C1_Init+0x50>)
 8000622:	f000 fe7d 	bl	8001320 <HAL_I2C_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800062c:	f000 f96c 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000118 	.word	0x20000118
 8000638:	40005400 	.word	0x40005400
 800063c:	000186a0 	.word	0x000186a0

08000640 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000644:	4b13      	ldr	r3, [pc, #76]	; (8000694 <MX_I2S3_Init+0x54>)
 8000646:	4a14      	ldr	r2, [pc, #80]	; (8000698 <MX_I2S3_Init+0x58>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_I2S3_Init+0x54>)
 800064c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000650:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_I2S3_Init+0x54>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000658:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_I2S3_Init+0x54>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_I2S3_Init+0x54>)
 8000660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000664:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <MX_I2S3_Init+0x54>)
 8000668:	4a0c      	ldr	r2, [pc, #48]	; (800069c <MX_I2S3_Init+0x5c>)
 800066a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_I2S3_Init+0x54>)
 800066e:	2200      	movs	r2, #0
 8000670:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <MX_I2S3_Init+0x54>)
 8000674:	2200      	movs	r2, #0
 8000676:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_I2S3_Init+0x54>)
 800067a:	2200      	movs	r2, #0
 800067c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_I2S3_Init+0x54>)
 8000680:	f000 ff92 	bl	80015a8 <HAL_I2S_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800068a:	f000 f93d 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	2000016c 	.word	0x2000016c
 8000698:	40003c00 	.word	0x40003c00
 800069c:	00017700 	.word	0x00017700

080006a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006a4:	4b17      	ldr	r3, [pc, #92]	; (8000704 <MX_SPI1_Init+0x64>)
 80006a6:	4a18      	ldr	r2, [pc, #96]	; (8000708 <MX_SPI1_Init+0x68>)
 80006a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006aa:	4b16      	ldr	r3, [pc, #88]	; (8000704 <MX_SPI1_Init+0x64>)
 80006ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_SPI1_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_SPI1_Init+0x64>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_SPI1_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_SPI1_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_SPI1_Init+0x64>)
 80006cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_SPI1_Init+0x64>)
 80006ec:	220a      	movs	r2, #10
 80006ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_SPI1_Init+0x64>)
 80006f2:	f003 fc3b 	bl	8003f6c <HAL_SPI_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006fc:	f000 f904 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200001b4 	.word	0x200001b4
 8000708:	40013000 	.word	0x40013000

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08c      	sub	sp, #48	; 0x30
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	61bb      	str	r3, [r7, #24]
 8000726:	4b72      	ldr	r3, [pc, #456]	; (80008f0 <MX_GPIO_Init+0x1e4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a71      	ldr	r2, [pc, #452]	; (80008f0 <MX_GPIO_Init+0x1e4>)
 800072c:	f043 0310 	orr.w	r3, r3, #16
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b6f      	ldr	r3, [pc, #444]	; (80008f0 <MX_GPIO_Init+0x1e4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0310 	and.w	r3, r3, #16
 800073a:	61bb      	str	r3, [r7, #24]
 800073c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
 8000742:	4b6b      	ldr	r3, [pc, #428]	; (80008f0 <MX_GPIO_Init+0x1e4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a6a      	ldr	r2, [pc, #424]	; (80008f0 <MX_GPIO_Init+0x1e4>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b68      	ldr	r3, [pc, #416]	; (80008f0 <MX_GPIO_Init+0x1e4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	4b64      	ldr	r3, [pc, #400]	; (80008f0 <MX_GPIO_Init+0x1e4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a63      	ldr	r2, [pc, #396]	; (80008f0 <MX_GPIO_Init+0x1e4>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b61      	ldr	r3, [pc, #388]	; (80008f0 <MX_GPIO_Init+0x1e4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	4b5d      	ldr	r3, [pc, #372]	; (80008f0 <MX_GPIO_Init+0x1e4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a5c      	ldr	r2, [pc, #368]	; (80008f0 <MX_GPIO_Init+0x1e4>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b5a      	ldr	r3, [pc, #360]	; (80008f0 <MX_GPIO_Init+0x1e4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	4b56      	ldr	r3, [pc, #344]	; (80008f0 <MX_GPIO_Init+0x1e4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a55      	ldr	r2, [pc, #340]	; (80008f0 <MX_GPIO_Init+0x1e4>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b53      	ldr	r3, [pc, #332]	; (80008f0 <MX_GPIO_Init+0x1e4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b4f      	ldr	r3, [pc, #316]	; (80008f0 <MX_GPIO_Init+0x1e4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a4e      	ldr	r2, [pc, #312]	; (80008f0 <MX_GPIO_Init+0x1e4>)
 80007b8:	f043 0308 	orr.w	r3, r3, #8
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b4c      	ldr	r3, [pc, #304]	; (80008f0 <MX_GPIO_Init+0x1e4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2108      	movs	r1, #8
 80007ce:	4849      	ldr	r0, [pc, #292]	; (80008f4 <MX_GPIO_Init+0x1e8>)
 80007d0:	f000 fd8c 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2101      	movs	r1, #1
 80007d8:	4847      	ldr	r0, [pc, #284]	; (80008f8 <MX_GPIO_Init+0x1ec>)
 80007da:	f000 fd87 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007de:	2200      	movs	r2, #0
 80007e0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007e4:	4845      	ldr	r0, [pc, #276]	; (80008fc <MX_GPIO_Init+0x1f0>)
 80007e6:	f000 fd81 	bl	80012ec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007ea:	2308      	movs	r3, #8
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	483c      	ldr	r0, [pc, #240]	; (80008f4 <MX_GPIO_Init+0x1e8>)
 8000802:	f000 fbd7 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000806:	2301      	movs	r3, #1
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	4836      	ldr	r0, [pc, #216]	; (80008f8 <MX_GPIO_Init+0x1ec>)
 800081e:	f000 fbc9 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000822:	2308      	movs	r3, #8
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000832:	2305      	movs	r3, #5
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	482e      	ldr	r0, [pc, #184]	; (80008f8 <MX_GPIO_Init+0x1ec>)
 800083e:	f000 fbb9 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000842:	2301      	movs	r3, #1
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000846:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800084a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	482a      	ldr	r0, [pc, #168]	; (8000900 <MX_GPIO_Init+0x1f4>)
 8000858:	f000 fbac 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800085c:	2304      	movs	r3, #4
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	4825      	ldr	r0, [pc, #148]	; (8000904 <MX_GPIO_Init+0x1f8>)
 8000870:	f000 fba0 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000886:	2305      	movs	r3, #5
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	481c      	ldr	r0, [pc, #112]	; (8000904 <MX_GPIO_Init+0x1f8>)
 8000892:	f000 fb8f 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000896:	f24f 0310 	movw	r3, #61456	; 0xf010
 800089a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4813      	ldr	r0, [pc, #76]	; (80008fc <MX_GPIO_Init+0x1f0>)
 80008b0:	f000 fb80 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008b4:	2320      	movs	r3, #32
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	480d      	ldr	r0, [pc, #52]	; (80008fc <MX_GPIO_Init+0x1f0>)
 80008c8:	f000 fb74 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008cc:	2302      	movs	r3, #2
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008d0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_GPIO_Init+0x1e8>)
 80008e2:	f000 fb67 	bl	8000fb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e6:	bf00      	nop
 80008e8:	3730      	adds	r7, #48	; 0x30
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40020800 	.word	0x40020800
 80008fc:	40020c00 	.word	0x40020c00
 8000900:	40020000 	.word	0x40020000
 8000904:	40020400 	.word	0x40020400

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	e7fe      	b.n	8000910 <Error_Handler+0x8>
	...

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <HAL_MspInit+0x4c>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	4a0f      	ldr	r2, [pc, #60]	; (8000960 <HAL_MspInit+0x4c>)
 8000924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000928:	6453      	str	r3, [r2, #68]	; 0x44
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <HAL_MspInit+0x4c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_MspInit+0x4c>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_MspInit+0x4c>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_MspInit+0x4c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000952:	2007      	movs	r0, #7
 8000954:	f000 faec 	bl	8000f30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40023800 	.word	0x40023800

08000964 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a19      	ldr	r2, [pc, #100]	; (80009e8 <HAL_I2C_MspInit+0x84>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d12c      	bne.n	80009e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <HAL_I2C_MspInit+0x88>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a17      	ldr	r2, [pc, #92]	; (80009ec <HAL_I2C_MspInit+0x88>)
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <HAL_I2C_MspInit+0x88>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009a2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a8:	2312      	movs	r3, #18
 80009aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009b4:	2304      	movs	r3, #4
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	480c      	ldr	r0, [pc, #48]	; (80009f0 <HAL_I2C_MspInit+0x8c>)
 80009c0:	f000 faf8 	bl	8000fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_I2C_MspInit+0x88>)
 80009ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009cc:	4a07      	ldr	r2, [pc, #28]	; (80009ec <HAL_I2C_MspInit+0x88>)
 80009ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009d2:	6413      	str	r3, [r2, #64]	; 0x40
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <HAL_I2C_MspInit+0x88>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009e0:	bf00      	nop
 80009e2:	3728      	adds	r7, #40	; 0x28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40005400 	.word	0x40005400
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020400 	.word	0x40020400

080009f4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08e      	sub	sp, #56	; 0x38
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a31      	ldr	r2, [pc, #196]	; (8000ae4 <HAL_I2S_MspInit+0xf0>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d15a      	bne.n	8000ada <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a24:	2301      	movs	r3, #1
 8000a26:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a28:	23c0      	movs	r3, #192	; 0xc0
 8000a2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4618      	mov	r0, r3
 8000a36:	f003 f959 	bl	8003cec <HAL_RCCEx_PeriphCLKConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a40:	f7ff ff62 	bl	8000908 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <HAL_I2S_MspInit+0xf4>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	4a26      	ldr	r2, [pc, #152]	; (8000ae8 <HAL_I2S_MspInit+0xf4>)
 8000a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a52:	6413      	str	r3, [r2, #64]	; 0x40
 8000a54:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <HAL_I2S_MspInit+0xf4>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <HAL_I2S_MspInit+0xf4>)
 8000a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a68:	4a1f      	ldr	r2, [pc, #124]	; (8000ae8 <HAL_I2S_MspInit+0xf4>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a70:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <HAL_I2S_MspInit+0xf4>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <HAL_I2S_MspInit+0xf4>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	4a18      	ldr	r2, [pc, #96]	; (8000ae8 <HAL_I2S_MspInit+0xf4>)
 8000a86:	f043 0304 	orr.w	r3, r3, #4
 8000a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <HAL_I2S_MspInit+0xf4>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a98:	2310      	movs	r3, #16
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aa8:	2306      	movs	r3, #6
 8000aaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480e      	ldr	r0, [pc, #56]	; (8000aec <HAL_I2S_MspInit+0xf8>)
 8000ab4:	f000 fa7e 	bl	8000fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ab8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aca:	2306      	movs	r3, #6
 8000acc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4806      	ldr	r0, [pc, #24]	; (8000af0 <HAL_I2S_MspInit+0xfc>)
 8000ad6:	f000 fa6d 	bl	8000fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ada:	bf00      	nop
 8000adc:	3738      	adds	r7, #56	; 0x38
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40003c00 	.word	0x40003c00
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	40020800 	.word	0x40020800

08000af4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a19      	ldr	r2, [pc, #100]	; (8000b78 <HAL_SPI_MspInit+0x84>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d12b      	bne.n	8000b6e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b24:	6453      	str	r3, [r2, #68]	; 0x44
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b4e:	23e0      	movs	r3, #224	; 0xe0
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b5e:	2305      	movs	r3, #5
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	; (8000b80 <HAL_SPI_MspInit+0x8c>)
 8000b6a:	f000 fa23 	bl	8000fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	; 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40013000 	.word	0x40013000
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <NMI_Handler+0x4>

08000b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <MemManage_Handler+0x4>

08000b96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd0:	f000 f89a 	bl	8000d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <OTG_FS_IRQHandler+0x10>)
 8000bde:	f001 fad3 	bl	8002188 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200016f0 	.word	0x200016f0

08000bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <SystemInit+0x20>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <SystemInit+0x20>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c14:	480d      	ldr	r0, [pc, #52]	; (8000c4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c16:	490e      	ldr	r1, [pc, #56]	; (8000c50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c18:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c2c:	4c0b      	ldr	r4, [pc, #44]	; (8000c5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c3a:	f7ff ffd7 	bl	8000bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f007 fb63 	bl	8008308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c42:	f7ff fc3f 	bl	80004c4 <main>
  bx  lr    
 8000c46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000c54:	080083e8 	.word	0x080083e8
  ldr r2, =_sbss
 8000c58:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000c5c:	20001e1c 	.word	0x20001e1c

08000c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC_IRQHandler>
	...

08000c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c68:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ca4 <HAL_Init+0x40>)
 8000c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <HAL_Init+0x40>)
 8000c7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <HAL_Init+0x40>)
 8000c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f000 f94f 	bl	8000f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f000 f808 	bl	8000ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c98:	f7ff fe3c 	bl	8000914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023c00 	.word	0x40023c00

08000ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_InitTick+0x54>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_InitTick+0x58>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f967 	bl	8000f9a <HAL_SYSTICK_Config>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e00e      	b.n	8000cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b0f      	cmp	r3, #15
 8000cda:	d80a      	bhi.n	8000cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ce4:	f000 f92f 	bl	8000f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce8:	4a06      	ldr	r2, [pc, #24]	; (8000d04 <HAL_InitTick+0x5c>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e000      	b.n	8000cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20000008 	.word	0x20000008
 8000d04:	20000004 	.word	0x20000004

08000d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x20>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_IncTick+0x24>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <HAL_IncTick+0x24>)
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	2000020c 	.word	0x2000020c

08000d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return uwTick;
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <HAL_GetTick+0x14>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	2000020c 	.word	0x2000020c

08000d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d50:	f7ff ffee 	bl	8000d30 <HAL_GetTick>
 8000d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d60:	d005      	beq.n	8000d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <HAL_Delay+0x44>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d6e:	bf00      	nop
 8000d70:	f7ff ffde 	bl	8000d30 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d8f7      	bhi.n	8000d70 <HAL_Delay+0x28>
  {
  }
}
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000008 	.word	0x20000008

08000d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dac:	4013      	ands	r3, r2
 8000dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc2:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	60d3      	str	r3, [r2, #12]
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	0a1b      	lsrs	r3, r3, #8
 8000de2:	f003 0307 	and.w	r3, r3, #7
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	db0b      	blt.n	8000e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	f003 021f 	and.w	r2, r3, #31
 8000e0c:	4907      	ldr	r1, [pc, #28]	; (8000e2c <__NVIC_EnableIRQ+0x38>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	095b      	lsrs	r3, r3, #5
 8000e14:	2001      	movs	r0, #1
 8000e16:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000e100 	.word	0xe000e100

08000e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	db0a      	blt.n	8000e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	490c      	ldr	r1, [pc, #48]	; (8000e7c <__NVIC_SetPriority+0x4c>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	0112      	lsls	r2, r2, #4
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	440b      	add	r3, r1
 8000e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e58:	e00a      	b.n	8000e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4908      	ldr	r1, [pc, #32]	; (8000e80 <__NVIC_SetPriority+0x50>)
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	3b04      	subs	r3, #4
 8000e68:	0112      	lsls	r2, r2, #4
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	761a      	strb	r2, [r3, #24]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000e100 	.word	0xe000e100
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	; 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f1c3 0307 	rsb	r3, r3, #7
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	bf28      	it	cs
 8000ea2:	2304      	movcs	r3, #4
 8000ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	2b06      	cmp	r3, #6
 8000eac:	d902      	bls.n	8000eb4 <NVIC_EncodePriority+0x30>
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3b03      	subs	r3, #3
 8000eb2:	e000      	b.n	8000eb6 <NVIC_EncodePriority+0x32>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ecc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed6:	43d9      	mvns	r1, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	4313      	orrs	r3, r2
         );
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3724      	adds	r7, #36	; 0x24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
	...

08000eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000efc:	d301      	bcc.n	8000f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efe:	2301      	movs	r3, #1
 8000f00:	e00f      	b.n	8000f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f02:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <SysTick_Config+0x40>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f10:	f7ff ff8e 	bl	8000e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <SysTick_Config+0x40>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f1a:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <SysTick_Config+0x40>)
 8000f1c:	2207      	movs	r2, #7
 8000f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	e000e010 	.word	0xe000e010

08000f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff ff29 	bl	8000d90 <__NVIC_SetPriorityGrouping>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b086      	sub	sp, #24
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f58:	f7ff ff3e 	bl	8000dd8 <__NVIC_GetPriorityGrouping>
 8000f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	68b9      	ldr	r1, [r7, #8]
 8000f62:	6978      	ldr	r0, [r7, #20]
 8000f64:	f7ff ff8e 	bl	8000e84 <NVIC_EncodePriority>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6e:	4611      	mov	r1, r2
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff5d 	bl	8000e30 <__NVIC_SetPriority>
}
 8000f76:	bf00      	nop
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff31 	bl	8000df4 <__NVIC_EnableIRQ>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ffa2 	bl	8000eec <SysTick_Config>
 8000fa8:	4603      	mov	r3, r0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
 8000fce:	e16b      	b.n	80012a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	f040 815a 	bne.w	80012a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d005      	beq.n	8001006 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001002:	2b02      	cmp	r3, #2
 8001004:	d130      	bne.n	8001068 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	2203      	movs	r2, #3
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	68da      	ldr	r2, [r3, #12]
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800103c:	2201      	movs	r2, #1
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	091b      	lsrs	r3, r3, #4
 8001052:	f003 0201 	and.w	r2, r3, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b03      	cmp	r3, #3
 8001072:	d017      	beq.n	80010a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d123      	bne.n	80010f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	08da      	lsrs	r2, r3, #3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3208      	adds	r2, #8
 80010b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	220f      	movs	r2, #15
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	691a      	ldr	r2, [r3, #16]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	08da      	lsrs	r2, r3, #3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3208      	adds	r2, #8
 80010f2:	69b9      	ldr	r1, [r7, #24]
 80010f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	2203      	movs	r2, #3
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0203 	and.w	r2, r3, #3
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 80b4 	beq.w	80012a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b60      	ldr	r3, [pc, #384]	; (80012c0 <HAL_GPIO_Init+0x30c>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	4a5f      	ldr	r2, [pc, #380]	; (80012c0 <HAL_GPIO_Init+0x30c>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001148:	6453      	str	r3, [r2, #68]	; 0x44
 800114a:	4b5d      	ldr	r3, [pc, #372]	; (80012c0 <HAL_GPIO_Init+0x30c>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001156:	4a5b      	ldr	r2, [pc, #364]	; (80012c4 <HAL_GPIO_Init+0x310>)
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	3302      	adds	r3, #2
 800115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	220f      	movs	r2, #15
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a52      	ldr	r2, [pc, #328]	; (80012c8 <HAL_GPIO_Init+0x314>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d02b      	beq.n	80011da <HAL_GPIO_Init+0x226>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a51      	ldr	r2, [pc, #324]	; (80012cc <HAL_GPIO_Init+0x318>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d025      	beq.n	80011d6 <HAL_GPIO_Init+0x222>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a50      	ldr	r2, [pc, #320]	; (80012d0 <HAL_GPIO_Init+0x31c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d01f      	beq.n	80011d2 <HAL_GPIO_Init+0x21e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4f      	ldr	r2, [pc, #316]	; (80012d4 <HAL_GPIO_Init+0x320>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d019      	beq.n	80011ce <HAL_GPIO_Init+0x21a>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4e      	ldr	r2, [pc, #312]	; (80012d8 <HAL_GPIO_Init+0x324>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d013      	beq.n	80011ca <HAL_GPIO_Init+0x216>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4d      	ldr	r2, [pc, #308]	; (80012dc <HAL_GPIO_Init+0x328>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d00d      	beq.n	80011c6 <HAL_GPIO_Init+0x212>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4c      	ldr	r2, [pc, #304]	; (80012e0 <HAL_GPIO_Init+0x32c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d007      	beq.n	80011c2 <HAL_GPIO_Init+0x20e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4b      	ldr	r2, [pc, #300]	; (80012e4 <HAL_GPIO_Init+0x330>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d101      	bne.n	80011be <HAL_GPIO_Init+0x20a>
 80011ba:	2307      	movs	r3, #7
 80011bc:	e00e      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011be:	2308      	movs	r3, #8
 80011c0:	e00c      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011c2:	2306      	movs	r3, #6
 80011c4:	e00a      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011c6:	2305      	movs	r3, #5
 80011c8:	e008      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011ca:	2304      	movs	r3, #4
 80011cc:	e006      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011ce:	2303      	movs	r3, #3
 80011d0:	e004      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011d2:	2302      	movs	r3, #2
 80011d4:	e002      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011d6:	2301      	movs	r3, #1
 80011d8:	e000      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011da:	2300      	movs	r3, #0
 80011dc:	69fa      	ldr	r2, [r7, #28]
 80011de:	f002 0203 	and.w	r2, r2, #3
 80011e2:	0092      	lsls	r2, r2, #2
 80011e4:	4093      	lsls	r3, r2
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011ec:	4935      	ldr	r1, [pc, #212]	; (80012c4 <HAL_GPIO_Init+0x310>)
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	089b      	lsrs	r3, r3, #2
 80011f2:	3302      	adds	r3, #2
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011fa:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <HAL_GPIO_Init+0x334>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800121e:	4a32      	ldr	r2, [pc, #200]	; (80012e8 <HAL_GPIO_Init+0x334>)
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001224:	4b30      	ldr	r3, [pc, #192]	; (80012e8 <HAL_GPIO_Init+0x334>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001248:	4a27      	ldr	r2, [pc, #156]	; (80012e8 <HAL_GPIO_Init+0x334>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800124e:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <HAL_GPIO_Init+0x334>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001272:	4a1d      	ldr	r2, [pc, #116]	; (80012e8 <HAL_GPIO_Init+0x334>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <HAL_GPIO_Init+0x334>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800129c:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <HAL_GPIO_Init+0x334>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3301      	adds	r3, #1
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	2b0f      	cmp	r3, #15
 80012ac:	f67f ae90 	bls.w	8000fd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3724      	adds	r7, #36	; 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40013800 	.word	0x40013800
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40020400 	.word	0x40020400
 80012d0:	40020800 	.word	0x40020800
 80012d4:	40020c00 	.word	0x40020c00
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40021400 	.word	0x40021400
 80012e0:	40021800 	.word	0x40021800
 80012e4:	40021c00 	.word	0x40021c00
 80012e8:	40013c00 	.word	0x40013c00

080012ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
 80012f8:	4613      	mov	r3, r2
 80012fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012fc:	787b      	ldrb	r3, [r7, #1]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001308:	e003      	b.n	8001312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	041a      	lsls	r2, r3, #16
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	619a      	str	r2, [r3, #24]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e12b      	b.n	800158a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d106      	bne.n	800134c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff fb0c 	bl	8000964 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2224      	movs	r2, #36	; 0x24
 8001350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0201 	bic.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001372:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001382:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001384:	f002 fc9e 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 8001388:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	4a81      	ldr	r2, [pc, #516]	; (8001594 <HAL_I2C_Init+0x274>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d807      	bhi.n	80013a4 <HAL_I2C_Init+0x84>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4a80      	ldr	r2, [pc, #512]	; (8001598 <HAL_I2C_Init+0x278>)
 8001398:	4293      	cmp	r3, r2
 800139a:	bf94      	ite	ls
 800139c:	2301      	movls	r3, #1
 800139e:	2300      	movhi	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	e006      	b.n	80013b2 <HAL_I2C_Init+0x92>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4a7d      	ldr	r2, [pc, #500]	; (800159c <HAL_I2C_Init+0x27c>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	bf94      	ite	ls
 80013ac:	2301      	movls	r3, #1
 80013ae:	2300      	movhi	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e0e7      	b.n	800158a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4a78      	ldr	r2, [pc, #480]	; (80015a0 <HAL_I2C_Init+0x280>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	0c9b      	lsrs	r3, r3, #18
 80013c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	430a      	orrs	r2, r1
 80013d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	4a6a      	ldr	r2, [pc, #424]	; (8001594 <HAL_I2C_Init+0x274>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d802      	bhi.n	80013f4 <HAL_I2C_Init+0xd4>
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	3301      	adds	r3, #1
 80013f2:	e009      	b.n	8001408 <HAL_I2C_Init+0xe8>
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013fa:	fb02 f303 	mul.w	r3, r2, r3
 80013fe:	4a69      	ldr	r2, [pc, #420]	; (80015a4 <HAL_I2C_Init+0x284>)
 8001400:	fba2 2303 	umull	r2, r3, r2, r3
 8001404:	099b      	lsrs	r3, r3, #6
 8001406:	3301      	adds	r3, #1
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	430b      	orrs	r3, r1
 800140e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800141a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	495c      	ldr	r1, [pc, #368]	; (8001594 <HAL_I2C_Init+0x274>)
 8001424:	428b      	cmp	r3, r1
 8001426:	d819      	bhi.n	800145c <HAL_I2C_Init+0x13c>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	1e59      	subs	r1, r3, #1
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	fbb1 f3f3 	udiv	r3, r1, r3
 8001436:	1c59      	adds	r1, r3, #1
 8001438:	f640 73fc 	movw	r3, #4092	; 0xffc
 800143c:	400b      	ands	r3, r1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00a      	beq.n	8001458 <HAL_I2C_Init+0x138>
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	1e59      	subs	r1, r3, #1
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001450:	3301      	adds	r3, #1
 8001452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001456:	e051      	b.n	80014fc <HAL_I2C_Init+0x1dc>
 8001458:	2304      	movs	r3, #4
 800145a:	e04f      	b.n	80014fc <HAL_I2C_Init+0x1dc>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d111      	bne.n	8001488 <HAL_I2C_Init+0x168>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	1e58      	subs	r0, r3, #1
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6859      	ldr	r1, [r3, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	440b      	add	r3, r1
 8001472:	fbb0 f3f3 	udiv	r3, r0, r3
 8001476:	3301      	adds	r3, #1
 8001478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800147c:	2b00      	cmp	r3, #0
 800147e:	bf0c      	ite	eq
 8001480:	2301      	moveq	r3, #1
 8001482:	2300      	movne	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	e012      	b.n	80014ae <HAL_I2C_Init+0x18e>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1e58      	subs	r0, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6859      	ldr	r1, [r3, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	0099      	lsls	r1, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	fbb0 f3f3 	udiv	r3, r0, r3
 800149e:	3301      	adds	r3, #1
 80014a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	bf0c      	ite	eq
 80014a8:	2301      	moveq	r3, #1
 80014aa:	2300      	movne	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_I2C_Init+0x196>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e022      	b.n	80014fc <HAL_I2C_Init+0x1dc>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10e      	bne.n	80014dc <HAL_I2C_Init+0x1bc>
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	1e58      	subs	r0, r3, #1
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6859      	ldr	r1, [r3, #4]
 80014c6:	460b      	mov	r3, r1
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	440b      	add	r3, r1
 80014cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80014d0:	3301      	adds	r3, #1
 80014d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014da:	e00f      	b.n	80014fc <HAL_I2C_Init+0x1dc>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	1e58      	subs	r0, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6859      	ldr	r1, [r3, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	0099      	lsls	r1, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80014f2:	3301      	adds	r3, #1
 80014f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	6809      	ldr	r1, [r1, #0]
 8001500:	4313      	orrs	r3, r2
 8001502:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69da      	ldr	r2, [r3, #28]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800152a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6911      	ldr	r1, [r2, #16]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68d2      	ldr	r2, [r2, #12]
 8001536:	4311      	orrs	r1, r2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	430b      	orrs	r3, r1
 800153e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0201 	orr.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2220      	movs	r2, #32
 8001576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	000186a0 	.word	0x000186a0
 8001598:	001e847f 	.word	0x001e847f
 800159c:	003d08ff 	.word	0x003d08ff
 80015a0:	431bde83 	.word	0x431bde83
 80015a4:	10624dd3 	.word	0x10624dd3

080015a8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e128      	b.n	800180c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d109      	bne.n	80015da <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a90      	ldr	r2, [pc, #576]	; (8001814 <HAL_I2S_Init+0x26c>)
 80015d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fa0d 	bl	80009f4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2202      	movs	r2, #2
 80015de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80015f0:	f023 030f 	bic.w	r3, r3, #15
 80015f4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2202      	movs	r2, #2
 80015fc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d060      	beq.n	80016c8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d102      	bne.n	8001614 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800160e:	2310      	movs	r3, #16
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	e001      	b.n	8001618 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001614:	2320      	movs	r3, #32
 8001616:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b20      	cmp	r3, #32
 800161e:	d802      	bhi.n	8001626 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001626:	2001      	movs	r0, #1
 8001628:	f002 fc42 	bl	8003eb0 <HAL_RCCEx_GetPeriphCLKFreq>
 800162c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001636:	d125      	bne.n	8001684 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d010      	beq.n	8001662 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	fbb2 f2f3 	udiv	r2, r2, r3
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	461a      	mov	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	fbb2 f3f3 	udiv	r3, r2, r3
 800165c:	3305      	adds	r3, #5
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	e01f      	b.n	80016a2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	fbb2 f2f3 	udiv	r2, r2, r3
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	461a      	mov	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	fbb2 f3f3 	udiv	r3, r2, r3
 800167e:	3305      	adds	r3, #5
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	e00e      	b.n	80016a2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	fbb2 f2f3 	udiv	r2, r2, r3
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	461a      	mov	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	fbb2 f3f3 	udiv	r3, r2, r3
 800169e:	3305      	adds	r3, #5
 80016a0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4a5c      	ldr	r2, [pc, #368]	; (8001818 <HAL_I2S_Init+0x270>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	08db      	lsrs	r3, r3, #3
 80016ac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	085b      	lsrs	r3, r3, #1
 80016be:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	61bb      	str	r3, [r7, #24]
 80016c6:	e003      	b.n	80016d0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80016c8:	2302      	movs	r3, #2
 80016ca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d902      	bls.n	80016dc <HAL_I2S_Init+0x134>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	2bff      	cmp	r3, #255	; 0xff
 80016da:	d907      	bls.n	80016ec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e0:	f043 0210 	orr.w	r2, r3, #16
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e08f      	b.n	800180c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	ea42 0103 	orr.w	r1, r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800170a:	f023 030f 	bic.w	r3, r3, #15
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6851      	ldr	r1, [r2, #4]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6892      	ldr	r2, [r2, #8]
 8001716:	4311      	orrs	r1, r2
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	68d2      	ldr	r2, [r2, #12]
 800171c:	4311      	orrs	r1, r2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6992      	ldr	r2, [r2, #24]
 8001722:	430a      	orrs	r2, r1
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800172e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d161      	bne.n	80017fc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a38      	ldr	r2, [pc, #224]	; (800181c <HAL_I2S_Init+0x274>)
 800173c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a37      	ldr	r2, [pc, #220]	; (8001820 <HAL_I2S_Init+0x278>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d101      	bne.n	800174c <HAL_I2S_Init+0x1a4>
 8001748:	4b36      	ldr	r3, [pc, #216]	; (8001824 <HAL_I2S_Init+0x27c>)
 800174a:	e001      	b.n	8001750 <HAL_I2S_Init+0x1a8>
 800174c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	4932      	ldr	r1, [pc, #200]	; (8001820 <HAL_I2S_Init+0x278>)
 8001758:	428a      	cmp	r2, r1
 800175a:	d101      	bne.n	8001760 <HAL_I2S_Init+0x1b8>
 800175c:	4a31      	ldr	r2, [pc, #196]	; (8001824 <HAL_I2S_Init+0x27c>)
 800175e:	e001      	b.n	8001764 <HAL_I2S_Init+0x1bc>
 8001760:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001764:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001768:	f023 030f 	bic.w	r3, r3, #15
 800176c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a2b      	ldr	r2, [pc, #172]	; (8001820 <HAL_I2S_Init+0x278>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d101      	bne.n	800177c <HAL_I2S_Init+0x1d4>
 8001778:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <HAL_I2S_Init+0x27c>)
 800177a:	e001      	b.n	8001780 <HAL_I2S_Init+0x1d8>
 800177c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001780:	2202      	movs	r2, #2
 8001782:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a25      	ldr	r2, [pc, #148]	; (8001820 <HAL_I2S_Init+0x278>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d101      	bne.n	8001792 <HAL_I2S_Init+0x1ea>
 800178e:	4b25      	ldr	r3, [pc, #148]	; (8001824 <HAL_I2S_Init+0x27c>)
 8001790:	e001      	b.n	8001796 <HAL_I2S_Init+0x1ee>
 8001792:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017a2:	d003      	beq.n	80017ac <HAL_I2S_Init+0x204>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d103      	bne.n	80017b4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80017ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	e001      	b.n	80017b8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80017b4:	2300      	movs	r3, #0
 80017b6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80017c2:	4313      	orrs	r3, r2
 80017c4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80017cc:	4313      	orrs	r3, r2
 80017ce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80017d6:	4313      	orrs	r3, r2
 80017d8:	b29a      	uxth	r2, r3
 80017da:	897b      	ldrh	r3, [r7, #10]
 80017dc:	4313      	orrs	r3, r2
 80017de:	b29b      	uxth	r3, r3
 80017e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017e4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <HAL_I2S_Init+0x278>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d101      	bne.n	80017f4 <HAL_I2S_Init+0x24c>
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <HAL_I2S_Init+0x27c>)
 80017f2:	e001      	b.n	80017f8 <HAL_I2S_Init+0x250>
 80017f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017f8:	897a      	ldrh	r2, [r7, #10]
 80017fa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3720      	adds	r7, #32
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	0800191f 	.word	0x0800191f
 8001818:	cccccccd 	.word	0xcccccccd
 800181c:	08001a35 	.word	0x08001a35
 8001820:	40003800 	.word	0x40003800
 8001824:	40003400 	.word	0x40003400

08001828 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	881a      	ldrh	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	1c9a      	adds	r2, r3, #2
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001886:	b29b      	uxth	r3, r3
 8001888:	3b01      	subs	r3, #1
 800188a:	b29a      	uxth	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001894:	b29b      	uxth	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10e      	bne.n	80018b8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80018a8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff ffb8 	bl	8001828 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d2:	b292      	uxth	r2, r2
 80018d4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	1c9a      	adds	r2, r3, #2
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10e      	bne.n	8001916 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001906:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff93 	bl	800183c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b04      	cmp	r3, #4
 8001938:	d13a      	bne.n	80019b0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b01      	cmp	r3, #1
 8001942:	d109      	bne.n	8001958 <I2S_IRQHandler+0x3a>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800194e:	2b40      	cmp	r3, #64	; 0x40
 8001950:	d102      	bne.n	8001958 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ffb4 	bl	80018c0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800195e:	2b40      	cmp	r3, #64	; 0x40
 8001960:	d126      	bne.n	80019b0 <I2S_IRQHandler+0x92>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0320 	and.w	r3, r3, #32
 800196c:	2b20      	cmp	r3, #32
 800196e:	d11f      	bne.n	80019b0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800197e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001980:	2300      	movs	r3, #0
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f043 0202 	orr.w	r2, r3, #2
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff ff50 	bl	8001850 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d136      	bne.n	8001a2a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d109      	bne.n	80019da <I2S_IRQHandler+0xbc>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d0:	2b80      	cmp	r3, #128	; 0x80
 80019d2:	d102      	bne.n	80019da <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ff45 	bl	8001864 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d122      	bne.n	8001a2a <I2S_IRQHandler+0x10c>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 0320 	and.w	r3, r3, #32
 80019ee:	2b20      	cmp	r3, #32
 80019f0:	d11b      	bne.n	8001a2a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a00:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1c:	f043 0204 	orr.w	r2, r3, #4
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ff13 	bl	8001850 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a92      	ldr	r2, [pc, #584]	; (8001c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d101      	bne.n	8001a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001a4e:	4b92      	ldr	r3, [pc, #584]	; (8001c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001a50:	e001      	b.n	8001a56 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001a52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a8b      	ldr	r2, [pc, #556]	; (8001c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d101      	bne.n	8001a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001a6c:	4b8a      	ldr	r3, [pc, #552]	; (8001c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001a6e:	e001      	b.n	8001a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001a70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a80:	d004      	beq.n	8001a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f040 8099 	bne.w	8001bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d107      	bne.n	8001aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f925 	bl	8001cf0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d107      	bne.n	8001ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f9c8 	bl	8001e50 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac6:	2b40      	cmp	r3, #64	; 0x40
 8001ac8:	d13a      	bne.n	8001b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	f003 0320 	and.w	r3, r3, #32
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d035      	beq.n	8001b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a6e      	ldr	r2, [pc, #440]	; (8001c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d101      	bne.n	8001ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001ade:	4b6e      	ldr	r3, [pc, #440]	; (8001c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ae0:	e001      	b.n	8001ae6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001ae2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4969      	ldr	r1, [pc, #420]	; (8001c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001aee:	428b      	cmp	r3, r1
 8001af0:	d101      	bne.n	8001af6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001af2:	4b69      	ldr	r3, [pc, #420]	; (8001c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001af4:	e001      	b.n	8001afa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001af6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001afa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001afe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b0e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	f043 0202 	orr.w	r2, r3, #2
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff fe88 	bl	8001850 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b08      	cmp	r3, #8
 8001b48:	f040 80c3 	bne.w	8001cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f003 0320 	and.w	r3, r3, #32
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 80bd 	beq.w	8001cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b66:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a49      	ldr	r2, [pc, #292]	; (8001c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d101      	bne.n	8001b76 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001b72:	4b49      	ldr	r3, [pc, #292]	; (8001c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b74:	e001      	b.n	8001b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001b76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4944      	ldr	r1, [pc, #272]	; (8001c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b82:	428b      	cmp	r3, r1
 8001b84:	d101      	bne.n	8001b8a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001b86:	4b44      	ldr	r3, [pc, #272]	; (8001c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b88:	e001      	b.n	8001b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001b8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b92:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f043 0204 	orr.w	r2, r3, #4
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff fe4a 	bl	8001850 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001bbc:	e089      	b.n	8001cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d107      	bne.n	8001bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f8be 	bl	8001d54 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d107      	bne.n	8001bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f8fd 	bl	8001dec <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf8:	2b40      	cmp	r3, #64	; 0x40
 8001bfa:	d12f      	bne.n	8001c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d02a      	beq.n	8001c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c14:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a1e      	ldr	r2, [pc, #120]	; (8001c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d101      	bne.n	8001c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001c20:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c22:	e001      	b.n	8001c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001c24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4919      	ldr	r1, [pc, #100]	; (8001c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c30:	428b      	cmp	r3, r1
 8001c32:	d101      	bne.n	8001c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001c34:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c36:	e001      	b.n	8001c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001c38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c40:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f043 0202 	orr.w	r2, r3, #2
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff fdfa 	bl	8001850 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d136      	bne.n	8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	f003 0320 	and.w	r3, r3, #32
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d031      	beq.n	8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c7c:	e001      	b.n	8001c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001c7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4902      	ldr	r1, [pc, #8]	; (8001c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c8a:	428b      	cmp	r3, r1
 8001c8c:	d106      	bne.n	8001c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001c8e:	4b02      	ldr	r3, [pc, #8]	; (8001c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c90:	e006      	b.n	8001ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001c92:	bf00      	nop
 8001c94:	40003800 	.word	0x40003800
 8001c98:	40003400 	.word	0x40003400
 8001c9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ca0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ca4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cb4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f043 0204 	orr.w	r2, r3, #4
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff fdc0 	bl	8001850 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001cd0:	e000      	b.n	8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001cd2:	bf00      	nop
}
 8001cd4:	bf00      	nop
 8001cd6:	3720      	adds	r7, #32
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	1c99      	adds	r1, r3, #2
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6251      	str	r1, [r2, #36]	; 0x24
 8001d02:	881a      	ldrh	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	3b01      	subs	r3, #1
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d113      	bne.n	8001d4a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d30:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d106      	bne.n	8001d4a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ffc9 	bl	8001cdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	1c99      	adds	r1, r3, #2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6251      	str	r1, [r2, #36]	; 0x24
 8001d66:	8819      	ldrh	r1, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a1d      	ldr	r2, [pc, #116]	; (8001de4 <I2SEx_TxISR_I2SExt+0x90>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d101      	bne.n	8001d76 <I2SEx_TxISR_I2SExt+0x22>
 8001d72:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <I2SEx_TxISR_I2SExt+0x94>)
 8001d74:	e001      	b.n	8001d7a <I2SEx_TxISR_I2SExt+0x26>
 8001d76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d7a:	460a      	mov	r2, r1
 8001d7c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d121      	bne.n	8001dda <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <I2SEx_TxISR_I2SExt+0x90>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d101      	bne.n	8001da4 <I2SEx_TxISR_I2SExt+0x50>
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <I2SEx_TxISR_I2SExt+0x94>)
 8001da2:	e001      	b.n	8001da8 <I2SEx_TxISR_I2SExt+0x54>
 8001da4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	490d      	ldr	r1, [pc, #52]	; (8001de4 <I2SEx_TxISR_I2SExt+0x90>)
 8001db0:	428b      	cmp	r3, r1
 8001db2:	d101      	bne.n	8001db8 <I2SEx_TxISR_I2SExt+0x64>
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <I2SEx_TxISR_I2SExt+0x94>)
 8001db6:	e001      	b.n	8001dbc <I2SEx_TxISR_I2SExt+0x68>
 8001db8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dbc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001dc0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d106      	bne.n	8001dda <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff ff81 	bl	8001cdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40003800 	.word	0x40003800
 8001de8:	40003400 	.word	0x40003400

08001dec <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68d8      	ldr	r0, [r3, #12]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfe:	1c99      	adds	r1, r3, #2
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001e04:	b282      	uxth	r2, r0
 8001e06:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d113      	bne.n	8001e48 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e2e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d106      	bne.n	8001e48 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ff4a 	bl	8001cdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a20      	ldr	r2, [pc, #128]	; (8001ee0 <I2SEx_RxISR_I2SExt+0x90>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d101      	bne.n	8001e66 <I2SEx_RxISR_I2SExt+0x16>
 8001e62:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <I2SEx_RxISR_I2SExt+0x94>)
 8001e64:	e001      	b.n	8001e6a <I2SEx_RxISR_I2SExt+0x1a>
 8001e66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e6a:	68d8      	ldr	r0, [r3, #12]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e70:	1c99      	adds	r1, r3, #2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001e76:	b282      	uxth	r2, r0
 8001e78:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	3b01      	subs	r3, #1
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d121      	bne.n	8001ed6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <I2SEx_RxISR_I2SExt+0x90>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d101      	bne.n	8001ea0 <I2SEx_RxISR_I2SExt+0x50>
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <I2SEx_RxISR_I2SExt+0x94>)
 8001e9e:	e001      	b.n	8001ea4 <I2SEx_RxISR_I2SExt+0x54>
 8001ea0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	490d      	ldr	r1, [pc, #52]	; (8001ee0 <I2SEx_RxISR_I2SExt+0x90>)
 8001eac:	428b      	cmp	r3, r1
 8001eae:	d101      	bne.n	8001eb4 <I2SEx_RxISR_I2SExt+0x64>
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <I2SEx_RxISR_I2SExt+0x94>)
 8001eb2:	e001      	b.n	8001eb8 <I2SEx_RxISR_I2SExt+0x68>
 8001eb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eb8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ebc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d106      	bne.n	8001ed6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ff03 	bl	8001cdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40003800 	.word	0x40003800
 8001ee4:	40003400 	.word	0x40003400

08001ee8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eea:	b08f      	sub	sp, #60	; 0x3c
 8001eec:	af0a      	add	r7, sp, #40	; 0x28
 8001eee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e10f      	b.n	800211a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d106      	bne.n	8001f1a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f005 fecd 	bl	8007cb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d102      	bne.n	8001f34 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f002 f9b4 	bl	80042a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	687e      	ldr	r6, [r7, #4]
 8001f46:	466d      	mov	r5, sp
 8001f48:	f106 0410 	add.w	r4, r6, #16
 8001f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f58:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f5c:	1d33      	adds	r3, r6, #4
 8001f5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f60:	6838      	ldr	r0, [r7, #0]
 8001f62:	f002 f88c 	bl	800407e <USB_CoreInit>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0d0      	b.n	800211a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f002 f9a2 	bl	80042c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	e04a      	b.n	8002020 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	333d      	adds	r3, #61	; 0x3d
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f9e:	7bfa      	ldrb	r2, [r7, #15]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	333c      	adds	r3, #60	; 0x3c
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fb2:	7bfa      	ldrb	r2, [r7, #15]
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	b298      	uxth	r0, r3
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	3344      	adds	r3, #68	; 0x44
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3340      	adds	r3, #64	; 0x40
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	3348      	adds	r3, #72	; 0x48
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	334c      	adds	r3, #76	; 0x4c
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	3354      	adds	r3, #84	; 0x54
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	3301      	adds	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
 8002020:	7bfa      	ldrb	r2, [r7, #15]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	429a      	cmp	r2, r3
 8002028:	d3af      	bcc.n	8001f8a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800202a:	2300      	movs	r3, #0
 800202c:	73fb      	strb	r3, [r7, #15]
 800202e:	e044      	b.n	80020ba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002046:	7bfa      	ldrb	r2, [r7, #15]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002072:	7bfa      	ldrb	r2, [r7, #15]
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002088:	7bfa      	ldrb	r2, [r7, #15]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	3301      	adds	r3, #1
 80020b8:	73fb      	strb	r3, [r7, #15]
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d3b5      	bcc.n	8002030 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	687e      	ldr	r6, [r7, #4]
 80020cc:	466d      	mov	r5, sp
 80020ce:	f106 0410 	add.w	r4, r6, #16
 80020d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020de:	e885 0003 	stmia.w	r5, {r0, r1}
 80020e2:	1d33      	adds	r3, r6, #4
 80020e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e6:	6838      	ldr	r0, [r7, #0]
 80020e8:	f002 f93a 	bl	8004360 <USB_DevInit>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2202      	movs	r2, #2
 80020f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00d      	b.n	800211a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f003 fa89 	bl	800562a <USB_DevDisconnect>

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002122 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b084      	sub	sp, #16
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002136:	2b01      	cmp	r3, #1
 8002138:	d101      	bne.n	800213e <HAL_PCD_Start+0x1c>
 800213a:	2302      	movs	r3, #2
 800213c:	e020      	b.n	8002180 <HAL_PCD_Start+0x5e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214a:	2b01      	cmp	r3, #1
 800214c:	d109      	bne.n	8002162 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002152:	2b01      	cmp	r3, #1
 8002154:	d005      	beq.n	8002162 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f002 f88c 	bl	8004284 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f003 fa39 	bl	80055e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b08d      	sub	sp, #52	; 0x34
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f003 faf7 	bl	8005792 <USB_GetMode>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f040 848a 	bne.w	8002ac0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f003 fa5b 	bl	800566c <USB_ReadInterrupts>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 8480 	beq.w	8002abe <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	0a1b      	lsrs	r3, r3, #8
 80021c8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f003 fa48 	bl	800566c <USB_ReadInterrupts>
 80021dc:	4603      	mov	r3, r0
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d107      	bne.n	80021f6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	695a      	ldr	r2, [r3, #20]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f002 0202 	and.w	r2, r2, #2
 80021f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f003 fa36 	bl	800566c <USB_ReadInterrupts>
 8002200:	4603      	mov	r3, r0
 8002202:	f003 0310 	and.w	r3, r3, #16
 8002206:	2b10      	cmp	r3, #16
 8002208:	d161      	bne.n	80022ce <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699a      	ldr	r2, [r3, #24]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0210 	bic.w	r2, r2, #16
 8002218:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	f003 020f 	and.w	r2, r3, #15
 8002226:	4613      	mov	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	3304      	adds	r3, #4
 8002238:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	0c5b      	lsrs	r3, r3, #17
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	2b02      	cmp	r3, #2
 8002244:	d124      	bne.n	8002290 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d035      	beq.n	80022be <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800225c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002260:	b29b      	uxth	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	6a38      	ldr	r0, [r7, #32]
 8002266:	f003 f86d 	bl	8005344 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002276:	441a      	add	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	6a1a      	ldr	r2, [r3, #32]
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	091b      	lsrs	r3, r3, #4
 8002284:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002288:	441a      	add	r2, r3
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	621a      	str	r2, [r3, #32]
 800228e:	e016      	b.n	80022be <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	0c5b      	lsrs	r3, r3, #17
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	2b06      	cmp	r3, #6
 800229a:	d110      	bne.n	80022be <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022a2:	2208      	movs	r2, #8
 80022a4:	4619      	mov	r1, r3
 80022a6:	6a38      	ldr	r0, [r7, #32]
 80022a8:	f003 f84c 	bl	8005344 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	6a1a      	ldr	r2, [r3, #32]
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	091b      	lsrs	r3, r3, #4
 80022b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022b8:	441a      	add	r2, r3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	699a      	ldr	r2, [r3, #24]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f042 0210 	orr.w	r2, r2, #16
 80022cc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f003 f9ca 	bl	800566c <USB_ReadInterrupts>
 80022d8:	4603      	mov	r3, r0
 80022da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022e2:	f040 80a7 	bne.w	8002434 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f003 f9cf 	bl	8005692 <USB_ReadDevAllOutEpInterrupt>
 80022f4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80022f6:	e099      	b.n	800242c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80022f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 808e 	beq.w	8002420 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	4611      	mov	r1, r2
 800230e:	4618      	mov	r0, r3
 8002310:	f003 f9f3 	bl	80056fa <USB_ReadDevOutEPInterrupt>
 8002314:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00c      	beq.n	800233a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	4413      	add	r3, r2
 8002328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800232c:	461a      	mov	r2, r3
 800232e:	2301      	movs	r3, #1
 8002330:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002332:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 fec3 	bl	80030c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00c      	beq.n	800235e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	015a      	lsls	r2, r3, #5
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	4413      	add	r3, r2
 800234c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002350:	461a      	mov	r2, r3
 8002352:	2308      	movs	r3, #8
 8002354:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002356:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 ff99 	bl	8003290 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	f003 0310 	and.w	r3, r3, #16
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	4413      	add	r3, r2
 8002370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002374:	461a      	mov	r2, r3
 8002376:	2310      	movs	r3, #16
 8002378:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d030      	beq.n	80023e6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238c:	2b80      	cmp	r3, #128	; 0x80
 800238e:	d109      	bne.n	80023a4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	69fa      	ldr	r2, [r7, #28]
 800239a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800239e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023a2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80023a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	3304      	adds	r3, #4
 80023b8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	78db      	ldrb	r3, [r3, #3]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d108      	bne.n	80023d4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2200      	movs	r2, #0
 80023c6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	4619      	mov	r1, r3
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f005 fd84 	bl	8007edc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e0:	461a      	mov	r2, r3
 80023e2:	2302      	movs	r3, #2
 80023e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023fc:	461a      	mov	r2, r3
 80023fe:	2320      	movs	r3, #32
 8002400:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d009      	beq.n	8002420 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	4413      	add	r3, r2
 8002414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002418:	461a      	mov	r2, r3
 800241a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800241e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	3301      	adds	r3, #1
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002428:	085b      	lsrs	r3, r3, #1
 800242a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800242c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242e:	2b00      	cmp	r3, #0
 8002430:	f47f af62 	bne.w	80022f8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f003 f917 	bl	800566c <USB_ReadInterrupts>
 800243e:	4603      	mov	r3, r0
 8002440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002444:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002448:	f040 80db 	bne.w	8002602 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f003 f938 	bl	80056c6 <USB_ReadDevAllInEpInterrupt>
 8002456:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800245c:	e0cd      	b.n	80025fa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80c2 	beq.w	80025ee <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f003 f95e 	bl	8005736 <USB_ReadDevInEPInterrupt>
 800247a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d057      	beq.n	8002536 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	2201      	movs	r2, #1
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800249a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	43db      	mvns	r3, r3
 80024a0:	69f9      	ldr	r1, [r7, #28]
 80024a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024a6:	4013      	ands	r3, r2
 80024a8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b6:	461a      	mov	r2, r3
 80024b8:	2301      	movs	r3, #1
 80024ba:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d132      	bne.n	800252a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c8:	4613      	mov	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	334c      	adds	r3, #76	; 0x4c
 80024d4:	6819      	ldr	r1, [r3, #0]
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024da:	4613      	mov	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4403      	add	r3, r0
 80024e4:	3348      	adds	r3, #72	; 0x48
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4419      	add	r1, r3
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4403      	add	r3, r0
 80024f8:	334c      	adds	r3, #76	; 0x4c
 80024fa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d113      	bne.n	800252a <HAL_PCD_IRQHandler+0x3a2>
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002506:	4613      	mov	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	3354      	adds	r3, #84	; 0x54
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d108      	bne.n	800252a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002522:	461a      	mov	r2, r3
 8002524:	2101      	movs	r1, #1
 8002526:	f003 f965 	bl	80057f4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	b2db      	uxtb	r3, r3
 800252e:	4619      	mov	r1, r3
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f005 fc4e 	bl	8007dd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	4413      	add	r3, r2
 8002548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800254c:	461a      	mov	r2, r3
 800254e:	2308      	movs	r3, #8
 8002550:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	4413      	add	r3, r2
 8002564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002568:	461a      	mov	r2, r3
 800256a:	2310      	movs	r3, #16
 800256c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	4413      	add	r3, r2
 8002580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002584:	461a      	mov	r2, r3
 8002586:	2340      	movs	r3, #64	; 0x40
 8002588:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d023      	beq.n	80025dc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002594:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002596:	6a38      	ldr	r0, [r7, #32]
 8002598:	f002 f846 	bl	8004628 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800259c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4413      	add	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	3338      	adds	r3, #56	; 0x38
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	4413      	add	r3, r2
 80025ac:	3304      	adds	r3, #4
 80025ae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	78db      	ldrb	r3, [r3, #3]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d108      	bne.n	80025ca <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	2200      	movs	r2, #0
 80025bc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	4619      	mov	r1, r3
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f005 fc9b 	bl	8007f00 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025d6:	461a      	mov	r2, r3
 80025d8:	2302      	movs	r3, #2
 80025da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80025e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 fcdb 	bl	8002fa4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	3301      	adds	r3, #1
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f6:	085b      	lsrs	r3, r3, #1
 80025f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f47f af2e 	bne.w	800245e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f003 f830 	bl	800566c <USB_ReadInterrupts>
 800260c:	4603      	mov	r3, r0
 800260e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002612:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002616:	d122      	bne.n	800265e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002626:	f023 0301 	bic.w	r3, r3, #1
 800262a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002632:	2b01      	cmp	r3, #1
 8002634:	d108      	bne.n	8002648 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800263e:	2100      	movs	r1, #0
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 fec3 	bl	80033cc <HAL_PCDEx_LPM_Callback>
 8002646:	e002      	b.n	800264e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f005 fc39 	bl	8007ec0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800265c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f003 f802 	bl	800566c <USB_ReadInterrupts>
 8002668:	4603      	mov	r3, r0
 800266a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800266e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002672:	d112      	bne.n	800269a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d102      	bne.n	800268a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f005 fbf5 	bl	8007e74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002698:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f002 ffe4 	bl	800566c <USB_ReadInterrupts>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ae:	f040 80b7 	bne.w	8002820 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026c0:	f023 0301 	bic.w	r3, r3, #1
 80026c4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2110      	movs	r1, #16
 80026cc:	4618      	mov	r0, r3
 80026ce:	f001 ffab 	bl	8004628 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d2:	2300      	movs	r3, #0
 80026d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026d6:	e046      	b.n	8002766 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80026d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026e4:	461a      	mov	r2, r3
 80026e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026ea:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80026ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026fc:	0151      	lsls	r1, r2, #5
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	440a      	add	r2, r1
 8002702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002706:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800270a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800270c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	4413      	add	r3, r2
 8002714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002718:	461a      	mov	r2, r3
 800271a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800271e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	4413      	add	r3, r2
 8002728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002730:	0151      	lsls	r1, r2, #5
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	440a      	add	r2, r1
 8002736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800273a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800273e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	4413      	add	r3, r2
 8002748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002750:	0151      	lsls	r1, r2, #5
 8002752:	69fa      	ldr	r2, [r7, #28]
 8002754:	440a      	add	r2, r1
 8002756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800275a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800275e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002762:	3301      	adds	r3, #1
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800276c:	429a      	cmp	r2, r3
 800276e:	d3b3      	bcc.n	80026d8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	69fa      	ldr	r2, [r7, #28]
 800277a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800277e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002782:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	2b00      	cmp	r3, #0
 800278a:	d016      	beq.n	80027ba <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002796:	69fa      	ldr	r2, [r7, #28]
 8002798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800279c:	f043 030b 	orr.w	r3, r3, #11
 80027a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ac:	69fa      	ldr	r2, [r7, #28]
 80027ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027b2:	f043 030b 	orr.w	r3, r3, #11
 80027b6:	6453      	str	r3, [r2, #68]	; 0x44
 80027b8:	e015      	b.n	80027e6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	69fa      	ldr	r2, [r7, #28]
 80027c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027cc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80027d0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027e0:	f043 030b 	orr.w	r3, r3, #11
 80027e4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027f4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80027f8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800280a:	461a      	mov	r2, r3
 800280c:	f002 fff2 	bl	80057f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800281e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f002 ff21 	bl	800566c <USB_ReadInterrupts>
 800282a:	4603      	mov	r3, r0
 800282c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002830:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002834:	d124      	bne.n	8002880 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f002 ffb7 	bl	80057ae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f001 ff6c 	bl	8004722 <USB_GetDevSpeed>
 800284a:	4603      	mov	r3, r0
 800284c:	461a      	mov	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681c      	ldr	r4, [r3, #0]
 8002856:	f001 fa29 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 800285a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002860:	b2db      	uxtb	r3, r3
 8002862:	461a      	mov	r2, r3
 8002864:	4620      	mov	r0, r4
 8002866:	f001 fc6b 	bl	8004140 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f005 fad9 	bl	8007e22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695a      	ldr	r2, [r3, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800287e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f002 fef1 	bl	800566c <USB_ReadInterrupts>
 800288a:	4603      	mov	r3, r0
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b08      	cmp	r3, #8
 8002892:	d10a      	bne.n	80028aa <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f005 fab6 	bl	8007e06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f002 0208 	and.w	r2, r2, #8
 80028a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f002 fedc 	bl	800566c <USB_ReadInterrupts>
 80028b4:	4603      	mov	r3, r0
 80028b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ba:	2b80      	cmp	r3, #128	; 0x80
 80028bc:	d122      	bne.n	8002904 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028ca:	2301      	movs	r3, #1
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
 80028ce:	e014      	b.n	80028fa <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d105      	bne.n	80028f4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	4619      	mov	r1, r3
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 fb27 	bl	8002f42 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	3301      	adds	r3, #1
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002900:	429a      	cmp	r2, r3
 8002902:	d3e5      	bcc.n	80028d0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f002 feaf 	bl	800566c <USB_ReadInterrupts>
 800290e:	4603      	mov	r3, r0
 8002910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002914:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002918:	d13b      	bne.n	8002992 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800291a:	2301      	movs	r3, #1
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
 800291e:	e02b      	b.n	8002978 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	4413      	add	r3, r2
 8002928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4413      	add	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	3340      	adds	r3, #64	; 0x40
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d115      	bne.n	8002972 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002946:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002948:	2b00      	cmp	r3, #0
 800294a:	da12      	bge.n	8002972 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	333f      	adds	r3, #63	; 0x3f
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002968:	b2db      	uxtb	r3, r3
 800296a:	4619      	mov	r1, r3
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 fae8 	bl	8002f42 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	3301      	adds	r3, #1
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297e:	429a      	cmp	r2, r3
 8002980:	d3ce      	bcc.n	8002920 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695a      	ldr	r2, [r3, #20]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002990:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f002 fe68 	bl	800566c <USB_ReadInterrupts>
 800299c:	4603      	mov	r3, r0
 800299e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029a6:	d155      	bne.n	8002a54 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029a8:	2301      	movs	r3, #1
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
 80029ac:	e045      	b.n	8002a3a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d12e      	bne.n	8002a34 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029d6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029d8:	2b00      	cmp	r3, #0
 80029da:	da2b      	bge.n	8002a34 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80029e8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d121      	bne.n	8002a34 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a02:	2201      	movs	r2, #1
 8002a04:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10a      	bne.n	8002a34 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a30:	6053      	str	r3, [r2, #4]
            break;
 8002a32:	e007      	b.n	8002a44 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	3301      	adds	r3, #1
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d3b4      	bcc.n	80029ae <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695a      	ldr	r2, [r3, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f002 fe07 	bl	800566c <USB_ReadInterrupts>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a68:	d10a      	bne.n	8002a80 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f005 fa5a 	bl	8007f24 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f002 fdf1 	bl	800566c <USB_ReadInterrupts>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d115      	bne.n	8002ac0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f005 fa4a 	bl	8007f40 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6859      	ldr	r1, [r3, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	e000      	b.n	8002ac0 <HAL_PCD_IRQHandler+0x938>
      return;
 8002abe:	bf00      	nop
    }
  }
}
 8002ac0:	3734      	adds	r7, #52	; 0x34
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd90      	pop	{r4, r7, pc}

08002ac6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_PCD_SetAddress+0x1a>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e013      	b.n	8002b08 <HAL_PCD_SetAddress+0x42>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	78fa      	ldrb	r2, [r7, #3]
 8002aec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	4611      	mov	r1, r2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f002 fd4f 	bl	800559c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	4608      	mov	r0, r1
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4603      	mov	r3, r0
 8002b20:	70fb      	strb	r3, [r7, #3]
 8002b22:	460b      	mov	r3, r1
 8002b24:	803b      	strh	r3, [r7, #0]
 8002b26:	4613      	mov	r3, r2
 8002b28:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	da0f      	bge.n	8002b56 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b36:	78fb      	ldrb	r3, [r7, #3]
 8002b38:	f003 020f 	and.w	r2, r3, #15
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	3338      	adds	r3, #56	; 0x38
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	4413      	add	r3, r2
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	705a      	strb	r2, [r3, #1]
 8002b54:	e00f      	b.n	8002b76 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	f003 020f 	and.w	r2, r3, #15
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b76:	78fb      	ldrb	r3, [r7, #3]
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b82:	883a      	ldrh	r2, [r7, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	78ba      	ldrb	r2, [r7, #2]
 8002b8c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	785b      	ldrb	r3, [r3, #1]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d004      	beq.n	8002ba0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ba0:	78bb      	ldrb	r3, [r7, #2]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d102      	bne.n	8002bac <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_PCD_EP_Open+0xaa>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e00e      	b.n	8002bd8 <HAL_PCD_EP_Open+0xc8>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68f9      	ldr	r1, [r7, #12]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f001 fdcf 	bl	800476c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002bd6:	7afb      	ldrb	r3, [r7, #11]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	da0f      	bge.n	8002c14 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	f003 020f 	and.w	r2, r3, #15
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4413      	add	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	3338      	adds	r3, #56	; 0x38
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	4413      	add	r3, r2
 8002c08:	3304      	adds	r3, #4
 8002c0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	705a      	strb	r2, [r3, #1]
 8002c12:	e00f      	b.n	8002c34 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	f003 020f 	and.w	r2, r3, #15
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4413      	add	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	4413      	add	r3, r2
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_PCD_EP_Close+0x6e>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e00e      	b.n	8002c6c <HAL_PCD_EP_Close+0x8c>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68f9      	ldr	r1, [r7, #12]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f001 fe0d 	bl	800487c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	607a      	str	r2, [r7, #4]
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	460b      	mov	r3, r1
 8002c82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c84:	7afb      	ldrb	r3, [r7, #11]
 8002c86:	f003 020f 	and.w	r2, r3, #15
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4413      	add	r3, r2
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2200      	movs	r2, #0
 8002cae:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cb6:	7afb      	ldrb	r3, [r7, #11]
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d102      	bne.n	8002cd0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cd0:	7afb      	ldrb	r3, [r7, #11]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d109      	bne.n	8002cee <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6818      	ldr	r0, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	6979      	ldr	r1, [r7, #20]
 8002ce8:	f002 f8ec 	bl	8004ec4 <USB_EP0StartXfer>
 8002cec:	e008      	b.n	8002d00 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	6979      	ldr	r1, [r7, #20]
 8002cfc:	f001 fe9a 	bl	8004a34 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	460b      	mov	r3, r1
 8002d14:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	f003 020f 	and.w	r2, r3, #15
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002d2c:	681b      	ldr	r3, [r3, #0]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b086      	sub	sp, #24
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
 8002d46:	460b      	mov	r3, r1
 8002d48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d4a:	7afb      	ldrb	r3, [r7, #11]
 8002d4c:	f003 020f 	and.w	r2, r3, #15
 8002d50:	4613      	mov	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	3338      	adds	r3, #56	; 0x38
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3304      	adds	r3, #4
 8002d60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2200      	movs	r2, #0
 8002d72:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2201      	movs	r2, #1
 8002d78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d7a:	7afb      	ldrb	r3, [r7, #11]
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d102      	bne.n	8002d94 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d94:	7afb      	ldrb	r3, [r7, #11]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	461a      	mov	r2, r3
 8002daa:	6979      	ldr	r1, [r7, #20]
 8002dac:	f002 f88a 	bl	8004ec4 <USB_EP0StartXfer>
 8002db0:	e008      	b.n	8002dc4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	6979      	ldr	r1, [r7, #20]
 8002dc0:	f001 fe38 	bl	8004a34 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	f003 020f 	and.w	r2, r3, #15
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d901      	bls.n	8002dec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e050      	b.n	8002e8e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	da0f      	bge.n	8002e14 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	f003 020f 	and.w	r2, r3, #15
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	3338      	adds	r3, #56	; 0x38
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	4413      	add	r3, r2
 8002e08:	3304      	adds	r3, #4
 8002e0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	705a      	strb	r2, [r3, #1]
 8002e12:	e00d      	b.n	8002e30 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	3304      	adds	r3, #4
 8002e28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2201      	movs	r2, #1
 8002e34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_PCD_EP_SetStall+0x82>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e01e      	b.n	8002e8e <HAL_PCD_EP_SetStall+0xc0>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68f9      	ldr	r1, [r7, #12]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f002 fac8 	bl	80053f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10a      	bne.n	8002e84 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	b2d9      	uxtb	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f002 fcb8 	bl	80057f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	f003 020f 	and.w	r2, r3, #15
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d901      	bls.n	8002eb4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e042      	b.n	8002f3a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002eb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	da0f      	bge.n	8002edc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	f003 020f 	and.w	r2, r3, #15
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	3338      	adds	r3, #56	; 0x38
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	4413      	add	r3, r2
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	705a      	strb	r2, [r3, #1]
 8002eda:	e00f      	b.n	8002efc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	f003 020f 	and.w	r2, r3, #15
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_PCD_EP_ClrStall+0x86>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e00e      	b.n	8002f3a <HAL_PCD_EP_ClrStall+0xa4>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68f9      	ldr	r1, [r7, #12]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f002 fad0 	bl	80054d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b084      	sub	sp, #16
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	da0c      	bge.n	8002f70 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	f003 020f 	and.w	r2, r3, #15
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	3338      	adds	r3, #56	; 0x38
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	4413      	add	r3, r2
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	e00c      	b.n	8002f8a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	f003 020f 	and.w	r2, r3, #15
 8002f76:	4613      	mov	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	4413      	add	r3, r2
 8002f86:	3304      	adds	r3, #4
 8002f88:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68f9      	ldr	r1, [r7, #12]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f002 f8ef 	bl	8005174 <USB_EPStopXfer>
 8002f96:	4603      	mov	r3, r0
 8002f98:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f9a:	7afb      	ldrb	r3, [r7, #11]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08a      	sub	sp, #40	; 0x28
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	3338      	adds	r3, #56	; 0x38
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3304      	adds	r3, #4
 8002fca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a1a      	ldr	r2, [r3, #32]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d901      	bls.n	8002fdc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e06c      	b.n	80030b6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	699a      	ldr	r2, [r3, #24]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	69fa      	ldr	r2, [r7, #28]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d902      	bls.n	8002ff8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	3303      	adds	r3, #3
 8002ffc:	089b      	lsrs	r3, r3, #2
 8002ffe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003000:	e02b      	b.n	800305a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	429a      	cmp	r2, r3
 8003016:	d902      	bls.n	800301e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3303      	adds	r3, #3
 8003022:	089b      	lsrs	r3, r3, #2
 8003024:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6919      	ldr	r1, [r3, #16]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	b2da      	uxtb	r2, r3
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003036:	b2db      	uxtb	r3, r3
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	4603      	mov	r3, r0
 800303c:	6978      	ldr	r0, [r7, #20]
 800303e:	f002 f943 	bl	80052c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	441a      	add	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a1a      	ldr	r2, [r3, #32]
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	441a      	add	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4413      	add	r3, r2
 8003062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	429a      	cmp	r2, r3
 800306e:	d809      	bhi.n	8003084 <PCD_WriteEmptyTxFifo+0xe0>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a1a      	ldr	r2, [r3, #32]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003078:	429a      	cmp	r2, r3
 800307a:	d203      	bcs.n	8003084 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1be      	bne.n	8003002 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	699a      	ldr	r2, [r3, #24]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	429a      	cmp	r2, r3
 800308e:	d811      	bhi.n	80030b4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	2201      	movs	r2, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	43db      	mvns	r3, r3
 80030aa:	6939      	ldr	r1, [r7, #16]
 80030ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030b0:	4013      	ands	r3, r2
 80030b2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3720      	adds	r7, #32
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	333c      	adds	r3, #60	; 0x3c
 80030d8:	3304      	adds	r3, #4
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	015a      	lsls	r2, r3, #5
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d17b      	bne.n	80031ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d015      	beq.n	800312c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	4a61      	ldr	r2, [pc, #388]	; (8003288 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	f240 80b9 	bls.w	800327c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80b3 	beq.w	800327c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	4413      	add	r3, r2
 800311e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003122:	461a      	mov	r2, r3
 8003124:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003128:	6093      	str	r3, [r2, #8]
 800312a:	e0a7      	b.n	800327c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	4413      	add	r3, r2
 800313e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003142:	461a      	mov	r2, r3
 8003144:	2320      	movs	r3, #32
 8003146:	6093      	str	r3, [r2, #8]
 8003148:	e098      	b.n	800327c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003150:	2b00      	cmp	r3, #0
 8003152:	f040 8093 	bne.w	800327c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	4a4b      	ldr	r2, [pc, #300]	; (8003288 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d90f      	bls.n	800317e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	4413      	add	r3, r2
 8003170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003174:	461a      	mov	r2, r3
 8003176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800317a:	6093      	str	r3, [r2, #8]
 800317c:	e07e      	b.n	800327c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	4613      	mov	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	4413      	add	r3, r2
 8003190:	3304      	adds	r3, #4
 8003192:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	69da      	ldr	r2, [r3, #28]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	0159      	lsls	r1, r3, #5
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	440b      	add	r3, r1
 80031a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031aa:	1ad2      	subs	r2, r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d114      	bne.n	80031e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031c8:	461a      	mov	r2, r3
 80031ca:	2101      	movs	r1, #1
 80031cc:	f002 fb12 	bl	80057f4 <USB_EP0_OutStart>
 80031d0:	e006      	b.n	80031e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	441a      	add	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	4619      	mov	r1, r3
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f004 fdd8 	bl	8007d9c <HAL_PCD_DataOutStageCallback>
 80031ec:	e046      	b.n	800327c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	4a26      	ldr	r2, [pc, #152]	; (800328c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d124      	bne.n	8003240 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	4413      	add	r3, r2
 8003208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320c:	461a      	mov	r2, r3
 800320e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003212:	6093      	str	r3, [r2, #8]
 8003214:	e032      	b.n	800327c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	4413      	add	r3, r2
 8003228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322c:	461a      	mov	r2, r3
 800322e:	2320      	movs	r3, #32
 8003230:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	4619      	mov	r1, r3
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f004 fdaf 	bl	8007d9c <HAL_PCD_DataOutStageCallback>
 800323e:	e01d      	b.n	800327c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d114      	bne.n	8003270 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	4613      	mov	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d108      	bne.n	8003270 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6818      	ldr	r0, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003268:	461a      	mov	r2, r3
 800326a:	2100      	movs	r1, #0
 800326c:	f002 fac2 	bl	80057f4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	4619      	mov	r1, r3
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f004 fd90 	bl	8007d9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3720      	adds	r7, #32
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	4f54300a 	.word	0x4f54300a
 800328c:	4f54310a 	.word	0x4f54310a

08003290 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	333c      	adds	r3, #60	; 0x3c
 80032a8:	3304      	adds	r3, #4
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4a15      	ldr	r2, [pc, #84]	; (8003318 <PCD_EP_OutSetupPacket_int+0x88>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d90e      	bls.n	80032e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d009      	beq.n	80032e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032dc:	461a      	mov	r2, r3
 80032de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f004 fd47 	bl	8007d78 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4a0a      	ldr	r2, [pc, #40]	; (8003318 <PCD_EP_OutSetupPacket_int+0x88>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d90c      	bls.n	800330c <PCD_EP_OutSetupPacket_int+0x7c>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d108      	bne.n	800330c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003304:	461a      	mov	r2, r3
 8003306:	2101      	movs	r1, #1
 8003308:	f002 fa74 	bl	80057f4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	4f54300a 	.word	0x4f54300a

0800331c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	70fb      	strb	r3, [r7, #3]
 8003328:	4613      	mov	r3, r2
 800332a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d107      	bne.n	800334a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800333a:	883b      	ldrh	r3, [r7, #0]
 800333c:	0419      	lsls	r1, r3, #16
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	430a      	orrs	r2, r1
 8003346:	629a      	str	r2, [r3, #40]	; 0x28
 8003348:	e028      	b.n	800339c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	0c1b      	lsrs	r3, r3, #16
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	4413      	add	r3, r2
 8003356:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003358:	2300      	movs	r3, #0
 800335a:	73fb      	strb	r3, [r7, #15]
 800335c:	e00d      	b.n	800337a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	7bfb      	ldrb	r3, [r7, #15]
 8003364:	3340      	adds	r3, #64	; 0x40
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	0c1b      	lsrs	r3, r3, #16
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	4413      	add	r3, r2
 8003372:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003374:	7bfb      	ldrb	r3, [r7, #15]
 8003376:	3301      	adds	r3, #1
 8003378:	73fb      	strb	r3, [r7, #15]
 800337a:	7bfa      	ldrb	r2, [r7, #15]
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	3b01      	subs	r3, #1
 8003380:	429a      	cmp	r2, r3
 8003382:	d3ec      	bcc.n	800335e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003384:	883b      	ldrh	r3, [r7, #0]
 8003386:	0418      	lsls	r0, r3, #16
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6819      	ldr	r1, [r3, #0]
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	3b01      	subs	r3, #1
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	4302      	orrs	r2, r0
 8003394:	3340      	adds	r3, #64	; 0x40
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	460b      	mov	r3, r1
 80033b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	887a      	ldrh	r2, [r7, #2]
 80033bc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e267      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d075      	beq.n	80034ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003402:	4b88      	ldr	r3, [pc, #544]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	2b04      	cmp	r3, #4
 800340c:	d00c      	beq.n	8003428 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800340e:	4b85      	ldr	r3, [pc, #532]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003416:	2b08      	cmp	r3, #8
 8003418:	d112      	bne.n	8003440 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800341a:	4b82      	ldr	r3, [pc, #520]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003426:	d10b      	bne.n	8003440 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003428:	4b7e      	ldr	r3, [pc, #504]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d05b      	beq.n	80034ec <HAL_RCC_OscConfig+0x108>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d157      	bne.n	80034ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e242      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003448:	d106      	bne.n	8003458 <HAL_RCC_OscConfig+0x74>
 800344a:	4b76      	ldr	r3, [pc, #472]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a75      	ldr	r2, [pc, #468]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	e01d      	b.n	8003494 <HAL_RCC_OscConfig+0xb0>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003460:	d10c      	bne.n	800347c <HAL_RCC_OscConfig+0x98>
 8003462:	4b70      	ldr	r3, [pc, #448]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a6f      	ldr	r2, [pc, #444]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	4b6d      	ldr	r3, [pc, #436]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a6c      	ldr	r2, [pc, #432]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	e00b      	b.n	8003494 <HAL_RCC_OscConfig+0xb0>
 800347c:	4b69      	ldr	r3, [pc, #420]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a68      	ldr	r2, [pc, #416]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	4b66      	ldr	r3, [pc, #408]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a65      	ldr	r2, [pc, #404]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 800348e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d013      	beq.n	80034c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7fd fc48 	bl	8000d30 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a4:	f7fd fc44 	bl	8000d30 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	; 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e207      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b6:	4b5b      	ldr	r3, [pc, #364]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0xc0>
 80034c2:	e014      	b.n	80034ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7fd fc34 	bl	8000d30 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034cc:	f7fd fc30 	bl	8000d30 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	; 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e1f3      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034de:	4b51      	ldr	r3, [pc, #324]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0xe8>
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d063      	beq.n	80035c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034fa:	4b4a      	ldr	r3, [pc, #296]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00b      	beq.n	800351e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003506:	4b47      	ldr	r3, [pc, #284]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800350e:	2b08      	cmp	r3, #8
 8003510:	d11c      	bne.n	800354c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003512:	4b44      	ldr	r3, [pc, #272]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d116      	bne.n	800354c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351e:	4b41      	ldr	r3, [pc, #260]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d005      	beq.n	8003536 <HAL_RCC_OscConfig+0x152>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d001      	beq.n	8003536 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e1c7      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003536:	4b3b      	ldr	r3, [pc, #236]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4937      	ldr	r1, [pc, #220]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003546:	4313      	orrs	r3, r2
 8003548:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354a:	e03a      	b.n	80035c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d020      	beq.n	8003596 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003554:	4b34      	ldr	r3, [pc, #208]	; (8003628 <HAL_RCC_OscConfig+0x244>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355a:	f7fd fbe9 	bl	8000d30 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003562:	f7fd fbe5 	bl	8000d30 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e1a8      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003574:	4b2b      	ldr	r3, [pc, #172]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003580:	4b28      	ldr	r3, [pc, #160]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	4925      	ldr	r1, [pc, #148]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003590:	4313      	orrs	r3, r2
 8003592:	600b      	str	r3, [r1, #0]
 8003594:	e015      	b.n	80035c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003596:	4b24      	ldr	r3, [pc, #144]	; (8003628 <HAL_RCC_OscConfig+0x244>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fd fbc8 	bl	8000d30 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a4:	f7fd fbc4 	bl	8000d30 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e187      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b6:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d036      	beq.n	800363c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d016      	beq.n	8003604 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d6:	4b15      	ldr	r3, [pc, #84]	; (800362c <HAL_RCC_OscConfig+0x248>)
 80035d8:	2201      	movs	r2, #1
 80035da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035dc:	f7fd fba8 	bl	8000d30 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e4:	f7fd fba4 	bl	8000d30 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e167      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f6:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 80035f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0x200>
 8003602:	e01b      	b.n	800363c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <HAL_RCC_OscConfig+0x248>)
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800360a:	f7fd fb91 	bl	8000d30 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003610:	e00e      	b.n	8003630 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003612:	f7fd fb8d 	bl	8000d30 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d907      	bls.n	8003630 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e150      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
 8003624:	40023800 	.word	0x40023800
 8003628:	42470000 	.word	0x42470000
 800362c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003630:	4b88      	ldr	r3, [pc, #544]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1ea      	bne.n	8003612 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8097 	beq.w	8003778 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364a:	2300      	movs	r3, #0
 800364c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800364e:	4b81      	ldr	r3, [pc, #516]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10f      	bne.n	800367a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800365a:	2300      	movs	r3, #0
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	4b7d      	ldr	r3, [pc, #500]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	4a7c      	ldr	r2, [pc, #496]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003668:	6413      	str	r3, [r2, #64]	; 0x40
 800366a:	4b7a      	ldr	r3, [pc, #488]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003676:	2301      	movs	r3, #1
 8003678:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367a:	4b77      	ldr	r3, [pc, #476]	; (8003858 <HAL_RCC_OscConfig+0x474>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003682:	2b00      	cmp	r3, #0
 8003684:	d118      	bne.n	80036b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003686:	4b74      	ldr	r3, [pc, #464]	; (8003858 <HAL_RCC_OscConfig+0x474>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a73      	ldr	r2, [pc, #460]	; (8003858 <HAL_RCC_OscConfig+0x474>)
 800368c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003692:	f7fd fb4d 	bl	8000d30 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369a:	f7fd fb49 	bl	8000d30 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e10c      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ac:	4b6a      	ldr	r3, [pc, #424]	; (8003858 <HAL_RCC_OscConfig+0x474>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f0      	beq.n	800369a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d106      	bne.n	80036ce <HAL_RCC_OscConfig+0x2ea>
 80036c0:	4b64      	ldr	r3, [pc, #400]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	4a63      	ldr	r2, [pc, #396]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	6713      	str	r3, [r2, #112]	; 0x70
 80036cc:	e01c      	b.n	8003708 <HAL_RCC_OscConfig+0x324>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b05      	cmp	r3, #5
 80036d4:	d10c      	bne.n	80036f0 <HAL_RCC_OscConfig+0x30c>
 80036d6:	4b5f      	ldr	r3, [pc, #380]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	4a5e      	ldr	r2, [pc, #376]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036dc:	f043 0304 	orr.w	r3, r3, #4
 80036e0:	6713      	str	r3, [r2, #112]	; 0x70
 80036e2:	4b5c      	ldr	r3, [pc, #368]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	4a5b      	ldr	r2, [pc, #364]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	6713      	str	r3, [r2, #112]	; 0x70
 80036ee:	e00b      	b.n	8003708 <HAL_RCC_OscConfig+0x324>
 80036f0:	4b58      	ldr	r3, [pc, #352]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f4:	4a57      	ldr	r2, [pc, #348]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036f6:	f023 0301 	bic.w	r3, r3, #1
 80036fa:	6713      	str	r3, [r2, #112]	; 0x70
 80036fc:	4b55      	ldr	r3, [pc, #340]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003700:	4a54      	ldr	r2, [pc, #336]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003702:	f023 0304 	bic.w	r3, r3, #4
 8003706:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d015      	beq.n	800373c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003710:	f7fd fb0e 	bl	8000d30 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003716:	e00a      	b.n	800372e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003718:	f7fd fb0a 	bl	8000d30 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	f241 3288 	movw	r2, #5000	; 0x1388
 8003726:	4293      	cmp	r3, r2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e0cb      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372e:	4b49      	ldr	r3, [pc, #292]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0ee      	beq.n	8003718 <HAL_RCC_OscConfig+0x334>
 800373a:	e014      	b.n	8003766 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373c:	f7fd faf8 	bl	8000d30 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003742:	e00a      	b.n	800375a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003744:	f7fd faf4 	bl	8000d30 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e0b5      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800375a:	4b3e      	ldr	r3, [pc, #248]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1ee      	bne.n	8003744 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003766:	7dfb      	ldrb	r3, [r7, #23]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d105      	bne.n	8003778 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376c:	4b39      	ldr	r3, [pc, #228]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	4a38      	ldr	r2, [pc, #224]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003776:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80a1 	beq.w	80038c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003782:	4b34      	ldr	r3, [pc, #208]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b08      	cmp	r3, #8
 800378c:	d05c      	beq.n	8003848 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d141      	bne.n	800381a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003796:	4b31      	ldr	r3, [pc, #196]	; (800385c <HAL_RCC_OscConfig+0x478>)
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379c:	f7fd fac8 	bl	8000d30 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a4:	f7fd fac4 	bl	8000d30 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e087      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b6:	4b27      	ldr	r3, [pc, #156]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69da      	ldr	r2, [r3, #28]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	019b      	lsls	r3, r3, #6
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d8:	085b      	lsrs	r3, r3, #1
 80037da:	3b01      	subs	r3, #1
 80037dc:	041b      	lsls	r3, r3, #16
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	061b      	lsls	r3, r3, #24
 80037e6:	491b      	ldr	r1, [pc, #108]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037ec:	4b1b      	ldr	r3, [pc, #108]	; (800385c <HAL_RCC_OscConfig+0x478>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f2:	f7fd fa9d 	bl	8000d30 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037fa:	f7fd fa99 	bl	8000d30 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e05c      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800380c:	4b11      	ldr	r3, [pc, #68]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x416>
 8003818:	e054      	b.n	80038c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381a:	4b10      	ldr	r3, [pc, #64]	; (800385c <HAL_RCC_OscConfig+0x478>)
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7fd fa86 	bl	8000d30 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003828:	f7fd fa82 	bl	8000d30 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e045      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383a:	4b06      	ldr	r3, [pc, #24]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0x444>
 8003846:	e03d      	b.n	80038c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d107      	bne.n	8003860 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e038      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
 8003854:	40023800 	.word	0x40023800
 8003858:	40007000 	.word	0x40007000
 800385c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003860:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <HAL_RCC_OscConfig+0x4ec>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d028      	beq.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003878:	429a      	cmp	r2, r3
 800387a:	d121      	bne.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003886:	429a      	cmp	r2, r3
 8003888:	d11a      	bne.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003890:	4013      	ands	r3, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003896:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003898:	4293      	cmp	r3, r2
 800389a:	d111      	bne.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a6:	085b      	lsrs	r3, r3, #1
 80038a8:	3b01      	subs	r3, #1
 80038aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d107      	bne.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e000      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40023800 	.word	0x40023800

080038d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0cc      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038e8:	4b68      	ldr	r3, [pc, #416]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d90c      	bls.n	8003910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f6:	4b65      	ldr	r3, [pc, #404]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fe:	4b63      	ldr	r3, [pc, #396]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0b8      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d020      	beq.n	800395e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003928:	4b59      	ldr	r3, [pc, #356]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	4a58      	ldr	r2, [pc, #352]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003932:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003940:	4b53      	ldr	r3, [pc, #332]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a52      	ldr	r2, [pc, #328]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800394a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800394c:	4b50      	ldr	r3, [pc, #320]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	494d      	ldr	r1, [pc, #308]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d044      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d107      	bne.n	8003982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003972:	4b47      	ldr	r3, [pc, #284]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d119      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e07f      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d003      	beq.n	8003992 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800398e:	2b03      	cmp	r3, #3
 8003990:	d107      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003992:	4b3f      	ldr	r3, [pc, #252]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e06f      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a2:	4b3b      	ldr	r3, [pc, #236]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e067      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b2:	4b37      	ldr	r3, [pc, #220]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f023 0203 	bic.w	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4934      	ldr	r1, [pc, #208]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c4:	f7fd f9b4 	bl	8000d30 <HAL_GetTick>
 80039c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ca:	e00a      	b.n	80039e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039cc:	f7fd f9b0 	bl	8000d30 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039da:	4293      	cmp	r3, r2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e04f      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e2:	4b2b      	ldr	r3, [pc, #172]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 020c 	and.w	r2, r3, #12
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d1eb      	bne.n	80039cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039f4:	4b25      	ldr	r3, [pc, #148]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d20c      	bcs.n	8003a1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a02:	4b22      	ldr	r3, [pc, #136]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0a:	4b20      	ldr	r3, [pc, #128]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e032      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a28:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4916      	ldr	r1, [pc, #88]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a46:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	490e      	ldr	r1, [pc, #56]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a5a:	f000 f821 	bl	8003aa0 <HAL_RCC_GetSysClockFreq>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	091b      	lsrs	r3, r3, #4
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	490a      	ldr	r1, [pc, #40]	; (8003a94 <HAL_RCC_ClockConfig+0x1c0>)
 8003a6c:	5ccb      	ldrb	r3, [r1, r3]
 8003a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a72:	4a09      	ldr	r2, [pc, #36]	; (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a76:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fd f914 	bl	8000ca8 <HAL_InitTick>

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40023c00 	.word	0x40023c00
 8003a90:	40023800 	.word	0x40023800
 8003a94:	080083c0 	.word	0x080083c0
 8003a98:	20000000 	.word	0x20000000
 8003a9c:	20000004 	.word	0x20000004

08003aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa4:	b094      	sub	sp, #80	; 0x50
 8003aa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8003aac:	2300      	movs	r3, #0
 8003aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ab8:	4b79      	ldr	r3, [pc, #484]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 030c 	and.w	r3, r3, #12
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d00d      	beq.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	f200 80e1 	bhi.w	8003c8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d003      	beq.n	8003ada <HAL_RCC_GetSysClockFreq+0x3a>
 8003ad2:	e0db      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ad4:	4b73      	ldr	r3, [pc, #460]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ad6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ad8:	e0db      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ada:	4b73      	ldr	r3, [pc, #460]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003adc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ade:	e0d8      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ae0:	4b6f      	ldr	r3, [pc, #444]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ae8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aea:	4b6d      	ldr	r3, [pc, #436]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d063      	beq.n	8003bbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af6:	4b6a      	ldr	r3, [pc, #424]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	099b      	lsrs	r3, r3, #6
 8003afc:	2200      	movs	r2, #0
 8003afe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b08:	633b      	str	r3, [r7, #48]	; 0x30
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b12:	4622      	mov	r2, r4
 8003b14:	462b      	mov	r3, r5
 8003b16:	f04f 0000 	mov.w	r0, #0
 8003b1a:	f04f 0100 	mov.w	r1, #0
 8003b1e:	0159      	lsls	r1, r3, #5
 8003b20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b24:	0150      	lsls	r0, r2, #5
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	1a51      	subs	r1, r2, r1
 8003b2e:	6139      	str	r1, [r7, #16]
 8003b30:	4629      	mov	r1, r5
 8003b32:	eb63 0301 	sbc.w	r3, r3, r1
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b44:	4659      	mov	r1, fp
 8003b46:	018b      	lsls	r3, r1, #6
 8003b48:	4651      	mov	r1, sl
 8003b4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b4e:	4651      	mov	r1, sl
 8003b50:	018a      	lsls	r2, r1, #6
 8003b52:	4651      	mov	r1, sl
 8003b54:	ebb2 0801 	subs.w	r8, r2, r1
 8003b58:	4659      	mov	r1, fp
 8003b5a:	eb63 0901 	sbc.w	r9, r3, r1
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b72:	4690      	mov	r8, r2
 8003b74:	4699      	mov	r9, r3
 8003b76:	4623      	mov	r3, r4
 8003b78:	eb18 0303 	adds.w	r3, r8, r3
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	462b      	mov	r3, r5
 8003b80:	eb49 0303 	adc.w	r3, r9, r3
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b92:	4629      	mov	r1, r5
 8003b94:	024b      	lsls	r3, r1, #9
 8003b96:	4621      	mov	r1, r4
 8003b98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b9c:	4621      	mov	r1, r4
 8003b9e:	024a      	lsls	r2, r1, #9
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003baa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bb0:	f7fc fb0a 	bl	80001c8 <__aeabi_uldivmod>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	4613      	mov	r3, r2
 8003bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bbc:	e058      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bbe:	4b38      	ldr	r3, [pc, #224]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	099b      	lsrs	r3, r3, #6
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	4611      	mov	r1, r2
 8003bca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bce:	623b      	str	r3, [r7, #32]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bd8:	4642      	mov	r2, r8
 8003bda:	464b      	mov	r3, r9
 8003bdc:	f04f 0000 	mov.w	r0, #0
 8003be0:	f04f 0100 	mov.w	r1, #0
 8003be4:	0159      	lsls	r1, r3, #5
 8003be6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bea:	0150      	lsls	r0, r2, #5
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4641      	mov	r1, r8
 8003bf2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bf6:	4649      	mov	r1, r9
 8003bf8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c10:	ebb2 040a 	subs.w	r4, r2, sl
 8003c14:	eb63 050b 	sbc.w	r5, r3, fp
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	00eb      	lsls	r3, r5, #3
 8003c22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c26:	00e2      	lsls	r2, r4, #3
 8003c28:	4614      	mov	r4, r2
 8003c2a:	461d      	mov	r5, r3
 8003c2c:	4643      	mov	r3, r8
 8003c2e:	18e3      	adds	r3, r4, r3
 8003c30:	603b      	str	r3, [r7, #0]
 8003c32:	464b      	mov	r3, r9
 8003c34:	eb45 0303 	adc.w	r3, r5, r3
 8003c38:	607b      	str	r3, [r7, #4]
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c46:	4629      	mov	r1, r5
 8003c48:	028b      	lsls	r3, r1, #10
 8003c4a:	4621      	mov	r1, r4
 8003c4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c50:	4621      	mov	r1, r4
 8003c52:	028a      	lsls	r2, r1, #10
 8003c54:	4610      	mov	r0, r2
 8003c56:	4619      	mov	r1, r3
 8003c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	61fa      	str	r2, [r7, #28]
 8003c60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c64:	f7fc fab0 	bl	80001c8 <__aeabi_uldivmod>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	0c1b      	lsrs	r3, r3, #16
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c8a:	e002      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c8c:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3750      	adds	r7, #80	; 0x50
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	00f42400 	.word	0x00f42400
 8003ca8:	007a1200 	.word	0x007a1200

08003cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20000000 	.word	0x20000000

08003cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cc8:	f7ff fff0 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	0a9b      	lsrs	r3, r3, #10
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4903      	ldr	r1, [pc, #12]	; (8003ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	080083d0 	.word	0x080083d0

08003cec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d105      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d035      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d14:	4b62      	ldr	r3, [pc, #392]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d1a:	f7fd f809 	bl	8000d30 <HAL_GetTick>
 8003d1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d20:	e008      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d22:	f7fd f805 	bl	8000d30 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e0b0      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d34:	4b5b      	ldr	r3, [pc, #364]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1f0      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	019a      	lsls	r2, r3, #6
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	071b      	lsls	r3, r3, #28
 8003d4c:	4955      	ldr	r1, [pc, #340]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d54:	4b52      	ldr	r3, [pc, #328]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d5a:	f7fc ffe9 	bl	8000d30 <HAL_GetTick>
 8003d5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d62:	f7fc ffe5 	bl	8000d30 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e090      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d74:	4b4b      	ldr	r3, [pc, #300]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0f0      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8083 	beq.w	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	4b44      	ldr	r3, [pc, #272]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	4a43      	ldr	r2, [pc, #268]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d9e:	4b41      	ldr	r3, [pc, #260]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003daa:	4b3f      	ldr	r3, [pc, #252]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a3e      	ldr	r2, [pc, #248]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003db6:	f7fc ffbb 	bl	8000d30 <HAL_GetTick>
 8003dba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003dbe:	f7fc ffb7 	bl	8000d30 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e062      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003dd0:	4b35      	ldr	r3, [pc, #212]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0f0      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ddc:	4b31      	ldr	r3, [pc, #196]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d02f      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d028      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dfa:	4b2a      	ldr	r3, [pc, #168]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e02:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e04:	4b29      	ldr	r3, [pc, #164]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e0a:	4b28      	ldr	r3, [pc, #160]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e10:	4a24      	ldr	r2, [pc, #144]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e16:	4b23      	ldr	r3, [pc, #140]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d114      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e22:	f7fc ff85 	bl	8000d30 <HAL_GetTick>
 8003e26:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e28:	e00a      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e2a:	f7fc ff81 	bl	8000d30 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e02a      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e40:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0ee      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e58:	d10d      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003e5a:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e6e:	490d      	ldr	r1, [pc, #52]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	608b      	str	r3, [r1, #8]
 8003e74:	e005      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003e76:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e7c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e80:	6093      	str	r3, [r2, #8]
 8003e82:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e8e:	4905      	ldr	r1, [pc, #20]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	42470068 	.word	0x42470068
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	40007000 	.word	0x40007000
 8003eac:	42470e40 	.word	0x42470e40

08003eb0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d13e      	bne.n	8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003ece:	4b23      	ldr	r3, [pc, #140]	; (8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d005      	beq.n	8003eea <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d12f      	bne.n	8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003ee4:	4b1e      	ldr	r3, [pc, #120]	; (8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003ee6:	617b      	str	r3, [r7, #20]
          break;
 8003ee8:	e02f      	b.n	8003f4a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003eea:	4b1c      	ldr	r3, [pc, #112]	; (8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ef6:	d108      	bne.n	8003f0a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ef8:	4b18      	ldr	r3, [pc, #96]	; (8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f00:	4a18      	ldr	r2, [pc, #96]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	e007      	b.n	8003f1a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003f0a:	4b14      	ldr	r3, [pc, #80]	; (8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f12:	4a15      	ldr	r2, [pc, #84]	; (8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f18:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003f1a:	4b10      	ldr	r3, [pc, #64]	; (8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f20:	099b      	lsrs	r3, r3, #6
 8003f22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	fb02 f303 	mul.w	r3, r2, r3
 8003f2c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003f2e:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f34:	0f1b      	lsrs	r3, r3, #28
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f40:	617b      	str	r3, [r7, #20]
          break;
 8003f42:	e002      	b.n	8003f4a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]
          break;
 8003f48:	bf00      	nop
        }
      }
      break;
 8003f4a:	bf00      	nop
    }
  }
  return frequency;
 8003f4c:	697b      	ldr	r3, [r7, #20]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	00bb8000 	.word	0x00bb8000
 8003f64:	007a1200 	.word	0x007a1200
 8003f68:	00f42400 	.word	0x00f42400

08003f6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e07b      	b.n	8004076 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d108      	bne.n	8003f98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f8e:	d009      	beq.n	8003fa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	61da      	str	r2, [r3, #28]
 8003f96:	e005      	b.n	8003fa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fc fd98 	bl	8000af4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004028:	ea42 0103 	orr.w	r1, r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004030:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	0c1b      	lsrs	r3, r3, #16
 8004042:	f003 0104 	and.w	r1, r3, #4
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	f003 0210 	and.w	r2, r3, #16
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69da      	ldr	r2, [r3, #28]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004064:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800407e:	b084      	sub	sp, #16
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	f107 001c 	add.w	r0, r7, #28
 800408c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	2b01      	cmp	r3, #1
 8004094:	d122      	bne.n	80040dc <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80040aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80040be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d105      	bne.n	80040d0 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f001 fbed 	bl	80058b0 <USB_CoreReset>
 80040d6:	4603      	mov	r3, r0
 80040d8:	73fb      	strb	r3, [r7, #15]
 80040da:	e01a      	b.n	8004112 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f001 fbe1 	bl	80058b0 <USB_CoreReset>
 80040ee:	4603      	mov	r3, r0
 80040f0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80040f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d106      	bne.n	8004106 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	639a      	str	r2, [r3, #56]	; 0x38
 8004104:	e005      	b.n	8004112 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004114:	2b01      	cmp	r3, #1
 8004116:	d10b      	bne.n	8004130 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f043 0206 	orr.w	r2, r3, #6
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f043 0220 	orr.w	r2, r3, #32
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004130:	7bfb      	ldrb	r3, [r7, #15]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800413c:	b004      	add	sp, #16
 800413e:	4770      	bx	lr

08004140 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	4613      	mov	r3, r2
 800414c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	2b02      	cmp	r3, #2
 8004152:	d165      	bne.n	8004220 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4a41      	ldr	r2, [pc, #260]	; (800425c <USB_SetTurnaroundTime+0x11c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d906      	bls.n	800416a <USB_SetTurnaroundTime+0x2a>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4a40      	ldr	r2, [pc, #256]	; (8004260 <USB_SetTurnaroundTime+0x120>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d202      	bcs.n	800416a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004164:	230f      	movs	r3, #15
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	e062      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	4a3c      	ldr	r2, [pc, #240]	; (8004260 <USB_SetTurnaroundTime+0x120>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d306      	bcc.n	8004180 <USB_SetTurnaroundTime+0x40>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	4a3b      	ldr	r2, [pc, #236]	; (8004264 <USB_SetTurnaroundTime+0x124>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d202      	bcs.n	8004180 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800417a:	230e      	movs	r3, #14
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	e057      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4a38      	ldr	r2, [pc, #224]	; (8004264 <USB_SetTurnaroundTime+0x124>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d306      	bcc.n	8004196 <USB_SetTurnaroundTime+0x56>
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4a37      	ldr	r2, [pc, #220]	; (8004268 <USB_SetTurnaroundTime+0x128>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d202      	bcs.n	8004196 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004190:	230d      	movs	r3, #13
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	e04c      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	4a33      	ldr	r2, [pc, #204]	; (8004268 <USB_SetTurnaroundTime+0x128>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d306      	bcc.n	80041ac <USB_SetTurnaroundTime+0x6c>
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	4a32      	ldr	r2, [pc, #200]	; (800426c <USB_SetTurnaroundTime+0x12c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d802      	bhi.n	80041ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80041a6:	230c      	movs	r3, #12
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	e041      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4a2f      	ldr	r2, [pc, #188]	; (800426c <USB_SetTurnaroundTime+0x12c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d906      	bls.n	80041c2 <USB_SetTurnaroundTime+0x82>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	4a2e      	ldr	r2, [pc, #184]	; (8004270 <USB_SetTurnaroundTime+0x130>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d802      	bhi.n	80041c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80041bc:	230b      	movs	r3, #11
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	e036      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4a2a      	ldr	r2, [pc, #168]	; (8004270 <USB_SetTurnaroundTime+0x130>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d906      	bls.n	80041d8 <USB_SetTurnaroundTime+0x98>
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	4a29      	ldr	r2, [pc, #164]	; (8004274 <USB_SetTurnaroundTime+0x134>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d802      	bhi.n	80041d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80041d2:	230a      	movs	r3, #10
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	e02b      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4a26      	ldr	r2, [pc, #152]	; (8004274 <USB_SetTurnaroundTime+0x134>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d906      	bls.n	80041ee <USB_SetTurnaroundTime+0xae>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	4a25      	ldr	r2, [pc, #148]	; (8004278 <USB_SetTurnaroundTime+0x138>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d202      	bcs.n	80041ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80041e8:	2309      	movs	r3, #9
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	e020      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	4a21      	ldr	r2, [pc, #132]	; (8004278 <USB_SetTurnaroundTime+0x138>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d306      	bcc.n	8004204 <USB_SetTurnaroundTime+0xc4>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	4a20      	ldr	r2, [pc, #128]	; (800427c <USB_SetTurnaroundTime+0x13c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d802      	bhi.n	8004204 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80041fe:	2308      	movs	r3, #8
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	e015      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4a1d      	ldr	r2, [pc, #116]	; (800427c <USB_SetTurnaroundTime+0x13c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d906      	bls.n	800421a <USB_SetTurnaroundTime+0xda>
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4a1c      	ldr	r2, [pc, #112]	; (8004280 <USB_SetTurnaroundTime+0x140>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d202      	bcs.n	800421a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004214:	2307      	movs	r3, #7
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	e00a      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800421a:	2306      	movs	r3, #6
 800421c:	617b      	str	r3, [r7, #20]
 800421e:	e007      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004220:	79fb      	ldrb	r3, [r7, #7]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d102      	bne.n	800422c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004226:	2309      	movs	r3, #9
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	e001      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800422c:	2309      	movs	r3, #9
 800422e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	029b      	lsls	r3, r3, #10
 8004244:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004248:	431a      	orrs	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	00d8acbf 	.word	0x00d8acbf
 8004260:	00e4e1c0 	.word	0x00e4e1c0
 8004264:	00f42400 	.word	0x00f42400
 8004268:	01067380 	.word	0x01067380
 800426c:	011a499f 	.word	0x011a499f
 8004270:	01312cff 	.word	0x01312cff
 8004274:	014ca43f 	.word	0x014ca43f
 8004278:	016e3600 	.word	0x016e3600
 800427c:	01a6ab1f 	.word	0x01a6ab1f
 8004280:	01e84800 	.word	0x01e84800

08004284 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f043 0201 	orr.w	r2, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f023 0201 	bic.w	r2, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d115      	bne.n	8004316 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042f6:	2001      	movs	r0, #1
 80042f8:	f7fc fd26 	bl	8000d48 <HAL_Delay>
      ms++;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	3301      	adds	r3, #1
 8004300:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f001 fa45 	bl	8005792 <USB_GetMode>
 8004308:	4603      	mov	r3, r0
 800430a:	2b01      	cmp	r3, #1
 800430c:	d01e      	beq.n	800434c <USB_SetCurrentMode+0x84>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2b31      	cmp	r3, #49	; 0x31
 8004312:	d9f0      	bls.n	80042f6 <USB_SetCurrentMode+0x2e>
 8004314:	e01a      	b.n	800434c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004316:	78fb      	ldrb	r3, [r7, #3]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d115      	bne.n	8004348 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004328:	2001      	movs	r0, #1
 800432a:	f7fc fd0d 	bl	8000d48 <HAL_Delay>
      ms++;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3301      	adds	r3, #1
 8004332:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f001 fa2c 	bl	8005792 <USB_GetMode>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <USB_SetCurrentMode+0x84>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b31      	cmp	r3, #49	; 0x31
 8004344:	d9f0      	bls.n	8004328 <USB_SetCurrentMode+0x60>
 8004346:	e001      	b.n	800434c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e005      	b.n	8004358 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b32      	cmp	r3, #50	; 0x32
 8004350:	d101      	bne.n	8004356 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004360:	b084      	sub	sp, #16
 8004362:	b580      	push	{r7, lr}
 8004364:	b086      	sub	sp, #24
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800436e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800437a:	2300      	movs	r3, #0
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	e009      	b.n	8004394 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	3340      	adds	r3, #64	; 0x40
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	2200      	movs	r2, #0
 800438c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	3301      	adds	r3, #1
 8004392:	613b      	str	r3, [r7, #16]
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b0e      	cmp	r3, #14
 8004398:	d9f2      	bls.n	8004380 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800439a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800439c:	2b00      	cmp	r3, #0
 800439e:	d11c      	bne.n	80043da <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043ae:	f043 0302 	orr.w	r3, r3, #2
 80043b2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	639a      	str	r2, [r3, #56]	; 0x38
 80043d8:	e00b      	b.n	80043f2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043f8:	461a      	mov	r2, r3
 80043fa:	2300      	movs	r3, #0
 80043fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004404:	4619      	mov	r1, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440c:	461a      	mov	r2, r3
 800440e:	680b      	ldr	r3, [r1, #0]
 8004410:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004414:	2b01      	cmp	r3, #1
 8004416:	d10c      	bne.n	8004432 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d104      	bne.n	8004428 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800441e:	2100      	movs	r1, #0
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f965 	bl	80046f0 <USB_SetDevSpeed>
 8004426:	e008      	b.n	800443a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004428:	2101      	movs	r1, #1
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f960 	bl	80046f0 <USB_SetDevSpeed>
 8004430:	e003      	b.n	800443a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004432:	2103      	movs	r1, #3
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f95b 	bl	80046f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800443a:	2110      	movs	r1, #16
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f8f3 	bl	8004628 <USB_FlushTxFifo>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f91f 	bl	8004690 <USB_FlushRxFifo>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004462:	461a      	mov	r2, r3
 8004464:	2300      	movs	r3, #0
 8004466:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446e:	461a      	mov	r2, r3
 8004470:	2300      	movs	r3, #0
 8004472:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800447a:	461a      	mov	r2, r3
 800447c:	2300      	movs	r3, #0
 800447e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004480:	2300      	movs	r3, #0
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	e043      	b.n	800450e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4413      	add	r3, r2
 800448e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004498:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800449c:	d118      	bne.n	80044d0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b0:	461a      	mov	r2, r3
 80044b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	e013      	b.n	80044e2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c6:	461a      	mov	r2, r3
 80044c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	e008      	b.n	80044e2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044dc:	461a      	mov	r2, r3
 80044de:	2300      	movs	r3, #0
 80044e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ee:	461a      	mov	r2, r3
 80044f0:	2300      	movs	r3, #0
 80044f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004500:	461a      	mov	r2, r3
 8004502:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004506:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	3301      	adds	r3, #1
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	429a      	cmp	r2, r3
 8004514:	d3b7      	bcc.n	8004486 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004516:	2300      	movs	r3, #0
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	e043      	b.n	80045a4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800452e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004532:	d118      	bne.n	8004566 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10a      	bne.n	8004550 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004546:	461a      	mov	r2, r3
 8004548:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	e013      	b.n	8004578 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455c:	461a      	mov	r2, r3
 800455e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004562:	6013      	str	r3, [r2, #0]
 8004564:	e008      	b.n	8004578 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4413      	add	r3, r2
 800456e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004572:	461a      	mov	r2, r3
 8004574:	2300      	movs	r3, #0
 8004576:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004584:	461a      	mov	r2, r3
 8004586:	2300      	movs	r3, #0
 8004588:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004596:	461a      	mov	r2, r3
 8004598:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800459c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	3301      	adds	r3, #1
 80045a2:	613b      	str	r3, [r7, #16]
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d3b7      	bcc.n	800451c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80045cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80045ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d105      	bne.n	80045e0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	f043 0210 	orr.w	r2, r3, #16
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699a      	ldr	r2, [r3, #24]
 80045e4:	4b0f      	ldr	r3, [pc, #60]	; (8004624 <USB_DevInit+0x2c4>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80045ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d005      	beq.n	80045fe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	f043 0208 	orr.w	r2, r3, #8
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004600:	2b01      	cmp	r3, #1
 8004602:	d107      	bne.n	8004614 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800460c:	f043 0304 	orr.w	r3, r3, #4
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004614:	7dfb      	ldrb	r3, [r7, #23]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004620:	b004      	add	sp, #16
 8004622:	4770      	bx	lr
 8004624:	803c3800 	.word	0x803c3800

08004628 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3301      	adds	r3, #1
 800463a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4a13      	ldr	r2, [pc, #76]	; (800468c <USB_FlushTxFifo+0x64>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d901      	bls.n	8004648 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e01b      	b.n	8004680 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	daf2      	bge.n	8004636 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	019b      	lsls	r3, r3, #6
 8004658:	f043 0220 	orr.w	r2, r3, #32
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	3301      	adds	r3, #1
 8004664:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4a08      	ldr	r2, [pc, #32]	; (800468c <USB_FlushTxFifo+0x64>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e006      	b.n	8004680 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b20      	cmp	r3, #32
 800467c:	d0f0      	beq.n	8004660 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	00030d40 	.word	0x00030d40

08004690 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	3301      	adds	r3, #1
 80046a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4a11      	ldr	r2, [pc, #68]	; (80046ec <USB_FlushRxFifo+0x5c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e018      	b.n	80046e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	daf2      	bge.n	800469c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2210      	movs	r2, #16
 80046be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	3301      	adds	r3, #1
 80046c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4a08      	ldr	r2, [pc, #32]	; (80046ec <USB_FlushRxFifo+0x5c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d901      	bls.n	80046d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e006      	b.n	80046e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f003 0310 	and.w	r3, r3, #16
 80046da:	2b10      	cmp	r3, #16
 80046dc:	d0f0      	beq.n	80046c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	00030d40 	.word	0x00030d40

080046f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	78fb      	ldrb	r3, [r7, #3]
 800470a:	68f9      	ldr	r1, [r7, #12]
 800470c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004710:	4313      	orrs	r3, r2
 8004712:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004722:	b480      	push	{r7}
 8004724:	b087      	sub	sp, #28
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 0306 	and.w	r3, r3, #6
 800473a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d102      	bne.n	8004748 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004742:	2300      	movs	r3, #0
 8004744:	75fb      	strb	r3, [r7, #23]
 8004746:	e00a      	b.n	800475e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d002      	beq.n	8004754 <USB_GetDevSpeed+0x32>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b06      	cmp	r3, #6
 8004752:	d102      	bne.n	800475a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004754:	2302      	movs	r3, #2
 8004756:	75fb      	strb	r3, [r7, #23]
 8004758:	e001      	b.n	800475e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800475a:	230f      	movs	r3, #15
 800475c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800475e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004760:	4618      	mov	r0, r3
 8004762:	371c      	adds	r7, #28
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	785b      	ldrb	r3, [r3, #1]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d13a      	bne.n	80047fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	f003 030f 	and.w	r3, r3, #15
 8004798:	2101      	movs	r1, #1
 800479a:	fa01 f303 	lsl.w	r3, r1, r3
 800479e:	b29b      	uxth	r3, r3
 80047a0:	68f9      	ldr	r1, [r7, #12]
 80047a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047a6:	4313      	orrs	r3, r2
 80047a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d155      	bne.n	800486c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	791b      	ldrb	r3, [r3, #4]
 80047da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	059b      	lsls	r3, r3, #22
 80047e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047e4:	4313      	orrs	r3, r2
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	0151      	lsls	r1, r2, #5
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	440a      	add	r2, r1
 80047ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	e036      	b.n	800486c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004804:	69da      	ldr	r2, [r3, #28]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	2101      	movs	r1, #1
 8004810:	fa01 f303 	lsl.w	r3, r1, r3
 8004814:	041b      	lsls	r3, r3, #16
 8004816:	68f9      	ldr	r1, [r7, #12]
 8004818:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800481c:	4313      	orrs	r3, r2
 800481e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d11a      	bne.n	800486c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	791b      	ldrb	r3, [r3, #4]
 8004850:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004852:	430b      	orrs	r3, r1
 8004854:	4313      	orrs	r3, r2
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	0151      	lsls	r1, r2, #5
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	440a      	add	r2, r1
 800485e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800486a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
	...

0800487c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	785b      	ldrb	r3, [r3, #1]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d161      	bne.n	800495c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048ae:	d11f      	bne.n	80048f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	0151      	lsls	r1, r2, #5
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	440a      	add	r2, r1
 80048c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	0151      	lsls	r1, r2, #5
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	440a      	add	r2, r1
 80048e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	f003 030f 	and.w	r3, r3, #15
 8004900:	2101      	movs	r1, #1
 8004902:	fa01 f303 	lsl.w	r3, r1, r3
 8004906:	b29b      	uxth	r3, r3
 8004908:	43db      	mvns	r3, r3
 800490a:	68f9      	ldr	r1, [r7, #12]
 800490c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004910:	4013      	ands	r3, r2
 8004912:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491a:	69da      	ldr	r2, [r3, #28]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	f003 030f 	and.w	r3, r3, #15
 8004924:	2101      	movs	r1, #1
 8004926:	fa01 f303 	lsl.w	r3, r1, r3
 800492a:	b29b      	uxth	r3, r3
 800492c:	43db      	mvns	r3, r3
 800492e:	68f9      	ldr	r1, [r7, #12]
 8004930:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004934:	4013      	ands	r3, r2
 8004936:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4413      	add	r3, r2
 8004940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	0159      	lsls	r1, r3, #5
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	440b      	add	r3, r1
 800494e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004952:	4619      	mov	r1, r3
 8004954:	4b35      	ldr	r3, [pc, #212]	; (8004a2c <USB_DeactivateEndpoint+0x1b0>)
 8004956:	4013      	ands	r3, r2
 8004958:	600b      	str	r3, [r1, #0]
 800495a:	e060      	b.n	8004a1e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800496e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004972:	d11f      	bne.n	80049b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	0151      	lsls	r1, r2, #5
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	440a      	add	r2, r1
 800498a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800498e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004992:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	0151      	lsls	r1, r2, #5
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	440a      	add	r2, r1
 80049aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	f003 030f 	and.w	r3, r3, #15
 80049c4:	2101      	movs	r1, #1
 80049c6:	fa01 f303 	lsl.w	r3, r1, r3
 80049ca:	041b      	lsls	r3, r3, #16
 80049cc:	43db      	mvns	r3, r3
 80049ce:	68f9      	ldr	r1, [r7, #12]
 80049d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049d4:	4013      	ands	r3, r2
 80049d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049de:	69da      	ldr	r2, [r3, #28]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	2101      	movs	r1, #1
 80049ea:	fa01 f303 	lsl.w	r3, r1, r3
 80049ee:	041b      	lsls	r3, r3, #16
 80049f0:	43db      	mvns	r3, r3
 80049f2:	68f9      	ldr	r1, [r7, #12]
 80049f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049f8:	4013      	ands	r3, r2
 80049fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	0159      	lsls	r1, r3, #5
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	440b      	add	r3, r1
 8004a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a16:	4619      	mov	r1, r3
 8004a18:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <USB_DeactivateEndpoint+0x1b4>)
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	ec337800 	.word	0xec337800
 8004a30:	eff37800 	.word	0xeff37800

08004a34 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08a      	sub	sp, #40	; 0x28
 8004a38:	af02      	add	r7, sp, #8
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	785b      	ldrb	r3, [r3, #1]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	f040 815c 	bne.w	8004d0e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d132      	bne.n	8004ac4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	0151      	lsls	r1, r2, #5
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	440a      	add	r2, r1
 8004a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	0151      	lsls	r1, r2, #5
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	440a      	add	r2, r1
 8004a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004aa0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	0151      	lsls	r1, r2, #5
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	440a      	add	r2, r1
 8004ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004abc:	0cdb      	lsrs	r3, r3, #19
 8004abe:	04db      	lsls	r3, r3, #19
 8004ac0:	6113      	str	r3, [r2, #16]
 8004ac2:	e074      	b.n	8004bae <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	0151      	lsls	r1, r2, #5
 8004ad6:	69fa      	ldr	r2, [r7, #28]
 8004ad8:	440a      	add	r2, r1
 8004ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ade:	0cdb      	lsrs	r3, r3, #19
 8004ae0:	04db      	lsls	r3, r3, #19
 8004ae2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	0151      	lsls	r1, r2, #5
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	440a      	add	r2, r1
 8004afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004afe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b14:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	6999      	ldr	r1, [r3, #24]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	440b      	add	r3, r1
 8004b20:	1e59      	subs	r1, r3, #1
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b2a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004b2c:	4b9d      	ldr	r3, [pc, #628]	; (8004da4 <USB_EPStartXfer+0x370>)
 8004b2e:	400b      	ands	r3, r1
 8004b30:	69b9      	ldr	r1, [r7, #24]
 8004b32:	0148      	lsls	r0, r1, #5
 8004b34:	69f9      	ldr	r1, [r7, #28]
 8004b36:	4401      	add	r1, r0
 8004b38:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4c:	691a      	ldr	r2, [r3, #16]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b56:	69b9      	ldr	r1, [r7, #24]
 8004b58:	0148      	lsls	r0, r1, #5
 8004b5a:	69f9      	ldr	r1, [r7, #28]
 8004b5c:	4401      	add	r1, r0
 8004b5e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b62:	4313      	orrs	r3, r2
 8004b64:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	791b      	ldrb	r3, [r3, #4]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d11f      	bne.n	8004bae <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	0151      	lsls	r1, r2, #5
 8004b80:	69fa      	ldr	r2, [r7, #28]
 8004b82:	440a      	add	r2, r1
 8004b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b88:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004b8c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	0151      	lsls	r1, r2, #5
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	440a      	add	r2, r1
 8004ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004bae:	79fb      	ldrb	r3, [r7, #7]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d14b      	bne.n	8004c4c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d009      	beq.n	8004bd0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc8:	461a      	mov	r2, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	791b      	ldrb	r3, [r3, #4]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d128      	bne.n	8004c2a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d110      	bne.n	8004c0a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	0151      	lsls	r1, r2, #5
 8004bfa:	69fa      	ldr	r2, [r7, #28]
 8004bfc:	440a      	add	r2, r1
 8004bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	e00f      	b.n	8004c2a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	0151      	lsls	r1, r2, #5
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	440a      	add	r2, r1
 8004c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c28:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	0151      	lsls	r1, r2, #5
 8004c3c:	69fa      	ldr	r2, [r7, #28]
 8004c3e:	440a      	add	r2, r1
 8004c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c48:	6013      	str	r3, [r2, #0]
 8004c4a:	e133      	b.n	8004eb4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	0151      	lsls	r1, r2, #5
 8004c5e:	69fa      	ldr	r2, [r7, #28]
 8004c60:	440a      	add	r2, r1
 8004c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c6a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	791b      	ldrb	r3, [r3, #4]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d015      	beq.n	8004ca0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 811b 	beq.w	8004eb4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	2101      	movs	r1, #1
 8004c90:	fa01 f303 	lsl.w	r3, r1, r3
 8004c94:	69f9      	ldr	r1, [r7, #28]
 8004c96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	634b      	str	r3, [r1, #52]	; 0x34
 8004c9e:	e109      	b.n	8004eb4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d110      	bne.n	8004cd2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	0151      	lsls	r1, r2, #5
 8004cc2:	69fa      	ldr	r2, [r7, #28]
 8004cc4:	440a      	add	r2, r1
 8004cc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cce:	6013      	str	r3, [r2, #0]
 8004cd0:	e00f      	b.n	8004cf2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	0151      	lsls	r1, r2, #5
 8004ce4:	69fa      	ldr	r2, [r7, #28]
 8004ce6:	440a      	add	r2, r1
 8004ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	6919      	ldr	r1, [r3, #16]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	781a      	ldrb	r2, [r3, #0]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	b298      	uxth	r0, r3
 8004d00:	79fb      	ldrb	r3, [r7, #7]
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	4603      	mov	r3, r0
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 fade 	bl	80052c8 <USB_WritePacket>
 8004d0c:	e0d2      	b.n	8004eb4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	0151      	lsls	r1, r2, #5
 8004d20:	69fa      	ldr	r2, [r7, #28]
 8004d22:	440a      	add	r2, r1
 8004d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d28:	0cdb      	lsrs	r3, r3, #19
 8004d2a:	04db      	lsls	r3, r3, #19
 8004d2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	0151      	lsls	r1, r2, #5
 8004d40:	69fa      	ldr	r2, [r7, #28]
 8004d42:	440a      	add	r2, r1
 8004d44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d50:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d126      	bne.n	8004da8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d66:	691a      	ldr	r2, [r3, #16]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d70:	69b9      	ldr	r1, [r7, #24]
 8004d72:	0148      	lsls	r0, r1, #5
 8004d74:	69f9      	ldr	r1, [r7, #28]
 8004d76:	4401      	add	r1, r0
 8004d78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	0151      	lsls	r1, r2, #5
 8004d92:	69fa      	ldr	r2, [r7, #28]
 8004d94:	440a      	add	r2, r1
 8004d96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d9e:	6113      	str	r3, [r2, #16]
 8004da0:	e03a      	b.n	8004e18 <USB_EPStartXfer+0x3e4>
 8004da2:	bf00      	nop
 8004da4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	699a      	ldr	r2, [r3, #24]
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	1e5a      	subs	r2, r3, #1
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	8afa      	ldrh	r2, [r7, #22]
 8004dc4:	fb03 f202 	mul.w	r2, r3, r2
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd8:	691a      	ldr	r2, [r3, #16]
 8004dda:	8afb      	ldrh	r3, [r7, #22]
 8004ddc:	04d9      	lsls	r1, r3, #19
 8004dde:	4b38      	ldr	r3, [pc, #224]	; (8004ec0 <USB_EPStartXfer+0x48c>)
 8004de0:	400b      	ands	r3, r1
 8004de2:	69b9      	ldr	r1, [r7, #24]
 8004de4:	0148      	lsls	r0, r1, #5
 8004de6:	69f9      	ldr	r1, [r7, #28]
 8004de8:	4401      	add	r1, r0
 8004dea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004dee:	4313      	orrs	r3, r2
 8004df0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfe:	691a      	ldr	r2, [r3, #16]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e08:	69b9      	ldr	r1, [r7, #24]
 8004e0a:	0148      	lsls	r0, r1, #5
 8004e0c:	69f9      	ldr	r1, [r7, #28]
 8004e0e:	4401      	add	r1, r0
 8004e10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e14:	4313      	orrs	r3, r2
 8004e16:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e18:	79fb      	ldrb	r3, [r7, #7]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d10d      	bne.n	8004e3a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d009      	beq.n	8004e3a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	6919      	ldr	r1, [r3, #16]
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e36:	460a      	mov	r2, r1
 8004e38:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	791b      	ldrb	r3, [r3, #4]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d128      	bne.n	8004e94 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d110      	bne.n	8004e74 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	0151      	lsls	r1, r2, #5
 8004e64:	69fa      	ldr	r2, [r7, #28]
 8004e66:	440a      	add	r2, r1
 8004e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	e00f      	b.n	8004e94 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	0151      	lsls	r1, r2, #5
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	440a      	add	r2, r1
 8004e8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e92:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	0151      	lsls	r1, r2, #5
 8004ea6:	69fa      	ldr	r2, [r7, #28]
 8004ea8:	440a      	add	r2, r1
 8004eaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004eb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3720      	adds	r7, #32
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	1ff80000 	.word	0x1ff80000

08004ec4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	785b      	ldrb	r3, [r3, #1]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	f040 80ce 	bne.w	8005082 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d132      	bne.n	8004f54 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	0151      	lsls	r1, r2, #5
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	440a      	add	r2, r1
 8004f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	0151      	lsls	r1, r2, #5
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	440a      	add	r2, r1
 8004f28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	0151      	lsls	r1, r2, #5
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	440a      	add	r2, r1
 8004f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f4c:	0cdb      	lsrs	r3, r3, #19
 8004f4e:	04db      	lsls	r3, r3, #19
 8004f50:	6113      	str	r3, [r2, #16]
 8004f52:	e04e      	b.n	8004ff2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	0151      	lsls	r1, r2, #5
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	440a      	add	r2, r1
 8004f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6e:	0cdb      	lsrs	r3, r3, #19
 8004f70:	04db      	lsls	r3, r3, #19
 8004f72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	0151      	lsls	r1, r2, #5
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	440a      	add	r2, r1
 8004f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f96:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	699a      	ldr	r2, [r3, #24]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d903      	bls.n	8004fac <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	68da      	ldr	r2, [r3, #12]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	0151      	lsls	r1, r2, #5
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	440a      	add	r2, r1
 8004fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd8:	691a      	ldr	r2, [r3, #16]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fe2:	6939      	ldr	r1, [r7, #16]
 8004fe4:	0148      	lsls	r0, r1, #5
 8004fe6:	6979      	ldr	r1, [r7, #20]
 8004fe8:	4401      	add	r1, r0
 8004fea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d11e      	bne.n	8005036 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d009      	beq.n	8005014 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500c:	461a      	mov	r2, r3
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	4413      	add	r3, r2
 800501c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	0151      	lsls	r1, r2, #5
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	440a      	add	r2, r1
 800502a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800502e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005032:	6013      	str	r3, [r2, #0]
 8005034:	e097      	b.n	8005166 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	4413      	add	r3, r2
 800503e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	0151      	lsls	r1, r2, #5
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	440a      	add	r2, r1
 800504c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005050:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005054:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 8083 	beq.w	8005166 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	f003 030f 	and.w	r3, r3, #15
 8005070:	2101      	movs	r1, #1
 8005072:	fa01 f303 	lsl.w	r3, r1, r3
 8005076:	6979      	ldr	r1, [r7, #20]
 8005078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800507c:	4313      	orrs	r3, r2
 800507e:	634b      	str	r3, [r1, #52]	; 0x34
 8005080:	e071      	b.n	8005166 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	0151      	lsls	r1, r2, #5
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	440a      	add	r2, r1
 8005098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800509c:	0cdb      	lsrs	r3, r3, #19
 800509e:	04db      	lsls	r3, r3, #19
 80050a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	0151      	lsls	r1, r2, #5
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	440a      	add	r2, r1
 80050b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	0151      	lsls	r1, r2, #5
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	440a      	add	r2, r1
 80050f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510a:	691a      	ldr	r2, [r3, #16]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005114:	6939      	ldr	r1, [r7, #16]
 8005116:	0148      	lsls	r0, r1, #5
 8005118:	6979      	ldr	r1, [r7, #20]
 800511a:	4401      	add	r1, r0
 800511c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005120:	4313      	orrs	r3, r2
 8005122:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005124:	79fb      	ldrb	r3, [r7, #7]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d10d      	bne.n	8005146 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d009      	beq.n	8005146 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	6919      	ldr	r1, [r3, #16]
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005142:	460a      	mov	r2, r1
 8005144:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	4413      	add	r3, r2
 800514e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	0151      	lsls	r1, r2, #5
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	440a      	add	r2, r1
 800515c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005160:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005164:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	371c      	adds	r7, #28
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005182:	2300      	movs	r3, #0
 8005184:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	785b      	ldrb	r3, [r3, #1]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d14a      	bne.n	8005228 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051aa:	f040 8086 	bne.w	80052ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	7812      	ldrb	r2, [r2, #0]
 80051c2:	0151      	lsls	r1, r2, #5
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	440a      	add	r2, r1
 80051c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051d0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	7812      	ldrb	r2, [r2, #0]
 80051e6:	0151      	lsls	r1, r2, #5
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	440a      	add	r2, r1
 80051ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3301      	adds	r3, #1
 80051fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8005202:	4293      	cmp	r3, r2
 8005204:	d902      	bls.n	800520c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	75fb      	strb	r3, [r7, #23]
          break;
 800520a:	e056      	b.n	80052ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005220:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005224:	d0e7      	beq.n	80051f6 <USB_EPStopXfer+0x82>
 8005226:	e048      	b.n	80052ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800523c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005240:	d13b      	bne.n	80052ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	7812      	ldrb	r2, [r2, #0]
 8005256:	0151      	lsls	r1, r2, #5
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	440a      	add	r2, r1
 800525c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005260:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005264:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	7812      	ldrb	r2, [r2, #0]
 800527a:	0151      	lsls	r1, r2, #5
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	440a      	add	r2, r1
 8005280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005284:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005288:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3301      	adds	r3, #1
 800528e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f242 7210 	movw	r2, #10000	; 0x2710
 8005296:	4293      	cmp	r3, r2
 8005298:	d902      	bls.n	80052a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	75fb      	strb	r3, [r7, #23]
          break;
 800529e:	e00c      	b.n	80052ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052b8:	d0e7      	beq.n	800528a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80052ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b089      	sub	sp, #36	; 0x24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	4611      	mov	r1, r2
 80052d4:	461a      	mov	r2, r3
 80052d6:	460b      	mov	r3, r1
 80052d8:	71fb      	strb	r3, [r7, #7]
 80052da:	4613      	mov	r3, r2
 80052dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80052e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d123      	bne.n	8005336 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80052ee:	88bb      	ldrh	r3, [r7, #4]
 80052f0:	3303      	adds	r3, #3
 80052f2:	089b      	lsrs	r3, r3, #2
 80052f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80052f6:	2300      	movs	r3, #0
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	e018      	b.n	800532e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80052fc:	79fb      	ldrb	r3, [r7, #7]
 80052fe:	031a      	lsls	r2, r3, #12
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	4413      	add	r3, r2
 8005304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005308:	461a      	mov	r2, r3
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	3301      	adds	r3, #1
 8005314:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	3301      	adds	r3, #1
 800531a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	3301      	adds	r3, #1
 8005320:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	3301      	adds	r3, #1
 8005326:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	3301      	adds	r3, #1
 800532c:	61bb      	str	r3, [r7, #24]
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	429a      	cmp	r2, r3
 8005334:	d3e2      	bcc.n	80052fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3724      	adds	r7, #36	; 0x24
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005344:	b480      	push	{r7}
 8005346:	b08b      	sub	sp, #44	; 0x2c
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	4613      	mov	r3, r2
 8005350:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800535a:	88fb      	ldrh	r3, [r7, #6]
 800535c:	089b      	lsrs	r3, r3, #2
 800535e:	b29b      	uxth	r3, r3
 8005360:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005362:	88fb      	ldrh	r3, [r7, #6]
 8005364:	f003 0303 	and.w	r3, r3, #3
 8005368:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800536a:	2300      	movs	r3, #0
 800536c:	623b      	str	r3, [r7, #32]
 800536e:	e014      	b.n	800539a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	601a      	str	r2, [r3, #0]
    pDest++;
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	3301      	adds	r3, #1
 8005380:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	3301      	adds	r3, #1
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	3301      	adds	r3, #1
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	3301      	adds	r3, #1
 8005392:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	3301      	adds	r3, #1
 8005398:	623b      	str	r3, [r7, #32]
 800539a:	6a3a      	ldr	r2, [r7, #32]
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d3e6      	bcc.n	8005370 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80053a2:	8bfb      	ldrh	r3, [r7, #30]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01e      	beq.n	80053e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053b2:	461a      	mov	r2, r3
 80053b4:	f107 0310 	add.w	r3, r7, #16
 80053b8:	6812      	ldr	r2, [r2, #0]
 80053ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	fa22 f303 	lsr.w	r3, r2, r3
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	701a      	strb	r2, [r3, #0]
      i++;
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	3301      	adds	r3, #1
 80053d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	3301      	adds	r3, #1
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80053da:	8bfb      	ldrh	r3, [r7, #30]
 80053dc:	3b01      	subs	r3, #1
 80053de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80053e0:	8bfb      	ldrh	r3, [r7, #30]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1ea      	bne.n	80053bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	372c      	adds	r7, #44	; 0x2c
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	785b      	ldrb	r3, [r3, #1]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d12c      	bne.n	800546a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	db12      	blt.n	8005448 <USB_EPSetStall+0x54>
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00f      	beq.n	8005448 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	0151      	lsls	r1, r2, #5
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	440a      	add	r2, r1
 800543e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005442:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005446:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	0151      	lsls	r1, r2, #5
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	440a      	add	r2, r1
 800545e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005462:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005466:	6013      	str	r3, [r2, #0]
 8005468:	e02b      	b.n	80054c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	db12      	blt.n	80054a2 <USB_EPSetStall+0xae>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00f      	beq.n	80054a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	0151      	lsls	r1, r2, #5
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	440a      	add	r2, r1
 8005498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800549c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	0151      	lsls	r1, r2, #5
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	440a      	add	r2, r1
 80054b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	785b      	ldrb	r3, [r3, #1]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d128      	bne.n	800553e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	0151      	lsls	r1, r2, #5
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	440a      	add	r2, r1
 8005502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005506:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800550a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	791b      	ldrb	r3, [r3, #4]
 8005510:	2b03      	cmp	r3, #3
 8005512:	d003      	beq.n	800551c <USB_EPClearStall+0x4c>
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	791b      	ldrb	r3, [r3, #4]
 8005518:	2b02      	cmp	r3, #2
 800551a:	d138      	bne.n	800558e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	0151      	lsls	r1, r2, #5
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	440a      	add	r2, r1
 8005532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800553a:	6013      	str	r3, [r2, #0]
 800553c:	e027      	b.n	800558e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	0151      	lsls	r1, r2, #5
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	440a      	add	r2, r1
 8005554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005558:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800555c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	791b      	ldrb	r3, [r3, #4]
 8005562:	2b03      	cmp	r3, #3
 8005564:	d003      	beq.n	800556e <USB_EPClearStall+0x9e>
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	791b      	ldrb	r3, [r3, #4]
 800556a:	2b02      	cmp	r3, #2
 800556c:	d10f      	bne.n	800558e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	0151      	lsls	r1, r2, #5
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	440a      	add	r2, r1
 8005584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800558c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	460b      	mov	r3, r1
 80055a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80055be:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80055d0:	68f9      	ldr	r1, [r7, #12]
 80055d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055d6:	4313      	orrs	r3, r2
 80055d8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005602:	f023 0303 	bic.w	r3, r3, #3
 8005606:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005616:	f023 0302 	bic.w	r3, r3, #2
 800561a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800562a:	b480      	push	{r7}
 800562c:	b085      	sub	sp, #20
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005644:	f023 0303 	bic.w	r3, r3, #3
 8005648:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005658:	f043 0302 	orr.w	r3, r3, #2
 800565c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	4013      	ands	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005684:	68fb      	ldr	r3, [r7, #12]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005692:	b480      	push	{r7}
 8005694:	b085      	sub	sp, #20
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	4013      	ands	r3, r2
 80056b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	0c1b      	lsrs	r3, r3, #16
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b085      	sub	sp, #20
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	4013      	ands	r3, r2
 80056e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	b29b      	uxth	r3, r3
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b085      	sub	sp, #20
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	460b      	mov	r3, r1
 8005704:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800570a:	78fb      	ldrb	r3, [r7, #3]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4413      	add	r3, r2
 8005712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	4013      	ands	r3, r2
 8005726:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005728:	68bb      	ldr	r3, [r7, #8]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005736:	b480      	push	{r7}
 8005738:	b087      	sub	sp, #28
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	460b      	mov	r3, r1
 8005740:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005758:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800575a:	78fb      	ldrb	r3, [r7, #3]
 800575c:	f003 030f 	and.w	r3, r3, #15
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	fa22 f303 	lsr.w	r3, r2, r3
 8005766:	01db      	lsls	r3, r3, #7
 8005768:	b2db      	uxtb	r3, r3
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	4313      	orrs	r3, r2
 800576e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005770:	78fb      	ldrb	r3, [r7, #3]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	4013      	ands	r3, r2
 8005782:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005784:	68bb      	ldr	r3, [r7, #8]
}
 8005786:	4618      	mov	r0, r3
 8005788:	371c      	adds	r7, #28
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	f003 0301 	and.w	r3, r3, #1
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b085      	sub	sp, #20
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80057cc:	f023 0307 	bic.w	r3, r3, #7
 80057d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	460b      	mov	r3, r1
 80057fe:	607a      	str	r2, [r7, #4]
 8005800:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	333c      	adds	r3, #60	; 0x3c
 800580a:	3304      	adds	r3, #4
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	4a26      	ldr	r2, [pc, #152]	; (80058ac <USB_EP0_OutStart+0xb8>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d90a      	bls.n	800582e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005824:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005828:	d101      	bne.n	800582e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	e037      	b.n	800589e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005834:	461a      	mov	r2, r3
 8005836:	2300      	movs	r3, #0
 8005838:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005848:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800584c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800585c:	f043 0318 	orr.w	r3, r3, #24
 8005860:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005870:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005874:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005876:	7afb      	ldrb	r3, [r7, #11]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d10f      	bne.n	800589c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005882:	461a      	mov	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005896:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800589a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	371c      	adds	r7, #28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	4f54300a 	.word	0x4f54300a

080058b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3301      	adds	r3, #1
 80058c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4a13      	ldr	r2, [pc, #76]	; (8005914 <USB_CoreReset+0x64>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d901      	bls.n	80058ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e01b      	b.n	8005906 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	daf2      	bge.n	80058bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f043 0201 	orr.w	r2, r3, #1
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	3301      	adds	r3, #1
 80058ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4a09      	ldr	r2, [pc, #36]	; (8005914 <USB_CoreReset+0x64>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d901      	bls.n	80058f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e006      	b.n	8005906 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b01      	cmp	r3, #1
 8005902:	d0f0      	beq.n	80058e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	00030d40 	.word	0x00030d40

08005918 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	460b      	mov	r3, r1
 8005922:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005924:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005928:	f002 fca2 	bl	8008270 <USBD_static_malloc>
 800592c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d109      	bne.n	8005948 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	32b0      	adds	r2, #176	; 0xb0
 800593e:	2100      	movs	r1, #0
 8005940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005944:	2302      	movs	r3, #2
 8005946:	e0d4      	b.n	8005af2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005948:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800594c:	2100      	movs	r1, #0
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f002 fcd2 	bl	80082f8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	32b0      	adds	r2, #176	; 0xb0
 800595e:	68f9      	ldr	r1, [r7, #12]
 8005960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	32b0      	adds	r2, #176	; 0xb0
 800596e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	7c1b      	ldrb	r3, [r3, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d138      	bne.n	80059f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005980:	4b5e      	ldr	r3, [pc, #376]	; (8005afc <USBD_CDC_Init+0x1e4>)
 8005982:	7819      	ldrb	r1, [r3, #0]
 8005984:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005988:	2202      	movs	r2, #2
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f002 fb4d 	bl	800802a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005990:	4b5a      	ldr	r3, [pc, #360]	; (8005afc <USBD_CDC_Init+0x1e4>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	f003 020f 	and.w	r2, r3, #15
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	4613      	mov	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	440b      	add	r3, r1
 80059a4:	3324      	adds	r3, #36	; 0x24
 80059a6:	2201      	movs	r2, #1
 80059a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80059aa:	4b55      	ldr	r3, [pc, #340]	; (8005b00 <USBD_CDC_Init+0x1e8>)
 80059ac:	7819      	ldrb	r1, [r3, #0]
 80059ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059b2:	2202      	movs	r2, #2
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f002 fb38 	bl	800802a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80059ba:	4b51      	ldr	r3, [pc, #324]	; (8005b00 <USBD_CDC_Init+0x1e8>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	f003 020f 	and.w	r2, r3, #15
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	4613      	mov	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	440b      	add	r3, r1
 80059ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80059d2:	2201      	movs	r2, #1
 80059d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80059d6:	4b4b      	ldr	r3, [pc, #300]	; (8005b04 <USBD_CDC_Init+0x1ec>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	f003 020f 	and.w	r2, r3, #15
 80059de:	6879      	ldr	r1, [r7, #4]
 80059e0:	4613      	mov	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	440b      	add	r3, r1
 80059ea:	3326      	adds	r3, #38	; 0x26
 80059ec:	2210      	movs	r2, #16
 80059ee:	801a      	strh	r2, [r3, #0]
 80059f0:	e035      	b.n	8005a5e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80059f2:	4b42      	ldr	r3, [pc, #264]	; (8005afc <USBD_CDC_Init+0x1e4>)
 80059f4:	7819      	ldrb	r1, [r3, #0]
 80059f6:	2340      	movs	r3, #64	; 0x40
 80059f8:	2202      	movs	r2, #2
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f002 fb15 	bl	800802a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005a00:	4b3e      	ldr	r3, [pc, #248]	; (8005afc <USBD_CDC_Init+0x1e4>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	f003 020f 	and.w	r2, r3, #15
 8005a08:	6879      	ldr	r1, [r7, #4]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	440b      	add	r3, r1
 8005a14:	3324      	adds	r3, #36	; 0x24
 8005a16:	2201      	movs	r2, #1
 8005a18:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005a1a:	4b39      	ldr	r3, [pc, #228]	; (8005b00 <USBD_CDC_Init+0x1e8>)
 8005a1c:	7819      	ldrb	r1, [r3, #0]
 8005a1e:	2340      	movs	r3, #64	; 0x40
 8005a20:	2202      	movs	r2, #2
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f002 fb01 	bl	800802a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005a28:	4b35      	ldr	r3, [pc, #212]	; (8005b00 <USBD_CDC_Init+0x1e8>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	f003 020f 	and.w	r2, r3, #15
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	4613      	mov	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	440b      	add	r3, r1
 8005a3c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a40:	2201      	movs	r2, #1
 8005a42:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005a44:	4b2f      	ldr	r3, [pc, #188]	; (8005b04 <USBD_CDC_Init+0x1ec>)
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	f003 020f 	and.w	r2, r3, #15
 8005a4c:	6879      	ldr	r1, [r7, #4]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	440b      	add	r3, r1
 8005a58:	3326      	adds	r3, #38	; 0x26
 8005a5a:	2210      	movs	r2, #16
 8005a5c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a5e:	4b29      	ldr	r3, [pc, #164]	; (8005b04 <USBD_CDC_Init+0x1ec>)
 8005a60:	7819      	ldrb	r1, [r3, #0]
 8005a62:	2308      	movs	r3, #8
 8005a64:	2203      	movs	r2, #3
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f002 fadf 	bl	800802a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005a6c:	4b25      	ldr	r3, [pc, #148]	; (8005b04 <USBD_CDC_Init+0x1ec>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	f003 020f 	and.w	r2, r3, #15
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	4613      	mov	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	440b      	add	r3, r1
 8005a80:	3324      	adds	r3, #36	; 0x24
 8005a82:	2201      	movs	r2, #1
 8005a84:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	33b0      	adds	r3, #176	; 0xb0
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005abc:	2302      	movs	r3, #2
 8005abe:	e018      	b.n	8005af2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	7c1b      	ldrb	r3, [r3, #16]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10a      	bne.n	8005ade <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ac8:	4b0d      	ldr	r3, [pc, #52]	; (8005b00 <USBD_CDC_Init+0x1e8>)
 8005aca:	7819      	ldrb	r1, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f002 fb96 	bl	8008208 <USBD_LL_PrepareReceive>
 8005adc:	e008      	b.n	8005af0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ade:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <USBD_CDC_Init+0x1e8>)
 8005ae0:	7819      	ldrb	r1, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ae8:	2340      	movs	r3, #64	; 0x40
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f002 fb8c 	bl	8008208 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20000093 	.word	0x20000093
 8005b00:	20000094 	.word	0x20000094
 8005b04:	20000095 	.word	0x20000095

08005b08 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	460b      	mov	r3, r1
 8005b12:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005b14:	4b3a      	ldr	r3, [pc, #232]	; (8005c00 <USBD_CDC_DeInit+0xf8>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	4619      	mov	r1, r3
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f002 faab 	bl	8008076 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005b20:	4b37      	ldr	r3, [pc, #220]	; (8005c00 <USBD_CDC_DeInit+0xf8>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	f003 020f 	and.w	r2, r3, #15
 8005b28:	6879      	ldr	r1, [r7, #4]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	440b      	add	r3, r1
 8005b34:	3324      	adds	r3, #36	; 0x24
 8005b36:	2200      	movs	r2, #0
 8005b38:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005b3a:	4b32      	ldr	r3, [pc, #200]	; (8005c04 <USBD_CDC_DeInit+0xfc>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f002 fa98 	bl	8008076 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005b46:	4b2f      	ldr	r3, [pc, #188]	; (8005c04 <USBD_CDC_DeInit+0xfc>)
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	f003 020f 	and.w	r2, r3, #15
 8005b4e:	6879      	ldr	r1, [r7, #4]
 8005b50:	4613      	mov	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	440b      	add	r3, r1
 8005b5a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b5e:	2200      	movs	r2, #0
 8005b60:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005b62:	4b29      	ldr	r3, [pc, #164]	; (8005c08 <USBD_CDC_DeInit+0x100>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	4619      	mov	r1, r3
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f002 fa84 	bl	8008076 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005b6e:	4b26      	ldr	r3, [pc, #152]	; (8005c08 <USBD_CDC_DeInit+0x100>)
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	f003 020f 	and.w	r2, r3, #15
 8005b76:	6879      	ldr	r1, [r7, #4]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	440b      	add	r3, r1
 8005b82:	3324      	adds	r3, #36	; 0x24
 8005b84:	2200      	movs	r2, #0
 8005b86:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005b88:	4b1f      	ldr	r3, [pc, #124]	; (8005c08 <USBD_CDC_DeInit+0x100>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	f003 020f 	and.w	r2, r3, #15
 8005b90:	6879      	ldr	r1, [r7, #4]
 8005b92:	4613      	mov	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	440b      	add	r3, r1
 8005b9c:	3326      	adds	r3, #38	; 0x26
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	32b0      	adds	r2, #176	; 0xb0
 8005bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d01f      	beq.n	8005bf4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	33b0      	adds	r3, #176	; 0xb0
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	32b0      	adds	r2, #176	; 0xb0
 8005bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f002 fb58 	bl	800828c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	32b0      	adds	r2, #176	; 0xb0
 8005be6:	2100      	movs	r1, #0
 8005be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20000093 	.word	0x20000093
 8005c04:	20000094 	.word	0x20000094
 8005c08:	20000095 	.word	0x20000095

08005c0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	32b0      	adds	r2, #176	; 0xb0
 8005c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c24:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e0bf      	b.n	8005dbc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d050      	beq.n	8005cea <USBD_CDC_Setup+0xde>
 8005c48:	2b20      	cmp	r3, #32
 8005c4a:	f040 80af 	bne.w	8005dac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	88db      	ldrh	r3, [r3, #6]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d03a      	beq.n	8005ccc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	b25b      	sxtb	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	da1b      	bge.n	8005c98 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	33b0      	adds	r3, #176	; 0xb0
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005c76:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	88d2      	ldrh	r2, [r2, #6]
 8005c7c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	88db      	ldrh	r3, [r3, #6]
 8005c82:	2b07      	cmp	r3, #7
 8005c84:	bf28      	it	cs
 8005c86:	2307      	movcs	r3, #7
 8005c88:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	89fa      	ldrh	r2, [r7, #14]
 8005c8e:	4619      	mov	r1, r3
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f001 fd89 	bl	80077a8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005c96:	e090      	b.n	8005dba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	785a      	ldrb	r2, [r3, #1]
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	88db      	ldrh	r3, [r3, #6]
 8005ca6:	2b3f      	cmp	r3, #63	; 0x3f
 8005ca8:	d803      	bhi.n	8005cb2 <USBD_CDC_Setup+0xa6>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	88db      	ldrh	r3, [r3, #6]
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	e000      	b.n	8005cb4 <USBD_CDC_Setup+0xa8>
 8005cb2:	2240      	movs	r2, #64	; 0x40
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005cba:	6939      	ldr	r1, [r7, #16]
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f001 fd9b 	bl	8007800 <USBD_CtlPrepareRx>
      break;
 8005cca:	e076      	b.n	8005dba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	33b0      	adds	r3, #176	; 0xb0
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	7850      	ldrb	r0, [r2, #1]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	6839      	ldr	r1, [r7, #0]
 8005ce6:	4798      	blx	r3
      break;
 8005ce8:	e067      	b.n	8005dba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	785b      	ldrb	r3, [r3, #1]
 8005cee:	2b0b      	cmp	r3, #11
 8005cf0:	d851      	bhi.n	8005d96 <USBD_CDC_Setup+0x18a>
 8005cf2:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <USBD_CDC_Setup+0xec>)
 8005cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf8:	08005d29 	.word	0x08005d29
 8005cfc:	08005da5 	.word	0x08005da5
 8005d00:	08005d97 	.word	0x08005d97
 8005d04:	08005d97 	.word	0x08005d97
 8005d08:	08005d97 	.word	0x08005d97
 8005d0c:	08005d97 	.word	0x08005d97
 8005d10:	08005d97 	.word	0x08005d97
 8005d14:	08005d97 	.word	0x08005d97
 8005d18:	08005d97 	.word	0x08005d97
 8005d1c:	08005d97 	.word	0x08005d97
 8005d20:	08005d53 	.word	0x08005d53
 8005d24:	08005d7d 	.word	0x08005d7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d107      	bne.n	8005d44 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d34:	f107 030a 	add.w	r3, r7, #10
 8005d38:	2202      	movs	r2, #2
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f001 fd33 	bl	80077a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d42:	e032      	b.n	8005daa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d44:	6839      	ldr	r1, [r7, #0]
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f001 fcbd 	bl	80076c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	75fb      	strb	r3, [r7, #23]
          break;
 8005d50:	e02b      	b.n	8005daa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b03      	cmp	r3, #3
 8005d5c:	d107      	bne.n	8005d6e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005d5e:	f107 030d 	add.w	r3, r7, #13
 8005d62:	2201      	movs	r2, #1
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f001 fd1e 	bl	80077a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d6c:	e01d      	b.n	8005daa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d6e:	6839      	ldr	r1, [r7, #0]
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f001 fca8 	bl	80076c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d76:	2303      	movs	r3, #3
 8005d78:	75fb      	strb	r3, [r7, #23]
          break;
 8005d7a:	e016      	b.n	8005daa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b03      	cmp	r3, #3
 8005d86:	d00f      	beq.n	8005da8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005d88:	6839      	ldr	r1, [r7, #0]
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f001 fc9b 	bl	80076c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d90:	2303      	movs	r3, #3
 8005d92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005d94:	e008      	b.n	8005da8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005d96:	6839      	ldr	r1, [r7, #0]
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f001 fc94 	bl	80076c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	75fb      	strb	r3, [r7, #23]
          break;
 8005da2:	e002      	b.n	8005daa <USBD_CDC_Setup+0x19e>
          break;
 8005da4:	bf00      	nop
 8005da6:	e008      	b.n	8005dba <USBD_CDC_Setup+0x1ae>
          break;
 8005da8:	bf00      	nop
      }
      break;
 8005daa:	e006      	b.n	8005dba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005dac:	6839      	ldr	r1, [r7, #0]
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f001 fc89 	bl	80076c6 <USBD_CtlError>
      ret = USBD_FAIL;
 8005db4:	2303      	movs	r3, #3
 8005db6:	75fb      	strb	r3, [r7, #23]
      break;
 8005db8:	bf00      	nop
  }

  return (uint8_t)ret;
 8005dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005dd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	32b0      	adds	r2, #176	; 0xb0
 8005de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e065      	b.n	8005eba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	32b0      	adds	r2, #176	; 0xb0
 8005df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dfc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005dfe:	78fb      	ldrb	r3, [r7, #3]
 8005e00:	f003 020f 	and.w	r2, r3, #15
 8005e04:	6879      	ldr	r1, [r7, #4]
 8005e06:	4613      	mov	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	440b      	add	r3, r1
 8005e10:	3318      	adds	r3, #24
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d02f      	beq.n	8005e78 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	f003 020f 	and.w	r2, r3, #15
 8005e1e:	6879      	ldr	r1, [r7, #4]
 8005e20:	4613      	mov	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	440b      	add	r3, r1
 8005e2a:	3318      	adds	r3, #24
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	78fb      	ldrb	r3, [r7, #3]
 8005e30:	f003 010f 	and.w	r1, r3, #15
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	460b      	mov	r3, r1
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	440b      	add	r3, r1
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4403      	add	r3, r0
 8005e40:	3348      	adds	r3, #72	; 0x48
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	fbb2 f1f3 	udiv	r1, r2, r3
 8005e48:	fb01 f303 	mul.w	r3, r1, r3
 8005e4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d112      	bne.n	8005e78 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005e52:	78fb      	ldrb	r3, [r7, #3]
 8005e54:	f003 020f 	and.w	r2, r3, #15
 8005e58:	6879      	ldr	r1, [r7, #4]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	440b      	add	r3, r1
 8005e64:	3318      	adds	r3, #24
 8005e66:	2200      	movs	r2, #0
 8005e68:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005e6a:	78f9      	ldrb	r1, [r7, #3]
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	2200      	movs	r2, #0
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f002 f9a8 	bl	80081c6 <USBD_LL_Transmit>
 8005e76:	e01f      	b.n	8005eb8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	33b0      	adds	r3, #176	; 0xb0
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d010      	beq.n	8005eb8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	33b0      	adds	r3, #176	; 0xb0
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005eb4:	78fa      	ldrb	r2, [r7, #3]
 8005eb6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b084      	sub	sp, #16
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
 8005eca:	460b      	mov	r3, r1
 8005ecc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	32b0      	adds	r2, #176	; 0xb0
 8005ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005edc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	32b0      	adds	r2, #176	; 0xb0
 8005ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e01a      	b.n	8005f2a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ef4:	78fb      	ldrb	r3, [r7, #3]
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f002 f9a6 	bl	800824a <USBD_LL_GetRxDataSize>
 8005efe:	4602      	mov	r2, r0
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	33b0      	adds	r3, #176	; 0xb0
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005f24:	4611      	mov	r1, r2
 8005f26:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b084      	sub	sp, #16
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	32b0      	adds	r2, #176	; 0xb0
 8005f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e025      	b.n	8005fa0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	33b0      	adds	r3, #176	; 0xb0
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d01a      	beq.n	8005f9e <USBD_CDC_EP0_RxReady+0x6c>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005f6e:	2bff      	cmp	r3, #255	; 0xff
 8005f70:	d015      	beq.n	8005f9e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	33b0      	adds	r3, #176	; 0xb0
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005f8a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f92:	b292      	uxth	r2, r2
 8005f94:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	22ff      	movs	r2, #255	; 0xff
 8005f9a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005fb0:	2182      	movs	r1, #130	; 0x82
 8005fb2:	4818      	ldr	r0, [pc, #96]	; (8006014 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005fb4:	f000 fd4f 	bl	8006a56 <USBD_GetEpDesc>
 8005fb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005fba:	2101      	movs	r1, #1
 8005fbc:	4815      	ldr	r0, [pc, #84]	; (8006014 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005fbe:	f000 fd4a 	bl	8006a56 <USBD_GetEpDesc>
 8005fc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005fc4:	2181      	movs	r1, #129	; 0x81
 8005fc6:	4813      	ldr	r0, [pc, #76]	; (8006014 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005fc8:	f000 fd45 	bl	8006a56 <USBD_GetEpDesc>
 8005fcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d002      	beq.n	8005fda <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	2210      	movs	r2, #16
 8005fd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d006      	beq.n	8005fee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fe8:	711a      	strb	r2, [r3, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d006      	beq.n	8006002 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ffc:	711a      	strb	r2, [r3, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2243      	movs	r2, #67	; 0x43
 8006006:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006008:	4b02      	ldr	r3, [pc, #8]	; (8006014 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800600a:	4618      	mov	r0, r3
 800600c:	3718      	adds	r7, #24
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	20000050 	.word	0x20000050

08006018 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006020:	2182      	movs	r1, #130	; 0x82
 8006022:	4818      	ldr	r0, [pc, #96]	; (8006084 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006024:	f000 fd17 	bl	8006a56 <USBD_GetEpDesc>
 8006028:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800602a:	2101      	movs	r1, #1
 800602c:	4815      	ldr	r0, [pc, #84]	; (8006084 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800602e:	f000 fd12 	bl	8006a56 <USBD_GetEpDesc>
 8006032:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006034:	2181      	movs	r1, #129	; 0x81
 8006036:	4813      	ldr	r0, [pc, #76]	; (8006084 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006038:	f000 fd0d 	bl	8006a56 <USBD_GetEpDesc>
 800603c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d002      	beq.n	800604a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	2210      	movs	r2, #16
 8006048:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d006      	beq.n	800605e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	2200      	movs	r2, #0
 8006054:	711a      	strb	r2, [r3, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f042 0202 	orr.w	r2, r2, #2
 800605c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d006      	beq.n	8006072 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	711a      	strb	r2, [r3, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f042 0202 	orr.w	r2, r2, #2
 8006070:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2243      	movs	r2, #67	; 0x43
 8006076:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006078:	4b02      	ldr	r3, [pc, #8]	; (8006084 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	20000050 	.word	0x20000050

08006088 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006090:	2182      	movs	r1, #130	; 0x82
 8006092:	4818      	ldr	r0, [pc, #96]	; (80060f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006094:	f000 fcdf 	bl	8006a56 <USBD_GetEpDesc>
 8006098:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800609a:	2101      	movs	r1, #1
 800609c:	4815      	ldr	r0, [pc, #84]	; (80060f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800609e:	f000 fcda 	bl	8006a56 <USBD_GetEpDesc>
 80060a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80060a4:	2181      	movs	r1, #129	; 0x81
 80060a6:	4813      	ldr	r0, [pc, #76]	; (80060f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80060a8:	f000 fcd5 	bl	8006a56 <USBD_GetEpDesc>
 80060ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	2210      	movs	r2, #16
 80060b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d006      	beq.n	80060ce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060c8:	711a      	strb	r2, [r3, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d006      	beq.n	80060e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060dc:	711a      	strb	r2, [r3, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2243      	movs	r2, #67	; 0x43
 80060e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80060e8:	4b02      	ldr	r3, [pc, #8]	; (80060f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	20000050 	.word	0x20000050

080060f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	220a      	movs	r2, #10
 8006104:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006106:	4b03      	ldr	r3, [pc, #12]	; (8006114 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006108:	4618      	mov	r0, r3
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	2000000c 	.word	0x2000000c

08006118 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006128:	2303      	movs	r3, #3
 800612a:	e009      	b.n	8006140 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	33b0      	adds	r3, #176	; 0xb0
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	32b0      	adds	r2, #176	; 0xb0
 8006162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006166:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800616e:	2303      	movs	r3, #3
 8006170:	e008      	b.n	8006184 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	371c      	adds	r7, #28
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	32b0      	adds	r2, #176	; 0xb0
 80061a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e004      	b.n	80061be <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
	...

080061cc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	32b0      	adds	r2, #176	; 0xb0
 80061de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80061e4:	2301      	movs	r3, #1
 80061e6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	32b0      	adds	r2, #176	; 0xb0
 80061f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e025      	b.n	800624a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006204:	2b00      	cmp	r3, #0
 8006206:	d11f      	bne.n	8006248 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2201      	movs	r2, #1
 800620c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006210:	4b10      	ldr	r3, [pc, #64]	; (8006254 <USBD_CDC_TransmitPacket+0x88>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	f003 020f 	and.w	r2, r3, #15
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4403      	add	r3, r0
 800622a:	3318      	adds	r3, #24
 800622c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800622e:	4b09      	ldr	r3, [pc, #36]	; (8006254 <USBD_CDC_TransmitPacket+0x88>)
 8006230:	7819      	ldrb	r1, [r3, #0]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f001 ffc1 	bl	80081c6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006248:	7bfb      	ldrb	r3, [r7, #15]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	20000093 	.word	0x20000093

08006258 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	32b0      	adds	r2, #176	; 0xb0
 800626a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800626e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	32b0      	adds	r2, #176	; 0xb0
 800627a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006282:	2303      	movs	r3, #3
 8006284:	e018      	b.n	80062b8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	7c1b      	ldrb	r3, [r3, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10a      	bne.n	80062a4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800628e:	4b0c      	ldr	r3, [pc, #48]	; (80062c0 <USBD_CDC_ReceivePacket+0x68>)
 8006290:	7819      	ldrb	r1, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f001 ffb3 	bl	8008208 <USBD_LL_PrepareReceive>
 80062a2:	e008      	b.n	80062b6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80062a4:	4b06      	ldr	r3, [pc, #24]	; (80062c0 <USBD_CDC_ReceivePacket+0x68>)
 80062a6:	7819      	ldrb	r1, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062ae:	2340      	movs	r3, #64	; 0x40
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f001 ffa9 	bl	8008208 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	20000094 	.word	0x20000094

080062c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	4613      	mov	r3, r2
 80062d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80062d8:	2303      	movs	r3, #3
 80062da:	e01f      	b.n	800631c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	79fa      	ldrb	r2, [r7, #7]
 800630e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f001 fe23 	bl	8007f5c <USBD_LL_Init>
 8006316:	4603      	mov	r3, r0
 8006318:	75fb      	strb	r3, [r7, #23]

  return ret;
 800631a:	7dfb      	ldrb	r3, [r7, #23]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006338:	2303      	movs	r3, #3
 800633a:	e025      	b.n	8006388 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	32ae      	adds	r2, #174	; 0xae
 800634e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00f      	beq.n	8006378 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	32ae      	adds	r2, #174	; 0xae
 8006362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006368:	f107 020e 	add.w	r2, r7, #14
 800636c:	4610      	mov	r0, r2
 800636e:	4798      	blx	r3
 8006370:	4602      	mov	r2, r0
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800637e:	1c5a      	adds	r2, r3, #1
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f001 fe2b 	bl	8007ff4 <USBD_LL_Start>
 800639e:	4603      	mov	r3, r0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b084      	sub	sp, #16
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	460b      	mov	r3, r1
 80063c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80063ca:	2300      	movs	r3, #0
 80063cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d009      	beq.n	80063ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	78fa      	ldrb	r2, [r7, #3]
 80063e2:	4611      	mov	r1, r2
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	4798      	blx	r3
 80063e8:	4603      	mov	r3, r0
 80063ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b084      	sub	sp, #16
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	460b      	mov	r3, r1
 8006400:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006402:	2300      	movs	r3, #0
 8006404:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	78fa      	ldrb	r2, [r7, #3]
 8006410:	4611      	mov	r1, r2
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	4798      	blx	r3
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800641c:	2303      	movs	r3, #3
 800641e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006420:	7bfb      	ldrb	r3, [r7, #15]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b084      	sub	sp, #16
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
 8006432:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	4618      	mov	r0, r3
 800643e:	f001 f908 	bl	8007652 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006450:	461a      	mov	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800645e:	f003 031f 	and.w	r3, r3, #31
 8006462:	2b02      	cmp	r3, #2
 8006464:	d01a      	beq.n	800649c <USBD_LL_SetupStage+0x72>
 8006466:	2b02      	cmp	r3, #2
 8006468:	d822      	bhi.n	80064b0 <USBD_LL_SetupStage+0x86>
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <USBD_LL_SetupStage+0x4a>
 800646e:	2b01      	cmp	r3, #1
 8006470:	d00a      	beq.n	8006488 <USBD_LL_SetupStage+0x5e>
 8006472:	e01d      	b.n	80064b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fb5f 	bl	8006b40 <USBD_StdDevReq>
 8006482:	4603      	mov	r3, r0
 8006484:	73fb      	strb	r3, [r7, #15]
      break;
 8006486:	e020      	b.n	80064ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800648e:	4619      	mov	r1, r3
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fbc7 	bl	8006c24 <USBD_StdItfReq>
 8006496:	4603      	mov	r3, r0
 8006498:	73fb      	strb	r3, [r7, #15]
      break;
 800649a:	e016      	b.n	80064ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064a2:	4619      	mov	r1, r3
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fc29 	bl	8006cfc <USBD_StdEPReq>
 80064aa:	4603      	mov	r3, r0
 80064ac:	73fb      	strb	r3, [r7, #15]
      break;
 80064ae:	e00c      	b.n	80064ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	4619      	mov	r1, r3
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f001 fdf8 	bl	80080b4 <USBD_LL_StallEP>
 80064c4:	4603      	mov	r3, r0
 80064c6:	73fb      	strb	r3, [r7, #15]
      break;
 80064c8:	bf00      	nop
  }

  return ret;
 80064ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	460b      	mov	r3, r1
 80064de:	607a      	str	r2, [r7, #4]
 80064e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80064e6:	7afb      	ldrb	r3, [r7, #11]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d16e      	bne.n	80065ca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80064f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064fa:	2b03      	cmp	r3, #3
 80064fc:	f040 8098 	bne.w	8006630 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	429a      	cmp	r2, r3
 800650a:	d913      	bls.n	8006534 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	689a      	ldr	r2, [r3, #8]
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	1ad2      	subs	r2, r2, r3
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	68da      	ldr	r2, [r3, #12]
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	4293      	cmp	r3, r2
 8006524:	bf28      	it	cs
 8006526:	4613      	movcs	r3, r2
 8006528:	461a      	mov	r2, r3
 800652a:	6879      	ldr	r1, [r7, #4]
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f001 f984 	bl	800783a <USBD_CtlContinueRx>
 8006532:	e07d      	b.n	8006630 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800653a:	f003 031f 	and.w	r3, r3, #31
 800653e:	2b02      	cmp	r3, #2
 8006540:	d014      	beq.n	800656c <USBD_LL_DataOutStage+0x98>
 8006542:	2b02      	cmp	r3, #2
 8006544:	d81d      	bhi.n	8006582 <USBD_LL_DataOutStage+0xae>
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <USBD_LL_DataOutStage+0x7c>
 800654a:	2b01      	cmp	r3, #1
 800654c:	d003      	beq.n	8006556 <USBD_LL_DataOutStage+0x82>
 800654e:	e018      	b.n	8006582 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	75bb      	strb	r3, [r7, #22]
            break;
 8006554:	e018      	b.n	8006588 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800655c:	b2db      	uxtb	r3, r3
 800655e:	4619      	mov	r1, r3
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f000 fa5e 	bl	8006a22 <USBD_CoreFindIF>
 8006566:	4603      	mov	r3, r0
 8006568:	75bb      	strb	r3, [r7, #22]
            break;
 800656a:	e00d      	b.n	8006588 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006572:	b2db      	uxtb	r3, r3
 8006574:	4619      	mov	r1, r3
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 fa60 	bl	8006a3c <USBD_CoreFindEP>
 800657c:	4603      	mov	r3, r0
 800657e:	75bb      	strb	r3, [r7, #22]
            break;
 8006580:	e002      	b.n	8006588 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	75bb      	strb	r3, [r7, #22]
            break;
 8006586:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006588:	7dbb      	ldrb	r3, [r7, #22]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d119      	bne.n	80065c2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b03      	cmp	r3, #3
 8006598:	d113      	bne.n	80065c2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800659a:	7dba      	ldrb	r2, [r7, #22]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	32ae      	adds	r2, #174	; 0xae
 80065a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00b      	beq.n	80065c2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80065aa:	7dba      	ldrb	r2, [r7, #22]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80065b2:	7dba      	ldrb	r2, [r7, #22]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	32ae      	adds	r2, #174	; 0xae
 80065b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f001 f94a 	bl	800785c <USBD_CtlSendStatus>
 80065c8:	e032      	b.n	8006630 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80065ca:	7afb      	ldrb	r3, [r7, #11]
 80065cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	4619      	mov	r1, r3
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 fa31 	bl	8006a3c <USBD_CoreFindEP>
 80065da:	4603      	mov	r3, r0
 80065dc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065de:	7dbb      	ldrb	r3, [r7, #22]
 80065e0:	2bff      	cmp	r3, #255	; 0xff
 80065e2:	d025      	beq.n	8006630 <USBD_LL_DataOutStage+0x15c>
 80065e4:	7dbb      	ldrb	r3, [r7, #22]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d122      	bne.n	8006630 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d117      	bne.n	8006626 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80065f6:	7dba      	ldrb	r2, [r7, #22]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	32ae      	adds	r2, #174	; 0xae
 80065fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00f      	beq.n	8006626 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006606:	7dba      	ldrb	r2, [r7, #22]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800660e:	7dba      	ldrb	r2, [r7, #22]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	32ae      	adds	r2, #174	; 0xae
 8006614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	7afa      	ldrb	r2, [r7, #11]
 800661c:	4611      	mov	r1, r2
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	4798      	blx	r3
 8006622:	4603      	mov	r3, r0
 8006624:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006626:	7dfb      	ldrb	r3, [r7, #23]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800662c:	7dfb      	ldrb	r3, [r7, #23]
 800662e:	e000      	b.n	8006632 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b086      	sub	sp, #24
 800663e:	af00      	add	r7, sp, #0
 8006640:	60f8      	str	r0, [r7, #12]
 8006642:	460b      	mov	r3, r1
 8006644:	607a      	str	r2, [r7, #4]
 8006646:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006648:	7afb      	ldrb	r3, [r7, #11]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d16f      	bne.n	800672e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3314      	adds	r3, #20
 8006652:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800665a:	2b02      	cmp	r3, #2
 800665c:	d15a      	bne.n	8006714 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	689a      	ldr	r2, [r3, #8]
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	429a      	cmp	r2, r3
 8006668:	d914      	bls.n	8006694 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	1ad2      	subs	r2, r2, r3
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	461a      	mov	r2, r3
 800667e:	6879      	ldr	r1, [r7, #4]
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f001 f8ac 	bl	80077de <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006686:	2300      	movs	r3, #0
 8006688:	2200      	movs	r2, #0
 800668a:	2100      	movs	r1, #0
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f001 fdbb 	bl	8008208 <USBD_LL_PrepareReceive>
 8006692:	e03f      	b.n	8006714 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	68da      	ldr	r2, [r3, #12]
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	429a      	cmp	r2, r3
 800669e:	d11c      	bne.n	80066da <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d316      	bcc.n	80066da <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d20f      	bcs.n	80066da <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80066ba:	2200      	movs	r2, #0
 80066bc:	2100      	movs	r1, #0
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f001 f88d 	bl	80077de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066cc:	2300      	movs	r3, #0
 80066ce:	2200      	movs	r2, #0
 80066d0:	2100      	movs	r1, #0
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f001 fd98 	bl	8008208 <USBD_LL_PrepareReceive>
 80066d8:	e01c      	b.n	8006714 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b03      	cmp	r3, #3
 80066e4:	d10f      	bne.n	8006706 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d009      	beq.n	8006706 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006706:	2180      	movs	r1, #128	; 0x80
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f001 fcd3 	bl	80080b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f001 f8b7 	bl	8007882 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d03a      	beq.n	8006794 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f7ff fe42 	bl	80063a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800672c:	e032      	b.n	8006794 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800672e:	7afb      	ldrb	r3, [r7, #11]
 8006730:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006734:	b2db      	uxtb	r3, r3
 8006736:	4619      	mov	r1, r3
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 f97f 	bl	8006a3c <USBD_CoreFindEP>
 800673e:	4603      	mov	r3, r0
 8006740:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006742:	7dfb      	ldrb	r3, [r7, #23]
 8006744:	2bff      	cmp	r3, #255	; 0xff
 8006746:	d025      	beq.n	8006794 <USBD_LL_DataInStage+0x15a>
 8006748:	7dfb      	ldrb	r3, [r7, #23]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d122      	bne.n	8006794 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b03      	cmp	r3, #3
 8006758:	d11c      	bne.n	8006794 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800675a:	7dfa      	ldrb	r2, [r7, #23]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	32ae      	adds	r2, #174	; 0xae
 8006760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d014      	beq.n	8006794 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800676a:	7dfa      	ldrb	r2, [r7, #23]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006772:	7dfa      	ldrb	r2, [r7, #23]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	32ae      	adds	r2, #174	; 0xae
 8006778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	7afa      	ldrb	r2, [r7, #11]
 8006780:	4611      	mov	r1, r2
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	4798      	blx	r3
 8006786:	4603      	mov	r3, r0
 8006788:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800678a:	7dbb      	ldrb	r3, [r7, #22]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006790:	7dbb      	ldrb	r3, [r7, #22]
 8006792:	e000      	b.n	8006796 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3718      	adds	r7, #24
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b084      	sub	sp, #16
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80067a6:	2300      	movs	r3, #0
 80067a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d014      	beq.n	8006804 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00e      	beq.n	8006804 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	6852      	ldr	r2, [r2, #4]
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	4611      	mov	r1, r2
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	4798      	blx	r3
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006800:	2303      	movs	r3, #3
 8006802:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006804:	2340      	movs	r3, #64	; 0x40
 8006806:	2200      	movs	r2, #0
 8006808:	2100      	movs	r1, #0
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f001 fc0d 	bl	800802a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2240      	movs	r2, #64	; 0x40
 800681c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006820:	2340      	movs	r3, #64	; 0x40
 8006822:	2200      	movs	r2, #0
 8006824:	2180      	movs	r1, #128	; 0x80
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f001 fbff 	bl	800802a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2240      	movs	r2, #64	; 0x40
 8006836:	621a      	str	r2, [r3, #32]

  return ret;
 8006838:	7bfb      	ldrb	r3, [r7, #15]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	460b      	mov	r3, r1
 800684c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	78fa      	ldrb	r2, [r7, #3]
 8006852:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006862:	b480      	push	{r7}
 8006864:	b083      	sub	sp, #12
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006870:	b2da      	uxtb	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2204      	movs	r2, #4
 800687c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d106      	bne.n	80068b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b082      	sub	sp, #8
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b03      	cmp	r3, #3
 80068d0:	d110      	bne.n	80068f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00b      	beq.n	80068f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d005      	beq.n	80068f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b082      	sub	sp, #8
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	460b      	mov	r3, r1
 8006908:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	32ae      	adds	r2, #174	; 0xae
 8006914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800691c:	2303      	movs	r3, #3
 800691e:	e01c      	b.n	800695a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b03      	cmp	r3, #3
 800692a:	d115      	bne.n	8006958 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	32ae      	adds	r2, #174	; 0xae
 8006936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00b      	beq.n	8006958 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	32ae      	adds	r2, #174	; 0xae
 800694a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800694e:	6a1b      	ldr	r3, [r3, #32]
 8006950:	78fa      	ldrb	r2, [r7, #3]
 8006952:	4611      	mov	r1, r2
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b082      	sub	sp, #8
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	460b      	mov	r3, r1
 800696c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	32ae      	adds	r2, #174	; 0xae
 8006978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d101      	bne.n	8006984 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006980:	2303      	movs	r3, #3
 8006982:	e01c      	b.n	80069be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b03      	cmp	r3, #3
 800698e:	d115      	bne.n	80069bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	32ae      	adds	r2, #174	; 0xae
 800699a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00b      	beq.n	80069bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	32ae      	adds	r2, #174	; 0xae
 80069ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	78fa      	ldrb	r2, [r7, #3]
 80069b6:	4611      	mov	r1, r2
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b083      	sub	sp, #12
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00e      	beq.n	8006a18 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	6852      	ldr	r2, [r2, #4]
 8006a06:	b2d2      	uxtb	r2, r2
 8006a08:	4611      	mov	r1, r2
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	4798      	blx	r3
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006a14:	2303      	movs	r3, #3
 8006a16:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a2e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a48:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b086      	sub	sp, #24
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	460b      	mov	r3, r1
 8006a60:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	885b      	ldrh	r3, [r3, #2]
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d920      	bls.n	8006ac0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006a86:	e013      	b.n	8006ab0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006a88:	f107 030a 	add.w	r3, r7, #10
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6978      	ldr	r0, [r7, #20]
 8006a90:	f000 f81b 	bl	8006aca <USBD_GetNextDesc>
 8006a94:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	785b      	ldrb	r3, [r3, #1]
 8006a9a:	2b05      	cmp	r3, #5
 8006a9c:	d108      	bne.n	8006ab0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	789b      	ldrb	r3, [r3, #2]
 8006aa6:	78fa      	ldrb	r2, [r7, #3]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d008      	beq.n	8006abe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006aac:	2300      	movs	r3, #0
 8006aae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	885b      	ldrh	r3, [r3, #2]
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	897b      	ldrh	r3, [r7, #10]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d8e5      	bhi.n	8006a88 <USBD_GetEpDesc+0x32>
 8006abc:	e000      	b.n	8006ac0 <USBD_GetEpDesc+0x6a>
          break;
 8006abe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006ac0:	693b      	ldr	r3, [r7, #16]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b085      	sub	sp, #20
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	881a      	ldrh	r2, [r3, #0]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	4413      	add	r3, r2
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4413      	add	r3, r2
 8006af4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006af6:	68fb      	ldr	r3, [r7, #12]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006b22:	8a3b      	ldrh	r3, [r7, #16]
 8006b24:	021b      	lsls	r3, r3, #8
 8006b26:	b21a      	sxth	r2, r3
 8006b28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	b21b      	sxth	r3, r3
 8006b30:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006b32:	89fb      	ldrh	r3, [r7, #14]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	371c      	adds	r7, #28
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b56:	2b40      	cmp	r3, #64	; 0x40
 8006b58:	d005      	beq.n	8006b66 <USBD_StdDevReq+0x26>
 8006b5a:	2b40      	cmp	r3, #64	; 0x40
 8006b5c:	d857      	bhi.n	8006c0e <USBD_StdDevReq+0xce>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00f      	beq.n	8006b82 <USBD_StdDevReq+0x42>
 8006b62:	2b20      	cmp	r3, #32
 8006b64:	d153      	bne.n	8006c0e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	32ae      	adds	r2, #174	; 0xae
 8006b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	4798      	blx	r3
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b80:	e04a      	b.n	8006c18 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	785b      	ldrb	r3, [r3, #1]
 8006b86:	2b09      	cmp	r3, #9
 8006b88:	d83b      	bhi.n	8006c02 <USBD_StdDevReq+0xc2>
 8006b8a:	a201      	add	r2, pc, #4	; (adr r2, 8006b90 <USBD_StdDevReq+0x50>)
 8006b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b90:	08006be5 	.word	0x08006be5
 8006b94:	08006bf9 	.word	0x08006bf9
 8006b98:	08006c03 	.word	0x08006c03
 8006b9c:	08006bef 	.word	0x08006bef
 8006ba0:	08006c03 	.word	0x08006c03
 8006ba4:	08006bc3 	.word	0x08006bc3
 8006ba8:	08006bb9 	.word	0x08006bb9
 8006bac:	08006c03 	.word	0x08006c03
 8006bb0:	08006bdb 	.word	0x08006bdb
 8006bb4:	08006bcd 	.word	0x08006bcd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006bb8:	6839      	ldr	r1, [r7, #0]
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fa3c 	bl	8007038 <USBD_GetDescriptor>
          break;
 8006bc0:	e024      	b.n	8006c0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fba1 	bl	800730c <USBD_SetAddress>
          break;
 8006bca:	e01f      	b.n	8006c0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fbe0 	bl	8007394 <USBD_SetConfig>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	73fb      	strb	r3, [r7, #15]
          break;
 8006bd8:	e018      	b.n	8006c0c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fc83 	bl	80074e8 <USBD_GetConfig>
          break;
 8006be2:	e013      	b.n	8006c0c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006be4:	6839      	ldr	r1, [r7, #0]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fcb4 	bl	8007554 <USBD_GetStatus>
          break;
 8006bec:	e00e      	b.n	8006c0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fce3 	bl	80075bc <USBD_SetFeature>
          break;
 8006bf6:	e009      	b.n	8006c0c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fd07 	bl	800760e <USBD_ClrFeature>
          break;
 8006c00:	e004      	b.n	8006c0c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006c02:	6839      	ldr	r1, [r7, #0]
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fd5e 	bl	80076c6 <USBD_CtlError>
          break;
 8006c0a:	bf00      	nop
      }
      break;
 8006c0c:	e004      	b.n	8006c18 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fd58 	bl	80076c6 <USBD_CtlError>
      break;
 8006c16:	bf00      	nop
  }

  return ret;
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop

08006c24 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c3a:	2b40      	cmp	r3, #64	; 0x40
 8006c3c:	d005      	beq.n	8006c4a <USBD_StdItfReq+0x26>
 8006c3e:	2b40      	cmp	r3, #64	; 0x40
 8006c40:	d852      	bhi.n	8006ce8 <USBD_StdItfReq+0xc4>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d001      	beq.n	8006c4a <USBD_StdItfReq+0x26>
 8006c46:	2b20      	cmp	r3, #32
 8006c48:	d14e      	bne.n	8006ce8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	3b01      	subs	r3, #1
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d840      	bhi.n	8006cda <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	889b      	ldrh	r3, [r3, #4]
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d836      	bhi.n	8006cd0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	889b      	ldrh	r3, [r3, #4]
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	4619      	mov	r1, r3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7ff fed9 	bl	8006a22 <USBD_CoreFindIF>
 8006c70:	4603      	mov	r3, r0
 8006c72:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c74:	7bbb      	ldrb	r3, [r7, #14]
 8006c76:	2bff      	cmp	r3, #255	; 0xff
 8006c78:	d01d      	beq.n	8006cb6 <USBD_StdItfReq+0x92>
 8006c7a:	7bbb      	ldrb	r3, [r7, #14]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d11a      	bne.n	8006cb6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006c80:	7bba      	ldrb	r2, [r7, #14]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	32ae      	adds	r2, #174	; 0xae
 8006c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00f      	beq.n	8006cb0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006c90:	7bba      	ldrb	r2, [r7, #14]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c98:	7bba      	ldrb	r2, [r7, #14]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	32ae      	adds	r2, #174	; 0xae
 8006c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	4798      	blx	r3
 8006caa:	4603      	mov	r3, r0
 8006cac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006cae:	e004      	b.n	8006cba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006cb4:	e001      	b.n	8006cba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	88db      	ldrh	r3, [r3, #6]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d110      	bne.n	8006ce4 <USBD_StdItfReq+0xc0>
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10d      	bne.n	8006ce4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fdc7 	bl	800785c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006cce:	e009      	b.n	8006ce4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fcf7 	bl	80076c6 <USBD_CtlError>
          break;
 8006cd8:	e004      	b.n	8006ce4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fcf2 	bl	80076c6 <USBD_CtlError>
          break;
 8006ce2:	e000      	b.n	8006ce6 <USBD_StdItfReq+0xc2>
          break;
 8006ce4:	bf00      	nop
      }
      break;
 8006ce6:	e004      	b.n	8006cf2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fceb 	bl	80076c6 <USBD_CtlError>
      break;
 8006cf0:	bf00      	nop
  }

  return ret;
 8006cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	889b      	ldrh	r3, [r3, #4]
 8006d0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d18:	2b40      	cmp	r3, #64	; 0x40
 8006d1a:	d007      	beq.n	8006d2c <USBD_StdEPReq+0x30>
 8006d1c:	2b40      	cmp	r3, #64	; 0x40
 8006d1e:	f200 817f 	bhi.w	8007020 <USBD_StdEPReq+0x324>
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d02a      	beq.n	8006d7c <USBD_StdEPReq+0x80>
 8006d26:	2b20      	cmp	r3, #32
 8006d28:	f040 817a 	bne.w	8007020 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006d2c:	7bbb      	ldrb	r3, [r7, #14]
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7ff fe83 	bl	8006a3c <USBD_CoreFindEP>
 8006d36:	4603      	mov	r3, r0
 8006d38:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d3a:	7b7b      	ldrb	r3, [r7, #13]
 8006d3c:	2bff      	cmp	r3, #255	; 0xff
 8006d3e:	f000 8174 	beq.w	800702a <USBD_StdEPReq+0x32e>
 8006d42:	7b7b      	ldrb	r3, [r7, #13]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f040 8170 	bne.w	800702a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006d4a:	7b7a      	ldrb	r2, [r7, #13]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006d52:	7b7a      	ldrb	r2, [r7, #13]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	32ae      	adds	r2, #174	; 0xae
 8006d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 8163 	beq.w	800702a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006d64:	7b7a      	ldrb	r2, [r7, #13]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	32ae      	adds	r2, #174	; 0xae
 8006d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	4798      	blx	r3
 8006d76:	4603      	mov	r3, r0
 8006d78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d7a:	e156      	b.n	800702a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	785b      	ldrb	r3, [r3, #1]
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d008      	beq.n	8006d96 <USBD_StdEPReq+0x9a>
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	f300 8145 	bgt.w	8007014 <USBD_StdEPReq+0x318>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f000 809b 	beq.w	8006ec6 <USBD_StdEPReq+0x1ca>
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d03c      	beq.n	8006e0e <USBD_StdEPReq+0x112>
 8006d94:	e13e      	b.n	8007014 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d002      	beq.n	8006da8 <USBD_StdEPReq+0xac>
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d016      	beq.n	8006dd4 <USBD_StdEPReq+0xd8>
 8006da6:	e02c      	b.n	8006e02 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006da8:	7bbb      	ldrb	r3, [r7, #14]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00d      	beq.n	8006dca <USBD_StdEPReq+0xce>
 8006dae:	7bbb      	ldrb	r3, [r7, #14]
 8006db0:	2b80      	cmp	r3, #128	; 0x80
 8006db2:	d00a      	beq.n	8006dca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006db4:	7bbb      	ldrb	r3, [r7, #14]
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f001 f97b 	bl	80080b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dbe:	2180      	movs	r1, #128	; 0x80
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 f977 	bl	80080b4 <USBD_LL_StallEP>
 8006dc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006dc8:	e020      	b.n	8006e0c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fc7a 	bl	80076c6 <USBD_CtlError>
              break;
 8006dd2:	e01b      	b.n	8006e0c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	885b      	ldrh	r3, [r3, #2]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10e      	bne.n	8006dfa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00b      	beq.n	8006dfa <USBD_StdEPReq+0xfe>
 8006de2:	7bbb      	ldrb	r3, [r7, #14]
 8006de4:	2b80      	cmp	r3, #128	; 0x80
 8006de6:	d008      	beq.n	8006dfa <USBD_StdEPReq+0xfe>
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	88db      	ldrh	r3, [r3, #6]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d104      	bne.n	8006dfa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 f95d 	bl	80080b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fd2e 	bl	800785c <USBD_CtlSendStatus>

              break;
 8006e00:	e004      	b.n	8006e0c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fc5e 	bl	80076c6 <USBD_CtlError>
              break;
 8006e0a:	bf00      	nop
          }
          break;
 8006e0c:	e107      	b.n	800701e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d002      	beq.n	8006e20 <USBD_StdEPReq+0x124>
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	d016      	beq.n	8006e4c <USBD_StdEPReq+0x150>
 8006e1e:	e04b      	b.n	8006eb8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e20:	7bbb      	ldrb	r3, [r7, #14]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00d      	beq.n	8006e42 <USBD_StdEPReq+0x146>
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
 8006e28:	2b80      	cmp	r3, #128	; 0x80
 8006e2a:	d00a      	beq.n	8006e42 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e2c:	7bbb      	ldrb	r3, [r7, #14]
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f001 f93f 	bl	80080b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e36:	2180      	movs	r1, #128	; 0x80
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 f93b 	bl	80080b4 <USBD_LL_StallEP>
 8006e3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e40:	e040      	b.n	8006ec4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fc3e 	bl	80076c6 <USBD_CtlError>
              break;
 8006e4a:	e03b      	b.n	8006ec4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	885b      	ldrh	r3, [r3, #2]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d136      	bne.n	8006ec2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e54:	7bbb      	ldrb	r3, [r7, #14]
 8006e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d004      	beq.n	8006e68 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e5e:	7bbb      	ldrb	r3, [r7, #14]
 8006e60:	4619      	mov	r1, r3
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f001 f945 	bl	80080f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fcf7 	bl	800785c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006e6e:	7bbb      	ldrb	r3, [r7, #14]
 8006e70:	4619      	mov	r1, r3
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7ff fde2 	bl	8006a3c <USBD_CoreFindEP>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e7c:	7b7b      	ldrb	r3, [r7, #13]
 8006e7e:	2bff      	cmp	r3, #255	; 0xff
 8006e80:	d01f      	beq.n	8006ec2 <USBD_StdEPReq+0x1c6>
 8006e82:	7b7b      	ldrb	r3, [r7, #13]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d11c      	bne.n	8006ec2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006e88:	7b7a      	ldrb	r2, [r7, #13]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006e90:	7b7a      	ldrb	r2, [r7, #13]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	32ae      	adds	r2, #174	; 0xae
 8006e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d010      	beq.n	8006ec2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006ea0:	7b7a      	ldrb	r2, [r7, #13]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	32ae      	adds	r2, #174	; 0xae
 8006ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	6839      	ldr	r1, [r7, #0]
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	4798      	blx	r3
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006eb6:	e004      	b.n	8006ec2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fc03 	bl	80076c6 <USBD_CtlError>
              break;
 8006ec0:	e000      	b.n	8006ec4 <USBD_StdEPReq+0x1c8>
              break;
 8006ec2:	bf00      	nop
          }
          break;
 8006ec4:	e0ab      	b.n	800701e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d002      	beq.n	8006ed8 <USBD_StdEPReq+0x1dc>
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d032      	beq.n	8006f3c <USBD_StdEPReq+0x240>
 8006ed6:	e097      	b.n	8007008 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ed8:	7bbb      	ldrb	r3, [r7, #14]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d007      	beq.n	8006eee <USBD_StdEPReq+0x1f2>
 8006ede:	7bbb      	ldrb	r3, [r7, #14]
 8006ee0:	2b80      	cmp	r3, #128	; 0x80
 8006ee2:	d004      	beq.n	8006eee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fbed 	bl	80076c6 <USBD_CtlError>
                break;
 8006eec:	e091      	b.n	8007012 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006eee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	da0b      	bge.n	8006f0e <USBD_StdEPReq+0x212>
 8006ef6:	7bbb      	ldrb	r3, [r7, #14]
 8006ef8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006efc:	4613      	mov	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	3310      	adds	r3, #16
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	4413      	add	r3, r2
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	e00b      	b.n	8006f26 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f0e:	7bbb      	ldrb	r3, [r7, #14]
 8006f10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f14:	4613      	mov	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	4413      	add	r3, r2
 8006f24:	3304      	adds	r3, #4
 8006f26:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2202      	movs	r2, #2
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fc37 	bl	80077a8 <USBD_CtlSendData>
              break;
 8006f3a:	e06a      	b.n	8007012 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	da11      	bge.n	8006f68 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f44:	7bbb      	ldrb	r3, [r7, #14]
 8006f46:	f003 020f 	and.w	r2, r3, #15
 8006f4a:	6879      	ldr	r1, [r7, #4]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	440b      	add	r3, r1
 8006f56:	3324      	adds	r3, #36	; 0x24
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d117      	bne.n	8006f8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f5e:	6839      	ldr	r1, [r7, #0]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fbb0 	bl	80076c6 <USBD_CtlError>
                  break;
 8006f66:	e054      	b.n	8007012 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f68:	7bbb      	ldrb	r3, [r7, #14]
 8006f6a:	f003 020f 	and.w	r2, r3, #15
 8006f6e:	6879      	ldr	r1, [r7, #4]
 8006f70:	4613      	mov	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	440b      	add	r3, r1
 8006f7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d104      	bne.n	8006f8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f84:	6839      	ldr	r1, [r7, #0]
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fb9d 	bl	80076c6 <USBD_CtlError>
                  break;
 8006f8c:	e041      	b.n	8007012 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	da0b      	bge.n	8006fae <USBD_StdEPReq+0x2b2>
 8006f96:	7bbb      	ldrb	r3, [r7, #14]
 8006f98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	3310      	adds	r3, #16
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	4413      	add	r3, r2
 8006faa:	3304      	adds	r3, #4
 8006fac:	e00b      	b.n	8006fc6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fae:	7bbb      	ldrb	r3, [r7, #14]
 8006fb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	3304      	adds	r3, #4
 8006fc6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006fc8:	7bbb      	ldrb	r3, [r7, #14]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d002      	beq.n	8006fd4 <USBD_StdEPReq+0x2d8>
 8006fce:	7bbb      	ldrb	r3, [r7, #14]
 8006fd0:	2b80      	cmp	r3, #128	; 0x80
 8006fd2:	d103      	bne.n	8006fdc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	e00e      	b.n	8006ffa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006fdc:	7bbb      	ldrb	r3, [r7, #14]
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f001 f8a5 	bl	8008130 <USBD_LL_IsStallEP>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d003      	beq.n	8006ff4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	e002      	b.n	8006ffa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fbd1 	bl	80077a8 <USBD_CtlSendData>
              break;
 8007006:	e004      	b.n	8007012 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007008:	6839      	ldr	r1, [r7, #0]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fb5b 	bl	80076c6 <USBD_CtlError>
              break;
 8007010:	bf00      	nop
          }
          break;
 8007012:	e004      	b.n	800701e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fb55 	bl	80076c6 <USBD_CtlError>
          break;
 800701c:	bf00      	nop
      }
      break;
 800701e:	e005      	b.n	800702c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fb4f 	bl	80076c6 <USBD_CtlError>
      break;
 8007028:	e000      	b.n	800702c <USBD_StdEPReq+0x330>
      break;
 800702a:	bf00      	nop
  }

  return ret;
 800702c:	7bfb      	ldrb	r3, [r7, #15]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
	...

08007038 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007046:	2300      	movs	r3, #0
 8007048:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	885b      	ldrh	r3, [r3, #2]
 8007052:	0a1b      	lsrs	r3, r3, #8
 8007054:	b29b      	uxth	r3, r3
 8007056:	3b01      	subs	r3, #1
 8007058:	2b06      	cmp	r3, #6
 800705a:	f200 8128 	bhi.w	80072ae <USBD_GetDescriptor+0x276>
 800705e:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <USBD_GetDescriptor+0x2c>)
 8007060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007064:	08007081 	.word	0x08007081
 8007068:	08007099 	.word	0x08007099
 800706c:	080070d9 	.word	0x080070d9
 8007070:	080072af 	.word	0x080072af
 8007074:	080072af 	.word	0x080072af
 8007078:	0800724f 	.word	0x0800724f
 800707c:	0800727b 	.word	0x0800727b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	7c12      	ldrb	r2, [r2, #16]
 800708c:	f107 0108 	add.w	r1, r7, #8
 8007090:	4610      	mov	r0, r2
 8007092:	4798      	blx	r3
 8007094:	60f8      	str	r0, [r7, #12]
      break;
 8007096:	e112      	b.n	80072be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	7c1b      	ldrb	r3, [r3, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10d      	bne.n	80070bc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a8:	f107 0208 	add.w	r2, r7, #8
 80070ac:	4610      	mov	r0, r2
 80070ae:	4798      	blx	r3
 80070b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3301      	adds	r3, #1
 80070b6:	2202      	movs	r2, #2
 80070b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80070ba:	e100      	b.n	80072be <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c4:	f107 0208 	add.w	r2, r7, #8
 80070c8:	4610      	mov	r0, r2
 80070ca:	4798      	blx	r3
 80070cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	3301      	adds	r3, #1
 80070d2:	2202      	movs	r2, #2
 80070d4:	701a      	strb	r2, [r3, #0]
      break;
 80070d6:	e0f2      	b.n	80072be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	885b      	ldrh	r3, [r3, #2]
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b05      	cmp	r3, #5
 80070e0:	f200 80ac 	bhi.w	800723c <USBD_GetDescriptor+0x204>
 80070e4:	a201      	add	r2, pc, #4	; (adr r2, 80070ec <USBD_GetDescriptor+0xb4>)
 80070e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ea:	bf00      	nop
 80070ec:	08007105 	.word	0x08007105
 80070f0:	08007139 	.word	0x08007139
 80070f4:	0800716d 	.word	0x0800716d
 80070f8:	080071a1 	.word	0x080071a1
 80070fc:	080071d5 	.word	0x080071d5
 8007100:	08007209 	.word	0x08007209
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00b      	beq.n	8007128 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	7c12      	ldrb	r2, [r2, #16]
 800711c:	f107 0108 	add.w	r1, r7, #8
 8007120:	4610      	mov	r0, r2
 8007122:	4798      	blx	r3
 8007124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007126:	e091      	b.n	800724c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 facb 	bl	80076c6 <USBD_CtlError>
            err++;
 8007130:	7afb      	ldrb	r3, [r7, #11]
 8007132:	3301      	adds	r3, #1
 8007134:	72fb      	strb	r3, [r7, #11]
          break;
 8007136:	e089      	b.n	800724c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00b      	beq.n	800715c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	7c12      	ldrb	r2, [r2, #16]
 8007150:	f107 0108 	add.w	r1, r7, #8
 8007154:	4610      	mov	r0, r2
 8007156:	4798      	blx	r3
 8007158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800715a:	e077      	b.n	800724c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fab1 	bl	80076c6 <USBD_CtlError>
            err++;
 8007164:	7afb      	ldrb	r3, [r7, #11]
 8007166:	3301      	adds	r3, #1
 8007168:	72fb      	strb	r3, [r7, #11]
          break;
 800716a:	e06f      	b.n	800724c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00b      	beq.n	8007190 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	7c12      	ldrb	r2, [r2, #16]
 8007184:	f107 0108 	add.w	r1, r7, #8
 8007188:	4610      	mov	r0, r2
 800718a:	4798      	blx	r3
 800718c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800718e:	e05d      	b.n	800724c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fa97 	bl	80076c6 <USBD_CtlError>
            err++;
 8007198:	7afb      	ldrb	r3, [r7, #11]
 800719a:	3301      	adds	r3, #1
 800719c:	72fb      	strb	r3, [r7, #11]
          break;
 800719e:	e055      	b.n	800724c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00b      	beq.n	80071c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	7c12      	ldrb	r2, [r2, #16]
 80071b8:	f107 0108 	add.w	r1, r7, #8
 80071bc:	4610      	mov	r0, r2
 80071be:	4798      	blx	r3
 80071c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071c2:	e043      	b.n	800724c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071c4:	6839      	ldr	r1, [r7, #0]
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fa7d 	bl	80076c6 <USBD_CtlError>
            err++;
 80071cc:	7afb      	ldrb	r3, [r7, #11]
 80071ce:	3301      	adds	r3, #1
 80071d0:	72fb      	strb	r3, [r7, #11]
          break;
 80071d2:	e03b      	b.n	800724c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00b      	beq.n	80071f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	7c12      	ldrb	r2, [r2, #16]
 80071ec:	f107 0108 	add.w	r1, r7, #8
 80071f0:	4610      	mov	r0, r2
 80071f2:	4798      	blx	r3
 80071f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071f6:	e029      	b.n	800724c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071f8:	6839      	ldr	r1, [r7, #0]
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fa63 	bl	80076c6 <USBD_CtlError>
            err++;
 8007200:	7afb      	ldrb	r3, [r7, #11]
 8007202:	3301      	adds	r3, #1
 8007204:	72fb      	strb	r3, [r7, #11]
          break;
 8007206:	e021      	b.n	800724c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00b      	beq.n	800722c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	7c12      	ldrb	r2, [r2, #16]
 8007220:	f107 0108 	add.w	r1, r7, #8
 8007224:	4610      	mov	r0, r2
 8007226:	4798      	blx	r3
 8007228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800722a:	e00f      	b.n	800724c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fa49 	bl	80076c6 <USBD_CtlError>
            err++;
 8007234:	7afb      	ldrb	r3, [r7, #11]
 8007236:	3301      	adds	r3, #1
 8007238:	72fb      	strb	r3, [r7, #11]
          break;
 800723a:	e007      	b.n	800724c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800723c:	6839      	ldr	r1, [r7, #0]
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fa41 	bl	80076c6 <USBD_CtlError>
          err++;
 8007244:	7afb      	ldrb	r3, [r7, #11]
 8007246:	3301      	adds	r3, #1
 8007248:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800724a:	bf00      	nop
      }
      break;
 800724c:	e037      	b.n	80072be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	7c1b      	ldrb	r3, [r3, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d109      	bne.n	800726a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800725c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725e:	f107 0208 	add.w	r2, r7, #8
 8007262:	4610      	mov	r0, r2
 8007264:	4798      	blx	r3
 8007266:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007268:	e029      	b.n	80072be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fa2a 	bl	80076c6 <USBD_CtlError>
        err++;
 8007272:	7afb      	ldrb	r3, [r7, #11]
 8007274:	3301      	adds	r3, #1
 8007276:	72fb      	strb	r3, [r7, #11]
      break;
 8007278:	e021      	b.n	80072be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	7c1b      	ldrb	r3, [r3, #16]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10d      	bne.n	800729e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728a:	f107 0208 	add.w	r2, r7, #8
 800728e:	4610      	mov	r0, r2
 8007290:	4798      	blx	r3
 8007292:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	3301      	adds	r3, #1
 8007298:	2207      	movs	r2, #7
 800729a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800729c:	e00f      	b.n	80072be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800729e:	6839      	ldr	r1, [r7, #0]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fa10 	bl	80076c6 <USBD_CtlError>
        err++;
 80072a6:	7afb      	ldrb	r3, [r7, #11]
 80072a8:	3301      	adds	r3, #1
 80072aa:	72fb      	strb	r3, [r7, #11]
      break;
 80072ac:	e007      	b.n	80072be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80072ae:	6839      	ldr	r1, [r7, #0]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fa08 	bl	80076c6 <USBD_CtlError>
      err++;
 80072b6:	7afb      	ldrb	r3, [r7, #11]
 80072b8:	3301      	adds	r3, #1
 80072ba:	72fb      	strb	r3, [r7, #11]
      break;
 80072bc:	bf00      	nop
  }

  if (err != 0U)
 80072be:	7afb      	ldrb	r3, [r7, #11]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d11e      	bne.n	8007302 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	88db      	ldrh	r3, [r3, #6]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d016      	beq.n	80072fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80072cc:	893b      	ldrh	r3, [r7, #8]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00e      	beq.n	80072f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	88da      	ldrh	r2, [r3, #6]
 80072d6:	893b      	ldrh	r3, [r7, #8]
 80072d8:	4293      	cmp	r3, r2
 80072da:	bf28      	it	cs
 80072dc:	4613      	movcs	r3, r2
 80072de:	b29b      	uxth	r3, r3
 80072e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80072e2:	893b      	ldrh	r3, [r7, #8]
 80072e4:	461a      	mov	r2, r3
 80072e6:	68f9      	ldr	r1, [r7, #12]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fa5d 	bl	80077a8 <USBD_CtlSendData>
 80072ee:	e009      	b.n	8007304 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f9e7 	bl	80076c6 <USBD_CtlError>
 80072f8:	e004      	b.n	8007304 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 faae 	bl	800785c <USBD_CtlSendStatus>
 8007300:	e000      	b.n	8007304 <USBD_GetDescriptor+0x2cc>
    return;
 8007302:	bf00      	nop
  }
}
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop

0800730c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	889b      	ldrh	r3, [r3, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d131      	bne.n	8007382 <USBD_SetAddress+0x76>
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	88db      	ldrh	r3, [r3, #6]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d12d      	bne.n	8007382 <USBD_SetAddress+0x76>
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	885b      	ldrh	r3, [r3, #2]
 800732a:	2b7f      	cmp	r3, #127	; 0x7f
 800732c:	d829      	bhi.n	8007382 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	885b      	ldrh	r3, [r3, #2]
 8007332:	b2db      	uxtb	r3, r3
 8007334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007338:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b03      	cmp	r3, #3
 8007344:	d104      	bne.n	8007350 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f9bc 	bl	80076c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800734e:	e01d      	b.n	800738c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	7bfa      	ldrb	r2, [r7, #15]
 8007354:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007358:	7bfb      	ldrb	r3, [r7, #15]
 800735a:	4619      	mov	r1, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 ff13 	bl	8008188 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fa7a 	bl	800785c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007368:	7bfb      	ldrb	r3, [r7, #15]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d004      	beq.n	8007378 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2202      	movs	r2, #2
 8007372:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007376:	e009      	b.n	800738c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007380:	e004      	b.n	800738c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f99e 	bl	80076c6 <USBD_CtlError>
  }
}
 800738a:	bf00      	nop
 800738c:	bf00      	nop
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	885b      	ldrh	r3, [r3, #2]
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	4b4e      	ldr	r3, [pc, #312]	; (80074e4 <USBD_SetConfig+0x150>)
 80073aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80073ac:	4b4d      	ldr	r3, [pc, #308]	; (80074e4 <USBD_SetConfig+0x150>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d905      	bls.n	80073c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f985 	bl	80076c6 <USBD_CtlError>
    return USBD_FAIL;
 80073bc:	2303      	movs	r3, #3
 80073be:	e08c      	b.n	80074da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d002      	beq.n	80073d2 <USBD_SetConfig+0x3e>
 80073cc:	2b03      	cmp	r3, #3
 80073ce:	d029      	beq.n	8007424 <USBD_SetConfig+0x90>
 80073d0:	e075      	b.n	80074be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80073d2:	4b44      	ldr	r3, [pc, #272]	; (80074e4 <USBD_SetConfig+0x150>)
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d020      	beq.n	800741c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80073da:	4b42      	ldr	r3, [pc, #264]	; (80074e4 <USBD_SetConfig+0x150>)
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	461a      	mov	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80073e4:	4b3f      	ldr	r3, [pc, #252]	; (80074e4 <USBD_SetConfig+0x150>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	4619      	mov	r1, r3
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7fe ffe7 	bl	80063be <USBD_SetClassConfig>
 80073f0:	4603      	mov	r3, r0
 80073f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d008      	beq.n	800740c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f962 	bl	80076c6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2202      	movs	r2, #2
 8007406:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800740a:	e065      	b.n	80074d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fa25 	bl	800785c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2203      	movs	r2, #3
 8007416:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800741a:	e05d      	b.n	80074d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fa1d 	bl	800785c <USBD_CtlSendStatus>
      break;
 8007422:	e059      	b.n	80074d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007424:	4b2f      	ldr	r3, [pc, #188]	; (80074e4 <USBD_SetConfig+0x150>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d112      	bne.n	8007452 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007434:	4b2b      	ldr	r3, [pc, #172]	; (80074e4 <USBD_SetConfig+0x150>)
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	461a      	mov	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800743e:	4b29      	ldr	r3, [pc, #164]	; (80074e4 <USBD_SetConfig+0x150>)
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	4619      	mov	r1, r3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7fe ffd6 	bl	80063f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fa06 	bl	800785c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007450:	e042      	b.n	80074d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007452:	4b24      	ldr	r3, [pc, #144]	; (80074e4 <USBD_SetConfig+0x150>)
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	461a      	mov	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	429a      	cmp	r2, r3
 800745e:	d02a      	beq.n	80074b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	b2db      	uxtb	r3, r3
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7fe ffc4 	bl	80063f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800746e:	4b1d      	ldr	r3, [pc, #116]	; (80074e4 <USBD_SetConfig+0x150>)
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	461a      	mov	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007478:	4b1a      	ldr	r3, [pc, #104]	; (80074e4 <USBD_SetConfig+0x150>)
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	4619      	mov	r1, r3
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7fe ff9d 	bl	80063be <USBD_SetClassConfig>
 8007484:	4603      	mov	r3, r0
 8007486:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007488:	7bfb      	ldrb	r3, [r7, #15]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00f      	beq.n	80074ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f918 	bl	80076c6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	b2db      	uxtb	r3, r3
 800749c:	4619      	mov	r1, r3
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7fe ffa9 	bl	80063f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2202      	movs	r2, #2
 80074a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80074ac:	e014      	b.n	80074d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f9d4 	bl	800785c <USBD_CtlSendStatus>
      break;
 80074b4:	e010      	b.n	80074d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f9d0 	bl	800785c <USBD_CtlSendStatus>
      break;
 80074bc:	e00c      	b.n	80074d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f900 	bl	80076c6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074c6:	4b07      	ldr	r3, [pc, #28]	; (80074e4 <USBD_SetConfig+0x150>)
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7fe ff92 	bl	80063f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80074d2:	2303      	movs	r3, #3
 80074d4:	73fb      	strb	r3, [r7, #15]
      break;
 80074d6:	bf00      	nop
  }

  return ret;
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	20000210 	.word	0x20000210

080074e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	88db      	ldrh	r3, [r3, #6]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d004      	beq.n	8007504 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f8e2 	bl	80076c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007502:	e023      	b.n	800754c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b02      	cmp	r3, #2
 800750e:	dc02      	bgt.n	8007516 <USBD_GetConfig+0x2e>
 8007510:	2b00      	cmp	r3, #0
 8007512:	dc03      	bgt.n	800751c <USBD_GetConfig+0x34>
 8007514:	e015      	b.n	8007542 <USBD_GetConfig+0x5a>
 8007516:	2b03      	cmp	r3, #3
 8007518:	d00b      	beq.n	8007532 <USBD_GetConfig+0x4a>
 800751a:	e012      	b.n	8007542 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	3308      	adds	r3, #8
 8007526:	2201      	movs	r2, #1
 8007528:	4619      	mov	r1, r3
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f93c 	bl	80077a8 <USBD_CtlSendData>
        break;
 8007530:	e00c      	b.n	800754c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	3304      	adds	r3, #4
 8007536:	2201      	movs	r2, #1
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f934 	bl	80077a8 <USBD_CtlSendData>
        break;
 8007540:	e004      	b.n	800754c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f8be 	bl	80076c6 <USBD_CtlError>
        break;
 800754a:	bf00      	nop
}
 800754c:	bf00      	nop
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007564:	b2db      	uxtb	r3, r3
 8007566:	3b01      	subs	r3, #1
 8007568:	2b02      	cmp	r3, #2
 800756a:	d81e      	bhi.n	80075aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	88db      	ldrh	r3, [r3, #6]
 8007570:	2b02      	cmp	r3, #2
 8007572:	d004      	beq.n	800757e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f8a5 	bl	80076c6 <USBD_CtlError>
        break;
 800757c:	e01a      	b.n	80075b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800758a:	2b00      	cmp	r3, #0
 800758c:	d005      	beq.n	800759a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	f043 0202 	orr.w	r2, r3, #2
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	330c      	adds	r3, #12
 800759e:	2202      	movs	r2, #2
 80075a0:	4619      	mov	r1, r3
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f900 	bl	80077a8 <USBD_CtlSendData>
      break;
 80075a8:	e004      	b.n	80075b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f88a 	bl	80076c6 <USBD_CtlError>
      break;
 80075b2:	bf00      	nop
  }
}
 80075b4:	bf00      	nop
 80075b6:	3708      	adds	r7, #8
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	885b      	ldrh	r3, [r3, #2]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d107      	bne.n	80075de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f940 	bl	800785c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80075dc:	e013      	b.n	8007606 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	885b      	ldrh	r3, [r3, #2]
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d10b      	bne.n	80075fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	889b      	ldrh	r3, [r3, #4]
 80075ea:	0a1b      	lsrs	r3, r3, #8
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f930 	bl	800785c <USBD_CtlSendStatus>
}
 80075fc:	e003      	b.n	8007606 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80075fe:	6839      	ldr	r1, [r7, #0]
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f860 	bl	80076c6 <USBD_CtlError>
}
 8007606:	bf00      	nop
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b082      	sub	sp, #8
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800761e:	b2db      	uxtb	r3, r3
 8007620:	3b01      	subs	r3, #1
 8007622:	2b02      	cmp	r3, #2
 8007624:	d80b      	bhi.n	800763e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	885b      	ldrh	r3, [r3, #2]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d10c      	bne.n	8007648 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f910 	bl	800785c <USBD_CtlSendStatus>
      }
      break;
 800763c:	e004      	b.n	8007648 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800763e:	6839      	ldr	r1, [r7, #0]
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 f840 	bl	80076c6 <USBD_CtlError>
      break;
 8007646:	e000      	b.n	800764a <USBD_ClrFeature+0x3c>
      break;
 8007648:	bf00      	nop
  }
}
 800764a:	bf00      	nop
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b084      	sub	sp, #16
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	781a      	ldrb	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3301      	adds	r3, #1
 800766c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	781a      	ldrb	r2, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3301      	adds	r3, #1
 800767a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f7ff fa41 	bl	8006b04 <SWAPBYTE>
 8007682:	4603      	mov	r3, r0
 8007684:	461a      	mov	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	3301      	adds	r3, #1
 800768e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	3301      	adds	r3, #1
 8007694:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f7ff fa34 	bl	8006b04 <SWAPBYTE>
 800769c:	4603      	mov	r3, r0
 800769e:	461a      	mov	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	3301      	adds	r3, #1
 80076a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3301      	adds	r3, #1
 80076ae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f7ff fa27 	bl	8006b04 <SWAPBYTE>
 80076b6:	4603      	mov	r3, r0
 80076b8:	461a      	mov	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	80da      	strh	r2, [r3, #6]
}
 80076be:	bf00      	nop
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b082      	sub	sp, #8
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80076d0:	2180      	movs	r1, #128	; 0x80
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fcee 	bl	80080b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80076d8:	2100      	movs	r1, #0
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fcea 	bl	80080b4 <USBD_LL_StallEP>
}
 80076e0:	bf00      	nop
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80076f4:	2300      	movs	r3, #0
 80076f6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d036      	beq.n	800776c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007702:	6938      	ldr	r0, [r7, #16]
 8007704:	f000 f836 	bl	8007774 <USBD_GetLen>
 8007708:	4603      	mov	r3, r0
 800770a:	3301      	adds	r3, #1
 800770c:	b29b      	uxth	r3, r3
 800770e:	005b      	lsls	r3, r3, #1
 8007710:	b29a      	uxth	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	4413      	add	r3, r2
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	7812      	ldrb	r2, [r2, #0]
 8007720:	701a      	strb	r2, [r3, #0]
  idx++;
 8007722:	7dfb      	ldrb	r3, [r7, #23]
 8007724:	3301      	adds	r3, #1
 8007726:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007728:	7dfb      	ldrb	r3, [r7, #23]
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	4413      	add	r3, r2
 800772e:	2203      	movs	r2, #3
 8007730:	701a      	strb	r2, [r3, #0]
  idx++;
 8007732:	7dfb      	ldrb	r3, [r7, #23]
 8007734:	3301      	adds	r3, #1
 8007736:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007738:	e013      	b.n	8007762 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800773a:	7dfb      	ldrb	r3, [r7, #23]
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	4413      	add	r3, r2
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	7812      	ldrb	r2, [r2, #0]
 8007744:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	3301      	adds	r3, #1
 800774a:	613b      	str	r3, [r7, #16]
    idx++;
 800774c:	7dfb      	ldrb	r3, [r7, #23]
 800774e:	3301      	adds	r3, #1
 8007750:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007752:	7dfb      	ldrb	r3, [r7, #23]
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	4413      	add	r3, r2
 8007758:	2200      	movs	r2, #0
 800775a:	701a      	strb	r2, [r3, #0]
    idx++;
 800775c:	7dfb      	ldrb	r3, [r7, #23]
 800775e:	3301      	adds	r3, #1
 8007760:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1e7      	bne.n	800773a <USBD_GetString+0x52>
 800776a:	e000      	b.n	800776e <USBD_GetString+0x86>
    return;
 800776c:	bf00      	nop
  }
}
 800776e:	3718      	adds	r7, #24
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800777c:	2300      	movs	r3, #0
 800777e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007784:	e005      	b.n	8007792 <USBD_GetLen+0x1e>
  {
    len++;
 8007786:	7bfb      	ldrb	r3, [r7, #15]
 8007788:	3301      	adds	r3, #1
 800778a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	3301      	adds	r3, #1
 8007790:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1f5      	bne.n	8007786 <USBD_GetLen+0x12>
  }

  return len;
 800779a:	7bfb      	ldrb	r3, [r7, #15]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3714      	adds	r7, #20
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2202      	movs	r2, #2
 80077b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	2100      	movs	r1, #0
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 fcf9 	bl	80081c6 <USBD_LL_Transmit>

  return USBD_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b084      	sub	sp, #16
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	60b9      	str	r1, [r7, #8]
 80077e8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	2100      	movs	r1, #0
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 fce8 	bl	80081c6 <USBD_LL_Transmit>

  return USBD_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2203      	movs	r2, #3
 8007810:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	2100      	movs	r1, #0
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 fcec 	bl	8008208 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
 8007840:	60f8      	str	r0, [r7, #12]
 8007842:	60b9      	str	r1, [r7, #8]
 8007844:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68ba      	ldr	r2, [r7, #8]
 800784a:	2100      	movs	r1, #0
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f000 fcdb 	bl	8008208 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2204      	movs	r2, #4
 8007868:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800786c:	2300      	movs	r3, #0
 800786e:	2200      	movs	r2, #0
 8007870:	2100      	movs	r1, #0
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fca7 	bl	80081c6 <USBD_LL_Transmit>

  return USBD_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b082      	sub	sp, #8
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2205      	movs	r2, #5
 800788e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007892:	2300      	movs	r3, #0
 8007894:	2200      	movs	r2, #0
 8007896:	2100      	movs	r1, #0
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fcb5 	bl	8008208 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80078ac:	2200      	movs	r2, #0
 80078ae:	4912      	ldr	r1, [pc, #72]	; (80078f8 <MX_USB_DEVICE_Init+0x50>)
 80078b0:	4812      	ldr	r0, [pc, #72]	; (80078fc <MX_USB_DEVICE_Init+0x54>)
 80078b2:	f7fe fd07 	bl	80062c4 <USBD_Init>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80078bc:	f7f9 f824 	bl	8000908 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80078c0:	490f      	ldr	r1, [pc, #60]	; (8007900 <MX_USB_DEVICE_Init+0x58>)
 80078c2:	480e      	ldr	r0, [pc, #56]	; (80078fc <MX_USB_DEVICE_Init+0x54>)
 80078c4:	f7fe fd2e 	bl	8006324 <USBD_RegisterClass>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d001      	beq.n	80078d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80078ce:	f7f9 f81b 	bl	8000908 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80078d2:	490c      	ldr	r1, [pc, #48]	; (8007904 <MX_USB_DEVICE_Init+0x5c>)
 80078d4:	4809      	ldr	r0, [pc, #36]	; (80078fc <MX_USB_DEVICE_Init+0x54>)
 80078d6:	f7fe fc1f 	bl	8006118 <USBD_CDC_RegisterInterface>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80078e0:	f7f9 f812 	bl	8000908 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80078e4:	4805      	ldr	r0, [pc, #20]	; (80078fc <MX_USB_DEVICE_Init+0x54>)
 80078e6:	f7fe fd53 	bl	8006390 <USBD_Start>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d001      	beq.n	80078f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80078f0:	f7f9 f80a 	bl	8000908 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80078f4:	bf00      	nop
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	200000ac 	.word	0x200000ac
 80078fc:	20000214 	.word	0x20000214
 8007900:	20000018 	.word	0x20000018
 8007904:	20000098 	.word	0x20000098

08007908 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800790c:	2200      	movs	r2, #0
 800790e:	4905      	ldr	r1, [pc, #20]	; (8007924 <CDC_Init_FS+0x1c>)
 8007910:	4805      	ldr	r0, [pc, #20]	; (8007928 <CDC_Init_FS+0x20>)
 8007912:	f7fe fc1b 	bl	800614c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007916:	4905      	ldr	r1, [pc, #20]	; (800792c <CDC_Init_FS+0x24>)
 8007918:	4803      	ldr	r0, [pc, #12]	; (8007928 <CDC_Init_FS+0x20>)
 800791a:	f7fe fc39 	bl	8006190 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800791e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007920:	4618      	mov	r0, r3
 8007922:	bd80      	pop	{r7, pc}
 8007924:	20000cf0 	.word	0x20000cf0
 8007928:	20000214 	.word	0x20000214
 800792c:	200004f0 	.word	0x200004f0

08007930 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007930:	b480      	push	{r7}
 8007932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007934:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007936:	4618      	mov	r0, r3
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	6039      	str	r1, [r7, #0]
 800794a:	71fb      	strb	r3, [r7, #7]
 800794c:	4613      	mov	r3, r2
 800794e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007950:	79fb      	ldrb	r3, [r7, #7]
 8007952:	2b23      	cmp	r3, #35	; 0x23
 8007954:	d84a      	bhi.n	80079ec <CDC_Control_FS+0xac>
 8007956:	a201      	add	r2, pc, #4	; (adr r2, 800795c <CDC_Control_FS+0x1c>)
 8007958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795c:	080079ed 	.word	0x080079ed
 8007960:	080079ed 	.word	0x080079ed
 8007964:	080079ed 	.word	0x080079ed
 8007968:	080079ed 	.word	0x080079ed
 800796c:	080079ed 	.word	0x080079ed
 8007970:	080079ed 	.word	0x080079ed
 8007974:	080079ed 	.word	0x080079ed
 8007978:	080079ed 	.word	0x080079ed
 800797c:	080079ed 	.word	0x080079ed
 8007980:	080079ed 	.word	0x080079ed
 8007984:	080079ed 	.word	0x080079ed
 8007988:	080079ed 	.word	0x080079ed
 800798c:	080079ed 	.word	0x080079ed
 8007990:	080079ed 	.word	0x080079ed
 8007994:	080079ed 	.word	0x080079ed
 8007998:	080079ed 	.word	0x080079ed
 800799c:	080079ed 	.word	0x080079ed
 80079a0:	080079ed 	.word	0x080079ed
 80079a4:	080079ed 	.word	0x080079ed
 80079a8:	080079ed 	.word	0x080079ed
 80079ac:	080079ed 	.word	0x080079ed
 80079b0:	080079ed 	.word	0x080079ed
 80079b4:	080079ed 	.word	0x080079ed
 80079b8:	080079ed 	.word	0x080079ed
 80079bc:	080079ed 	.word	0x080079ed
 80079c0:	080079ed 	.word	0x080079ed
 80079c4:	080079ed 	.word	0x080079ed
 80079c8:	080079ed 	.word	0x080079ed
 80079cc:	080079ed 	.word	0x080079ed
 80079d0:	080079ed 	.word	0x080079ed
 80079d4:	080079ed 	.word	0x080079ed
 80079d8:	080079ed 	.word	0x080079ed
 80079dc:	080079ed 	.word	0x080079ed
 80079e0:	080079ed 	.word	0x080079ed
 80079e4:	080079ed 	.word	0x080079ed
 80079e8:	080079ed 	.word	0x080079ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80079ec:	bf00      	nop
  }

  return (USBD_OK);
 80079ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a06:	6879      	ldr	r1, [r7, #4]
 8007a08:	4805      	ldr	r0, [pc, #20]	; (8007a20 <CDC_Receive_FS+0x24>)
 8007a0a:	f7fe fbc1 	bl	8006190 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a0e:	4804      	ldr	r0, [pc, #16]	; (8007a20 <CDC_Receive_FS+0x24>)
 8007a10:	f7fe fc22 	bl	8006258 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007a14:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	20000214 	.word	0x20000214

08007a24 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007a34:	4b0d      	ldr	r3, [pc, #52]	; (8007a6c <CDC_Transmit_FS+0x48>)
 8007a36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a3a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e00b      	b.n	8007a62 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007a4a:	887b      	ldrh	r3, [r7, #2]
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	6879      	ldr	r1, [r7, #4]
 8007a50:	4806      	ldr	r0, [pc, #24]	; (8007a6c <CDC_Transmit_FS+0x48>)
 8007a52:	f7fe fb7b 	bl	800614c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007a56:	4805      	ldr	r0, [pc, #20]	; (8007a6c <CDC_Transmit_FS+0x48>)
 8007a58:	f7fe fbb8 	bl	80061cc <USBD_CDC_TransmitPacket>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000214 	.word	0x20000214

08007a70 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007a82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	371c      	adds	r7, #28
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
	...

08007a94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	6039      	str	r1, [r7, #0]
 8007a9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	2212      	movs	r2, #18
 8007aa4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007aa6:	4b03      	ldr	r3, [pc, #12]	; (8007ab4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	200000c8 	.word	0x200000c8

08007ab8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	6039      	str	r1, [r7, #0]
 8007ac2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	2204      	movs	r2, #4
 8007ac8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007aca:	4b03      	ldr	r3, [pc, #12]	; (8007ad8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr
 8007ad8:	200000dc 	.word	0x200000dc

08007adc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	6039      	str	r1, [r7, #0]
 8007ae6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ae8:	79fb      	ldrb	r3, [r7, #7]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d105      	bne.n	8007afa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	4907      	ldr	r1, [pc, #28]	; (8007b10 <USBD_FS_ProductStrDescriptor+0x34>)
 8007af2:	4808      	ldr	r0, [pc, #32]	; (8007b14 <USBD_FS_ProductStrDescriptor+0x38>)
 8007af4:	f7ff fdf8 	bl	80076e8 <USBD_GetString>
 8007af8:	e004      	b.n	8007b04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	4904      	ldr	r1, [pc, #16]	; (8007b10 <USBD_FS_ProductStrDescriptor+0x34>)
 8007afe:	4805      	ldr	r0, [pc, #20]	; (8007b14 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b00:	f7ff fdf2 	bl	80076e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b04:	4b02      	ldr	r3, [pc, #8]	; (8007b10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	200014f0 	.word	0x200014f0
 8007b14:	08008378 	.word	0x08008378

08007b18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	4603      	mov	r3, r0
 8007b20:	6039      	str	r1, [r7, #0]
 8007b22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	4904      	ldr	r1, [pc, #16]	; (8007b38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b28:	4804      	ldr	r0, [pc, #16]	; (8007b3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b2a:	f7ff fddd 	bl	80076e8 <USBD_GetString>
  return USBD_StrDesc;
 8007b2e:	4b02      	ldr	r3, [pc, #8]	; (8007b38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	200014f0 	.word	0x200014f0
 8007b3c:	08008390 	.word	0x08008390

08007b40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	4603      	mov	r3, r0
 8007b48:	6039      	str	r1, [r7, #0]
 8007b4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	221a      	movs	r2, #26
 8007b50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b52:	f000 f843 	bl	8007bdc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b56:	4b02      	ldr	r3, [pc, #8]	; (8007b60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	200000e0 	.word	0x200000e0

08007b64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	6039      	str	r1, [r7, #0]
 8007b6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b70:	79fb      	ldrb	r3, [r7, #7]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d105      	bne.n	8007b82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	4907      	ldr	r1, [pc, #28]	; (8007b98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b7a:	4808      	ldr	r0, [pc, #32]	; (8007b9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b7c:	f7ff fdb4 	bl	80076e8 <USBD_GetString>
 8007b80:	e004      	b.n	8007b8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	4904      	ldr	r1, [pc, #16]	; (8007b98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b86:	4805      	ldr	r0, [pc, #20]	; (8007b9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b88:	f7ff fdae 	bl	80076e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b8c:	4b02      	ldr	r3, [pc, #8]	; (8007b98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	200014f0 	.word	0x200014f0
 8007b9c:	080083a4 	.word	0x080083a4

08007ba0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	6039      	str	r1, [r7, #0]
 8007baa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bac:	79fb      	ldrb	r3, [r7, #7]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d105      	bne.n	8007bbe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bb2:	683a      	ldr	r2, [r7, #0]
 8007bb4:	4907      	ldr	r1, [pc, #28]	; (8007bd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bb6:	4808      	ldr	r0, [pc, #32]	; (8007bd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bb8:	f7ff fd96 	bl	80076e8 <USBD_GetString>
 8007bbc:	e004      	b.n	8007bc8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	4904      	ldr	r1, [pc, #16]	; (8007bd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bc2:	4805      	ldr	r0, [pc, #20]	; (8007bd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bc4:	f7ff fd90 	bl	80076e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bc8:	4b02      	ldr	r3, [pc, #8]	; (8007bd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	200014f0 	.word	0x200014f0
 8007bd8:	080083b0 	.word	0x080083b0

08007bdc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007be2:	4b0f      	ldr	r3, [pc, #60]	; (8007c20 <Get_SerialNum+0x44>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007be8:	4b0e      	ldr	r3, [pc, #56]	; (8007c24 <Get_SerialNum+0x48>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007bee:	4b0e      	ldr	r3, [pc, #56]	; (8007c28 <Get_SerialNum+0x4c>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d009      	beq.n	8007c16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c02:	2208      	movs	r2, #8
 8007c04:	4909      	ldr	r1, [pc, #36]	; (8007c2c <Get_SerialNum+0x50>)
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 f814 	bl	8007c34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c0c:	2204      	movs	r2, #4
 8007c0e:	4908      	ldr	r1, [pc, #32]	; (8007c30 <Get_SerialNum+0x54>)
 8007c10:	68b8      	ldr	r0, [r7, #8]
 8007c12:	f000 f80f 	bl	8007c34 <IntToUnicode>
  }
}
 8007c16:	bf00      	nop
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	1fff7a10 	.word	0x1fff7a10
 8007c24:	1fff7a14 	.word	0x1fff7a14
 8007c28:	1fff7a18 	.word	0x1fff7a18
 8007c2c:	200000e2 	.word	0x200000e2
 8007c30:	200000f2 	.word	0x200000f2

08007c34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c42:	2300      	movs	r3, #0
 8007c44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c46:	2300      	movs	r3, #0
 8007c48:	75fb      	strb	r3, [r7, #23]
 8007c4a:	e027      	b.n	8007c9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	0f1b      	lsrs	r3, r3, #28
 8007c50:	2b09      	cmp	r3, #9
 8007c52:	d80b      	bhi.n	8007c6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	0f1b      	lsrs	r3, r3, #28
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	7dfb      	ldrb	r3, [r7, #23]
 8007c5c:	005b      	lsls	r3, r3, #1
 8007c5e:	4619      	mov	r1, r3
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	440b      	add	r3, r1
 8007c64:	3230      	adds	r2, #48	; 0x30
 8007c66:	b2d2      	uxtb	r2, r2
 8007c68:	701a      	strb	r2, [r3, #0]
 8007c6a:	e00a      	b.n	8007c82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	0f1b      	lsrs	r3, r3, #28
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	7dfb      	ldrb	r3, [r7, #23]
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	4619      	mov	r1, r3
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	440b      	add	r3, r1
 8007c7c:	3237      	adds	r2, #55	; 0x37
 8007c7e:	b2d2      	uxtb	r2, r2
 8007c80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	011b      	lsls	r3, r3, #4
 8007c86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c88:	7dfb      	ldrb	r3, [r7, #23]
 8007c8a:	005b      	lsls	r3, r3, #1
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	4413      	add	r3, r2
 8007c92:	2200      	movs	r2, #0
 8007c94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c96:	7dfb      	ldrb	r3, [r7, #23]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	75fb      	strb	r3, [r7, #23]
 8007c9c:	7dfa      	ldrb	r2, [r7, #23]
 8007c9e:	79fb      	ldrb	r3, [r7, #7]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d3d3      	bcc.n	8007c4c <IntToUnicode+0x18>
  }
}
 8007ca4:	bf00      	nop
 8007ca6:	bf00      	nop
 8007ca8:	371c      	adds	r7, #28
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
	...

08007cb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b08a      	sub	sp, #40	; 0x28
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cbc:	f107 0314 	add.w	r3, r7, #20
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	605a      	str	r2, [r3, #4]
 8007cc6:	609a      	str	r2, [r3, #8]
 8007cc8:	60da      	str	r2, [r3, #12]
 8007cca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cd4:	d147      	bne.n	8007d66 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	613b      	str	r3, [r7, #16]
 8007cda:	4b25      	ldr	r3, [pc, #148]	; (8007d70 <HAL_PCD_MspInit+0xbc>)
 8007cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cde:	4a24      	ldr	r2, [pc, #144]	; (8007d70 <HAL_PCD_MspInit+0xbc>)
 8007ce0:	f043 0301 	orr.w	r3, r3, #1
 8007ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8007ce6:	4b22      	ldr	r3, [pc, #136]	; (8007d70 <HAL_PCD_MspInit+0xbc>)
 8007ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cea:	f003 0301 	and.w	r3, r3, #1
 8007cee:	613b      	str	r3, [r7, #16]
 8007cf0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007cf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007d00:	f107 0314 	add.w	r3, r7, #20
 8007d04:	4619      	mov	r1, r3
 8007d06:	481b      	ldr	r0, [pc, #108]	; (8007d74 <HAL_PCD_MspInit+0xc0>)
 8007d08:	f7f9 f954 	bl	8000fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007d0c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d12:	2302      	movs	r3, #2
 8007d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d16:	2300      	movs	r3, #0
 8007d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d1e:	230a      	movs	r3, #10
 8007d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d22:	f107 0314 	add.w	r3, r7, #20
 8007d26:	4619      	mov	r1, r3
 8007d28:	4812      	ldr	r0, [pc, #72]	; (8007d74 <HAL_PCD_MspInit+0xc0>)
 8007d2a:	f7f9 f943 	bl	8000fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d2e:	4b10      	ldr	r3, [pc, #64]	; (8007d70 <HAL_PCD_MspInit+0xbc>)
 8007d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d32:	4a0f      	ldr	r2, [pc, #60]	; (8007d70 <HAL_PCD_MspInit+0xbc>)
 8007d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d38:	6353      	str	r3, [r2, #52]	; 0x34
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	60fb      	str	r3, [r7, #12]
 8007d3e:	4b0c      	ldr	r3, [pc, #48]	; (8007d70 <HAL_PCD_MspInit+0xbc>)
 8007d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d42:	4a0b      	ldr	r2, [pc, #44]	; (8007d70 <HAL_PCD_MspInit+0xbc>)
 8007d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d48:	6453      	str	r3, [r2, #68]	; 0x44
 8007d4a:	4b09      	ldr	r3, [pc, #36]	; (8007d70 <HAL_PCD_MspInit+0xbc>)
 8007d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d52:	60fb      	str	r3, [r7, #12]
 8007d54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d56:	2200      	movs	r2, #0
 8007d58:	2100      	movs	r1, #0
 8007d5a:	2043      	movs	r0, #67	; 0x43
 8007d5c:	f7f9 f8f3 	bl	8000f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d60:	2043      	movs	r0, #67	; 0x43
 8007d62:	f7f9 f90c 	bl	8000f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d66:	bf00      	nop
 8007d68:	3728      	adds	r7, #40	; 0x28
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	40023800 	.word	0x40023800
 8007d74:	40020000 	.word	0x40020000

08007d78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	4610      	mov	r0, r2
 8007d90:	f7fe fb4b 	bl	800642a <USBD_LL_SetupStage>
}
 8007d94:	bf00      	nop
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	460b      	mov	r3, r1
 8007da6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007dae:	78fa      	ldrb	r2, [r7, #3]
 8007db0:	6879      	ldr	r1, [r7, #4]
 8007db2:	4613      	mov	r3, r2
 8007db4:	00db      	lsls	r3, r3, #3
 8007db6:	4413      	add	r3, r2
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	440b      	add	r3, r1
 8007dbc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	78fb      	ldrb	r3, [r7, #3]
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	f7fe fb85 	bl	80064d4 <USBD_LL_DataOutStage>
}
 8007dca:	bf00      	nop
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	460b      	mov	r3, r1
 8007ddc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007de4:	78fa      	ldrb	r2, [r7, #3]
 8007de6:	6879      	ldr	r1, [r7, #4]
 8007de8:	4613      	mov	r3, r2
 8007dea:	00db      	lsls	r3, r3, #3
 8007dec:	4413      	add	r3, r2
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	440b      	add	r3, r1
 8007df2:	334c      	adds	r3, #76	; 0x4c
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	78fb      	ldrb	r3, [r7, #3]
 8007df8:	4619      	mov	r1, r3
 8007dfa:	f7fe fc1e 	bl	800663a <USBD_LL_DataInStage>
}
 8007dfe:	bf00      	nop
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b082      	sub	sp, #8
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7fe fd52 	bl	80068be <USBD_LL_SOF>
}
 8007e1a:	bf00      	nop
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b084      	sub	sp, #16
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d102      	bne.n	8007e3c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007e36:	2300      	movs	r3, #0
 8007e38:	73fb      	strb	r3, [r7, #15]
 8007e3a:	e008      	b.n	8007e4e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d102      	bne.n	8007e4a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007e44:	2301      	movs	r3, #1
 8007e46:	73fb      	strb	r3, [r7, #15]
 8007e48:	e001      	b.n	8007e4e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007e4a:	f7f8 fd5d 	bl	8000908 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e54:	7bfa      	ldrb	r2, [r7, #15]
 8007e56:	4611      	mov	r1, r2
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7fe fcf2 	bl	8006842 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7fe fc9a 	bl	800679e <USBD_LL_Reset>
}
 8007e6a:	bf00      	nop
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
	...

08007e74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fe fced 	bl	8006862 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	6812      	ldr	r2, [r2, #0]
 8007e96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e9a:	f043 0301 	orr.w	r3, r3, #1
 8007e9e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a1b      	ldr	r3, [r3, #32]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d005      	beq.n	8007eb4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ea8:	4b04      	ldr	r3, [pc, #16]	; (8007ebc <HAL_PCD_SuspendCallback+0x48>)
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	4a03      	ldr	r2, [pc, #12]	; (8007ebc <HAL_PCD_SuspendCallback+0x48>)
 8007eae:	f043 0306 	orr.w	r3, r3, #6
 8007eb2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007eb4:	bf00      	nop
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	e000ed00 	.word	0xe000ed00

08007ec0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fe fcdd 	bl	800688e <USBD_LL_Resume>
}
 8007ed4:	bf00      	nop
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007eee:	78fa      	ldrb	r2, [r7, #3]
 8007ef0:	4611      	mov	r1, r2
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fe fd35 	bl	8006962 <USBD_LL_IsoOUTIncomplete>
}
 8007ef8:	bf00      	nop
 8007efa:	3708      	adds	r7, #8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f12:	78fa      	ldrb	r2, [r7, #3]
 8007f14:	4611      	mov	r1, r2
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fe fcf1 	bl	80068fe <USBD_LL_IsoINIncomplete>
}
 8007f1c:	bf00      	nop
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fe fd47 	bl	80069c6 <USBD_LL_DevConnected>
}
 8007f38:	bf00      	nop
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fe fd44 	bl	80069dc <USBD_LL_DevDisconnected>
}
 8007f54:	bf00      	nop
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d13c      	bne.n	8007fe6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007f6c:	4a20      	ldr	r2, [pc, #128]	; (8007ff0 <USBD_LL_Init+0x94>)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a1e      	ldr	r2, [pc, #120]	; (8007ff0 <USBD_LL_Init+0x94>)
 8007f78:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f7c:	4b1c      	ldr	r3, [pc, #112]	; (8007ff0 <USBD_LL_Init+0x94>)
 8007f7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007f82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007f84:	4b1a      	ldr	r3, [pc, #104]	; (8007ff0 <USBD_LL_Init+0x94>)
 8007f86:	2204      	movs	r2, #4
 8007f88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007f8a:	4b19      	ldr	r3, [pc, #100]	; (8007ff0 <USBD_LL_Init+0x94>)
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f90:	4b17      	ldr	r3, [pc, #92]	; (8007ff0 <USBD_LL_Init+0x94>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007f96:	4b16      	ldr	r3, [pc, #88]	; (8007ff0 <USBD_LL_Init+0x94>)
 8007f98:	2202      	movs	r2, #2
 8007f9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f9c:	4b14      	ldr	r3, [pc, #80]	; (8007ff0 <USBD_LL_Init+0x94>)
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007fa2:	4b13      	ldr	r3, [pc, #76]	; (8007ff0 <USBD_LL_Init+0x94>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007fa8:	4b11      	ldr	r3, [pc, #68]	; (8007ff0 <USBD_LL_Init+0x94>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007fae:	4b10      	ldr	r3, [pc, #64]	; (8007ff0 <USBD_LL_Init+0x94>)
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007fb4:	4b0e      	ldr	r3, [pc, #56]	; (8007ff0 <USBD_LL_Init+0x94>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007fba:	480d      	ldr	r0, [pc, #52]	; (8007ff0 <USBD_LL_Init+0x94>)
 8007fbc:	f7f9 ff94 	bl	8001ee8 <HAL_PCD_Init>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007fc6:	f7f8 fc9f 	bl	8000908 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007fca:	2180      	movs	r1, #128	; 0x80
 8007fcc:	4808      	ldr	r0, [pc, #32]	; (8007ff0 <USBD_LL_Init+0x94>)
 8007fce:	f7fb f9ec 	bl	80033aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007fd2:	2240      	movs	r2, #64	; 0x40
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	4806      	ldr	r0, [pc, #24]	; (8007ff0 <USBD_LL_Init+0x94>)
 8007fd8:	f7fb f9a0 	bl	800331c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007fdc:	2280      	movs	r2, #128	; 0x80
 8007fde:	2101      	movs	r1, #1
 8007fe0:	4803      	ldr	r0, [pc, #12]	; (8007ff0 <USBD_LL_Init+0x94>)
 8007fe2:	f7fb f99b 	bl	800331c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	200016f0 	.word	0x200016f0

08007ff4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008000:	2300      	movs	r3, #0
 8008002:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800800a:	4618      	mov	r0, r3
 800800c:	f7fa f889 	bl	8002122 <HAL_PCD_Start>
 8008010:	4603      	mov	r3, r0
 8008012:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008014:	7bfb      	ldrb	r3, [r7, #15]
 8008016:	4618      	mov	r0, r3
 8008018:	f000 f942 	bl	80082a0 <USBD_Get_USB_Status>
 800801c:	4603      	mov	r3, r0
 800801e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008020:	7bbb      	ldrb	r3, [r7, #14]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b084      	sub	sp, #16
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
 8008032:	4608      	mov	r0, r1
 8008034:	4611      	mov	r1, r2
 8008036:	461a      	mov	r2, r3
 8008038:	4603      	mov	r3, r0
 800803a:	70fb      	strb	r3, [r7, #3]
 800803c:	460b      	mov	r3, r1
 800803e:	70bb      	strb	r3, [r7, #2]
 8008040:	4613      	mov	r3, r2
 8008042:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008044:	2300      	movs	r3, #0
 8008046:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008048:	2300      	movs	r3, #0
 800804a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008052:	78bb      	ldrb	r3, [r7, #2]
 8008054:	883a      	ldrh	r2, [r7, #0]
 8008056:	78f9      	ldrb	r1, [r7, #3]
 8008058:	f7fa fd5a 	bl	8002b10 <HAL_PCD_EP_Open>
 800805c:	4603      	mov	r3, r0
 800805e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008060:	7bfb      	ldrb	r3, [r7, #15]
 8008062:	4618      	mov	r0, r3
 8008064:	f000 f91c 	bl	80082a0 <USBD_Get_USB_Status>
 8008068:	4603      	mov	r3, r0
 800806a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800806c:	7bbb      	ldrb	r3, [r7, #14]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b084      	sub	sp, #16
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
 800807e:	460b      	mov	r3, r1
 8008080:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008086:	2300      	movs	r3, #0
 8008088:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008090:	78fa      	ldrb	r2, [r7, #3]
 8008092:	4611      	mov	r1, r2
 8008094:	4618      	mov	r0, r3
 8008096:	f7fa fda3 	bl	8002be0 <HAL_PCD_EP_Close>
 800809a:	4603      	mov	r3, r0
 800809c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800809e:	7bfb      	ldrb	r3, [r7, #15]
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 f8fd 	bl	80082a0 <USBD_Get_USB_Status>
 80080a6:	4603      	mov	r3, r0
 80080a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	460b      	mov	r3, r1
 80080be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080ce:	78fa      	ldrb	r2, [r7, #3]
 80080d0:	4611      	mov	r1, r2
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fa fe7b 	bl	8002dce <HAL_PCD_EP_SetStall>
 80080d8:	4603      	mov	r3, r0
 80080da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 f8de 	bl	80082a0 <USBD_Get_USB_Status>
 80080e4:	4603      	mov	r3, r0
 80080e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	460b      	mov	r3, r1
 80080fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008102:	2300      	movs	r3, #0
 8008104:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800810c:	78fa      	ldrb	r2, [r7, #3]
 800810e:	4611      	mov	r1, r2
 8008110:	4618      	mov	r0, r3
 8008112:	f7fa fec0 	bl	8002e96 <HAL_PCD_EP_ClrStall>
 8008116:	4603      	mov	r3, r0
 8008118:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800811a:	7bfb      	ldrb	r3, [r7, #15]
 800811c:	4618      	mov	r0, r3
 800811e:	f000 f8bf 	bl	80082a0 <USBD_Get_USB_Status>
 8008122:	4603      	mov	r3, r0
 8008124:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008126:	7bbb      	ldrb	r3, [r7, #14]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	460b      	mov	r3, r1
 800813a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008142:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008144:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008148:	2b00      	cmp	r3, #0
 800814a:	da0b      	bge.n	8008164 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800814c:	78fb      	ldrb	r3, [r7, #3]
 800814e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008152:	68f9      	ldr	r1, [r7, #12]
 8008154:	4613      	mov	r3, r2
 8008156:	00db      	lsls	r3, r3, #3
 8008158:	4413      	add	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	440b      	add	r3, r1
 800815e:	333e      	adds	r3, #62	; 0x3e
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	e00b      	b.n	800817c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008164:	78fb      	ldrb	r3, [r7, #3]
 8008166:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800816a:	68f9      	ldr	r1, [r7, #12]
 800816c:	4613      	mov	r3, r2
 800816e:	00db      	lsls	r3, r3, #3
 8008170:	4413      	add	r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	440b      	add	r3, r1
 8008176:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800817a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800817c:	4618      	mov	r0, r3
 800817e:	3714      	adds	r7, #20
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	460b      	mov	r3, r1
 8008192:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008194:	2300      	movs	r3, #0
 8008196:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008198:	2300      	movs	r3, #0
 800819a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081a2:	78fa      	ldrb	r2, [r7, #3]
 80081a4:	4611      	mov	r1, r2
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fa fc8d 	bl	8002ac6 <HAL_PCD_SetAddress>
 80081ac:	4603      	mov	r3, r0
 80081ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 f874 	bl	80082a0 <USBD_Get_USB_Status>
 80081b8:	4603      	mov	r3, r0
 80081ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b086      	sub	sp, #24
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	60f8      	str	r0, [r7, #12]
 80081ce:	607a      	str	r2, [r7, #4]
 80081d0:	603b      	str	r3, [r7, #0]
 80081d2:	460b      	mov	r3, r1
 80081d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80081e4:	7af9      	ldrb	r1, [r7, #11]
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	f7fa fda6 	bl	8002d3a <HAL_PCD_EP_Transmit>
 80081ee:	4603      	mov	r3, r0
 80081f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 f853 	bl	80082a0 <USBD_Get_USB_Status>
 80081fa:	4603      	mov	r3, r0
 80081fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3718      	adds	r7, #24
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	607a      	str	r2, [r7, #4]
 8008212:	603b      	str	r3, [r7, #0]
 8008214:	460b      	mov	r3, r1
 8008216:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008226:	7af9      	ldrb	r1, [r7, #11]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	f7fa fd22 	bl	8002c74 <HAL_PCD_EP_Receive>
 8008230:	4603      	mov	r3, r0
 8008232:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008234:	7dfb      	ldrb	r3, [r7, #23]
 8008236:	4618      	mov	r0, r3
 8008238:	f000 f832 	bl	80082a0 <USBD_Get_USB_Status>
 800823c:	4603      	mov	r3, r0
 800823e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008240:	7dbb      	ldrb	r3, [r7, #22]
}
 8008242:	4618      	mov	r0, r3
 8008244:	3718      	adds	r7, #24
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b082      	sub	sp, #8
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	460b      	mov	r3, r1
 8008254:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800825c:	78fa      	ldrb	r2, [r7, #3]
 800825e:	4611      	mov	r1, r2
 8008260:	4618      	mov	r0, r3
 8008262:	f7fa fd52 	bl	8002d0a <HAL_PCD_EP_GetRxCount>
 8008266:	4603      	mov	r3, r0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008278:	4b03      	ldr	r3, [pc, #12]	; (8008288 <USBD_static_malloc+0x18>)
}
 800827a:	4618      	mov	r0, r3
 800827c:	370c      	adds	r7, #12
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	20001bfc 	.word	0x20001bfc

0800828c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]

}
 8008294:	bf00      	nop
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	4603      	mov	r3, r0
 80082a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082ae:	79fb      	ldrb	r3, [r7, #7]
 80082b0:	2b03      	cmp	r3, #3
 80082b2:	d817      	bhi.n	80082e4 <USBD_Get_USB_Status+0x44>
 80082b4:	a201      	add	r2, pc, #4	; (adr r2, 80082bc <USBD_Get_USB_Status+0x1c>)
 80082b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ba:	bf00      	nop
 80082bc:	080082cd 	.word	0x080082cd
 80082c0:	080082d3 	.word	0x080082d3
 80082c4:	080082d9 	.word	0x080082d9
 80082c8:	080082df 	.word	0x080082df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	73fb      	strb	r3, [r7, #15]
    break;
 80082d0:	e00b      	b.n	80082ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80082d2:	2303      	movs	r3, #3
 80082d4:	73fb      	strb	r3, [r7, #15]
    break;
 80082d6:	e008      	b.n	80082ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80082d8:	2301      	movs	r3, #1
 80082da:	73fb      	strb	r3, [r7, #15]
    break;
 80082dc:	e005      	b.n	80082ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80082de:	2303      	movs	r3, #3
 80082e0:	73fb      	strb	r3, [r7, #15]
    break;
 80082e2:	e002      	b.n	80082ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80082e4:	2303      	movs	r3, #3
 80082e6:	73fb      	strb	r3, [r7, #15]
    break;
 80082e8:	bf00      	nop
  }
  return usb_status;
 80082ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3714      	adds	r7, #20
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <memset>:
 80082f8:	4402      	add	r2, r0
 80082fa:	4603      	mov	r3, r0
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d100      	bne.n	8008302 <memset+0xa>
 8008300:	4770      	bx	lr
 8008302:	f803 1b01 	strb.w	r1, [r3], #1
 8008306:	e7f9      	b.n	80082fc <memset+0x4>

08008308 <__libc_init_array>:
 8008308:	b570      	push	{r4, r5, r6, lr}
 800830a:	4d0d      	ldr	r5, [pc, #52]	; (8008340 <__libc_init_array+0x38>)
 800830c:	4c0d      	ldr	r4, [pc, #52]	; (8008344 <__libc_init_array+0x3c>)
 800830e:	1b64      	subs	r4, r4, r5
 8008310:	10a4      	asrs	r4, r4, #2
 8008312:	2600      	movs	r6, #0
 8008314:	42a6      	cmp	r6, r4
 8008316:	d109      	bne.n	800832c <__libc_init_array+0x24>
 8008318:	4d0b      	ldr	r5, [pc, #44]	; (8008348 <__libc_init_array+0x40>)
 800831a:	4c0c      	ldr	r4, [pc, #48]	; (800834c <__libc_init_array+0x44>)
 800831c:	f000 f818 	bl	8008350 <_init>
 8008320:	1b64      	subs	r4, r4, r5
 8008322:	10a4      	asrs	r4, r4, #2
 8008324:	2600      	movs	r6, #0
 8008326:	42a6      	cmp	r6, r4
 8008328:	d105      	bne.n	8008336 <__libc_init_array+0x2e>
 800832a:	bd70      	pop	{r4, r5, r6, pc}
 800832c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008330:	4798      	blx	r3
 8008332:	3601      	adds	r6, #1
 8008334:	e7ee      	b.n	8008314 <__libc_init_array+0xc>
 8008336:	f855 3b04 	ldr.w	r3, [r5], #4
 800833a:	4798      	blx	r3
 800833c:	3601      	adds	r6, #1
 800833e:	e7f2      	b.n	8008326 <__libc_init_array+0x1e>
 8008340:	080083e0 	.word	0x080083e0
 8008344:	080083e0 	.word	0x080083e0
 8008348:	080083e0 	.word	0x080083e0
 800834c:	080083e4 	.word	0x080083e4

08008350 <_init>:
 8008350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008352:	bf00      	nop
 8008354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008356:	bc08      	pop	{r3}
 8008358:	469e      	mov	lr, r3
 800835a:	4770      	bx	lr

0800835c <_fini>:
 800835c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800835e:	bf00      	nop
 8008360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008362:	bc08      	pop	{r3}
 8008364:	469e      	mov	lr, r3
 8008366:	4770      	bx	lr
