
F4Disc-00h-Template-Baremetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009444  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  080095d4  080095d4  000195d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009770  08009770  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  08009770  08009770  00019770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009778  08009778  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009778  08009778  00019778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800977c  0800977c  0001977c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08009780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020158  2**0
                  CONTENTS
 10 .bss          00001e70  20000158  20000158  00020158  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001fc8  20001fc8  00020158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014b2a  00000000  00000000  000201cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000039bc  00000000  00000000  00034cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001298  00000000  00000000  000386b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e20  00000000  00000000  00039950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025086  00000000  00000000  0003a770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001836c  00000000  00000000  0005f7f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc4ee  00000000  00000000  00077b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005428  00000000  00000000  00144050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  00149478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000158 	.word	0x20000158
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080095bc 	.word	0x080095bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000015c 	.word	0x2000015c
 80001cc:	080095bc 	.word	0x080095bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_write>:
static void MX_I2S3_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
    CDC_Transmit_FS((uint8_t*) ptr, len); return len;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	b29b      	uxth	r3, r3
 800057c:	4619      	mov	r1, r3
 800057e:	68b8      	ldr	r0, [r7, #8]
 8000580:	f007 fc8e 	bl	8007ea0 <CDC_Transmit_FS>
 8000584:	687b      	ldr	r3, [r7, #4]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fd71 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f8f1 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f9ed 	bl	800097c <MX_GPIO_Init>
  MX_I2C1_Init();
 80005a2:	f000 f957 	bl	8000854 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005a6:	f000 f983 	bl	80008b0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005aa:	f000 f9b1 	bl	8000910 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80005ae:	f007 fbb9 	bl	8007d24 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(5000);
 80005b2:	f241 3088 	movw	r0, #5000	; 0x1388
 80005b6:	f000 fdd3 	bl	8001160 <HAL_Delay>
  printf("Cek BarLED, buzzer, USER LED \n\r");
 80005ba:	4860      	ldr	r0, [pc, #384]	; (800073c <main+0x1ac>)
 80005bc:	f008 f98a 	bl	80088d4 <iprintf>
  HAL_Delay(1000);
 80005c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c4:	f000 fdcc 	bl	8001160 <HAL_Delay>
  for (uint8_t cnt=0;cnt<8;cnt++){
 80005c8:	2300      	movs	r3, #0
 80005ca:	71fb      	strb	r3, [r7, #7]
 80005cc:	e044      	b.n	8000658 <main+0xc8>

	  HAL_GPIO_TogglePin(BAR0_GPIO_Port, BAR0_Pin);
 80005ce:	2140      	movs	r1, #64	; 0x40
 80005d0:	485b      	ldr	r0, [pc, #364]	; (8000740 <main+0x1b0>)
 80005d2:	f001 f8c8 	bl	8001766 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(BAR1_GPIO_Port, BAR1_Pin);
 80005d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005da:	485a      	ldr	r0, [pc, #360]	; (8000744 <main+0x1b4>)
 80005dc:	f001 f8c3 	bl	8001766 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(BAR2_GPIO_Port, BAR2_Pin);
 80005e0:	2110      	movs	r1, #16
 80005e2:	4857      	ldr	r0, [pc, #348]	; (8000740 <main+0x1b0>)
 80005e4:	f001 f8bf 	bl	8001766 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(BAR3_GPIO_Port, BAR3_Pin);
 80005e8:	2120      	movs	r1, #32
 80005ea:	4855      	ldr	r0, [pc, #340]	; (8000740 <main+0x1b0>)
 80005ec:	f001 f8bb 	bl	8001766 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(BAR4_GPIO_Port, BAR4_Pin);
 80005f0:	2104      	movs	r1, #4
 80005f2:	4853      	ldr	r0, [pc, #332]	; (8000740 <main+0x1b0>)
 80005f4:	f001 f8b7 	bl	8001766 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(BAR5_GPIO_Port, BAR5_Pin);
 80005f8:	2110      	movs	r1, #16
 80005fa:	4853      	ldr	r0, [pc, #332]	; (8000748 <main+0x1b8>)
 80005fc:	f001 f8b3 	bl	8001766 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(BAR6_GPIO_Port, BAR6_Pin);
 8000600:	2120      	movs	r1, #32
 8000602:	4851      	ldr	r0, [pc, #324]	; (8000748 <main+0x1b8>)
 8000604:	f001 f8af 	bl	8001766 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(BAR7_GPIO_Port, BAR7_Pin);
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	4850      	ldr	r0, [pc, #320]	; (800074c <main+0x1bc>)
 800060c:	f001 f8ab 	bl	8001766 <HAL_GPIO_TogglePin>

	  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8000610:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000614:	484b      	ldr	r0, [pc, #300]	; (8000744 <main+0x1b4>)
 8000616:	f001 f8a6 	bl	8001766 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800061a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061e:	484b      	ldr	r0, [pc, #300]	; (800074c <main+0x1bc>)
 8000620:	f001 f8a1 	bl	8001766 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000624:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000628:	4848      	ldr	r0, [pc, #288]	; (800074c <main+0x1bc>)
 800062a:	f001 f89c 	bl	8001766 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800062e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000632:	4846      	ldr	r0, [pc, #280]	; (800074c <main+0x1bc>)
 8000634:	f001 f897 	bl	8001766 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8000638:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800063c:	4843      	ldr	r0, [pc, #268]	; (800074c <main+0x1bc>)
 800063e:	f001 f892 	bl	8001766 <HAL_GPIO_TogglePin>
	  printf("count: %d \n\r",cnt);
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	4619      	mov	r1, r3
 8000646:	4842      	ldr	r0, [pc, #264]	; (8000750 <main+0x1c0>)
 8000648:	f008 f944 	bl	80088d4 <iprintf>
	  HAL_Delay(100);
 800064c:	2064      	movs	r0, #100	; 0x64
 800064e:	f000 fd87 	bl	8001160 <HAL_Delay>
  for (uint8_t cnt=0;cnt<8;cnt++){
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	3301      	adds	r3, #1
 8000656:	71fb      	strb	r3, [r7, #7]
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b07      	cmp	r3, #7
 800065c:	d9b7      	bls.n	80005ce <main+0x3e>
  }

  printf("Cek Button \n\r");
 800065e:	483d      	ldr	r0, [pc, #244]	; (8000754 <main+0x1c4>)
 8000660:	f008 f938 	bl	80088d4 <iprintf>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    /* USER CODE BEGIN 3 */

		  if (!(HAL_GPIO_ReadPin(BTN_OK_GPIO_Port, BTN_OK_Pin)))
 8000664:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000668:	4835      	ldr	r0, [pc, #212]	; (8000740 <main+0x1b0>)
 800066a:	f001 f84b 	bl	8001704 <HAL_GPIO_ReadPin>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d102      	bne.n	800067a <main+0xea>
			  printf("BTN OK pressed \n\r");
 8000674:	4838      	ldr	r0, [pc, #224]	; (8000758 <main+0x1c8>)
 8000676:	f008 f92d 	bl	80088d4 <iprintf>
		  if (!(HAL_GPIO_ReadPin(BTN_CANCEL_GPIO_Port, BTN_CANCEL_Pin)))
 800067a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800067e:	4830      	ldr	r0, [pc, #192]	; (8000740 <main+0x1b0>)
 8000680:	f001 f840 	bl	8001704 <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d102      	bne.n	8000690 <main+0x100>
			  printf("BTN CANCEL pressed \n\r");
 800068a:	4834      	ldr	r0, [pc, #208]	; (800075c <main+0x1cc>)
 800068c:	f008 f922 	bl	80088d4 <iprintf>
		  if (!(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port, BTN_LEFT_Pin)))
 8000690:	2102      	movs	r1, #2
 8000692:	482d      	ldr	r0, [pc, #180]	; (8000748 <main+0x1b8>)
 8000694:	f001 f836 	bl	8001704 <HAL_GPIO_ReadPin>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d102      	bne.n	80006a4 <main+0x114>
			  printf("BTN LEFT pressed \n\r");
 800069e:	4830      	ldr	r0, [pc, #192]	; (8000760 <main+0x1d0>)
 80006a0:	f008 f918 	bl	80088d4 <iprintf>
		  if (!(HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port, BTN_RIGHT_Pin)))
 80006a4:	2120      	movs	r1, #32
 80006a6:	4827      	ldr	r0, [pc, #156]	; (8000744 <main+0x1b4>)
 80006a8:	f001 f82c 	bl	8001704 <HAL_GPIO_ReadPin>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d102      	bne.n	80006b8 <main+0x128>
			  printf("BTN RIGHT pressed \n\r");
 80006b2:	482c      	ldr	r0, [pc, #176]	; (8000764 <main+0x1d4>)
 80006b4:	f008 f90e 	bl	80088d4 <iprintf>
		  if (!(HAL_GPIO_ReadPin(BTN_UP_GPIO_Port, BTN_UP_Pin)))
 80006b8:	2110      	movs	r1, #16
 80006ba:	4822      	ldr	r0, [pc, #136]	; (8000744 <main+0x1b4>)
 80006bc:	f001 f822 	bl	8001704 <HAL_GPIO_ReadPin>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d102      	bne.n	80006cc <main+0x13c>
			  printf("BTN UP pressed \n\r");
 80006c6:	4828      	ldr	r0, [pc, #160]	; (8000768 <main+0x1d8>)
 80006c8:	f008 f904 	bl	80088d4 <iprintf>
		  if (!(HAL_GPIO_ReadPin(BTN_DN_GPIO_Port, BTN_DN_Pin)))
 80006cc:	2101      	movs	r1, #1
 80006ce:	481e      	ldr	r0, [pc, #120]	; (8000748 <main+0x1b8>)
 80006d0:	f001 f818 	bl	8001704 <HAL_GPIO_ReadPin>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d102      	bne.n	80006e0 <main+0x150>
			  printf("BTN DOWN pressed \n\r");
 80006da:	4824      	ldr	r0, [pc, #144]	; (800076c <main+0x1dc>)
 80006dc:	f008 f8fa 	bl	80088d4 <iprintf>
		  //cek switch
		  if (!(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin)))
 80006e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e4:	4819      	ldr	r0, [pc, #100]	; (800074c <main+0x1bc>)
 80006e6:	f001 f80d 	bl	8001704 <HAL_GPIO_ReadPin>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d102      	bne.n	80006f6 <main+0x166>
		 	  printf("SW1 ON \n\r");
 80006f0:	481f      	ldr	r0, [pc, #124]	; (8000770 <main+0x1e0>)
 80006f2:	f008 f8ef 	bl	80088d4 <iprintf>
		  if (!(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin)))
 80006f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006fa:	4814      	ldr	r0, [pc, #80]	; (800074c <main+0x1bc>)
 80006fc:	f001 f802 	bl	8001704 <HAL_GPIO_ReadPin>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d102      	bne.n	800070c <main+0x17c>
		 	  printf("SW2 ON pressed \n\r");
 8000706:	481b      	ldr	r0, [pc, #108]	; (8000774 <main+0x1e4>)
 8000708:	f008 f8e4 	bl	80088d4 <iprintf>
		  if (!(HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin)))
 800070c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000710:	480d      	ldr	r0, [pc, #52]	; (8000748 <main+0x1b8>)
 8000712:	f000 fff7 	bl	8001704 <HAL_GPIO_ReadPin>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d102      	bne.n	8000722 <main+0x192>
		 	  printf("SW3 ON pressed \n\r");
 800071c:	4816      	ldr	r0, [pc, #88]	; (8000778 <main+0x1e8>)
 800071e:	f008 f8d9 	bl	80088d4 <iprintf>
		  if (!(HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin)))
 8000722:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000726:	4808      	ldr	r0, [pc, #32]	; (8000748 <main+0x1b8>)
 8000728:	f000 ffec 	bl	8001704 <HAL_GPIO_ReadPin>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d198      	bne.n	8000664 <main+0xd4>
		 	  printf("SW4 ON pressed \n\r");
 8000732:	4812      	ldr	r0, [pc, #72]	; (800077c <main+0x1ec>)
 8000734:	f008 f8ce 	bl	80088d4 <iprintf>
		  if (!(HAL_GPIO_ReadPin(BTN_OK_GPIO_Port, BTN_OK_Pin)))
 8000738:	e794      	b.n	8000664 <main+0xd4>
 800073a:	bf00      	nop
 800073c:	080095d4 	.word	0x080095d4
 8000740:	40021000 	.word	0x40021000
 8000744:	40020800 	.word	0x40020800
 8000748:	40020400 	.word	0x40020400
 800074c:	40020c00 	.word	0x40020c00
 8000750:	080095f4 	.word	0x080095f4
 8000754:	08009604 	.word	0x08009604
 8000758:	08009614 	.word	0x08009614
 800075c:	08009628 	.word	0x08009628
 8000760:	08009640 	.word	0x08009640
 8000764:	08009654 	.word	0x08009654
 8000768:	0800966c 	.word	0x0800966c
 800076c:	08009680 	.word	0x08009680
 8000770:	08009694 	.word	0x08009694
 8000774:	080096a0 	.word	0x080096a0
 8000778:	080096b4 	.word	0x080096b4
 800077c:	080096c8 	.word	0x080096c8

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b094      	sub	sp, #80	; 0x50
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0320 	add.w	r3, r7, #32
 800078a:	2230      	movs	r2, #48	; 0x30
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f008 f8f5 	bl	800897e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	4b28      	ldr	r3, [pc, #160]	; (800084c <SystemClock_Config+0xcc>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ac:	4a27      	ldr	r2, [pc, #156]	; (800084c <SystemClock_Config+0xcc>)
 80007ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b2:	6413      	str	r3, [r2, #64]	; 0x40
 80007b4:	4b25      	ldr	r3, [pc, #148]	; (800084c <SystemClock_Config+0xcc>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	4b22      	ldr	r3, [pc, #136]	; (8000850 <SystemClock_Config+0xd0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a21      	ldr	r2, [pc, #132]	; (8000850 <SystemClock_Config+0xd0>)
 80007ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <SystemClock_Config+0xd0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007dc:	2301      	movs	r3, #1
 80007de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e6:	2302      	movs	r3, #2
 80007e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007f0:	2308      	movs	r3, #8
 80007f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007fe:	2307      	movs	r3, #7
 8000800:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	4618      	mov	r0, r3
 8000808:	f003 f82a 	bl	8003860 <HAL_RCC_OscConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000812:	f000 f9fd 	bl	8000c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	230f      	movs	r3, #15
 8000818:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081a:	2302      	movs	r3, #2
 800081c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000822:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000826:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	2105      	movs	r1, #5
 8000834:	4618      	mov	r0, r3
 8000836:	f003 fa8b 	bl	8003d50 <HAL_RCC_ClockConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000840:	f000 f9e6 	bl	8000c10 <Error_Handler>
  }
}
 8000844:	bf00      	nop
 8000846:	3750      	adds	r7, #80	; 0x50
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000

08000854 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_I2C1_Init+0x50>)
 800085a:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <MX_I2C1_Init+0x54>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000860:	4a12      	ldr	r2, [pc, #72]	; (80008ac <MX_I2C1_Init+0x58>)
 8000862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_I2C1_Init+0x50>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000872:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000876:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <MX_I2C1_Init+0x50>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_I2C1_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000892:	f000 ff83 	bl	800179c <HAL_I2C_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800089c:	f000 f9b8 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000174 	.word	0x20000174
 80008a8:	40005400 	.word	0x40005400
 80008ac:	000186a0 	.word	0x000186a0

080008b0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_I2S3_Init+0x54>)
 80008b6:	4a14      	ldr	r2, [pc, #80]	; (8000908 <MX_I2S3_Init+0x58>)
 80008b8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_I2S3_Init+0x54>)
 80008bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_I2S3_Init+0x54>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008c8:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_I2S3_Init+0x54>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <MX_I2S3_Init+0x54>)
 80008d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_I2S3_Init+0x54>)
 80008d8:	4a0c      	ldr	r2, [pc, #48]	; (800090c <MX_I2S3_Init+0x5c>)
 80008da:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_I2S3_Init+0x54>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_I2S3_Init+0x54>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_I2S3_Init+0x54>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_I2S3_Init+0x54>)
 80008f0:	f001 f898 	bl	8001a24 <HAL_I2S_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008fa:	f000 f989 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200001c8 	.word	0x200001c8
 8000908:	40003c00 	.word	0x40003c00
 800090c:	00017700 	.word	0x00017700

08000910 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_SPI1_Init+0x64>)
 8000916:	4a18      	ldr	r2, [pc, #96]	; (8000978 <MX_SPI1_Init+0x68>)
 8000918:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_SPI1_Init+0x64>)
 800091c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000920:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_SPI1_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_SPI1_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_SPI1_Init+0x64>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_SPI1_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_SPI1_Init+0x64>)
 800093c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000940:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_SPI1_Init+0x64>)
 8000944:	2200      	movs	r2, #0
 8000946:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <MX_SPI1_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_SPI1_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <MX_SPI1_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_SPI1_Init+0x64>)
 800095c:	220a      	movs	r2, #10
 800095e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_SPI1_Init+0x64>)
 8000962:	f003 fd41 	bl	80043e8 <HAL_SPI_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800096c:	f000 f950 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000210 	.word	0x20000210
 8000978:	40013000 	.word	0x40013000

0800097c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08c      	sub	sp, #48	; 0x30
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	61bb      	str	r3, [r7, #24]
 8000996:	4b98      	ldr	r3, [pc, #608]	; (8000bf8 <MX_GPIO_Init+0x27c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a97      	ldr	r2, [pc, #604]	; (8000bf8 <MX_GPIO_Init+0x27c>)
 800099c:	f043 0310 	orr.w	r3, r3, #16
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b95      	ldr	r3, [pc, #596]	; (8000bf8 <MX_GPIO_Init+0x27c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0310 	and.w	r3, r3, #16
 80009aa:	61bb      	str	r3, [r7, #24]
 80009ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	4b91      	ldr	r3, [pc, #580]	; (8000bf8 <MX_GPIO_Init+0x27c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a90      	ldr	r2, [pc, #576]	; (8000bf8 <MX_GPIO_Init+0x27c>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b8e      	ldr	r3, [pc, #568]	; (8000bf8 <MX_GPIO_Init+0x27c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b8a      	ldr	r3, [pc, #552]	; (8000bf8 <MX_GPIO_Init+0x27c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a89      	ldr	r2, [pc, #548]	; (8000bf8 <MX_GPIO_Init+0x27c>)
 80009d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b87      	ldr	r3, [pc, #540]	; (8000bf8 <MX_GPIO_Init+0x27c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b83      	ldr	r3, [pc, #524]	; (8000bf8 <MX_GPIO_Init+0x27c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a82      	ldr	r2, [pc, #520]	; (8000bf8 <MX_GPIO_Init+0x27c>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b80      	ldr	r3, [pc, #512]	; (8000bf8 <MX_GPIO_Init+0x27c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	4b7c      	ldr	r3, [pc, #496]	; (8000bf8 <MX_GPIO_Init+0x27c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a7b      	ldr	r2, [pc, #492]	; (8000bf8 <MX_GPIO_Init+0x27c>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b79      	ldr	r3, [pc, #484]	; (8000bf8 <MX_GPIO_Init+0x27c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b75      	ldr	r3, [pc, #468]	; (8000bf8 <MX_GPIO_Init+0x27c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a74      	ldr	r2, [pc, #464]	; (8000bf8 <MX_GPIO_Init+0x27c>)
 8000a28:	f043 0308 	orr.w	r3, r3, #8
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b72      	ldr	r3, [pc, #456]	; (8000bf8 <MX_GPIO_Init+0x27c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0308 	and.w	r3, r3, #8
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BAR4_Pin|CS_I2C_SPI_Pin|BAR2_Pin|BAR3_Pin
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	217c      	movs	r1, #124	; 0x7c
 8000a3e:	486f      	ldr	r0, [pc, #444]	; (8000bfc <MX_GPIO_Init+0x280>)
 8000a40:	f000 fe78 	bl	8001734 <HAL_GPIO_WritePin>
                          |BAR0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BAR1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8000a4a:	486d      	ldr	r0, [pc, #436]	; (8000c00 <MX_GPIO_Init+0x284>)
 8000a4c:	f000 fe72 	bl	8001734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	2101      	movs	r1, #1
 8000a54:	486a      	ldr	r0, [pc, #424]	; (8000c00 <MX_GPIO_Init+0x284>)
 8000a56:	f000 fe6d 	bl	8001734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f24f 0190 	movw	r1, #61584	; 0xf090
 8000a60:	4868      	ldr	r0, [pc, #416]	; (8000c04 <MX_GPIO_Init+0x288>)
 8000a62:	f000 fe67 	bl	8001734 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin|BAR7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BAR5_Pin|BAR6_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2130      	movs	r1, #48	; 0x30
 8000a6a:	4867      	ldr	r0, [pc, #412]	; (8000c08 <MX_GPIO_Init+0x28c>)
 8000a6c:	f000 fe62 	bl	8001734 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BAR4_Pin CS_I2C_SPI_Pin BAR2_Pin BAR3_Pin
                           BAR0_Pin */
  GPIO_InitStruct.Pin = BAR4_Pin|CS_I2C_SPI_Pin|BAR2_Pin|BAR3_Pin
 8000a70:	237c      	movs	r3, #124	; 0x7c
 8000a72:	61fb      	str	r3, [r7, #28]
                          |BAR0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	485d      	ldr	r0, [pc, #372]	; (8000bfc <MX_GPIO_Init+0x280>)
 8000a88:	f000 fca0 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : BAR1_Pin OTG_FS_PowerSwitchOn_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = BAR1_Pin|OTG_FS_PowerSwitchOn_Pin|BUZZER_Pin;
 8000a8c:	f642 0301 	movw	r3, #10241	; 0x2801
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4856      	ldr	r0, [pc, #344]	; (8000c00 <MX_GPIO_Init+0x284>)
 8000aa6:	f000 fc91 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000aaa:	2308      	movs	r3, #8
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aba:	2305      	movs	r3, #5
 8000abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	484e      	ldr	r0, [pc, #312]	; (8000c00 <MX_GPIO_Init+0x284>)
 8000ac6:	f000 fc81 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aca:	2301      	movs	r3, #1
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ace:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	484b      	ldr	r0, [pc, #300]	; (8000c0c <MX_GPIO_Init+0x290>)
 8000ae0:	f000 fc74 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_UP_Pin BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_RIGHT_Pin;
 8000ae4:	2330      	movs	r3, #48	; 0x30
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	4842      	ldr	r0, [pc, #264]	; (8000c00 <MX_GPIO_Init+0x284>)
 8000af8:	f000 fc68 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_DN_Pin BTN_LEFT_Pin SW3_Pin SW4_Pin */
  GPIO_InitStruct.Pin = BTN_DN_Pin|BTN_LEFT_Pin|SW3_Pin|SW4_Pin;
 8000afc:	f641 0303 	movw	r3, #6147	; 0x1803
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	483d      	ldr	r0, [pc, #244]	; (8000c08 <MX_GPIO_Init+0x28c>)
 8000b12:	f000 fc5b 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b16:	2304      	movs	r3, #4
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	4837      	ldr	r0, [pc, #220]	; (8000c08 <MX_GPIO_Init+0x28c>)
 8000b2a:	f000 fc4f 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_OK_Pin BTN_CANCEL_Pin */
  GPIO_InitStruct.Pin = BTN_OK_Pin|BTN_CANCEL_Pin;
 8000b2e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	482e      	ldr	r0, [pc, #184]	; (8000bfc <MX_GPIO_Init+0x280>)
 8000b44:	f000 fc42 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b5a:	2305      	movs	r3, #5
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	4828      	ldr	r0, [pc, #160]	; (8000c08 <MX_GPIO_Init+0x28c>)
 8000b66:	f000 fc31 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin SW1_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|SW1_Pin;
 8000b6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4821      	ldr	r0, [pc, #132]	; (8000c04 <MX_GPIO_Init+0x288>)
 8000b80:	f000 fc24 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin BAR7_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b84:	f24f 0390 	movw	r3, #61584	; 0xf090
 8000b88:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin|BAR7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4819      	ldr	r0, [pc, #100]	; (8000c04 <MX_GPIO_Init+0x288>)
 8000b9e:	f000 fc15 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ba2:	2320      	movs	r3, #32
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4813      	ldr	r0, [pc, #76]	; (8000c04 <MX_GPIO_Init+0x288>)
 8000bb6:	f000 fc09 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : BAR5_Pin BAR6_Pin */
  GPIO_InitStruct.Pin = BAR5_Pin|BAR6_Pin;
 8000bba:	2330      	movs	r3, #48	; 0x30
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480d      	ldr	r0, [pc, #52]	; (8000c08 <MX_GPIO_Init+0x28c>)
 8000bd2:	f000 fbfb 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bda:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	4804      	ldr	r0, [pc, #16]	; (8000bfc <MX_GPIO_Init+0x280>)
 8000bec:	f000 fbee 	bl	80013cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf0:	bf00      	nop
 8000bf2:	3730      	adds	r7, #48	; 0x30
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40020800 	.word	0x40020800
 8000c04:	40020c00 	.word	0x40020c00
 8000c08:	40020400 	.word	0x40020400
 8000c0c:	40020000 	.word	0x40020000

08000c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <Error_Handler+0x8>
	...

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c5a:	2007      	movs	r0, #7
 8000c5c:	f000 fb74 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40023800 	.word	0x40023800

08000c6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a19      	ldr	r2, [pc, #100]	; (8000cf0 <HAL_I2C_MspInit+0x84>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d12c      	bne.n	8000ce8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <HAL_I2C_MspInit+0x88>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a17      	ldr	r2, [pc, #92]	; (8000cf4 <HAL_I2C_MspInit+0x88>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <HAL_I2C_MspInit+0x88>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000caa:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb0:	2312      	movs	r3, #18
 8000cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cbc:	2304      	movs	r3, #4
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <HAL_I2C_MspInit+0x8c>)
 8000cc8:	f000 fb80 	bl	80013cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <HAL_I2C_MspInit+0x88>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <HAL_I2C_MspInit+0x88>)
 8000cd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cda:	6413      	str	r3, [r2, #64]	; 0x40
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <HAL_I2C_MspInit+0x88>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ce8:	bf00      	nop
 8000cea:	3728      	adds	r7, #40	; 0x28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40005400 	.word	0x40005400
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020400 	.word	0x40020400

08000cfc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08e      	sub	sp, #56	; 0x38
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a31      	ldr	r2, [pc, #196]	; (8000dec <HAL_I2S_MspInit+0xf0>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d15a      	bne.n	8000de2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d30:	23c0      	movs	r3, #192	; 0xc0
 8000d32:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d34:	2302      	movs	r3, #2
 8000d36:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f003 fa13 	bl	8004168 <HAL_RCCEx_PeriphCLKConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d48:	f7ff ff62 	bl	8000c10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	4b27      	ldr	r3, [pc, #156]	; (8000df0 <HAL_I2S_MspInit+0xf4>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	4a26      	ldr	r2, [pc, #152]	; (8000df0 <HAL_I2S_MspInit+0xf4>)
 8000d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5c:	4b24      	ldr	r3, [pc, #144]	; (8000df0 <HAL_I2S_MspInit+0xf4>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	4b20      	ldr	r3, [pc, #128]	; (8000df0 <HAL_I2S_MspInit+0xf4>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	4a1f      	ldr	r2, [pc, #124]	; (8000df0 <HAL_I2S_MspInit+0xf4>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	6313      	str	r3, [r2, #48]	; 0x30
 8000d78:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <HAL_I2S_MspInit+0xf4>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <HAL_I2S_MspInit+0xf4>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	4a18      	ldr	r2, [pc, #96]	; (8000df0 <HAL_I2S_MspInit+0xf4>)
 8000d8e:	f043 0304 	orr.w	r3, r3, #4
 8000d92:	6313      	str	r3, [r2, #48]	; 0x30
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <HAL_I2S_MspInit+0xf4>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	f003 0304 	and.w	r3, r3, #4
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000da0:	2310      	movs	r3, #16
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000db0:	2306      	movs	r3, #6
 8000db2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db8:	4619      	mov	r1, r3
 8000dba:	480e      	ldr	r0, [pc, #56]	; (8000df4 <HAL_I2S_MspInit+0xf8>)
 8000dbc:	f000 fb06 	bl	80013cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000dc0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dd2:	2306      	movs	r3, #6
 8000dd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4806      	ldr	r0, [pc, #24]	; (8000df8 <HAL_I2S_MspInit+0xfc>)
 8000dde:	f000 faf5 	bl	80013cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000de2:	bf00      	nop
 8000de4:	3738      	adds	r7, #56	; 0x38
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40003c00 	.word	0x40003c00
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020000 	.word	0x40020000
 8000df8:	40020800 	.word	0x40020800

08000dfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a19      	ldr	r2, [pc, #100]	; (8000e80 <HAL_SPI_MspInit+0x84>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d12b      	bne.n	8000e76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e56:	23e0      	movs	r3, #224	; 0xe0
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e66:	2305      	movs	r3, #5
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <HAL_SPI_MspInit+0x8c>)
 8000e72:	f000 faab 	bl	80013cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	; 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40013000 	.word	0x40013000
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020000 	.word	0x40020000

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <NMI_Handler+0x4>

08000e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <MemManage_Handler+0x4>

08000e9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed8:	f000 f922 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <OTG_FS_IRQHandler+0x10>)
 8000ee6:	f001 fb8d 	bl	8002604 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20001750 	.word	0x20001750

08000ef4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	e00a      	b.n	8000f1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f06:	f3af 8000 	nop.w
 8000f0a:	4601      	mov	r1, r0
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	60ba      	str	r2, [r7, #8]
 8000f12:	b2ca      	uxtb	r2, r1
 8000f14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	dbf0      	blt.n	8000f06 <_read+0x12>
  }

  return len;
 8000f24:	687b      	ldr	r3, [r7, #4]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f56:	605a      	str	r2, [r3, #4]
  return 0;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <_isatty>:

int _isatty(int file)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa0:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <_sbrk+0x5c>)
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <_sbrk+0x60>)
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fac:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d102      	bne.n	8000fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <_sbrk+0x64>)
 8000fb6:	4a12      	ldr	r2, [pc, #72]	; (8001000 <_sbrk+0x68>)
 8000fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d207      	bcs.n	8000fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc8:	f007 fd28 	bl	8008a1c <__errno>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	220c      	movs	r2, #12
 8000fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fd6:	e009      	b.n	8000fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <_sbrk+0x64>)
 8000fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fea:	68fb      	ldr	r3, [r7, #12]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20020000 	.word	0x20020000
 8000ff8:	00000400 	.word	0x00000400
 8000ffc:	20000268 	.word	0x20000268
 8001000:	20001fc8 	.word	0x20001fc8

08001004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <SystemInit+0x20>)
 800100a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100e:	4a05      	ldr	r2, [pc, #20]	; (8001024 <SystemInit+0x20>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001060 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800102e:	490e      	ldr	r1, [pc, #56]	; (8001068 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001030:	4a0e      	ldr	r2, [pc, #56]	; (800106c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001044:	4c0b      	ldr	r4, [pc, #44]	; (8001074 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001052:	f7ff ffd7 	bl	8001004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001056:	f007 fce7 	bl	8008a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105a:	f7ff fa99 	bl	8000590 <main>
  bx  lr    
 800105e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001060:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 800106c:	08009780 	.word	0x08009780
  ldr r2, =_sbss
 8001070:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8001074:	20001fc8 	.word	0x20001fc8

08001078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC_IRQHandler>
	...

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <HAL_Init+0x40>)
 8001086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800108a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <HAL_Init+0x40>)
 8001092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a07      	ldr	r2, [pc, #28]	; (80010bc <HAL_Init+0x40>)
 800109e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 f94f 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f000 f808 	bl	80010c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b0:	f7ff fdb4 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023c00 	.word	0x40023c00

080010c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_InitTick+0x54>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_InitTick+0x58>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f967 	bl	80013b2 <HAL_SYSTICK_Config>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00e      	b.n	800110c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	d80a      	bhi.n	800110a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f4:	2200      	movs	r2, #0
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010fc:	f000 f92f 	bl	800135e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <HAL_InitTick+0x5c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	e000      	b.n	800110c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000000 	.word	0x20000000
 8001118:	20000008 	.word	0x20000008
 800111c:	20000004 	.word	0x20000004

08001120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x20>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x24>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <HAL_IncTick+0x24>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008
 8001144:	2000026c 	.word	0x2000026c

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <HAL_GetTick+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	2000026c 	.word	0x2000026c

08001160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001168:	f7ff ffee 	bl	8001148 <HAL_GetTick>
 800116c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001178:	d005      	beq.n	8001186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_Delay+0x44>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001186:	bf00      	nop
 8001188:	f7ff ffde 	bl	8001148 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	429a      	cmp	r2, r3
 8001196:	d8f7      	bhi.n	8001188 <HAL_Delay+0x28>
  {
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000008 	.word	0x20000008

080011a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c4:	4013      	ands	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011da:	4a04      	ldr	r2, [pc, #16]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	60d3      	str	r3, [r2, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <__NVIC_GetPriorityGrouping+0x18>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	f003 0307 	and.w	r3, r3, #7
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	2b00      	cmp	r3, #0
 800121c:	db0b      	blt.n	8001236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 021f 	and.w	r2, r3, #31
 8001224:	4907      	ldr	r1, [pc, #28]	; (8001244 <__NVIC_EnableIRQ+0x38>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	095b      	lsrs	r3, r3, #5
 800122c:	2001      	movs	r0, #1
 800122e:	fa00 f202 	lsl.w	r2, r0, r2
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e100 	.word	0xe000e100

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	490c      	ldr	r1, [pc, #48]	; (8001294 <__NVIC_SetPriority+0x4c>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4908      	ldr	r1, [pc, #32]	; (8001298 <__NVIC_SetPriority+0x50>)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001314:	d301      	bcc.n	800131a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001316:	2301      	movs	r3, #1
 8001318:	e00f      	b.n	800133a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <SysTick_Config+0x40>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001322:	210f      	movs	r1, #15
 8001324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001328:	f7ff ff8e 	bl	8001248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <SysTick_Config+0x40>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <SysTick_Config+0x40>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	e000e010 	.word	0xe000e010

08001348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff29 	bl	80011a8 <__NVIC_SetPriorityGrouping>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001370:	f7ff ff3e 	bl	80011f0 <__NVIC_GetPriorityGrouping>
 8001374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	f7ff ff8e 	bl	800129c <NVIC_EncodePriority>
 8001380:	4602      	mov	r2, r0
 8001382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff5d 	bl	8001248 <__NVIC_SetPriority>
}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff31 	bl	800120c <__NVIC_EnableIRQ>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ffa2 	bl	8001304 <SysTick_Config>
 80013c0:	4603      	mov	r3, r0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	e16b      	b.n	80016c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013e8:	2201      	movs	r2, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	429a      	cmp	r2, r3
 8001402:	f040 815a 	bne.w	80016ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	2b01      	cmp	r3, #1
 8001410:	d005      	beq.n	800141e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800141a:	2b02      	cmp	r3, #2
 800141c:	d130      	bne.n	8001480 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	2203      	movs	r2, #3
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001454:	2201      	movs	r2, #1
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	091b      	lsrs	r3, r3, #4
 800146a:	f003 0201 	and.w	r2, r3, #1
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b03      	cmp	r3, #3
 800148a:	d017      	beq.n	80014bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d123      	bne.n	8001510 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	08da      	lsrs	r2, r3, #3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3208      	adds	r2, #8
 80014d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	220f      	movs	r2, #15
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	691a      	ldr	r2, [r3, #16]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	08da      	lsrs	r2, r3, #3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3208      	adds	r2, #8
 800150a:	69b9      	ldr	r1, [r7, #24]
 800150c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0203 	and.w	r2, r3, #3
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80b4 	beq.w	80016ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b60      	ldr	r3, [pc, #384]	; (80016d8 <HAL_GPIO_Init+0x30c>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a5f      	ldr	r2, [pc, #380]	; (80016d8 <HAL_GPIO_Init+0x30c>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b5d      	ldr	r3, [pc, #372]	; (80016d8 <HAL_GPIO_Init+0x30c>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800156e:	4a5b      	ldr	r2, [pc, #364]	; (80016dc <HAL_GPIO_Init+0x310>)
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	089b      	lsrs	r3, r3, #2
 8001574:	3302      	adds	r3, #2
 8001576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	220f      	movs	r2, #15
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a52      	ldr	r2, [pc, #328]	; (80016e0 <HAL_GPIO_Init+0x314>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d02b      	beq.n	80015f2 <HAL_GPIO_Init+0x226>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a51      	ldr	r2, [pc, #324]	; (80016e4 <HAL_GPIO_Init+0x318>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d025      	beq.n	80015ee <HAL_GPIO_Init+0x222>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a50      	ldr	r2, [pc, #320]	; (80016e8 <HAL_GPIO_Init+0x31c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d01f      	beq.n	80015ea <HAL_GPIO_Init+0x21e>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4f      	ldr	r2, [pc, #316]	; (80016ec <HAL_GPIO_Init+0x320>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d019      	beq.n	80015e6 <HAL_GPIO_Init+0x21a>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4e      	ldr	r2, [pc, #312]	; (80016f0 <HAL_GPIO_Init+0x324>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d013      	beq.n	80015e2 <HAL_GPIO_Init+0x216>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4d      	ldr	r2, [pc, #308]	; (80016f4 <HAL_GPIO_Init+0x328>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d00d      	beq.n	80015de <HAL_GPIO_Init+0x212>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4c      	ldr	r2, [pc, #304]	; (80016f8 <HAL_GPIO_Init+0x32c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d007      	beq.n	80015da <HAL_GPIO_Init+0x20e>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4b      	ldr	r2, [pc, #300]	; (80016fc <HAL_GPIO_Init+0x330>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d101      	bne.n	80015d6 <HAL_GPIO_Init+0x20a>
 80015d2:	2307      	movs	r3, #7
 80015d4:	e00e      	b.n	80015f4 <HAL_GPIO_Init+0x228>
 80015d6:	2308      	movs	r3, #8
 80015d8:	e00c      	b.n	80015f4 <HAL_GPIO_Init+0x228>
 80015da:	2306      	movs	r3, #6
 80015dc:	e00a      	b.n	80015f4 <HAL_GPIO_Init+0x228>
 80015de:	2305      	movs	r3, #5
 80015e0:	e008      	b.n	80015f4 <HAL_GPIO_Init+0x228>
 80015e2:	2304      	movs	r3, #4
 80015e4:	e006      	b.n	80015f4 <HAL_GPIO_Init+0x228>
 80015e6:	2303      	movs	r3, #3
 80015e8:	e004      	b.n	80015f4 <HAL_GPIO_Init+0x228>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e002      	b.n	80015f4 <HAL_GPIO_Init+0x228>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <HAL_GPIO_Init+0x228>
 80015f2:	2300      	movs	r3, #0
 80015f4:	69fa      	ldr	r2, [r7, #28]
 80015f6:	f002 0203 	and.w	r2, r2, #3
 80015fa:	0092      	lsls	r2, r2, #2
 80015fc:	4093      	lsls	r3, r2
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001604:	4935      	ldr	r1, [pc, #212]	; (80016dc <HAL_GPIO_Init+0x310>)
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	3302      	adds	r3, #2
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001612:	4b3b      	ldr	r3, [pc, #236]	; (8001700 <HAL_GPIO_Init+0x334>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001636:	4a32      	ldr	r2, [pc, #200]	; (8001700 <HAL_GPIO_Init+0x334>)
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800163c:	4b30      	ldr	r3, [pc, #192]	; (8001700 <HAL_GPIO_Init+0x334>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001660:	4a27      	ldr	r2, [pc, #156]	; (8001700 <HAL_GPIO_Init+0x334>)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001666:	4b26      	ldr	r3, [pc, #152]	; (8001700 <HAL_GPIO_Init+0x334>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800168a:	4a1d      	ldr	r2, [pc, #116]	; (8001700 <HAL_GPIO_Init+0x334>)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_GPIO_Init+0x334>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016b4:	4a12      	ldr	r2, [pc, #72]	; (8001700 <HAL_GPIO_Init+0x334>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3301      	adds	r3, #1
 80016be:	61fb      	str	r3, [r7, #28]
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	2b0f      	cmp	r3, #15
 80016c4:	f67f ae90 	bls.w	80013e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3724      	adds	r7, #36	; 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40013800 	.word	0x40013800
 80016e0:	40020000 	.word	0x40020000
 80016e4:	40020400 	.word	0x40020400
 80016e8:	40020800 	.word	0x40020800
 80016ec:	40020c00 	.word	0x40020c00
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40021400 	.word	0x40021400
 80016f8:	40021800 	.word	0x40021800
 80016fc:	40021c00 	.word	0x40021c00
 8001700:	40013c00 	.word	0x40013c00

08001704 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691a      	ldr	r2, [r3, #16]
 8001714:	887b      	ldrh	r3, [r7, #2]
 8001716:	4013      	ands	r3, r2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d002      	beq.n	8001722 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800171c:	2301      	movs	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]
 8001720:	e001      	b.n	8001726 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001726:	7bfb      	ldrb	r3, [r7, #15]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
 8001740:	4613      	mov	r3, r2
 8001742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001744:	787b      	ldrb	r3, [r7, #1]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800174a:	887a      	ldrh	r2, [r7, #2]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001750:	e003      	b.n	800175a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001752:	887b      	ldrh	r3, [r7, #2]
 8001754:	041a      	lsls	r2, r3, #16
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	619a      	str	r2, [r3, #24]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001766:	b480      	push	{r7}
 8001768:	b085      	sub	sp, #20
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	460b      	mov	r3, r1
 8001770:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001778:	887a      	ldrh	r2, [r7, #2]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4013      	ands	r3, r2
 800177e:	041a      	lsls	r2, r3, #16
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	43d9      	mvns	r1, r3
 8001784:	887b      	ldrh	r3, [r7, #2]
 8001786:	400b      	ands	r3, r1
 8001788:	431a      	orrs	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	619a      	str	r2, [r3, #24]
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
	...

0800179c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e12b      	b.n	8001a06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d106      	bne.n	80017c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff fa52 	bl	8000c6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2224      	movs	r2, #36	; 0x24
 80017cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0201 	bic.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001800:	f002 fc9e 	bl	8004140 <HAL_RCC_GetPCLK1Freq>
 8001804:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	4a81      	ldr	r2, [pc, #516]	; (8001a10 <HAL_I2C_Init+0x274>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d807      	bhi.n	8001820 <HAL_I2C_Init+0x84>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4a80      	ldr	r2, [pc, #512]	; (8001a14 <HAL_I2C_Init+0x278>)
 8001814:	4293      	cmp	r3, r2
 8001816:	bf94      	ite	ls
 8001818:	2301      	movls	r3, #1
 800181a:	2300      	movhi	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	e006      	b.n	800182e <HAL_I2C_Init+0x92>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4a7d      	ldr	r2, [pc, #500]	; (8001a18 <HAL_I2C_Init+0x27c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	bf94      	ite	ls
 8001828:	2301      	movls	r3, #1
 800182a:	2300      	movhi	r3, #0
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e0e7      	b.n	8001a06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4a78      	ldr	r2, [pc, #480]	; (8001a1c <HAL_I2C_Init+0x280>)
 800183a:	fba2 2303 	umull	r2, r3, r2, r3
 800183e:	0c9b      	lsrs	r3, r3, #18
 8001840:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	430a      	orrs	r2, r1
 8001854:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	4a6a      	ldr	r2, [pc, #424]	; (8001a10 <HAL_I2C_Init+0x274>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d802      	bhi.n	8001870 <HAL_I2C_Init+0xd4>
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	3301      	adds	r3, #1
 800186e:	e009      	b.n	8001884 <HAL_I2C_Init+0xe8>
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001876:	fb02 f303 	mul.w	r3, r2, r3
 800187a:	4a69      	ldr	r2, [pc, #420]	; (8001a20 <HAL_I2C_Init+0x284>)
 800187c:	fba2 2303 	umull	r2, r3, r2, r3
 8001880:	099b      	lsrs	r3, r3, #6
 8001882:	3301      	adds	r3, #1
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	430b      	orrs	r3, r1
 800188a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001896:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	495c      	ldr	r1, [pc, #368]	; (8001a10 <HAL_I2C_Init+0x274>)
 80018a0:	428b      	cmp	r3, r1
 80018a2:	d819      	bhi.n	80018d8 <HAL_I2C_Init+0x13c>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	1e59      	subs	r1, r3, #1
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80018b2:	1c59      	adds	r1, r3, #1
 80018b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018b8:	400b      	ands	r3, r1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00a      	beq.n	80018d4 <HAL_I2C_Init+0x138>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1e59      	subs	r1, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80018cc:	3301      	adds	r3, #1
 80018ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d2:	e051      	b.n	8001978 <HAL_I2C_Init+0x1dc>
 80018d4:	2304      	movs	r3, #4
 80018d6:	e04f      	b.n	8001978 <HAL_I2C_Init+0x1dc>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d111      	bne.n	8001904 <HAL_I2C_Init+0x168>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	1e58      	subs	r0, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6859      	ldr	r1, [r3, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	440b      	add	r3, r1
 80018ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80018f2:	3301      	adds	r3, #1
 80018f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	bf0c      	ite	eq
 80018fc:	2301      	moveq	r3, #1
 80018fe:	2300      	movne	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	e012      	b.n	800192a <HAL_I2C_Init+0x18e>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	1e58      	subs	r0, r3, #1
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6859      	ldr	r1, [r3, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	0099      	lsls	r1, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	fbb0 f3f3 	udiv	r3, r0, r3
 800191a:	3301      	adds	r3, #1
 800191c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001920:	2b00      	cmp	r3, #0
 8001922:	bf0c      	ite	eq
 8001924:	2301      	moveq	r3, #1
 8001926:	2300      	movne	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_I2C_Init+0x196>
 800192e:	2301      	movs	r3, #1
 8001930:	e022      	b.n	8001978 <HAL_I2C_Init+0x1dc>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10e      	bne.n	8001958 <HAL_I2C_Init+0x1bc>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	1e58      	subs	r0, r3, #1
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6859      	ldr	r1, [r3, #4]
 8001942:	460b      	mov	r3, r1
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	440b      	add	r3, r1
 8001948:	fbb0 f3f3 	udiv	r3, r0, r3
 800194c:	3301      	adds	r3, #1
 800194e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001956:	e00f      	b.n	8001978 <HAL_I2C_Init+0x1dc>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	1e58      	subs	r0, r3, #1
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6859      	ldr	r1, [r3, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	0099      	lsls	r1, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	fbb0 f3f3 	udiv	r3, r0, r3
 800196e:	3301      	adds	r3, #1
 8001970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001974:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	6809      	ldr	r1, [r1, #0]
 800197c:	4313      	orrs	r3, r2
 800197e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69da      	ldr	r2, [r3, #28]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6911      	ldr	r1, [r2, #16]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68d2      	ldr	r2, [r2, #12]
 80019b2:	4311      	orrs	r1, r2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	430b      	orrs	r3, r1
 80019ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695a      	ldr	r2, [r3, #20]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2220      	movs	r2, #32
 80019f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	000186a0 	.word	0x000186a0
 8001a14:	001e847f 	.word	0x001e847f
 8001a18:	003d08ff 	.word	0x003d08ff
 8001a1c:	431bde83 	.word	0x431bde83
 8001a20:	10624dd3 	.word	0x10624dd3

08001a24 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e128      	b.n	8001c88 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d109      	bne.n	8001a56 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a90      	ldr	r2, [pc, #576]	; (8001c90 <HAL_I2S_Init+0x26c>)
 8001a4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff f953 	bl	8000cfc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2202      	movs	r2, #2
 8001a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a6c:	f023 030f 	bic.w	r3, r3, #15
 8001a70:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2202      	movs	r2, #2
 8001a78:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d060      	beq.n	8001b44 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d102      	bne.n	8001a90 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001a8a:	2310      	movs	r3, #16
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	e001      	b.n	8001a94 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001a90:	2320      	movs	r3, #32
 8001a92:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b20      	cmp	r3, #32
 8001a9a:	d802      	bhi.n	8001aa2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	f002 fc42 	bl	800432c <HAL_RCCEx_GetPeriphCLKFreq>
 8001aa8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ab2:	d125      	bne.n	8001b00 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d010      	beq.n	8001ade <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	461a      	mov	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad8:	3305      	adds	r3, #5
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	e01f      	b.n	8001b1e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	461a      	mov	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afa:	3305      	adds	r3, #5
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	e00e      	b.n	8001b1e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	461a      	mov	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1a:	3305      	adds	r3, #5
 8001b1c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4a5c      	ldr	r2, [pc, #368]	; (8001c94 <HAL_I2S_Init+0x270>)
 8001b22:	fba2 2303 	umull	r2, r3, r2, r3
 8001b26:	08db      	lsrs	r3, r3, #3
 8001b28:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	085b      	lsrs	r3, r3, #1
 8001b3a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	e003      	b.n	8001b4c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001b44:	2302      	movs	r3, #2
 8001b46:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d902      	bls.n	8001b58 <HAL_I2S_Init+0x134>
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	2bff      	cmp	r3, #255	; 0xff
 8001b56:	d907      	bls.n	8001b68 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5c:	f043 0210 	orr.w	r2, r3, #16
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e08f      	b.n	8001c88 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	ea42 0103 	orr.w	r1, r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	69fa      	ldr	r2, [r7, #28]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001b86:	f023 030f 	bic.w	r3, r3, #15
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6851      	ldr	r1, [r2, #4]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6892      	ldr	r2, [r2, #8]
 8001b92:	4311      	orrs	r1, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	68d2      	ldr	r2, [r2, #12]
 8001b98:	4311      	orrs	r1, r2
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6992      	ldr	r2, [r2, #24]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001baa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d161      	bne.n	8001c78 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a38      	ldr	r2, [pc, #224]	; (8001c98 <HAL_I2S_Init+0x274>)
 8001bb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a37      	ldr	r2, [pc, #220]	; (8001c9c <HAL_I2S_Init+0x278>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d101      	bne.n	8001bc8 <HAL_I2S_Init+0x1a4>
 8001bc4:	4b36      	ldr	r3, [pc, #216]	; (8001ca0 <HAL_I2S_Init+0x27c>)
 8001bc6:	e001      	b.n	8001bcc <HAL_I2S_Init+0x1a8>
 8001bc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	4932      	ldr	r1, [pc, #200]	; (8001c9c <HAL_I2S_Init+0x278>)
 8001bd4:	428a      	cmp	r2, r1
 8001bd6:	d101      	bne.n	8001bdc <HAL_I2S_Init+0x1b8>
 8001bd8:	4a31      	ldr	r2, [pc, #196]	; (8001ca0 <HAL_I2S_Init+0x27c>)
 8001bda:	e001      	b.n	8001be0 <HAL_I2S_Init+0x1bc>
 8001bdc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001be0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001be4:	f023 030f 	bic.w	r3, r3, #15
 8001be8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a2b      	ldr	r2, [pc, #172]	; (8001c9c <HAL_I2S_Init+0x278>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d101      	bne.n	8001bf8 <HAL_I2S_Init+0x1d4>
 8001bf4:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <HAL_I2S_Init+0x27c>)
 8001bf6:	e001      	b.n	8001bfc <HAL_I2S_Init+0x1d8>
 8001bf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a25      	ldr	r2, [pc, #148]	; (8001c9c <HAL_I2S_Init+0x278>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d101      	bne.n	8001c0e <HAL_I2S_Init+0x1ea>
 8001c0a:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <HAL_I2S_Init+0x27c>)
 8001c0c:	e001      	b.n	8001c12 <HAL_I2S_Init+0x1ee>
 8001c0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c1e:	d003      	beq.n	8001c28 <HAL_I2S_Init+0x204>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d103      	bne.n	8001c30 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001c28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	e001      	b.n	8001c34 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001c30:	2300      	movs	r3, #0
 8001c32:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c52:	4313      	orrs	r3, r2
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	897b      	ldrh	r3, [r7, #10]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c60:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a0d      	ldr	r2, [pc, #52]	; (8001c9c <HAL_I2S_Init+0x278>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d101      	bne.n	8001c70 <HAL_I2S_Init+0x24c>
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <HAL_I2S_Init+0x27c>)
 8001c6e:	e001      	b.n	8001c74 <HAL_I2S_Init+0x250>
 8001c70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c74:	897a      	ldrh	r2, [r7, #10]
 8001c76:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3720      	adds	r7, #32
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	08001d9b 	.word	0x08001d9b
 8001c94:	cccccccd 	.word	0xcccccccd
 8001c98:	08001eb1 	.word	0x08001eb1
 8001c9c:	40003800 	.word	0x40003800
 8001ca0:	40003400 	.word	0x40003400

08001ca4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	881a      	ldrh	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	1c9a      	adds	r2, r3, #2
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10e      	bne.n	8001d34 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d24:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ffb8 	bl	8001ca4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	b292      	uxth	r2, r2
 8001d50:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d56:	1c9a      	adds	r2, r3, #2
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	3b01      	subs	r3, #1
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10e      	bne.n	8001d92 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d82:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ff93 	bl	8001cb8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d13a      	bne.n	8001e2c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d109      	bne.n	8001dd4 <I2S_IRQHandler+0x3a>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dca:	2b40      	cmp	r3, #64	; 0x40
 8001dcc:	d102      	bne.n	8001dd4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ffb4 	bl	8001d3c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dda:	2b40      	cmp	r3, #64	; 0x40
 8001ddc:	d126      	bne.n	8001e2c <I2S_IRQHandler+0x92>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0320 	and.w	r3, r3, #32
 8001de8:	2b20      	cmp	r3, #32
 8001dea:	d11f      	bne.n	8001e2c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001dfa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f043 0202 	orr.w	r2, r3, #2
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ff50 	bl	8001ccc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b03      	cmp	r3, #3
 8001e36:	d136      	bne.n	8001ea6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d109      	bne.n	8001e56 <I2S_IRQHandler+0xbc>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4c:	2b80      	cmp	r3, #128	; 0x80
 8001e4e:	d102      	bne.n	8001e56 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ff45 	bl	8001ce0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d122      	bne.n	8001ea6 <I2S_IRQHandler+0x10c>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0320 	and.w	r3, r3, #32
 8001e6a:	2b20      	cmp	r3, #32
 8001e6c:	d11b      	bne.n	8001ea6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e7c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e98:	f043 0204 	orr.w	r2, r3, #4
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ff13 	bl	8001ccc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a92      	ldr	r2, [pc, #584]	; (8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d101      	bne.n	8001ece <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001eca:	4b92      	ldr	r3, [pc, #584]	; (8002114 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ecc:	e001      	b.n	8001ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001ece:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a8b      	ldr	r2, [pc, #556]	; (8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d101      	bne.n	8001eec <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001ee8:	4b8a      	ldr	r3, [pc, #552]	; (8002114 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001eea:	e001      	b.n	8001ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001eec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001efc:	d004      	beq.n	8001f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f040 8099 	bne.w	800203a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d107      	bne.n	8001f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f925 	bl	800216c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d107      	bne.n	8001f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d002      	beq.n	8001f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f9c8 	bl	80022cc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f42:	2b40      	cmp	r3, #64	; 0x40
 8001f44:	d13a      	bne.n	8001fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	f003 0320 	and.w	r3, r3, #32
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d035      	beq.n	8001fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a6e      	ldr	r2, [pc, #440]	; (8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d101      	bne.n	8001f5e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001f5a:	4b6e      	ldr	r3, [pc, #440]	; (8002114 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f5c:	e001      	b.n	8001f62 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001f5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4969      	ldr	r1, [pc, #420]	; (8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f6a:	428b      	cmp	r3, r1
 8001f6c:	d101      	bne.n	8001f72 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001f6e:	4b69      	ldr	r3, [pc, #420]	; (8002114 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f70:	e001      	b.n	8001f76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001f72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f7a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f8a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	f043 0202 	orr.w	r2, r3, #2
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff fe88 	bl	8001ccc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	f040 80c3 	bne.w	800214e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 80bd 	beq.w	800214e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fe2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a49      	ldr	r2, [pc, #292]	; (8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d101      	bne.n	8001ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001fee:	4b49      	ldr	r3, [pc, #292]	; (8002114 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ff0:	e001      	b.n	8001ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001ff2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4944      	ldr	r1, [pc, #272]	; (8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ffe:	428b      	cmp	r3, r1
 8002000:	d101      	bne.n	8002006 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002002:	4b44      	ldr	r3, [pc, #272]	; (8002114 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002004:	e001      	b.n	800200a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002006:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800200a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800200e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002010:	2300      	movs	r3, #0
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	f043 0204 	orr.w	r2, r3, #4
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff fe4a 	bl	8001ccc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002038:	e089      	b.n	800214e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b02      	cmp	r3, #2
 8002042:	d107      	bne.n	8002054 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204a:	2b00      	cmp	r3, #0
 800204c:	d002      	beq.n	8002054 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f8be 	bl	80021d0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b01      	cmp	r3, #1
 800205c:	d107      	bne.n	800206e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f8fd 	bl	8002268 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002074:	2b40      	cmp	r3, #64	; 0x40
 8002076:	d12f      	bne.n	80020d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 0320 	and.w	r3, r3, #32
 800207e:	2b00      	cmp	r3, #0
 8002080:	d02a      	beq.n	80020d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002090:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a1e      	ldr	r2, [pc, #120]	; (8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d101      	bne.n	80020a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800209c:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800209e:	e001      	b.n	80020a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80020a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4919      	ldr	r1, [pc, #100]	; (8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020ac:	428b      	cmp	r3, r1
 80020ae:	d101      	bne.n	80020b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80020b0:	4b18      	ldr	r3, [pc, #96]	; (8002114 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020b2:	e001      	b.n	80020b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80020b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020bc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	f043 0202 	orr.w	r2, r3, #2
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff fdfa 	bl	8001ccc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d136      	bne.n	8002150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d031      	beq.n	8002150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a07      	ldr	r2, [pc, #28]	; (8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d101      	bne.n	80020fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80020f6:	4b07      	ldr	r3, [pc, #28]	; (8002114 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020f8:	e001      	b.n	80020fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80020fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4902      	ldr	r1, [pc, #8]	; (8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002106:	428b      	cmp	r3, r1
 8002108:	d106      	bne.n	8002118 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800210a:	4b02      	ldr	r3, [pc, #8]	; (8002114 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800210c:	e006      	b.n	800211c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800210e:	bf00      	nop
 8002110:	40003800 	.word	0x40003800
 8002114:	40003400 	.word	0x40003400
 8002118:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800211c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002120:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002130:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f043 0204 	orr.w	r2, r3, #4
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff fdc0 	bl	8001ccc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800214c:	e000      	b.n	8002150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800214e:	bf00      	nop
}
 8002150:	bf00      	nop
 8002152:	3720      	adds	r7, #32
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	1c99      	adds	r1, r3, #2
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6251      	str	r1, [r2, #36]	; 0x24
 800217e:	881a      	ldrh	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218a:	b29b      	uxth	r3, r3
 800218c:	3b01      	subs	r3, #1
 800218e:	b29a      	uxth	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002198:	b29b      	uxth	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d113      	bne.n	80021c6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021ac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d106      	bne.n	80021c6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ffc9 	bl	8002158 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	1c99      	adds	r1, r3, #2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6251      	str	r1, [r2, #36]	; 0x24
 80021e2:	8819      	ldrh	r1, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a1d      	ldr	r2, [pc, #116]	; (8002260 <I2SEx_TxISR_I2SExt+0x90>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d101      	bne.n	80021f2 <I2SEx_TxISR_I2SExt+0x22>
 80021ee:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <I2SEx_TxISR_I2SExt+0x94>)
 80021f0:	e001      	b.n	80021f6 <I2SEx_TxISR_I2SExt+0x26>
 80021f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021f6:	460a      	mov	r2, r1
 80021f8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fe:	b29b      	uxth	r3, r3
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220c:	b29b      	uxth	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d121      	bne.n	8002256 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a12      	ldr	r2, [pc, #72]	; (8002260 <I2SEx_TxISR_I2SExt+0x90>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d101      	bne.n	8002220 <I2SEx_TxISR_I2SExt+0x50>
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <I2SEx_TxISR_I2SExt+0x94>)
 800221e:	e001      	b.n	8002224 <I2SEx_TxISR_I2SExt+0x54>
 8002220:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	490d      	ldr	r1, [pc, #52]	; (8002260 <I2SEx_TxISR_I2SExt+0x90>)
 800222c:	428b      	cmp	r3, r1
 800222e:	d101      	bne.n	8002234 <I2SEx_TxISR_I2SExt+0x64>
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <I2SEx_TxISR_I2SExt+0x94>)
 8002232:	e001      	b.n	8002238 <I2SEx_TxISR_I2SExt+0x68>
 8002234:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002238:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800223c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002242:	b29b      	uxth	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d106      	bne.n	8002256 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff ff81 	bl	8002158 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40003800 	.word	0x40003800
 8002264:	40003400 	.word	0x40003400

08002268 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68d8      	ldr	r0, [r3, #12]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227a:	1c99      	adds	r1, r3, #2
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002280:	b282      	uxth	r2, r0
 8002282:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002288:	b29b      	uxth	r3, r3
 800228a:	3b01      	subs	r3, #1
 800228c:	b29a      	uxth	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002296:	b29b      	uxth	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d113      	bne.n	80022c4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022aa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff ff4a 	bl	8002158 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a20      	ldr	r2, [pc, #128]	; (800235c <I2SEx_RxISR_I2SExt+0x90>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d101      	bne.n	80022e2 <I2SEx_RxISR_I2SExt+0x16>
 80022de:	4b20      	ldr	r3, [pc, #128]	; (8002360 <I2SEx_RxISR_I2SExt+0x94>)
 80022e0:	e001      	b.n	80022e6 <I2SEx_RxISR_I2SExt+0x1a>
 80022e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022e6:	68d8      	ldr	r0, [r3, #12]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	1c99      	adds	r1, r3, #2
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80022f2:	b282      	uxth	r2, r0
 80022f4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d121      	bne.n	8002352 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a12      	ldr	r2, [pc, #72]	; (800235c <I2SEx_RxISR_I2SExt+0x90>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d101      	bne.n	800231c <I2SEx_RxISR_I2SExt+0x50>
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <I2SEx_RxISR_I2SExt+0x94>)
 800231a:	e001      	b.n	8002320 <I2SEx_RxISR_I2SExt+0x54>
 800231c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	490d      	ldr	r1, [pc, #52]	; (800235c <I2SEx_RxISR_I2SExt+0x90>)
 8002328:	428b      	cmp	r3, r1
 800232a:	d101      	bne.n	8002330 <I2SEx_RxISR_I2SExt+0x64>
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <I2SEx_RxISR_I2SExt+0x94>)
 800232e:	e001      	b.n	8002334 <I2SEx_RxISR_I2SExt+0x68>
 8002330:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002334:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002338:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233e:	b29b      	uxth	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d106      	bne.n	8002352 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff ff03 	bl	8002158 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40003800 	.word	0x40003800
 8002360:	40003400 	.word	0x40003400

08002364 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002366:	b08f      	sub	sp, #60	; 0x3c
 8002368:	af0a      	add	r7, sp, #40	; 0x28
 800236a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e10f      	b.n	8002596 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d106      	bne.n	8002396 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f005 fecd 	bl	8008130 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2203      	movs	r2, #3
 800239a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d102      	bne.n	80023b0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f002 f9b4 	bl	8004722 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	687e      	ldr	r6, [r7, #4]
 80023c2:	466d      	mov	r5, sp
 80023c4:	f106 0410 	add.w	r4, r6, #16
 80023c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80023d8:	1d33      	adds	r3, r6, #4
 80023da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023dc:	6838      	ldr	r0, [r7, #0]
 80023de:	f002 f88c 	bl	80044fa <USB_CoreInit>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0d0      	b.n	8002596 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2100      	movs	r1, #0
 80023fa:	4618      	mov	r0, r3
 80023fc:	f002 f9a2 	bl	8004744 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002400:	2300      	movs	r3, #0
 8002402:	73fb      	strb	r3, [r7, #15]
 8002404:	e04a      	b.n	800249c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002406:	7bfa      	ldrb	r2, [r7, #15]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	333d      	adds	r3, #61	; 0x3d
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800241a:	7bfa      	ldrb	r2, [r7, #15]
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4413      	add	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	333c      	adds	r3, #60	; 0x3c
 800242a:	7bfa      	ldrb	r2, [r7, #15]
 800242c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800242e:	7bfa      	ldrb	r2, [r7, #15]
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	b298      	uxth	r0, r3
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	3344      	adds	r3, #68	; 0x44
 8002442:	4602      	mov	r2, r0
 8002444:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002446:	7bfa      	ldrb	r2, [r7, #15]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4413      	add	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	3340      	adds	r3, #64	; 0x40
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800245a:	7bfa      	ldrb	r2, [r7, #15]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	3348      	adds	r3, #72	; 0x48
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800246e:	7bfa      	ldrb	r2, [r7, #15]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	334c      	adds	r3, #76	; 0x4c
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002482:	7bfa      	ldrb	r2, [r7, #15]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	3354      	adds	r3, #84	; 0x54
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	3301      	adds	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
 800249c:	7bfa      	ldrb	r2, [r7, #15]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d3af      	bcc.n	8002406 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a6:	2300      	movs	r3, #0
 80024a8:	73fb      	strb	r3, [r7, #15]
 80024aa:	e044      	b.n	8002536 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024ac:	7bfa      	ldrb	r2, [r7, #15]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80024be:	2200      	movs	r2, #0
 80024c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024c2:	7bfa      	ldrb	r2, [r7, #15]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80024d4:	7bfa      	ldrb	r2, [r7, #15]
 80024d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4413      	add	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024ee:	7bfa      	ldrb	r2, [r7, #15]
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	4613      	mov	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4413      	add	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	440b      	add	r3, r1
 80024fc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002504:	7bfa      	ldrb	r2, [r7, #15]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800251a:	7bfa      	ldrb	r2, [r7, #15]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4413      	add	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	3301      	adds	r3, #1
 8002534:	73fb      	strb	r3, [r7, #15]
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	429a      	cmp	r2, r3
 800253e:	d3b5      	bcc.n	80024ac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	603b      	str	r3, [r7, #0]
 8002546:	687e      	ldr	r6, [r7, #4]
 8002548:	466d      	mov	r5, sp
 800254a:	f106 0410 	add.w	r4, r6, #16
 800254e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002556:	e894 0003 	ldmia.w	r4, {r0, r1}
 800255a:	e885 0003 	stmia.w	r5, {r0, r1}
 800255e:	1d33      	adds	r3, r6, #4
 8002560:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002562:	6838      	ldr	r0, [r7, #0]
 8002564:	f002 f93a 	bl	80047dc <USB_DevInit>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2202      	movs	r2, #2
 8002572:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e00d      	b.n	8002596 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f003 fa89 	bl	8005aa6 <USB_DevDisconnect>

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800259e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b084      	sub	sp, #16
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d101      	bne.n	80025ba <HAL_PCD_Start+0x1c>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e020      	b.n	80025fc <HAL_PCD_Start+0x5e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d109      	bne.n	80025de <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d005      	beq.n	80025de <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f002 f88c 	bl	8004700 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f003 fa39 	bl	8005a64 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002604:	b590      	push	{r4, r7, lr}
 8002606:	b08d      	sub	sp, #52	; 0x34
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f003 faf7 	bl	8005c0e <USB_GetMode>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	f040 848a 	bne.w	8002f3c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f003 fa5b 	bl	8005ae8 <USB_ReadInterrupts>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 8480 	beq.w	8002f3a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	0a1b      	lsrs	r3, r3, #8
 8002644:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f003 fa48 	bl	8005ae8 <USB_ReadInterrupts>
 8002658:	4603      	mov	r3, r0
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b02      	cmp	r3, #2
 8002660:	d107      	bne.n	8002672 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f002 0202 	and.w	r2, r2, #2
 8002670:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f003 fa36 	bl	8005ae8 <USB_ReadInterrupts>
 800267c:	4603      	mov	r3, r0
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	2b10      	cmp	r3, #16
 8002684:	d161      	bne.n	800274a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	699a      	ldr	r2, [r3, #24]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0210 	bic.w	r2, r2, #16
 8002694:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	f003 020f 	and.w	r2, r3, #15
 80026a2:	4613      	mov	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	3304      	adds	r3, #4
 80026b4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	0c5b      	lsrs	r3, r3, #17
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d124      	bne.n	800270c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d035      	beq.n	800273a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026dc:	b29b      	uxth	r3, r3
 80026de:	461a      	mov	r2, r3
 80026e0:	6a38      	ldr	r0, [r7, #32]
 80026e2:	f003 f86d 	bl	80057c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026f2:	441a      	add	r2, r3
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	6a1a      	ldr	r2, [r3, #32]
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	091b      	lsrs	r3, r3, #4
 8002700:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002704:	441a      	add	r2, r3
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	621a      	str	r2, [r3, #32]
 800270a:	e016      	b.n	800273a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	0c5b      	lsrs	r3, r3, #17
 8002710:	f003 030f 	and.w	r3, r3, #15
 8002714:	2b06      	cmp	r3, #6
 8002716:	d110      	bne.n	800273a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800271e:	2208      	movs	r2, #8
 8002720:	4619      	mov	r1, r3
 8002722:	6a38      	ldr	r0, [r7, #32]
 8002724:	f003 f84c 	bl	80057c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	6a1a      	ldr	r2, [r3, #32]
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	091b      	lsrs	r3, r3, #4
 8002730:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002734:	441a      	add	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	699a      	ldr	r2, [r3, #24]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0210 	orr.w	r2, r2, #16
 8002748:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f003 f9ca 	bl	8005ae8 <USB_ReadInterrupts>
 8002754:	4603      	mov	r3, r0
 8002756:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800275a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800275e:	f040 80a7 	bne.w	80028b0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f003 f9cf 	bl	8005b0e <USB_ReadDevAllOutEpInterrupt>
 8002770:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002772:	e099      	b.n	80028a8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 808e 	beq.w	800289c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	4611      	mov	r1, r2
 800278a:	4618      	mov	r0, r3
 800278c:	f003 f9f3 	bl	8005b76 <USB_ReadDevOutEPInterrupt>
 8002790:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00c      	beq.n	80027b6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a8:	461a      	mov	r2, r3
 80027aa:	2301      	movs	r3, #1
 80027ac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80027ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 fec3 	bl	800353c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00c      	beq.n	80027da <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027cc:	461a      	mov	r2, r3
 80027ce:	2308      	movs	r3, #8
 80027d0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80027d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 ff99 	bl	800370c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027f0:	461a      	mov	r2, r3
 80027f2:	2310      	movs	r3, #16
 80027f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d030      	beq.n	8002862 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002808:	2b80      	cmp	r3, #128	; 0x80
 800280a:	d109      	bne.n	8002820 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	69fa      	ldr	r2, [r7, #28]
 8002816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800281a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800281e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	3304      	adds	r3, #4
 8002834:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	78db      	ldrb	r3, [r3, #3]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d108      	bne.n	8002850 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2200      	movs	r2, #0
 8002842:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	b2db      	uxtb	r3, r3
 8002848:	4619      	mov	r1, r3
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f005 fd84 	bl	8008358 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	4413      	add	r3, r2
 8002858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800285c:	461a      	mov	r2, r3
 800285e:	2302      	movs	r3, #2
 8002860:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	4413      	add	r3, r2
 8002874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002878:	461a      	mov	r2, r3
 800287a:	2320      	movs	r3, #32
 800287c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d009      	beq.n	800289c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	4413      	add	r3, r2
 8002890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002894:	461a      	mov	r2, r3
 8002896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800289a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	3301      	adds	r3, #1
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	085b      	lsrs	r3, r3, #1
 80028a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f47f af62 	bne.w	8002774 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f003 f917 	bl	8005ae8 <USB_ReadInterrupts>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028c4:	f040 80db 	bne.w	8002a7e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f003 f938 	bl	8005b42 <USB_ReadDevAllInEpInterrupt>
 80028d2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80028d8:	e0cd      	b.n	8002a76 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 80c2 	beq.w	8002a6a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f003 f95e 	bl	8005bb2 <USB_ReadDevInEPInterrupt>
 80028f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d057      	beq.n	80029b2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	f003 030f 	and.w	r3, r3, #15
 8002908:	2201      	movs	r2, #1
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	43db      	mvns	r3, r3
 800291c:	69f9      	ldr	r1, [r7, #28]
 800291e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002922:	4013      	ands	r3, r2
 8002924:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	4413      	add	r3, r2
 800292e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002932:	461a      	mov	r2, r3
 8002934:	2301      	movs	r3, #1
 8002936:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d132      	bne.n	80029a6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	334c      	adds	r3, #76	; 0x4c
 8002950:	6819      	ldr	r1, [r3, #0]
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002956:	4613      	mov	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	4413      	add	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4403      	add	r3, r0
 8002960:	3348      	adds	r3, #72	; 0x48
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4419      	add	r1, r3
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296a:	4613      	mov	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	4413      	add	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4403      	add	r3, r0
 8002974:	334c      	adds	r3, #76	; 0x4c
 8002976:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	2b00      	cmp	r3, #0
 800297c:	d113      	bne.n	80029a6 <HAL_PCD_IRQHandler+0x3a2>
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002982:	4613      	mov	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	3354      	adds	r3, #84	; 0x54
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d108      	bne.n	80029a6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800299e:	461a      	mov	r2, r3
 80029a0:	2101      	movs	r1, #1
 80029a2:	f003 f965 	bl	8005c70 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	4619      	mov	r1, r3
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f005 fc4e 	bl	800824e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d008      	beq.n	80029ce <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	015a      	lsls	r2, r3, #5
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029c8:	461a      	mov	r2, r3
 80029ca:	2308      	movs	r3, #8
 80029cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029e4:	461a      	mov	r2, r3
 80029e6:	2310      	movs	r3, #16
 80029e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a00:	461a      	mov	r2, r3
 8002a02:	2340      	movs	r3, #64	; 0x40
 8002a04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d023      	beq.n	8002a58 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a12:	6a38      	ldr	r0, [r7, #32]
 8002a14:	f002 f846 	bl	8004aa4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	3338      	adds	r3, #56	; 0x38
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	4413      	add	r3, r2
 8002a28:	3304      	adds	r3, #4
 8002a2a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	78db      	ldrb	r3, [r3, #3]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d108      	bne.n	8002a46 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2200      	movs	r2, #0
 8002a38:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	4619      	mov	r1, r3
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f005 fc9b 	bl	800837c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a52:	461a      	mov	r2, r3
 8002a54:	2302      	movs	r3, #2
 8002a56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 fcdb 	bl	8003420 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a72:	085b      	lsrs	r3, r3, #1
 8002a74:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f47f af2e 	bne.w	80028da <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f003 f830 	bl	8005ae8 <USB_ReadInterrupts>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a92:	d122      	bne.n	8002ada <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa2:	f023 0301 	bic.w	r3, r3, #1
 8002aa6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d108      	bne.n	8002ac4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002aba:	2100      	movs	r1, #0
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 fec3 	bl	8003848 <HAL_PCDEx_LPM_Callback>
 8002ac2:	e002      	b.n	8002aca <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f005 fc39 	bl	800833c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695a      	ldr	r2, [r3, #20]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ad8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f003 f802 	bl	8005ae8 <USB_ReadInterrupts>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aee:	d112      	bne.n	8002b16 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d102      	bne.n	8002b06 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f005 fbf5 	bl	80082f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695a      	ldr	r2, [r3, #20]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b14:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f002 ffe4 	bl	8005ae8 <USB_ReadInterrupts>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b2a:	f040 80b7 	bne.w	8002c9c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b3c:	f023 0301 	bic.w	r3, r3, #1
 8002b40:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2110      	movs	r1, #16
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f001 ffab 	bl	8004aa4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b4e:	2300      	movs	r3, #0
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b52:	e046      	b.n	8002be2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b56:	015a      	lsls	r2, r3, #5
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b60:	461a      	mov	r2, r3
 8002b62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b66:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b78:	0151      	lsls	r1, r2, #5
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	440a      	add	r2, r1
 8002b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b86:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b94:	461a      	mov	r2, r3
 8002b96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b9a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bac:	0151      	lsls	r1, r2, #5
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	440a      	add	r2, r1
 8002bb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bcc:	0151      	lsls	r1, r2, #5
 8002bce:	69fa      	ldr	r2, [r7, #28]
 8002bd0:	440a      	add	r2, r1
 8002bd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002bda:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bde:	3301      	adds	r3, #1
 8002be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d3b3      	bcc.n	8002b54 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	69fa      	ldr	r2, [r7, #28]
 8002bf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bfa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002bfe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d016      	beq.n	8002c36 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c12:	69fa      	ldr	r2, [r7, #28]
 8002c14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c18:	f043 030b 	orr.w	r3, r3, #11
 8002c1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c28:	69fa      	ldr	r2, [r7, #28]
 8002c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c2e:	f043 030b 	orr.w	r3, r3, #11
 8002c32:	6453      	str	r3, [r2, #68]	; 0x44
 8002c34:	e015      	b.n	8002c62 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	69fa      	ldr	r2, [r7, #28]
 8002c40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c48:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002c4c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	69fa      	ldr	r2, [r7, #28]
 8002c58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c5c:	f043 030b 	orr.w	r3, r3, #11
 8002c60:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	69fa      	ldr	r2, [r7, #28]
 8002c6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c70:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002c74:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c86:	461a      	mov	r2, r3
 8002c88:	f002 fff2 	bl	8005c70 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002c9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f002 ff21 	bl	8005ae8 <USB_ReadInterrupts>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb0:	d124      	bne.n	8002cfc <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f002 ffb7 	bl	8005c2a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f001 ff6c 	bl	8004b9e <USB_GetDevSpeed>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	461a      	mov	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681c      	ldr	r4, [r3, #0]
 8002cd2:	f001 fa29 	bl	8004128 <HAL_RCC_GetHCLKFreq>
 8002cd6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	f001 fc6b 	bl	80045bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f005 fad9 	bl	800829e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002cfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f002 fef1 	bl	8005ae8 <USB_ReadInterrupts>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d10a      	bne.n	8002d26 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f005 fab6 	bl	8008282 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695a      	ldr	r2, [r3, #20]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f002 0208 	and.w	r2, r2, #8
 8002d24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f002 fedc 	bl	8005ae8 <USB_ReadInterrupts>
 8002d30:	4603      	mov	r3, r0
 8002d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d36:	2b80      	cmp	r3, #128	; 0x80
 8002d38:	d122      	bne.n	8002d80 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d46:	2301      	movs	r3, #1
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4a:	e014      	b.n	8002d76 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d50:	4613      	mov	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d105      	bne.n	8002d70 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	4619      	mov	r1, r3
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fb27 	bl	80033be <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	3301      	adds	r3, #1
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d3e5      	bcc.n	8002d4c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f002 feaf 	bl	8005ae8 <USB_ReadInterrupts>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d94:	d13b      	bne.n	8002e0e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d96:	2301      	movs	r3, #1
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
 8002d9a:	e02b      	b.n	8002df4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	015a      	lsls	r2, r3, #5
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	4413      	add	r3, r2
 8002da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db0:	4613      	mov	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	3340      	adds	r3, #64	; 0x40
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d115      	bne.n	8002dee <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002dc2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	da12      	bge.n	8002dee <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dcc:	4613      	mov	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	333f      	adds	r3, #63	; 0x3f
 8002dd8:	2201      	movs	r2, #1
 8002dda:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	4619      	mov	r1, r3
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 fae8 	bl	80033be <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	3301      	adds	r3, #1
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d3ce      	bcc.n	8002d9c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695a      	ldr	r2, [r3, #20]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002e0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f002 fe68 	bl	8005ae8 <USB_ReadInterrupts>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e22:	d155      	bne.n	8002ed0 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e24:	2301      	movs	r3, #1
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
 8002e28:	e045      	b.n	8002eb6 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e3e:	4613      	mov	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d12e      	bne.n	8002eb0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e52:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	da2b      	bge.n	8002eb0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002e64:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d121      	bne.n	8002eb0 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e70:	4613      	mov	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10a      	bne.n	8002eb0 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eac:	6053      	str	r3, [r2, #4]
            break;
 8002eae:	e007      	b.n	8002ec0 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d3b4      	bcc.n	8002e2a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ece:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f002 fe07 	bl	8005ae8 <USB_ReadInterrupts>
 8002eda:	4603      	mov	r3, r0
 8002edc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee4:	d10a      	bne.n	8002efc <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f005 fa5a 	bl	80083a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002efa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f002 fdf1 	bl	8005ae8 <USB_ReadInterrupts>
 8002f06:	4603      	mov	r3, r0
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d115      	bne.n	8002f3c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f005 fa4a 	bl	80083bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6859      	ldr	r1, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	605a      	str	r2, [r3, #4]
 8002f38:	e000      	b.n	8002f3c <HAL_PCD_IRQHandler+0x938>
      return;
 8002f3a:	bf00      	nop
    }
  }
}
 8002f3c:	3734      	adds	r7, #52	; 0x34
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd90      	pop	{r4, r7, pc}

08002f42 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_PCD_SetAddress+0x1a>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e013      	b.n	8002f84 <HAL_PCD_SetAddress+0x42>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f002 fd4f 	bl	8005a18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	4608      	mov	r0, r1
 8002f96:	4611      	mov	r1, r2
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	70fb      	strb	r3, [r7, #3]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	803b      	strh	r3, [r7, #0]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002faa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	da0f      	bge.n	8002fd2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	f003 020f 	and.w	r2, r3, #15
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	3338      	adds	r3, #56	; 0x38
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	705a      	strb	r2, [r3, #1]
 8002fd0:	e00f      	b.n	8002ff2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	f003 020f 	and.w	r2, r3, #15
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3304      	adds	r3, #4
 8002fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ff2:	78fb      	ldrb	r3, [r7, #3]
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ffe:	883a      	ldrh	r2, [r7, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	78ba      	ldrb	r2, [r7, #2]
 8003008:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	785b      	ldrb	r3, [r3, #1]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d004      	beq.n	800301c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800301c:	78bb      	ldrb	r3, [r7, #2]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d102      	bne.n	8003028 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <HAL_PCD_EP_Open+0xaa>
 8003032:	2302      	movs	r3, #2
 8003034:	e00e      	b.n	8003054 <HAL_PCD_EP_Open+0xc8>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68f9      	ldr	r1, [r7, #12]
 8003044:	4618      	mov	r0, r3
 8003046:	f001 fdcf 	bl	8004be8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003052:	7afb      	ldrb	r3, [r7, #11]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800306c:	2b00      	cmp	r3, #0
 800306e:	da0f      	bge.n	8003090 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003070:	78fb      	ldrb	r3, [r7, #3]
 8003072:	f003 020f 	and.w	r2, r3, #15
 8003076:	4613      	mov	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	3338      	adds	r3, #56	; 0x38
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	4413      	add	r3, r2
 8003084:	3304      	adds	r3, #4
 8003086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2201      	movs	r2, #1
 800308c:	705a      	strb	r2, [r3, #1]
 800308e:	e00f      	b.n	80030b0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003090:	78fb      	ldrb	r3, [r7, #3]
 8003092:	f003 020f 	and.w	r2, r3, #15
 8003096:	4613      	mov	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	4413      	add	r3, r2
 80030a6:	3304      	adds	r3, #4
 80030a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_PCD_EP_Close+0x6e>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e00e      	b.n	80030e8 <HAL_PCD_EP_Close+0x8c>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68f9      	ldr	r1, [r7, #12]
 80030d8:	4618      	mov	r0, r3
 80030da:	f001 fe0d 	bl	8004cf8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	607a      	str	r2, [r7, #4]
 80030fa:	603b      	str	r3, [r7, #0]
 80030fc:	460b      	mov	r3, r1
 80030fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003100:	7afb      	ldrb	r3, [r7, #11]
 8003102:	f003 020f 	and.w	r2, r3, #15
 8003106:	4613      	mov	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	4413      	add	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4413      	add	r3, r2
 8003116:	3304      	adds	r3, #4
 8003118:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2200      	movs	r2, #0
 800312a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2200      	movs	r2, #0
 8003130:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003132:	7afb      	ldrb	r3, [r7, #11]
 8003134:	f003 030f 	and.w	r3, r3, #15
 8003138:	b2da      	uxtb	r2, r3
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d102      	bne.n	800314c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800314c:	7afb      	ldrb	r3, [r7, #11]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	461a      	mov	r2, r3
 8003162:	6979      	ldr	r1, [r7, #20]
 8003164:	f002 f8ec 	bl	8005340 <USB_EP0StartXfer>
 8003168:	e008      	b.n	800317c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	6979      	ldr	r1, [r7, #20]
 8003178:	f001 fe9a 	bl	8004eb0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	460b      	mov	r3, r1
 8003190:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	f003 020f 	and.w	r2, r3, #15
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80031a8:	681b      	ldr	r3, [r3, #0]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b086      	sub	sp, #24
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	603b      	str	r3, [r7, #0]
 80031c2:	460b      	mov	r3, r1
 80031c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c6:	7afb      	ldrb	r3, [r7, #11]
 80031c8:	f003 020f 	and.w	r2, r3, #15
 80031cc:	4613      	mov	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	3338      	adds	r3, #56	; 0x38
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4413      	add	r3, r2
 80031da:	3304      	adds	r3, #4
 80031dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2200      	movs	r2, #0
 80031ee:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2201      	movs	r2, #1
 80031f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031f6:	7afb      	ldrb	r3, [r7, #11]
 80031f8:	f003 030f 	and.w	r3, r3, #15
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d102      	bne.n	8003210 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003210:	7afb      	ldrb	r3, [r7, #11]
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	b2db      	uxtb	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	6979      	ldr	r1, [r7, #20]
 8003228:	f002 f88a 	bl	8005340 <USB_EP0StartXfer>
 800322c:	e008      	b.n	8003240 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6818      	ldr	r0, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	461a      	mov	r2, r3
 800323a:	6979      	ldr	r1, [r7, #20]
 800323c:	f001 fe38 	bl	8004eb0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	460b      	mov	r3, r1
 8003254:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	f003 020f 	and.w	r2, r3, #15
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	429a      	cmp	r2, r3
 8003262:	d901      	bls.n	8003268 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e050      	b.n	800330a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003268:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800326c:	2b00      	cmp	r3, #0
 800326e:	da0f      	bge.n	8003290 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	f003 020f 	and.w	r2, r3, #15
 8003276:	4613      	mov	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4413      	add	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	3338      	adds	r3, #56	; 0x38
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	4413      	add	r3, r2
 8003284:	3304      	adds	r3, #4
 8003286:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	705a      	strb	r2, [r3, #1]
 800328e:	e00d      	b.n	80032ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	4613      	mov	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	4413      	add	r3, r2
 80032a2:	3304      	adds	r3, #4
 80032a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2201      	movs	r2, #1
 80032b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032b2:	78fb      	ldrb	r3, [r7, #3]
 80032b4:	f003 030f 	and.w	r3, r3, #15
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_PCD_EP_SetStall+0x82>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e01e      	b.n	800330a <HAL_PCD_EP_SetStall+0xc0>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68f9      	ldr	r1, [r7, #12]
 80032da:	4618      	mov	r0, r3
 80032dc:	f002 fac8 	bl	8005870 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10a      	bne.n	8003300 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	b2d9      	uxtb	r1, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032fa:	461a      	mov	r2, r3
 80032fc:	f002 fcb8 	bl	8005c70 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	460b      	mov	r3, r1
 800331c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800331e:	78fb      	ldrb	r3, [r7, #3]
 8003320:	f003 020f 	and.w	r2, r3, #15
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	429a      	cmp	r2, r3
 800332a:	d901      	bls.n	8003330 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e042      	b.n	80033b6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003334:	2b00      	cmp	r3, #0
 8003336:	da0f      	bge.n	8003358 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003338:	78fb      	ldrb	r3, [r7, #3]
 800333a:	f003 020f 	and.w	r2, r3, #15
 800333e:	4613      	mov	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	3338      	adds	r3, #56	; 0x38
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	4413      	add	r3, r2
 800334c:	3304      	adds	r3, #4
 800334e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	705a      	strb	r2, [r3, #1]
 8003356:	e00f      	b.n	8003378 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	f003 020f 	and.w	r2, r3, #15
 800335e:	4613      	mov	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	4413      	add	r3, r2
 800336e:	3304      	adds	r3, #4
 8003370:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800337e:	78fb      	ldrb	r3, [r7, #3]
 8003380:	f003 030f 	and.w	r3, r3, #15
 8003384:	b2da      	uxtb	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <HAL_PCD_EP_ClrStall+0x86>
 8003394:	2302      	movs	r3, #2
 8003396:	e00e      	b.n	80033b6 <HAL_PCD_EP_ClrStall+0xa4>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68f9      	ldr	r1, [r7, #12]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f002 fad0 	bl	800594c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	460b      	mov	r3, r1
 80033c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80033ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	da0c      	bge.n	80033ec <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033d2:	78fb      	ldrb	r3, [r7, #3]
 80033d4:	f003 020f 	and.w	r2, r3, #15
 80033d8:	4613      	mov	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4413      	add	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	3338      	adds	r3, #56	; 0x38
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	4413      	add	r3, r2
 80033e6:	3304      	adds	r3, #4
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	e00c      	b.n	8003406 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033ec:	78fb      	ldrb	r3, [r7, #3]
 80033ee:	f003 020f 	and.w	r2, r3, #15
 80033f2:	4613      	mov	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	4413      	add	r3, r2
 8003402:	3304      	adds	r3, #4
 8003404:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68f9      	ldr	r1, [r7, #12]
 800340c:	4618      	mov	r0, r3
 800340e:	f002 f8ef 	bl	80055f0 <USB_EPStopXfer>
 8003412:	4603      	mov	r3, r0
 8003414:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003416:	7afb      	ldrb	r3, [r7, #11]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08a      	sub	sp, #40	; 0x28
 8003424:	af02      	add	r7, sp, #8
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	4613      	mov	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	3338      	adds	r3, #56	; 0x38
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	4413      	add	r3, r2
 8003444:	3304      	adds	r3, #4
 8003446:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a1a      	ldr	r2, [r3, #32]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	429a      	cmp	r2, r3
 8003452:	d901      	bls.n	8003458 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e06c      	b.n	8003532 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	699a      	ldr	r2, [r3, #24]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	429a      	cmp	r2, r3
 800346c:	d902      	bls.n	8003474 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	3303      	adds	r3, #3
 8003478:	089b      	lsrs	r3, r3, #2
 800347a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800347c:	e02b      	b.n	80034d6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	69fa      	ldr	r2, [r7, #28]
 8003490:	429a      	cmp	r2, r3
 8003492:	d902      	bls.n	800349a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3303      	adds	r3, #3
 800349e:	089b      	lsrs	r3, r3, #2
 80034a0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6919      	ldr	r1, [r3, #16]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	4603      	mov	r3, r0
 80034b8:	6978      	ldr	r0, [r7, #20]
 80034ba:	f002 f943 	bl	8005744 <USB_WritePacket>

    ep->xfer_buff  += len;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	441a      	add	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a1a      	ldr	r2, [r3, #32]
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	441a      	add	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d809      	bhi.n	8003500 <PCD_WriteEmptyTxFifo+0xe0>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a1a      	ldr	r2, [r3, #32]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d203      	bcs.n	8003500 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1be      	bne.n	800347e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	699a      	ldr	r2, [r3, #24]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	429a      	cmp	r2, r3
 800350a:	d811      	bhi.n	8003530 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	2201      	movs	r2, #1
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	43db      	mvns	r3, r3
 8003526:	6939      	ldr	r1, [r7, #16]
 8003528:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800352c:	4013      	ands	r3, r2
 800352e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3720      	adds	r7, #32
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	333c      	adds	r3, #60	; 0x3c
 8003554:	3304      	adds	r3, #4
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	4413      	add	r3, r2
 8003562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d17b      	bne.n	800366a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	d015      	beq.n	80035a8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	4a61      	ldr	r2, [pc, #388]	; (8003704 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003580:	4293      	cmp	r3, r2
 8003582:	f240 80b9 	bls.w	80036f8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 80b3 	beq.w	80036f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	4413      	add	r3, r2
 800359a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800359e:	461a      	mov	r2, r3
 80035a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035a4:	6093      	str	r3, [r2, #8]
 80035a6:	e0a7      	b.n	80036f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d009      	beq.n	80035c6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035be:	461a      	mov	r2, r3
 80035c0:	2320      	movs	r3, #32
 80035c2:	6093      	str	r3, [r2, #8]
 80035c4:	e098      	b.n	80036f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f040 8093 	bne.w	80036f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	4a4b      	ldr	r2, [pc, #300]	; (8003704 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d90f      	bls.n	80035fa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f0:	461a      	mov	r2, r3
 80035f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035f6:	6093      	str	r3, [r2, #8]
 80035f8:	e07e      	b.n	80036f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	4613      	mov	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	4413      	add	r3, r2
 800360c:	3304      	adds	r3, #4
 800360e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	69da      	ldr	r2, [r3, #28]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	0159      	lsls	r1, r3, #5
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	440b      	add	r3, r1
 800361c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003626:	1ad2      	subs	r2, r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d114      	bne.n	800365c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d109      	bne.n	800364e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003644:	461a      	mov	r2, r3
 8003646:	2101      	movs	r1, #1
 8003648:	f002 fb12 	bl	8005c70 <USB_EP0_OutStart>
 800364c:	e006      	b.n	800365c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	441a      	add	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	4619      	mov	r1, r3
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f004 fdd8 	bl	8008218 <HAL_PCD_DataOutStageCallback>
 8003668:	e046      	b.n	80036f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	4a26      	ldr	r2, [pc, #152]	; (8003708 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d124      	bne.n	80036bc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003688:	461a      	mov	r2, r3
 800368a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800368e:	6093      	str	r3, [r2, #8]
 8003690:	e032      	b.n	80036f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a8:	461a      	mov	r2, r3
 80036aa:	2320      	movs	r3, #32
 80036ac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	4619      	mov	r1, r3
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f004 fdaf 	bl	8008218 <HAL_PCD_DataOutStageCallback>
 80036ba:	e01d      	b.n	80036f8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d114      	bne.n	80036ec <PCD_EP_OutXfrComplete_int+0x1b0>
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	4613      	mov	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	4413      	add	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d108      	bne.n	80036ec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036e4:	461a      	mov	r2, r3
 80036e6:	2100      	movs	r1, #0
 80036e8:	f002 fac2 	bl	8005c70 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	4619      	mov	r1, r3
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f004 fd90 	bl	8008218 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3720      	adds	r7, #32
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	4f54300a 	.word	0x4f54300a
 8003708:	4f54310a 	.word	0x4f54310a

0800370c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	333c      	adds	r3, #60	; 0x3c
 8003724:	3304      	adds	r3, #4
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	4413      	add	r3, r2
 8003732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4a15      	ldr	r2, [pc, #84]	; (8003794 <PCD_EP_OutSetupPacket_int+0x88>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d90e      	bls.n	8003760 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003748:	2b00      	cmp	r3, #0
 800374a:	d009      	beq.n	8003760 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4413      	add	r3, r2
 8003754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003758:	461a      	mov	r2, r3
 800375a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800375e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f004 fd47 	bl	80081f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4a0a      	ldr	r2, [pc, #40]	; (8003794 <PCD_EP_OutSetupPacket_int+0x88>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d90c      	bls.n	8003788 <PCD_EP_OutSetupPacket_int+0x7c>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d108      	bne.n	8003788 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003780:	461a      	mov	r2, r3
 8003782:	2101      	movs	r1, #1
 8003784:	f002 fa74 	bl	8005c70 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	4f54300a 	.word	0x4f54300a

08003798 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	70fb      	strb	r3, [r7, #3]
 80037a4:	4613      	mov	r3, r2
 80037a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d107      	bne.n	80037c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80037b6:	883b      	ldrh	r3, [r7, #0]
 80037b8:	0419      	lsls	r1, r3, #16
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	629a      	str	r2, [r3, #40]	; 0x28
 80037c4:	e028      	b.n	8003818 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037cc:	0c1b      	lsrs	r3, r3, #16
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	4413      	add	r3, r2
 80037d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037d4:	2300      	movs	r3, #0
 80037d6:	73fb      	strb	r3, [r7, #15]
 80037d8:	e00d      	b.n	80037f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	7bfb      	ldrb	r3, [r7, #15]
 80037e0:	3340      	adds	r3, #64	; 0x40
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	0c1b      	lsrs	r3, r3, #16
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	4413      	add	r3, r2
 80037ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	3301      	adds	r3, #1
 80037f4:	73fb      	strb	r3, [r7, #15]
 80037f6:	7bfa      	ldrb	r2, [r7, #15]
 80037f8:	78fb      	ldrb	r3, [r7, #3]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d3ec      	bcc.n	80037da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003800:	883b      	ldrh	r3, [r7, #0]
 8003802:	0418      	lsls	r0, r3, #16
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6819      	ldr	r1, [r3, #0]
 8003808:	78fb      	ldrb	r3, [r7, #3]
 800380a:	3b01      	subs	r3, #1
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	4302      	orrs	r2, r0
 8003810:	3340      	adds	r3, #64	; 0x40
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	460b      	mov	r3, r1
 8003830:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	887a      	ldrh	r2, [r7, #2]
 8003838:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	460b      	mov	r3, r1
 8003852:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e267      	b.n	8003d42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d075      	beq.n	800396a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800387e:	4b88      	ldr	r3, [pc, #544]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	2b04      	cmp	r3, #4
 8003888:	d00c      	beq.n	80038a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800388a:	4b85      	ldr	r3, [pc, #532]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003892:	2b08      	cmp	r3, #8
 8003894:	d112      	bne.n	80038bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003896:	4b82      	ldr	r3, [pc, #520]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800389e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038a2:	d10b      	bne.n	80038bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a4:	4b7e      	ldr	r3, [pc, #504]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d05b      	beq.n	8003968 <HAL_RCC_OscConfig+0x108>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d157      	bne.n	8003968 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e242      	b.n	8003d42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c4:	d106      	bne.n	80038d4 <HAL_RCC_OscConfig+0x74>
 80038c6:	4b76      	ldr	r3, [pc, #472]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a75      	ldr	r2, [pc, #468]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 80038cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	e01d      	b.n	8003910 <HAL_RCC_OscConfig+0xb0>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038dc:	d10c      	bne.n	80038f8 <HAL_RCC_OscConfig+0x98>
 80038de:	4b70      	ldr	r3, [pc, #448]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a6f      	ldr	r2, [pc, #444]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 80038e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	4b6d      	ldr	r3, [pc, #436]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a6c      	ldr	r2, [pc, #432]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 80038f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	e00b      	b.n	8003910 <HAL_RCC_OscConfig+0xb0>
 80038f8:	4b69      	ldr	r3, [pc, #420]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a68      	ldr	r2, [pc, #416]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 80038fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	4b66      	ldr	r3, [pc, #408]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a65      	ldr	r2, [pc, #404]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 800390a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800390e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d013      	beq.n	8003940 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7fd fc16 	bl	8001148 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003920:	f7fd fc12 	bl	8001148 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b64      	cmp	r3, #100	; 0x64
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e207      	b.n	8003d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003932:	4b5b      	ldr	r3, [pc, #364]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0f0      	beq.n	8003920 <HAL_RCC_OscConfig+0xc0>
 800393e:	e014      	b.n	800396a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7fd fc02 	bl	8001148 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003948:	f7fd fbfe 	bl	8001148 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b64      	cmp	r3, #100	; 0x64
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e1f3      	b.n	8003d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395a:	4b51      	ldr	r3, [pc, #324]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0xe8>
 8003966:	e000      	b.n	800396a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d063      	beq.n	8003a3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003976:	4b4a      	ldr	r3, [pc, #296]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00b      	beq.n	800399a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003982:	4b47      	ldr	r3, [pc, #284]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800398a:	2b08      	cmp	r3, #8
 800398c:	d11c      	bne.n	80039c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800398e:	4b44      	ldr	r3, [pc, #272]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d116      	bne.n	80039c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399a:	4b41      	ldr	r3, [pc, #260]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d005      	beq.n	80039b2 <HAL_RCC_OscConfig+0x152>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d001      	beq.n	80039b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e1c7      	b.n	8003d42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b2:	4b3b      	ldr	r3, [pc, #236]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4937      	ldr	r1, [pc, #220]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c6:	e03a      	b.n	8003a3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d020      	beq.n	8003a12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039d0:	4b34      	ldr	r3, [pc, #208]	; (8003aa4 <HAL_RCC_OscConfig+0x244>)
 80039d2:	2201      	movs	r2, #1
 80039d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d6:	f7fd fbb7 	bl	8001148 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039de:	f7fd fbb3 	bl	8001148 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e1a8      	b.n	8003d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f0:	4b2b      	ldr	r3, [pc, #172]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0f0      	beq.n	80039de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fc:	4b28      	ldr	r3, [pc, #160]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	4925      	ldr	r1, [pc, #148]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	600b      	str	r3, [r1, #0]
 8003a10:	e015      	b.n	8003a3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a12:	4b24      	ldr	r3, [pc, #144]	; (8003aa4 <HAL_RCC_OscConfig+0x244>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a18:	f7fd fb96 	bl	8001148 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a20:	f7fd fb92 	bl	8001148 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e187      	b.n	8003d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a32:	4b1b      	ldr	r3, [pc, #108]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d036      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d016      	beq.n	8003a80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a52:	4b15      	ldr	r3, [pc, #84]	; (8003aa8 <HAL_RCC_OscConfig+0x248>)
 8003a54:	2201      	movs	r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a58:	f7fd fb76 	bl	8001148 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a60:	f7fd fb72 	bl	8001148 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e167      	b.n	8003d42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a72:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <HAL_RCC_OscConfig+0x240>)
 8003a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0x200>
 8003a7e:	e01b      	b.n	8003ab8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a80:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <HAL_RCC_OscConfig+0x248>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a86:	f7fd fb5f 	bl	8001148 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a8c:	e00e      	b.n	8003aac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a8e:	f7fd fb5b 	bl	8001148 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d907      	bls.n	8003aac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e150      	b.n	8003d42 <HAL_RCC_OscConfig+0x4e2>
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	42470000 	.word	0x42470000
 8003aa8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aac:	4b88      	ldr	r3, [pc, #544]	; (8003cd0 <HAL_RCC_OscConfig+0x470>)
 8003aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1ea      	bne.n	8003a8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 8097 	beq.w	8003bf4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aca:	4b81      	ldr	r3, [pc, #516]	; (8003cd0 <HAL_RCC_OscConfig+0x470>)
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10f      	bne.n	8003af6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60bb      	str	r3, [r7, #8]
 8003ada:	4b7d      	ldr	r3, [pc, #500]	; (8003cd0 <HAL_RCC_OscConfig+0x470>)
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	4a7c      	ldr	r2, [pc, #496]	; (8003cd0 <HAL_RCC_OscConfig+0x470>)
 8003ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ae6:	4b7a      	ldr	r3, [pc, #488]	; (8003cd0 <HAL_RCC_OscConfig+0x470>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aee:	60bb      	str	r3, [r7, #8]
 8003af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003af2:	2301      	movs	r3, #1
 8003af4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af6:	4b77      	ldr	r3, [pc, #476]	; (8003cd4 <HAL_RCC_OscConfig+0x474>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d118      	bne.n	8003b34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b02:	4b74      	ldr	r3, [pc, #464]	; (8003cd4 <HAL_RCC_OscConfig+0x474>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a73      	ldr	r2, [pc, #460]	; (8003cd4 <HAL_RCC_OscConfig+0x474>)
 8003b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b0e:	f7fd fb1b 	bl	8001148 <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b16:	f7fd fb17 	bl	8001148 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e10c      	b.n	8003d42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b28:	4b6a      	ldr	r3, [pc, #424]	; (8003cd4 <HAL_RCC_OscConfig+0x474>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0f0      	beq.n	8003b16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d106      	bne.n	8003b4a <HAL_RCC_OscConfig+0x2ea>
 8003b3c:	4b64      	ldr	r3, [pc, #400]	; (8003cd0 <HAL_RCC_OscConfig+0x470>)
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b40:	4a63      	ldr	r2, [pc, #396]	; (8003cd0 <HAL_RCC_OscConfig+0x470>)
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	6713      	str	r3, [r2, #112]	; 0x70
 8003b48:	e01c      	b.n	8003b84 <HAL_RCC_OscConfig+0x324>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2b05      	cmp	r3, #5
 8003b50:	d10c      	bne.n	8003b6c <HAL_RCC_OscConfig+0x30c>
 8003b52:	4b5f      	ldr	r3, [pc, #380]	; (8003cd0 <HAL_RCC_OscConfig+0x470>)
 8003b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b56:	4a5e      	ldr	r2, [pc, #376]	; (8003cd0 <HAL_RCC_OscConfig+0x470>)
 8003b58:	f043 0304 	orr.w	r3, r3, #4
 8003b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b5e:	4b5c      	ldr	r3, [pc, #368]	; (8003cd0 <HAL_RCC_OscConfig+0x470>)
 8003b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b62:	4a5b      	ldr	r2, [pc, #364]	; (8003cd0 <HAL_RCC_OscConfig+0x470>)
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	6713      	str	r3, [r2, #112]	; 0x70
 8003b6a:	e00b      	b.n	8003b84 <HAL_RCC_OscConfig+0x324>
 8003b6c:	4b58      	ldr	r3, [pc, #352]	; (8003cd0 <HAL_RCC_OscConfig+0x470>)
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b70:	4a57      	ldr	r2, [pc, #348]	; (8003cd0 <HAL_RCC_OscConfig+0x470>)
 8003b72:	f023 0301 	bic.w	r3, r3, #1
 8003b76:	6713      	str	r3, [r2, #112]	; 0x70
 8003b78:	4b55      	ldr	r3, [pc, #340]	; (8003cd0 <HAL_RCC_OscConfig+0x470>)
 8003b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7c:	4a54      	ldr	r2, [pc, #336]	; (8003cd0 <HAL_RCC_OscConfig+0x470>)
 8003b7e:	f023 0304 	bic.w	r3, r3, #4
 8003b82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d015      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8c:	f7fd fadc 	bl	8001148 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b92:	e00a      	b.n	8003baa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b94:	f7fd fad8 	bl	8001148 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e0cb      	b.n	8003d42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003baa:	4b49      	ldr	r3, [pc, #292]	; (8003cd0 <HAL_RCC_OscConfig+0x470>)
 8003bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0ee      	beq.n	8003b94 <HAL_RCC_OscConfig+0x334>
 8003bb6:	e014      	b.n	8003be2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb8:	f7fd fac6 	bl	8001148 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bbe:	e00a      	b.n	8003bd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc0:	f7fd fac2 	bl	8001148 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e0b5      	b.n	8003d42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd6:	4b3e      	ldr	r3, [pc, #248]	; (8003cd0 <HAL_RCC_OscConfig+0x470>)
 8003bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1ee      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003be2:	7dfb      	ldrb	r3, [r7, #23]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d105      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be8:	4b39      	ldr	r3, [pc, #228]	; (8003cd0 <HAL_RCC_OscConfig+0x470>)
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	4a38      	ldr	r2, [pc, #224]	; (8003cd0 <HAL_RCC_OscConfig+0x470>)
 8003bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 80a1 	beq.w	8003d40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bfe:	4b34      	ldr	r3, [pc, #208]	; (8003cd0 <HAL_RCC_OscConfig+0x470>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 030c 	and.w	r3, r3, #12
 8003c06:	2b08      	cmp	r3, #8
 8003c08:	d05c      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d141      	bne.n	8003c96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c12:	4b31      	ldr	r3, [pc, #196]	; (8003cd8 <HAL_RCC_OscConfig+0x478>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c18:	f7fd fa96 	bl	8001148 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c20:	f7fd fa92 	bl	8001148 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e087      	b.n	8003d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c32:	4b27      	ldr	r3, [pc, #156]	; (8003cd0 <HAL_RCC_OscConfig+0x470>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69da      	ldr	r2, [r3, #28]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	019b      	lsls	r3, r3, #6
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c54:	085b      	lsrs	r3, r3, #1
 8003c56:	3b01      	subs	r3, #1
 8003c58:	041b      	lsls	r3, r3, #16
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	061b      	lsls	r3, r3, #24
 8003c62:	491b      	ldr	r1, [pc, #108]	; (8003cd0 <HAL_RCC_OscConfig+0x470>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c68:	4b1b      	ldr	r3, [pc, #108]	; (8003cd8 <HAL_RCC_OscConfig+0x478>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6e:	f7fd fa6b 	bl	8001148 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c76:	f7fd fa67 	bl	8001148 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e05c      	b.n	8003d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c88:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <HAL_RCC_OscConfig+0x470>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCC_OscConfig+0x416>
 8003c94:	e054      	b.n	8003d40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c96:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <HAL_RCC_OscConfig+0x478>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9c:	f7fd fa54 	bl	8001148 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ca4:	f7fd fa50 	bl	8001148 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e045      	b.n	8003d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb6:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <HAL_RCC_OscConfig+0x470>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1f0      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x444>
 8003cc2:	e03d      	b.n	8003d40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d107      	bne.n	8003cdc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e038      	b.n	8003d42 <HAL_RCC_OscConfig+0x4e2>
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	40007000 	.word	0x40007000
 8003cd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cdc:	4b1b      	ldr	r3, [pc, #108]	; (8003d4c <HAL_RCC_OscConfig+0x4ec>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d028      	beq.n	8003d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d121      	bne.n	8003d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d11a      	bne.n	8003d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d111      	bne.n	8003d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d22:	085b      	lsrs	r3, r3, #1
 8003d24:	3b01      	subs	r3, #1
 8003d26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d107      	bne.n	8003d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d001      	beq.n	8003d40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40023800 	.word	0x40023800

08003d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0cc      	b.n	8003efe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d64:	4b68      	ldr	r3, [pc, #416]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d90c      	bls.n	8003d8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d72:	4b65      	ldr	r3, [pc, #404]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7a:	4b63      	ldr	r3, [pc, #396]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d001      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0b8      	b.n	8003efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d020      	beq.n	8003dda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da4:	4b59      	ldr	r3, [pc, #356]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	4a58      	ldr	r2, [pc, #352]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d005      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dbc:	4b53      	ldr	r3, [pc, #332]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	4a52      	ldr	r2, [pc, #328]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc8:	4b50      	ldr	r3, [pc, #320]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	494d      	ldr	r1, [pc, #308]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d044      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d107      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dee:	4b47      	ldr	r3, [pc, #284]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d119      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e07f      	b.n	8003efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d003      	beq.n	8003e0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d107      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e0e:	4b3f      	ldr	r3, [pc, #252]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d109      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e06f      	b.n	8003efe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e1e:	4b3b      	ldr	r3, [pc, #236]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e067      	b.n	8003efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e2e:	4b37      	ldr	r3, [pc, #220]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f023 0203 	bic.w	r2, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	4934      	ldr	r1, [pc, #208]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e40:	f7fd f982 	bl	8001148 <HAL_GetTick>
 8003e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e46:	e00a      	b.n	8003e5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e48:	f7fd f97e 	bl	8001148 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e04f      	b.n	8003efe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5e:	4b2b      	ldr	r3, [pc, #172]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 020c 	and.w	r2, r3, #12
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d1eb      	bne.n	8003e48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e70:	4b25      	ldr	r3, [pc, #148]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d20c      	bcs.n	8003e98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7e:	4b22      	ldr	r3, [pc, #136]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e86:	4b20      	ldr	r3, [pc, #128]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e032      	b.n	8003efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea4:	4b19      	ldr	r3, [pc, #100]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	4916      	ldr	r1, [pc, #88]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d009      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ec2:	4b12      	ldr	r3, [pc, #72]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	490e      	ldr	r1, [pc, #56]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ed6:	f000 f821 	bl	8003f1c <HAL_RCC_GetSysClockFreq>
 8003eda:	4602      	mov	r2, r0
 8003edc:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	490a      	ldr	r1, [pc, #40]	; (8003f10 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee8:	5ccb      	ldrb	r3, [r1, r3]
 8003eea:	fa22 f303 	lsr.w	r3, r2, r3
 8003eee:	4a09      	ldr	r2, [pc, #36]	; (8003f14 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ef2:	4b09      	ldr	r3, [pc, #36]	; (8003f18 <HAL_RCC_ClockConfig+0x1c8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fd f8e2 	bl	80010c0 <HAL_InitTick>

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40023c00 	.word	0x40023c00
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	08009724 	.word	0x08009724
 8003f14:	20000000 	.word	0x20000000
 8003f18:	20000004 	.word	0x20000004

08003f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f20:	b094      	sub	sp, #80	; 0x50
 8003f22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	647b      	str	r3, [r7, #68]	; 0x44
 8003f28:	2300      	movs	r3, #0
 8003f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f34:	4b79      	ldr	r3, [pc, #484]	; (800411c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 030c 	and.w	r3, r3, #12
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d00d      	beq.n	8003f5c <HAL_RCC_GetSysClockFreq+0x40>
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	f200 80e1 	bhi.w	8004108 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <HAL_RCC_GetSysClockFreq+0x34>
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d003      	beq.n	8003f56 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f4e:	e0db      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f50:	4b73      	ldr	r3, [pc, #460]	; (8004120 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f54:	e0db      	b.n	800410e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f56:	4b73      	ldr	r3, [pc, #460]	; (8004124 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f5a:	e0d8      	b.n	800410e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f5c:	4b6f      	ldr	r3, [pc, #444]	; (800411c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f66:	4b6d      	ldr	r3, [pc, #436]	; (800411c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d063      	beq.n	800403a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f72:	4b6a      	ldr	r3, [pc, #424]	; (800411c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	099b      	lsrs	r3, r3, #6
 8003f78:	2200      	movs	r2, #0
 8003f7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f84:	633b      	str	r3, [r7, #48]	; 0x30
 8003f86:	2300      	movs	r3, #0
 8003f88:	637b      	str	r3, [r7, #52]	; 0x34
 8003f8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f8e:	4622      	mov	r2, r4
 8003f90:	462b      	mov	r3, r5
 8003f92:	f04f 0000 	mov.w	r0, #0
 8003f96:	f04f 0100 	mov.w	r1, #0
 8003f9a:	0159      	lsls	r1, r3, #5
 8003f9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fa0:	0150      	lsls	r0, r2, #5
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	1a51      	subs	r1, r2, r1
 8003faa:	6139      	str	r1, [r7, #16]
 8003fac:	4629      	mov	r1, r5
 8003fae:	eb63 0301 	sbc.w	r3, r3, r1
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fc0:	4659      	mov	r1, fp
 8003fc2:	018b      	lsls	r3, r1, #6
 8003fc4:	4651      	mov	r1, sl
 8003fc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fca:	4651      	mov	r1, sl
 8003fcc:	018a      	lsls	r2, r1, #6
 8003fce:	4651      	mov	r1, sl
 8003fd0:	ebb2 0801 	subs.w	r8, r2, r1
 8003fd4:	4659      	mov	r1, fp
 8003fd6:	eb63 0901 	sbc.w	r9, r3, r1
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	f04f 0300 	mov.w	r3, #0
 8003fe2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fe6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fee:	4690      	mov	r8, r2
 8003ff0:	4699      	mov	r9, r3
 8003ff2:	4623      	mov	r3, r4
 8003ff4:	eb18 0303 	adds.w	r3, r8, r3
 8003ff8:	60bb      	str	r3, [r7, #8]
 8003ffa:	462b      	mov	r3, r5
 8003ffc:	eb49 0303 	adc.w	r3, r9, r3
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800400e:	4629      	mov	r1, r5
 8004010:	024b      	lsls	r3, r1, #9
 8004012:	4621      	mov	r1, r4
 8004014:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004018:	4621      	mov	r1, r4
 800401a:	024a      	lsls	r2, r1, #9
 800401c:	4610      	mov	r0, r2
 800401e:	4619      	mov	r1, r3
 8004020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004022:	2200      	movs	r2, #0
 8004024:	62bb      	str	r3, [r7, #40]	; 0x28
 8004026:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004028:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800402c:	f7fc f920 	bl	8000270 <__aeabi_uldivmod>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4613      	mov	r3, r2
 8004036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004038:	e058      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800403a:	4b38      	ldr	r3, [pc, #224]	; (800411c <HAL_RCC_GetSysClockFreq+0x200>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	099b      	lsrs	r3, r3, #6
 8004040:	2200      	movs	r2, #0
 8004042:	4618      	mov	r0, r3
 8004044:	4611      	mov	r1, r2
 8004046:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800404a:	623b      	str	r3, [r7, #32]
 800404c:	2300      	movs	r3, #0
 800404e:	627b      	str	r3, [r7, #36]	; 0x24
 8004050:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004054:	4642      	mov	r2, r8
 8004056:	464b      	mov	r3, r9
 8004058:	f04f 0000 	mov.w	r0, #0
 800405c:	f04f 0100 	mov.w	r1, #0
 8004060:	0159      	lsls	r1, r3, #5
 8004062:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004066:	0150      	lsls	r0, r2, #5
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4641      	mov	r1, r8
 800406e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004072:	4649      	mov	r1, r9
 8004074:	eb63 0b01 	sbc.w	fp, r3, r1
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004084:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004088:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800408c:	ebb2 040a 	subs.w	r4, r2, sl
 8004090:	eb63 050b 	sbc.w	r5, r3, fp
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	00eb      	lsls	r3, r5, #3
 800409e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040a2:	00e2      	lsls	r2, r4, #3
 80040a4:	4614      	mov	r4, r2
 80040a6:	461d      	mov	r5, r3
 80040a8:	4643      	mov	r3, r8
 80040aa:	18e3      	adds	r3, r4, r3
 80040ac:	603b      	str	r3, [r7, #0]
 80040ae:	464b      	mov	r3, r9
 80040b0:	eb45 0303 	adc.w	r3, r5, r3
 80040b4:	607b      	str	r3, [r7, #4]
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040c2:	4629      	mov	r1, r5
 80040c4:	028b      	lsls	r3, r1, #10
 80040c6:	4621      	mov	r1, r4
 80040c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040cc:	4621      	mov	r1, r4
 80040ce:	028a      	lsls	r2, r1, #10
 80040d0:	4610      	mov	r0, r2
 80040d2:	4619      	mov	r1, r3
 80040d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040d6:	2200      	movs	r2, #0
 80040d8:	61bb      	str	r3, [r7, #24]
 80040da:	61fa      	str	r2, [r7, #28]
 80040dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040e0:	f7fc f8c6 	bl	8000270 <__aeabi_uldivmod>
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4613      	mov	r3, r2
 80040ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040ec:	4b0b      	ldr	r3, [pc, #44]	; (800411c <HAL_RCC_GetSysClockFreq+0x200>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	0c1b      	lsrs	r3, r3, #16
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	3301      	adds	r3, #1
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80040fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004100:	fbb2 f3f3 	udiv	r3, r2, r3
 8004104:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004106:	e002      	b.n	800410e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004108:	4b05      	ldr	r3, [pc, #20]	; (8004120 <HAL_RCC_GetSysClockFreq+0x204>)
 800410a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800410c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800410e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004110:	4618      	mov	r0, r3
 8004112:	3750      	adds	r7, #80	; 0x50
 8004114:	46bd      	mov	sp, r7
 8004116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800
 8004120:	00f42400 	.word	0x00f42400
 8004124:	007a1200 	.word	0x007a1200

08004128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800412c:	4b03      	ldr	r3, [pc, #12]	; (800413c <HAL_RCC_GetHCLKFreq+0x14>)
 800412e:	681b      	ldr	r3, [r3, #0]
}
 8004130:	4618      	mov	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	20000000 	.word	0x20000000

08004140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004144:	f7ff fff0 	bl	8004128 <HAL_RCC_GetHCLKFreq>
 8004148:	4602      	mov	r2, r0
 800414a:	4b05      	ldr	r3, [pc, #20]	; (8004160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	0a9b      	lsrs	r3, r3, #10
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	4903      	ldr	r1, [pc, #12]	; (8004164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004156:	5ccb      	ldrb	r3, [r1, r3]
 8004158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800415c:	4618      	mov	r0, r3
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40023800 	.word	0x40023800
 8004164:	08009734 	.word	0x08009734

08004168 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d105      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800418c:	2b00      	cmp	r3, #0
 800418e:	d035      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004190:	4b62      	ldr	r3, [pc, #392]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004196:	f7fc ffd7 	bl	8001148 <HAL_GetTick>
 800419a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800419c:	e008      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800419e:	f7fc ffd3 	bl	8001148 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e0b0      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041b0:	4b5b      	ldr	r3, [pc, #364]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1f0      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	019a      	lsls	r2, r3, #6
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	071b      	lsls	r3, r3, #28
 80041c8:	4955      	ldr	r1, [pc, #340]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041d0:	4b52      	ldr	r3, [pc, #328]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041d2:	2201      	movs	r2, #1
 80041d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041d6:	f7fc ffb7 	bl	8001148 <HAL_GetTick>
 80041da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041dc:	e008      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041de:	f7fc ffb3 	bl	8001148 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e090      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041f0:	4b4b      	ldr	r3, [pc, #300]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0f0      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 8083 	beq.w	8004310 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	4b44      	ldr	r3, [pc, #272]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	4a43      	ldr	r2, [pc, #268]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004218:	6413      	str	r3, [r2, #64]	; 0x40
 800421a:	4b41      	ldr	r3, [pc, #260]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004226:	4b3f      	ldr	r3, [pc, #252]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a3e      	ldr	r2, [pc, #248]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800422c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004230:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004232:	f7fc ff89 	bl	8001148 <HAL_GetTick>
 8004236:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004238:	e008      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800423a:	f7fc ff85 	bl	8001148 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e062      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800424c:	4b35      	ldr	r3, [pc, #212]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0f0      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004258:	4b31      	ldr	r3, [pc, #196]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800425a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004260:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d02f      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	429a      	cmp	r2, r3
 8004274:	d028      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004276:	4b2a      	ldr	r3, [pc, #168]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004280:	4b29      	ldr	r3, [pc, #164]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004282:	2201      	movs	r2, #1
 8004284:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004286:	4b28      	ldr	r3, [pc, #160]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800428c:	4a24      	ldr	r2, [pc, #144]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004292:	4b23      	ldr	r3, [pc, #140]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b01      	cmp	r3, #1
 800429c:	d114      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800429e:	f7fc ff53 	bl	8001148 <HAL_GetTick>
 80042a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a4:	e00a      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a6:	f7fc ff4f 	bl	8001148 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d901      	bls.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e02a      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042bc:	4b18      	ldr	r3, [pc, #96]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0ee      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042d4:	d10d      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80042d6:	4b12      	ldr	r3, [pc, #72]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80042e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ea:	490d      	ldr	r1, [pc, #52]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	608b      	str	r3, [r1, #8]
 80042f0:	e005      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x196>
 80042f2:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	4a0a      	ldr	r2, [pc, #40]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042f8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042fc:	6093      	str	r3, [r2, #8]
 80042fe:	4b08      	ldr	r3, [pc, #32]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004300:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800430a:	4905      	ldr	r1, [pc, #20]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800430c:	4313      	orrs	r3, r2
 800430e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	42470068 	.word	0x42470068
 8004320:	40023800 	.word	0x40023800
 8004324:	40007000 	.word	0x40007000
 8004328:	42470e40 	.word	0x42470e40

0800432c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004334:	2300      	movs	r3, #0
 8004336:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d13e      	bne.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800434a:	4b23      	ldr	r3, [pc, #140]	; (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d005      	beq.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d12f      	bne.n	80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004360:	4b1e      	ldr	r3, [pc, #120]	; (80043dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004362:	617b      	str	r3, [r7, #20]
          break;
 8004364:	e02f      	b.n	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004366:	4b1c      	ldr	r3, [pc, #112]	; (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800436e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004372:	d108      	bne.n	8004386 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004374:	4b18      	ldr	r3, [pc, #96]	; (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800437c:	4a18      	ldr	r2, [pc, #96]	; (80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800437e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004382:	613b      	str	r3, [r7, #16]
 8004384:	e007      	b.n	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004386:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800438e:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004390:	fbb2 f3f3 	udiv	r3, r2, r3
 8004394:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004396:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800439c:	099b      	lsrs	r3, r3, #6
 800439e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	fb02 f303 	mul.w	r3, r2, r3
 80043a8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80043aa:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043b0:	0f1b      	lsrs	r3, r3, #28
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043bc:	617b      	str	r3, [r7, #20]
          break;
 80043be:	e002      	b.n	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]
          break;
 80043c4:	bf00      	nop
        }
      }
      break;
 80043c6:	bf00      	nop
    }
  }
  return frequency;
 80043c8:	697b      	ldr	r3, [r7, #20]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	371c      	adds	r7, #28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40023800 	.word	0x40023800
 80043dc:	00bb8000 	.word	0x00bb8000
 80043e0:	007a1200 	.word	0x007a1200
 80043e4:	00f42400 	.word	0x00f42400

080043e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e07b      	b.n	80044f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d108      	bne.n	8004414 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800440a:	d009      	beq.n	8004420 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	61da      	str	r2, [r3, #28]
 8004412:	e005      	b.n	8004420 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d106      	bne.n	8004440 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7fc fcde 	bl	8000dfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004456:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004490:	431a      	orrs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a4:	ea42 0103 	orr.w	r1, r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	0c1b      	lsrs	r3, r3, #16
 80044be:	f003 0104 	and.w	r1, r3, #4
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	f003 0210 	and.w	r2, r3, #16
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	69da      	ldr	r2, [r3, #28]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044fa:	b084      	sub	sp, #16
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	f107 001c 	add.w	r0, r7, #28
 8004508:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800450c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450e:	2b01      	cmp	r3, #1
 8004510:	d122      	bne.n	8004558 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800453a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800453c:	2b01      	cmp	r3, #1
 800453e:	d105      	bne.n	800454c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f001 fbed 	bl	8005d2c <USB_CoreReset>
 8004552:	4603      	mov	r3, r0
 8004554:	73fb      	strb	r3, [r7, #15]
 8004556:	e01a      	b.n	800458e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f001 fbe1 	bl	8005d2c <USB_CoreReset>
 800456a:	4603      	mov	r3, r0
 800456c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800456e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004570:	2b00      	cmp	r3, #0
 8004572:	d106      	bne.n	8004582 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004578:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	639a      	str	r2, [r3, #56]	; 0x38
 8004580:	e005      	b.n	800458e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800458e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004590:	2b01      	cmp	r3, #1
 8004592:	d10b      	bne.n	80045ac <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f043 0206 	orr.w	r2, r3, #6
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f043 0220 	orr.w	r2, r3, #32
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045b8:	b004      	add	sp, #16
 80045ba:	4770      	bx	lr

080045bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	4613      	mov	r3, r2
 80045c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d165      	bne.n	800469c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	4a41      	ldr	r2, [pc, #260]	; (80046d8 <USB_SetTurnaroundTime+0x11c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d906      	bls.n	80045e6 <USB_SetTurnaroundTime+0x2a>
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4a40      	ldr	r2, [pc, #256]	; (80046dc <USB_SetTurnaroundTime+0x120>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d202      	bcs.n	80045e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80045e0:	230f      	movs	r3, #15
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	e062      	b.n	80046ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	4a3c      	ldr	r2, [pc, #240]	; (80046dc <USB_SetTurnaroundTime+0x120>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d306      	bcc.n	80045fc <USB_SetTurnaroundTime+0x40>
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	4a3b      	ldr	r2, [pc, #236]	; (80046e0 <USB_SetTurnaroundTime+0x124>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d202      	bcs.n	80045fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80045f6:	230e      	movs	r3, #14
 80045f8:	617b      	str	r3, [r7, #20]
 80045fa:	e057      	b.n	80046ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	4a38      	ldr	r2, [pc, #224]	; (80046e0 <USB_SetTurnaroundTime+0x124>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d306      	bcc.n	8004612 <USB_SetTurnaroundTime+0x56>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	4a37      	ldr	r2, [pc, #220]	; (80046e4 <USB_SetTurnaroundTime+0x128>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d202      	bcs.n	8004612 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800460c:	230d      	movs	r3, #13
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	e04c      	b.n	80046ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	4a33      	ldr	r2, [pc, #204]	; (80046e4 <USB_SetTurnaroundTime+0x128>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d306      	bcc.n	8004628 <USB_SetTurnaroundTime+0x6c>
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	4a32      	ldr	r2, [pc, #200]	; (80046e8 <USB_SetTurnaroundTime+0x12c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d802      	bhi.n	8004628 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004622:	230c      	movs	r3, #12
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	e041      	b.n	80046ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4a2f      	ldr	r2, [pc, #188]	; (80046e8 <USB_SetTurnaroundTime+0x12c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d906      	bls.n	800463e <USB_SetTurnaroundTime+0x82>
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4a2e      	ldr	r2, [pc, #184]	; (80046ec <USB_SetTurnaroundTime+0x130>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d802      	bhi.n	800463e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004638:	230b      	movs	r3, #11
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	e036      	b.n	80046ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	4a2a      	ldr	r2, [pc, #168]	; (80046ec <USB_SetTurnaroundTime+0x130>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d906      	bls.n	8004654 <USB_SetTurnaroundTime+0x98>
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	4a29      	ldr	r2, [pc, #164]	; (80046f0 <USB_SetTurnaroundTime+0x134>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d802      	bhi.n	8004654 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800464e:	230a      	movs	r3, #10
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	e02b      	b.n	80046ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4a26      	ldr	r2, [pc, #152]	; (80046f0 <USB_SetTurnaroundTime+0x134>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d906      	bls.n	800466a <USB_SetTurnaroundTime+0xae>
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4a25      	ldr	r2, [pc, #148]	; (80046f4 <USB_SetTurnaroundTime+0x138>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d202      	bcs.n	800466a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004664:	2309      	movs	r3, #9
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	e020      	b.n	80046ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	4a21      	ldr	r2, [pc, #132]	; (80046f4 <USB_SetTurnaroundTime+0x138>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d306      	bcc.n	8004680 <USB_SetTurnaroundTime+0xc4>
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4a20      	ldr	r2, [pc, #128]	; (80046f8 <USB_SetTurnaroundTime+0x13c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d802      	bhi.n	8004680 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800467a:	2308      	movs	r3, #8
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	e015      	b.n	80046ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4a1d      	ldr	r2, [pc, #116]	; (80046f8 <USB_SetTurnaroundTime+0x13c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d906      	bls.n	8004696 <USB_SetTurnaroundTime+0xda>
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	4a1c      	ldr	r2, [pc, #112]	; (80046fc <USB_SetTurnaroundTime+0x140>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d202      	bcs.n	8004696 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004690:	2307      	movs	r3, #7
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	e00a      	b.n	80046ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004696:	2306      	movs	r3, #6
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	e007      	b.n	80046ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800469c:	79fb      	ldrb	r3, [r7, #7]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d102      	bne.n	80046a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80046a2:	2309      	movs	r3, #9
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	e001      	b.n	80046ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80046a8:	2309      	movs	r3, #9
 80046aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	029b      	lsls	r3, r3, #10
 80046c0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80046c4:	431a      	orrs	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	371c      	adds	r7, #28
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	00d8acbf 	.word	0x00d8acbf
 80046dc:	00e4e1c0 	.word	0x00e4e1c0
 80046e0:	00f42400 	.word	0x00f42400
 80046e4:	01067380 	.word	0x01067380
 80046e8:	011a499f 	.word	0x011a499f
 80046ec:	01312cff 	.word	0x01312cff
 80046f0:	014ca43f 	.word	0x014ca43f
 80046f4:	016e3600 	.word	0x016e3600
 80046f8:	01a6ab1f 	.word	0x01a6ab1f
 80046fc:	01e84800 	.word	0x01e84800

08004700 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f043 0201 	orr.w	r2, r3, #1
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f023 0201 	bic.w	r2, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004760:	78fb      	ldrb	r3, [r7, #3]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d115      	bne.n	8004792 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004772:	2001      	movs	r0, #1
 8004774:	f7fc fcf4 	bl	8001160 <HAL_Delay>
      ms++;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	3301      	adds	r3, #1
 800477c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f001 fa45 	bl	8005c0e <USB_GetMode>
 8004784:	4603      	mov	r3, r0
 8004786:	2b01      	cmp	r3, #1
 8004788:	d01e      	beq.n	80047c8 <USB_SetCurrentMode+0x84>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b31      	cmp	r3, #49	; 0x31
 800478e:	d9f0      	bls.n	8004772 <USB_SetCurrentMode+0x2e>
 8004790:	e01a      	b.n	80047c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004792:	78fb      	ldrb	r3, [r7, #3]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d115      	bne.n	80047c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047a4:	2001      	movs	r0, #1
 80047a6:	f7fc fcdb 	bl	8001160 <HAL_Delay>
      ms++;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3301      	adds	r3, #1
 80047ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f001 fa2c 	bl	8005c0e <USB_GetMode>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d005      	beq.n	80047c8 <USB_SetCurrentMode+0x84>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2b31      	cmp	r3, #49	; 0x31
 80047c0:	d9f0      	bls.n	80047a4 <USB_SetCurrentMode+0x60>
 80047c2:	e001      	b.n	80047c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e005      	b.n	80047d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b32      	cmp	r3, #50	; 0x32
 80047cc:	d101      	bne.n	80047d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047dc:	b084      	sub	sp, #16
 80047de:	b580      	push	{r7, lr}
 80047e0:	b086      	sub	sp, #24
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80047ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80047f6:	2300      	movs	r3, #0
 80047f8:	613b      	str	r3, [r7, #16]
 80047fa:	e009      	b.n	8004810 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	3340      	adds	r3, #64	; 0x40
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	2200      	movs	r2, #0
 8004808:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	3301      	adds	r3, #1
 800480e:	613b      	str	r3, [r7, #16]
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	2b0e      	cmp	r3, #14
 8004814:	d9f2      	bls.n	80047fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004818:	2b00      	cmp	r3, #0
 800481a:	d11c      	bne.n	8004856 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800482a:	f043 0302 	orr.w	r3, r3, #2
 800482e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004840:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	639a      	str	r2, [r3, #56]	; 0x38
 8004854:	e00b      	b.n	800486e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004874:	461a      	mov	r2, r3
 8004876:	2300      	movs	r3, #0
 8004878:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004880:	4619      	mov	r1, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004888:	461a      	mov	r2, r3
 800488a:	680b      	ldr	r3, [r1, #0]
 800488c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800488e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004890:	2b01      	cmp	r3, #1
 8004892:	d10c      	bne.n	80048ae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004896:	2b00      	cmp	r3, #0
 8004898:	d104      	bne.n	80048a4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800489a:	2100      	movs	r1, #0
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f965 	bl	8004b6c <USB_SetDevSpeed>
 80048a2:	e008      	b.n	80048b6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048a4:	2101      	movs	r1, #1
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f960 	bl	8004b6c <USB_SetDevSpeed>
 80048ac:	e003      	b.n	80048b6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048ae:	2103      	movs	r1, #3
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f95b 	bl	8004b6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048b6:	2110      	movs	r1, #16
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f8f3 	bl	8004aa4 <USB_FlushTxFifo>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f91f 	bl	8004b0c <USB_FlushRxFifo>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048de:	461a      	mov	r2, r3
 80048e0:	2300      	movs	r3, #0
 80048e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ea:	461a      	mov	r2, r3
 80048ec:	2300      	movs	r3, #0
 80048ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f6:	461a      	mov	r2, r3
 80048f8:	2300      	movs	r3, #0
 80048fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048fc:	2300      	movs	r3, #0
 80048fe:	613b      	str	r3, [r7, #16]
 8004900:	e043      	b.n	800498a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4413      	add	r3, r2
 800490a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004914:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004918:	d118      	bne.n	800494c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10a      	bne.n	8004936 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492c:	461a      	mov	r2, r3
 800492e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	e013      	b.n	800495e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4413      	add	r3, r2
 800493e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004942:	461a      	mov	r2, r3
 8004944:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	e008      	b.n	800495e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004958:	461a      	mov	r2, r3
 800495a:	2300      	movs	r3, #0
 800495c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496a:	461a      	mov	r2, r3
 800496c:	2300      	movs	r3, #0
 800496e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4413      	add	r3, r2
 8004978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497c:	461a      	mov	r2, r3
 800497e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004982:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	3301      	adds	r3, #1
 8004988:	613b      	str	r3, [r7, #16]
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	429a      	cmp	r2, r3
 8004990:	d3b7      	bcc.n	8004902 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004992:	2300      	movs	r3, #0
 8004994:	613b      	str	r3, [r7, #16]
 8004996:	e043      	b.n	8004a20 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049ae:	d118      	bne.n	80049e2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10a      	bne.n	80049cc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c2:	461a      	mov	r2, r3
 80049c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	e013      	b.n	80049f4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d8:	461a      	mov	r2, r3
 80049da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	e008      	b.n	80049f4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ee:	461a      	mov	r2, r3
 80049f0:	2300      	movs	r3, #0
 80049f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a00:	461a      	mov	r2, r3
 8004a02:	2300      	movs	r3, #0
 8004a04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a12:	461a      	mov	r2, r3
 8004a14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d3b7      	bcc.n	8004998 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a3a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a48:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d105      	bne.n	8004a5c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	f043 0210 	orr.w	r2, r3, #16
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699a      	ldr	r2, [r3, #24]
 8004a60:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <USB_DevInit+0x2c4>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d005      	beq.n	8004a7a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	f043 0208 	orr.w	r2, r3, #8
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d107      	bne.n	8004a90 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a88:	f043 0304 	orr.w	r3, r3, #4
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a9c:	b004      	add	sp, #16
 8004a9e:	4770      	bx	lr
 8004aa0:	803c3800 	.word	0x803c3800

08004aa4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4a13      	ldr	r2, [pc, #76]	; (8004b08 <USB_FlushTxFifo+0x64>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d901      	bls.n	8004ac4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e01b      	b.n	8004afc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	daf2      	bge.n	8004ab2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	019b      	lsls	r3, r3, #6
 8004ad4:	f043 0220 	orr.w	r2, r3, #32
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4a08      	ldr	r2, [pc, #32]	; (8004b08 <USB_FlushTxFifo+0x64>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d901      	bls.n	8004aee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e006      	b.n	8004afc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f003 0320 	and.w	r3, r3, #32
 8004af6:	2b20      	cmp	r3, #32
 8004af8:	d0f0      	beq.n	8004adc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	00030d40 	.word	0x00030d40

08004b0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b14:	2300      	movs	r3, #0
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4a11      	ldr	r2, [pc, #68]	; (8004b68 <USB_FlushRxFifo+0x5c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d901      	bls.n	8004b2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e018      	b.n	8004b5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	daf2      	bge.n	8004b18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2210      	movs	r2, #16
 8004b3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4a08      	ldr	r2, [pc, #32]	; (8004b68 <USB_FlushRxFifo+0x5c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d901      	bls.n	8004b4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e006      	b.n	8004b5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f003 0310 	and.w	r3, r3, #16
 8004b56:	2b10      	cmp	r3, #16
 8004b58:	d0f0      	beq.n	8004b3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	00030d40 	.word	0x00030d40

08004b6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	68f9      	ldr	r1, [r7, #12]
 8004b88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b087      	sub	sp, #28
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 0306 	and.w	r3, r3, #6
 8004bb6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d102      	bne.n	8004bc4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	75fb      	strb	r3, [r7, #23]
 8004bc2:	e00a      	b.n	8004bda <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d002      	beq.n	8004bd0 <USB_GetDevSpeed+0x32>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2b06      	cmp	r3, #6
 8004bce:	d102      	bne.n	8004bd6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	75fb      	strb	r3, [r7, #23]
 8004bd4:	e001      	b.n	8004bda <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004bd6:	230f      	movs	r3, #15
 8004bd8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	371c      	adds	r7, #28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	785b      	ldrb	r3, [r3, #1]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d13a      	bne.n	8004c7a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0a:	69da      	ldr	r2, [r3, #28]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	f003 030f 	and.w	r3, r3, #15
 8004c14:	2101      	movs	r1, #1
 8004c16:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	68f9      	ldr	r1, [r7, #12]
 8004c1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c22:	4313      	orrs	r3, r2
 8004c24:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d155      	bne.n	8004ce8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	791b      	ldrb	r3, [r3, #4]
 8004c56:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c58:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	059b      	lsls	r3, r3, #22
 8004c5e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c60:	4313      	orrs	r3, r2
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	0151      	lsls	r1, r2, #5
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	440a      	add	r2, r1
 8004c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c76:	6013      	str	r3, [r2, #0]
 8004c78:	e036      	b.n	8004ce8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c80:	69da      	ldr	r2, [r3, #28]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c90:	041b      	lsls	r3, r3, #16
 8004c92:	68f9      	ldr	r1, [r7, #12]
 8004c94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d11a      	bne.n	8004ce8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	791b      	ldrb	r3, [r3, #4]
 8004ccc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004cce:	430b      	orrs	r3, r1
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	0151      	lsls	r1, r2, #5
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	440a      	add	r2, r1
 8004cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
	...

08004cf8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	785b      	ldrb	r3, [r3, #1]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d161      	bne.n	8004dd8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d2a:	d11f      	bne.n	8004d6c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	0151      	lsls	r1, r2, #5
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	440a      	add	r2, r1
 8004d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d4a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	0151      	lsls	r1, r2, #5
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	440a      	add	r2, r1
 8004d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	f003 030f 	and.w	r3, r3, #15
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	43db      	mvns	r3, r3
 8004d86:	68f9      	ldr	r1, [r7, #12]
 8004d88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d96:	69da      	ldr	r2, [r3, #28]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	f003 030f 	and.w	r3, r3, #15
 8004da0:	2101      	movs	r1, #1
 8004da2:	fa01 f303 	lsl.w	r3, r1, r3
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	43db      	mvns	r3, r3
 8004daa:	68f9      	ldr	r1, [r7, #12]
 8004dac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004db0:	4013      	ands	r3, r2
 8004db2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	0159      	lsls	r1, r3, #5
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	440b      	add	r3, r1
 8004dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dce:	4619      	mov	r1, r3
 8004dd0:	4b35      	ldr	r3, [pc, #212]	; (8004ea8 <USB_DeactivateEndpoint+0x1b0>)
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	600b      	str	r3, [r1, #0]
 8004dd6:	e060      	b.n	8004e9a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dee:	d11f      	bne.n	8004e30 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	0151      	lsls	r1, r2, #5
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	440a      	add	r2, r1
 8004e06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e0e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	0151      	lsls	r1, r2, #5
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	440a      	add	r2, r1
 8004e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	f003 030f 	and.w	r3, r3, #15
 8004e40:	2101      	movs	r1, #1
 8004e42:	fa01 f303 	lsl.w	r3, r1, r3
 8004e46:	041b      	lsls	r3, r3, #16
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	68f9      	ldr	r1, [r7, #12]
 8004e4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e50:	4013      	ands	r3, r2
 8004e52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e5a:	69da      	ldr	r2, [r3, #28]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	f003 030f 	and.w	r3, r3, #15
 8004e64:	2101      	movs	r1, #1
 8004e66:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6a:	041b      	lsls	r3, r3, #16
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	68f9      	ldr	r1, [r7, #12]
 8004e70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e74:	4013      	ands	r3, r2
 8004e76:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	0159      	lsls	r1, r3, #5
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	440b      	add	r3, r1
 8004e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e92:	4619      	mov	r1, r3
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <USB_DeactivateEndpoint+0x1b4>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	ec337800 	.word	0xec337800
 8004eac:	eff37800 	.word	0xeff37800

08004eb0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08a      	sub	sp, #40	; 0x28
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	785b      	ldrb	r3, [r3, #1]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	f040 815c 	bne.w	800518a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d132      	bne.n	8004f40 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	0151      	lsls	r1, r2, #5
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	440a      	add	r2, r1
 8004ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ef8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004efc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	0151      	lsls	r1, r2, #5
 8004f10:	69fa      	ldr	r2, [r7, #28]
 8004f12:	440a      	add	r2, r1
 8004f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	0151      	lsls	r1, r2, #5
 8004f30:	69fa      	ldr	r2, [r7, #28]
 8004f32:	440a      	add	r2, r1
 8004f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f38:	0cdb      	lsrs	r3, r3, #19
 8004f3a:	04db      	lsls	r3, r3, #19
 8004f3c:	6113      	str	r3, [r2, #16]
 8004f3e:	e074      	b.n	800502a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	0151      	lsls	r1, r2, #5
 8004f52:	69fa      	ldr	r2, [r7, #28]
 8004f54:	440a      	add	r2, r1
 8004f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f5a:	0cdb      	lsrs	r3, r3, #19
 8004f5c:	04db      	lsls	r3, r3, #19
 8004f5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	0151      	lsls	r1, r2, #5
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	440a      	add	r2, r1
 8004f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f90:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	6999      	ldr	r1, [r3, #24]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	440b      	add	r3, r1
 8004f9c:	1e59      	subs	r1, r3, #1
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fa6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004fa8:	4b9d      	ldr	r3, [pc, #628]	; (8005220 <USB_EPStartXfer+0x370>)
 8004faa:	400b      	ands	r3, r1
 8004fac:	69b9      	ldr	r1, [r7, #24]
 8004fae:	0148      	lsls	r0, r1, #5
 8004fb0:	69f9      	ldr	r1, [r7, #28]
 8004fb2:	4401      	add	r1, r0
 8004fb4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc8:	691a      	ldr	r2, [r3, #16]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fd2:	69b9      	ldr	r1, [r7, #24]
 8004fd4:	0148      	lsls	r0, r1, #5
 8004fd6:	69f9      	ldr	r1, [r7, #28]
 8004fd8:	4401      	add	r1, r0
 8004fda:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	791b      	ldrb	r3, [r3, #4]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d11f      	bne.n	800502a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	0151      	lsls	r1, r2, #5
 8004ffc:	69fa      	ldr	r2, [r7, #28]
 8004ffe:	440a      	add	r2, r1
 8005000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005004:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005008:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	4413      	add	r3, r2
 8005012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	0151      	lsls	r1, r2, #5
 800501c:	69fa      	ldr	r2, [r7, #28]
 800501e:	440a      	add	r2, r1
 8005020:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005024:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005028:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800502a:	79fb      	ldrb	r3, [r7, #7]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d14b      	bne.n	80050c8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d009      	beq.n	800504c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005044:	461a      	mov	r2, r3
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	791b      	ldrb	r3, [r3, #4]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d128      	bne.n	80050a6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005060:	2b00      	cmp	r3, #0
 8005062:	d110      	bne.n	8005086 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	0151      	lsls	r1, r2, #5
 8005076:	69fa      	ldr	r2, [r7, #28]
 8005078:	440a      	add	r2, r1
 800507a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800507e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	e00f      	b.n	80050a6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	4413      	add	r3, r2
 800508e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	0151      	lsls	r1, r2, #5
 8005098:	69fa      	ldr	r2, [r7, #28]
 800509a:	440a      	add	r2, r1
 800509c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	0151      	lsls	r1, r2, #5
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	440a      	add	r2, r1
 80050bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	e133      	b.n	8005330 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	0151      	lsls	r1, r2, #5
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	440a      	add	r2, r1
 80050de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050e6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	791b      	ldrb	r3, [r3, #4]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d015      	beq.n	800511c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 811b 	beq.w	8005330 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	2101      	movs	r1, #1
 800510c:	fa01 f303 	lsl.w	r3, r1, r3
 8005110:	69f9      	ldr	r1, [r7, #28]
 8005112:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005116:	4313      	orrs	r3, r2
 8005118:	634b      	str	r3, [r1, #52]	; 0x34
 800511a:	e109      	b.n	8005330 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005128:	2b00      	cmp	r3, #0
 800512a:	d110      	bne.n	800514e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	0151      	lsls	r1, r2, #5
 800513e:	69fa      	ldr	r2, [r7, #28]
 8005140:	440a      	add	r2, r1
 8005142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005146:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	e00f      	b.n	800516e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	0151      	lsls	r1, r2, #5
 8005160:	69fa      	ldr	r2, [r7, #28]
 8005162:	440a      	add	r2, r1
 8005164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800516c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	6919      	ldr	r1, [r3, #16]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	781a      	ldrb	r2, [r3, #0]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	b298      	uxth	r0, r3
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	4603      	mov	r3, r0
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 fade 	bl	8005744 <USB_WritePacket>
 8005188:	e0d2      	b.n	8005330 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	4413      	add	r3, r2
 8005192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	0151      	lsls	r1, r2, #5
 800519c:	69fa      	ldr	r2, [r7, #28]
 800519e:	440a      	add	r2, r1
 80051a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051a4:	0cdb      	lsrs	r3, r3, #19
 80051a6:	04db      	lsls	r3, r3, #19
 80051a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	0151      	lsls	r1, r2, #5
 80051bc:	69fa      	ldr	r2, [r7, #28]
 80051be:	440a      	add	r2, r1
 80051c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d126      	bne.n	8005224 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051ec:	69b9      	ldr	r1, [r7, #24]
 80051ee:	0148      	lsls	r0, r1, #5
 80051f0:	69f9      	ldr	r1, [r7, #28]
 80051f2:	4401      	add	r1, r0
 80051f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051f8:	4313      	orrs	r3, r2
 80051fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	0151      	lsls	r1, r2, #5
 800520e:	69fa      	ldr	r2, [r7, #28]
 8005210:	440a      	add	r2, r1
 8005212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005216:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800521a:	6113      	str	r3, [r2, #16]
 800521c:	e03a      	b.n	8005294 <USB_EPStartXfer+0x3e4>
 800521e:	bf00      	nop
 8005220:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	699a      	ldr	r2, [r3, #24]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	4413      	add	r3, r2
 800522e:	1e5a      	subs	r2, r3, #1
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	fbb2 f3f3 	udiv	r3, r2, r3
 8005238:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	8afa      	ldrh	r2, [r7, #22]
 8005240:	fb03 f202 	mul.w	r2, r3, r2
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005254:	691a      	ldr	r2, [r3, #16]
 8005256:	8afb      	ldrh	r3, [r7, #22]
 8005258:	04d9      	lsls	r1, r3, #19
 800525a:	4b38      	ldr	r3, [pc, #224]	; (800533c <USB_EPStartXfer+0x48c>)
 800525c:	400b      	ands	r3, r1
 800525e:	69b9      	ldr	r1, [r7, #24]
 8005260:	0148      	lsls	r0, r1, #5
 8005262:	69f9      	ldr	r1, [r7, #28]
 8005264:	4401      	add	r1, r0
 8005266:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800526a:	4313      	orrs	r3, r2
 800526c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005284:	69b9      	ldr	r1, [r7, #24]
 8005286:	0148      	lsls	r0, r1, #5
 8005288:	69f9      	ldr	r1, [r7, #28]
 800528a:	4401      	add	r1, r0
 800528c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005290:	4313      	orrs	r3, r2
 8005292:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005294:	79fb      	ldrb	r3, [r7, #7]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d10d      	bne.n	80052b6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d009      	beq.n	80052b6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	6919      	ldr	r1, [r3, #16]
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b2:	460a      	mov	r2, r1
 80052b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	791b      	ldrb	r3, [r3, #4]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d128      	bne.n	8005310 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d110      	bne.n	80052f0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	0151      	lsls	r1, r2, #5
 80052e0:	69fa      	ldr	r2, [r7, #28]
 80052e2:	440a      	add	r2, r1
 80052e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	e00f      	b.n	8005310 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	0151      	lsls	r1, r2, #5
 8005302:	69fa      	ldr	r2, [r7, #28]
 8005304:	440a      	add	r2, r1
 8005306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800530a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800530e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	4413      	add	r3, r2
 8005318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	0151      	lsls	r1, r2, #5
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	440a      	add	r2, r1
 8005326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800532a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800532e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3720      	adds	r7, #32
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	1ff80000 	.word	0x1ff80000

08005340 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	4613      	mov	r3, r2
 800534c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	785b      	ldrb	r3, [r3, #1]
 800535c:	2b01      	cmp	r3, #1
 800535e:	f040 80ce 	bne.w	80054fe <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d132      	bne.n	80053d0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	0151      	lsls	r1, r2, #5
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	440a      	add	r2, r1
 8005380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005384:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005388:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800538c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	0151      	lsls	r1, r2, #5
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	440a      	add	r2, r1
 80053a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	0151      	lsls	r1, r2, #5
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	440a      	add	r2, r1
 80053c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c8:	0cdb      	lsrs	r3, r3, #19
 80053ca:	04db      	lsls	r3, r3, #19
 80053cc:	6113      	str	r3, [r2, #16]
 80053ce:	e04e      	b.n	800546e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	0151      	lsls	r1, r2, #5
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	440a      	add	r2, r1
 80053e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ea:	0cdb      	lsrs	r3, r3, #19
 80053ec:	04db      	lsls	r3, r3, #19
 80053ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	0151      	lsls	r1, r2, #5
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	440a      	add	r2, r1
 8005406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800540a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800540e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005412:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	699a      	ldr	r2, [r3, #24]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	429a      	cmp	r2, r3
 800541e:	d903      	bls.n	8005428 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	0151      	lsls	r1, r2, #5
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	440a      	add	r2, r1
 800543e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005442:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005446:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005454:	691a      	ldr	r2, [r3, #16]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800545e:	6939      	ldr	r1, [r7, #16]
 8005460:	0148      	lsls	r0, r1, #5
 8005462:	6979      	ldr	r1, [r7, #20]
 8005464:	4401      	add	r1, r0
 8005466:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800546a:	4313      	orrs	r3, r2
 800546c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800546e:	79fb      	ldrb	r3, [r7, #7]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d11e      	bne.n	80054b2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d009      	beq.n	8005490 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005488:	461a      	mov	r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	0151      	lsls	r1, r2, #5
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	440a      	add	r2, r1
 80054a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	e097      	b.n	80055e2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	0151      	lsls	r1, r2, #5
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	440a      	add	r2, r1
 80054c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054d0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 8083 	beq.w	80055e2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	f003 030f 	and.w	r3, r3, #15
 80054ec:	2101      	movs	r1, #1
 80054ee:	fa01 f303 	lsl.w	r3, r1, r3
 80054f2:	6979      	ldr	r1, [r7, #20]
 80054f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054f8:	4313      	orrs	r3, r2
 80054fa:	634b      	str	r3, [r1, #52]	; 0x34
 80054fc:	e071      	b.n	80055e2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	4413      	add	r3, r2
 8005506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	0151      	lsls	r1, r2, #5
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	440a      	add	r2, r1
 8005514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005518:	0cdb      	lsrs	r3, r3, #19
 800551a:	04db      	lsls	r3, r3, #19
 800551c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	0151      	lsls	r1, r2, #5
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	440a      	add	r2, r1
 8005534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005538:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800553c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005540:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	0151      	lsls	r1, r2, #5
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	440a      	add	r2, r1
 8005570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005574:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005578:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005586:	691a      	ldr	r2, [r3, #16]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005590:	6939      	ldr	r1, [r7, #16]
 8005592:	0148      	lsls	r0, r1, #5
 8005594:	6979      	ldr	r1, [r7, #20]
 8005596:	4401      	add	r1, r0
 8005598:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800559c:	4313      	orrs	r3, r2
 800559e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80055a0:	79fb      	ldrb	r3, [r7, #7]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d10d      	bne.n	80055c2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d009      	beq.n	80055c2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	6919      	ldr	r1, [r3, #16]
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055be:	460a      	mov	r2, r1
 80055c0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	0151      	lsls	r1, r2, #5
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	440a      	add	r2, r1
 80055d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	371c      	adds	r7, #28
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	785b      	ldrb	r3, [r3, #1]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d14a      	bne.n	80056a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	4413      	add	r3, r2
 8005618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005622:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005626:	f040 8086 	bne.w	8005736 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	7812      	ldrb	r2, [r2, #0]
 800563e:	0151      	lsls	r1, r2, #5
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	440a      	add	r2, r1
 8005644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005648:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800564c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	7812      	ldrb	r2, [r2, #0]
 8005662:	0151      	lsls	r1, r2, #5
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	440a      	add	r2, r1
 8005668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800566c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005670:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	3301      	adds	r3, #1
 8005676:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f242 7210 	movw	r2, #10000	; 0x2710
 800567e:	4293      	cmp	r3, r2
 8005680:	d902      	bls.n	8005688 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	75fb      	strb	r3, [r7, #23]
          break;
 8005686:	e056      	b.n	8005736 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	4413      	add	r3, r2
 8005692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800569c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056a0:	d0e7      	beq.n	8005672 <USB_EPStopXfer+0x82>
 80056a2:	e048      	b.n	8005736 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056bc:	d13b      	bne.n	8005736 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	7812      	ldrb	r2, [r2, #0]
 80056d2:	0151      	lsls	r1, r2, #5
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	440a      	add	r2, r1
 80056d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	7812      	ldrb	r2, [r2, #0]
 80056f6:	0151      	lsls	r1, r2, #5
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	440a      	add	r2, r1
 80056fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005700:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005704:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3301      	adds	r3, #1
 800570a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005712:	4293      	cmp	r3, r2
 8005714:	d902      	bls.n	800571c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	75fb      	strb	r3, [r7, #23]
          break;
 800571a:	e00c      	b.n	8005736 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005734:	d0e7      	beq.n	8005706 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005736:	7dfb      	ldrb	r3, [r7, #23]
}
 8005738:	4618      	mov	r0, r3
 800573a:	371c      	adds	r7, #28
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005744:	b480      	push	{r7}
 8005746:	b089      	sub	sp, #36	; 0x24
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	4611      	mov	r1, r2
 8005750:	461a      	mov	r2, r3
 8005752:	460b      	mov	r3, r1
 8005754:	71fb      	strb	r3, [r7, #7]
 8005756:	4613      	mov	r3, r2
 8005758:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005762:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005766:	2b00      	cmp	r3, #0
 8005768:	d123      	bne.n	80057b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800576a:	88bb      	ldrh	r3, [r7, #4]
 800576c:	3303      	adds	r3, #3
 800576e:	089b      	lsrs	r3, r3, #2
 8005770:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005772:	2300      	movs	r3, #0
 8005774:	61bb      	str	r3, [r7, #24]
 8005776:	e018      	b.n	80057aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005778:	79fb      	ldrb	r3, [r7, #7]
 800577a:	031a      	lsls	r2, r3, #12
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	4413      	add	r3, r2
 8005780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005784:	461a      	mov	r2, r3
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	3301      	adds	r3, #1
 8005790:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	3301      	adds	r3, #1
 8005796:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	3301      	adds	r3, #1
 800579c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	3301      	adds	r3, #1
 80057a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	3301      	adds	r3, #1
 80057a8:	61bb      	str	r3, [r7, #24]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d3e2      	bcc.n	8005778 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3724      	adds	r7, #36	; 0x24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b08b      	sub	sp, #44	; 0x2c
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	4613      	mov	r3, r2
 80057cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80057d6:	88fb      	ldrh	r3, [r7, #6]
 80057d8:	089b      	lsrs	r3, r3, #2
 80057da:	b29b      	uxth	r3, r3
 80057dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80057de:	88fb      	ldrh	r3, [r7, #6]
 80057e0:	f003 0303 	and.w	r3, r3, #3
 80057e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80057e6:	2300      	movs	r3, #0
 80057e8:	623b      	str	r3, [r7, #32]
 80057ea:	e014      	b.n	8005816 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	3301      	adds	r3, #1
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	3301      	adds	r3, #1
 8005802:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	3301      	adds	r3, #1
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	3301      	adds	r3, #1
 800580e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	3301      	adds	r3, #1
 8005814:	623b      	str	r3, [r7, #32]
 8005816:	6a3a      	ldr	r2, [r7, #32]
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	429a      	cmp	r2, r3
 800581c:	d3e6      	bcc.n	80057ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800581e:	8bfb      	ldrh	r3, [r7, #30]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d01e      	beq.n	8005862 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800582e:	461a      	mov	r2, r3
 8005830:	f107 0310 	add.w	r3, r7, #16
 8005834:	6812      	ldr	r2, [r2, #0]
 8005836:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	b2db      	uxtb	r3, r3
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	fa22 f303 	lsr.w	r3, r2, r3
 8005844:	b2da      	uxtb	r2, r3
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	701a      	strb	r2, [r3, #0]
      i++;
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	3301      	adds	r3, #1
 800584e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	3301      	adds	r3, #1
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005856:	8bfb      	ldrh	r3, [r7, #30]
 8005858:	3b01      	subs	r3, #1
 800585a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800585c:	8bfb      	ldrh	r3, [r7, #30]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1ea      	bne.n	8005838 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005864:	4618      	mov	r0, r3
 8005866:	372c      	adds	r7, #44	; 0x2c
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	785b      	ldrb	r3, [r3, #1]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d12c      	bne.n	80058e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	db12      	blt.n	80058c4 <USB_EPSetStall+0x54>
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00f      	beq.n	80058c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	0151      	lsls	r1, r2, #5
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	440a      	add	r2, r1
 80058ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	0151      	lsls	r1, r2, #5
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	440a      	add	r2, r1
 80058da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058e2:	6013      	str	r3, [r2, #0]
 80058e4:	e02b      	b.n	800593e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	db12      	blt.n	800591e <USB_EPSetStall+0xae>
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00f      	beq.n	800591e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	0151      	lsls	r1, r2, #5
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	440a      	add	r2, r1
 8005914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005918:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800591c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4413      	add	r3, r2
 8005926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	0151      	lsls	r1, r2, #5
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	440a      	add	r2, r1
 8005934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005938:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800593c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	785b      	ldrb	r3, [r3, #1]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d128      	bne.n	80059ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4413      	add	r3, r2
 8005970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	0151      	lsls	r1, r2, #5
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	440a      	add	r2, r1
 800597e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005982:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005986:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	791b      	ldrb	r3, [r3, #4]
 800598c:	2b03      	cmp	r3, #3
 800598e:	d003      	beq.n	8005998 <USB_EPClearStall+0x4c>
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	791b      	ldrb	r3, [r3, #4]
 8005994:	2b02      	cmp	r3, #2
 8005996:	d138      	bne.n	8005a0a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	0151      	lsls	r1, r2, #5
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	440a      	add	r2, r1
 80059ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	e027      	b.n	8005a0a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	0151      	lsls	r1, r2, #5
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	440a      	add	r2, r1
 80059d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	791b      	ldrb	r3, [r3, #4]
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d003      	beq.n	80059ea <USB_EPClearStall+0x9e>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	791b      	ldrb	r3, [r3, #4]
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d10f      	bne.n	8005a0a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	0151      	lsls	r1, r2, #5
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	440a      	add	r2, r1
 8005a00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a08:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3714      	adds	r7, #20
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	460b      	mov	r3, r1
 8005a22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005a3a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	78fb      	ldrb	r3, [r7, #3]
 8005a46:	011b      	lsls	r3, r3, #4
 8005a48:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005a4c:	68f9      	ldr	r1, [r7, #12]
 8005a4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a52:	4313      	orrs	r3, r2
 8005a54:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a7e:	f023 0303 	bic.w	r3, r3, #3
 8005a82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a92:	f023 0302 	bic.w	r3, r3, #2
 8005a96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b085      	sub	sp, #20
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ac0:	f023 0303 	bic.w	r3, r3, #3
 8005ac4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ad4:	f043 0302 	orr.w	r3, r3, #2
 8005ad8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4013      	ands	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b00:	68fb      	ldr	r3, [r7, #12]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b085      	sub	sp, #20
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2a:	69db      	ldr	r3, [r3, #28]
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	4013      	ands	r3, r2
 8005b30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	0c1b      	lsrs	r3, r3, #16
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b085      	sub	sp, #20
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	4013      	ands	r3, r2
 8005b64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	b29b      	uxth	r3, r3
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b085      	sub	sp, #20
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	460b      	mov	r3, r1
 8005b80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005b86:	78fb      	ldrb	r3, [r7, #3]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ba4:	68bb      	ldr	r3, [r7, #8]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b087      	sub	sp, #28
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005bd6:	78fb      	ldrb	r3, [r7, #3]
 8005bd8:	f003 030f 	and.w	r3, r3, #15
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	fa22 f303 	lsr.w	r3, r2, r3
 8005be2:	01db      	lsls	r3, r3, #7
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005bec:	78fb      	ldrb	r3, [r7, #3]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c00:	68bb      	ldr	r3, [r7, #8]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b083      	sub	sp, #12
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b085      	sub	sp, #20
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c44:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005c48:	f023 0307 	bic.w	r3, r3, #7
 8005c4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	460b      	mov	r3, r1
 8005c7a:	607a      	str	r2, [r7, #4]
 8005c7c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	333c      	adds	r3, #60	; 0x3c
 8005c86:	3304      	adds	r3, #4
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	4a26      	ldr	r2, [pc, #152]	; (8005d28 <USB_EP0_OutStart+0xb8>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d90a      	bls.n	8005caa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ca0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ca4:	d101      	bne.n	8005caa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	e037      	b.n	8005d1a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cd8:	f043 0318 	orr.w	r3, r3, #24
 8005cdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005cf0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005cf2:	7afb      	ldrb	r3, [r7, #11]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d10f      	bne.n	8005d18 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfe:	461a      	mov	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d12:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005d16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	371c      	adds	r7, #28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	4f54300a 	.word	0x4f54300a

08005d2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4a13      	ldr	r2, [pc, #76]	; (8005d90 <USB_CoreReset+0x64>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d901      	bls.n	8005d4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e01b      	b.n	8005d82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	daf2      	bge.n	8005d38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f043 0201 	orr.w	r2, r3, #1
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	3301      	adds	r3, #1
 8005d66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4a09      	ldr	r2, [pc, #36]	; (8005d90 <USB_CoreReset+0x64>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d901      	bls.n	8005d74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e006      	b.n	8005d82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d0f0      	beq.n	8005d62 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	00030d40 	.word	0x00030d40

08005d94 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005da0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005da4:	f002 fca2 	bl	80086ec <USBD_static_malloc>
 8005da8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d109      	bne.n	8005dc4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	32b0      	adds	r2, #176	; 0xb0
 8005dba:	2100      	movs	r1, #0
 8005dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e0d4      	b.n	8005f6e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005dc4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005dc8:	2100      	movs	r1, #0
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f002 fdd7 	bl	800897e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	32b0      	adds	r2, #176	; 0xb0
 8005dda:	68f9      	ldr	r1, [r7, #12]
 8005ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	32b0      	adds	r2, #176	; 0xb0
 8005dea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	7c1b      	ldrb	r3, [r3, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d138      	bne.n	8005e6e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005dfc:	4b5e      	ldr	r3, [pc, #376]	; (8005f78 <USBD_CDC_Init+0x1e4>)
 8005dfe:	7819      	ldrb	r1, [r3, #0]
 8005e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e04:	2202      	movs	r2, #2
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f002 fb4d 	bl	80084a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e0c:	4b5a      	ldr	r3, [pc, #360]	; (8005f78 <USBD_CDC_Init+0x1e4>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	f003 020f 	and.w	r2, r3, #15
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	4613      	mov	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	440b      	add	r3, r1
 8005e20:	3324      	adds	r3, #36	; 0x24
 8005e22:	2201      	movs	r2, #1
 8005e24:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e26:	4b55      	ldr	r3, [pc, #340]	; (8005f7c <USBD_CDC_Init+0x1e8>)
 8005e28:	7819      	ldrb	r1, [r3, #0]
 8005e2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e2e:	2202      	movs	r2, #2
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f002 fb38 	bl	80084a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e36:	4b51      	ldr	r3, [pc, #324]	; (8005f7c <USBD_CDC_Init+0x1e8>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	f003 020f 	and.w	r2, r3, #15
 8005e3e:	6879      	ldr	r1, [r7, #4]
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	440b      	add	r3, r1
 8005e4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005e4e:	2201      	movs	r2, #1
 8005e50:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005e52:	4b4b      	ldr	r3, [pc, #300]	; (8005f80 <USBD_CDC_Init+0x1ec>)
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	f003 020f 	and.w	r2, r3, #15
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	440b      	add	r3, r1
 8005e66:	3326      	adds	r3, #38	; 0x26
 8005e68:	2210      	movs	r2, #16
 8005e6a:	801a      	strh	r2, [r3, #0]
 8005e6c:	e035      	b.n	8005eda <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e6e:	4b42      	ldr	r3, [pc, #264]	; (8005f78 <USBD_CDC_Init+0x1e4>)
 8005e70:	7819      	ldrb	r1, [r3, #0]
 8005e72:	2340      	movs	r3, #64	; 0x40
 8005e74:	2202      	movs	r2, #2
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f002 fb15 	bl	80084a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e7c:	4b3e      	ldr	r3, [pc, #248]	; (8005f78 <USBD_CDC_Init+0x1e4>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	f003 020f 	and.w	r2, r3, #15
 8005e84:	6879      	ldr	r1, [r7, #4]
 8005e86:	4613      	mov	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	440b      	add	r3, r1
 8005e90:	3324      	adds	r3, #36	; 0x24
 8005e92:	2201      	movs	r2, #1
 8005e94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e96:	4b39      	ldr	r3, [pc, #228]	; (8005f7c <USBD_CDC_Init+0x1e8>)
 8005e98:	7819      	ldrb	r1, [r3, #0]
 8005e9a:	2340      	movs	r3, #64	; 0x40
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f002 fb01 	bl	80084a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005ea4:	4b35      	ldr	r3, [pc, #212]	; (8005f7c <USBD_CDC_Init+0x1e8>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	f003 020f 	and.w	r2, r3, #15
 8005eac:	6879      	ldr	r1, [r7, #4]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	440b      	add	r3, r1
 8005eb8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005ec0:	4b2f      	ldr	r3, [pc, #188]	; (8005f80 <USBD_CDC_Init+0x1ec>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	f003 020f 	and.w	r2, r3, #15
 8005ec8:	6879      	ldr	r1, [r7, #4]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	440b      	add	r3, r1
 8005ed4:	3326      	adds	r3, #38	; 0x26
 8005ed6:	2210      	movs	r2, #16
 8005ed8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005eda:	4b29      	ldr	r3, [pc, #164]	; (8005f80 <USBD_CDC_Init+0x1ec>)
 8005edc:	7819      	ldrb	r1, [r3, #0]
 8005ede:	2308      	movs	r3, #8
 8005ee0:	2203      	movs	r2, #3
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f002 fadf 	bl	80084a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005ee8:	4b25      	ldr	r3, [pc, #148]	; (8005f80 <USBD_CDC_Init+0x1ec>)
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	f003 020f 	and.w	r2, r3, #15
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	440b      	add	r3, r1
 8005efc:	3324      	adds	r3, #36	; 0x24
 8005efe:	2201      	movs	r2, #1
 8005f00:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	33b0      	adds	r3, #176	; 0xb0
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4413      	add	r3, r2
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005f38:	2302      	movs	r3, #2
 8005f3a:	e018      	b.n	8005f6e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	7c1b      	ldrb	r3, [r3, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10a      	bne.n	8005f5a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f44:	4b0d      	ldr	r3, [pc, #52]	; (8005f7c <USBD_CDC_Init+0x1e8>)
 8005f46:	7819      	ldrb	r1, [r3, #0]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f002 fb96 	bl	8008684 <USBD_LL_PrepareReceive>
 8005f58:	e008      	b.n	8005f6c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f5a:	4b08      	ldr	r3, [pc, #32]	; (8005f7c <USBD_CDC_Init+0x1e8>)
 8005f5c:	7819      	ldrb	r1, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f64:	2340      	movs	r3, #64	; 0x40
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f002 fb8c 	bl	8008684 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20000093 	.word	0x20000093
 8005f7c:	20000094 	.word	0x20000094
 8005f80:	20000095 	.word	0x20000095

08005f84 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005f90:	4b3a      	ldr	r3, [pc, #232]	; (800607c <USBD_CDC_DeInit+0xf8>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	4619      	mov	r1, r3
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f002 faab 	bl	80084f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005f9c:	4b37      	ldr	r3, [pc, #220]	; (800607c <USBD_CDC_DeInit+0xf8>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	f003 020f 	and.w	r2, r3, #15
 8005fa4:	6879      	ldr	r1, [r7, #4]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	440b      	add	r3, r1
 8005fb0:	3324      	adds	r3, #36	; 0x24
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005fb6:	4b32      	ldr	r3, [pc, #200]	; (8006080 <USBD_CDC_DeInit+0xfc>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f002 fa98 	bl	80084f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005fc2:	4b2f      	ldr	r3, [pc, #188]	; (8006080 <USBD_CDC_DeInit+0xfc>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	f003 020f 	and.w	r2, r3, #15
 8005fca:	6879      	ldr	r1, [r7, #4]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	440b      	add	r3, r1
 8005fd6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005fda:	2200      	movs	r2, #0
 8005fdc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005fde:	4b29      	ldr	r3, [pc, #164]	; (8006084 <USBD_CDC_DeInit+0x100>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f002 fa84 	bl	80084f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005fea:	4b26      	ldr	r3, [pc, #152]	; (8006084 <USBD_CDC_DeInit+0x100>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	f003 020f 	and.w	r2, r3, #15
 8005ff2:	6879      	ldr	r1, [r7, #4]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	440b      	add	r3, r1
 8005ffe:	3324      	adds	r3, #36	; 0x24
 8006000:	2200      	movs	r2, #0
 8006002:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006004:	4b1f      	ldr	r3, [pc, #124]	; (8006084 <USBD_CDC_DeInit+0x100>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	f003 020f 	and.w	r2, r3, #15
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	4613      	mov	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	440b      	add	r3, r1
 8006018:	3326      	adds	r3, #38	; 0x26
 800601a:	2200      	movs	r2, #0
 800601c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	32b0      	adds	r2, #176	; 0xb0
 8006028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d01f      	beq.n	8006070 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	33b0      	adds	r3, #176	; 0xb0
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	32b0      	adds	r2, #176	; 0xb0
 800604e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006052:	4618      	mov	r0, r3
 8006054:	f002 fb58 	bl	8008708 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	32b0      	adds	r2, #176	; 0xb0
 8006062:	2100      	movs	r1, #0
 8006064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	20000093 	.word	0x20000093
 8006080:	20000094 	.word	0x20000094
 8006084:	20000095 	.word	0x20000095

08006088 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	32b0      	adds	r2, #176	; 0xb0
 800609c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e0bf      	b.n	8006238 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d050      	beq.n	8006166 <USBD_CDC_Setup+0xde>
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	f040 80af 	bne.w	8006228 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	88db      	ldrh	r3, [r3, #6]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d03a      	beq.n	8006148 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	b25b      	sxtb	r3, r3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	da1b      	bge.n	8006114 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	33b0      	adds	r3, #176	; 0xb0
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80060f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	88d2      	ldrh	r2, [r2, #6]
 80060f8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	88db      	ldrh	r3, [r3, #6]
 80060fe:	2b07      	cmp	r3, #7
 8006100:	bf28      	it	cs
 8006102:	2307      	movcs	r3, #7
 8006104:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	89fa      	ldrh	r2, [r7, #14]
 800610a:	4619      	mov	r1, r3
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f001 fd89 	bl	8007c24 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006112:	e090      	b.n	8006236 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	785a      	ldrb	r2, [r3, #1]
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	88db      	ldrh	r3, [r3, #6]
 8006122:	2b3f      	cmp	r3, #63	; 0x3f
 8006124:	d803      	bhi.n	800612e <USBD_CDC_Setup+0xa6>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	88db      	ldrh	r3, [r3, #6]
 800612a:	b2da      	uxtb	r2, r3
 800612c:	e000      	b.n	8006130 <USBD_CDC_Setup+0xa8>
 800612e:	2240      	movs	r2, #64	; 0x40
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006136:	6939      	ldr	r1, [r7, #16]
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800613e:	461a      	mov	r2, r3
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f001 fd9b 	bl	8007c7c <USBD_CtlPrepareRx>
      break;
 8006146:	e076      	b.n	8006236 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	33b0      	adds	r3, #176	; 0xb0
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	7850      	ldrb	r0, [r2, #1]
 800615e:	2200      	movs	r2, #0
 8006160:	6839      	ldr	r1, [r7, #0]
 8006162:	4798      	blx	r3
      break;
 8006164:	e067      	b.n	8006236 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	785b      	ldrb	r3, [r3, #1]
 800616a:	2b0b      	cmp	r3, #11
 800616c:	d851      	bhi.n	8006212 <USBD_CDC_Setup+0x18a>
 800616e:	a201      	add	r2, pc, #4	; (adr r2, 8006174 <USBD_CDC_Setup+0xec>)
 8006170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006174:	080061a5 	.word	0x080061a5
 8006178:	08006221 	.word	0x08006221
 800617c:	08006213 	.word	0x08006213
 8006180:	08006213 	.word	0x08006213
 8006184:	08006213 	.word	0x08006213
 8006188:	08006213 	.word	0x08006213
 800618c:	08006213 	.word	0x08006213
 8006190:	08006213 	.word	0x08006213
 8006194:	08006213 	.word	0x08006213
 8006198:	08006213 	.word	0x08006213
 800619c:	080061cf 	.word	0x080061cf
 80061a0:	080061f9 	.word	0x080061f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b03      	cmp	r3, #3
 80061ae:	d107      	bne.n	80061c0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80061b0:	f107 030a 	add.w	r3, r7, #10
 80061b4:	2202      	movs	r2, #2
 80061b6:	4619      	mov	r1, r3
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f001 fd33 	bl	8007c24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061be:	e032      	b.n	8006226 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80061c0:	6839      	ldr	r1, [r7, #0]
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f001 fcbd 	bl	8007b42 <USBD_CtlError>
            ret = USBD_FAIL;
 80061c8:	2303      	movs	r3, #3
 80061ca:	75fb      	strb	r3, [r7, #23]
          break;
 80061cc:	e02b      	b.n	8006226 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d107      	bne.n	80061ea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80061da:	f107 030d 	add.w	r3, r7, #13
 80061de:	2201      	movs	r2, #1
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f001 fd1e 	bl	8007c24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061e8:	e01d      	b.n	8006226 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80061ea:	6839      	ldr	r1, [r7, #0]
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f001 fca8 	bl	8007b42 <USBD_CtlError>
            ret = USBD_FAIL;
 80061f2:	2303      	movs	r3, #3
 80061f4:	75fb      	strb	r3, [r7, #23]
          break;
 80061f6:	e016      	b.n	8006226 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b03      	cmp	r3, #3
 8006202:	d00f      	beq.n	8006224 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006204:	6839      	ldr	r1, [r7, #0]
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f001 fc9b 	bl	8007b42 <USBD_CtlError>
            ret = USBD_FAIL;
 800620c:	2303      	movs	r3, #3
 800620e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006210:	e008      	b.n	8006224 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006212:	6839      	ldr	r1, [r7, #0]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f001 fc94 	bl	8007b42 <USBD_CtlError>
          ret = USBD_FAIL;
 800621a:	2303      	movs	r3, #3
 800621c:	75fb      	strb	r3, [r7, #23]
          break;
 800621e:	e002      	b.n	8006226 <USBD_CDC_Setup+0x19e>
          break;
 8006220:	bf00      	nop
 8006222:	e008      	b.n	8006236 <USBD_CDC_Setup+0x1ae>
          break;
 8006224:	bf00      	nop
      }
      break;
 8006226:	e006      	b.n	8006236 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006228:	6839      	ldr	r1, [r7, #0]
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f001 fc89 	bl	8007b42 <USBD_CtlError>
      ret = USBD_FAIL;
 8006230:	2303      	movs	r3, #3
 8006232:	75fb      	strb	r3, [r7, #23]
      break;
 8006234:	bf00      	nop
  }

  return (uint8_t)ret;
 8006236:	7dfb      	ldrb	r3, [r7, #23]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	460b      	mov	r3, r1
 800624a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006252:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	32b0      	adds	r2, #176	; 0xb0
 800625e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006266:	2303      	movs	r3, #3
 8006268:	e065      	b.n	8006336 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	32b0      	adds	r2, #176	; 0xb0
 8006274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006278:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800627a:	78fb      	ldrb	r3, [r7, #3]
 800627c:	f003 020f 	and.w	r2, r3, #15
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	4613      	mov	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	440b      	add	r3, r1
 800628c:	3318      	adds	r3, #24
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d02f      	beq.n	80062f4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006294:	78fb      	ldrb	r3, [r7, #3]
 8006296:	f003 020f 	and.w	r2, r3, #15
 800629a:	6879      	ldr	r1, [r7, #4]
 800629c:	4613      	mov	r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	440b      	add	r3, r1
 80062a6:	3318      	adds	r3, #24
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	78fb      	ldrb	r3, [r7, #3]
 80062ac:	f003 010f 	and.w	r1, r3, #15
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	460b      	mov	r3, r1
 80062b4:	00db      	lsls	r3, r3, #3
 80062b6:	440b      	add	r3, r1
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4403      	add	r3, r0
 80062bc:	3348      	adds	r3, #72	; 0x48
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80062c4:	fb01 f303 	mul.w	r3, r1, r3
 80062c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d112      	bne.n	80062f4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80062ce:	78fb      	ldrb	r3, [r7, #3]
 80062d0:	f003 020f 	and.w	r2, r3, #15
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	4613      	mov	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	440b      	add	r3, r1
 80062e0:	3318      	adds	r3, #24
 80062e2:	2200      	movs	r2, #0
 80062e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80062e6:	78f9      	ldrb	r1, [r7, #3]
 80062e8:	2300      	movs	r3, #0
 80062ea:	2200      	movs	r2, #0
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f002 f9a8 	bl	8008642 <USBD_LL_Transmit>
 80062f2:	e01f      	b.n	8006334 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	33b0      	adds	r3, #176	; 0xb0
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d010      	beq.n	8006334 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	33b0      	adds	r3, #176	; 0xb0
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006330:	78fa      	ldrb	r2, [r7, #3]
 8006332:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	460b      	mov	r3, r1
 8006348:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	32b0      	adds	r2, #176	; 0xb0
 8006354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006358:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	32b0      	adds	r2, #176	; 0xb0
 8006364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800636c:	2303      	movs	r3, #3
 800636e:	e01a      	b.n	80063a6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006370:	78fb      	ldrb	r3, [r7, #3]
 8006372:	4619      	mov	r1, r3
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f002 f9a6 	bl	80086c6 <USBD_LL_GetRxDataSize>
 800637a:	4602      	mov	r2, r0
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	33b0      	adds	r3, #176	; 0xb0
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80063a0:	4611      	mov	r1, r2
 80063a2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b084      	sub	sp, #16
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	32b0      	adds	r2, #176	; 0xb0
 80063c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e025      	b.n	800641c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	33b0      	adds	r3, #176	; 0xb0
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4413      	add	r3, r2
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d01a      	beq.n	800641a <USBD_CDC_EP0_RxReady+0x6c>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80063ea:	2bff      	cmp	r3, #255	; 0xff
 80063ec:	d015      	beq.n	800641a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	33b0      	adds	r3, #176	; 0xb0
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006406:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800640e:	b292      	uxth	r2, r2
 8006410:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	22ff      	movs	r2, #255	; 0xff
 8006416:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800642c:	2182      	movs	r1, #130	; 0x82
 800642e:	4818      	ldr	r0, [pc, #96]	; (8006490 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006430:	f000 fd4f 	bl	8006ed2 <USBD_GetEpDesc>
 8006434:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006436:	2101      	movs	r1, #1
 8006438:	4815      	ldr	r0, [pc, #84]	; (8006490 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800643a:	f000 fd4a 	bl	8006ed2 <USBD_GetEpDesc>
 800643e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006440:	2181      	movs	r1, #129	; 0x81
 8006442:	4813      	ldr	r0, [pc, #76]	; (8006490 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006444:	f000 fd45 	bl	8006ed2 <USBD_GetEpDesc>
 8006448:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	2210      	movs	r2, #16
 8006454:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d006      	beq.n	800646a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	2200      	movs	r2, #0
 8006460:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006464:	711a      	strb	r2, [r3, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d006      	beq.n	800647e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006478:	711a      	strb	r2, [r3, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2243      	movs	r2, #67	; 0x43
 8006482:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006484:	4b02      	ldr	r3, [pc, #8]	; (8006490 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20000050 	.word	0x20000050

08006494 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800649c:	2182      	movs	r1, #130	; 0x82
 800649e:	4818      	ldr	r0, [pc, #96]	; (8006500 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064a0:	f000 fd17 	bl	8006ed2 <USBD_GetEpDesc>
 80064a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064a6:	2101      	movs	r1, #1
 80064a8:	4815      	ldr	r0, [pc, #84]	; (8006500 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064aa:	f000 fd12 	bl	8006ed2 <USBD_GetEpDesc>
 80064ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064b0:	2181      	movs	r1, #129	; 0x81
 80064b2:	4813      	ldr	r0, [pc, #76]	; (8006500 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064b4:	f000 fd0d 	bl	8006ed2 <USBD_GetEpDesc>
 80064b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2210      	movs	r2, #16
 80064c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d006      	beq.n	80064da <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	2200      	movs	r2, #0
 80064d0:	711a      	strb	r2, [r3, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f042 0202 	orr.w	r2, r2, #2
 80064d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d006      	beq.n	80064ee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	711a      	strb	r2, [r3, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f042 0202 	orr.w	r2, r2, #2
 80064ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2243      	movs	r2, #67	; 0x43
 80064f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80064f4:	4b02      	ldr	r3, [pc, #8]	; (8006500 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20000050 	.word	0x20000050

08006504 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800650c:	2182      	movs	r1, #130	; 0x82
 800650e:	4818      	ldr	r0, [pc, #96]	; (8006570 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006510:	f000 fcdf 	bl	8006ed2 <USBD_GetEpDesc>
 8006514:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006516:	2101      	movs	r1, #1
 8006518:	4815      	ldr	r0, [pc, #84]	; (8006570 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800651a:	f000 fcda 	bl	8006ed2 <USBD_GetEpDesc>
 800651e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006520:	2181      	movs	r1, #129	; 0x81
 8006522:	4813      	ldr	r0, [pc, #76]	; (8006570 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006524:	f000 fcd5 	bl	8006ed2 <USBD_GetEpDesc>
 8006528:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2210      	movs	r2, #16
 8006534:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d006      	beq.n	800654a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	2200      	movs	r2, #0
 8006540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006544:	711a      	strb	r2, [r3, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d006      	beq.n	800655e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006558:	711a      	strb	r2, [r3, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2243      	movs	r2, #67	; 0x43
 8006562:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006564:	4b02      	ldr	r3, [pc, #8]	; (8006570 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006566:	4618      	mov	r0, r3
 8006568:	3718      	adds	r7, #24
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20000050 	.word	0x20000050

08006574 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	220a      	movs	r2, #10
 8006580:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006582:	4b03      	ldr	r3, [pc, #12]	; (8006590 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006584:	4618      	mov	r0, r3
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	2000000c 	.word	0x2000000c

08006594 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e009      	b.n	80065bc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	33b0      	adds	r3, #176	; 0xb0
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	32b0      	adds	r2, #176	; 0xb0
 80065de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e008      	b.n	8006600 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	371c      	adds	r7, #28
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	32b0      	adds	r2, #176	; 0xb0
 8006620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006624:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d101      	bne.n	8006630 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800662c:	2303      	movs	r3, #3
 800662e:	e004      	b.n	800663a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
	...

08006648 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	32b0      	adds	r2, #176	; 0xb0
 800665a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800665e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006660:	2301      	movs	r3, #1
 8006662:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	32b0      	adds	r2, #176	; 0xb0
 800666e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006676:	2303      	movs	r3, #3
 8006678:	e025      	b.n	80066c6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006680:	2b00      	cmp	r3, #0
 8006682:	d11f      	bne.n	80066c4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	2201      	movs	r2, #1
 8006688:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800668c:	4b10      	ldr	r3, [pc, #64]	; (80066d0 <USBD_CDC_TransmitPacket+0x88>)
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	f003 020f 	and.w	r2, r3, #15
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	4613      	mov	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4403      	add	r3, r0
 80066a6:	3318      	adds	r3, #24
 80066a8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80066aa:	4b09      	ldr	r3, [pc, #36]	; (80066d0 <USBD_CDC_TransmitPacket+0x88>)
 80066ac:	7819      	ldrb	r1, [r3, #0]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f001 ffc1 	bl	8008642 <USBD_LL_Transmit>

    ret = USBD_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20000093 	.word	0x20000093

080066d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	32b0      	adds	r2, #176	; 0xb0
 80066e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	32b0      	adds	r2, #176	; 0xb0
 80066f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80066fe:	2303      	movs	r3, #3
 8006700:	e018      	b.n	8006734 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	7c1b      	ldrb	r3, [r3, #16]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10a      	bne.n	8006720 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800670a:	4b0c      	ldr	r3, [pc, #48]	; (800673c <USBD_CDC_ReceivePacket+0x68>)
 800670c:	7819      	ldrb	r1, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006714:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f001 ffb3 	bl	8008684 <USBD_LL_PrepareReceive>
 800671e:	e008      	b.n	8006732 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006720:	4b06      	ldr	r3, [pc, #24]	; (800673c <USBD_CDC_ReceivePacket+0x68>)
 8006722:	7819      	ldrb	r1, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800672a:	2340      	movs	r3, #64	; 0x40
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 ffa9 	bl	8008684 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	20000094 	.word	0x20000094

08006740 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	4613      	mov	r3, r2
 800674c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006754:	2303      	movs	r3, #3
 8006756:	e01f      	b.n	8006798 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	79fa      	ldrb	r2, [r7, #7]
 800678a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f001 fe23 	bl	80083d8 <USBD_LL_Init>
 8006792:	4603      	mov	r3, r0
 8006794:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006796:	7dfb      	ldrb	r3, [r7, #23]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3718      	adds	r7, #24
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067aa:	2300      	movs	r3, #0
 80067ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e025      	b.n	8006804 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	32ae      	adds	r2, #174	; 0xae
 80067ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00f      	beq.n	80067f4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	32ae      	adds	r2, #174	; 0xae
 80067de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e4:	f107 020e 	add.w	r2, r7, #14
 80067e8:	4610      	mov	r0, r2
 80067ea:	4798      	blx	r3
 80067ec:	4602      	mov	r2, r0
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f001 fe2b 	bl	8008470 <USBD_LL_Start>
 800681a:	4603      	mov	r3, r0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800682c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800682e:	4618      	mov	r0, r3
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	460b      	mov	r3, r1
 8006844:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006850:	2b00      	cmp	r3, #0
 8006852:	d009      	beq.n	8006868 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	78fa      	ldrb	r2, [r7, #3]
 800685e:	4611      	mov	r1, r2
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	4798      	blx	r3
 8006864:	4603      	mov	r3, r0
 8006866:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006868:	7bfb      	ldrb	r3, [r7, #15]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	460b      	mov	r3, r1
 800687c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	78fa      	ldrb	r2, [r7, #3]
 800688c:	4611      	mov	r1, r2
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	4798      	blx	r3
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006898:	2303      	movs	r3, #3
 800689a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800689c:	7bfb      	ldrb	r3, [r7, #15]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068b6:	6839      	ldr	r1, [r7, #0]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f001 f908 	bl	8007ace <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80068cc:	461a      	mov	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068da:	f003 031f 	and.w	r3, r3, #31
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d01a      	beq.n	8006918 <USBD_LL_SetupStage+0x72>
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d822      	bhi.n	800692c <USBD_LL_SetupStage+0x86>
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <USBD_LL_SetupStage+0x4a>
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d00a      	beq.n	8006904 <USBD_LL_SetupStage+0x5e>
 80068ee:	e01d      	b.n	800692c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fb5f 	bl	8006fbc <USBD_StdDevReq>
 80068fe:	4603      	mov	r3, r0
 8006900:	73fb      	strb	r3, [r7, #15]
      break;
 8006902:	e020      	b.n	8006946 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fbc7 	bl	80070a0 <USBD_StdItfReq>
 8006912:	4603      	mov	r3, r0
 8006914:	73fb      	strb	r3, [r7, #15]
      break;
 8006916:	e016      	b.n	8006946 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fc29 	bl	8007178 <USBD_StdEPReq>
 8006926:	4603      	mov	r3, r0
 8006928:	73fb      	strb	r3, [r7, #15]
      break;
 800692a:	e00c      	b.n	8006946 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006932:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006936:	b2db      	uxtb	r3, r3
 8006938:	4619      	mov	r1, r3
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f001 fdf8 	bl	8008530 <USBD_LL_StallEP>
 8006940:	4603      	mov	r3, r0
 8006942:	73fb      	strb	r3, [r7, #15]
      break;
 8006944:	bf00      	nop
  }

  return ret;
 8006946:	7bfb      	ldrb	r3, [r7, #15]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	460b      	mov	r3, r1
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006962:	7afb      	ldrb	r3, [r7, #11]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d16e      	bne.n	8006a46 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800696e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006976:	2b03      	cmp	r3, #3
 8006978:	f040 8098 	bne.w	8006aac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	429a      	cmp	r2, r3
 8006986:	d913      	bls.n	80069b0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	1ad2      	subs	r2, r2, r3
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	4293      	cmp	r3, r2
 80069a0:	bf28      	it	cs
 80069a2:	4613      	movcs	r3, r2
 80069a4:	461a      	mov	r2, r3
 80069a6:	6879      	ldr	r1, [r7, #4]
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f001 f984 	bl	8007cb6 <USBD_CtlContinueRx>
 80069ae:	e07d      	b.n	8006aac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80069b6:	f003 031f 	and.w	r3, r3, #31
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d014      	beq.n	80069e8 <USBD_LL_DataOutStage+0x98>
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d81d      	bhi.n	80069fe <USBD_LL_DataOutStage+0xae>
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d002      	beq.n	80069cc <USBD_LL_DataOutStage+0x7c>
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d003      	beq.n	80069d2 <USBD_LL_DataOutStage+0x82>
 80069ca:	e018      	b.n	80069fe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	75bb      	strb	r3, [r7, #22]
            break;
 80069d0:	e018      	b.n	8006a04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	4619      	mov	r1, r3
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f000 fa5e 	bl	8006e9e <USBD_CoreFindIF>
 80069e2:	4603      	mov	r3, r0
 80069e4:	75bb      	strb	r3, [r7, #22]
            break;
 80069e6:	e00d      	b.n	8006a04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	4619      	mov	r1, r3
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f000 fa60 	bl	8006eb8 <USBD_CoreFindEP>
 80069f8:	4603      	mov	r3, r0
 80069fa:	75bb      	strb	r3, [r7, #22]
            break;
 80069fc:	e002      	b.n	8006a04 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80069fe:	2300      	movs	r3, #0
 8006a00:	75bb      	strb	r3, [r7, #22]
            break;
 8006a02:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006a04:	7dbb      	ldrb	r3, [r7, #22]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d119      	bne.n	8006a3e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b03      	cmp	r3, #3
 8006a14:	d113      	bne.n	8006a3e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006a16:	7dba      	ldrb	r2, [r7, #22]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	32ae      	adds	r2, #174	; 0xae
 8006a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00b      	beq.n	8006a3e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006a26:	7dba      	ldrb	r2, [r7, #22]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006a2e:	7dba      	ldrb	r2, [r7, #22]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	32ae      	adds	r2, #174	; 0xae
 8006a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f001 f94a 	bl	8007cd8 <USBD_CtlSendStatus>
 8006a44:	e032      	b.n	8006aac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006a46:	7afb      	ldrb	r3, [r7, #11]
 8006a48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	4619      	mov	r1, r3
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f000 fa31 	bl	8006eb8 <USBD_CoreFindEP>
 8006a56:	4603      	mov	r3, r0
 8006a58:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a5a:	7dbb      	ldrb	r3, [r7, #22]
 8006a5c:	2bff      	cmp	r3, #255	; 0xff
 8006a5e:	d025      	beq.n	8006aac <USBD_LL_DataOutStage+0x15c>
 8006a60:	7dbb      	ldrb	r3, [r7, #22]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d122      	bne.n	8006aac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b03      	cmp	r3, #3
 8006a70:	d117      	bne.n	8006aa2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006a72:	7dba      	ldrb	r2, [r7, #22]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	32ae      	adds	r2, #174	; 0xae
 8006a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00f      	beq.n	8006aa2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006a82:	7dba      	ldrb	r2, [r7, #22]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006a8a:	7dba      	ldrb	r2, [r7, #22]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	32ae      	adds	r2, #174	; 0xae
 8006a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	7afa      	ldrb	r2, [r7, #11]
 8006a98:	4611      	mov	r1, r2
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	4798      	blx	r3
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006aa2:	7dfb      	ldrb	r3, [r7, #23]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
 8006aaa:	e000      	b.n	8006aae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b086      	sub	sp, #24
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	60f8      	str	r0, [r7, #12]
 8006abe:	460b      	mov	r3, r1
 8006ac0:	607a      	str	r2, [r7, #4]
 8006ac2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006ac4:	7afb      	ldrb	r3, [r7, #11]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d16f      	bne.n	8006baa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	3314      	adds	r3, #20
 8006ace:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d15a      	bne.n	8006b90 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	689a      	ldr	r2, [r3, #8]
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d914      	bls.n	8006b10 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	689a      	ldr	r2, [r3, #8]
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	1ad2      	subs	r2, r2, r3
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	461a      	mov	r2, r3
 8006afa:	6879      	ldr	r1, [r7, #4]
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f001 f8ac 	bl	8007c5a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b02:	2300      	movs	r3, #0
 8006b04:	2200      	movs	r2, #0
 8006b06:	2100      	movs	r1, #0
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f001 fdbb 	bl	8008684 <USBD_LL_PrepareReceive>
 8006b0e:	e03f      	b.n	8006b90 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	68da      	ldr	r2, [r3, #12]
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d11c      	bne.n	8006b56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d316      	bcc.n	8006b56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d20f      	bcs.n	8006b56 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b36:	2200      	movs	r2, #0
 8006b38:	2100      	movs	r1, #0
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f001 f88d 	bl	8007c5a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b48:	2300      	movs	r3, #0
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f001 fd98 	bl	8008684 <USBD_LL_PrepareReceive>
 8006b54:	e01c      	b.n	8006b90 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	d10f      	bne.n	8006b82 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d009      	beq.n	8006b82 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b82:	2180      	movs	r1, #128	; 0x80
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f001 fcd3 	bl	8008530 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f001 f8b7 	bl	8007cfe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d03a      	beq.n	8006c10 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f7ff fe42 	bl	8006824 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006ba8:	e032      	b.n	8006c10 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006baa:	7afb      	ldrb	r3, [r7, #11]
 8006bac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 f97f 	bl	8006eb8 <USBD_CoreFindEP>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bbe:	7dfb      	ldrb	r3, [r7, #23]
 8006bc0:	2bff      	cmp	r3, #255	; 0xff
 8006bc2:	d025      	beq.n	8006c10 <USBD_LL_DataInStage+0x15a>
 8006bc4:	7dfb      	ldrb	r3, [r7, #23]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d122      	bne.n	8006c10 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d11c      	bne.n	8006c10 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006bd6:	7dfa      	ldrb	r2, [r7, #23]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	32ae      	adds	r2, #174	; 0xae
 8006bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d014      	beq.n	8006c10 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006be6:	7dfa      	ldrb	r2, [r7, #23]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006bee:	7dfa      	ldrb	r2, [r7, #23]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	32ae      	adds	r2, #174	; 0xae
 8006bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	7afa      	ldrb	r2, [r7, #11]
 8006bfc:	4611      	mov	r1, r2
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	4798      	blx	r3
 8006c02:	4603      	mov	r3, r0
 8006c04:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006c06:	7dbb      	ldrb	r3, [r7, #22]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006c0c:	7dbb      	ldrb	r3, [r7, #22]
 8006c0e:	e000      	b.n	8006c12 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3718      	adds	r7, #24
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b084      	sub	sp, #16
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d014      	beq.n	8006c80 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00e      	beq.n	8006c80 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	6852      	ldr	r2, [r2, #4]
 8006c6e:	b2d2      	uxtb	r2, r2
 8006c70:	4611      	mov	r1, r2
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	4798      	blx	r3
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d001      	beq.n	8006c80 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c80:	2340      	movs	r3, #64	; 0x40
 8006c82:	2200      	movs	r2, #0
 8006c84:	2100      	movs	r1, #0
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f001 fc0d 	bl	80084a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2240      	movs	r2, #64	; 0x40
 8006c98:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c9c:	2340      	movs	r3, #64	; 0x40
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	2180      	movs	r1, #128	; 0x80
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f001 fbff 	bl	80084a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2240      	movs	r2, #64	; 0x40
 8006cb2:	621a      	str	r2, [r3, #32]

  return ret;
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	78fa      	ldrb	r2, [r7, #3]
 8006cce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b083      	sub	sp, #12
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cec:	b2da      	uxtb	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2204      	movs	r2, #4
 8006cf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b083      	sub	sp, #12
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	d106      	bne.n	8006d2c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006d24:	b2da      	uxtb	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b082      	sub	sp, #8
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d110      	bne.n	8006d70 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00b      	beq.n	8006d70 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d005      	beq.n	8006d70 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6a:	69db      	ldr	r3, [r3, #28]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b082      	sub	sp, #8
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	460b      	mov	r3, r1
 8006d84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	32ae      	adds	r2, #174	; 0xae
 8006d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d101      	bne.n	8006d9c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e01c      	b.n	8006dd6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b03      	cmp	r3, #3
 8006da6:	d115      	bne.n	8006dd4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	32ae      	adds	r2, #174	; 0xae
 8006db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db6:	6a1b      	ldr	r3, [r3, #32]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00b      	beq.n	8006dd4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	32ae      	adds	r2, #174	; 0xae
 8006dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	78fa      	ldrb	r2, [r7, #3]
 8006dce:	4611      	mov	r1, r2
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b082      	sub	sp, #8
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	460b      	mov	r3, r1
 8006de8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	32ae      	adds	r2, #174	; 0xae
 8006df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d101      	bne.n	8006e00 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e01c      	b.n	8006e3a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b03      	cmp	r3, #3
 8006e0a:	d115      	bne.n	8006e38 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	32ae      	adds	r2, #174	; 0xae
 8006e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00b      	beq.n	8006e38 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	32ae      	adds	r2, #174	; 0xae
 8006e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e30:	78fa      	ldrb	r2, [r7, #3]
 8006e32:	4611      	mov	r1, r2
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00e      	beq.n	8006e94 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	6852      	ldr	r2, [r2, #4]
 8006e82:	b2d2      	uxtb	r2, r2
 8006e84:	4611      	mov	r1, r2
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	4798      	blx	r3
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006e90:	2303      	movs	r3, #3
 8006e92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b083      	sub	sp, #12
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006eaa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ec4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b086      	sub	sp, #24
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	460b      	mov	r3, r1
 8006edc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	885b      	ldrh	r3, [r3, #2]
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d920      	bls.n	8006f3c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006f02:	e013      	b.n	8006f2c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006f04:	f107 030a 	add.w	r3, r7, #10
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6978      	ldr	r0, [r7, #20]
 8006f0c:	f000 f81b 	bl	8006f46 <USBD_GetNextDesc>
 8006f10:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	785b      	ldrb	r3, [r3, #1]
 8006f16:	2b05      	cmp	r3, #5
 8006f18:	d108      	bne.n	8006f2c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	789b      	ldrb	r3, [r3, #2]
 8006f22:	78fa      	ldrb	r2, [r7, #3]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d008      	beq.n	8006f3a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	885b      	ldrh	r3, [r3, #2]
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	897b      	ldrh	r3, [r7, #10]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d8e5      	bhi.n	8006f04 <USBD_GetEpDesc+0x32>
 8006f38:	e000      	b.n	8006f3c <USBD_GetEpDesc+0x6a>
          break;
 8006f3a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006f3c:	693b      	ldr	r3, [r7, #16]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3718      	adds	r7, #24
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b085      	sub	sp, #20
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	881a      	ldrh	r2, [r3, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	4413      	add	r3, r2
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4413      	add	r3, r2
 8006f70:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f72:	68fb      	ldr	r3, [r7, #12]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3714      	adds	r7, #20
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b087      	sub	sp, #28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	3301      	adds	r3, #1
 8006f96:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f9e:	8a3b      	ldrh	r3, [r7, #16]
 8006fa0:	021b      	lsls	r3, r3, #8
 8006fa2:	b21a      	sxth	r2, r3
 8006fa4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	b21b      	sxth	r3, r3
 8006fac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006fae:	89fb      	ldrh	r3, [r7, #14]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	371c      	adds	r7, #28
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fd2:	2b40      	cmp	r3, #64	; 0x40
 8006fd4:	d005      	beq.n	8006fe2 <USBD_StdDevReq+0x26>
 8006fd6:	2b40      	cmp	r3, #64	; 0x40
 8006fd8:	d857      	bhi.n	800708a <USBD_StdDevReq+0xce>
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00f      	beq.n	8006ffe <USBD_StdDevReq+0x42>
 8006fde:	2b20      	cmp	r3, #32
 8006fe0:	d153      	bne.n	800708a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	32ae      	adds	r2, #174	; 0xae
 8006fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	4798      	blx	r3
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8006ffc:	e04a      	b.n	8007094 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	785b      	ldrb	r3, [r3, #1]
 8007002:	2b09      	cmp	r3, #9
 8007004:	d83b      	bhi.n	800707e <USBD_StdDevReq+0xc2>
 8007006:	a201      	add	r2, pc, #4	; (adr r2, 800700c <USBD_StdDevReq+0x50>)
 8007008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700c:	08007061 	.word	0x08007061
 8007010:	08007075 	.word	0x08007075
 8007014:	0800707f 	.word	0x0800707f
 8007018:	0800706b 	.word	0x0800706b
 800701c:	0800707f 	.word	0x0800707f
 8007020:	0800703f 	.word	0x0800703f
 8007024:	08007035 	.word	0x08007035
 8007028:	0800707f 	.word	0x0800707f
 800702c:	08007057 	.word	0x08007057
 8007030:	08007049 	.word	0x08007049
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fa3c 	bl	80074b4 <USBD_GetDescriptor>
          break;
 800703c:	e024      	b.n	8007088 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800703e:	6839      	ldr	r1, [r7, #0]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fba1 	bl	8007788 <USBD_SetAddress>
          break;
 8007046:	e01f      	b.n	8007088 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007048:	6839      	ldr	r1, [r7, #0]
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fbe0 	bl	8007810 <USBD_SetConfig>
 8007050:	4603      	mov	r3, r0
 8007052:	73fb      	strb	r3, [r7, #15]
          break;
 8007054:	e018      	b.n	8007088 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fc83 	bl	8007964 <USBD_GetConfig>
          break;
 800705e:	e013      	b.n	8007088 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fcb4 	bl	80079d0 <USBD_GetStatus>
          break;
 8007068:	e00e      	b.n	8007088 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fce3 	bl	8007a38 <USBD_SetFeature>
          break;
 8007072:	e009      	b.n	8007088 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fd07 	bl	8007a8a <USBD_ClrFeature>
          break;
 800707c:	e004      	b.n	8007088 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fd5e 	bl	8007b42 <USBD_CtlError>
          break;
 8007086:	bf00      	nop
      }
      break;
 8007088:	e004      	b.n	8007094 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fd58 	bl	8007b42 <USBD_CtlError>
      break;
 8007092:	bf00      	nop
  }

  return ret;
 8007094:	7bfb      	ldrb	r3, [r7, #15]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop

080070a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070b6:	2b40      	cmp	r3, #64	; 0x40
 80070b8:	d005      	beq.n	80070c6 <USBD_StdItfReq+0x26>
 80070ba:	2b40      	cmp	r3, #64	; 0x40
 80070bc:	d852      	bhi.n	8007164 <USBD_StdItfReq+0xc4>
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d001      	beq.n	80070c6 <USBD_StdItfReq+0x26>
 80070c2:	2b20      	cmp	r3, #32
 80070c4:	d14e      	bne.n	8007164 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	3b01      	subs	r3, #1
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d840      	bhi.n	8007156 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	889b      	ldrh	r3, [r3, #4]
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d836      	bhi.n	800714c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	889b      	ldrh	r3, [r3, #4]
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	4619      	mov	r1, r3
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7ff fed9 	bl	8006e9e <USBD_CoreFindIF>
 80070ec:	4603      	mov	r3, r0
 80070ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070f0:	7bbb      	ldrb	r3, [r7, #14]
 80070f2:	2bff      	cmp	r3, #255	; 0xff
 80070f4:	d01d      	beq.n	8007132 <USBD_StdItfReq+0x92>
 80070f6:	7bbb      	ldrb	r3, [r7, #14]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d11a      	bne.n	8007132 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80070fc:	7bba      	ldrb	r2, [r7, #14]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	32ae      	adds	r2, #174	; 0xae
 8007102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00f      	beq.n	800712c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800710c:	7bba      	ldrb	r2, [r7, #14]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007114:	7bba      	ldrb	r2, [r7, #14]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	32ae      	adds	r2, #174	; 0xae
 800711a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	6839      	ldr	r1, [r7, #0]
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	4798      	blx	r3
 8007126:	4603      	mov	r3, r0
 8007128:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800712a:	e004      	b.n	8007136 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800712c:	2303      	movs	r3, #3
 800712e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007130:	e001      	b.n	8007136 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007132:	2303      	movs	r3, #3
 8007134:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	88db      	ldrh	r3, [r3, #6]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d110      	bne.n	8007160 <USBD_StdItfReq+0xc0>
 800713e:	7bfb      	ldrb	r3, [r7, #15]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10d      	bne.n	8007160 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fdc7 	bl	8007cd8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800714a:	e009      	b.n	8007160 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800714c:	6839      	ldr	r1, [r7, #0]
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fcf7 	bl	8007b42 <USBD_CtlError>
          break;
 8007154:	e004      	b.n	8007160 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007156:	6839      	ldr	r1, [r7, #0]
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fcf2 	bl	8007b42 <USBD_CtlError>
          break;
 800715e:	e000      	b.n	8007162 <USBD_StdItfReq+0xc2>
          break;
 8007160:	bf00      	nop
      }
      break;
 8007162:	e004      	b.n	800716e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fceb 	bl	8007b42 <USBD_CtlError>
      break;
 800716c:	bf00      	nop
  }

  return ret;
 800716e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	889b      	ldrh	r3, [r3, #4]
 800718a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007194:	2b40      	cmp	r3, #64	; 0x40
 8007196:	d007      	beq.n	80071a8 <USBD_StdEPReq+0x30>
 8007198:	2b40      	cmp	r3, #64	; 0x40
 800719a:	f200 817f 	bhi.w	800749c <USBD_StdEPReq+0x324>
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d02a      	beq.n	80071f8 <USBD_StdEPReq+0x80>
 80071a2:	2b20      	cmp	r3, #32
 80071a4:	f040 817a 	bne.w	800749c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80071a8:	7bbb      	ldrb	r3, [r7, #14]
 80071aa:	4619      	mov	r1, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7ff fe83 	bl	8006eb8 <USBD_CoreFindEP>
 80071b2:	4603      	mov	r3, r0
 80071b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071b6:	7b7b      	ldrb	r3, [r7, #13]
 80071b8:	2bff      	cmp	r3, #255	; 0xff
 80071ba:	f000 8174 	beq.w	80074a6 <USBD_StdEPReq+0x32e>
 80071be:	7b7b      	ldrb	r3, [r7, #13]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f040 8170 	bne.w	80074a6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80071c6:	7b7a      	ldrb	r2, [r7, #13]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80071ce:	7b7a      	ldrb	r2, [r7, #13]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	32ae      	adds	r2, #174	; 0xae
 80071d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f000 8163 	beq.w	80074a6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80071e0:	7b7a      	ldrb	r2, [r7, #13]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	32ae      	adds	r2, #174	; 0xae
 80071e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	4798      	blx	r3
 80071f2:	4603      	mov	r3, r0
 80071f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80071f6:	e156      	b.n	80074a6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	785b      	ldrb	r3, [r3, #1]
 80071fc:	2b03      	cmp	r3, #3
 80071fe:	d008      	beq.n	8007212 <USBD_StdEPReq+0x9a>
 8007200:	2b03      	cmp	r3, #3
 8007202:	f300 8145 	bgt.w	8007490 <USBD_StdEPReq+0x318>
 8007206:	2b00      	cmp	r3, #0
 8007208:	f000 809b 	beq.w	8007342 <USBD_StdEPReq+0x1ca>
 800720c:	2b01      	cmp	r3, #1
 800720e:	d03c      	beq.n	800728a <USBD_StdEPReq+0x112>
 8007210:	e13e      	b.n	8007490 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b02      	cmp	r3, #2
 800721c:	d002      	beq.n	8007224 <USBD_StdEPReq+0xac>
 800721e:	2b03      	cmp	r3, #3
 8007220:	d016      	beq.n	8007250 <USBD_StdEPReq+0xd8>
 8007222:	e02c      	b.n	800727e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007224:	7bbb      	ldrb	r3, [r7, #14]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00d      	beq.n	8007246 <USBD_StdEPReq+0xce>
 800722a:	7bbb      	ldrb	r3, [r7, #14]
 800722c:	2b80      	cmp	r3, #128	; 0x80
 800722e:	d00a      	beq.n	8007246 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007230:	7bbb      	ldrb	r3, [r7, #14]
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f001 f97b 	bl	8008530 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800723a:	2180      	movs	r1, #128	; 0x80
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f001 f977 	bl	8008530 <USBD_LL_StallEP>
 8007242:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007244:	e020      	b.n	8007288 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fc7a 	bl	8007b42 <USBD_CtlError>
              break;
 800724e:	e01b      	b.n	8007288 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	885b      	ldrh	r3, [r3, #2]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10e      	bne.n	8007276 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007258:	7bbb      	ldrb	r3, [r7, #14]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00b      	beq.n	8007276 <USBD_StdEPReq+0xfe>
 800725e:	7bbb      	ldrb	r3, [r7, #14]
 8007260:	2b80      	cmp	r3, #128	; 0x80
 8007262:	d008      	beq.n	8007276 <USBD_StdEPReq+0xfe>
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	88db      	ldrh	r3, [r3, #6]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d104      	bne.n	8007276 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800726c:	7bbb      	ldrb	r3, [r7, #14]
 800726e:	4619      	mov	r1, r3
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f001 f95d 	bl	8008530 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fd2e 	bl	8007cd8 <USBD_CtlSendStatus>

              break;
 800727c:	e004      	b.n	8007288 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fc5e 	bl	8007b42 <USBD_CtlError>
              break;
 8007286:	bf00      	nop
          }
          break;
 8007288:	e107      	b.n	800749a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b02      	cmp	r3, #2
 8007294:	d002      	beq.n	800729c <USBD_StdEPReq+0x124>
 8007296:	2b03      	cmp	r3, #3
 8007298:	d016      	beq.n	80072c8 <USBD_StdEPReq+0x150>
 800729a:	e04b      	b.n	8007334 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800729c:	7bbb      	ldrb	r3, [r7, #14]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00d      	beq.n	80072be <USBD_StdEPReq+0x146>
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
 80072a4:	2b80      	cmp	r3, #128	; 0x80
 80072a6:	d00a      	beq.n	80072be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072a8:	7bbb      	ldrb	r3, [r7, #14]
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f001 f93f 	bl	8008530 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072b2:	2180      	movs	r1, #128	; 0x80
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f001 f93b 	bl	8008530 <USBD_LL_StallEP>
 80072ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072bc:	e040      	b.n	8007340 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fc3e 	bl	8007b42 <USBD_CtlError>
              break;
 80072c6:	e03b      	b.n	8007340 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	885b      	ldrh	r3, [r3, #2]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d136      	bne.n	800733e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072d0:	7bbb      	ldrb	r3, [r7, #14]
 80072d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d004      	beq.n	80072e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80072da:	7bbb      	ldrb	r3, [r7, #14]
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f001 f945 	bl	800856e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fcf7 	bl	8007cd8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80072ea:	7bbb      	ldrb	r3, [r7, #14]
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7ff fde2 	bl	8006eb8 <USBD_CoreFindEP>
 80072f4:	4603      	mov	r3, r0
 80072f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072f8:	7b7b      	ldrb	r3, [r7, #13]
 80072fa:	2bff      	cmp	r3, #255	; 0xff
 80072fc:	d01f      	beq.n	800733e <USBD_StdEPReq+0x1c6>
 80072fe:	7b7b      	ldrb	r3, [r7, #13]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d11c      	bne.n	800733e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007304:	7b7a      	ldrb	r2, [r7, #13]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800730c:	7b7a      	ldrb	r2, [r7, #13]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	32ae      	adds	r2, #174	; 0xae
 8007312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d010      	beq.n	800733e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800731c:	7b7a      	ldrb	r2, [r7, #13]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	32ae      	adds	r2, #174	; 0xae
 8007322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	6839      	ldr	r1, [r7, #0]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	4798      	blx	r3
 800732e:	4603      	mov	r3, r0
 8007330:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007332:	e004      	b.n	800733e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fc03 	bl	8007b42 <USBD_CtlError>
              break;
 800733c:	e000      	b.n	8007340 <USBD_StdEPReq+0x1c8>
              break;
 800733e:	bf00      	nop
          }
          break;
 8007340:	e0ab      	b.n	800749a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b02      	cmp	r3, #2
 800734c:	d002      	beq.n	8007354 <USBD_StdEPReq+0x1dc>
 800734e:	2b03      	cmp	r3, #3
 8007350:	d032      	beq.n	80073b8 <USBD_StdEPReq+0x240>
 8007352:	e097      	b.n	8007484 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007354:	7bbb      	ldrb	r3, [r7, #14]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d007      	beq.n	800736a <USBD_StdEPReq+0x1f2>
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	2b80      	cmp	r3, #128	; 0x80
 800735e:	d004      	beq.n	800736a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007360:	6839      	ldr	r1, [r7, #0]
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fbed 	bl	8007b42 <USBD_CtlError>
                break;
 8007368:	e091      	b.n	800748e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800736a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800736e:	2b00      	cmp	r3, #0
 8007370:	da0b      	bge.n	800738a <USBD_StdEPReq+0x212>
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007378:	4613      	mov	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	3310      	adds	r3, #16
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	4413      	add	r3, r2
 8007386:	3304      	adds	r3, #4
 8007388:	e00b      	b.n	80073a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800738a:	7bbb      	ldrb	r3, [r7, #14]
 800738c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007390:	4613      	mov	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	4413      	add	r3, r2
 80073a0:	3304      	adds	r3, #4
 80073a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	2200      	movs	r2, #0
 80073a8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	2202      	movs	r2, #2
 80073ae:	4619      	mov	r1, r3
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fc37 	bl	8007c24 <USBD_CtlSendData>
              break;
 80073b6:	e06a      	b.n	800748e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	da11      	bge.n	80073e4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073c0:	7bbb      	ldrb	r3, [r7, #14]
 80073c2:	f003 020f 	and.w	r2, r3, #15
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	4613      	mov	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	440b      	add	r3, r1
 80073d2:	3324      	adds	r3, #36	; 0x24
 80073d4:	881b      	ldrh	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d117      	bne.n	800740a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fbb0 	bl	8007b42 <USBD_CtlError>
                  break;
 80073e2:	e054      	b.n	800748e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073e4:	7bbb      	ldrb	r3, [r7, #14]
 80073e6:	f003 020f 	and.w	r2, r3, #15
 80073ea:	6879      	ldr	r1, [r7, #4]
 80073ec:	4613      	mov	r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	440b      	add	r3, r1
 80073f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073fa:	881b      	ldrh	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d104      	bne.n	800740a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fb9d 	bl	8007b42 <USBD_CtlError>
                  break;
 8007408:	e041      	b.n	800748e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800740a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800740e:	2b00      	cmp	r3, #0
 8007410:	da0b      	bge.n	800742a <USBD_StdEPReq+0x2b2>
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007418:	4613      	mov	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	3310      	adds	r3, #16
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	4413      	add	r3, r2
 8007426:	3304      	adds	r3, #4
 8007428:	e00b      	b.n	8007442 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800742a:	7bbb      	ldrb	r3, [r7, #14]
 800742c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007430:	4613      	mov	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	4413      	add	r3, r2
 8007440:	3304      	adds	r3, #4
 8007442:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007444:	7bbb      	ldrb	r3, [r7, #14]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d002      	beq.n	8007450 <USBD_StdEPReq+0x2d8>
 800744a:	7bbb      	ldrb	r3, [r7, #14]
 800744c:	2b80      	cmp	r3, #128	; 0x80
 800744e:	d103      	bne.n	8007458 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2200      	movs	r2, #0
 8007454:	601a      	str	r2, [r3, #0]
 8007456:	e00e      	b.n	8007476 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007458:	7bbb      	ldrb	r3, [r7, #14]
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 f8a5 	bl	80085ac <USBD_LL_IsStallEP>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d003      	beq.n	8007470 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	2201      	movs	r2, #1
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	e002      	b.n	8007476 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2200      	movs	r2, #0
 8007474:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	2202      	movs	r2, #2
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fbd1 	bl	8007c24 <USBD_CtlSendData>
              break;
 8007482:	e004      	b.n	800748e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fb5b 	bl	8007b42 <USBD_CtlError>
              break;
 800748c:	bf00      	nop
          }
          break;
 800748e:	e004      	b.n	800749a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fb55 	bl	8007b42 <USBD_CtlError>
          break;
 8007498:	bf00      	nop
      }
      break;
 800749a:	e005      	b.n	80074a8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800749c:	6839      	ldr	r1, [r7, #0]
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fb4f 	bl	8007b42 <USBD_CtlError>
      break;
 80074a4:	e000      	b.n	80074a8 <USBD_StdEPReq+0x330>
      break;
 80074a6:	bf00      	nop
  }

  return ret;
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
	...

080074b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074be:	2300      	movs	r3, #0
 80074c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	885b      	ldrh	r3, [r3, #2]
 80074ce:	0a1b      	lsrs	r3, r3, #8
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	3b01      	subs	r3, #1
 80074d4:	2b06      	cmp	r3, #6
 80074d6:	f200 8128 	bhi.w	800772a <USBD_GetDescriptor+0x276>
 80074da:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <USBD_GetDescriptor+0x2c>)
 80074dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e0:	080074fd 	.word	0x080074fd
 80074e4:	08007515 	.word	0x08007515
 80074e8:	08007555 	.word	0x08007555
 80074ec:	0800772b 	.word	0x0800772b
 80074f0:	0800772b 	.word	0x0800772b
 80074f4:	080076cb 	.word	0x080076cb
 80074f8:	080076f7 	.word	0x080076f7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	7c12      	ldrb	r2, [r2, #16]
 8007508:	f107 0108 	add.w	r1, r7, #8
 800750c:	4610      	mov	r0, r2
 800750e:	4798      	blx	r3
 8007510:	60f8      	str	r0, [r7, #12]
      break;
 8007512:	e112      	b.n	800773a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	7c1b      	ldrb	r3, [r3, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10d      	bne.n	8007538 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007524:	f107 0208 	add.w	r2, r7, #8
 8007528:	4610      	mov	r0, r2
 800752a:	4798      	blx	r3
 800752c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	3301      	adds	r3, #1
 8007532:	2202      	movs	r2, #2
 8007534:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007536:	e100      	b.n	800773a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	f107 0208 	add.w	r2, r7, #8
 8007544:	4610      	mov	r0, r2
 8007546:	4798      	blx	r3
 8007548:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	3301      	adds	r3, #1
 800754e:	2202      	movs	r2, #2
 8007550:	701a      	strb	r2, [r3, #0]
      break;
 8007552:	e0f2      	b.n	800773a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	885b      	ldrh	r3, [r3, #2]
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b05      	cmp	r3, #5
 800755c:	f200 80ac 	bhi.w	80076b8 <USBD_GetDescriptor+0x204>
 8007560:	a201      	add	r2, pc, #4	; (adr r2, 8007568 <USBD_GetDescriptor+0xb4>)
 8007562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007566:	bf00      	nop
 8007568:	08007581 	.word	0x08007581
 800756c:	080075b5 	.word	0x080075b5
 8007570:	080075e9 	.word	0x080075e9
 8007574:	0800761d 	.word	0x0800761d
 8007578:	08007651 	.word	0x08007651
 800757c:	08007685 	.word	0x08007685
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00b      	beq.n	80075a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	7c12      	ldrb	r2, [r2, #16]
 8007598:	f107 0108 	add.w	r1, r7, #8
 800759c:	4610      	mov	r0, r2
 800759e:	4798      	blx	r3
 80075a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075a2:	e091      	b.n	80076c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 facb 	bl	8007b42 <USBD_CtlError>
            err++;
 80075ac:	7afb      	ldrb	r3, [r7, #11]
 80075ae:	3301      	adds	r3, #1
 80075b0:	72fb      	strb	r3, [r7, #11]
          break;
 80075b2:	e089      	b.n	80076c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00b      	beq.n	80075d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	7c12      	ldrb	r2, [r2, #16]
 80075cc:	f107 0108 	add.w	r1, r7, #8
 80075d0:	4610      	mov	r0, r2
 80075d2:	4798      	blx	r3
 80075d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075d6:	e077      	b.n	80076c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fab1 	bl	8007b42 <USBD_CtlError>
            err++;
 80075e0:	7afb      	ldrb	r3, [r7, #11]
 80075e2:	3301      	adds	r3, #1
 80075e4:	72fb      	strb	r3, [r7, #11]
          break;
 80075e6:	e06f      	b.n	80076c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00b      	beq.n	800760c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	7c12      	ldrb	r2, [r2, #16]
 8007600:	f107 0108 	add.w	r1, r7, #8
 8007604:	4610      	mov	r0, r2
 8007606:	4798      	blx	r3
 8007608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800760a:	e05d      	b.n	80076c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800760c:	6839      	ldr	r1, [r7, #0]
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fa97 	bl	8007b42 <USBD_CtlError>
            err++;
 8007614:	7afb      	ldrb	r3, [r7, #11]
 8007616:	3301      	adds	r3, #1
 8007618:	72fb      	strb	r3, [r7, #11]
          break;
 800761a:	e055      	b.n	80076c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00b      	beq.n	8007640 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	7c12      	ldrb	r2, [r2, #16]
 8007634:	f107 0108 	add.w	r1, r7, #8
 8007638:	4610      	mov	r0, r2
 800763a:	4798      	blx	r3
 800763c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800763e:	e043      	b.n	80076c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fa7d 	bl	8007b42 <USBD_CtlError>
            err++;
 8007648:	7afb      	ldrb	r3, [r7, #11]
 800764a:	3301      	adds	r3, #1
 800764c:	72fb      	strb	r3, [r7, #11]
          break;
 800764e:	e03b      	b.n	80076c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00b      	beq.n	8007674 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007662:	695b      	ldr	r3, [r3, #20]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	7c12      	ldrb	r2, [r2, #16]
 8007668:	f107 0108 	add.w	r1, r7, #8
 800766c:	4610      	mov	r0, r2
 800766e:	4798      	blx	r3
 8007670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007672:	e029      	b.n	80076c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fa63 	bl	8007b42 <USBD_CtlError>
            err++;
 800767c:	7afb      	ldrb	r3, [r7, #11]
 800767e:	3301      	adds	r3, #1
 8007680:	72fb      	strb	r3, [r7, #11]
          break;
 8007682:	e021      	b.n	80076c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00b      	beq.n	80076a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	7c12      	ldrb	r2, [r2, #16]
 800769c:	f107 0108 	add.w	r1, r7, #8
 80076a0:	4610      	mov	r0, r2
 80076a2:	4798      	blx	r3
 80076a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076a6:	e00f      	b.n	80076c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fa49 	bl	8007b42 <USBD_CtlError>
            err++;
 80076b0:	7afb      	ldrb	r3, [r7, #11]
 80076b2:	3301      	adds	r3, #1
 80076b4:	72fb      	strb	r3, [r7, #11]
          break;
 80076b6:	e007      	b.n	80076c8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fa41 	bl	8007b42 <USBD_CtlError>
          err++;
 80076c0:	7afb      	ldrb	r3, [r7, #11]
 80076c2:	3301      	adds	r3, #1
 80076c4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80076c6:	bf00      	nop
      }
      break;
 80076c8:	e037      	b.n	800773a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	7c1b      	ldrb	r3, [r3, #16]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d109      	bne.n	80076e6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076da:	f107 0208 	add.w	r2, r7, #8
 80076de:	4610      	mov	r0, r2
 80076e0:	4798      	blx	r3
 80076e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076e4:	e029      	b.n	800773a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fa2a 	bl	8007b42 <USBD_CtlError>
        err++;
 80076ee:	7afb      	ldrb	r3, [r7, #11]
 80076f0:	3301      	adds	r3, #1
 80076f2:	72fb      	strb	r3, [r7, #11]
      break;
 80076f4:	e021      	b.n	800773a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	7c1b      	ldrb	r3, [r3, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10d      	bne.n	800771a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007706:	f107 0208 	add.w	r2, r7, #8
 800770a:	4610      	mov	r0, r2
 800770c:	4798      	blx	r3
 800770e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	3301      	adds	r3, #1
 8007714:	2207      	movs	r2, #7
 8007716:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007718:	e00f      	b.n	800773a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fa10 	bl	8007b42 <USBD_CtlError>
        err++;
 8007722:	7afb      	ldrb	r3, [r7, #11]
 8007724:	3301      	adds	r3, #1
 8007726:	72fb      	strb	r3, [r7, #11]
      break;
 8007728:	e007      	b.n	800773a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fa08 	bl	8007b42 <USBD_CtlError>
      err++;
 8007732:	7afb      	ldrb	r3, [r7, #11]
 8007734:	3301      	adds	r3, #1
 8007736:	72fb      	strb	r3, [r7, #11]
      break;
 8007738:	bf00      	nop
  }

  if (err != 0U)
 800773a:	7afb      	ldrb	r3, [r7, #11]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d11e      	bne.n	800777e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	88db      	ldrh	r3, [r3, #6]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d016      	beq.n	8007776 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007748:	893b      	ldrh	r3, [r7, #8]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00e      	beq.n	800776c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	88da      	ldrh	r2, [r3, #6]
 8007752:	893b      	ldrh	r3, [r7, #8]
 8007754:	4293      	cmp	r3, r2
 8007756:	bf28      	it	cs
 8007758:	4613      	movcs	r3, r2
 800775a:	b29b      	uxth	r3, r3
 800775c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800775e:	893b      	ldrh	r3, [r7, #8]
 8007760:	461a      	mov	r2, r3
 8007762:	68f9      	ldr	r1, [r7, #12]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fa5d 	bl	8007c24 <USBD_CtlSendData>
 800776a:	e009      	b.n	8007780 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f9e7 	bl	8007b42 <USBD_CtlError>
 8007774:	e004      	b.n	8007780 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 faae 	bl	8007cd8 <USBD_CtlSendStatus>
 800777c:	e000      	b.n	8007780 <USBD_GetDescriptor+0x2cc>
    return;
 800777e:	bf00      	nop
  }
}
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop

08007788 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	889b      	ldrh	r3, [r3, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d131      	bne.n	80077fe <USBD_SetAddress+0x76>
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	88db      	ldrh	r3, [r3, #6]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d12d      	bne.n	80077fe <USBD_SetAddress+0x76>
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	885b      	ldrh	r3, [r3, #2]
 80077a6:	2b7f      	cmp	r3, #127	; 0x7f
 80077a8:	d829      	bhi.n	80077fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	885b      	ldrh	r3, [r3, #2]
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d104      	bne.n	80077cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80077c2:	6839      	ldr	r1, [r7, #0]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f9bc 	bl	8007b42 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ca:	e01d      	b.n	8007808 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	7bfa      	ldrb	r2, [r7, #15]
 80077d0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	4619      	mov	r1, r3
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 ff13 	bl	8008604 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fa7a 	bl	8007cd8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d004      	beq.n	80077f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2202      	movs	r2, #2
 80077ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077f2:	e009      	b.n	8007808 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077fc:	e004      	b.n	8007808 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077fe:	6839      	ldr	r1, [r7, #0]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f99e 	bl	8007b42 <USBD_CtlError>
  }
}
 8007806:	bf00      	nop
 8007808:	bf00      	nop
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800781a:	2300      	movs	r3, #0
 800781c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	885b      	ldrh	r3, [r3, #2]
 8007822:	b2da      	uxtb	r2, r3
 8007824:	4b4e      	ldr	r3, [pc, #312]	; (8007960 <USBD_SetConfig+0x150>)
 8007826:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007828:	4b4d      	ldr	r3, [pc, #308]	; (8007960 <USBD_SetConfig+0x150>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d905      	bls.n	800783c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f985 	bl	8007b42 <USBD_CtlError>
    return USBD_FAIL;
 8007838:	2303      	movs	r3, #3
 800783a:	e08c      	b.n	8007956 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b02      	cmp	r3, #2
 8007846:	d002      	beq.n	800784e <USBD_SetConfig+0x3e>
 8007848:	2b03      	cmp	r3, #3
 800784a:	d029      	beq.n	80078a0 <USBD_SetConfig+0x90>
 800784c:	e075      	b.n	800793a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800784e:	4b44      	ldr	r3, [pc, #272]	; (8007960 <USBD_SetConfig+0x150>)
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d020      	beq.n	8007898 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007856:	4b42      	ldr	r3, [pc, #264]	; (8007960 <USBD_SetConfig+0x150>)
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	461a      	mov	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007860:	4b3f      	ldr	r3, [pc, #252]	; (8007960 <USBD_SetConfig+0x150>)
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7fe ffe7 	bl	800683a <USBD_SetClassConfig>
 800786c:	4603      	mov	r3, r0
 800786e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007870:	7bfb      	ldrb	r3, [r7, #15]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d008      	beq.n	8007888 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f962 	bl	8007b42 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2202      	movs	r2, #2
 8007882:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007886:	e065      	b.n	8007954 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fa25 	bl	8007cd8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2203      	movs	r2, #3
 8007892:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007896:	e05d      	b.n	8007954 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fa1d 	bl	8007cd8 <USBD_CtlSendStatus>
      break;
 800789e:	e059      	b.n	8007954 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80078a0:	4b2f      	ldr	r3, [pc, #188]	; (8007960 <USBD_SetConfig+0x150>)
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d112      	bne.n	80078ce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2202      	movs	r2, #2
 80078ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80078b0:	4b2b      	ldr	r3, [pc, #172]	; (8007960 <USBD_SetConfig+0x150>)
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	461a      	mov	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078ba:	4b29      	ldr	r3, [pc, #164]	; (8007960 <USBD_SetConfig+0x150>)
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	4619      	mov	r1, r3
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7fe ffd6 	bl	8006872 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fa06 	bl	8007cd8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078cc:	e042      	b.n	8007954 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80078ce:	4b24      	ldr	r3, [pc, #144]	; (8007960 <USBD_SetConfig+0x150>)
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	461a      	mov	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d02a      	beq.n	8007932 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7fe ffc4 	bl	8006872 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80078ea:	4b1d      	ldr	r3, [pc, #116]	; (8007960 <USBD_SetConfig+0x150>)
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	461a      	mov	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80078f4:	4b1a      	ldr	r3, [pc, #104]	; (8007960 <USBD_SetConfig+0x150>)
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	4619      	mov	r1, r3
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7fe ff9d 	bl	800683a <USBD_SetClassConfig>
 8007900:	4603      	mov	r3, r0
 8007902:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007904:	7bfb      	ldrb	r3, [r7, #15]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00f      	beq.n	800792a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f918 	bl	8007b42 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	b2db      	uxtb	r3, r3
 8007918:	4619      	mov	r1, r3
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7fe ffa9 	bl	8006872 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2202      	movs	r2, #2
 8007924:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007928:	e014      	b.n	8007954 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f9d4 	bl	8007cd8 <USBD_CtlSendStatus>
      break;
 8007930:	e010      	b.n	8007954 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f9d0 	bl	8007cd8 <USBD_CtlSendStatus>
      break;
 8007938:	e00c      	b.n	8007954 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 f900 	bl	8007b42 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007942:	4b07      	ldr	r3, [pc, #28]	; (8007960 <USBD_SetConfig+0x150>)
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	4619      	mov	r1, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7fe ff92 	bl	8006872 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800794e:	2303      	movs	r3, #3
 8007950:	73fb      	strb	r3, [r7, #15]
      break;
 8007952:	bf00      	nop
  }

  return ret;
 8007954:	7bfb      	ldrb	r3, [r7, #15]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	20000270 	.word	0x20000270

08007964 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	88db      	ldrh	r3, [r3, #6]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d004      	beq.n	8007980 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007976:	6839      	ldr	r1, [r7, #0]
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f8e2 	bl	8007b42 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800797e:	e023      	b.n	80079c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b02      	cmp	r3, #2
 800798a:	dc02      	bgt.n	8007992 <USBD_GetConfig+0x2e>
 800798c:	2b00      	cmp	r3, #0
 800798e:	dc03      	bgt.n	8007998 <USBD_GetConfig+0x34>
 8007990:	e015      	b.n	80079be <USBD_GetConfig+0x5a>
 8007992:	2b03      	cmp	r3, #3
 8007994:	d00b      	beq.n	80079ae <USBD_GetConfig+0x4a>
 8007996:	e012      	b.n	80079be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	3308      	adds	r3, #8
 80079a2:	2201      	movs	r2, #1
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f93c 	bl	8007c24 <USBD_CtlSendData>
        break;
 80079ac:	e00c      	b.n	80079c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	3304      	adds	r3, #4
 80079b2:	2201      	movs	r2, #1
 80079b4:	4619      	mov	r1, r3
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f934 	bl	8007c24 <USBD_CtlSendData>
        break;
 80079bc:	e004      	b.n	80079c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80079be:	6839      	ldr	r1, [r7, #0]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f8be 	bl	8007b42 <USBD_CtlError>
        break;
 80079c6:	bf00      	nop
}
 80079c8:	bf00      	nop
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	3b01      	subs	r3, #1
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d81e      	bhi.n	8007a26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	88db      	ldrh	r3, [r3, #6]
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d004      	beq.n	80079fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f8a5 	bl	8007b42 <USBD_CtlError>
        break;
 80079f8:	e01a      	b.n	8007a30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d005      	beq.n	8007a16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	f043 0202 	orr.w	r2, r3, #2
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	330c      	adds	r3, #12
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f900 	bl	8007c24 <USBD_CtlSendData>
      break;
 8007a24:	e004      	b.n	8007a30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f88a 	bl	8007b42 <USBD_CtlError>
      break;
 8007a2e:	bf00      	nop
  }
}
 8007a30:	bf00      	nop
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	885b      	ldrh	r3, [r3, #2]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d107      	bne.n	8007a5a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f940 	bl	8007cd8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007a58:	e013      	b.n	8007a82 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	885b      	ldrh	r3, [r3, #2]
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d10b      	bne.n	8007a7a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	889b      	ldrh	r3, [r3, #4]
 8007a66:	0a1b      	lsrs	r3, r3, #8
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f930 	bl	8007cd8 <USBD_CtlSendStatus>
}
 8007a78:	e003      	b.n	8007a82 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f860 	bl	8007b42 <USBD_CtlError>
}
 8007a82:	bf00      	nop
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b082      	sub	sp, #8
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d80b      	bhi.n	8007aba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	885b      	ldrh	r3, [r3, #2]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d10c      	bne.n	8007ac4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f910 	bl	8007cd8 <USBD_CtlSendStatus>
      }
      break;
 8007ab8:	e004      	b.n	8007ac4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f840 	bl	8007b42 <USBD_CtlError>
      break;
 8007ac2:	e000      	b.n	8007ac6 <USBD_ClrFeature+0x3c>
      break;
 8007ac4:	bf00      	nop
  }
}
 8007ac6:	bf00      	nop
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b084      	sub	sp, #16
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	781a      	ldrb	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	781a      	ldrb	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3301      	adds	r3, #1
 8007af6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f7ff fa41 	bl	8006f80 <SWAPBYTE>
 8007afe:	4603      	mov	r3, r0
 8007b00:	461a      	mov	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f7ff fa34 	bl	8006f80 <SWAPBYTE>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	3301      	adds	r3, #1
 8007b24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f7ff fa27 	bl	8006f80 <SWAPBYTE>
 8007b32:	4603      	mov	r3, r0
 8007b34:	461a      	mov	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	80da      	strh	r2, [r3, #6]
}
 8007b3a:	bf00      	nop
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b082      	sub	sp, #8
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b4c:	2180      	movs	r1, #128	; 0x80
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fcee 	bl	8008530 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b54:	2100      	movs	r1, #0
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fcea 	bl	8008530 <USBD_LL_StallEP>
}
 8007b5c:	bf00      	nop
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d036      	beq.n	8007be8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007b7e:	6938      	ldr	r0, [r7, #16]
 8007b80:	f000 f836 	bl	8007bf0 <USBD_GetLen>
 8007b84:	4603      	mov	r3, r0
 8007b86:	3301      	adds	r3, #1
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	005b      	lsls	r3, r3, #1
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007b92:	7dfb      	ldrb	r3, [r7, #23]
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	4413      	add	r3, r2
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	7812      	ldrb	r2, [r2, #0]
 8007b9c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ba4:	7dfb      	ldrb	r3, [r7, #23]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	4413      	add	r3, r2
 8007baa:	2203      	movs	r2, #3
 8007bac:	701a      	strb	r2, [r3, #0]
  idx++;
 8007bae:	7dfb      	ldrb	r3, [r7, #23]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007bb4:	e013      	b.n	8007bde <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	4413      	add	r3, r2
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	7812      	ldrb	r2, [r2, #0]
 8007bc0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	613b      	str	r3, [r7, #16]
    idx++;
 8007bc8:	7dfb      	ldrb	r3, [r7, #23]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007bce:	7dfb      	ldrb	r3, [r7, #23]
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	701a      	strb	r2, [r3, #0]
    idx++;
 8007bd8:	7dfb      	ldrb	r3, [r7, #23]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1e7      	bne.n	8007bb6 <USBD_GetString+0x52>
 8007be6:	e000      	b.n	8007bea <USBD_GetString+0x86>
    return;
 8007be8:	bf00      	nop
  }
}
 8007bea:	3718      	adds	r7, #24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007c00:	e005      	b.n	8007c0e <USBD_GetLen+0x1e>
  {
    len++;
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
 8007c04:	3301      	adds	r3, #1
 8007c06:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1f5      	bne.n	8007c02 <USBD_GetLen+0x12>
  }

  return len;
 8007c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3714      	adds	r7, #20
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2202      	movs	r2, #2
 8007c34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	2100      	movs	r1, #0
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f000 fcf9 	bl	8008642 <USBD_LL_Transmit>

  return USBD_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b084      	sub	sp, #16
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	60f8      	str	r0, [r7, #12]
 8007c62:	60b9      	str	r1, [r7, #8]
 8007c64:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	68ba      	ldr	r2, [r7, #8]
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f000 fce8 	bl	8008642 <USBD_LL_Transmit>

  return USBD_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2203      	movs	r2, #3
 8007c8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 fcec 	bl	8008684 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	60f8      	str	r0, [r7, #12]
 8007cbe:	60b9      	str	r1, [r7, #8]
 8007cc0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f000 fcdb 	bl	8008684 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2204      	movs	r2, #4
 8007ce4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ce8:	2300      	movs	r3, #0
 8007cea:	2200      	movs	r2, #0
 8007cec:	2100      	movs	r1, #0
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fca7 	bl	8008642 <USBD_LL_Transmit>

  return USBD_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b082      	sub	sp, #8
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2205      	movs	r2, #5
 8007d0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d0e:	2300      	movs	r3, #0
 8007d10:	2200      	movs	r2, #0
 8007d12:	2100      	movs	r1, #0
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fcb5 	bl	8008684 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	4912      	ldr	r1, [pc, #72]	; (8007d74 <MX_USB_DEVICE_Init+0x50>)
 8007d2c:	4812      	ldr	r0, [pc, #72]	; (8007d78 <MX_USB_DEVICE_Init+0x54>)
 8007d2e:	f7fe fd07 	bl	8006740 <USBD_Init>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d38:	f7f8 ff6a 	bl	8000c10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007d3c:	490f      	ldr	r1, [pc, #60]	; (8007d7c <MX_USB_DEVICE_Init+0x58>)
 8007d3e:	480e      	ldr	r0, [pc, #56]	; (8007d78 <MX_USB_DEVICE_Init+0x54>)
 8007d40:	f7fe fd2e 	bl	80067a0 <USBD_RegisterClass>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d4a:	f7f8 ff61 	bl	8000c10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007d4e:	490c      	ldr	r1, [pc, #48]	; (8007d80 <MX_USB_DEVICE_Init+0x5c>)
 8007d50:	4809      	ldr	r0, [pc, #36]	; (8007d78 <MX_USB_DEVICE_Init+0x54>)
 8007d52:	f7fe fc1f 	bl	8006594 <USBD_CDC_RegisterInterface>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d5c:	f7f8 ff58 	bl	8000c10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d60:	4805      	ldr	r0, [pc, #20]	; (8007d78 <MX_USB_DEVICE_Init+0x54>)
 8007d62:	f7fe fd53 	bl	800680c <USBD_Start>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d001      	beq.n	8007d70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007d6c:	f7f8 ff50 	bl	8000c10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d70:	bf00      	nop
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	200000ac 	.word	0x200000ac
 8007d78:	20000274 	.word	0x20000274
 8007d7c:	20000018 	.word	0x20000018
 8007d80:	20000098 	.word	0x20000098

08007d84 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007d88:	2200      	movs	r2, #0
 8007d8a:	4905      	ldr	r1, [pc, #20]	; (8007da0 <CDC_Init_FS+0x1c>)
 8007d8c:	4805      	ldr	r0, [pc, #20]	; (8007da4 <CDC_Init_FS+0x20>)
 8007d8e:	f7fe fc1b 	bl	80065c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007d92:	4905      	ldr	r1, [pc, #20]	; (8007da8 <CDC_Init_FS+0x24>)
 8007d94:	4803      	ldr	r0, [pc, #12]	; (8007da4 <CDC_Init_FS+0x20>)
 8007d96:	f7fe fc39 	bl	800660c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007d9a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	20000d50 	.word	0x20000d50
 8007da4:	20000274 	.word	0x20000274
 8007da8:	20000550 	.word	0x20000550

08007dac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007dac:	b480      	push	{r7}
 8007dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007db0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	6039      	str	r1, [r7, #0]
 8007dc6:	71fb      	strb	r3, [r7, #7]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007dcc:	79fb      	ldrb	r3, [r7, #7]
 8007dce:	2b23      	cmp	r3, #35	; 0x23
 8007dd0:	d84a      	bhi.n	8007e68 <CDC_Control_FS+0xac>
 8007dd2:	a201      	add	r2, pc, #4	; (adr r2, 8007dd8 <CDC_Control_FS+0x1c>)
 8007dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd8:	08007e69 	.word	0x08007e69
 8007ddc:	08007e69 	.word	0x08007e69
 8007de0:	08007e69 	.word	0x08007e69
 8007de4:	08007e69 	.word	0x08007e69
 8007de8:	08007e69 	.word	0x08007e69
 8007dec:	08007e69 	.word	0x08007e69
 8007df0:	08007e69 	.word	0x08007e69
 8007df4:	08007e69 	.word	0x08007e69
 8007df8:	08007e69 	.word	0x08007e69
 8007dfc:	08007e69 	.word	0x08007e69
 8007e00:	08007e69 	.word	0x08007e69
 8007e04:	08007e69 	.word	0x08007e69
 8007e08:	08007e69 	.word	0x08007e69
 8007e0c:	08007e69 	.word	0x08007e69
 8007e10:	08007e69 	.word	0x08007e69
 8007e14:	08007e69 	.word	0x08007e69
 8007e18:	08007e69 	.word	0x08007e69
 8007e1c:	08007e69 	.word	0x08007e69
 8007e20:	08007e69 	.word	0x08007e69
 8007e24:	08007e69 	.word	0x08007e69
 8007e28:	08007e69 	.word	0x08007e69
 8007e2c:	08007e69 	.word	0x08007e69
 8007e30:	08007e69 	.word	0x08007e69
 8007e34:	08007e69 	.word	0x08007e69
 8007e38:	08007e69 	.word	0x08007e69
 8007e3c:	08007e69 	.word	0x08007e69
 8007e40:	08007e69 	.word	0x08007e69
 8007e44:	08007e69 	.word	0x08007e69
 8007e48:	08007e69 	.word	0x08007e69
 8007e4c:	08007e69 	.word	0x08007e69
 8007e50:	08007e69 	.word	0x08007e69
 8007e54:	08007e69 	.word	0x08007e69
 8007e58:	08007e69 	.word	0x08007e69
 8007e5c:	08007e69 	.word	0x08007e69
 8007e60:	08007e69 	.word	0x08007e69
 8007e64:	08007e69 	.word	0x08007e69
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007e68:	bf00      	nop
  }

  return (USBD_OK);
 8007e6a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007e82:	6879      	ldr	r1, [r7, #4]
 8007e84:	4805      	ldr	r0, [pc, #20]	; (8007e9c <CDC_Receive_FS+0x24>)
 8007e86:	f7fe fbc1 	bl	800660c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007e8a:	4804      	ldr	r0, [pc, #16]	; (8007e9c <CDC_Receive_FS+0x24>)
 8007e8c:	f7fe fc22 	bl	80066d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007e90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	20000274 	.word	0x20000274

08007ea0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007eb0:	4b0d      	ldr	r3, [pc, #52]	; (8007ee8 <CDC_Transmit_FS+0x48>)
 8007eb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eb6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d001      	beq.n	8007ec6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e00b      	b.n	8007ede <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007ec6:	887b      	ldrh	r3, [r7, #2]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	6879      	ldr	r1, [r7, #4]
 8007ecc:	4806      	ldr	r0, [pc, #24]	; (8007ee8 <CDC_Transmit_FS+0x48>)
 8007ece:	f7fe fb7b 	bl	80065c8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007ed2:	4805      	ldr	r0, [pc, #20]	; (8007ee8 <CDC_Transmit_FS+0x48>)
 8007ed4:	f7fe fbb8 	bl	8006648 <USBD_CDC_TransmitPacket>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	20000274 	.word	0x20000274

08007eec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b087      	sub	sp, #28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007efe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	371c      	adds	r7, #28
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
	...

08007f10 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	4603      	mov	r3, r0
 8007f18:	6039      	str	r1, [r7, #0]
 8007f1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	2212      	movs	r2, #18
 8007f20:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f22:	4b03      	ldr	r3, [pc, #12]	; (8007f30 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	200000c8 	.word	0x200000c8

08007f34 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	6039      	str	r1, [r7, #0]
 8007f3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	2204      	movs	r2, #4
 8007f44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f46:	4b03      	ldr	r3, [pc, #12]	; (8007f54 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr
 8007f54:	200000dc 	.word	0x200000dc

08007f58 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	4603      	mov	r3, r0
 8007f60:	6039      	str	r1, [r7, #0]
 8007f62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f64:	79fb      	ldrb	r3, [r7, #7]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d105      	bne.n	8007f76 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	4907      	ldr	r1, [pc, #28]	; (8007f8c <USBD_FS_ProductStrDescriptor+0x34>)
 8007f6e:	4808      	ldr	r0, [pc, #32]	; (8007f90 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f70:	f7ff fdf8 	bl	8007b64 <USBD_GetString>
 8007f74:	e004      	b.n	8007f80 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	4904      	ldr	r1, [pc, #16]	; (8007f8c <USBD_FS_ProductStrDescriptor+0x34>)
 8007f7a:	4805      	ldr	r0, [pc, #20]	; (8007f90 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f7c:	f7ff fdf2 	bl	8007b64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f80:	4b02      	ldr	r3, [pc, #8]	; (8007f8c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	20001550 	.word	0x20001550
 8007f90:	080096dc 	.word	0x080096dc

08007f94 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	6039      	str	r1, [r7, #0]
 8007f9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	4904      	ldr	r1, [pc, #16]	; (8007fb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007fa4:	4804      	ldr	r0, [pc, #16]	; (8007fb8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007fa6:	f7ff fddd 	bl	8007b64 <USBD_GetString>
  return USBD_StrDesc;
 8007faa:	4b02      	ldr	r3, [pc, #8]	; (8007fb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	20001550 	.word	0x20001550
 8007fb8:	080096f4 	.word	0x080096f4

08007fbc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	6039      	str	r1, [r7, #0]
 8007fc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	221a      	movs	r2, #26
 8007fcc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007fce:	f000 f843 	bl	8008058 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007fd2:	4b02      	ldr	r3, [pc, #8]	; (8007fdc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	200000e0 	.word	0x200000e0

08007fe0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	6039      	str	r1, [r7, #0]
 8007fea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007fec:	79fb      	ldrb	r3, [r7, #7]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d105      	bne.n	8007ffe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ff2:	683a      	ldr	r2, [r7, #0]
 8007ff4:	4907      	ldr	r1, [pc, #28]	; (8008014 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ff6:	4808      	ldr	r0, [pc, #32]	; (8008018 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ff8:	f7ff fdb4 	bl	8007b64 <USBD_GetString>
 8007ffc:	e004      	b.n	8008008 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	4904      	ldr	r1, [pc, #16]	; (8008014 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008002:	4805      	ldr	r0, [pc, #20]	; (8008018 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008004:	f7ff fdae 	bl	8007b64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008008:	4b02      	ldr	r3, [pc, #8]	; (8008014 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800800a:	4618      	mov	r0, r3
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	20001550 	.word	0x20001550
 8008018:	08009708 	.word	0x08009708

0800801c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	4603      	mov	r3, r0
 8008024:	6039      	str	r1, [r7, #0]
 8008026:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008028:	79fb      	ldrb	r3, [r7, #7]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d105      	bne.n	800803a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	4907      	ldr	r1, [pc, #28]	; (8008050 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008032:	4808      	ldr	r0, [pc, #32]	; (8008054 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008034:	f7ff fd96 	bl	8007b64 <USBD_GetString>
 8008038:	e004      	b.n	8008044 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	4904      	ldr	r1, [pc, #16]	; (8008050 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800803e:	4805      	ldr	r0, [pc, #20]	; (8008054 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008040:	f7ff fd90 	bl	8007b64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008044:	4b02      	ldr	r3, [pc, #8]	; (8008050 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	20001550 	.word	0x20001550
 8008054:	08009714 	.word	0x08009714

08008058 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800805e:	4b0f      	ldr	r3, [pc, #60]	; (800809c <Get_SerialNum+0x44>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008064:	4b0e      	ldr	r3, [pc, #56]	; (80080a0 <Get_SerialNum+0x48>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800806a:	4b0e      	ldr	r3, [pc, #56]	; (80080a4 <Get_SerialNum+0x4c>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4413      	add	r3, r2
 8008076:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d009      	beq.n	8008092 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800807e:	2208      	movs	r2, #8
 8008080:	4909      	ldr	r1, [pc, #36]	; (80080a8 <Get_SerialNum+0x50>)
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f000 f814 	bl	80080b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008088:	2204      	movs	r2, #4
 800808a:	4908      	ldr	r1, [pc, #32]	; (80080ac <Get_SerialNum+0x54>)
 800808c:	68b8      	ldr	r0, [r7, #8]
 800808e:	f000 f80f 	bl	80080b0 <IntToUnicode>
  }
}
 8008092:	bf00      	nop
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	1fff7a10 	.word	0x1fff7a10
 80080a0:	1fff7a14 	.word	0x1fff7a14
 80080a4:	1fff7a18 	.word	0x1fff7a18
 80080a8:	200000e2 	.word	0x200000e2
 80080ac:	200000f2 	.word	0x200000f2

080080b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b087      	sub	sp, #28
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	4613      	mov	r3, r2
 80080bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80080be:	2300      	movs	r3, #0
 80080c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80080c2:	2300      	movs	r3, #0
 80080c4:	75fb      	strb	r3, [r7, #23]
 80080c6:	e027      	b.n	8008118 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	0f1b      	lsrs	r3, r3, #28
 80080cc:	2b09      	cmp	r3, #9
 80080ce:	d80b      	bhi.n	80080e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	0f1b      	lsrs	r3, r3, #28
 80080d4:	b2da      	uxtb	r2, r3
 80080d6:	7dfb      	ldrb	r3, [r7, #23]
 80080d8:	005b      	lsls	r3, r3, #1
 80080da:	4619      	mov	r1, r3
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	440b      	add	r3, r1
 80080e0:	3230      	adds	r2, #48	; 0x30
 80080e2:	b2d2      	uxtb	r2, r2
 80080e4:	701a      	strb	r2, [r3, #0]
 80080e6:	e00a      	b.n	80080fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	0f1b      	lsrs	r3, r3, #28
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
 80080f0:	005b      	lsls	r3, r3, #1
 80080f2:	4619      	mov	r1, r3
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	440b      	add	r3, r1
 80080f8:	3237      	adds	r2, #55	; 0x37
 80080fa:	b2d2      	uxtb	r2, r2
 80080fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	011b      	lsls	r3, r3, #4
 8008102:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008104:	7dfb      	ldrb	r3, [r7, #23]
 8008106:	005b      	lsls	r3, r3, #1
 8008108:	3301      	adds	r3, #1
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	4413      	add	r3, r2
 800810e:	2200      	movs	r2, #0
 8008110:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	3301      	adds	r3, #1
 8008116:	75fb      	strb	r3, [r7, #23]
 8008118:	7dfa      	ldrb	r2, [r7, #23]
 800811a:	79fb      	ldrb	r3, [r7, #7]
 800811c:	429a      	cmp	r2, r3
 800811e:	d3d3      	bcc.n	80080c8 <IntToUnicode+0x18>
  }
}
 8008120:	bf00      	nop
 8008122:	bf00      	nop
 8008124:	371c      	adds	r7, #28
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
	...

08008130 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b08a      	sub	sp, #40	; 0x28
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008138:	f107 0314 	add.w	r3, r7, #20
 800813c:	2200      	movs	r2, #0
 800813e:	601a      	str	r2, [r3, #0]
 8008140:	605a      	str	r2, [r3, #4]
 8008142:	609a      	str	r2, [r3, #8]
 8008144:	60da      	str	r2, [r3, #12]
 8008146:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008150:	d147      	bne.n	80081e2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008152:	2300      	movs	r3, #0
 8008154:	613b      	str	r3, [r7, #16]
 8008156:	4b25      	ldr	r3, [pc, #148]	; (80081ec <HAL_PCD_MspInit+0xbc>)
 8008158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815a:	4a24      	ldr	r2, [pc, #144]	; (80081ec <HAL_PCD_MspInit+0xbc>)
 800815c:	f043 0301 	orr.w	r3, r3, #1
 8008160:	6313      	str	r3, [r2, #48]	; 0x30
 8008162:	4b22      	ldr	r3, [pc, #136]	; (80081ec <HAL_PCD_MspInit+0xbc>)
 8008164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008166:	f003 0301 	and.w	r3, r3, #1
 800816a:	613b      	str	r3, [r7, #16]
 800816c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800816e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008174:	2300      	movs	r3, #0
 8008176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008178:	2300      	movs	r3, #0
 800817a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800817c:	f107 0314 	add.w	r3, r7, #20
 8008180:	4619      	mov	r1, r3
 8008182:	481b      	ldr	r0, [pc, #108]	; (80081f0 <HAL_PCD_MspInit+0xc0>)
 8008184:	f7f9 f922 	bl	80013cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008188:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800818c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800818e:	2302      	movs	r3, #2
 8008190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008192:	2300      	movs	r3, #0
 8008194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008196:	2300      	movs	r3, #0
 8008198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800819a:	230a      	movs	r3, #10
 800819c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800819e:	f107 0314 	add.w	r3, r7, #20
 80081a2:	4619      	mov	r1, r3
 80081a4:	4812      	ldr	r0, [pc, #72]	; (80081f0 <HAL_PCD_MspInit+0xc0>)
 80081a6:	f7f9 f911 	bl	80013cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80081aa:	4b10      	ldr	r3, [pc, #64]	; (80081ec <HAL_PCD_MspInit+0xbc>)
 80081ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ae:	4a0f      	ldr	r2, [pc, #60]	; (80081ec <HAL_PCD_MspInit+0xbc>)
 80081b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081b4:	6353      	str	r3, [r2, #52]	; 0x34
 80081b6:	2300      	movs	r3, #0
 80081b8:	60fb      	str	r3, [r7, #12]
 80081ba:	4b0c      	ldr	r3, [pc, #48]	; (80081ec <HAL_PCD_MspInit+0xbc>)
 80081bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081be:	4a0b      	ldr	r2, [pc, #44]	; (80081ec <HAL_PCD_MspInit+0xbc>)
 80081c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80081c4:	6453      	str	r3, [r2, #68]	; 0x44
 80081c6:	4b09      	ldr	r3, [pc, #36]	; (80081ec <HAL_PCD_MspInit+0xbc>)
 80081c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081ce:	60fb      	str	r3, [r7, #12]
 80081d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80081d2:	2200      	movs	r2, #0
 80081d4:	2100      	movs	r1, #0
 80081d6:	2043      	movs	r0, #67	; 0x43
 80081d8:	f7f9 f8c1 	bl	800135e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80081dc:	2043      	movs	r0, #67	; 0x43
 80081de:	f7f9 f8da 	bl	8001396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80081e2:	bf00      	nop
 80081e4:	3728      	adds	r7, #40	; 0x28
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	40023800 	.word	0x40023800
 80081f0:	40020000 	.word	0x40020000

080081f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008208:	4619      	mov	r1, r3
 800820a:	4610      	mov	r0, r2
 800820c:	f7fe fb4b 	bl	80068a6 <USBD_LL_SetupStage>
}
 8008210:	bf00      	nop
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	460b      	mov	r3, r1
 8008222:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800822a:	78fa      	ldrb	r2, [r7, #3]
 800822c:	6879      	ldr	r1, [r7, #4]
 800822e:	4613      	mov	r3, r2
 8008230:	00db      	lsls	r3, r3, #3
 8008232:	4413      	add	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	440b      	add	r3, r1
 8008238:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	78fb      	ldrb	r3, [r7, #3]
 8008240:	4619      	mov	r1, r3
 8008242:	f7fe fb85 	bl	8006950 <USBD_LL_DataOutStage>
}
 8008246:	bf00      	nop
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b082      	sub	sp, #8
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	460b      	mov	r3, r1
 8008258:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008260:	78fa      	ldrb	r2, [r7, #3]
 8008262:	6879      	ldr	r1, [r7, #4]
 8008264:	4613      	mov	r3, r2
 8008266:	00db      	lsls	r3, r3, #3
 8008268:	4413      	add	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	440b      	add	r3, r1
 800826e:	334c      	adds	r3, #76	; 0x4c
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	78fb      	ldrb	r3, [r7, #3]
 8008274:	4619      	mov	r1, r3
 8008276:	f7fe fc1e 	bl	8006ab6 <USBD_LL_DataInStage>
}
 800827a:	bf00      	nop
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b082      	sub	sp, #8
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008290:	4618      	mov	r0, r3
 8008292:	f7fe fd52 	bl	8006d3a <USBD_LL_SOF>
}
 8008296:	bf00      	nop
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b084      	sub	sp, #16
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80082a6:	2301      	movs	r3, #1
 80082a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d102      	bne.n	80082b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80082b2:	2300      	movs	r3, #0
 80082b4:	73fb      	strb	r3, [r7, #15]
 80082b6:	e008      	b.n	80082ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d102      	bne.n	80082c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80082c0:	2301      	movs	r3, #1
 80082c2:	73fb      	strb	r3, [r7, #15]
 80082c4:	e001      	b.n	80082ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80082c6:	f7f8 fca3 	bl	8000c10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082d0:	7bfa      	ldrb	r2, [r7, #15]
 80082d2:	4611      	mov	r1, r2
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fe fcf2 	bl	8006cbe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fe fc9a 	bl	8006c1a <USBD_LL_Reset>
}
 80082e6:	bf00      	nop
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
	...

080082f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fe fced 	bl	8006cde <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	6812      	ldr	r2, [r2, #0]
 8008312:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008316:	f043 0301 	orr.w	r3, r3, #1
 800831a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a1b      	ldr	r3, [r3, #32]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d005      	beq.n	8008330 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008324:	4b04      	ldr	r3, [pc, #16]	; (8008338 <HAL_PCD_SuspendCallback+0x48>)
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	4a03      	ldr	r2, [pc, #12]	; (8008338 <HAL_PCD_SuspendCallback+0x48>)
 800832a:	f043 0306 	orr.w	r3, r3, #6
 800832e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008330:	bf00      	nop
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	e000ed00 	.word	0xe000ed00

0800833c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800834a:	4618      	mov	r0, r3
 800834c:	f7fe fcdd 	bl	8006d0a <USBD_LL_Resume>
}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	460b      	mov	r3, r1
 8008362:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800836a:	78fa      	ldrb	r2, [r7, #3]
 800836c:	4611      	mov	r1, r2
 800836e:	4618      	mov	r0, r3
 8008370:	f7fe fd35 	bl	8006dde <USBD_LL_IsoOUTIncomplete>
}
 8008374:	bf00      	nop
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	460b      	mov	r3, r1
 8008386:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800838e:	78fa      	ldrb	r2, [r7, #3]
 8008390:	4611      	mov	r1, r2
 8008392:	4618      	mov	r0, r3
 8008394:	f7fe fcf1 	bl	8006d7a <USBD_LL_IsoINIncomplete>
}
 8008398:	bf00      	nop
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fe fd47 	bl	8006e42 <USBD_LL_DevConnected>
}
 80083b4:	bf00      	nop
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fe fd44 	bl	8006e58 <USBD_LL_DevDisconnected>
}
 80083d0:	bf00      	nop
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d13c      	bne.n	8008462 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80083e8:	4a20      	ldr	r2, [pc, #128]	; (800846c <USBD_LL_Init+0x94>)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a1e      	ldr	r2, [pc, #120]	; (800846c <USBD_LL_Init+0x94>)
 80083f4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80083f8:	4b1c      	ldr	r3, [pc, #112]	; (800846c <USBD_LL_Init+0x94>)
 80083fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80083fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008400:	4b1a      	ldr	r3, [pc, #104]	; (800846c <USBD_LL_Init+0x94>)
 8008402:	2204      	movs	r2, #4
 8008404:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008406:	4b19      	ldr	r3, [pc, #100]	; (800846c <USBD_LL_Init+0x94>)
 8008408:	2202      	movs	r2, #2
 800840a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800840c:	4b17      	ldr	r3, [pc, #92]	; (800846c <USBD_LL_Init+0x94>)
 800840e:	2200      	movs	r2, #0
 8008410:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008412:	4b16      	ldr	r3, [pc, #88]	; (800846c <USBD_LL_Init+0x94>)
 8008414:	2202      	movs	r2, #2
 8008416:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008418:	4b14      	ldr	r3, [pc, #80]	; (800846c <USBD_LL_Init+0x94>)
 800841a:	2200      	movs	r2, #0
 800841c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800841e:	4b13      	ldr	r3, [pc, #76]	; (800846c <USBD_LL_Init+0x94>)
 8008420:	2200      	movs	r2, #0
 8008422:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008424:	4b11      	ldr	r3, [pc, #68]	; (800846c <USBD_LL_Init+0x94>)
 8008426:	2200      	movs	r2, #0
 8008428:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800842a:	4b10      	ldr	r3, [pc, #64]	; (800846c <USBD_LL_Init+0x94>)
 800842c:	2201      	movs	r2, #1
 800842e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008430:	4b0e      	ldr	r3, [pc, #56]	; (800846c <USBD_LL_Init+0x94>)
 8008432:	2200      	movs	r2, #0
 8008434:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008436:	480d      	ldr	r0, [pc, #52]	; (800846c <USBD_LL_Init+0x94>)
 8008438:	f7f9 ff94 	bl	8002364 <HAL_PCD_Init>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008442:	f7f8 fbe5 	bl	8000c10 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008446:	2180      	movs	r1, #128	; 0x80
 8008448:	4808      	ldr	r0, [pc, #32]	; (800846c <USBD_LL_Init+0x94>)
 800844a:	f7fb f9ec 	bl	8003826 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800844e:	2240      	movs	r2, #64	; 0x40
 8008450:	2100      	movs	r1, #0
 8008452:	4806      	ldr	r0, [pc, #24]	; (800846c <USBD_LL_Init+0x94>)
 8008454:	f7fb f9a0 	bl	8003798 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008458:	2280      	movs	r2, #128	; 0x80
 800845a:	2101      	movs	r1, #1
 800845c:	4803      	ldr	r0, [pc, #12]	; (800846c <USBD_LL_Init+0x94>)
 800845e:	f7fb f99b 	bl	8003798 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3708      	adds	r7, #8
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	20001750 	.word	0x20001750

08008470 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800847c:	2300      	movs	r3, #0
 800847e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008486:	4618      	mov	r0, r3
 8008488:	f7fa f889 	bl	800259e <HAL_PCD_Start>
 800848c:	4603      	mov	r3, r0
 800848e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008490:	7bfb      	ldrb	r3, [r7, #15]
 8008492:	4618      	mov	r0, r3
 8008494:	f000 f942 	bl	800871c <USBD_Get_USB_Status>
 8008498:	4603      	mov	r3, r0
 800849a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800849c:	7bbb      	ldrb	r3, [r7, #14]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	4608      	mov	r0, r1
 80084b0:	4611      	mov	r1, r2
 80084b2:	461a      	mov	r2, r3
 80084b4:	4603      	mov	r3, r0
 80084b6:	70fb      	strb	r3, [r7, #3]
 80084b8:	460b      	mov	r3, r1
 80084ba:	70bb      	strb	r3, [r7, #2]
 80084bc:	4613      	mov	r3, r2
 80084be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084c0:	2300      	movs	r3, #0
 80084c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80084ce:	78bb      	ldrb	r3, [r7, #2]
 80084d0:	883a      	ldrh	r2, [r7, #0]
 80084d2:	78f9      	ldrb	r1, [r7, #3]
 80084d4:	f7fa fd5a 	bl	8002f8c <HAL_PCD_EP_Open>
 80084d8:	4603      	mov	r3, r0
 80084da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 f91c 	bl	800871c <USBD_Get_USB_Status>
 80084e4:	4603      	mov	r3, r0
 80084e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	460b      	mov	r3, r1
 80084fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084fe:	2300      	movs	r3, #0
 8008500:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800850c:	78fa      	ldrb	r2, [r7, #3]
 800850e:	4611      	mov	r1, r2
 8008510:	4618      	mov	r0, r3
 8008512:	f7fa fda3 	bl	800305c <HAL_PCD_EP_Close>
 8008516:	4603      	mov	r3, r0
 8008518:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800851a:	7bfb      	ldrb	r3, [r7, #15]
 800851c:	4618      	mov	r0, r3
 800851e:	f000 f8fd 	bl	800871c <USBD_Get_USB_Status>
 8008522:	4603      	mov	r3, r0
 8008524:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008526:	7bbb      	ldrb	r3, [r7, #14]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800853c:	2300      	movs	r3, #0
 800853e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800854a:	78fa      	ldrb	r2, [r7, #3]
 800854c:	4611      	mov	r1, r2
 800854e:	4618      	mov	r0, r3
 8008550:	f7fa fe7b 	bl	800324a <HAL_PCD_EP_SetStall>
 8008554:	4603      	mov	r3, r0
 8008556:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008558:	7bfb      	ldrb	r3, [r7, #15]
 800855a:	4618      	mov	r0, r3
 800855c:	f000 f8de 	bl	800871c <USBD_Get_USB_Status>
 8008560:	4603      	mov	r3, r0
 8008562:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008564:	7bbb      	ldrb	r3, [r7, #14]
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b084      	sub	sp, #16
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	460b      	mov	r3, r1
 8008578:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800857a:	2300      	movs	r3, #0
 800857c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800857e:	2300      	movs	r3, #0
 8008580:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008588:	78fa      	ldrb	r2, [r7, #3]
 800858a:	4611      	mov	r1, r2
 800858c:	4618      	mov	r0, r3
 800858e:	f7fa fec0 	bl	8003312 <HAL_PCD_EP_ClrStall>
 8008592:	4603      	mov	r3, r0
 8008594:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008596:	7bfb      	ldrb	r3, [r7, #15]
 8008598:	4618      	mov	r0, r3
 800859a:	f000 f8bf 	bl	800871c <USBD_Get_USB_Status>
 800859e:	4603      	mov	r3, r0
 80085a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80085be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80085c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	da0b      	bge.n	80085e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80085c8:	78fb      	ldrb	r3, [r7, #3]
 80085ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085ce:	68f9      	ldr	r1, [r7, #12]
 80085d0:	4613      	mov	r3, r2
 80085d2:	00db      	lsls	r3, r3, #3
 80085d4:	4413      	add	r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	440b      	add	r3, r1
 80085da:	333e      	adds	r3, #62	; 0x3e
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	e00b      	b.n	80085f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80085e0:	78fb      	ldrb	r3, [r7, #3]
 80085e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085e6:	68f9      	ldr	r1, [r7, #12]
 80085e8:	4613      	mov	r3, r2
 80085ea:	00db      	lsls	r3, r3, #3
 80085ec:	4413      	add	r3, r2
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	440b      	add	r3, r1
 80085f2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80085f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3714      	adds	r7, #20
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	460b      	mov	r3, r1
 800860e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800861e:	78fa      	ldrb	r2, [r7, #3]
 8008620:	4611      	mov	r1, r2
 8008622:	4618      	mov	r0, r3
 8008624:	f7fa fc8d 	bl	8002f42 <HAL_PCD_SetAddress>
 8008628:	4603      	mov	r3, r0
 800862a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800862c:	7bfb      	ldrb	r3, [r7, #15]
 800862e:	4618      	mov	r0, r3
 8008630:	f000 f874 	bl	800871c <USBD_Get_USB_Status>
 8008634:	4603      	mov	r3, r0
 8008636:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008638:	7bbb      	ldrb	r3, [r7, #14]
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b086      	sub	sp, #24
 8008646:	af00      	add	r7, sp, #0
 8008648:	60f8      	str	r0, [r7, #12]
 800864a:	607a      	str	r2, [r7, #4]
 800864c:	603b      	str	r3, [r7, #0]
 800864e:	460b      	mov	r3, r1
 8008650:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008656:	2300      	movs	r3, #0
 8008658:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008660:	7af9      	ldrb	r1, [r7, #11]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	f7fa fda6 	bl	80031b6 <HAL_PCD_EP_Transmit>
 800866a:	4603      	mov	r3, r0
 800866c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800866e:	7dfb      	ldrb	r3, [r7, #23]
 8008670:	4618      	mov	r0, r3
 8008672:	f000 f853 	bl	800871c <USBD_Get_USB_Status>
 8008676:	4603      	mov	r3, r0
 8008678:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800867a:	7dbb      	ldrb	r3, [r7, #22]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3718      	adds	r7, #24
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	607a      	str	r2, [r7, #4]
 800868e:	603b      	str	r3, [r7, #0]
 8008690:	460b      	mov	r3, r1
 8008692:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80086a2:	7af9      	ldrb	r1, [r7, #11]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	f7fa fd22 	bl	80030f0 <HAL_PCD_EP_Receive>
 80086ac:	4603      	mov	r3, r0
 80086ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086b0:	7dfb      	ldrb	r3, [r7, #23]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 f832 	bl	800871c <USBD_Get_USB_Status>
 80086b8:	4603      	mov	r3, r0
 80086ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3718      	adds	r7, #24
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b082      	sub	sp, #8
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	460b      	mov	r3, r1
 80086d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086d8:	78fa      	ldrb	r2, [r7, #3]
 80086da:	4611      	mov	r1, r2
 80086dc:	4618      	mov	r0, r3
 80086de:	f7fa fd52 	bl	8003186 <HAL_PCD_EP_GetRxCount>
 80086e2:	4603      	mov	r3, r0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80086f4:	4b03      	ldr	r3, [pc, #12]	; (8008704 <USBD_static_malloc+0x18>)
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	370c      	adds	r7, #12
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	20001c5c 	.word	0x20001c5c

08008708 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]

}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	4603      	mov	r3, r0
 8008724:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800872a:	79fb      	ldrb	r3, [r7, #7]
 800872c:	2b03      	cmp	r3, #3
 800872e:	d817      	bhi.n	8008760 <USBD_Get_USB_Status+0x44>
 8008730:	a201      	add	r2, pc, #4	; (adr r2, 8008738 <USBD_Get_USB_Status+0x1c>)
 8008732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008736:	bf00      	nop
 8008738:	08008749 	.word	0x08008749
 800873c:	0800874f 	.word	0x0800874f
 8008740:	08008755 	.word	0x08008755
 8008744:	0800875b 	.word	0x0800875b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008748:	2300      	movs	r3, #0
 800874a:	73fb      	strb	r3, [r7, #15]
    break;
 800874c:	e00b      	b.n	8008766 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800874e:	2303      	movs	r3, #3
 8008750:	73fb      	strb	r3, [r7, #15]
    break;
 8008752:	e008      	b.n	8008766 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008754:	2301      	movs	r3, #1
 8008756:	73fb      	strb	r3, [r7, #15]
    break;
 8008758:	e005      	b.n	8008766 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800875a:	2303      	movs	r3, #3
 800875c:	73fb      	strb	r3, [r7, #15]
    break;
 800875e:	e002      	b.n	8008766 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008760:	2303      	movs	r3, #3
 8008762:	73fb      	strb	r3, [r7, #15]
    break;
 8008764:	bf00      	nop
  }
  return usb_status;
 8008766:	7bfb      	ldrb	r3, [r7, #15]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3714      	adds	r7, #20
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <std>:
 8008774:	2300      	movs	r3, #0
 8008776:	b510      	push	{r4, lr}
 8008778:	4604      	mov	r4, r0
 800877a:	e9c0 3300 	strd	r3, r3, [r0]
 800877e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008782:	6083      	str	r3, [r0, #8]
 8008784:	8181      	strh	r1, [r0, #12]
 8008786:	6643      	str	r3, [r0, #100]	; 0x64
 8008788:	81c2      	strh	r2, [r0, #14]
 800878a:	6183      	str	r3, [r0, #24]
 800878c:	4619      	mov	r1, r3
 800878e:	2208      	movs	r2, #8
 8008790:	305c      	adds	r0, #92	; 0x5c
 8008792:	f000 f8f4 	bl	800897e <memset>
 8008796:	4b05      	ldr	r3, [pc, #20]	; (80087ac <std+0x38>)
 8008798:	6263      	str	r3, [r4, #36]	; 0x24
 800879a:	4b05      	ldr	r3, [pc, #20]	; (80087b0 <std+0x3c>)
 800879c:	62a3      	str	r3, [r4, #40]	; 0x28
 800879e:	4b05      	ldr	r3, [pc, #20]	; (80087b4 <std+0x40>)
 80087a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087a2:	4b05      	ldr	r3, [pc, #20]	; (80087b8 <std+0x44>)
 80087a4:	6224      	str	r4, [r4, #32]
 80087a6:	6323      	str	r3, [r4, #48]	; 0x30
 80087a8:	bd10      	pop	{r4, pc}
 80087aa:	bf00      	nop
 80087ac:	080088f9 	.word	0x080088f9
 80087b0:	0800891b 	.word	0x0800891b
 80087b4:	08008953 	.word	0x08008953
 80087b8:	08008977 	.word	0x08008977

080087bc <stdio_exit_handler>:
 80087bc:	4a02      	ldr	r2, [pc, #8]	; (80087c8 <stdio_exit_handler+0xc>)
 80087be:	4903      	ldr	r1, [pc, #12]	; (80087cc <stdio_exit_handler+0x10>)
 80087c0:	4803      	ldr	r0, [pc, #12]	; (80087d0 <stdio_exit_handler+0x14>)
 80087c2:	f000 b869 	b.w	8008898 <_fwalk_sglue>
 80087c6:	bf00      	nop
 80087c8:	200000fc 	.word	0x200000fc
 80087cc:	08009319 	.word	0x08009319
 80087d0:	20000108 	.word	0x20000108

080087d4 <cleanup_stdio>:
 80087d4:	6841      	ldr	r1, [r0, #4]
 80087d6:	4b0c      	ldr	r3, [pc, #48]	; (8008808 <cleanup_stdio+0x34>)
 80087d8:	4299      	cmp	r1, r3
 80087da:	b510      	push	{r4, lr}
 80087dc:	4604      	mov	r4, r0
 80087de:	d001      	beq.n	80087e4 <cleanup_stdio+0x10>
 80087e0:	f000 fd9a 	bl	8009318 <_fflush_r>
 80087e4:	68a1      	ldr	r1, [r4, #8]
 80087e6:	4b09      	ldr	r3, [pc, #36]	; (800880c <cleanup_stdio+0x38>)
 80087e8:	4299      	cmp	r1, r3
 80087ea:	d002      	beq.n	80087f2 <cleanup_stdio+0x1e>
 80087ec:	4620      	mov	r0, r4
 80087ee:	f000 fd93 	bl	8009318 <_fflush_r>
 80087f2:	68e1      	ldr	r1, [r4, #12]
 80087f4:	4b06      	ldr	r3, [pc, #24]	; (8008810 <cleanup_stdio+0x3c>)
 80087f6:	4299      	cmp	r1, r3
 80087f8:	d004      	beq.n	8008804 <cleanup_stdio+0x30>
 80087fa:	4620      	mov	r0, r4
 80087fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008800:	f000 bd8a 	b.w	8009318 <_fflush_r>
 8008804:	bd10      	pop	{r4, pc}
 8008806:	bf00      	nop
 8008808:	20001e7c 	.word	0x20001e7c
 800880c:	20001ee4 	.word	0x20001ee4
 8008810:	20001f4c 	.word	0x20001f4c

08008814 <global_stdio_init.part.0>:
 8008814:	b510      	push	{r4, lr}
 8008816:	4b0b      	ldr	r3, [pc, #44]	; (8008844 <global_stdio_init.part.0+0x30>)
 8008818:	4c0b      	ldr	r4, [pc, #44]	; (8008848 <global_stdio_init.part.0+0x34>)
 800881a:	4a0c      	ldr	r2, [pc, #48]	; (800884c <global_stdio_init.part.0+0x38>)
 800881c:	601a      	str	r2, [r3, #0]
 800881e:	4620      	mov	r0, r4
 8008820:	2200      	movs	r2, #0
 8008822:	2104      	movs	r1, #4
 8008824:	f7ff ffa6 	bl	8008774 <std>
 8008828:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800882c:	2201      	movs	r2, #1
 800882e:	2109      	movs	r1, #9
 8008830:	f7ff ffa0 	bl	8008774 <std>
 8008834:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008838:	2202      	movs	r2, #2
 800883a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800883e:	2112      	movs	r1, #18
 8008840:	f7ff bf98 	b.w	8008774 <std>
 8008844:	20001fb4 	.word	0x20001fb4
 8008848:	20001e7c 	.word	0x20001e7c
 800884c:	080087bd 	.word	0x080087bd

08008850 <__sfp_lock_acquire>:
 8008850:	4801      	ldr	r0, [pc, #4]	; (8008858 <__sfp_lock_acquire+0x8>)
 8008852:	f000 b90d 	b.w	8008a70 <__retarget_lock_acquire_recursive>
 8008856:	bf00      	nop
 8008858:	20001fbd 	.word	0x20001fbd

0800885c <__sfp_lock_release>:
 800885c:	4801      	ldr	r0, [pc, #4]	; (8008864 <__sfp_lock_release+0x8>)
 800885e:	f000 b908 	b.w	8008a72 <__retarget_lock_release_recursive>
 8008862:	bf00      	nop
 8008864:	20001fbd 	.word	0x20001fbd

08008868 <__sinit>:
 8008868:	b510      	push	{r4, lr}
 800886a:	4604      	mov	r4, r0
 800886c:	f7ff fff0 	bl	8008850 <__sfp_lock_acquire>
 8008870:	6a23      	ldr	r3, [r4, #32]
 8008872:	b11b      	cbz	r3, 800887c <__sinit+0x14>
 8008874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008878:	f7ff bff0 	b.w	800885c <__sfp_lock_release>
 800887c:	4b04      	ldr	r3, [pc, #16]	; (8008890 <__sinit+0x28>)
 800887e:	6223      	str	r3, [r4, #32]
 8008880:	4b04      	ldr	r3, [pc, #16]	; (8008894 <__sinit+0x2c>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1f5      	bne.n	8008874 <__sinit+0xc>
 8008888:	f7ff ffc4 	bl	8008814 <global_stdio_init.part.0>
 800888c:	e7f2      	b.n	8008874 <__sinit+0xc>
 800888e:	bf00      	nop
 8008890:	080087d5 	.word	0x080087d5
 8008894:	20001fb4 	.word	0x20001fb4

08008898 <_fwalk_sglue>:
 8008898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800889c:	4607      	mov	r7, r0
 800889e:	4688      	mov	r8, r1
 80088a0:	4614      	mov	r4, r2
 80088a2:	2600      	movs	r6, #0
 80088a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088a8:	f1b9 0901 	subs.w	r9, r9, #1
 80088ac:	d505      	bpl.n	80088ba <_fwalk_sglue+0x22>
 80088ae:	6824      	ldr	r4, [r4, #0]
 80088b0:	2c00      	cmp	r4, #0
 80088b2:	d1f7      	bne.n	80088a4 <_fwalk_sglue+0xc>
 80088b4:	4630      	mov	r0, r6
 80088b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ba:	89ab      	ldrh	r3, [r5, #12]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d907      	bls.n	80088d0 <_fwalk_sglue+0x38>
 80088c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088c4:	3301      	adds	r3, #1
 80088c6:	d003      	beq.n	80088d0 <_fwalk_sglue+0x38>
 80088c8:	4629      	mov	r1, r5
 80088ca:	4638      	mov	r0, r7
 80088cc:	47c0      	blx	r8
 80088ce:	4306      	orrs	r6, r0
 80088d0:	3568      	adds	r5, #104	; 0x68
 80088d2:	e7e9      	b.n	80088a8 <_fwalk_sglue+0x10>

080088d4 <iprintf>:
 80088d4:	b40f      	push	{r0, r1, r2, r3}
 80088d6:	b507      	push	{r0, r1, r2, lr}
 80088d8:	4906      	ldr	r1, [pc, #24]	; (80088f4 <iprintf+0x20>)
 80088da:	ab04      	add	r3, sp, #16
 80088dc:	6808      	ldr	r0, [r1, #0]
 80088de:	f853 2b04 	ldr.w	r2, [r3], #4
 80088e2:	6881      	ldr	r1, [r0, #8]
 80088e4:	9301      	str	r3, [sp, #4]
 80088e6:	f000 f9e7 	bl	8008cb8 <_vfiprintf_r>
 80088ea:	b003      	add	sp, #12
 80088ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80088f0:	b004      	add	sp, #16
 80088f2:	4770      	bx	lr
 80088f4:	20000154 	.word	0x20000154

080088f8 <__sread>:
 80088f8:	b510      	push	{r4, lr}
 80088fa:	460c      	mov	r4, r1
 80088fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008900:	f000 f868 	bl	80089d4 <_read_r>
 8008904:	2800      	cmp	r0, #0
 8008906:	bfab      	itete	ge
 8008908:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800890a:	89a3      	ldrhlt	r3, [r4, #12]
 800890c:	181b      	addge	r3, r3, r0
 800890e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008912:	bfac      	ite	ge
 8008914:	6563      	strge	r3, [r4, #84]	; 0x54
 8008916:	81a3      	strhlt	r3, [r4, #12]
 8008918:	bd10      	pop	{r4, pc}

0800891a <__swrite>:
 800891a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800891e:	461f      	mov	r7, r3
 8008920:	898b      	ldrh	r3, [r1, #12]
 8008922:	05db      	lsls	r3, r3, #23
 8008924:	4605      	mov	r5, r0
 8008926:	460c      	mov	r4, r1
 8008928:	4616      	mov	r6, r2
 800892a:	d505      	bpl.n	8008938 <__swrite+0x1e>
 800892c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008930:	2302      	movs	r3, #2
 8008932:	2200      	movs	r2, #0
 8008934:	f000 f83c 	bl	80089b0 <_lseek_r>
 8008938:	89a3      	ldrh	r3, [r4, #12]
 800893a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800893e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008942:	81a3      	strh	r3, [r4, #12]
 8008944:	4632      	mov	r2, r6
 8008946:	463b      	mov	r3, r7
 8008948:	4628      	mov	r0, r5
 800894a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800894e:	f000 b853 	b.w	80089f8 <_write_r>

08008952 <__sseek>:
 8008952:	b510      	push	{r4, lr}
 8008954:	460c      	mov	r4, r1
 8008956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800895a:	f000 f829 	bl	80089b0 <_lseek_r>
 800895e:	1c43      	adds	r3, r0, #1
 8008960:	89a3      	ldrh	r3, [r4, #12]
 8008962:	bf15      	itete	ne
 8008964:	6560      	strne	r0, [r4, #84]	; 0x54
 8008966:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800896a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800896e:	81a3      	strheq	r3, [r4, #12]
 8008970:	bf18      	it	ne
 8008972:	81a3      	strhne	r3, [r4, #12]
 8008974:	bd10      	pop	{r4, pc}

08008976 <__sclose>:
 8008976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800897a:	f000 b809 	b.w	8008990 <_close_r>

0800897e <memset>:
 800897e:	4402      	add	r2, r0
 8008980:	4603      	mov	r3, r0
 8008982:	4293      	cmp	r3, r2
 8008984:	d100      	bne.n	8008988 <memset+0xa>
 8008986:	4770      	bx	lr
 8008988:	f803 1b01 	strb.w	r1, [r3], #1
 800898c:	e7f9      	b.n	8008982 <memset+0x4>
	...

08008990 <_close_r>:
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	4d06      	ldr	r5, [pc, #24]	; (80089ac <_close_r+0x1c>)
 8008994:	2300      	movs	r3, #0
 8008996:	4604      	mov	r4, r0
 8008998:	4608      	mov	r0, r1
 800899a:	602b      	str	r3, [r5, #0]
 800899c:	f7f8 fac7 	bl	8000f2e <_close>
 80089a0:	1c43      	adds	r3, r0, #1
 80089a2:	d102      	bne.n	80089aa <_close_r+0x1a>
 80089a4:	682b      	ldr	r3, [r5, #0]
 80089a6:	b103      	cbz	r3, 80089aa <_close_r+0x1a>
 80089a8:	6023      	str	r3, [r4, #0]
 80089aa:	bd38      	pop	{r3, r4, r5, pc}
 80089ac:	20001fb8 	.word	0x20001fb8

080089b0 <_lseek_r>:
 80089b0:	b538      	push	{r3, r4, r5, lr}
 80089b2:	4d07      	ldr	r5, [pc, #28]	; (80089d0 <_lseek_r+0x20>)
 80089b4:	4604      	mov	r4, r0
 80089b6:	4608      	mov	r0, r1
 80089b8:	4611      	mov	r1, r2
 80089ba:	2200      	movs	r2, #0
 80089bc:	602a      	str	r2, [r5, #0]
 80089be:	461a      	mov	r2, r3
 80089c0:	f7f8 fadc 	bl	8000f7c <_lseek>
 80089c4:	1c43      	adds	r3, r0, #1
 80089c6:	d102      	bne.n	80089ce <_lseek_r+0x1e>
 80089c8:	682b      	ldr	r3, [r5, #0]
 80089ca:	b103      	cbz	r3, 80089ce <_lseek_r+0x1e>
 80089cc:	6023      	str	r3, [r4, #0]
 80089ce:	bd38      	pop	{r3, r4, r5, pc}
 80089d0:	20001fb8 	.word	0x20001fb8

080089d4 <_read_r>:
 80089d4:	b538      	push	{r3, r4, r5, lr}
 80089d6:	4d07      	ldr	r5, [pc, #28]	; (80089f4 <_read_r+0x20>)
 80089d8:	4604      	mov	r4, r0
 80089da:	4608      	mov	r0, r1
 80089dc:	4611      	mov	r1, r2
 80089de:	2200      	movs	r2, #0
 80089e0:	602a      	str	r2, [r5, #0]
 80089e2:	461a      	mov	r2, r3
 80089e4:	f7f8 fa86 	bl	8000ef4 <_read>
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	d102      	bne.n	80089f2 <_read_r+0x1e>
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	b103      	cbz	r3, 80089f2 <_read_r+0x1e>
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	20001fb8 	.word	0x20001fb8

080089f8 <_write_r>:
 80089f8:	b538      	push	{r3, r4, r5, lr}
 80089fa:	4d07      	ldr	r5, [pc, #28]	; (8008a18 <_write_r+0x20>)
 80089fc:	4604      	mov	r4, r0
 80089fe:	4608      	mov	r0, r1
 8008a00:	4611      	mov	r1, r2
 8008a02:	2200      	movs	r2, #0
 8008a04:	602a      	str	r2, [r5, #0]
 8008a06:	461a      	mov	r2, r3
 8008a08:	f7f7 fdb0 	bl	800056c <_write>
 8008a0c:	1c43      	adds	r3, r0, #1
 8008a0e:	d102      	bne.n	8008a16 <_write_r+0x1e>
 8008a10:	682b      	ldr	r3, [r5, #0]
 8008a12:	b103      	cbz	r3, 8008a16 <_write_r+0x1e>
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	bd38      	pop	{r3, r4, r5, pc}
 8008a18:	20001fb8 	.word	0x20001fb8

08008a1c <__errno>:
 8008a1c:	4b01      	ldr	r3, [pc, #4]	; (8008a24 <__errno+0x8>)
 8008a1e:	6818      	ldr	r0, [r3, #0]
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	20000154 	.word	0x20000154

08008a28 <__libc_init_array>:
 8008a28:	b570      	push	{r4, r5, r6, lr}
 8008a2a:	4d0d      	ldr	r5, [pc, #52]	; (8008a60 <__libc_init_array+0x38>)
 8008a2c:	4c0d      	ldr	r4, [pc, #52]	; (8008a64 <__libc_init_array+0x3c>)
 8008a2e:	1b64      	subs	r4, r4, r5
 8008a30:	10a4      	asrs	r4, r4, #2
 8008a32:	2600      	movs	r6, #0
 8008a34:	42a6      	cmp	r6, r4
 8008a36:	d109      	bne.n	8008a4c <__libc_init_array+0x24>
 8008a38:	4d0b      	ldr	r5, [pc, #44]	; (8008a68 <__libc_init_array+0x40>)
 8008a3a:	4c0c      	ldr	r4, [pc, #48]	; (8008a6c <__libc_init_array+0x44>)
 8008a3c:	f000 fdbe 	bl	80095bc <_init>
 8008a40:	1b64      	subs	r4, r4, r5
 8008a42:	10a4      	asrs	r4, r4, #2
 8008a44:	2600      	movs	r6, #0
 8008a46:	42a6      	cmp	r6, r4
 8008a48:	d105      	bne.n	8008a56 <__libc_init_array+0x2e>
 8008a4a:	bd70      	pop	{r4, r5, r6, pc}
 8008a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a50:	4798      	blx	r3
 8008a52:	3601      	adds	r6, #1
 8008a54:	e7ee      	b.n	8008a34 <__libc_init_array+0xc>
 8008a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a5a:	4798      	blx	r3
 8008a5c:	3601      	adds	r6, #1
 8008a5e:	e7f2      	b.n	8008a46 <__libc_init_array+0x1e>
 8008a60:	08009778 	.word	0x08009778
 8008a64:	08009778 	.word	0x08009778
 8008a68:	08009778 	.word	0x08009778
 8008a6c:	0800977c 	.word	0x0800977c

08008a70 <__retarget_lock_acquire_recursive>:
 8008a70:	4770      	bx	lr

08008a72 <__retarget_lock_release_recursive>:
 8008a72:	4770      	bx	lr

08008a74 <_free_r>:
 8008a74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a76:	2900      	cmp	r1, #0
 8008a78:	d044      	beq.n	8008b04 <_free_r+0x90>
 8008a7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a7e:	9001      	str	r0, [sp, #4]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f1a1 0404 	sub.w	r4, r1, #4
 8008a86:	bfb8      	it	lt
 8008a88:	18e4      	addlt	r4, r4, r3
 8008a8a:	f000 f8df 	bl	8008c4c <__malloc_lock>
 8008a8e:	4a1e      	ldr	r2, [pc, #120]	; (8008b08 <_free_r+0x94>)
 8008a90:	9801      	ldr	r0, [sp, #4]
 8008a92:	6813      	ldr	r3, [r2, #0]
 8008a94:	b933      	cbnz	r3, 8008aa4 <_free_r+0x30>
 8008a96:	6063      	str	r3, [r4, #4]
 8008a98:	6014      	str	r4, [r2, #0]
 8008a9a:	b003      	add	sp, #12
 8008a9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008aa0:	f000 b8da 	b.w	8008c58 <__malloc_unlock>
 8008aa4:	42a3      	cmp	r3, r4
 8008aa6:	d908      	bls.n	8008aba <_free_r+0x46>
 8008aa8:	6825      	ldr	r5, [r4, #0]
 8008aaa:	1961      	adds	r1, r4, r5
 8008aac:	428b      	cmp	r3, r1
 8008aae:	bf01      	itttt	eq
 8008ab0:	6819      	ldreq	r1, [r3, #0]
 8008ab2:	685b      	ldreq	r3, [r3, #4]
 8008ab4:	1949      	addeq	r1, r1, r5
 8008ab6:	6021      	streq	r1, [r4, #0]
 8008ab8:	e7ed      	b.n	8008a96 <_free_r+0x22>
 8008aba:	461a      	mov	r2, r3
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	b10b      	cbz	r3, 8008ac4 <_free_r+0x50>
 8008ac0:	42a3      	cmp	r3, r4
 8008ac2:	d9fa      	bls.n	8008aba <_free_r+0x46>
 8008ac4:	6811      	ldr	r1, [r2, #0]
 8008ac6:	1855      	adds	r5, r2, r1
 8008ac8:	42a5      	cmp	r5, r4
 8008aca:	d10b      	bne.n	8008ae4 <_free_r+0x70>
 8008acc:	6824      	ldr	r4, [r4, #0]
 8008ace:	4421      	add	r1, r4
 8008ad0:	1854      	adds	r4, r2, r1
 8008ad2:	42a3      	cmp	r3, r4
 8008ad4:	6011      	str	r1, [r2, #0]
 8008ad6:	d1e0      	bne.n	8008a9a <_free_r+0x26>
 8008ad8:	681c      	ldr	r4, [r3, #0]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	6053      	str	r3, [r2, #4]
 8008ade:	440c      	add	r4, r1
 8008ae0:	6014      	str	r4, [r2, #0]
 8008ae2:	e7da      	b.n	8008a9a <_free_r+0x26>
 8008ae4:	d902      	bls.n	8008aec <_free_r+0x78>
 8008ae6:	230c      	movs	r3, #12
 8008ae8:	6003      	str	r3, [r0, #0]
 8008aea:	e7d6      	b.n	8008a9a <_free_r+0x26>
 8008aec:	6825      	ldr	r5, [r4, #0]
 8008aee:	1961      	adds	r1, r4, r5
 8008af0:	428b      	cmp	r3, r1
 8008af2:	bf04      	itt	eq
 8008af4:	6819      	ldreq	r1, [r3, #0]
 8008af6:	685b      	ldreq	r3, [r3, #4]
 8008af8:	6063      	str	r3, [r4, #4]
 8008afa:	bf04      	itt	eq
 8008afc:	1949      	addeq	r1, r1, r5
 8008afe:	6021      	streq	r1, [r4, #0]
 8008b00:	6054      	str	r4, [r2, #4]
 8008b02:	e7ca      	b.n	8008a9a <_free_r+0x26>
 8008b04:	b003      	add	sp, #12
 8008b06:	bd30      	pop	{r4, r5, pc}
 8008b08:	20001fc0 	.word	0x20001fc0

08008b0c <sbrk_aligned>:
 8008b0c:	b570      	push	{r4, r5, r6, lr}
 8008b0e:	4e0e      	ldr	r6, [pc, #56]	; (8008b48 <sbrk_aligned+0x3c>)
 8008b10:	460c      	mov	r4, r1
 8008b12:	6831      	ldr	r1, [r6, #0]
 8008b14:	4605      	mov	r5, r0
 8008b16:	b911      	cbnz	r1, 8008b1e <sbrk_aligned+0x12>
 8008b18:	f000 fcbc 	bl	8009494 <_sbrk_r>
 8008b1c:	6030      	str	r0, [r6, #0]
 8008b1e:	4621      	mov	r1, r4
 8008b20:	4628      	mov	r0, r5
 8008b22:	f000 fcb7 	bl	8009494 <_sbrk_r>
 8008b26:	1c43      	adds	r3, r0, #1
 8008b28:	d00a      	beq.n	8008b40 <sbrk_aligned+0x34>
 8008b2a:	1cc4      	adds	r4, r0, #3
 8008b2c:	f024 0403 	bic.w	r4, r4, #3
 8008b30:	42a0      	cmp	r0, r4
 8008b32:	d007      	beq.n	8008b44 <sbrk_aligned+0x38>
 8008b34:	1a21      	subs	r1, r4, r0
 8008b36:	4628      	mov	r0, r5
 8008b38:	f000 fcac 	bl	8009494 <_sbrk_r>
 8008b3c:	3001      	adds	r0, #1
 8008b3e:	d101      	bne.n	8008b44 <sbrk_aligned+0x38>
 8008b40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008b44:	4620      	mov	r0, r4
 8008b46:	bd70      	pop	{r4, r5, r6, pc}
 8008b48:	20001fc4 	.word	0x20001fc4

08008b4c <_malloc_r>:
 8008b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b50:	1ccd      	adds	r5, r1, #3
 8008b52:	f025 0503 	bic.w	r5, r5, #3
 8008b56:	3508      	adds	r5, #8
 8008b58:	2d0c      	cmp	r5, #12
 8008b5a:	bf38      	it	cc
 8008b5c:	250c      	movcc	r5, #12
 8008b5e:	2d00      	cmp	r5, #0
 8008b60:	4607      	mov	r7, r0
 8008b62:	db01      	blt.n	8008b68 <_malloc_r+0x1c>
 8008b64:	42a9      	cmp	r1, r5
 8008b66:	d905      	bls.n	8008b74 <_malloc_r+0x28>
 8008b68:	230c      	movs	r3, #12
 8008b6a:	603b      	str	r3, [r7, #0]
 8008b6c:	2600      	movs	r6, #0
 8008b6e:	4630      	mov	r0, r6
 8008b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008c48 <_malloc_r+0xfc>
 8008b78:	f000 f868 	bl	8008c4c <__malloc_lock>
 8008b7c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b80:	461c      	mov	r4, r3
 8008b82:	bb5c      	cbnz	r4, 8008bdc <_malloc_r+0x90>
 8008b84:	4629      	mov	r1, r5
 8008b86:	4638      	mov	r0, r7
 8008b88:	f7ff ffc0 	bl	8008b0c <sbrk_aligned>
 8008b8c:	1c43      	adds	r3, r0, #1
 8008b8e:	4604      	mov	r4, r0
 8008b90:	d155      	bne.n	8008c3e <_malloc_r+0xf2>
 8008b92:	f8d8 4000 	ldr.w	r4, [r8]
 8008b96:	4626      	mov	r6, r4
 8008b98:	2e00      	cmp	r6, #0
 8008b9a:	d145      	bne.n	8008c28 <_malloc_r+0xdc>
 8008b9c:	2c00      	cmp	r4, #0
 8008b9e:	d048      	beq.n	8008c32 <_malloc_r+0xe6>
 8008ba0:	6823      	ldr	r3, [r4, #0]
 8008ba2:	4631      	mov	r1, r6
 8008ba4:	4638      	mov	r0, r7
 8008ba6:	eb04 0903 	add.w	r9, r4, r3
 8008baa:	f000 fc73 	bl	8009494 <_sbrk_r>
 8008bae:	4581      	cmp	r9, r0
 8008bb0:	d13f      	bne.n	8008c32 <_malloc_r+0xe6>
 8008bb2:	6821      	ldr	r1, [r4, #0]
 8008bb4:	1a6d      	subs	r5, r5, r1
 8008bb6:	4629      	mov	r1, r5
 8008bb8:	4638      	mov	r0, r7
 8008bba:	f7ff ffa7 	bl	8008b0c <sbrk_aligned>
 8008bbe:	3001      	adds	r0, #1
 8008bc0:	d037      	beq.n	8008c32 <_malloc_r+0xe6>
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	442b      	add	r3, r5
 8008bc6:	6023      	str	r3, [r4, #0]
 8008bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d038      	beq.n	8008c42 <_malloc_r+0xf6>
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	42a2      	cmp	r2, r4
 8008bd4:	d12b      	bne.n	8008c2e <_malloc_r+0xe2>
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	605a      	str	r2, [r3, #4]
 8008bda:	e00f      	b.n	8008bfc <_malloc_r+0xb0>
 8008bdc:	6822      	ldr	r2, [r4, #0]
 8008bde:	1b52      	subs	r2, r2, r5
 8008be0:	d41f      	bmi.n	8008c22 <_malloc_r+0xd6>
 8008be2:	2a0b      	cmp	r2, #11
 8008be4:	d917      	bls.n	8008c16 <_malloc_r+0xca>
 8008be6:	1961      	adds	r1, r4, r5
 8008be8:	42a3      	cmp	r3, r4
 8008bea:	6025      	str	r5, [r4, #0]
 8008bec:	bf18      	it	ne
 8008bee:	6059      	strne	r1, [r3, #4]
 8008bf0:	6863      	ldr	r3, [r4, #4]
 8008bf2:	bf08      	it	eq
 8008bf4:	f8c8 1000 	streq.w	r1, [r8]
 8008bf8:	5162      	str	r2, [r4, r5]
 8008bfa:	604b      	str	r3, [r1, #4]
 8008bfc:	4638      	mov	r0, r7
 8008bfe:	f104 060b 	add.w	r6, r4, #11
 8008c02:	f000 f829 	bl	8008c58 <__malloc_unlock>
 8008c06:	f026 0607 	bic.w	r6, r6, #7
 8008c0a:	1d23      	adds	r3, r4, #4
 8008c0c:	1af2      	subs	r2, r6, r3
 8008c0e:	d0ae      	beq.n	8008b6e <_malloc_r+0x22>
 8008c10:	1b9b      	subs	r3, r3, r6
 8008c12:	50a3      	str	r3, [r4, r2]
 8008c14:	e7ab      	b.n	8008b6e <_malloc_r+0x22>
 8008c16:	42a3      	cmp	r3, r4
 8008c18:	6862      	ldr	r2, [r4, #4]
 8008c1a:	d1dd      	bne.n	8008bd8 <_malloc_r+0x8c>
 8008c1c:	f8c8 2000 	str.w	r2, [r8]
 8008c20:	e7ec      	b.n	8008bfc <_malloc_r+0xb0>
 8008c22:	4623      	mov	r3, r4
 8008c24:	6864      	ldr	r4, [r4, #4]
 8008c26:	e7ac      	b.n	8008b82 <_malloc_r+0x36>
 8008c28:	4634      	mov	r4, r6
 8008c2a:	6876      	ldr	r6, [r6, #4]
 8008c2c:	e7b4      	b.n	8008b98 <_malloc_r+0x4c>
 8008c2e:	4613      	mov	r3, r2
 8008c30:	e7cc      	b.n	8008bcc <_malloc_r+0x80>
 8008c32:	230c      	movs	r3, #12
 8008c34:	603b      	str	r3, [r7, #0]
 8008c36:	4638      	mov	r0, r7
 8008c38:	f000 f80e 	bl	8008c58 <__malloc_unlock>
 8008c3c:	e797      	b.n	8008b6e <_malloc_r+0x22>
 8008c3e:	6025      	str	r5, [r4, #0]
 8008c40:	e7dc      	b.n	8008bfc <_malloc_r+0xb0>
 8008c42:	605b      	str	r3, [r3, #4]
 8008c44:	deff      	udf	#255	; 0xff
 8008c46:	bf00      	nop
 8008c48:	20001fc0 	.word	0x20001fc0

08008c4c <__malloc_lock>:
 8008c4c:	4801      	ldr	r0, [pc, #4]	; (8008c54 <__malloc_lock+0x8>)
 8008c4e:	f7ff bf0f 	b.w	8008a70 <__retarget_lock_acquire_recursive>
 8008c52:	bf00      	nop
 8008c54:	20001fbc 	.word	0x20001fbc

08008c58 <__malloc_unlock>:
 8008c58:	4801      	ldr	r0, [pc, #4]	; (8008c60 <__malloc_unlock+0x8>)
 8008c5a:	f7ff bf0a 	b.w	8008a72 <__retarget_lock_release_recursive>
 8008c5e:	bf00      	nop
 8008c60:	20001fbc 	.word	0x20001fbc

08008c64 <__sfputc_r>:
 8008c64:	6893      	ldr	r3, [r2, #8]
 8008c66:	3b01      	subs	r3, #1
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	b410      	push	{r4}
 8008c6c:	6093      	str	r3, [r2, #8]
 8008c6e:	da08      	bge.n	8008c82 <__sfputc_r+0x1e>
 8008c70:	6994      	ldr	r4, [r2, #24]
 8008c72:	42a3      	cmp	r3, r4
 8008c74:	db01      	blt.n	8008c7a <__sfputc_r+0x16>
 8008c76:	290a      	cmp	r1, #10
 8008c78:	d103      	bne.n	8008c82 <__sfputc_r+0x1e>
 8008c7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c7e:	f000 bb73 	b.w	8009368 <__swbuf_r>
 8008c82:	6813      	ldr	r3, [r2, #0]
 8008c84:	1c58      	adds	r0, r3, #1
 8008c86:	6010      	str	r0, [r2, #0]
 8008c88:	7019      	strb	r1, [r3, #0]
 8008c8a:	4608      	mov	r0, r1
 8008c8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c90:	4770      	bx	lr

08008c92 <__sfputs_r>:
 8008c92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c94:	4606      	mov	r6, r0
 8008c96:	460f      	mov	r7, r1
 8008c98:	4614      	mov	r4, r2
 8008c9a:	18d5      	adds	r5, r2, r3
 8008c9c:	42ac      	cmp	r4, r5
 8008c9e:	d101      	bne.n	8008ca4 <__sfputs_r+0x12>
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	e007      	b.n	8008cb4 <__sfputs_r+0x22>
 8008ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ca8:	463a      	mov	r2, r7
 8008caa:	4630      	mov	r0, r6
 8008cac:	f7ff ffda 	bl	8008c64 <__sfputc_r>
 8008cb0:	1c43      	adds	r3, r0, #1
 8008cb2:	d1f3      	bne.n	8008c9c <__sfputs_r+0xa>
 8008cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008cb8 <_vfiprintf_r>:
 8008cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cbc:	460d      	mov	r5, r1
 8008cbe:	b09d      	sub	sp, #116	; 0x74
 8008cc0:	4614      	mov	r4, r2
 8008cc2:	4698      	mov	r8, r3
 8008cc4:	4606      	mov	r6, r0
 8008cc6:	b118      	cbz	r0, 8008cd0 <_vfiprintf_r+0x18>
 8008cc8:	6a03      	ldr	r3, [r0, #32]
 8008cca:	b90b      	cbnz	r3, 8008cd0 <_vfiprintf_r+0x18>
 8008ccc:	f7ff fdcc 	bl	8008868 <__sinit>
 8008cd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cd2:	07d9      	lsls	r1, r3, #31
 8008cd4:	d405      	bmi.n	8008ce2 <_vfiprintf_r+0x2a>
 8008cd6:	89ab      	ldrh	r3, [r5, #12]
 8008cd8:	059a      	lsls	r2, r3, #22
 8008cda:	d402      	bmi.n	8008ce2 <_vfiprintf_r+0x2a>
 8008cdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cde:	f7ff fec7 	bl	8008a70 <__retarget_lock_acquire_recursive>
 8008ce2:	89ab      	ldrh	r3, [r5, #12]
 8008ce4:	071b      	lsls	r3, r3, #28
 8008ce6:	d501      	bpl.n	8008cec <_vfiprintf_r+0x34>
 8008ce8:	692b      	ldr	r3, [r5, #16]
 8008cea:	b99b      	cbnz	r3, 8008d14 <_vfiprintf_r+0x5c>
 8008cec:	4629      	mov	r1, r5
 8008cee:	4630      	mov	r0, r6
 8008cf0:	f000 fb78 	bl	80093e4 <__swsetup_r>
 8008cf4:	b170      	cbz	r0, 8008d14 <_vfiprintf_r+0x5c>
 8008cf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cf8:	07dc      	lsls	r4, r3, #31
 8008cfa:	d504      	bpl.n	8008d06 <_vfiprintf_r+0x4e>
 8008cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d00:	b01d      	add	sp, #116	; 0x74
 8008d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d06:	89ab      	ldrh	r3, [r5, #12]
 8008d08:	0598      	lsls	r0, r3, #22
 8008d0a:	d4f7      	bmi.n	8008cfc <_vfiprintf_r+0x44>
 8008d0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d0e:	f7ff feb0 	bl	8008a72 <__retarget_lock_release_recursive>
 8008d12:	e7f3      	b.n	8008cfc <_vfiprintf_r+0x44>
 8008d14:	2300      	movs	r3, #0
 8008d16:	9309      	str	r3, [sp, #36]	; 0x24
 8008d18:	2320      	movs	r3, #32
 8008d1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d22:	2330      	movs	r3, #48	; 0x30
 8008d24:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008ed8 <_vfiprintf_r+0x220>
 8008d28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d2c:	f04f 0901 	mov.w	r9, #1
 8008d30:	4623      	mov	r3, r4
 8008d32:	469a      	mov	sl, r3
 8008d34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d38:	b10a      	cbz	r2, 8008d3e <_vfiprintf_r+0x86>
 8008d3a:	2a25      	cmp	r2, #37	; 0x25
 8008d3c:	d1f9      	bne.n	8008d32 <_vfiprintf_r+0x7a>
 8008d3e:	ebba 0b04 	subs.w	fp, sl, r4
 8008d42:	d00b      	beq.n	8008d5c <_vfiprintf_r+0xa4>
 8008d44:	465b      	mov	r3, fp
 8008d46:	4622      	mov	r2, r4
 8008d48:	4629      	mov	r1, r5
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	f7ff ffa1 	bl	8008c92 <__sfputs_r>
 8008d50:	3001      	adds	r0, #1
 8008d52:	f000 80a9 	beq.w	8008ea8 <_vfiprintf_r+0x1f0>
 8008d56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d58:	445a      	add	r2, fp
 8008d5a:	9209      	str	r2, [sp, #36]	; 0x24
 8008d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f000 80a1 	beq.w	8008ea8 <_vfiprintf_r+0x1f0>
 8008d66:	2300      	movs	r3, #0
 8008d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d70:	f10a 0a01 	add.w	sl, sl, #1
 8008d74:	9304      	str	r3, [sp, #16]
 8008d76:	9307      	str	r3, [sp, #28]
 8008d78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d7c:	931a      	str	r3, [sp, #104]	; 0x68
 8008d7e:	4654      	mov	r4, sl
 8008d80:	2205      	movs	r2, #5
 8008d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d86:	4854      	ldr	r0, [pc, #336]	; (8008ed8 <_vfiprintf_r+0x220>)
 8008d88:	f7f7 fa22 	bl	80001d0 <memchr>
 8008d8c:	9a04      	ldr	r2, [sp, #16]
 8008d8e:	b9d8      	cbnz	r0, 8008dc8 <_vfiprintf_r+0x110>
 8008d90:	06d1      	lsls	r1, r2, #27
 8008d92:	bf44      	itt	mi
 8008d94:	2320      	movmi	r3, #32
 8008d96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d9a:	0713      	lsls	r3, r2, #28
 8008d9c:	bf44      	itt	mi
 8008d9e:	232b      	movmi	r3, #43	; 0x2b
 8008da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008da4:	f89a 3000 	ldrb.w	r3, [sl]
 8008da8:	2b2a      	cmp	r3, #42	; 0x2a
 8008daa:	d015      	beq.n	8008dd8 <_vfiprintf_r+0x120>
 8008dac:	9a07      	ldr	r2, [sp, #28]
 8008dae:	4654      	mov	r4, sl
 8008db0:	2000      	movs	r0, #0
 8008db2:	f04f 0c0a 	mov.w	ip, #10
 8008db6:	4621      	mov	r1, r4
 8008db8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dbc:	3b30      	subs	r3, #48	; 0x30
 8008dbe:	2b09      	cmp	r3, #9
 8008dc0:	d94d      	bls.n	8008e5e <_vfiprintf_r+0x1a6>
 8008dc2:	b1b0      	cbz	r0, 8008df2 <_vfiprintf_r+0x13a>
 8008dc4:	9207      	str	r2, [sp, #28]
 8008dc6:	e014      	b.n	8008df2 <_vfiprintf_r+0x13a>
 8008dc8:	eba0 0308 	sub.w	r3, r0, r8
 8008dcc:	fa09 f303 	lsl.w	r3, r9, r3
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	9304      	str	r3, [sp, #16]
 8008dd4:	46a2      	mov	sl, r4
 8008dd6:	e7d2      	b.n	8008d7e <_vfiprintf_r+0xc6>
 8008dd8:	9b03      	ldr	r3, [sp, #12]
 8008dda:	1d19      	adds	r1, r3, #4
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	9103      	str	r1, [sp, #12]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	bfbb      	ittet	lt
 8008de4:	425b      	neglt	r3, r3
 8008de6:	f042 0202 	orrlt.w	r2, r2, #2
 8008dea:	9307      	strge	r3, [sp, #28]
 8008dec:	9307      	strlt	r3, [sp, #28]
 8008dee:	bfb8      	it	lt
 8008df0:	9204      	strlt	r2, [sp, #16]
 8008df2:	7823      	ldrb	r3, [r4, #0]
 8008df4:	2b2e      	cmp	r3, #46	; 0x2e
 8008df6:	d10c      	bne.n	8008e12 <_vfiprintf_r+0x15a>
 8008df8:	7863      	ldrb	r3, [r4, #1]
 8008dfa:	2b2a      	cmp	r3, #42	; 0x2a
 8008dfc:	d134      	bne.n	8008e68 <_vfiprintf_r+0x1b0>
 8008dfe:	9b03      	ldr	r3, [sp, #12]
 8008e00:	1d1a      	adds	r2, r3, #4
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	9203      	str	r2, [sp, #12]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	bfb8      	it	lt
 8008e0a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008e0e:	3402      	adds	r4, #2
 8008e10:	9305      	str	r3, [sp, #20]
 8008e12:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008ee8 <_vfiprintf_r+0x230>
 8008e16:	7821      	ldrb	r1, [r4, #0]
 8008e18:	2203      	movs	r2, #3
 8008e1a:	4650      	mov	r0, sl
 8008e1c:	f7f7 f9d8 	bl	80001d0 <memchr>
 8008e20:	b138      	cbz	r0, 8008e32 <_vfiprintf_r+0x17a>
 8008e22:	9b04      	ldr	r3, [sp, #16]
 8008e24:	eba0 000a 	sub.w	r0, r0, sl
 8008e28:	2240      	movs	r2, #64	; 0x40
 8008e2a:	4082      	lsls	r2, r0
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	3401      	adds	r4, #1
 8008e30:	9304      	str	r3, [sp, #16]
 8008e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e36:	4829      	ldr	r0, [pc, #164]	; (8008edc <_vfiprintf_r+0x224>)
 8008e38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e3c:	2206      	movs	r2, #6
 8008e3e:	f7f7 f9c7 	bl	80001d0 <memchr>
 8008e42:	2800      	cmp	r0, #0
 8008e44:	d03f      	beq.n	8008ec6 <_vfiprintf_r+0x20e>
 8008e46:	4b26      	ldr	r3, [pc, #152]	; (8008ee0 <_vfiprintf_r+0x228>)
 8008e48:	bb1b      	cbnz	r3, 8008e92 <_vfiprintf_r+0x1da>
 8008e4a:	9b03      	ldr	r3, [sp, #12]
 8008e4c:	3307      	adds	r3, #7
 8008e4e:	f023 0307 	bic.w	r3, r3, #7
 8008e52:	3308      	adds	r3, #8
 8008e54:	9303      	str	r3, [sp, #12]
 8008e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e58:	443b      	add	r3, r7
 8008e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e5c:	e768      	b.n	8008d30 <_vfiprintf_r+0x78>
 8008e5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e62:	460c      	mov	r4, r1
 8008e64:	2001      	movs	r0, #1
 8008e66:	e7a6      	b.n	8008db6 <_vfiprintf_r+0xfe>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	3401      	adds	r4, #1
 8008e6c:	9305      	str	r3, [sp, #20]
 8008e6e:	4619      	mov	r1, r3
 8008e70:	f04f 0c0a 	mov.w	ip, #10
 8008e74:	4620      	mov	r0, r4
 8008e76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e7a:	3a30      	subs	r2, #48	; 0x30
 8008e7c:	2a09      	cmp	r2, #9
 8008e7e:	d903      	bls.n	8008e88 <_vfiprintf_r+0x1d0>
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d0c6      	beq.n	8008e12 <_vfiprintf_r+0x15a>
 8008e84:	9105      	str	r1, [sp, #20]
 8008e86:	e7c4      	b.n	8008e12 <_vfiprintf_r+0x15a>
 8008e88:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e7f0      	b.n	8008e74 <_vfiprintf_r+0x1bc>
 8008e92:	ab03      	add	r3, sp, #12
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	462a      	mov	r2, r5
 8008e98:	4b12      	ldr	r3, [pc, #72]	; (8008ee4 <_vfiprintf_r+0x22c>)
 8008e9a:	a904      	add	r1, sp, #16
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	f3af 8000 	nop.w
 8008ea2:	4607      	mov	r7, r0
 8008ea4:	1c78      	adds	r0, r7, #1
 8008ea6:	d1d6      	bne.n	8008e56 <_vfiprintf_r+0x19e>
 8008ea8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008eaa:	07d9      	lsls	r1, r3, #31
 8008eac:	d405      	bmi.n	8008eba <_vfiprintf_r+0x202>
 8008eae:	89ab      	ldrh	r3, [r5, #12]
 8008eb0:	059a      	lsls	r2, r3, #22
 8008eb2:	d402      	bmi.n	8008eba <_vfiprintf_r+0x202>
 8008eb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008eb6:	f7ff fddc 	bl	8008a72 <__retarget_lock_release_recursive>
 8008eba:	89ab      	ldrh	r3, [r5, #12]
 8008ebc:	065b      	lsls	r3, r3, #25
 8008ebe:	f53f af1d 	bmi.w	8008cfc <_vfiprintf_r+0x44>
 8008ec2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ec4:	e71c      	b.n	8008d00 <_vfiprintf_r+0x48>
 8008ec6:	ab03      	add	r3, sp, #12
 8008ec8:	9300      	str	r3, [sp, #0]
 8008eca:	462a      	mov	r2, r5
 8008ecc:	4b05      	ldr	r3, [pc, #20]	; (8008ee4 <_vfiprintf_r+0x22c>)
 8008ece:	a904      	add	r1, sp, #16
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	f000 f879 	bl	8008fc8 <_printf_i>
 8008ed6:	e7e4      	b.n	8008ea2 <_vfiprintf_r+0x1ea>
 8008ed8:	0800973c 	.word	0x0800973c
 8008edc:	08009746 	.word	0x08009746
 8008ee0:	00000000 	.word	0x00000000
 8008ee4:	08008c93 	.word	0x08008c93
 8008ee8:	08009742 	.word	0x08009742

08008eec <_printf_common>:
 8008eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef0:	4616      	mov	r6, r2
 8008ef2:	4699      	mov	r9, r3
 8008ef4:	688a      	ldr	r2, [r1, #8]
 8008ef6:	690b      	ldr	r3, [r1, #16]
 8008ef8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008efc:	4293      	cmp	r3, r2
 8008efe:	bfb8      	it	lt
 8008f00:	4613      	movlt	r3, r2
 8008f02:	6033      	str	r3, [r6, #0]
 8008f04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f08:	4607      	mov	r7, r0
 8008f0a:	460c      	mov	r4, r1
 8008f0c:	b10a      	cbz	r2, 8008f12 <_printf_common+0x26>
 8008f0e:	3301      	adds	r3, #1
 8008f10:	6033      	str	r3, [r6, #0]
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	0699      	lsls	r1, r3, #26
 8008f16:	bf42      	ittt	mi
 8008f18:	6833      	ldrmi	r3, [r6, #0]
 8008f1a:	3302      	addmi	r3, #2
 8008f1c:	6033      	strmi	r3, [r6, #0]
 8008f1e:	6825      	ldr	r5, [r4, #0]
 8008f20:	f015 0506 	ands.w	r5, r5, #6
 8008f24:	d106      	bne.n	8008f34 <_printf_common+0x48>
 8008f26:	f104 0a19 	add.w	sl, r4, #25
 8008f2a:	68e3      	ldr	r3, [r4, #12]
 8008f2c:	6832      	ldr	r2, [r6, #0]
 8008f2e:	1a9b      	subs	r3, r3, r2
 8008f30:	42ab      	cmp	r3, r5
 8008f32:	dc26      	bgt.n	8008f82 <_printf_common+0x96>
 8008f34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f38:	1e13      	subs	r3, r2, #0
 8008f3a:	6822      	ldr	r2, [r4, #0]
 8008f3c:	bf18      	it	ne
 8008f3e:	2301      	movne	r3, #1
 8008f40:	0692      	lsls	r2, r2, #26
 8008f42:	d42b      	bmi.n	8008f9c <_printf_common+0xb0>
 8008f44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f48:	4649      	mov	r1, r9
 8008f4a:	4638      	mov	r0, r7
 8008f4c:	47c0      	blx	r8
 8008f4e:	3001      	adds	r0, #1
 8008f50:	d01e      	beq.n	8008f90 <_printf_common+0xa4>
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	6922      	ldr	r2, [r4, #16]
 8008f56:	f003 0306 	and.w	r3, r3, #6
 8008f5a:	2b04      	cmp	r3, #4
 8008f5c:	bf02      	ittt	eq
 8008f5e:	68e5      	ldreq	r5, [r4, #12]
 8008f60:	6833      	ldreq	r3, [r6, #0]
 8008f62:	1aed      	subeq	r5, r5, r3
 8008f64:	68a3      	ldr	r3, [r4, #8]
 8008f66:	bf0c      	ite	eq
 8008f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f6c:	2500      	movne	r5, #0
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	bfc4      	itt	gt
 8008f72:	1a9b      	subgt	r3, r3, r2
 8008f74:	18ed      	addgt	r5, r5, r3
 8008f76:	2600      	movs	r6, #0
 8008f78:	341a      	adds	r4, #26
 8008f7a:	42b5      	cmp	r5, r6
 8008f7c:	d11a      	bne.n	8008fb4 <_printf_common+0xc8>
 8008f7e:	2000      	movs	r0, #0
 8008f80:	e008      	b.n	8008f94 <_printf_common+0xa8>
 8008f82:	2301      	movs	r3, #1
 8008f84:	4652      	mov	r2, sl
 8008f86:	4649      	mov	r1, r9
 8008f88:	4638      	mov	r0, r7
 8008f8a:	47c0      	blx	r8
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	d103      	bne.n	8008f98 <_printf_common+0xac>
 8008f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f98:	3501      	adds	r5, #1
 8008f9a:	e7c6      	b.n	8008f2a <_printf_common+0x3e>
 8008f9c:	18e1      	adds	r1, r4, r3
 8008f9e:	1c5a      	adds	r2, r3, #1
 8008fa0:	2030      	movs	r0, #48	; 0x30
 8008fa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008fa6:	4422      	add	r2, r4
 8008fa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008fac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008fb0:	3302      	adds	r3, #2
 8008fb2:	e7c7      	b.n	8008f44 <_printf_common+0x58>
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	4622      	mov	r2, r4
 8008fb8:	4649      	mov	r1, r9
 8008fba:	4638      	mov	r0, r7
 8008fbc:	47c0      	blx	r8
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	d0e6      	beq.n	8008f90 <_printf_common+0xa4>
 8008fc2:	3601      	adds	r6, #1
 8008fc4:	e7d9      	b.n	8008f7a <_printf_common+0x8e>
	...

08008fc8 <_printf_i>:
 8008fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fcc:	7e0f      	ldrb	r7, [r1, #24]
 8008fce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008fd0:	2f78      	cmp	r7, #120	; 0x78
 8008fd2:	4691      	mov	r9, r2
 8008fd4:	4680      	mov	r8, r0
 8008fd6:	460c      	mov	r4, r1
 8008fd8:	469a      	mov	sl, r3
 8008fda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008fde:	d807      	bhi.n	8008ff0 <_printf_i+0x28>
 8008fe0:	2f62      	cmp	r7, #98	; 0x62
 8008fe2:	d80a      	bhi.n	8008ffa <_printf_i+0x32>
 8008fe4:	2f00      	cmp	r7, #0
 8008fe6:	f000 80d4 	beq.w	8009192 <_printf_i+0x1ca>
 8008fea:	2f58      	cmp	r7, #88	; 0x58
 8008fec:	f000 80c0 	beq.w	8009170 <_printf_i+0x1a8>
 8008ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ff4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ff8:	e03a      	b.n	8009070 <_printf_i+0xa8>
 8008ffa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ffe:	2b15      	cmp	r3, #21
 8009000:	d8f6      	bhi.n	8008ff0 <_printf_i+0x28>
 8009002:	a101      	add	r1, pc, #4	; (adr r1, 8009008 <_printf_i+0x40>)
 8009004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009008:	08009061 	.word	0x08009061
 800900c:	08009075 	.word	0x08009075
 8009010:	08008ff1 	.word	0x08008ff1
 8009014:	08008ff1 	.word	0x08008ff1
 8009018:	08008ff1 	.word	0x08008ff1
 800901c:	08008ff1 	.word	0x08008ff1
 8009020:	08009075 	.word	0x08009075
 8009024:	08008ff1 	.word	0x08008ff1
 8009028:	08008ff1 	.word	0x08008ff1
 800902c:	08008ff1 	.word	0x08008ff1
 8009030:	08008ff1 	.word	0x08008ff1
 8009034:	08009179 	.word	0x08009179
 8009038:	080090a1 	.word	0x080090a1
 800903c:	08009133 	.word	0x08009133
 8009040:	08008ff1 	.word	0x08008ff1
 8009044:	08008ff1 	.word	0x08008ff1
 8009048:	0800919b 	.word	0x0800919b
 800904c:	08008ff1 	.word	0x08008ff1
 8009050:	080090a1 	.word	0x080090a1
 8009054:	08008ff1 	.word	0x08008ff1
 8009058:	08008ff1 	.word	0x08008ff1
 800905c:	0800913b 	.word	0x0800913b
 8009060:	682b      	ldr	r3, [r5, #0]
 8009062:	1d1a      	adds	r2, r3, #4
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	602a      	str	r2, [r5, #0]
 8009068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800906c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009070:	2301      	movs	r3, #1
 8009072:	e09f      	b.n	80091b4 <_printf_i+0x1ec>
 8009074:	6820      	ldr	r0, [r4, #0]
 8009076:	682b      	ldr	r3, [r5, #0]
 8009078:	0607      	lsls	r7, r0, #24
 800907a:	f103 0104 	add.w	r1, r3, #4
 800907e:	6029      	str	r1, [r5, #0]
 8009080:	d501      	bpl.n	8009086 <_printf_i+0xbe>
 8009082:	681e      	ldr	r6, [r3, #0]
 8009084:	e003      	b.n	800908e <_printf_i+0xc6>
 8009086:	0646      	lsls	r6, r0, #25
 8009088:	d5fb      	bpl.n	8009082 <_printf_i+0xba>
 800908a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800908e:	2e00      	cmp	r6, #0
 8009090:	da03      	bge.n	800909a <_printf_i+0xd2>
 8009092:	232d      	movs	r3, #45	; 0x2d
 8009094:	4276      	negs	r6, r6
 8009096:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800909a:	485a      	ldr	r0, [pc, #360]	; (8009204 <_printf_i+0x23c>)
 800909c:	230a      	movs	r3, #10
 800909e:	e012      	b.n	80090c6 <_printf_i+0xfe>
 80090a0:	682b      	ldr	r3, [r5, #0]
 80090a2:	6820      	ldr	r0, [r4, #0]
 80090a4:	1d19      	adds	r1, r3, #4
 80090a6:	6029      	str	r1, [r5, #0]
 80090a8:	0605      	lsls	r5, r0, #24
 80090aa:	d501      	bpl.n	80090b0 <_printf_i+0xe8>
 80090ac:	681e      	ldr	r6, [r3, #0]
 80090ae:	e002      	b.n	80090b6 <_printf_i+0xee>
 80090b0:	0641      	lsls	r1, r0, #25
 80090b2:	d5fb      	bpl.n	80090ac <_printf_i+0xe4>
 80090b4:	881e      	ldrh	r6, [r3, #0]
 80090b6:	4853      	ldr	r0, [pc, #332]	; (8009204 <_printf_i+0x23c>)
 80090b8:	2f6f      	cmp	r7, #111	; 0x6f
 80090ba:	bf0c      	ite	eq
 80090bc:	2308      	moveq	r3, #8
 80090be:	230a      	movne	r3, #10
 80090c0:	2100      	movs	r1, #0
 80090c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80090c6:	6865      	ldr	r5, [r4, #4]
 80090c8:	60a5      	str	r5, [r4, #8]
 80090ca:	2d00      	cmp	r5, #0
 80090cc:	bfa2      	ittt	ge
 80090ce:	6821      	ldrge	r1, [r4, #0]
 80090d0:	f021 0104 	bicge.w	r1, r1, #4
 80090d4:	6021      	strge	r1, [r4, #0]
 80090d6:	b90e      	cbnz	r6, 80090dc <_printf_i+0x114>
 80090d8:	2d00      	cmp	r5, #0
 80090da:	d04b      	beq.n	8009174 <_printf_i+0x1ac>
 80090dc:	4615      	mov	r5, r2
 80090de:	fbb6 f1f3 	udiv	r1, r6, r3
 80090e2:	fb03 6711 	mls	r7, r3, r1, r6
 80090e6:	5dc7      	ldrb	r7, [r0, r7]
 80090e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80090ec:	4637      	mov	r7, r6
 80090ee:	42bb      	cmp	r3, r7
 80090f0:	460e      	mov	r6, r1
 80090f2:	d9f4      	bls.n	80090de <_printf_i+0x116>
 80090f4:	2b08      	cmp	r3, #8
 80090f6:	d10b      	bne.n	8009110 <_printf_i+0x148>
 80090f8:	6823      	ldr	r3, [r4, #0]
 80090fa:	07de      	lsls	r6, r3, #31
 80090fc:	d508      	bpl.n	8009110 <_printf_i+0x148>
 80090fe:	6923      	ldr	r3, [r4, #16]
 8009100:	6861      	ldr	r1, [r4, #4]
 8009102:	4299      	cmp	r1, r3
 8009104:	bfde      	ittt	le
 8009106:	2330      	movle	r3, #48	; 0x30
 8009108:	f805 3c01 	strble.w	r3, [r5, #-1]
 800910c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009110:	1b52      	subs	r2, r2, r5
 8009112:	6122      	str	r2, [r4, #16]
 8009114:	f8cd a000 	str.w	sl, [sp]
 8009118:	464b      	mov	r3, r9
 800911a:	aa03      	add	r2, sp, #12
 800911c:	4621      	mov	r1, r4
 800911e:	4640      	mov	r0, r8
 8009120:	f7ff fee4 	bl	8008eec <_printf_common>
 8009124:	3001      	adds	r0, #1
 8009126:	d14a      	bne.n	80091be <_printf_i+0x1f6>
 8009128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800912c:	b004      	add	sp, #16
 800912e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	f043 0320 	orr.w	r3, r3, #32
 8009138:	6023      	str	r3, [r4, #0]
 800913a:	4833      	ldr	r0, [pc, #204]	; (8009208 <_printf_i+0x240>)
 800913c:	2778      	movs	r7, #120	; 0x78
 800913e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009142:	6823      	ldr	r3, [r4, #0]
 8009144:	6829      	ldr	r1, [r5, #0]
 8009146:	061f      	lsls	r7, r3, #24
 8009148:	f851 6b04 	ldr.w	r6, [r1], #4
 800914c:	d402      	bmi.n	8009154 <_printf_i+0x18c>
 800914e:	065f      	lsls	r7, r3, #25
 8009150:	bf48      	it	mi
 8009152:	b2b6      	uxthmi	r6, r6
 8009154:	07df      	lsls	r7, r3, #31
 8009156:	bf48      	it	mi
 8009158:	f043 0320 	orrmi.w	r3, r3, #32
 800915c:	6029      	str	r1, [r5, #0]
 800915e:	bf48      	it	mi
 8009160:	6023      	strmi	r3, [r4, #0]
 8009162:	b91e      	cbnz	r6, 800916c <_printf_i+0x1a4>
 8009164:	6823      	ldr	r3, [r4, #0]
 8009166:	f023 0320 	bic.w	r3, r3, #32
 800916a:	6023      	str	r3, [r4, #0]
 800916c:	2310      	movs	r3, #16
 800916e:	e7a7      	b.n	80090c0 <_printf_i+0xf8>
 8009170:	4824      	ldr	r0, [pc, #144]	; (8009204 <_printf_i+0x23c>)
 8009172:	e7e4      	b.n	800913e <_printf_i+0x176>
 8009174:	4615      	mov	r5, r2
 8009176:	e7bd      	b.n	80090f4 <_printf_i+0x12c>
 8009178:	682b      	ldr	r3, [r5, #0]
 800917a:	6826      	ldr	r6, [r4, #0]
 800917c:	6961      	ldr	r1, [r4, #20]
 800917e:	1d18      	adds	r0, r3, #4
 8009180:	6028      	str	r0, [r5, #0]
 8009182:	0635      	lsls	r5, r6, #24
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	d501      	bpl.n	800918c <_printf_i+0x1c4>
 8009188:	6019      	str	r1, [r3, #0]
 800918a:	e002      	b.n	8009192 <_printf_i+0x1ca>
 800918c:	0670      	lsls	r0, r6, #25
 800918e:	d5fb      	bpl.n	8009188 <_printf_i+0x1c0>
 8009190:	8019      	strh	r1, [r3, #0]
 8009192:	2300      	movs	r3, #0
 8009194:	6123      	str	r3, [r4, #16]
 8009196:	4615      	mov	r5, r2
 8009198:	e7bc      	b.n	8009114 <_printf_i+0x14c>
 800919a:	682b      	ldr	r3, [r5, #0]
 800919c:	1d1a      	adds	r2, r3, #4
 800919e:	602a      	str	r2, [r5, #0]
 80091a0:	681d      	ldr	r5, [r3, #0]
 80091a2:	6862      	ldr	r2, [r4, #4]
 80091a4:	2100      	movs	r1, #0
 80091a6:	4628      	mov	r0, r5
 80091a8:	f7f7 f812 	bl	80001d0 <memchr>
 80091ac:	b108      	cbz	r0, 80091b2 <_printf_i+0x1ea>
 80091ae:	1b40      	subs	r0, r0, r5
 80091b0:	6060      	str	r0, [r4, #4]
 80091b2:	6863      	ldr	r3, [r4, #4]
 80091b4:	6123      	str	r3, [r4, #16]
 80091b6:	2300      	movs	r3, #0
 80091b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091bc:	e7aa      	b.n	8009114 <_printf_i+0x14c>
 80091be:	6923      	ldr	r3, [r4, #16]
 80091c0:	462a      	mov	r2, r5
 80091c2:	4649      	mov	r1, r9
 80091c4:	4640      	mov	r0, r8
 80091c6:	47d0      	blx	sl
 80091c8:	3001      	adds	r0, #1
 80091ca:	d0ad      	beq.n	8009128 <_printf_i+0x160>
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	079b      	lsls	r3, r3, #30
 80091d0:	d413      	bmi.n	80091fa <_printf_i+0x232>
 80091d2:	68e0      	ldr	r0, [r4, #12]
 80091d4:	9b03      	ldr	r3, [sp, #12]
 80091d6:	4298      	cmp	r0, r3
 80091d8:	bfb8      	it	lt
 80091da:	4618      	movlt	r0, r3
 80091dc:	e7a6      	b.n	800912c <_printf_i+0x164>
 80091de:	2301      	movs	r3, #1
 80091e0:	4632      	mov	r2, r6
 80091e2:	4649      	mov	r1, r9
 80091e4:	4640      	mov	r0, r8
 80091e6:	47d0      	blx	sl
 80091e8:	3001      	adds	r0, #1
 80091ea:	d09d      	beq.n	8009128 <_printf_i+0x160>
 80091ec:	3501      	adds	r5, #1
 80091ee:	68e3      	ldr	r3, [r4, #12]
 80091f0:	9903      	ldr	r1, [sp, #12]
 80091f2:	1a5b      	subs	r3, r3, r1
 80091f4:	42ab      	cmp	r3, r5
 80091f6:	dcf2      	bgt.n	80091de <_printf_i+0x216>
 80091f8:	e7eb      	b.n	80091d2 <_printf_i+0x20a>
 80091fa:	2500      	movs	r5, #0
 80091fc:	f104 0619 	add.w	r6, r4, #25
 8009200:	e7f5      	b.n	80091ee <_printf_i+0x226>
 8009202:	bf00      	nop
 8009204:	0800974d 	.word	0x0800974d
 8009208:	0800975e 	.word	0x0800975e

0800920c <__sflush_r>:
 800920c:	898a      	ldrh	r2, [r1, #12]
 800920e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009212:	4605      	mov	r5, r0
 8009214:	0710      	lsls	r0, r2, #28
 8009216:	460c      	mov	r4, r1
 8009218:	d458      	bmi.n	80092cc <__sflush_r+0xc0>
 800921a:	684b      	ldr	r3, [r1, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	dc05      	bgt.n	800922c <__sflush_r+0x20>
 8009220:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009222:	2b00      	cmp	r3, #0
 8009224:	dc02      	bgt.n	800922c <__sflush_r+0x20>
 8009226:	2000      	movs	r0, #0
 8009228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800922c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800922e:	2e00      	cmp	r6, #0
 8009230:	d0f9      	beq.n	8009226 <__sflush_r+0x1a>
 8009232:	2300      	movs	r3, #0
 8009234:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009238:	682f      	ldr	r7, [r5, #0]
 800923a:	6a21      	ldr	r1, [r4, #32]
 800923c:	602b      	str	r3, [r5, #0]
 800923e:	d032      	beq.n	80092a6 <__sflush_r+0x9a>
 8009240:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009242:	89a3      	ldrh	r3, [r4, #12]
 8009244:	075a      	lsls	r2, r3, #29
 8009246:	d505      	bpl.n	8009254 <__sflush_r+0x48>
 8009248:	6863      	ldr	r3, [r4, #4]
 800924a:	1ac0      	subs	r0, r0, r3
 800924c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800924e:	b10b      	cbz	r3, 8009254 <__sflush_r+0x48>
 8009250:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009252:	1ac0      	subs	r0, r0, r3
 8009254:	2300      	movs	r3, #0
 8009256:	4602      	mov	r2, r0
 8009258:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800925a:	6a21      	ldr	r1, [r4, #32]
 800925c:	4628      	mov	r0, r5
 800925e:	47b0      	blx	r6
 8009260:	1c43      	adds	r3, r0, #1
 8009262:	89a3      	ldrh	r3, [r4, #12]
 8009264:	d106      	bne.n	8009274 <__sflush_r+0x68>
 8009266:	6829      	ldr	r1, [r5, #0]
 8009268:	291d      	cmp	r1, #29
 800926a:	d82b      	bhi.n	80092c4 <__sflush_r+0xb8>
 800926c:	4a29      	ldr	r2, [pc, #164]	; (8009314 <__sflush_r+0x108>)
 800926e:	410a      	asrs	r2, r1
 8009270:	07d6      	lsls	r6, r2, #31
 8009272:	d427      	bmi.n	80092c4 <__sflush_r+0xb8>
 8009274:	2200      	movs	r2, #0
 8009276:	6062      	str	r2, [r4, #4]
 8009278:	04d9      	lsls	r1, r3, #19
 800927a:	6922      	ldr	r2, [r4, #16]
 800927c:	6022      	str	r2, [r4, #0]
 800927e:	d504      	bpl.n	800928a <__sflush_r+0x7e>
 8009280:	1c42      	adds	r2, r0, #1
 8009282:	d101      	bne.n	8009288 <__sflush_r+0x7c>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	b903      	cbnz	r3, 800928a <__sflush_r+0x7e>
 8009288:	6560      	str	r0, [r4, #84]	; 0x54
 800928a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800928c:	602f      	str	r7, [r5, #0]
 800928e:	2900      	cmp	r1, #0
 8009290:	d0c9      	beq.n	8009226 <__sflush_r+0x1a>
 8009292:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009296:	4299      	cmp	r1, r3
 8009298:	d002      	beq.n	80092a0 <__sflush_r+0x94>
 800929a:	4628      	mov	r0, r5
 800929c:	f7ff fbea 	bl	8008a74 <_free_r>
 80092a0:	2000      	movs	r0, #0
 80092a2:	6360      	str	r0, [r4, #52]	; 0x34
 80092a4:	e7c0      	b.n	8009228 <__sflush_r+0x1c>
 80092a6:	2301      	movs	r3, #1
 80092a8:	4628      	mov	r0, r5
 80092aa:	47b0      	blx	r6
 80092ac:	1c41      	adds	r1, r0, #1
 80092ae:	d1c8      	bne.n	8009242 <__sflush_r+0x36>
 80092b0:	682b      	ldr	r3, [r5, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d0c5      	beq.n	8009242 <__sflush_r+0x36>
 80092b6:	2b1d      	cmp	r3, #29
 80092b8:	d001      	beq.n	80092be <__sflush_r+0xb2>
 80092ba:	2b16      	cmp	r3, #22
 80092bc:	d101      	bne.n	80092c2 <__sflush_r+0xb6>
 80092be:	602f      	str	r7, [r5, #0]
 80092c0:	e7b1      	b.n	8009226 <__sflush_r+0x1a>
 80092c2:	89a3      	ldrh	r3, [r4, #12]
 80092c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092c8:	81a3      	strh	r3, [r4, #12]
 80092ca:	e7ad      	b.n	8009228 <__sflush_r+0x1c>
 80092cc:	690f      	ldr	r7, [r1, #16]
 80092ce:	2f00      	cmp	r7, #0
 80092d0:	d0a9      	beq.n	8009226 <__sflush_r+0x1a>
 80092d2:	0793      	lsls	r3, r2, #30
 80092d4:	680e      	ldr	r6, [r1, #0]
 80092d6:	bf08      	it	eq
 80092d8:	694b      	ldreq	r3, [r1, #20]
 80092da:	600f      	str	r7, [r1, #0]
 80092dc:	bf18      	it	ne
 80092de:	2300      	movne	r3, #0
 80092e0:	eba6 0807 	sub.w	r8, r6, r7
 80092e4:	608b      	str	r3, [r1, #8]
 80092e6:	f1b8 0f00 	cmp.w	r8, #0
 80092ea:	dd9c      	ble.n	8009226 <__sflush_r+0x1a>
 80092ec:	6a21      	ldr	r1, [r4, #32]
 80092ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092f0:	4643      	mov	r3, r8
 80092f2:	463a      	mov	r2, r7
 80092f4:	4628      	mov	r0, r5
 80092f6:	47b0      	blx	r6
 80092f8:	2800      	cmp	r0, #0
 80092fa:	dc06      	bgt.n	800930a <__sflush_r+0xfe>
 80092fc:	89a3      	ldrh	r3, [r4, #12]
 80092fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009302:	81a3      	strh	r3, [r4, #12]
 8009304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009308:	e78e      	b.n	8009228 <__sflush_r+0x1c>
 800930a:	4407      	add	r7, r0
 800930c:	eba8 0800 	sub.w	r8, r8, r0
 8009310:	e7e9      	b.n	80092e6 <__sflush_r+0xda>
 8009312:	bf00      	nop
 8009314:	dfbffffe 	.word	0xdfbffffe

08009318 <_fflush_r>:
 8009318:	b538      	push	{r3, r4, r5, lr}
 800931a:	690b      	ldr	r3, [r1, #16]
 800931c:	4605      	mov	r5, r0
 800931e:	460c      	mov	r4, r1
 8009320:	b913      	cbnz	r3, 8009328 <_fflush_r+0x10>
 8009322:	2500      	movs	r5, #0
 8009324:	4628      	mov	r0, r5
 8009326:	bd38      	pop	{r3, r4, r5, pc}
 8009328:	b118      	cbz	r0, 8009332 <_fflush_r+0x1a>
 800932a:	6a03      	ldr	r3, [r0, #32]
 800932c:	b90b      	cbnz	r3, 8009332 <_fflush_r+0x1a>
 800932e:	f7ff fa9b 	bl	8008868 <__sinit>
 8009332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d0f3      	beq.n	8009322 <_fflush_r+0xa>
 800933a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800933c:	07d0      	lsls	r0, r2, #31
 800933e:	d404      	bmi.n	800934a <_fflush_r+0x32>
 8009340:	0599      	lsls	r1, r3, #22
 8009342:	d402      	bmi.n	800934a <_fflush_r+0x32>
 8009344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009346:	f7ff fb93 	bl	8008a70 <__retarget_lock_acquire_recursive>
 800934a:	4628      	mov	r0, r5
 800934c:	4621      	mov	r1, r4
 800934e:	f7ff ff5d 	bl	800920c <__sflush_r>
 8009352:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009354:	07da      	lsls	r2, r3, #31
 8009356:	4605      	mov	r5, r0
 8009358:	d4e4      	bmi.n	8009324 <_fflush_r+0xc>
 800935a:	89a3      	ldrh	r3, [r4, #12]
 800935c:	059b      	lsls	r3, r3, #22
 800935e:	d4e1      	bmi.n	8009324 <_fflush_r+0xc>
 8009360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009362:	f7ff fb86 	bl	8008a72 <__retarget_lock_release_recursive>
 8009366:	e7dd      	b.n	8009324 <_fflush_r+0xc>

08009368 <__swbuf_r>:
 8009368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936a:	460e      	mov	r6, r1
 800936c:	4614      	mov	r4, r2
 800936e:	4605      	mov	r5, r0
 8009370:	b118      	cbz	r0, 800937a <__swbuf_r+0x12>
 8009372:	6a03      	ldr	r3, [r0, #32]
 8009374:	b90b      	cbnz	r3, 800937a <__swbuf_r+0x12>
 8009376:	f7ff fa77 	bl	8008868 <__sinit>
 800937a:	69a3      	ldr	r3, [r4, #24]
 800937c:	60a3      	str	r3, [r4, #8]
 800937e:	89a3      	ldrh	r3, [r4, #12]
 8009380:	071a      	lsls	r2, r3, #28
 8009382:	d525      	bpl.n	80093d0 <__swbuf_r+0x68>
 8009384:	6923      	ldr	r3, [r4, #16]
 8009386:	b31b      	cbz	r3, 80093d0 <__swbuf_r+0x68>
 8009388:	6823      	ldr	r3, [r4, #0]
 800938a:	6922      	ldr	r2, [r4, #16]
 800938c:	1a98      	subs	r0, r3, r2
 800938e:	6963      	ldr	r3, [r4, #20]
 8009390:	b2f6      	uxtb	r6, r6
 8009392:	4283      	cmp	r3, r0
 8009394:	4637      	mov	r7, r6
 8009396:	dc04      	bgt.n	80093a2 <__swbuf_r+0x3a>
 8009398:	4621      	mov	r1, r4
 800939a:	4628      	mov	r0, r5
 800939c:	f7ff ffbc 	bl	8009318 <_fflush_r>
 80093a0:	b9e0      	cbnz	r0, 80093dc <__swbuf_r+0x74>
 80093a2:	68a3      	ldr	r3, [r4, #8]
 80093a4:	3b01      	subs	r3, #1
 80093a6:	60a3      	str	r3, [r4, #8]
 80093a8:	6823      	ldr	r3, [r4, #0]
 80093aa:	1c5a      	adds	r2, r3, #1
 80093ac:	6022      	str	r2, [r4, #0]
 80093ae:	701e      	strb	r6, [r3, #0]
 80093b0:	6962      	ldr	r2, [r4, #20]
 80093b2:	1c43      	adds	r3, r0, #1
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d004      	beq.n	80093c2 <__swbuf_r+0x5a>
 80093b8:	89a3      	ldrh	r3, [r4, #12]
 80093ba:	07db      	lsls	r3, r3, #31
 80093bc:	d506      	bpl.n	80093cc <__swbuf_r+0x64>
 80093be:	2e0a      	cmp	r6, #10
 80093c0:	d104      	bne.n	80093cc <__swbuf_r+0x64>
 80093c2:	4621      	mov	r1, r4
 80093c4:	4628      	mov	r0, r5
 80093c6:	f7ff ffa7 	bl	8009318 <_fflush_r>
 80093ca:	b938      	cbnz	r0, 80093dc <__swbuf_r+0x74>
 80093cc:	4638      	mov	r0, r7
 80093ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093d0:	4621      	mov	r1, r4
 80093d2:	4628      	mov	r0, r5
 80093d4:	f000 f806 	bl	80093e4 <__swsetup_r>
 80093d8:	2800      	cmp	r0, #0
 80093da:	d0d5      	beq.n	8009388 <__swbuf_r+0x20>
 80093dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80093e0:	e7f4      	b.n	80093cc <__swbuf_r+0x64>
	...

080093e4 <__swsetup_r>:
 80093e4:	b538      	push	{r3, r4, r5, lr}
 80093e6:	4b2a      	ldr	r3, [pc, #168]	; (8009490 <__swsetup_r+0xac>)
 80093e8:	4605      	mov	r5, r0
 80093ea:	6818      	ldr	r0, [r3, #0]
 80093ec:	460c      	mov	r4, r1
 80093ee:	b118      	cbz	r0, 80093f8 <__swsetup_r+0x14>
 80093f0:	6a03      	ldr	r3, [r0, #32]
 80093f2:	b90b      	cbnz	r3, 80093f8 <__swsetup_r+0x14>
 80093f4:	f7ff fa38 	bl	8008868 <__sinit>
 80093f8:	89a3      	ldrh	r3, [r4, #12]
 80093fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093fe:	0718      	lsls	r0, r3, #28
 8009400:	d422      	bmi.n	8009448 <__swsetup_r+0x64>
 8009402:	06d9      	lsls	r1, r3, #27
 8009404:	d407      	bmi.n	8009416 <__swsetup_r+0x32>
 8009406:	2309      	movs	r3, #9
 8009408:	602b      	str	r3, [r5, #0]
 800940a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800940e:	81a3      	strh	r3, [r4, #12]
 8009410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009414:	e034      	b.n	8009480 <__swsetup_r+0x9c>
 8009416:	0758      	lsls	r0, r3, #29
 8009418:	d512      	bpl.n	8009440 <__swsetup_r+0x5c>
 800941a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800941c:	b141      	cbz	r1, 8009430 <__swsetup_r+0x4c>
 800941e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009422:	4299      	cmp	r1, r3
 8009424:	d002      	beq.n	800942c <__swsetup_r+0x48>
 8009426:	4628      	mov	r0, r5
 8009428:	f7ff fb24 	bl	8008a74 <_free_r>
 800942c:	2300      	movs	r3, #0
 800942e:	6363      	str	r3, [r4, #52]	; 0x34
 8009430:	89a3      	ldrh	r3, [r4, #12]
 8009432:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009436:	81a3      	strh	r3, [r4, #12]
 8009438:	2300      	movs	r3, #0
 800943a:	6063      	str	r3, [r4, #4]
 800943c:	6923      	ldr	r3, [r4, #16]
 800943e:	6023      	str	r3, [r4, #0]
 8009440:	89a3      	ldrh	r3, [r4, #12]
 8009442:	f043 0308 	orr.w	r3, r3, #8
 8009446:	81a3      	strh	r3, [r4, #12]
 8009448:	6923      	ldr	r3, [r4, #16]
 800944a:	b94b      	cbnz	r3, 8009460 <__swsetup_r+0x7c>
 800944c:	89a3      	ldrh	r3, [r4, #12]
 800944e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009456:	d003      	beq.n	8009460 <__swsetup_r+0x7c>
 8009458:	4621      	mov	r1, r4
 800945a:	4628      	mov	r0, r5
 800945c:	f000 f850 	bl	8009500 <__smakebuf_r>
 8009460:	89a0      	ldrh	r0, [r4, #12]
 8009462:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009466:	f010 0301 	ands.w	r3, r0, #1
 800946a:	d00a      	beq.n	8009482 <__swsetup_r+0x9e>
 800946c:	2300      	movs	r3, #0
 800946e:	60a3      	str	r3, [r4, #8]
 8009470:	6963      	ldr	r3, [r4, #20]
 8009472:	425b      	negs	r3, r3
 8009474:	61a3      	str	r3, [r4, #24]
 8009476:	6923      	ldr	r3, [r4, #16]
 8009478:	b943      	cbnz	r3, 800948c <__swsetup_r+0xa8>
 800947a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800947e:	d1c4      	bne.n	800940a <__swsetup_r+0x26>
 8009480:	bd38      	pop	{r3, r4, r5, pc}
 8009482:	0781      	lsls	r1, r0, #30
 8009484:	bf58      	it	pl
 8009486:	6963      	ldrpl	r3, [r4, #20]
 8009488:	60a3      	str	r3, [r4, #8]
 800948a:	e7f4      	b.n	8009476 <__swsetup_r+0x92>
 800948c:	2000      	movs	r0, #0
 800948e:	e7f7      	b.n	8009480 <__swsetup_r+0x9c>
 8009490:	20000154 	.word	0x20000154

08009494 <_sbrk_r>:
 8009494:	b538      	push	{r3, r4, r5, lr}
 8009496:	4d06      	ldr	r5, [pc, #24]	; (80094b0 <_sbrk_r+0x1c>)
 8009498:	2300      	movs	r3, #0
 800949a:	4604      	mov	r4, r0
 800949c:	4608      	mov	r0, r1
 800949e:	602b      	str	r3, [r5, #0]
 80094a0:	f7f7 fd7a 	bl	8000f98 <_sbrk>
 80094a4:	1c43      	adds	r3, r0, #1
 80094a6:	d102      	bne.n	80094ae <_sbrk_r+0x1a>
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	b103      	cbz	r3, 80094ae <_sbrk_r+0x1a>
 80094ac:	6023      	str	r3, [r4, #0]
 80094ae:	bd38      	pop	{r3, r4, r5, pc}
 80094b0:	20001fb8 	.word	0x20001fb8

080094b4 <__swhatbuf_r>:
 80094b4:	b570      	push	{r4, r5, r6, lr}
 80094b6:	460c      	mov	r4, r1
 80094b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094bc:	2900      	cmp	r1, #0
 80094be:	b096      	sub	sp, #88	; 0x58
 80094c0:	4615      	mov	r5, r2
 80094c2:	461e      	mov	r6, r3
 80094c4:	da0d      	bge.n	80094e2 <__swhatbuf_r+0x2e>
 80094c6:	89a3      	ldrh	r3, [r4, #12]
 80094c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80094cc:	f04f 0100 	mov.w	r1, #0
 80094d0:	bf0c      	ite	eq
 80094d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80094d6:	2340      	movne	r3, #64	; 0x40
 80094d8:	2000      	movs	r0, #0
 80094da:	6031      	str	r1, [r6, #0]
 80094dc:	602b      	str	r3, [r5, #0]
 80094de:	b016      	add	sp, #88	; 0x58
 80094e0:	bd70      	pop	{r4, r5, r6, pc}
 80094e2:	466a      	mov	r2, sp
 80094e4:	f000 f848 	bl	8009578 <_fstat_r>
 80094e8:	2800      	cmp	r0, #0
 80094ea:	dbec      	blt.n	80094c6 <__swhatbuf_r+0x12>
 80094ec:	9901      	ldr	r1, [sp, #4]
 80094ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80094f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80094f6:	4259      	negs	r1, r3
 80094f8:	4159      	adcs	r1, r3
 80094fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094fe:	e7eb      	b.n	80094d8 <__swhatbuf_r+0x24>

08009500 <__smakebuf_r>:
 8009500:	898b      	ldrh	r3, [r1, #12]
 8009502:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009504:	079d      	lsls	r5, r3, #30
 8009506:	4606      	mov	r6, r0
 8009508:	460c      	mov	r4, r1
 800950a:	d507      	bpl.n	800951c <__smakebuf_r+0x1c>
 800950c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009510:	6023      	str	r3, [r4, #0]
 8009512:	6123      	str	r3, [r4, #16]
 8009514:	2301      	movs	r3, #1
 8009516:	6163      	str	r3, [r4, #20]
 8009518:	b002      	add	sp, #8
 800951a:	bd70      	pop	{r4, r5, r6, pc}
 800951c:	ab01      	add	r3, sp, #4
 800951e:	466a      	mov	r2, sp
 8009520:	f7ff ffc8 	bl	80094b4 <__swhatbuf_r>
 8009524:	9900      	ldr	r1, [sp, #0]
 8009526:	4605      	mov	r5, r0
 8009528:	4630      	mov	r0, r6
 800952a:	f7ff fb0f 	bl	8008b4c <_malloc_r>
 800952e:	b948      	cbnz	r0, 8009544 <__smakebuf_r+0x44>
 8009530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009534:	059a      	lsls	r2, r3, #22
 8009536:	d4ef      	bmi.n	8009518 <__smakebuf_r+0x18>
 8009538:	f023 0303 	bic.w	r3, r3, #3
 800953c:	f043 0302 	orr.w	r3, r3, #2
 8009540:	81a3      	strh	r3, [r4, #12]
 8009542:	e7e3      	b.n	800950c <__smakebuf_r+0xc>
 8009544:	89a3      	ldrh	r3, [r4, #12]
 8009546:	6020      	str	r0, [r4, #0]
 8009548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800954c:	81a3      	strh	r3, [r4, #12]
 800954e:	9b00      	ldr	r3, [sp, #0]
 8009550:	6163      	str	r3, [r4, #20]
 8009552:	9b01      	ldr	r3, [sp, #4]
 8009554:	6120      	str	r0, [r4, #16]
 8009556:	b15b      	cbz	r3, 8009570 <__smakebuf_r+0x70>
 8009558:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800955c:	4630      	mov	r0, r6
 800955e:	f000 f81d 	bl	800959c <_isatty_r>
 8009562:	b128      	cbz	r0, 8009570 <__smakebuf_r+0x70>
 8009564:	89a3      	ldrh	r3, [r4, #12]
 8009566:	f023 0303 	bic.w	r3, r3, #3
 800956a:	f043 0301 	orr.w	r3, r3, #1
 800956e:	81a3      	strh	r3, [r4, #12]
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	431d      	orrs	r5, r3
 8009574:	81a5      	strh	r5, [r4, #12]
 8009576:	e7cf      	b.n	8009518 <__smakebuf_r+0x18>

08009578 <_fstat_r>:
 8009578:	b538      	push	{r3, r4, r5, lr}
 800957a:	4d07      	ldr	r5, [pc, #28]	; (8009598 <_fstat_r+0x20>)
 800957c:	2300      	movs	r3, #0
 800957e:	4604      	mov	r4, r0
 8009580:	4608      	mov	r0, r1
 8009582:	4611      	mov	r1, r2
 8009584:	602b      	str	r3, [r5, #0]
 8009586:	f7f7 fcde 	bl	8000f46 <_fstat>
 800958a:	1c43      	adds	r3, r0, #1
 800958c:	d102      	bne.n	8009594 <_fstat_r+0x1c>
 800958e:	682b      	ldr	r3, [r5, #0]
 8009590:	b103      	cbz	r3, 8009594 <_fstat_r+0x1c>
 8009592:	6023      	str	r3, [r4, #0]
 8009594:	bd38      	pop	{r3, r4, r5, pc}
 8009596:	bf00      	nop
 8009598:	20001fb8 	.word	0x20001fb8

0800959c <_isatty_r>:
 800959c:	b538      	push	{r3, r4, r5, lr}
 800959e:	4d06      	ldr	r5, [pc, #24]	; (80095b8 <_isatty_r+0x1c>)
 80095a0:	2300      	movs	r3, #0
 80095a2:	4604      	mov	r4, r0
 80095a4:	4608      	mov	r0, r1
 80095a6:	602b      	str	r3, [r5, #0]
 80095a8:	f7f7 fcdd 	bl	8000f66 <_isatty>
 80095ac:	1c43      	adds	r3, r0, #1
 80095ae:	d102      	bne.n	80095b6 <_isatty_r+0x1a>
 80095b0:	682b      	ldr	r3, [r5, #0]
 80095b2:	b103      	cbz	r3, 80095b6 <_isatty_r+0x1a>
 80095b4:	6023      	str	r3, [r4, #0]
 80095b6:	bd38      	pop	{r3, r4, r5, pc}
 80095b8:	20001fb8 	.word	0x20001fb8

080095bc <_init>:
 80095bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095be:	bf00      	nop
 80095c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095c2:	bc08      	pop	{r3}
 80095c4:	469e      	mov	lr, r3
 80095c6:	4770      	bx	lr

080095c8 <_fini>:
 80095c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ca:	bf00      	nop
 80095cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ce:	bc08      	pop	{r3}
 80095d0:	469e      	mov	lr, r3
 80095d2:	4770      	bx	lr
