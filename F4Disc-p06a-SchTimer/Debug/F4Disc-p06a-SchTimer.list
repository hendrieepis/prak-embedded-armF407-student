
F4Disc-p06a-SchTimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800a25c  0800a25c  0001a25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a330  0800a330  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  0800a330  0800a330  0001a330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a338  0800a338  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a338  0800a338  0001a338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a33c  0800a33c  0001a33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  0800a340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020158  2**0
                  CONTENTS
 10 .bss          00001eec  20000158  20000158  00020158  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002044  20002044  00020158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a2bd  00000000  00000000  000201cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000043b2  00000000  00000000  0003a488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018b8  00000000  00000000  0003e840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012fe  00000000  00000000  000400f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026adc  00000000  00000000  000413f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001fab8  00000000  00000000  00067ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d4d14  00000000  00000000  0008798a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006ea0  00000000  00000000  0015c6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  00163540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000158 	.word	0x20000158
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a244 	.word	0x0800a244

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000015c 	.word	0x2000015c
 80001cc:	0800a244 	.word	0x0800a244

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <checkBoard>:
 */

#include "checkboard.h"
#include "main.h"
#include "stdio.h"
void checkBoard(void){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
	  HAL_Delay(5000);
 8000572:	f241 3088 	movw	r0, #5000	; 0x1388
 8000576:	f000 ffcd 	bl	8001514 <HAL_Delay>
	  printf("Cek BarLED, buzzer, USER LED \n\r");
 800057a:	482c      	ldr	r0, [pc, #176]	; (800062c <checkBoard+0xc0>)
 800057c:	f008 ffee 	bl	800955c <iprintf>
	  HAL_Delay(1000);
 8000580:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000584:	f000 ffc6 	bl	8001514 <HAL_Delay>
	  for (uint8_t cnt=0;cnt<8;cnt++){
 8000588:	2300      	movs	r3, #0
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	e044      	b.n	8000618 <checkBoard+0xac>

		  HAL_GPIO_TogglePin(BAR0_GPIO_Port, BAR0_Pin);
 800058e:	2140      	movs	r1, #64	; 0x40
 8000590:	4827      	ldr	r0, [pc, #156]	; (8000630 <checkBoard+0xc4>)
 8000592:	f001 faaa 	bl	8001aea <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR1_GPIO_Port, BAR1_Pin);
 8000596:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059a:	4826      	ldr	r0, [pc, #152]	; (8000634 <checkBoard+0xc8>)
 800059c:	f001 faa5 	bl	8001aea <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR2_GPIO_Port, BAR2_Pin);
 80005a0:	2110      	movs	r1, #16
 80005a2:	4823      	ldr	r0, [pc, #140]	; (8000630 <checkBoard+0xc4>)
 80005a4:	f001 faa1 	bl	8001aea <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR3_GPIO_Port, BAR3_Pin);
 80005a8:	2120      	movs	r1, #32
 80005aa:	4821      	ldr	r0, [pc, #132]	; (8000630 <checkBoard+0xc4>)
 80005ac:	f001 fa9d 	bl	8001aea <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR4_GPIO_Port, BAR4_Pin);
 80005b0:	2104      	movs	r1, #4
 80005b2:	481f      	ldr	r0, [pc, #124]	; (8000630 <checkBoard+0xc4>)
 80005b4:	f001 fa99 	bl	8001aea <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR5_GPIO_Port, BAR5_Pin);
 80005b8:	2110      	movs	r1, #16
 80005ba:	481f      	ldr	r0, [pc, #124]	; (8000638 <checkBoard+0xcc>)
 80005bc:	f001 fa95 	bl	8001aea <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR6_GPIO_Port, BAR6_Pin);
 80005c0:	2120      	movs	r1, #32
 80005c2:	481d      	ldr	r0, [pc, #116]	; (8000638 <checkBoard+0xcc>)
 80005c4:	f001 fa91 	bl	8001aea <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR7_GPIO_Port, BAR7_Pin);
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	481c      	ldr	r0, [pc, #112]	; (800063c <checkBoard+0xd0>)
 80005cc:	f001 fa8d 	bl	8001aea <HAL_GPIO_TogglePin>

		  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80005d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d4:	4817      	ldr	r0, [pc, #92]	; (8000634 <checkBoard+0xc8>)
 80005d6:	f001 fa88 	bl	8001aea <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80005da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005de:	4817      	ldr	r0, [pc, #92]	; (800063c <checkBoard+0xd0>)
 80005e0:	f001 fa83 	bl	8001aea <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80005e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e8:	4814      	ldr	r0, [pc, #80]	; (800063c <checkBoard+0xd0>)
 80005ea:	f001 fa7e 	bl	8001aea <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 80005ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f2:	4812      	ldr	r0, [pc, #72]	; (800063c <checkBoard+0xd0>)
 80005f4:	f001 fa79 	bl	8001aea <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 80005f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005fc:	480f      	ldr	r0, [pc, #60]	; (800063c <checkBoard+0xd0>)
 80005fe:	f001 fa74 	bl	8001aea <HAL_GPIO_TogglePin>
		  printf("count: %d \n\r",cnt);
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	4619      	mov	r1, r3
 8000606:	480e      	ldr	r0, [pc, #56]	; (8000640 <checkBoard+0xd4>)
 8000608:	f008 ffa8 	bl	800955c <iprintf>
		  HAL_Delay(100);
 800060c:	2064      	movs	r0, #100	; 0x64
 800060e:	f000 ff81 	bl	8001514 <HAL_Delay>
	  for (uint8_t cnt=0;cnt<8;cnt++){
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	3301      	adds	r3, #1
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	2b07      	cmp	r3, #7
 800061c:	d9b7      	bls.n	800058e <checkBoard+0x22>
	  }

	  printf("Cek Button \n\r");
 800061e:	4809      	ldr	r0, [pc, #36]	; (8000644 <checkBoard+0xd8>)
 8000620:	f008 ff9c 	bl	800955c <iprintf>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	0800a25c 	.word	0x0800a25c
 8000630:	40021000 	.word	0x40021000
 8000634:	40020800 	.word	0x40020800
 8000638:	40020400 	.word	0x40020400
 800063c:	40020c00 	.word	0x40020c00
 8000640:	0800a27c 	.word	0x0800a27c
 8000644:	0800a28c 	.word	0x0800a28c

08000648 <_write>:
I2S_HandleTypeDef hi2s3;
SPI_HandleTypeDef hspi1;

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*) ptr, len); return len;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	b29b      	uxth	r3, r3
 8000658:	4619      	mov	r1, r3
 800065a:	68b8      	ldr	r0, [r7, #8]
 800065c:	f008 fa64 	bl	8008b28 <CDC_Transmit_FS>
 8000660:	687b      	ldr	r3, [r7, #4]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2230      	movs	r2, #48	; 0x30
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f008 ffc3 	bl	8009606 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	4b28      	ldr	r3, [pc, #160]	; (8000738 <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a27      	ldr	r2, [pc, #156]	; (8000738 <SystemClock_Config+0xcc>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
 80006a0:	4b25      	ldr	r3, [pc, #148]	; (8000738 <SystemClock_Config+0xcc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a21      	ldr	r2, [pc, #132]	; (800073c <SystemClock_Config+0xd0>)
 80006b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c8:	2301      	movs	r3, #1
 80006ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006dc:	2308      	movs	r3, #8
 80006de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ea:	2307      	movs	r3, #7
 80006ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 fa76 	bl	8003be4 <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006fe:	f000 f9fd 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	230f      	movs	r3, #15
 8000704:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2302      	movs	r3, #2
 8000708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000712:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000718:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	2105      	movs	r1, #5
 8000720:	4618      	mov	r0, r3
 8000722:	f003 fcd7 	bl	80040d4 <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800072c:	f000 f9e6 	bl	8000afc <Error_Handler>
  }
}
 8000730:	bf00      	nop
 8000732:	3750      	adds	r7, #80	; 0x50
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_I2C1_Init+0x50>)
 8000746:	4a13      	ldr	r2, [pc, #76]	; (8000794 <MX_I2C1_Init+0x54>)
 8000748:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_I2C1_Init+0x50>)
 800074c:	4a12      	ldr	r2, [pc, #72]	; (8000798 <MX_I2C1_Init+0x58>)
 800074e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_I2C1_Init+0x50>)
 800075e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000762:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <MX_I2C1_Init+0x50>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_I2C1_Init+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <MX_I2C1_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_I2C1_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_I2C1_Init+0x50>)
 800077e:	f001 f9cf 	bl	8001b20 <HAL_I2C_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000788:	f000 f9b8 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000174 	.word	0x20000174
 8000794:	40005400 	.word	0x40005400
 8000798:	000186a0 	.word	0x000186a0

0800079c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2S3_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007a0:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007a2:	4a14      	ldr	r2, [pc, #80]	; (80007f4 <MX_I2S3_Init+0x58>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ac:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007b4:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007c4:	4a0c      	ldr	r2, [pc, #48]	; (80007f8 <MX_I2S3_Init+0x5c>)
 80007c6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007dc:	f001 fae4 	bl	8001da8 <HAL_I2S_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007e6:	f000 f989 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200001c8 	.word	0x200001c8
 80007f4:	40003c00 	.word	0x40003c00
 80007f8:	00017700 	.word	0x00017700

080007fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_SPI1_Init+0x64>)
 8000802:	4a18      	ldr	r2, [pc, #96]	; (8000864 <MX_SPI1_Init+0x68>)
 8000804:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_SPI1_Init+0x64>)
 8000808:	f44f 7282 	mov.w	r2, #260	; 0x104
 800080c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_SPI1_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_SPI1_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_SPI1_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_SPI1_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_SPI1_Init+0x64>)
 8000828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800082c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_SPI1_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <MX_SPI1_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_SPI1_Init+0x64>)
 800083c:	2200      	movs	r2, #0
 800083e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <MX_SPI1_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_SPI1_Init+0x64>)
 8000848:	220a      	movs	r2, #10
 800084a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_SPI1_Init+0x64>)
 800084e:	f003 ff8d 	bl	800476c <HAL_SPI_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000858:	f000 f950 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000210 	.word	0x20000210
 8000864:	40013000 	.word	0x40013000

08000868 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	; 0x30
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
 8000882:	4b98      	ldr	r3, [pc, #608]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a97      	ldr	r2, [pc, #604]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 8000888:	f043 0310 	orr.w	r3, r3, #16
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b95      	ldr	r3, [pc, #596]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0310 	and.w	r3, r3, #16
 8000896:	61bb      	str	r3, [r7, #24]
 8000898:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	4b91      	ldr	r3, [pc, #580]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a90      	ldr	r2, [pc, #576]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b8e      	ldr	r3, [pc, #568]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b8a      	ldr	r3, [pc, #552]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a89      	ldr	r2, [pc, #548]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b87      	ldr	r3, [pc, #540]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b83      	ldr	r3, [pc, #524]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a82      	ldr	r2, [pc, #520]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b80      	ldr	r3, [pc, #512]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	4b7c      	ldr	r3, [pc, #496]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a7b      	ldr	r2, [pc, #492]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b79      	ldr	r3, [pc, #484]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b75      	ldr	r3, [pc, #468]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a74      	ldr	r2, [pc, #464]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b72      	ldr	r3, [pc, #456]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0308 	and.w	r3, r3, #8
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BAR4_Pin|CS_I2C_SPI_Pin|BAR2_Pin|BAR3_Pin
 8000926:	2200      	movs	r2, #0
 8000928:	217c      	movs	r1, #124	; 0x7c
 800092a:	486f      	ldr	r0, [pc, #444]	; (8000ae8 <MX_GPIO_Init+0x280>)
 800092c:	f001 f8c4 	bl	8001ab8 <HAL_GPIO_WritePin>
                          |BAR0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BAR1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8000936:	486d      	ldr	r0, [pc, #436]	; (8000aec <MX_GPIO_Init+0x284>)
 8000938:	f001 f8be 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800093c:	2201      	movs	r2, #1
 800093e:	2101      	movs	r1, #1
 8000940:	486a      	ldr	r0, [pc, #424]	; (8000aec <MX_GPIO_Init+0x284>)
 8000942:	f001 f8b9 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000946:	2200      	movs	r2, #0
 8000948:	f24f 0190 	movw	r1, #61584	; 0xf090
 800094c:	4868      	ldr	r0, [pc, #416]	; (8000af0 <MX_GPIO_Init+0x288>)
 800094e:	f001 f8b3 	bl	8001ab8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin|BAR7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BAR5_Pin|BAR6_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2130      	movs	r1, #48	; 0x30
 8000956:	4867      	ldr	r0, [pc, #412]	; (8000af4 <MX_GPIO_Init+0x28c>)
 8000958:	f001 f8ae 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BAR4_Pin CS_I2C_SPI_Pin BAR2_Pin BAR3_Pin
                           BAR0_Pin */
  GPIO_InitStruct.Pin = BAR4_Pin|CS_I2C_SPI_Pin|BAR2_Pin|BAR3_Pin
 800095c:	237c      	movs	r3, #124	; 0x7c
 800095e:	61fb      	str	r3, [r7, #28]
                          |BAR0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	485d      	ldr	r0, [pc, #372]	; (8000ae8 <MX_GPIO_Init+0x280>)
 8000974:	f000 ff04 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : BAR1_Pin OTG_FS_PowerSwitchOn_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = BAR1_Pin|OTG_FS_PowerSwitchOn_Pin|BUZZER_Pin;
 8000978:	f642 0301 	movw	r3, #10241	; 0x2801
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4856      	ldr	r0, [pc, #344]	; (8000aec <MX_GPIO_Init+0x284>)
 8000992:	f000 fef5 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000996:	2308      	movs	r3, #8
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009a6:	2305      	movs	r3, #5
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	484e      	ldr	r0, [pc, #312]	; (8000aec <MX_GPIO_Init+0x284>)
 80009b2:	f000 fee5 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b6:	2301      	movs	r3, #1
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ba:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	484b      	ldr	r0, [pc, #300]	; (8000af8 <MX_GPIO_Init+0x290>)
 80009cc:	f000 fed8 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_UP_Pin BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_RIGHT_Pin;
 80009d0:	2330      	movs	r3, #48	; 0x30
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d8:	2301      	movs	r3, #1
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4842      	ldr	r0, [pc, #264]	; (8000aec <MX_GPIO_Init+0x284>)
 80009e4:	f000 fecc 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_DN_Pin BTN_LEFT_Pin SW3_Pin SW4_Pin */
  GPIO_InitStruct.Pin = BTN_DN_Pin|BTN_LEFT_Pin|SW3_Pin|SW4_Pin;
 80009e8:	f641 0303 	movw	r3, #6147	; 0x1803
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	483d      	ldr	r0, [pc, #244]	; (8000af4 <MX_GPIO_Init+0x28c>)
 80009fe:	f000 febf 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a02:	2304      	movs	r3, #4
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4837      	ldr	r0, [pc, #220]	; (8000af4 <MX_GPIO_Init+0x28c>)
 8000a16:	f000 feb3 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_OK_Pin BTN_CANCEL_Pin */
  GPIO_InitStruct.Pin = BTN_OK_Pin|BTN_CANCEL_Pin;
 8000a1a:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	482e      	ldr	r0, [pc, #184]	; (8000ae8 <MX_GPIO_Init+0x280>)
 8000a30:	f000 fea6 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a46:	2305      	movs	r3, #5
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4828      	ldr	r0, [pc, #160]	; (8000af4 <MX_GPIO_Init+0x28c>)
 8000a52:	f000 fe95 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin SW1_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|SW1_Pin;
 8000a56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4821      	ldr	r0, [pc, #132]	; (8000af0 <MX_GPIO_Init+0x288>)
 8000a6c:	f000 fe88 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin BAR7_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a70:	f24f 0390 	movw	r3, #61584	; 0xf090
 8000a74:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin|BAR7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4819      	ldr	r0, [pc, #100]	; (8000af0 <MX_GPIO_Init+0x288>)
 8000a8a:	f000 fe79 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a8e:	2320      	movs	r3, #32
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4813      	ldr	r0, [pc, #76]	; (8000af0 <MX_GPIO_Init+0x288>)
 8000aa2:	f000 fe6d 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : BAR5_Pin BAR6_Pin */
  GPIO_InitStruct.Pin = BAR5_Pin|BAR6_Pin;
 8000aa6:	2330      	movs	r3, #48	; 0x30
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <MX_GPIO_Init+0x28c>)
 8000abe:	f000 fe5f 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ac6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <MX_GPIO_Init+0x280>)
 8000ad8:	f000 fe52 	bl	8001780 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000adc:	bf00      	nop
 8000ade:	3730      	adds	r7, #48	; 0x30
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40020800 	.word	0x40020800
 8000af0:	40020c00 	.word	0x40020c00
 8000af4:	40020400 	.word	0x40020400
 8000af8:	40020000 	.word	0x40020000

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>
	...

08000b08 <main>:
#include "seos.h"
#include "checkboard.h"
#include "task.h"

int main(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0

	HAL_Init();
 8000b0e:	f000 fc8f 	bl	8001430 <HAL_Init>
	SystemClock_Config();
 8000b12:	f7ff fdab 	bl	800066c <SystemClock_Config>
	MX_GPIO_Init();
 8000b16:	f7ff fea7 	bl	8000868 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000b1a:	f7ff fe11 	bl	8000740 <MX_I2C1_Init>
	MX_I2S3_Init();
 8000b1e:	f7ff fe3d 	bl	800079c <MX_I2S3_Init>
	MX_SPI1_Init();
 8000b22:	f7ff fe6b 	bl	80007fc <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8000b26:	f007 ff41 	bl	80089ac <MX_USB_DEVICE_Init>
	checkBoard();
 8000b2a:	f7ff fd1f 	bl	800056c <checkBoard>
	SCH_INIT(1); //in ms
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f000 f888 	bl	8000c44 <SCH_INIT>
	uint16_t periode=1000;
 8000b34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b38:	80fb      	strh	r3, [r7, #6]
	uint16_t delay=0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	80bb      	strh	r3, [r7, #4]
	/* Prepare for the 'Flash_LED' task */
	//	  TaskInit();
	/* Set up the scheduler */
	SCH_Add_Task(task1_update, delay, periode);
 8000b3e:	88fa      	ldrh	r2, [r7, #6]
 8000b40:	88bb      	ldrh	r3, [r7, #4]
 8000b42:	4619      	mov	r1, r3
 8000b44:	480b      	ldr	r0, [pc, #44]	; (8000b74 <main+0x6c>)
 8000b46:	f000 f893 	bl	8000c70 <SCH_Add_Task>
	SCH_Add_Task(task2_update, delay+100, periode);
 8000b4a:	88bb      	ldrh	r3, [r7, #4]
 8000b4c:	3364      	adds	r3, #100	; 0x64
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	88fa      	ldrh	r2, [r7, #6]
 8000b52:	4619      	mov	r1, r3
 8000b54:	4808      	ldr	r0, [pc, #32]	; (8000b78 <main+0x70>)
 8000b56:	f000 f88b 	bl	8000c70 <SCH_Add_Task>
	SCH_Add_Task(task3_update, delay+200, periode);
 8000b5a:	88bb      	ldrh	r3, [r7, #4]
 8000b5c:	33c8      	adds	r3, #200	; 0xc8
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	88fa      	ldrh	r2, [r7, #6]
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <main+0x74>)
 8000b66:	f000 f883 	bl	8000c70 <SCH_Add_Task>
	//	SCH_Add_Task(task4_update, delay+0, periode);
	SCH_START();
 8000b6a:	f000 f877 	bl	8000c5c <SCH_START>
	while (1)
	{
		SCH_Dispatch_Tasks();
 8000b6e:	f000 f8d7 	bl	8000d20 <SCH_Dispatch_Tasks>
 8000b72:	e7fc      	b.n	8000b6e <main+0x66>
 8000b74:	08001395 	.word	0x08001395
 8000b78:	080013ad 	.word	0x080013ad
 8000b7c:	080013c5 	.word	0x080013c5

08000b80 <HAL_TIM_PeriodElapsedCallback>:

uint8_t Error_code_G;
sTask SCH_tasks_G[SCH_MAX_TASKS];


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	if((htim->Instance)==TIM2){
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b90:	d101      	bne.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0x16>
//		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //debuging LED
		SCH_update();
 8000b92:	f000 f959 	bl	8000e48 <SCH_update>
	}
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <MX_TIM2_Init>:


void MX_TIM2_Init(uint32_t periode)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <MX_TIM2_Init+0xa0>)
 8000bc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bc6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 42000-1; // harusnya 16 bit (0-65536)
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <MX_TIM2_Init+0xa0>)
 8000bca:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000bce:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <MX_TIM2_Init+0xa0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = (periode*2)-1;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	4a18      	ldr	r2, [pc, #96]	; (8000c40 <MX_TIM2_Init+0xa0>)
 8000bde:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_TIM2_Init+0xa0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MX_TIM2_Init+0xa0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bec:	4814      	ldr	r0, [pc, #80]	; (8000c40 <MX_TIM2_Init+0xa0>)
 8000bee:	f003 fe46 	bl	800487e <HAL_TIM_Base_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8000bf8:	f7ff ff80 	bl	8000afc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c00:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c02:	f107 0310 	add.w	r3, r7, #16
 8000c06:	4619      	mov	r1, r3
 8000c08:	480d      	ldr	r0, [pc, #52]	; (8000c40 <MX_TIM2_Init+0xa0>)
 8000c0a:	f003 ffff 	bl	8004c0c <HAL_TIM_ConfigClockSource>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM2_Init+0x78>
	{
		Error_Handler();
 8000c14:	f7ff ff72 	bl	8000afc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	4619      	mov	r1, r3
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <MX_TIM2_Init+0xa0>)
 8000c28:	f004 fa1a 	bl	8005060 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 8000c32:	f7ff ff63 	bl	8000afc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	3720      	adds	r7, #32
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000268 	.word	0x20000268

08000c44 <SCH_INIT>:


void SCH_INIT(uint32_t periode){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	/* Scheduler in ms */
	MX_TIM2_Init(periode);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff ffa7 	bl	8000ba0 <MX_TIM2_Init>

	/* USER CODE END 2 */
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <SCH_START>:

void SCH_START(void){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <SCH_START+0x10>)
 8000c62:	f003 fe5b 	bl	800491c <HAL_TIM_Base_Start_IT>
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000268 	.word	0x20000268

08000c70 <SCH_Add_Task>:


uint8_t SCH_Add_Task(void (* pFunction)(),uint16_t DELAY,uint16_t PERIOD)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	807b      	strh	r3, [r7, #2]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	803b      	strh	r3, [r7, #0]
	uint8_t Index = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]
	/* First find a gap in the array (if there is one) */
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)){
 8000c84:	e002      	b.n	8000c8c <SCH_Add_Task+0x1c>
		Index++;
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	73fb      	strb	r3, [r7, #15]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)){
 8000c8c:	7bfa      	ldrb	r2, [r7, #15]
 8000c8e:	4922      	ldr	r1, [pc, #136]	; (8000d18 <SCH_Add_Task+0xa8>)
 8000c90:	4613      	mov	r3, r2
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	4413      	add	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	440b      	add	r3, r1
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d002      	beq.n	8000ca6 <SCH_Add_Task+0x36>
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d9ef      	bls.n	8000c86 <SCH_Add_Task+0x16>
	}
	/* Have we reached the end of the list? */
	if (Index == SCH_MAX_TASKS){
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	2b04      	cmp	r3, #4
 8000caa:	d104      	bne.n	8000cb6 <SCH_Add_Task+0x46>
		/* Task list is full
    -> set the global error variable */
		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <SCH_Add_Task+0xac>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]
		/* Also return an error code */
		return SCH_MAX_TASKS;
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	e02a      	b.n	8000d0c <SCH_Add_Task+0x9c>
	}
	/* If we're here, there is a space in the task array */
	SCH_tasks_G[Index].pTask = pFunction;
 8000cb6:	7bfa      	ldrb	r2, [r7, #15]
 8000cb8:	4917      	ldr	r1, [pc, #92]	; (8000d18 <SCH_Add_Task+0xa8>)
 8000cba:	4613      	mov	r3, r2
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	4413      	add	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Delay = DELAY + 1;
 8000cc8:	7bfa      	ldrb	r2, [r7, #15]
 8000cca:	887b      	ldrh	r3, [r7, #2]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	b298      	uxth	r0, r3
 8000cd0:	4911      	ldr	r1, [pc, #68]	; (8000d18 <SCH_Add_Task+0xa8>)
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	4413      	add	r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	440b      	add	r3, r1
 8000cdc:	3304      	adds	r3, #4
 8000cde:	4602      	mov	r2, r0
 8000ce0:	801a      	strh	r2, [r3, #0]
	SCH_tasks_G[Index].Period = PERIOD;
 8000ce2:	7bfa      	ldrb	r2, [r7, #15]
 8000ce4:	490c      	ldr	r1, [pc, #48]	; (8000d18 <SCH_Add_Task+0xa8>)
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	4413      	add	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	440b      	add	r3, r1
 8000cf0:	3306      	adds	r3, #6
 8000cf2:	883a      	ldrh	r2, [r7, #0]
 8000cf4:	801a      	strh	r2, [r3, #0]
	SCH_tasks_G[Index].RunMe = 0;
 8000cf6:	7bfa      	ldrb	r2, [r7, #15]
 8000cf8:	4907      	ldr	r1, [pc, #28]	; (8000d18 <SCH_Add_Task+0xa8>)
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	4413      	add	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	440b      	add	r3, r1
 8000d04:	3308      	adds	r3, #8
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
	return Index; /* return pos. of task (to allow deletion) */
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	200002b4 	.word	0x200002b4
 8000d1c:	200002b0 	.word	0x200002b0

08000d20 <SCH_Dispatch_Tasks>:


void SCH_Dispatch_Tasks(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
	uint8_t Index;
	/* Dispatches (runs) the next task (if one is ready) */
	for (Index = 0; Index < SCH_MAX_TASKS; Index++){
 8000d26:	2300      	movs	r3, #0
 8000d28:	71fb      	strb	r3, [r7, #7]
 8000d2a:	e039      	b.n	8000da0 <SCH_Dispatch_Tasks+0x80>
		if (SCH_tasks_G[Index].RunMe > 0){
 8000d2c:	79fa      	ldrb	r2, [r7, #7]
 8000d2e:	4920      	ldr	r1, [pc, #128]	; (8000db0 <SCH_Dispatch_Tasks+0x90>)
 8000d30:	4613      	mov	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	4413      	add	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	440b      	add	r3, r1
 8000d3a:	3308      	adds	r3, #8
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d02b      	beq.n	8000d9a <SCH_Dispatch_Tasks+0x7a>
			(*SCH_tasks_G[Index].pTask)(); /* Run the task */
 8000d42:	79fa      	ldrb	r2, [r7, #7]
 8000d44:	491a      	ldr	r1, [pc, #104]	; (8000db0 <SCH_Dispatch_Tasks+0x90>)
 8000d46:	4613      	mov	r3, r2
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	4413      	add	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	440b      	add	r3, r1
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4798      	blx	r3
			SCH_tasks_G[Index].RunMe --; /* Reduce RunMe count */
 8000d54:	79fa      	ldrb	r2, [r7, #7]
 8000d56:	4916      	ldr	r1, [pc, #88]	; (8000db0 <SCH_Dispatch_Tasks+0x90>)
 8000d58:	4613      	mov	r3, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	4413      	add	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	440b      	add	r3, r1
 8000d62:	3308      	adds	r3, #8
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	b2d8      	uxtb	r0, r3
 8000d6a:	4911      	ldr	r1, [pc, #68]	; (8000db0 <SCH_Dispatch_Tasks+0x90>)
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	4413      	add	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	440b      	add	r3, r1
 8000d76:	3308      	adds	r3, #8
 8000d78:	4602      	mov	r2, r0
 8000d7a:	701a      	strb	r2, [r3, #0]
			/* Periodic tasks will automatically run again
      - if this is a 'one shot' task, delete it */
			if (SCH_tasks_G[Index].Period == 0){
 8000d7c:	79fa      	ldrb	r2, [r7, #7]
 8000d7e:	490c      	ldr	r1, [pc, #48]	; (8000db0 <SCH_Dispatch_Tasks+0x90>)
 8000d80:	4613      	mov	r3, r2
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	4413      	add	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	440b      	add	r3, r1
 8000d8a:	3306      	adds	r3, #6
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d103      	bne.n	8000d9a <SCH_Dispatch_Tasks+0x7a>
				SCH_Delete_Task(Index);
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 f80d 	bl	8000db4 <SCH_Delete_Task>
	for (Index = 0; Index < SCH_MAX_TASKS; Index++){
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	71fb      	strb	r3, [r7, #7]
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	d9c2      	bls.n	8000d2c <SCH_Dispatch_Tasks+0xc>
	}
	/* Report system status */
	//SCH_Report_Status();
	/* The scheduler enters idle mode at this point */
//	sleep_mode();
}
 8000da6:	bf00      	nop
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200002b4 	.word	0x200002b4

08000db4 <SCH_Delete_Task>:


uint8_t SCH_Delete_Task(const uint8_t TASK_INDEX)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
	unsigned char Return_code;
	if (SCH_tasks_G[TASK_INDEX].pTask == 0){
 8000dbe:	79fa      	ldrb	r2, [r7, #7]
 8000dc0:	491f      	ldr	r1, [pc, #124]	; (8000e40 <SCH_Delete_Task+0x8c>)
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	4413      	add	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	440b      	add	r3, r1
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d105      	bne.n	8000dde <SCH_Delete_Task+0x2a>
		/* No task at this location...
    -> set the global error variable */
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <SCH_Delete_Task+0x90>)
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	701a      	strb	r2, [r3, #0]
		/* ...also return an error code */
		Return_code = RETURN_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	e001      	b.n	8000de2 <SCH_Delete_Task+0x2e>
	}
	else {
		Return_code = RETURN_NORMAL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	73fb      	strb	r3, [r7, #15]
	}
	SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 8000de2:	79fa      	ldrb	r2, [r7, #7]
 8000de4:	4916      	ldr	r1, [pc, #88]	; (8000e40 <SCH_Delete_Task+0x8c>)
 8000de6:	4613      	mov	r3, r2
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	4413      	add	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	440b      	add	r3, r1
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Delay = 0;
 8000df4:	79fa      	ldrb	r2, [r7, #7]
 8000df6:	4912      	ldr	r1, [pc, #72]	; (8000e40 <SCH_Delete_Task+0x8c>)
 8000df8:	4613      	mov	r3, r2
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	4413      	add	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	440b      	add	r3, r1
 8000e02:	3304      	adds	r3, #4
 8000e04:	2200      	movs	r2, #0
 8000e06:	801a      	strh	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Period = 0;
 8000e08:	79fa      	ldrb	r2, [r7, #7]
 8000e0a:	490d      	ldr	r1, [pc, #52]	; (8000e40 <SCH_Delete_Task+0x8c>)
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4413      	add	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	440b      	add	r3, r1
 8000e16:	3306      	adds	r3, #6
 8000e18:	2200      	movs	r2, #0
 8000e1a:	801a      	strh	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].RunMe = 0;
 8000e1c:	79fa      	ldrb	r2, [r7, #7]
 8000e1e:	4908      	ldr	r1, [pc, #32]	; (8000e40 <SCH_Delete_Task+0x8c>)
 8000e20:	4613      	mov	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4413      	add	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	440b      	add	r3, r1
 8000e2a:	3308      	adds	r3, #8
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]
	return Return_code; /* return status */
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	200002b4 	.word	0x200002b4
 8000e44:	200002b0 	.word	0x200002b0

08000e48 <SCH_update>:

void SCH_update(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
	uint8_t Index;
	/* NOTE: calculations are in *TICKS* (not milliseconds) */
	for (Index = 0; Index < SCH_MAX_TASKS; Index++){
 8000e4e:	2300      	movs	r3, #0
 8000e50:	71fb      	strb	r3, [r7, #7]
 8000e52:	e05c      	b.n	8000f0e <SCH_update+0xc6>
		/* Check if there is a task at this location */
		if (SCH_tasks_G[Index].pTask){
 8000e54:	79fa      	ldrb	r2, [r7, #7]
 8000e56:	4933      	ldr	r1, [pc, #204]	; (8000f24 <SCH_update+0xdc>)
 8000e58:	4613      	mov	r3, r2
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4413      	add	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	440b      	add	r3, r1
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d04f      	beq.n	8000f08 <SCH_update+0xc0>
			if (--SCH_tasks_G[Index].Delay == 0){
 8000e68:	79fa      	ldrb	r2, [r7, #7]
 8000e6a:	492e      	ldr	r1, [pc, #184]	; (8000f24 <SCH_update+0xdc>)
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4413      	add	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	440b      	add	r3, r1
 8000e76:	3304      	adds	r3, #4
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	b298      	uxth	r0, r3
 8000e7e:	4929      	ldr	r1, [pc, #164]	; (8000f24 <SCH_update+0xdc>)
 8000e80:	4613      	mov	r3, r2
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	4413      	add	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	440b      	add	r3, r1
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	4601      	mov	r1, r0
 8000e8e:	8019      	strh	r1, [r3, #0]
 8000e90:	4924      	ldr	r1, [pc, #144]	; (8000f24 <SCH_update+0xdc>)
 8000e92:	4613      	mov	r3, r2
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	4413      	add	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d131      	bne.n	8000f08 <SCH_update+0xc0>
				/* The task is due to run */
				SCH_tasks_G[Index].RunMe++; /* Inc. 'RunMe' flag */
 8000ea4:	79fa      	ldrb	r2, [r7, #7]
 8000ea6:	491f      	ldr	r1, [pc, #124]	; (8000f24 <SCH_update+0xdc>)
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4413      	add	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	3308      	adds	r3, #8
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	b2d8      	uxtb	r0, r3
 8000eba:	491a      	ldr	r1, [pc, #104]	; (8000f24 <SCH_update+0xdc>)
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	3308      	adds	r3, #8
 8000ec8:	4602      	mov	r2, r0
 8000eca:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[Index].Period){
 8000ecc:	79fa      	ldrb	r2, [r7, #7]
 8000ece:	4915      	ldr	r1, [pc, #84]	; (8000f24 <SCH_update+0xdc>)
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	440b      	add	r3, r1
 8000eda:	3306      	adds	r3, #6
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d012      	beq.n	8000f08 <SCH_update+0xc0>
					/* Schedule regular tasks to run again */
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 8000ee2:	79f9      	ldrb	r1, [r7, #7]
 8000ee4:	79fa      	ldrb	r2, [r7, #7]
 8000ee6:	480f      	ldr	r0, [pc, #60]	; (8000f24 <SCH_update+0xdc>)
 8000ee8:	460b      	mov	r3, r1
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	440b      	add	r3, r1
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4403      	add	r3, r0
 8000ef2:	3306      	adds	r3, #6
 8000ef4:	8818      	ldrh	r0, [r3, #0]
 8000ef6:	490b      	ldr	r1, [pc, #44]	; (8000f24 <SCH_update+0xdc>)
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	440b      	add	r3, r1
 8000f02:	3304      	adds	r3, #4
 8000f04:	4602      	mov	r2, r0
 8000f06:	801a      	strh	r2, [r3, #0]
	for (Index = 0; Index < SCH_MAX_TASKS; Index++){
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	71fb      	strb	r3, [r7, #7]
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d99f      	bls.n	8000e54 <SCH_update+0xc>
				}
			}
		}
	}
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	200002b4 	.word	0x200002b4

08000f28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f66:	2007      	movs	r0, #7
 8000f68:	f000 fbc8 	bl	80016fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40023800 	.word	0x40023800

08000f78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a19      	ldr	r2, [pc, #100]	; (8000ffc <HAL_I2C_MspInit+0x84>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d12c      	bne.n	8000ff4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <HAL_I2C_MspInit+0x88>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a17      	ldr	r2, [pc, #92]	; (8001000 <HAL_I2C_MspInit+0x88>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_I2C_MspInit+0x88>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000fb6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fbc:	2312      	movs	r3, #18
 8000fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	480c      	ldr	r0, [pc, #48]	; (8001004 <HAL_I2C_MspInit+0x8c>)
 8000fd4:	f000 fbd4 	bl	8001780 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <HAL_I2C_MspInit+0x88>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	4a07      	ldr	r2, [pc, #28]	; (8001000 <HAL_I2C_MspInit+0x88>)
 8000fe2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <HAL_I2C_MspInit+0x88>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	3728      	adds	r7, #40	; 0x28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40005400 	.word	0x40005400
 8001000:	40023800 	.word	0x40023800
 8001004:	40020400 	.word	0x40020400

08001008 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08e      	sub	sp, #56	; 0x38
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a31      	ldr	r2, [pc, #196]	; (80010f8 <HAL_I2S_MspInit+0xf0>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d15a      	bne.n	80010ee <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001038:	2301      	movs	r3, #1
 800103a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800103c:	23c0      	movs	r3, #192	; 0xc0
 800103e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001040:	2302      	movs	r3, #2
 8001042:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4618      	mov	r0, r3
 800104a:	f003 fa4f 	bl	80044ec <HAL_RCCEx_PeriphCLKConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001054:	f7ff fd52 	bl	8000afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	4b27      	ldr	r3, [pc, #156]	; (80010fc <HAL_I2S_MspInit+0xf4>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	4a26      	ldr	r2, [pc, #152]	; (80010fc <HAL_I2S_MspInit+0xf4>)
 8001062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
 8001068:	4b24      	ldr	r3, [pc, #144]	; (80010fc <HAL_I2S_MspInit+0xf4>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	4b20      	ldr	r3, [pc, #128]	; (80010fc <HAL_I2S_MspInit+0xf4>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	4a1f      	ldr	r2, [pc, #124]	; (80010fc <HAL_I2S_MspInit+0xf4>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6313      	str	r3, [r2, #48]	; 0x30
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <HAL_I2S_MspInit+0xf4>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_I2S_MspInit+0xf4>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	4a18      	ldr	r2, [pc, #96]	; (80010fc <HAL_I2S_MspInit+0xf4>)
 800109a:	f043 0304 	orr.w	r3, r3, #4
 800109e:	6313      	str	r3, [r2, #48]	; 0x30
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <HAL_I2S_MspInit+0xf4>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80010ac:	2310      	movs	r3, #16
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010bc:	2306      	movs	r3, #6
 80010be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c4:	4619      	mov	r1, r3
 80010c6:	480e      	ldr	r0, [pc, #56]	; (8001100 <HAL_I2S_MspInit+0xf8>)
 80010c8:	f000 fb5a 	bl	8001780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80010cc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010de:	2306      	movs	r3, #6
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e6:	4619      	mov	r1, r3
 80010e8:	4806      	ldr	r0, [pc, #24]	; (8001104 <HAL_I2S_MspInit+0xfc>)
 80010ea:	f000 fb49 	bl	8001780 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010ee:	bf00      	nop
 80010f0:	3738      	adds	r7, #56	; 0x38
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40003c00 	.word	0x40003c00
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020000 	.word	0x40020000
 8001104:	40020800 	.word	0x40020800

08001108 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a19      	ldr	r2, [pc, #100]	; (800118c <HAL_SPI_MspInit+0x84>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d12b      	bne.n	8001182 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <HAL_SPI_MspInit+0x88>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	4a17      	ldr	r2, [pc, #92]	; (8001190 <HAL_SPI_MspInit+0x88>)
 8001134:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001138:	6453      	str	r3, [r2, #68]	; 0x44
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_SPI_MspInit+0x88>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_SPI_MspInit+0x88>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a10      	ldr	r2, [pc, #64]	; (8001190 <HAL_SPI_MspInit+0x88>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <HAL_SPI_MspInit+0x88>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001162:	23e0      	movs	r3, #224	; 0xe0
 8001164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001172:	2305      	movs	r3, #5
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <HAL_SPI_MspInit+0x8c>)
 800117e:	f000 faff 	bl	8001780 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001182:	bf00      	nop
 8001184:	3728      	adds	r7, #40	; 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40013000 	.word	0x40013000
 8001190:	40023800 	.word	0x40023800
 8001194:	40020000 	.word	0x40020000

08001198 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011a8:	d115      	bne.n	80011d6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <HAL_TIM_Base_MspInit+0x48>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <HAL_TIM_Base_MspInit+0x48>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HAL_TIM_Base_MspInit+0x48>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	201c      	movs	r0, #28
 80011cc:	f000 faa1 	bl	8001712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011d0:	201c      	movs	r0, #28
 80011d2:	f000 faba 	bl	800174a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800

080011e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <NMI_Handler+0x4>

080011ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ee:	e7fe      	b.n	80011ee <HardFault_Handler+0x4>

080011f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <MemManage_Handler+0x4>

080011f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <BusFault_Handler+0x4>

080011fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <UsageFault_Handler+0x4>

08001202 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001230:	f000 f950 	bl	80014d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}

08001238 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <TIM2_IRQHandler+0x10>)
 800123e:	f003 fbdd 	bl	80049fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000268 	.word	0x20000268

0800124c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <OTG_FS_IRQHandler+0x10>)
 8001252:	f001 fb99 	bl	8002988 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200017cc 	.word	0x200017cc

08001260 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	e00a      	b.n	8001288 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001272:	f3af 8000 	nop.w
 8001276:	4601      	mov	r1, r0
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	60ba      	str	r2, [r7, #8]
 800127e:	b2ca      	uxtb	r2, r1
 8001280:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	3301      	adds	r3, #1
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	dbf0      	blt.n	8001272 <_read+0x12>
  }

  return len;
 8001290:	687b      	ldr	r3, [r7, #4]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <_close>:
  }
  return len;
}

int _close(int file)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012c2:	605a      	str	r2, [r3, #4]
  return 0;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <_isatty>:

int _isatty(int file)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800130c:	4a14      	ldr	r2, [pc, #80]	; (8001360 <_sbrk+0x5c>)
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <_sbrk+0x60>)
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <_sbrk+0x64>)
 8001322:	4a12      	ldr	r2, [pc, #72]	; (800136c <_sbrk+0x68>)
 8001324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <_sbrk+0x64>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	429a      	cmp	r2, r3
 8001332:	d207      	bcs.n	8001344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001334:	f008 f9b6 	bl	80096a4 <__errno>
 8001338:	4603      	mov	r3, r0
 800133a:	220c      	movs	r2, #12
 800133c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001342:	e009      	b.n	8001358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <_sbrk+0x64>)
 8001354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001356:	68fb      	ldr	r3, [r7, #12]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20020000 	.word	0x20020000
 8001364:	00000400 	.word	0x00000400
 8001368:	200002e4 	.word	0x200002e4
 800136c:	20002048 	.word	0x20002048

08001370 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <SystemInit+0x20>)
 8001376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <SystemInit+0x20>)
 800137c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <task1_update>:
#include "main.h"
#include "stdio.h"


void task1_update(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	//dummy running task
	HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 8001398:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <task1_update+0x14>)
 800139e:	f000 fba4 	bl	8001aea <HAL_GPIO_TogglePin>
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40020c00 	.word	0x40020c00

080013ac <task2_update>:

void task2_update(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	//dummy running task
	HAL_GPIO_TogglePin(LD4_GPIO_Port,LD4_Pin);
 80013b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <task2_update+0x14>)
 80013b6:	f000 fb98 	bl	8001aea <HAL_GPIO_TogglePin>
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40020c00 	.word	0x40020c00

080013c4 <task3_update>:


void task3_update(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	//dummy running task
	HAL_GPIO_TogglePin(LD5_GPIO_Port,LD5_Pin);
 80013c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <task3_update+0x14>)
 80013ce:	f000 fb8c 	bl	8001aea <HAL_GPIO_TogglePin>
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40020c00 	.word	0x40020c00

080013dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001414 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013e0:	480d      	ldr	r0, [pc, #52]	; (8001418 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013e2:	490e      	ldr	r1, [pc, #56]	; (800141c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013e4:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e8:	e002      	b.n	80013f0 <LoopCopyDataInit>

080013ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ee:	3304      	adds	r3, #4

080013f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f4:	d3f9      	bcc.n	80013ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013f8:	4c0b      	ldr	r4, [pc, #44]	; (8001428 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013fc:	e001      	b.n	8001402 <LoopFillZerobss>

080013fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001400:	3204      	adds	r2, #4

08001402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001404:	d3fb      	bcc.n	80013fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001406:	f7ff ffb3 	bl	8001370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800140a:	f008 f951 	bl	80096b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140e:	f7ff fb7b 	bl	8000b08 <main>
  bx  lr    
 8001412:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001414:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800141c:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8001420:	0800a340 	.word	0x0800a340
  ldr r2, =_sbss
 8001424:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8001428:	20002044 	.word	0x20002044

0800142c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC_IRQHandler>
	...

08001430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <HAL_Init+0x40>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <HAL_Init+0x40>)
 800143a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800143e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_Init+0x40>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <HAL_Init+0x40>)
 8001446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800144a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <HAL_Init+0x40>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a07      	ldr	r2, [pc, #28]	; (8001470 <HAL_Init+0x40>)
 8001452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001456:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001458:	2003      	movs	r0, #3
 800145a:	f000 f94f 	bl	80016fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800145e:	2000      	movs	r0, #0
 8001460:	f000 f808 	bl	8001474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001464:	f7ff fd60 	bl	8000f28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40023c00 	.word	0x40023c00

08001474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_InitTick+0x54>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_InitTick+0x58>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4619      	mov	r1, r3
 8001486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148a:	fbb3 f3f1 	udiv	r3, r3, r1
 800148e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001492:	4618      	mov	r0, r3
 8001494:	f000 f967 	bl	8001766 <HAL_SYSTICK_Config>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e00e      	b.n	80014c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b0f      	cmp	r3, #15
 80014a6:	d80a      	bhi.n	80014be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a8:	2200      	movs	r2, #0
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014b0:	f000 f92f 	bl	8001712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b4:	4a06      	ldr	r2, [pc, #24]	; (80014d0 <HAL_InitTick+0x5c>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e000      	b.n	80014c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000000 	.word	0x20000000
 80014cc:	20000008 	.word	0x20000008
 80014d0:	20000004 	.word	0x20000004

080014d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x20>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_IncTick+0x24>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <HAL_IncTick+0x24>)
 80014e6:	6013      	str	r3, [r2, #0]
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000008 	.word	0x20000008
 80014f8:	200002e8 	.word	0x200002e8

080014fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <HAL_GetTick+0x14>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	200002e8 	.word	0x200002e8

08001514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800151c:	f7ff ffee 	bl	80014fc <HAL_GetTick>
 8001520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800152c:	d005      	beq.n	800153a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_Delay+0x44>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4413      	add	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800153a:	bf00      	nop
 800153c:	f7ff ffde 	bl	80014fc <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	429a      	cmp	r2, r3
 800154a:	d8f7      	bhi.n	800153c <HAL_Delay+0x28>
  {
  }
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000008 	.word	0x20000008

0800155c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001578:	4013      	ands	r3, r2
 800157a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800158c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158e:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	60d3      	str	r3, [r2, #12]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <__NVIC_GetPriorityGrouping+0x18>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	f003 0307 	and.w	r3, r3, #7
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	db0b      	blt.n	80015ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	f003 021f 	and.w	r2, r3, #31
 80015d8:	4907      	ldr	r1, [pc, #28]	; (80015f8 <__NVIC_EnableIRQ+0x38>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	2001      	movs	r0, #1
 80015e2:	fa00 f202 	lsl.w	r2, r0, r2
 80015e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000e100 	.word	0xe000e100

080015fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	; (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	; (800164c <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf28      	it	cs
 800166e:	2304      	movcs	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d902      	bls.n	8001680 <NVIC_EncodePriority+0x30>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3b03      	subs	r3, #3
 800167e:	e000      	b.n	8001682 <NVIC_EncodePriority+0x32>
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001698:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
         );
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c8:	d301      	bcc.n	80016ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00f      	b.n	80016ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <SysTick_Config+0x40>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d6:	210f      	movs	r1, #15
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016dc:	f7ff ff8e 	bl	80015fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <SysTick_Config+0x40>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e6:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <SysTick_Config+0x40>)
 80016e8:	2207      	movs	r2, #7
 80016ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	e000e010 	.word	0xe000e010

080016fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ff29 	bl	800155c <__NVIC_SetPriorityGrouping>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001712:	b580      	push	{r7, lr}
 8001714:	b086      	sub	sp, #24
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001724:	f7ff ff3e 	bl	80015a4 <__NVIC_GetPriorityGrouping>
 8001728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	6978      	ldr	r0, [r7, #20]
 8001730:	f7ff ff8e 	bl	8001650 <NVIC_EncodePriority>
 8001734:	4602      	mov	r2, r0
 8001736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff5d 	bl	80015fc <__NVIC_SetPriority>
}
 8001742:	bf00      	nop
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff31 	bl	80015c0 <__NVIC_EnableIRQ>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff ffa2 	bl	80016b8 <SysTick_Config>
 8001774:	4603      	mov	r3, r0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001792:	2300      	movs	r3, #0
 8001794:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
 800179a:	e16b      	b.n	8001a74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800179c:	2201      	movs	r2, #1
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	f040 815a 	bne.w	8001a6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d005      	beq.n	80017d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d130      	bne.n	8001834 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	2203      	movs	r2, #3
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	68da      	ldr	r2, [r3, #12]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001808:	2201      	movs	r2, #1
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	f003 0201 	and.w	r2, r3, #1
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	2b03      	cmp	r3, #3
 800183e:	d017      	beq.n	8001870 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2203      	movs	r2, #3
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d123      	bne.n	80018c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	08da      	lsrs	r2, r3, #3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3208      	adds	r2, #8
 8001884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	220f      	movs	r2, #15
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	691a      	ldr	r2, [r3, #16]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	08da      	lsrs	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3208      	adds	r2, #8
 80018be:	69b9      	ldr	r1, [r7, #24]
 80018c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0203 	and.w	r2, r3, #3
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 80b4 	beq.w	8001a6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b60      	ldr	r3, [pc, #384]	; (8001a8c <HAL_GPIO_Init+0x30c>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	4a5f      	ldr	r2, [pc, #380]	; (8001a8c <HAL_GPIO_Init+0x30c>)
 8001910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001914:	6453      	str	r3, [r2, #68]	; 0x44
 8001916:	4b5d      	ldr	r3, [pc, #372]	; (8001a8c <HAL_GPIO_Init+0x30c>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001922:	4a5b      	ldr	r2, [pc, #364]	; (8001a90 <HAL_GPIO_Init+0x310>)
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	3302      	adds	r3, #2
 800192a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	220f      	movs	r2, #15
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a52      	ldr	r2, [pc, #328]	; (8001a94 <HAL_GPIO_Init+0x314>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d02b      	beq.n	80019a6 <HAL_GPIO_Init+0x226>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a51      	ldr	r2, [pc, #324]	; (8001a98 <HAL_GPIO_Init+0x318>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d025      	beq.n	80019a2 <HAL_GPIO_Init+0x222>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a50      	ldr	r2, [pc, #320]	; (8001a9c <HAL_GPIO_Init+0x31c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d01f      	beq.n	800199e <HAL_GPIO_Init+0x21e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a4f      	ldr	r2, [pc, #316]	; (8001aa0 <HAL_GPIO_Init+0x320>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d019      	beq.n	800199a <HAL_GPIO_Init+0x21a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a4e      	ldr	r2, [pc, #312]	; (8001aa4 <HAL_GPIO_Init+0x324>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_GPIO_Init+0x216>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4d      	ldr	r2, [pc, #308]	; (8001aa8 <HAL_GPIO_Init+0x328>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00d      	beq.n	8001992 <HAL_GPIO_Init+0x212>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4c      	ldr	r2, [pc, #304]	; (8001aac <HAL_GPIO_Init+0x32c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d007      	beq.n	800198e <HAL_GPIO_Init+0x20e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4b      	ldr	r2, [pc, #300]	; (8001ab0 <HAL_GPIO_Init+0x330>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d101      	bne.n	800198a <HAL_GPIO_Init+0x20a>
 8001986:	2307      	movs	r3, #7
 8001988:	e00e      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 800198a:	2308      	movs	r3, #8
 800198c:	e00c      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 800198e:	2306      	movs	r3, #6
 8001990:	e00a      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 8001992:	2305      	movs	r3, #5
 8001994:	e008      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 8001996:	2304      	movs	r3, #4
 8001998:	e006      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 800199a:	2303      	movs	r3, #3
 800199c:	e004      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 800199e:	2302      	movs	r3, #2
 80019a0:	e002      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 80019a6:	2300      	movs	r3, #0
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	f002 0203 	and.w	r2, r2, #3
 80019ae:	0092      	lsls	r2, r2, #2
 80019b0:	4093      	lsls	r3, r2
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b8:	4935      	ldr	r1, [pc, #212]	; (8001a90 <HAL_GPIO_Init+0x310>)
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	089b      	lsrs	r3, r3, #2
 80019be:	3302      	adds	r3, #2
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019c6:	4b3b      	ldr	r3, [pc, #236]	; (8001ab4 <HAL_GPIO_Init+0x334>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ea:	4a32      	ldr	r2, [pc, #200]	; (8001ab4 <HAL_GPIO_Init+0x334>)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019f0:	4b30      	ldr	r3, [pc, #192]	; (8001ab4 <HAL_GPIO_Init+0x334>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a14:	4a27      	ldr	r2, [pc, #156]	; (8001ab4 <HAL_GPIO_Init+0x334>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a1a:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <HAL_GPIO_Init+0x334>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a3e:	4a1d      	ldr	r2, [pc, #116]	; (8001ab4 <HAL_GPIO_Init+0x334>)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <HAL_GPIO_Init+0x334>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a68:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <HAL_GPIO_Init+0x334>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3301      	adds	r3, #1
 8001a72:	61fb      	str	r3, [r7, #28]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	2b0f      	cmp	r3, #15
 8001a78:	f67f ae90 	bls.w	800179c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3724      	adds	r7, #36	; 0x24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40013800 	.word	0x40013800
 8001a94:	40020000 	.word	0x40020000
 8001a98:	40020400 	.word	0x40020400
 8001a9c:	40020800 	.word	0x40020800
 8001aa0:	40020c00 	.word	0x40020c00
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40021400 	.word	0x40021400
 8001aac:	40021800 	.word	0x40021800
 8001ab0:	40021c00 	.word	0x40021c00
 8001ab4:	40013c00 	.word	0x40013c00

08001ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac8:	787b      	ldrb	r3, [r7, #1]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ad4:	e003      	b.n	8001ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	041a      	lsls	r2, r3, #16
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	619a      	str	r2, [r3, #24]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	460b      	mov	r3, r1
 8001af4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001afc:	887a      	ldrh	r2, [r7, #2]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4013      	ands	r3, r2
 8001b02:	041a      	lsls	r2, r3, #16
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	887b      	ldrh	r3, [r7, #2]
 8001b0a:	400b      	ands	r3, r1
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	619a      	str	r2, [r3, #24]
}
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e12b      	b.n	8001d8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d106      	bne.n	8001b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fa16 	bl	8000f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2224      	movs	r2, #36	; 0x24
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0201 	bic.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b84:	f002 fc9e 	bl	80044c4 <HAL_RCC_GetPCLK1Freq>
 8001b88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4a81      	ldr	r2, [pc, #516]	; (8001d94 <HAL_I2C_Init+0x274>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d807      	bhi.n	8001ba4 <HAL_I2C_Init+0x84>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4a80      	ldr	r2, [pc, #512]	; (8001d98 <HAL_I2C_Init+0x278>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	bf94      	ite	ls
 8001b9c:	2301      	movls	r3, #1
 8001b9e:	2300      	movhi	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	e006      	b.n	8001bb2 <HAL_I2C_Init+0x92>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4a7d      	ldr	r2, [pc, #500]	; (8001d9c <HAL_I2C_Init+0x27c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	bf94      	ite	ls
 8001bac:	2301      	movls	r3, #1
 8001bae:	2300      	movhi	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e0e7      	b.n	8001d8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4a78      	ldr	r2, [pc, #480]	; (8001da0 <HAL_I2C_Init+0x280>)
 8001bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc2:	0c9b      	lsrs	r3, r3, #18
 8001bc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	4a6a      	ldr	r2, [pc, #424]	; (8001d94 <HAL_I2C_Init+0x274>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d802      	bhi.n	8001bf4 <HAL_I2C_Init+0xd4>
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	e009      	b.n	8001c08 <HAL_I2C_Init+0xe8>
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bfa:	fb02 f303 	mul.w	r3, r2, r3
 8001bfe:	4a69      	ldr	r2, [pc, #420]	; (8001da4 <HAL_I2C_Init+0x284>)
 8001c00:	fba2 2303 	umull	r2, r3, r2, r3
 8001c04:	099b      	lsrs	r3, r3, #6
 8001c06:	3301      	adds	r3, #1
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	430b      	orrs	r3, r1
 8001c0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	495c      	ldr	r1, [pc, #368]	; (8001d94 <HAL_I2C_Init+0x274>)
 8001c24:	428b      	cmp	r3, r1
 8001c26:	d819      	bhi.n	8001c5c <HAL_I2C_Init+0x13c>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1e59      	subs	r1, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c36:	1c59      	adds	r1, r3, #1
 8001c38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c3c:	400b      	ands	r3, r1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00a      	beq.n	8001c58 <HAL_I2C_Init+0x138>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1e59      	subs	r1, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c50:	3301      	adds	r3, #1
 8001c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c56:	e051      	b.n	8001cfc <HAL_I2C_Init+0x1dc>
 8001c58:	2304      	movs	r3, #4
 8001c5a:	e04f      	b.n	8001cfc <HAL_I2C_Init+0x1dc>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d111      	bne.n	8001c88 <HAL_I2C_Init+0x168>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1e58      	subs	r0, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6859      	ldr	r1, [r3, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	440b      	add	r3, r1
 8001c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c76:	3301      	adds	r3, #1
 8001c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	bf0c      	ite	eq
 8001c80:	2301      	moveq	r3, #1
 8001c82:	2300      	movne	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	e012      	b.n	8001cae <HAL_I2C_Init+0x18e>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1e58      	subs	r0, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6859      	ldr	r1, [r3, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	0099      	lsls	r1, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bf0c      	ite	eq
 8001ca8:	2301      	moveq	r3, #1
 8001caa:	2300      	movne	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_I2C_Init+0x196>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e022      	b.n	8001cfc <HAL_I2C_Init+0x1dc>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10e      	bne.n	8001cdc <HAL_I2C_Init+0x1bc>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1e58      	subs	r0, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6859      	ldr	r1, [r3, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	440b      	add	r3, r1
 8001ccc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cda:	e00f      	b.n	8001cfc <HAL_I2C_Init+0x1dc>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1e58      	subs	r0, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6859      	ldr	r1, [r3, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	0099      	lsls	r1, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	6809      	ldr	r1, [r1, #0]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69da      	ldr	r2, [r3, #28]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6911      	ldr	r1, [r2, #16]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68d2      	ldr	r2, [r2, #12]
 8001d36:	4311      	orrs	r1, r2
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695a      	ldr	r2, [r3, #20]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2220      	movs	r2, #32
 8001d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	000186a0 	.word	0x000186a0
 8001d98:	001e847f 	.word	0x001e847f
 8001d9c:	003d08ff 	.word	0x003d08ff
 8001da0:	431bde83 	.word	0x431bde83
 8001da4:	10624dd3 	.word	0x10624dd3

08001da8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e128      	b.n	800200c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d109      	bne.n	8001dda <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a90      	ldr	r2, [pc, #576]	; (8002014 <HAL_I2S_Init+0x26c>)
 8001dd2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff f917 	bl	8001008 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001df0:	f023 030f 	bic.w	r3, r3, #15
 8001df4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d060      	beq.n	8001ec8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d102      	bne.n	8001e14 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001e0e:	2310      	movs	r3, #16
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	e001      	b.n	8001e18 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001e14:	2320      	movs	r3, #32
 8001e16:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b20      	cmp	r3, #32
 8001e1e:	d802      	bhi.n	8001e26 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001e26:	2001      	movs	r0, #1
 8001e28:	f002 fc42 	bl	80046b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e2c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e36:	d125      	bne.n	8001e84 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d010      	beq.n	8001e62 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	461a      	mov	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5c:	3305      	adds	r3, #5
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	e01f      	b.n	8001ea2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	461a      	mov	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7e:	3305      	adds	r3, #5
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	e00e      	b.n	8001ea2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	461a      	mov	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9e:	3305      	adds	r3, #5
 8001ea0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4a5c      	ldr	r2, [pc, #368]	; (8002018 <HAL_I2S_Init+0x270>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	08db      	lsrs	r3, r3, #3
 8001eac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	085b      	lsrs	r3, r3, #1
 8001ebe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	61bb      	str	r3, [r7, #24]
 8001ec6:	e003      	b.n	8001ed0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d902      	bls.n	8001edc <HAL_I2S_Init+0x134>
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	2bff      	cmp	r3, #255	; 0xff
 8001eda:	d907      	bls.n	8001eec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee0:	f043 0210 	orr.w	r2, r3, #16
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e08f      	b.n	800200c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	ea42 0103 	orr.w	r1, r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	69fa      	ldr	r2, [r7, #28]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f0a:	f023 030f 	bic.w	r3, r3, #15
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6851      	ldr	r1, [r2, #4]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6892      	ldr	r2, [r2, #8]
 8001f16:	4311      	orrs	r1, r2
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	68d2      	ldr	r2, [r2, #12]
 8001f1c:	4311      	orrs	r1, r2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6992      	ldr	r2, [r2, #24]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f2e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d161      	bne.n	8001ffc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a38      	ldr	r2, [pc, #224]	; (800201c <HAL_I2S_Init+0x274>)
 8001f3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a37      	ldr	r2, [pc, #220]	; (8002020 <HAL_I2S_Init+0x278>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d101      	bne.n	8001f4c <HAL_I2S_Init+0x1a4>
 8001f48:	4b36      	ldr	r3, [pc, #216]	; (8002024 <HAL_I2S_Init+0x27c>)
 8001f4a:	e001      	b.n	8001f50 <HAL_I2S_Init+0x1a8>
 8001f4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	4932      	ldr	r1, [pc, #200]	; (8002020 <HAL_I2S_Init+0x278>)
 8001f58:	428a      	cmp	r2, r1
 8001f5a:	d101      	bne.n	8001f60 <HAL_I2S_Init+0x1b8>
 8001f5c:	4a31      	ldr	r2, [pc, #196]	; (8002024 <HAL_I2S_Init+0x27c>)
 8001f5e:	e001      	b.n	8001f64 <HAL_I2S_Init+0x1bc>
 8001f60:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001f64:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f68:	f023 030f 	bic.w	r3, r3, #15
 8001f6c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a2b      	ldr	r2, [pc, #172]	; (8002020 <HAL_I2S_Init+0x278>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d101      	bne.n	8001f7c <HAL_I2S_Init+0x1d4>
 8001f78:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <HAL_I2S_Init+0x27c>)
 8001f7a:	e001      	b.n	8001f80 <HAL_I2S_Init+0x1d8>
 8001f7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f80:	2202      	movs	r2, #2
 8001f82:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a25      	ldr	r2, [pc, #148]	; (8002020 <HAL_I2S_Init+0x278>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d101      	bne.n	8001f92 <HAL_I2S_Init+0x1ea>
 8001f8e:	4b25      	ldr	r3, [pc, #148]	; (8002024 <HAL_I2S_Init+0x27c>)
 8001f90:	e001      	b.n	8001f96 <HAL_I2S_Init+0x1ee>
 8001f92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa2:	d003      	beq.n	8001fac <HAL_I2S_Init+0x204>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d103      	bne.n	8001fb4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001fac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	e001      	b.n	8001fb8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	897b      	ldrh	r3, [r7, #10]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fe4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a0d      	ldr	r2, [pc, #52]	; (8002020 <HAL_I2S_Init+0x278>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d101      	bne.n	8001ff4 <HAL_I2S_Init+0x24c>
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <HAL_I2S_Init+0x27c>)
 8001ff2:	e001      	b.n	8001ff8 <HAL_I2S_Init+0x250>
 8001ff4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ff8:	897a      	ldrh	r2, [r7, #10]
 8001ffa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3720      	adds	r7, #32
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	0800211f 	.word	0x0800211f
 8002018:	cccccccd 	.word	0xcccccccd
 800201c:	08002235 	.word	0x08002235
 8002020:	40003800 	.word	0x40003800
 8002024:	40003400 	.word	0x40003400

08002028 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	881a      	ldrh	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	1c9a      	adds	r2, r3, #2
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002086:	b29b      	uxth	r3, r3
 8002088:	3b01      	subs	r3, #1
 800208a:	b29a      	uxth	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002094:	b29b      	uxth	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10e      	bne.n	80020b8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020a8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ffb8 	bl	8002028 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	b292      	uxth	r2, r2
 80020d4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020da:	1c9a      	adds	r2, r3, #2
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10e      	bne.n	8002116 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002106:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff ff93 	bl	800203c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b086      	sub	sp, #24
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b04      	cmp	r3, #4
 8002138:	d13a      	bne.n	80021b0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b01      	cmp	r3, #1
 8002142:	d109      	bne.n	8002158 <I2S_IRQHandler+0x3a>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214e:	2b40      	cmp	r3, #64	; 0x40
 8002150:	d102      	bne.n	8002158 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ffb4 	bl	80020c0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215e:	2b40      	cmp	r3, #64	; 0x40
 8002160:	d126      	bne.n	80021b0 <I2S_IRQHandler+0x92>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0320 	and.w	r3, r3, #32
 800216c:	2b20      	cmp	r3, #32
 800216e:	d11f      	bne.n	80021b0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800217e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	f043 0202 	orr.w	r2, r3, #2
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ff50 	bl	8002050 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d136      	bne.n	800222a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d109      	bne.n	80021da <I2S_IRQHandler+0xbc>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d0:	2b80      	cmp	r3, #128	; 0x80
 80021d2:	d102      	bne.n	80021da <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ff45 	bl	8002064 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d122      	bne.n	800222a <I2S_IRQHandler+0x10c>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 0320 	and.w	r3, r3, #32
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	d11b      	bne.n	800222a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002200:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221c:	f043 0204 	orr.w	r2, r3, #4
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ff13 	bl	8002050 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800222a:	bf00      	nop
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a92      	ldr	r2, [pc, #584]	; (8002494 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800224e:	4b92      	ldr	r3, [pc, #584]	; (8002498 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002250:	e001      	b.n	8002256 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002252:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a8b      	ldr	r2, [pc, #556]	; (8002494 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d101      	bne.n	8002270 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800226c:	4b8a      	ldr	r3, [pc, #552]	; (8002498 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800226e:	e001      	b.n	8002274 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002270:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002280:	d004      	beq.n	800228c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	f040 8099 	bne.w	80023be <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b02      	cmp	r3, #2
 8002294:	d107      	bne.n	80022a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f925 	bl	80024f0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d107      	bne.n	80022c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f9c8 	bl	8002650 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c6:	2b40      	cmp	r3, #64	; 0x40
 80022c8:	d13a      	bne.n	8002340 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d035      	beq.n	8002340 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a6e      	ldr	r2, [pc, #440]	; (8002494 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d101      	bne.n	80022e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80022de:	4b6e      	ldr	r3, [pc, #440]	; (8002498 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80022e0:	e001      	b.n	80022e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80022e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4969      	ldr	r1, [pc, #420]	; (8002494 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80022ee:	428b      	cmp	r3, r1
 80022f0:	d101      	bne.n	80022f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80022f2:	4b69      	ldr	r3, [pc, #420]	; (8002498 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80022f4:	e001      	b.n	80022fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80022f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022fe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800230e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	f043 0202 	orr.w	r2, r3, #2
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff fe88 	bl	8002050 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b08      	cmp	r3, #8
 8002348:	f040 80c3 	bne.w	80024d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f003 0320 	and.w	r3, r3, #32
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 80bd 	beq.w	80024d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002366:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a49      	ldr	r2, [pc, #292]	; (8002494 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d101      	bne.n	8002376 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002372:	4b49      	ldr	r3, [pc, #292]	; (8002498 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002374:	e001      	b.n	800237a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002376:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4944      	ldr	r1, [pc, #272]	; (8002494 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002382:	428b      	cmp	r3, r1
 8002384:	d101      	bne.n	800238a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002386:	4b44      	ldr	r3, [pc, #272]	; (8002498 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002388:	e001      	b.n	800238e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800238a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800238e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002392:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002394:	2300      	movs	r3, #0
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f043 0204 	orr.w	r2, r3, #4
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff fe4a 	bl	8002050 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80023bc:	e089      	b.n	80024d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d107      	bne.n	80023d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d002      	beq.n	80023d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f8be 	bl	8002554 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d107      	bne.n	80023f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f8fd 	bl	80025ec <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f8:	2b40      	cmp	r3, #64	; 0x40
 80023fa:	d12f      	bne.n	800245c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f003 0320 	and.w	r3, r3, #32
 8002402:	2b00      	cmp	r3, #0
 8002404:	d02a      	beq.n	800245c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002414:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a1e      	ldr	r2, [pc, #120]	; (8002494 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d101      	bne.n	8002424 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002420:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002422:	e001      	b.n	8002428 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002424:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4919      	ldr	r1, [pc, #100]	; (8002494 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002430:	428b      	cmp	r3, r1
 8002432:	d101      	bne.n	8002438 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002434:	4b18      	ldr	r3, [pc, #96]	; (8002498 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002436:	e001      	b.n	800243c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002438:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800243c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002440:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f043 0202 	orr.w	r2, r3, #2
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff fdfa 	bl	8002050 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b08      	cmp	r3, #8
 8002464:	d136      	bne.n	80024d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	f003 0320 	and.w	r3, r3, #32
 800246c:	2b00      	cmp	r3, #0
 800246e:	d031      	beq.n	80024d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a07      	ldr	r2, [pc, #28]	; (8002494 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d101      	bne.n	800247e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800247a:	4b07      	ldr	r3, [pc, #28]	; (8002498 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800247c:	e001      	b.n	8002482 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800247e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4902      	ldr	r1, [pc, #8]	; (8002494 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800248a:	428b      	cmp	r3, r1
 800248c:	d106      	bne.n	800249c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800248e:	4b02      	ldr	r3, [pc, #8]	; (8002498 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002490:	e006      	b.n	80024a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002492:	bf00      	nop
 8002494:	40003800 	.word	0x40003800
 8002498:	40003400 	.word	0x40003400
 800249c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024a4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024b4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	f043 0204 	orr.w	r2, r3, #4
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff fdc0 	bl	8002050 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80024d0:	e000      	b.n	80024d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80024d2:	bf00      	nop
}
 80024d4:	bf00      	nop
 80024d6:	3720      	adds	r7, #32
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	1c99      	adds	r1, r3, #2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6251      	str	r1, [r2, #36]	; 0x24
 8002502:	881a      	ldrh	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250e:	b29b      	uxth	r3, r3
 8002510:	3b01      	subs	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d113      	bne.n	800254a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002530:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002536:	b29b      	uxth	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d106      	bne.n	800254a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ffc9 	bl	80024dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	1c99      	adds	r1, r3, #2
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6251      	str	r1, [r2, #36]	; 0x24
 8002566:	8819      	ldrh	r1, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a1d      	ldr	r2, [pc, #116]	; (80025e4 <I2SEx_TxISR_I2SExt+0x90>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d101      	bne.n	8002576 <I2SEx_TxISR_I2SExt+0x22>
 8002572:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <I2SEx_TxISR_I2SExt+0x94>)
 8002574:	e001      	b.n	800257a <I2SEx_TxISR_I2SExt+0x26>
 8002576:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800257a:	460a      	mov	r2, r1
 800257c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002582:	b29b      	uxth	r3, r3
 8002584:	3b01      	subs	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d121      	bne.n	80025da <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a12      	ldr	r2, [pc, #72]	; (80025e4 <I2SEx_TxISR_I2SExt+0x90>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d101      	bne.n	80025a4 <I2SEx_TxISR_I2SExt+0x50>
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <I2SEx_TxISR_I2SExt+0x94>)
 80025a2:	e001      	b.n	80025a8 <I2SEx_TxISR_I2SExt+0x54>
 80025a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	490d      	ldr	r1, [pc, #52]	; (80025e4 <I2SEx_TxISR_I2SExt+0x90>)
 80025b0:	428b      	cmp	r3, r1
 80025b2:	d101      	bne.n	80025b8 <I2SEx_TxISR_I2SExt+0x64>
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <I2SEx_TxISR_I2SExt+0x94>)
 80025b6:	e001      	b.n	80025bc <I2SEx_TxISR_I2SExt+0x68>
 80025b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d106      	bne.n	80025da <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ff81 	bl	80024dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40003800 	.word	0x40003800
 80025e8:	40003400 	.word	0x40003400

080025ec <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68d8      	ldr	r0, [r3, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	1c99      	adds	r1, r3, #2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002604:	b282      	uxth	r2, r0
 8002606:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800260c:	b29b      	uxth	r3, r3
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800261a:	b29b      	uxth	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d113      	bne.n	8002648 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800262e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ff4a 	bl	80024dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a20      	ldr	r2, [pc, #128]	; (80026e0 <I2SEx_RxISR_I2SExt+0x90>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <I2SEx_RxISR_I2SExt+0x16>
 8002662:	4b20      	ldr	r3, [pc, #128]	; (80026e4 <I2SEx_RxISR_I2SExt+0x94>)
 8002664:	e001      	b.n	800266a <I2SEx_RxISR_I2SExt+0x1a>
 8002666:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800266a:	68d8      	ldr	r0, [r3, #12]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	1c99      	adds	r1, r3, #2
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002676:	b282      	uxth	r2, r0
 8002678:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d121      	bne.n	80026d6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <I2SEx_RxISR_I2SExt+0x90>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d101      	bne.n	80026a0 <I2SEx_RxISR_I2SExt+0x50>
 800269c:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <I2SEx_RxISR_I2SExt+0x94>)
 800269e:	e001      	b.n	80026a4 <I2SEx_RxISR_I2SExt+0x54>
 80026a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	490d      	ldr	r1, [pc, #52]	; (80026e0 <I2SEx_RxISR_I2SExt+0x90>)
 80026ac:	428b      	cmp	r3, r1
 80026ae:	d101      	bne.n	80026b4 <I2SEx_RxISR_I2SExt+0x64>
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <I2SEx_RxISR_I2SExt+0x94>)
 80026b2:	e001      	b.n	80026b8 <I2SEx_RxISR_I2SExt+0x68>
 80026b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026bc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d106      	bne.n	80026d6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff ff03 	bl	80024dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40003800 	.word	0x40003800
 80026e4:	40003400 	.word	0x40003400

080026e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ea:	b08f      	sub	sp, #60	; 0x3c
 80026ec:	af0a      	add	r7, sp, #40	; 0x28
 80026ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e10f      	b.n	800291a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d106      	bne.n	800271a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f006 fb4f 	bl	8008db8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2203      	movs	r2, #3
 800271e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272a:	2b00      	cmp	r3, #0
 800272c:	d102      	bne.n	8002734 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f002 fe36 	bl	80053aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	687e      	ldr	r6, [r7, #4]
 8002746:	466d      	mov	r5, sp
 8002748:	f106 0410 	add.w	r4, r6, #16
 800274c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800274e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002754:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002758:	e885 0003 	stmia.w	r5, {r0, r1}
 800275c:	1d33      	adds	r3, r6, #4
 800275e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002760:	6838      	ldr	r0, [r7, #0]
 8002762:	f002 fd0d 	bl	8005180 <USB_CoreInit>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0d0      	b.n	800291a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2100      	movs	r1, #0
 800277e:	4618      	mov	r0, r3
 8002780:	f002 fe24 	bl	80053cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002784:	2300      	movs	r3, #0
 8002786:	73fb      	strb	r3, [r7, #15]
 8002788:	e04a      	b.n	8002820 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800278a:	7bfa      	ldrb	r2, [r7, #15]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	333d      	adds	r3, #61	; 0x3d
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800279e:	7bfa      	ldrb	r2, [r7, #15]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	333c      	adds	r3, #60	; 0x3c
 80027ae:	7bfa      	ldrb	r2, [r7, #15]
 80027b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027b2:	7bfa      	ldrb	r2, [r7, #15]
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	b298      	uxth	r0, r3
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	3344      	adds	r3, #68	; 0x44
 80027c6:	4602      	mov	r2, r0
 80027c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027ca:	7bfa      	ldrb	r2, [r7, #15]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4413      	add	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	440b      	add	r3, r1
 80027d8:	3340      	adds	r3, #64	; 0x40
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027de:	7bfa      	ldrb	r2, [r7, #15]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	3348      	adds	r3, #72	; 0x48
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027f2:	7bfa      	ldrb	r2, [r7, #15]
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	334c      	adds	r3, #76	; 0x4c
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002806:	7bfa      	ldrb	r2, [r7, #15]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	3354      	adds	r3, #84	; 0x54
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	3301      	adds	r3, #1
 800281e:	73fb      	strb	r3, [r7, #15]
 8002820:	7bfa      	ldrb	r2, [r7, #15]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	429a      	cmp	r2, r3
 8002828:	d3af      	bcc.n	800278a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800282a:	2300      	movs	r3, #0
 800282c:	73fb      	strb	r3, [r7, #15]
 800282e:	e044      	b.n	80028ba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002830:	7bfa      	ldrb	r2, [r7, #15]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4413      	add	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002846:	7bfa      	ldrb	r2, [r7, #15]
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	4413      	add	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002858:	7bfa      	ldrb	r2, [r7, #15]
 800285a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800285c:	7bfa      	ldrb	r2, [r7, #15]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002872:	7bfa      	ldrb	r2, [r7, #15]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	4413      	add	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002888:	7bfa      	ldrb	r2, [r7, #15]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800289e:	7bfa      	ldrb	r2, [r7, #15]
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4413      	add	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	3301      	adds	r3, #1
 80028b8:	73fb      	strb	r3, [r7, #15]
 80028ba:	7bfa      	ldrb	r2, [r7, #15]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d3b5      	bcc.n	8002830 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	603b      	str	r3, [r7, #0]
 80028ca:	687e      	ldr	r6, [r7, #4]
 80028cc:	466d      	mov	r5, sp
 80028ce:	f106 0410 	add.w	r4, r6, #16
 80028d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028de:	e885 0003 	stmia.w	r5, {r0, r1}
 80028e2:	1d33      	adds	r3, r6, #4
 80028e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028e6:	6838      	ldr	r0, [r7, #0]
 80028e8:	f002 fdbc 	bl	8005464 <USB_DevInit>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d005      	beq.n	80028fe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2202      	movs	r2, #2
 80028f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e00d      	b.n	800291a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f003 ff0b 	bl	800672e <USB_DevDisconnect>

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002922 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b084      	sub	sp, #16
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_PCD_Start+0x1c>
 800293a:	2302      	movs	r3, #2
 800293c:	e020      	b.n	8002980 <HAL_PCD_Start+0x5e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	2b01      	cmp	r3, #1
 800294c:	d109      	bne.n	8002962 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002952:	2b01      	cmp	r3, #1
 8002954:	d005      	beq.n	8002962 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f002 fd0e 	bl	8005388 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f003 febb 	bl	80066ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002988:	b590      	push	{r4, r7, lr}
 800298a:	b08d      	sub	sp, #52	; 0x34
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f003 ff79 	bl	8006896 <USB_GetMode>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 848a 	bne.w	80032c0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f003 fedd 	bl	8006770 <USB_ReadInterrupts>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 8480 	beq.w	80032be <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	0a1b      	lsrs	r3, r3, #8
 80029c8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f003 feca 	bl	8006770 <USB_ReadInterrupts>
 80029dc:	4603      	mov	r3, r0
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d107      	bne.n	80029f6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	695a      	ldr	r2, [r3, #20]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f002 0202 	and.w	r2, r2, #2
 80029f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f003 feb8 	bl	8006770 <USB_ReadInterrupts>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b10      	cmp	r3, #16
 8002a08:	d161      	bne.n	8002ace <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699a      	ldr	r2, [r3, #24]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0210 	bic.w	r2, r2, #16
 8002a18:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	f003 020f 	and.w	r2, r3, #15
 8002a26:	4613      	mov	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	3304      	adds	r3, #4
 8002a38:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	0c5b      	lsrs	r3, r3, #17
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d124      	bne.n	8002a90 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d035      	beq.n	8002abe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	6a38      	ldr	r0, [r7, #32]
 8002a66:	f003 fcef 	bl	8006448 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	691a      	ldr	r2, [r3, #16]
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	091b      	lsrs	r3, r3, #4
 8002a72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a76:	441a      	add	r2, r3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	6a1a      	ldr	r2, [r3, #32]
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	091b      	lsrs	r3, r3, #4
 8002a84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a88:	441a      	add	r2, r3
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	621a      	str	r2, [r3, #32]
 8002a8e:	e016      	b.n	8002abe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	0c5b      	lsrs	r3, r3, #17
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	2b06      	cmp	r3, #6
 8002a9a:	d110      	bne.n	8002abe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002aa2:	2208      	movs	r2, #8
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	6a38      	ldr	r0, [r7, #32]
 8002aa8:	f003 fcce 	bl	8006448 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	6a1a      	ldr	r2, [r3, #32]
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ab8:	441a      	add	r2, r3
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	699a      	ldr	r2, [r3, #24]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0210 	orr.w	r2, r2, #16
 8002acc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f003 fe4c 	bl	8006770 <USB_ReadInterrupts>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ade:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ae2:	f040 80a7 	bne.w	8002c34 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f003 fe51 	bl	8006796 <USB_ReadDevAllOutEpInterrupt>
 8002af4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002af6:	e099      	b.n	8002c2c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 808e 	beq.w	8002c20 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f003 fe75 	bl	80067fe <USB_ReadDevOutEPInterrupt>
 8002b14:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00c      	beq.n	8002b3a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	015a      	lsls	r2, r3, #5
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	2301      	movs	r3, #1
 8002b30:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002b32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 fec3 	bl	80038c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00c      	beq.n	8002b5e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b50:	461a      	mov	r2, r3
 8002b52:	2308      	movs	r3, #8
 8002b54:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002b56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 ff99 	bl	8003a90 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b74:	461a      	mov	r2, r3
 8002b76:	2310      	movs	r3, #16
 8002b78:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d030      	beq.n	8002be6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8c:	2b80      	cmp	r3, #128	; 0x80
 8002b8e:	d109      	bne.n	8002ba4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ba2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	78db      	ldrb	r3, [r3, #3]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d108      	bne.n	8002bd4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	4619      	mov	r1, r3
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f006 fa06 	bl	8008fe0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002be0:	461a      	mov	r2, r3
 8002be2:	2302      	movs	r3, #2
 8002be4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	015a      	lsls	r2, r3, #5
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	2320      	movs	r3, #32
 8002c00:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d009      	beq.n	8002c20 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	015a      	lsls	r2, r3, #5
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	4413      	add	r3, r2
 8002c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c18:	461a      	mov	r2, r3
 8002c1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c1e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	3301      	adds	r3, #1
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c28:	085b      	lsrs	r3, r3, #1
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f47f af62 	bne.w	8002af8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f003 fd99 	bl	8006770 <USB_ReadInterrupts>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c48:	f040 80db 	bne.w	8002e02 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f003 fdba 	bl	80067ca <USB_ReadDevAllInEpInterrupt>
 8002c56:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002c5c:	e0cd      	b.n	8002dfa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80c2 	beq.w	8002dee <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f003 fde0 	bl	800683a <USB_ReadDevInEPInterrupt>
 8002c7a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d057      	beq.n	8002d36 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	f003 030f 	and.w	r3, r3, #15
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69f9      	ldr	r1, [r7, #28]
 8002ca2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	2301      	movs	r3, #1
 8002cba:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d132      	bne.n	8002d2a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	334c      	adds	r3, #76	; 0x4c
 8002cd4:	6819      	ldr	r1, [r3, #0]
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cda:	4613      	mov	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4403      	add	r3, r0
 8002ce4:	3348      	adds	r3, #72	; 0x48
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4419      	add	r1, r3
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cee:	4613      	mov	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4403      	add	r3, r0
 8002cf8:	334c      	adds	r3, #76	; 0x4c
 8002cfa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d113      	bne.n	8002d2a <HAL_PCD_IRQHandler+0x3a2>
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d06:	4613      	mov	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	3354      	adds	r3, #84	; 0x54
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d108      	bne.n	8002d2a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d22:	461a      	mov	r2, r3
 8002d24:	2101      	movs	r1, #1
 8002d26:	f003 fde7 	bl	80068f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	4619      	mov	r1, r3
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f006 f8d0 	bl	8008ed6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2308      	movs	r3, #8
 8002d50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d008      	beq.n	8002d6e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d68:	461a      	mov	r2, r3
 8002d6a:	2310      	movs	r3, #16
 8002d6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d84:	461a      	mov	r2, r3
 8002d86:	2340      	movs	r3, #64	; 0x40
 8002d88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d023      	beq.n	8002ddc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d96:	6a38      	ldr	r0, [r7, #32]
 8002d98:	f002 fcc8 	bl	800572c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d9e:	4613      	mov	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	3338      	adds	r3, #56	; 0x38
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	4413      	add	r3, r2
 8002dac:	3304      	adds	r3, #4
 8002dae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	78db      	ldrb	r3, [r3, #3]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d108      	bne.n	8002dca <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f006 f91d 	bl	8009004 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	2302      	movs	r3, #2
 8002dda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002de6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 fcdb 	bl	80037a4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	3301      	adds	r3, #1
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df6:	085b      	lsrs	r3, r3, #1
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f47f af2e 	bne.w	8002c5e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f003 fcb2 	bl	8006770 <USB_ReadInterrupts>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e16:	d122      	bne.n	8002e5e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	69fa      	ldr	r2, [r7, #28]
 8002e22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e26:	f023 0301 	bic.w	r3, r3, #1
 8002e2a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d108      	bne.n	8002e48 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e3e:	2100      	movs	r1, #0
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 fec3 	bl	8003bcc <HAL_PCDEx_LPM_Callback>
 8002e46:	e002      	b.n	8002e4e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f006 f8bb 	bl	8008fc4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695a      	ldr	r2, [r3, #20]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002e5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f003 fc84 	bl	8006770 <USB_ReadInterrupts>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e72:	d112      	bne.n	8002e9a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d102      	bne.n	8002e8a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f006 f877 	bl	8008f78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695a      	ldr	r2, [r3, #20]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002e98:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f003 fc66 	bl	8006770 <USB_ReadInterrupts>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eae:	f040 80b7 	bne.w	8003020 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	69fa      	ldr	r2, [r7, #28]
 8002ebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ec0:	f023 0301 	bic.w	r3, r3, #1
 8002ec4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2110      	movs	r1, #16
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f002 fc2d 	bl	800572c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ed6:	e046      	b.n	8002f66 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eda:	015a      	lsls	r2, r3, #5
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	4413      	add	r3, r2
 8002ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002eea:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002efc:	0151      	lsls	r1, r2, #5
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	440a      	add	r2, r1
 8002f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f0a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f18:	461a      	mov	r2, r3
 8002f1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f1e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f30:	0151      	lsls	r1, r2, #5
 8002f32:	69fa      	ldr	r2, [r7, #28]
 8002f34:	440a      	add	r2, r1
 8002f36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f3e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f50:	0151      	lsls	r1, r2, #5
 8002f52:	69fa      	ldr	r2, [r7, #28]
 8002f54:	440a      	add	r2, r1
 8002f56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f5e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f62:	3301      	adds	r3, #1
 8002f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d3b3      	bcc.n	8002ed8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	69fa      	ldr	r2, [r7, #28]
 8002f7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f7e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002f82:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d016      	beq.n	8002fba <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f96:	69fa      	ldr	r2, [r7, #28]
 8002f98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f9c:	f043 030b 	orr.w	r3, r3, #11
 8002fa0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fac:	69fa      	ldr	r2, [r7, #28]
 8002fae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fb2:	f043 030b 	orr.w	r3, r3, #11
 8002fb6:	6453      	str	r3, [r2, #68]	; 0x44
 8002fb8:	e015      	b.n	8002fe6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fcc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002fd0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fe0:	f043 030b 	orr.w	r3, r3, #11
 8002fe4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	69fa      	ldr	r2, [r7, #28]
 8002ff0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ff4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002ff8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800300a:	461a      	mov	r2, r3
 800300c:	f003 fc74 	bl	80068f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800301e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f003 fba3 	bl	8006770 <USB_ReadInterrupts>
 800302a:	4603      	mov	r3, r0
 800302c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003034:	d124      	bne.n	8003080 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f003 fc39 	bl	80068b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f002 fbee 	bl	8005826 <USB_GetDevSpeed>
 800304a:	4603      	mov	r3, r0
 800304c:	461a      	mov	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681c      	ldr	r4, [r3, #0]
 8003056:	f001 fa29 	bl	80044ac <HAL_RCC_GetHCLKFreq>
 800305a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003060:	b2db      	uxtb	r3, r3
 8003062:	461a      	mov	r2, r3
 8003064:	4620      	mov	r0, r4
 8003066:	f002 f8ed 	bl	8005244 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f005 ff5b 	bl	8008f26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800307e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f003 fb73 	bl	8006770 <USB_ReadInterrupts>
 800308a:	4603      	mov	r3, r0
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b08      	cmp	r3, #8
 8003092:	d10a      	bne.n	80030aa <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f005 ff38 	bl	8008f0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695a      	ldr	r2, [r3, #20]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f002 0208 	and.w	r2, r2, #8
 80030a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f003 fb5e 	bl	8006770 <USB_ReadInterrupts>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ba:	2b80      	cmp	r3, #128	; 0x80
 80030bc:	d122      	bne.n	8003104 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030ca:	2301      	movs	r3, #1
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
 80030ce:	e014      	b.n	80030fa <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d105      	bne.n	80030f4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	4619      	mov	r1, r3
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fb27 	bl	8003742 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	3301      	adds	r3, #1
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003100:	429a      	cmp	r2, r3
 8003102:	d3e5      	bcc.n	80030d0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f003 fb31 	bl	8006770 <USB_ReadInterrupts>
 800310e:	4603      	mov	r3, r0
 8003110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003114:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003118:	d13b      	bne.n	8003192 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800311a:	2301      	movs	r3, #1
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
 800311e:	e02b      	b.n	8003178 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	4413      	add	r3, r2
 8003128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003134:	4613      	mov	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	3340      	adds	r3, #64	; 0x40
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d115      	bne.n	8003172 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003146:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003148:	2b00      	cmp	r3, #0
 800314a:	da12      	bge.n	8003172 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	333f      	adds	r3, #63	; 0x3f
 800315c:	2201      	movs	r2, #1
 800315e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003168:	b2db      	uxtb	r3, r3
 800316a:	4619      	mov	r1, r3
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fae8 	bl	8003742 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	3301      	adds	r3, #1
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317e:	429a      	cmp	r2, r3
 8003180:	d3ce      	bcc.n	8003120 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003190:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f003 faea 	bl	8006770 <USB_ReadInterrupts>
 800319c:	4603      	mov	r3, r0
 800319e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031a6:	d155      	bne.n	8003254 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031a8:	2301      	movs	r3, #1
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
 80031ac:	e045      	b.n	800323a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d12e      	bne.n	8003234 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80031d6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80031d8:	2b00      	cmp	r3, #0
 80031da:	da2b      	bge.n	8003234 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80031e8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d121      	bne.n	8003234 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f4:	4613      	mov	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003202:	2201      	movs	r2, #1
 8003204:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10a      	bne.n	8003234 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	69fa      	ldr	r2, [r7, #28]
 8003228:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800322c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003230:	6053      	str	r3, [r2, #4]
            break;
 8003232:	e007      	b.n	8003244 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	3301      	adds	r3, #1
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003240:	429a      	cmp	r2, r3
 8003242:	d3b4      	bcc.n	80031ae <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695a      	ldr	r2, [r3, #20]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003252:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f003 fa89 	bl	8006770 <USB_ReadInterrupts>
 800325e:	4603      	mov	r3, r0
 8003260:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003268:	d10a      	bne.n	8003280 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f005 fedc 	bl	8009028 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695a      	ldr	r2, [r3, #20]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800327e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f003 fa73 	bl	8006770 <USB_ReadInterrupts>
 800328a:	4603      	mov	r3, r0
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b04      	cmp	r3, #4
 8003292:	d115      	bne.n	80032c0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f005 fecc 	bl	8009044 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6859      	ldr	r1, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	605a      	str	r2, [r3, #4]
 80032bc:	e000      	b.n	80032c0 <HAL_PCD_IRQHandler+0x938>
      return;
 80032be:	bf00      	nop
    }
  }
}
 80032c0:	3734      	adds	r7, #52	; 0x34
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd90      	pop	{r4, r7, pc}

080032c6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b082      	sub	sp, #8
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	460b      	mov	r3, r1
 80032d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_PCD_SetAddress+0x1a>
 80032dc:	2302      	movs	r3, #2
 80032de:	e013      	b.n	8003308 <HAL_PCD_SetAddress+0x42>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	78fa      	ldrb	r2, [r7, #3]
 80032f6:	4611      	mov	r1, r2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f003 f9d1 	bl	80066a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	4608      	mov	r0, r1
 800331a:	4611      	mov	r1, r2
 800331c:	461a      	mov	r2, r3
 800331e:	4603      	mov	r3, r0
 8003320:	70fb      	strb	r3, [r7, #3]
 8003322:	460b      	mov	r3, r1
 8003324:	803b      	strh	r3, [r7, #0]
 8003326:	4613      	mov	r3, r2
 8003328:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800332e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003332:	2b00      	cmp	r3, #0
 8003334:	da0f      	bge.n	8003356 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003336:	78fb      	ldrb	r3, [r7, #3]
 8003338:	f003 020f 	and.w	r2, r3, #15
 800333c:	4613      	mov	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	3338      	adds	r3, #56	; 0x38
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	4413      	add	r3, r2
 800334a:	3304      	adds	r3, #4
 800334c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2201      	movs	r2, #1
 8003352:	705a      	strb	r2, [r3, #1]
 8003354:	e00f      	b.n	8003376 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003356:	78fb      	ldrb	r3, [r7, #3]
 8003358:	f003 020f 	and.w	r2, r3, #15
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	4413      	add	r3, r2
 800336c:	3304      	adds	r3, #4
 800336e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	b2da      	uxtb	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003382:	883a      	ldrh	r2, [r7, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	78ba      	ldrb	r2, [r7, #2]
 800338c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	785b      	ldrb	r3, [r3, #1]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d004      	beq.n	80033a0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80033a0:	78bb      	ldrb	r3, [r7, #2]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d102      	bne.n	80033ac <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <HAL_PCD_EP_Open+0xaa>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e00e      	b.n	80033d8 <HAL_PCD_EP_Open+0xc8>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68f9      	ldr	r1, [r7, #12]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f002 fa51 	bl	8005870 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80033d6:	7afb      	ldrb	r3, [r7, #11]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	da0f      	bge.n	8003414 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	f003 020f 	and.w	r2, r3, #15
 80033fa:	4613      	mov	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	3338      	adds	r3, #56	; 0x38
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	4413      	add	r3, r2
 8003408:	3304      	adds	r3, #4
 800340a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2201      	movs	r2, #1
 8003410:	705a      	strb	r2, [r3, #1]
 8003412:	e00f      	b.n	8003434 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	f003 020f 	and.w	r2, r3, #15
 800341a:	4613      	mov	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	4413      	add	r3, r2
 800342a:	3304      	adds	r3, #4
 800342c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	b2da      	uxtb	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_PCD_EP_Close+0x6e>
 800344a:	2302      	movs	r3, #2
 800344c:	e00e      	b.n	800346c <HAL_PCD_EP_Close+0x8c>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68f9      	ldr	r1, [r7, #12]
 800345c:	4618      	mov	r0, r3
 800345e:	f002 fa8f 	bl	8005980 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	607a      	str	r2, [r7, #4]
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	460b      	mov	r3, r1
 8003482:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003484:	7afb      	ldrb	r3, [r7, #11]
 8003486:	f003 020f 	and.w	r2, r3, #15
 800348a:	4613      	mov	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	4413      	add	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	4413      	add	r3, r2
 800349a:	3304      	adds	r3, #4
 800349c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2200      	movs	r2, #0
 80034ae:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	2200      	movs	r2, #0
 80034b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034b6:	7afb      	ldrb	r3, [r7, #11]
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d102      	bne.n	80034d0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034d0:	7afb      	ldrb	r3, [r7, #11]
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	461a      	mov	r2, r3
 80034e6:	6979      	ldr	r1, [r7, #20]
 80034e8:	f002 fd6e 	bl	8005fc8 <USB_EP0StartXfer>
 80034ec:	e008      	b.n	8003500 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	6979      	ldr	r1, [r7, #20]
 80034fc:	f002 fb1c 	bl	8005b38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	460b      	mov	r3, r1
 8003514:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003516:	78fb      	ldrb	r3, [r7, #3]
 8003518:	f003 020f 	and.w	r2, r3, #15
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800352c:	681b      	ldr	r3, [r3, #0]
}
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	603b      	str	r3, [r7, #0]
 8003546:	460b      	mov	r3, r1
 8003548:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800354a:	7afb      	ldrb	r3, [r7, #11]
 800354c:	f003 020f 	and.w	r2, r3, #15
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	3338      	adds	r3, #56	; 0x38
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	4413      	add	r3, r2
 800355e:	3304      	adds	r3, #4
 8003560:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2200      	movs	r2, #0
 8003572:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2201      	movs	r2, #1
 8003578:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800357a:	7afb      	ldrb	r3, [r7, #11]
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	b2da      	uxtb	r2, r3
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d102      	bne.n	8003594 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003594:	7afb      	ldrb	r3, [r7, #11]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	2b00      	cmp	r3, #0
 800359c:	d109      	bne.n	80035b2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	461a      	mov	r2, r3
 80035aa:	6979      	ldr	r1, [r7, #20]
 80035ac:	f002 fd0c 	bl	8005fc8 <USB_EP0StartXfer>
 80035b0:	e008      	b.n	80035c4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	461a      	mov	r2, r3
 80035be:	6979      	ldr	r1, [r7, #20]
 80035c0:	f002 faba 	bl	8005b38 <USB_EPStartXfer>
  }

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b084      	sub	sp, #16
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	460b      	mov	r3, r1
 80035d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80035da:	78fb      	ldrb	r3, [r7, #3]
 80035dc:	f003 020f 	and.w	r2, r3, #15
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d901      	bls.n	80035ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e050      	b.n	800368e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	da0f      	bge.n	8003614 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	f003 020f 	and.w	r2, r3, #15
 80035fa:	4613      	mov	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	3338      	adds	r3, #56	; 0x38
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	4413      	add	r3, r2
 8003608:	3304      	adds	r3, #4
 800360a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2201      	movs	r2, #1
 8003610:	705a      	strb	r2, [r3, #1]
 8003612:	e00d      	b.n	8003630 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003614:	78fa      	ldrb	r2, [r7, #3]
 8003616:	4613      	mov	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	4413      	add	r3, r2
 8003626:	3304      	adds	r3, #4
 8003628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2201      	movs	r2, #1
 8003634:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003636:	78fb      	ldrb	r3, [r7, #3]
 8003638:	f003 030f 	and.w	r3, r3, #15
 800363c:	b2da      	uxtb	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_PCD_EP_SetStall+0x82>
 800364c:	2302      	movs	r3, #2
 800364e:	e01e      	b.n	800368e <HAL_PCD_EP_SetStall+0xc0>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68f9      	ldr	r1, [r7, #12]
 800365e:	4618      	mov	r0, r3
 8003660:	f002 ff4a 	bl	80064f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10a      	bne.n	8003684 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6818      	ldr	r0, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	b2d9      	uxtb	r1, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800367e:	461a      	mov	r2, r3
 8003680:	f003 f93a 	bl	80068f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b084      	sub	sp, #16
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	460b      	mov	r3, r1
 80036a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80036a2:	78fb      	ldrb	r3, [r7, #3]
 80036a4:	f003 020f 	and.w	r2, r3, #15
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d901      	bls.n	80036b4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e042      	b.n	800373a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	da0f      	bge.n	80036dc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036bc:	78fb      	ldrb	r3, [r7, #3]
 80036be:	f003 020f 	and.w	r2, r3, #15
 80036c2:	4613      	mov	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4413      	add	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	3338      	adds	r3, #56	; 0x38
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	4413      	add	r3, r2
 80036d0:	3304      	adds	r3, #4
 80036d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2201      	movs	r2, #1
 80036d8:	705a      	strb	r2, [r3, #1]
 80036da:	e00f      	b.n	80036fc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	f003 020f 	and.w	r2, r3, #15
 80036e2:	4613      	mov	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	4413      	add	r3, r2
 80036f2:	3304      	adds	r3, #4
 80036f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	b2da      	uxtb	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_PCD_EP_ClrStall+0x86>
 8003718:	2302      	movs	r3, #2
 800371a:	e00e      	b.n	800373a <HAL_PCD_EP_ClrStall+0xa4>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68f9      	ldr	r1, [r7, #12]
 800372a:	4618      	mov	r0, r3
 800372c:	f002 ff52 	bl	80065d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b084      	sub	sp, #16
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	460b      	mov	r3, r1
 800374c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800374e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003752:	2b00      	cmp	r3, #0
 8003754:	da0c      	bge.n	8003770 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	f003 020f 	and.w	r2, r3, #15
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	3338      	adds	r3, #56	; 0x38
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	4413      	add	r3, r2
 800376a:	3304      	adds	r3, #4
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	e00c      	b.n	800378a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	f003 020f 	and.w	r2, r3, #15
 8003776:	4613      	mov	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	4413      	add	r3, r2
 8003786:	3304      	adds	r3, #4
 8003788:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68f9      	ldr	r1, [r7, #12]
 8003790:	4618      	mov	r0, r3
 8003792:	f002 fd71 	bl	8006278 <USB_EPStopXfer>
 8003796:	4603      	mov	r3, r0
 8003798:	72fb      	strb	r3, [r7, #11]

  return ret;
 800379a:	7afb      	ldrb	r3, [r7, #11]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08a      	sub	sp, #40	; 0x28
 80037a8:	af02      	add	r7, sp, #8
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	4613      	mov	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	3338      	adds	r3, #56	; 0x38
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	4413      	add	r3, r2
 80037c8:	3304      	adds	r3, #4
 80037ca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a1a      	ldr	r2, [r3, #32]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d901      	bls.n	80037dc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e06c      	b.n	80038b6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	699a      	ldr	r2, [r3, #24]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d902      	bls.n	80037f8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	3303      	adds	r3, #3
 80037fc:	089b      	lsrs	r3, r3, #2
 80037fe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003800:	e02b      	b.n	800385a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	429a      	cmp	r2, r3
 8003816:	d902      	bls.n	800381e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	3303      	adds	r3, #3
 8003822:	089b      	lsrs	r3, r3, #2
 8003824:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6919      	ldr	r1, [r3, #16]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	b2da      	uxtb	r2, r3
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003836:	b2db      	uxtb	r3, r3
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	4603      	mov	r3, r0
 800383c:	6978      	ldr	r0, [r7, #20]
 800383e:	f002 fdc5 	bl	80063cc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	691a      	ldr	r2, [r3, #16]
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	441a      	add	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a1a      	ldr	r2, [r3, #32]
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	441a      	add	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4413      	add	r3, r2
 8003862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	429a      	cmp	r2, r3
 800386e:	d809      	bhi.n	8003884 <PCD_WriteEmptyTxFifo+0xe0>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a1a      	ldr	r2, [r3, #32]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003878:	429a      	cmp	r2, r3
 800387a:	d203      	bcs.n	8003884 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1be      	bne.n	8003802 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	699a      	ldr	r2, [r3, #24]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	429a      	cmp	r2, r3
 800388e:	d811      	bhi.n	80038b4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	2201      	movs	r2, #1
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	6939      	ldr	r1, [r7, #16]
 80038ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038b0:	4013      	ands	r3, r2
 80038b2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3720      	adds	r7, #32
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b088      	sub	sp, #32
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	333c      	adds	r3, #60	; 0x3c
 80038d8:	3304      	adds	r3, #4
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d17b      	bne.n	80039ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d015      	beq.n	800392c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	4a61      	ldr	r2, [pc, #388]	; (8003a88 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003904:	4293      	cmp	r3, r2
 8003906:	f240 80b9 	bls.w	8003a7c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80b3 	beq.w	8003a7c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	4413      	add	r3, r2
 800391e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003922:	461a      	mov	r2, r3
 8003924:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003928:	6093      	str	r3, [r2, #8]
 800392a:	e0a7      	b.n	8003a7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003942:	461a      	mov	r2, r3
 8003944:	2320      	movs	r3, #32
 8003946:	6093      	str	r3, [r2, #8]
 8003948:	e098      	b.n	8003a7c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003950:	2b00      	cmp	r3, #0
 8003952:	f040 8093 	bne.w	8003a7c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	4a4b      	ldr	r2, [pc, #300]	; (8003a88 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d90f      	bls.n	800397e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00a      	beq.n	800397e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003974:	461a      	mov	r2, r3
 8003976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800397a:	6093      	str	r3, [r2, #8]
 800397c:	e07e      	b.n	8003a7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	4613      	mov	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	4413      	add	r3, r2
 8003990:	3304      	adds	r3, #4
 8003992:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	69da      	ldr	r2, [r3, #28]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	0159      	lsls	r1, r3, #5
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	440b      	add	r3, r1
 80039a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039aa:	1ad2      	subs	r2, r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d114      	bne.n	80039e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d109      	bne.n	80039d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039c8:	461a      	mov	r2, r3
 80039ca:	2101      	movs	r1, #1
 80039cc:	f002 ff94 	bl	80068f8 <USB_EP0_OutStart>
 80039d0:	e006      	b.n	80039e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	691a      	ldr	r2, [r3, #16]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	441a      	add	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	4619      	mov	r1, r3
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f005 fa5a 	bl	8008ea0 <HAL_PCD_DataOutStageCallback>
 80039ec:	e046      	b.n	8003a7c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	4a26      	ldr	r2, [pc, #152]	; (8003a8c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d124      	bne.n	8003a40 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00a      	beq.n	8003a16 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a12:	6093      	str	r3, [r2, #8]
 8003a14:	e032      	b.n	8003a7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f003 0320 	and.w	r3, r3, #32
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	2320      	movs	r3, #32
 8003a30:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	4619      	mov	r1, r3
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f005 fa31 	bl	8008ea0 <HAL_PCD_DataOutStageCallback>
 8003a3e:	e01d      	b.n	8003a7c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d114      	bne.n	8003a70 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4413      	add	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d108      	bne.n	8003a70 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a68:	461a      	mov	r2, r3
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	f002 ff44 	bl	80068f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	4619      	mov	r1, r3
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f005 fa12 	bl	8008ea0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3720      	adds	r7, #32
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	4f54300a 	.word	0x4f54300a
 8003a8c:	4f54310a 	.word	0x4f54310a

08003a90 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	333c      	adds	r3, #60	; 0x3c
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4a15      	ldr	r2, [pc, #84]	; (8003b18 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d90e      	bls.n	8003ae4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d009      	beq.n	8003ae4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003adc:	461a      	mov	r2, r3
 8003ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ae2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f005 f9c9 	bl	8008e7c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <PCD_EP_OutSetupPacket_int+0x88>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d90c      	bls.n	8003b0c <PCD_EP_OutSetupPacket_int+0x7c>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d108      	bne.n	8003b0c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b04:	461a      	mov	r2, r3
 8003b06:	2101      	movs	r1, #1
 8003b08:	f002 fef6 	bl	80068f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	4f54300a 	.word	0x4f54300a

08003b1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	70fb      	strb	r3, [r7, #3]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d107      	bne.n	8003b4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b3a:	883b      	ldrh	r3, [r7, #0]
 8003b3c:	0419      	lsls	r1, r3, #16
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	629a      	str	r2, [r3, #40]	; 0x28
 8003b48:	e028      	b.n	8003b9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	0c1b      	lsrs	r3, r3, #16
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	4413      	add	r3, r2
 8003b56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b58:	2300      	movs	r3, #0
 8003b5a:	73fb      	strb	r3, [r7, #15]
 8003b5c:	e00d      	b.n	8003b7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	3340      	adds	r3, #64	; 0x40
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	0c1b      	lsrs	r3, r3, #16
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	4413      	add	r3, r2
 8003b72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	3301      	adds	r3, #1
 8003b78:	73fb      	strb	r3, [r7, #15]
 8003b7a:	7bfa      	ldrb	r2, [r7, #15]
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d3ec      	bcc.n	8003b5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b84:	883b      	ldrh	r3, [r7, #0]
 8003b86:	0418      	lsls	r0, r3, #16
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6819      	ldr	r1, [r3, #0]
 8003b8c:	78fb      	ldrb	r3, [r7, #3]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	4302      	orrs	r2, r0
 8003b94:	3340      	adds	r3, #64	; 0x40
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	887a      	ldrh	r2, [r7, #2]
 8003bbc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e267      	b.n	80040c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d075      	beq.n	8003cee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c02:	4b88      	ldr	r3, [pc, #544]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 030c 	and.w	r3, r3, #12
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d00c      	beq.n	8003c28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c0e:	4b85      	ldr	r3, [pc, #532]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d112      	bne.n	8003c40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c1a:	4b82      	ldr	r3, [pc, #520]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c26:	d10b      	bne.n	8003c40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c28:	4b7e      	ldr	r3, [pc, #504]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d05b      	beq.n	8003cec <HAL_RCC_OscConfig+0x108>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d157      	bne.n	8003cec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e242      	b.n	80040c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c48:	d106      	bne.n	8003c58 <HAL_RCC_OscConfig+0x74>
 8003c4a:	4b76      	ldr	r3, [pc, #472]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a75      	ldr	r2, [pc, #468]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	e01d      	b.n	8003c94 <HAL_RCC_OscConfig+0xb0>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c60:	d10c      	bne.n	8003c7c <HAL_RCC_OscConfig+0x98>
 8003c62:	4b70      	ldr	r3, [pc, #448]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a6f      	ldr	r2, [pc, #444]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	4b6d      	ldr	r3, [pc, #436]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a6c      	ldr	r2, [pc, #432]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	e00b      	b.n	8003c94 <HAL_RCC_OscConfig+0xb0>
 8003c7c:	4b69      	ldr	r3, [pc, #420]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a68      	ldr	r2, [pc, #416]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	4b66      	ldr	r3, [pc, #408]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a65      	ldr	r2, [pc, #404]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d013      	beq.n	8003cc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9c:	f7fd fc2e 	bl	80014fc <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ca4:	f7fd fc2a 	bl	80014fc <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b64      	cmp	r3, #100	; 0x64
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e207      	b.n	80040c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb6:	4b5b      	ldr	r3, [pc, #364]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0xc0>
 8003cc2:	e014      	b.n	8003cee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc4:	f7fd fc1a 	bl	80014fc <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ccc:	f7fd fc16 	bl	80014fc <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b64      	cmp	r3, #100	; 0x64
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e1f3      	b.n	80040c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cde:	4b51      	ldr	r3, [pc, #324]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0xe8>
 8003cea:	e000      	b.n	8003cee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d063      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cfa:	4b4a      	ldr	r3, [pc, #296]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00b      	beq.n	8003d1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d06:	4b47      	ldr	r3, [pc, #284]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d11c      	bne.n	8003d4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d12:	4b44      	ldr	r3, [pc, #272]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d116      	bne.n	8003d4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d1e:	4b41      	ldr	r3, [pc, #260]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d005      	beq.n	8003d36 <HAL_RCC_OscConfig+0x152>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d001      	beq.n	8003d36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e1c7      	b.n	80040c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d36:	4b3b      	ldr	r3, [pc, #236]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	4937      	ldr	r1, [pc, #220]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d4a:	e03a      	b.n	8003dc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d020      	beq.n	8003d96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d54:	4b34      	ldr	r3, [pc, #208]	; (8003e28 <HAL_RCC_OscConfig+0x244>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5a:	f7fd fbcf 	bl	80014fc <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d62:	f7fd fbcb 	bl	80014fc <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e1a8      	b.n	80040c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d74:	4b2b      	ldr	r3, [pc, #172]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0f0      	beq.n	8003d62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d80:	4b28      	ldr	r3, [pc, #160]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4925      	ldr	r1, [pc, #148]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	600b      	str	r3, [r1, #0]
 8003d94:	e015      	b.n	8003dc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d96:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <HAL_RCC_OscConfig+0x244>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9c:	f7fd fbae 	bl	80014fc <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003da4:	f7fd fbaa 	bl	80014fc <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e187      	b.n	80040c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db6:	4b1b      	ldr	r3, [pc, #108]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d036      	beq.n	8003e3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d016      	beq.n	8003e04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dd6:	4b15      	ldr	r3, [pc, #84]	; (8003e2c <HAL_RCC_OscConfig+0x248>)
 8003dd8:	2201      	movs	r2, #1
 8003dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ddc:	f7fd fb8e 	bl	80014fc <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de4:	f7fd fb8a 	bl	80014fc <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e167      	b.n	80040c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df6:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <HAL_RCC_OscConfig+0x240>)
 8003df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f0      	beq.n	8003de4 <HAL_RCC_OscConfig+0x200>
 8003e02:	e01b      	b.n	8003e3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e04:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <HAL_RCC_OscConfig+0x248>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e0a:	f7fd fb77 	bl	80014fc <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e10:	e00e      	b.n	8003e30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e12:	f7fd fb73 	bl	80014fc <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d907      	bls.n	8003e30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e150      	b.n	80040c6 <HAL_RCC_OscConfig+0x4e2>
 8003e24:	40023800 	.word	0x40023800
 8003e28:	42470000 	.word	0x42470000
 8003e2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e30:	4b88      	ldr	r3, [pc, #544]	; (8004054 <HAL_RCC_OscConfig+0x470>)
 8003e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1ea      	bne.n	8003e12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 8097 	beq.w	8003f78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e4e:	4b81      	ldr	r3, [pc, #516]	; (8004054 <HAL_RCC_OscConfig+0x470>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10f      	bne.n	8003e7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60bb      	str	r3, [r7, #8]
 8003e5e:	4b7d      	ldr	r3, [pc, #500]	; (8004054 <HAL_RCC_OscConfig+0x470>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	4a7c      	ldr	r2, [pc, #496]	; (8004054 <HAL_RCC_OscConfig+0x470>)
 8003e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e68:	6413      	str	r3, [r2, #64]	; 0x40
 8003e6a:	4b7a      	ldr	r3, [pc, #488]	; (8004054 <HAL_RCC_OscConfig+0x470>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e72:	60bb      	str	r3, [r7, #8]
 8003e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e76:	2301      	movs	r3, #1
 8003e78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7a:	4b77      	ldr	r3, [pc, #476]	; (8004058 <HAL_RCC_OscConfig+0x474>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d118      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e86:	4b74      	ldr	r3, [pc, #464]	; (8004058 <HAL_RCC_OscConfig+0x474>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a73      	ldr	r2, [pc, #460]	; (8004058 <HAL_RCC_OscConfig+0x474>)
 8003e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e92:	f7fd fb33 	bl	80014fc <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e9a:	f7fd fb2f 	bl	80014fc <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e10c      	b.n	80040c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eac:	4b6a      	ldr	r3, [pc, #424]	; (8004058 <HAL_RCC_OscConfig+0x474>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0f0      	beq.n	8003e9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d106      	bne.n	8003ece <HAL_RCC_OscConfig+0x2ea>
 8003ec0:	4b64      	ldr	r3, [pc, #400]	; (8004054 <HAL_RCC_OscConfig+0x470>)
 8003ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec4:	4a63      	ldr	r2, [pc, #396]	; (8004054 <HAL_RCC_OscConfig+0x470>)
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	6713      	str	r3, [r2, #112]	; 0x70
 8003ecc:	e01c      	b.n	8003f08 <HAL_RCC_OscConfig+0x324>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2b05      	cmp	r3, #5
 8003ed4:	d10c      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x30c>
 8003ed6:	4b5f      	ldr	r3, [pc, #380]	; (8004054 <HAL_RCC_OscConfig+0x470>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eda:	4a5e      	ldr	r2, [pc, #376]	; (8004054 <HAL_RCC_OscConfig+0x470>)
 8003edc:	f043 0304 	orr.w	r3, r3, #4
 8003ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee2:	4b5c      	ldr	r3, [pc, #368]	; (8004054 <HAL_RCC_OscConfig+0x470>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee6:	4a5b      	ldr	r2, [pc, #364]	; (8004054 <HAL_RCC_OscConfig+0x470>)
 8003ee8:	f043 0301 	orr.w	r3, r3, #1
 8003eec:	6713      	str	r3, [r2, #112]	; 0x70
 8003eee:	e00b      	b.n	8003f08 <HAL_RCC_OscConfig+0x324>
 8003ef0:	4b58      	ldr	r3, [pc, #352]	; (8004054 <HAL_RCC_OscConfig+0x470>)
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef4:	4a57      	ldr	r2, [pc, #348]	; (8004054 <HAL_RCC_OscConfig+0x470>)
 8003ef6:	f023 0301 	bic.w	r3, r3, #1
 8003efa:	6713      	str	r3, [r2, #112]	; 0x70
 8003efc:	4b55      	ldr	r3, [pc, #340]	; (8004054 <HAL_RCC_OscConfig+0x470>)
 8003efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f00:	4a54      	ldr	r2, [pc, #336]	; (8004054 <HAL_RCC_OscConfig+0x470>)
 8003f02:	f023 0304 	bic.w	r3, r3, #4
 8003f06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d015      	beq.n	8003f3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f10:	f7fd faf4 	bl	80014fc <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f16:	e00a      	b.n	8003f2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f18:	f7fd faf0 	bl	80014fc <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e0cb      	b.n	80040c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2e:	4b49      	ldr	r3, [pc, #292]	; (8004054 <HAL_RCC_OscConfig+0x470>)
 8003f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0ee      	beq.n	8003f18 <HAL_RCC_OscConfig+0x334>
 8003f3a:	e014      	b.n	8003f66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f3c:	f7fd fade 	bl	80014fc <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f42:	e00a      	b.n	8003f5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f44:	f7fd fada 	bl	80014fc <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e0b5      	b.n	80040c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f5a:	4b3e      	ldr	r3, [pc, #248]	; (8004054 <HAL_RCC_OscConfig+0x470>)
 8003f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1ee      	bne.n	8003f44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f66:	7dfb      	ldrb	r3, [r7, #23]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d105      	bne.n	8003f78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f6c:	4b39      	ldr	r3, [pc, #228]	; (8004054 <HAL_RCC_OscConfig+0x470>)
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	4a38      	ldr	r2, [pc, #224]	; (8004054 <HAL_RCC_OscConfig+0x470>)
 8003f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 80a1 	beq.w	80040c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f82:	4b34      	ldr	r3, [pc, #208]	; (8004054 <HAL_RCC_OscConfig+0x470>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	d05c      	beq.n	8004048 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d141      	bne.n	800401a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f96:	4b31      	ldr	r3, [pc, #196]	; (800405c <HAL_RCC_OscConfig+0x478>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9c:	f7fd faae 	bl	80014fc <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa4:	f7fd faaa 	bl	80014fc <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e087      	b.n	80040c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb6:	4b27      	ldr	r3, [pc, #156]	; (8004054 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69da      	ldr	r2, [r3, #28]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	019b      	lsls	r3, r3, #6
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd8:	085b      	lsrs	r3, r3, #1
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	041b      	lsls	r3, r3, #16
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	061b      	lsls	r3, r3, #24
 8003fe6:	491b      	ldr	r1, [pc, #108]	; (8004054 <HAL_RCC_OscConfig+0x470>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fec:	4b1b      	ldr	r3, [pc, #108]	; (800405c <HAL_RCC_OscConfig+0x478>)
 8003fee:	2201      	movs	r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff2:	f7fd fa83 	bl	80014fc <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ffa:	f7fd fa7f 	bl	80014fc <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e05c      	b.n	80040c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400c:	4b11      	ldr	r3, [pc, #68]	; (8004054 <HAL_RCC_OscConfig+0x470>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0f0      	beq.n	8003ffa <HAL_RCC_OscConfig+0x416>
 8004018:	e054      	b.n	80040c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401a:	4b10      	ldr	r3, [pc, #64]	; (800405c <HAL_RCC_OscConfig+0x478>)
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004020:	f7fd fa6c 	bl	80014fc <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004028:	f7fd fa68 	bl	80014fc <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e045      	b.n	80040c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403a:	4b06      	ldr	r3, [pc, #24]	; (8004054 <HAL_RCC_OscConfig+0x470>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1f0      	bne.n	8004028 <HAL_RCC_OscConfig+0x444>
 8004046:	e03d      	b.n	80040c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d107      	bne.n	8004060 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e038      	b.n	80040c6 <HAL_RCC_OscConfig+0x4e2>
 8004054:	40023800 	.word	0x40023800
 8004058:	40007000 	.word	0x40007000
 800405c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004060:	4b1b      	ldr	r3, [pc, #108]	; (80040d0 <HAL_RCC_OscConfig+0x4ec>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d028      	beq.n	80040c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004078:	429a      	cmp	r2, r3
 800407a:	d121      	bne.n	80040c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004086:	429a      	cmp	r2, r3
 8004088:	d11a      	bne.n	80040c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004090:	4013      	ands	r3, r2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004096:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004098:	4293      	cmp	r3, r2
 800409a:	d111      	bne.n	80040c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a6:	085b      	lsrs	r3, r3, #1
 80040a8:	3b01      	subs	r3, #1
 80040aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d107      	bne.n	80040c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040bc:	429a      	cmp	r2, r3
 80040be:	d001      	beq.n	80040c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e000      	b.n	80040c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40023800 	.word	0x40023800

080040d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e0cc      	b.n	8004282 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040e8:	4b68      	ldr	r3, [pc, #416]	; (800428c <HAL_RCC_ClockConfig+0x1b8>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d90c      	bls.n	8004110 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f6:	4b65      	ldr	r3, [pc, #404]	; (800428c <HAL_RCC_ClockConfig+0x1b8>)
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fe:	4b63      	ldr	r3, [pc, #396]	; (800428c <HAL_RCC_ClockConfig+0x1b8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d001      	beq.n	8004110 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e0b8      	b.n	8004282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d020      	beq.n	800415e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004128:	4b59      	ldr	r3, [pc, #356]	; (8004290 <HAL_RCC_ClockConfig+0x1bc>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	4a58      	ldr	r2, [pc, #352]	; (8004290 <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004132:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0308 	and.w	r3, r3, #8
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004140:	4b53      	ldr	r3, [pc, #332]	; (8004290 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	4a52      	ldr	r2, [pc, #328]	; (8004290 <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800414a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800414c:	4b50      	ldr	r3, [pc, #320]	; (8004290 <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	494d      	ldr	r1, [pc, #308]	; (8004290 <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	4313      	orrs	r3, r2
 800415c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d044      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d107      	bne.n	8004182 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004172:	4b47      	ldr	r3, [pc, #284]	; (8004290 <HAL_RCC_ClockConfig+0x1bc>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d119      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e07f      	b.n	8004282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b02      	cmp	r3, #2
 8004188:	d003      	beq.n	8004192 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800418e:	2b03      	cmp	r3, #3
 8004190:	d107      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004192:	4b3f      	ldr	r3, [pc, #252]	; (8004290 <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d109      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e06f      	b.n	8004282 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a2:	4b3b      	ldr	r3, [pc, #236]	; (8004290 <HAL_RCC_ClockConfig+0x1bc>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e067      	b.n	8004282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041b2:	4b37      	ldr	r3, [pc, #220]	; (8004290 <HAL_RCC_ClockConfig+0x1bc>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f023 0203 	bic.w	r2, r3, #3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	4934      	ldr	r1, [pc, #208]	; (8004290 <HAL_RCC_ClockConfig+0x1bc>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041c4:	f7fd f99a 	bl	80014fc <HAL_GetTick>
 80041c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ca:	e00a      	b.n	80041e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041cc:	f7fd f996 	bl	80014fc <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041da:	4293      	cmp	r3, r2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e04f      	b.n	8004282 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e2:	4b2b      	ldr	r3, [pc, #172]	; (8004290 <HAL_RCC_ClockConfig+0x1bc>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 020c 	and.w	r2, r3, #12
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d1eb      	bne.n	80041cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041f4:	4b25      	ldr	r3, [pc, #148]	; (800428c <HAL_RCC_ClockConfig+0x1b8>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d20c      	bcs.n	800421c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004202:	4b22      	ldr	r3, [pc, #136]	; (800428c <HAL_RCC_ClockConfig+0x1b8>)
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	b2d2      	uxtb	r2, r2
 8004208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800420a:	4b20      	ldr	r3, [pc, #128]	; (800428c <HAL_RCC_ClockConfig+0x1b8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d001      	beq.n	800421c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e032      	b.n	8004282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	d008      	beq.n	800423a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004228:	4b19      	ldr	r3, [pc, #100]	; (8004290 <HAL_RCC_ClockConfig+0x1bc>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	4916      	ldr	r1, [pc, #88]	; (8004290 <HAL_RCC_ClockConfig+0x1bc>)
 8004236:	4313      	orrs	r3, r2
 8004238:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d009      	beq.n	800425a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004246:	4b12      	ldr	r3, [pc, #72]	; (8004290 <HAL_RCC_ClockConfig+0x1bc>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	490e      	ldr	r1, [pc, #56]	; (8004290 <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	4313      	orrs	r3, r2
 8004258:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800425a:	f000 f821 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 800425e:	4602      	mov	r2, r0
 8004260:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	091b      	lsrs	r3, r3, #4
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	490a      	ldr	r1, [pc, #40]	; (8004294 <HAL_RCC_ClockConfig+0x1c0>)
 800426c:	5ccb      	ldrb	r3, [r1, r3]
 800426e:	fa22 f303 	lsr.w	r3, r2, r3
 8004272:	4a09      	ldr	r2, [pc, #36]	; (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 8004274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004276:	4b09      	ldr	r3, [pc, #36]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f7fd f8fa 	bl	8001474 <HAL_InitTick>

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40023c00 	.word	0x40023c00
 8004290:	40023800 	.word	0x40023800
 8004294:	0800a2e4 	.word	0x0800a2e4
 8004298:	20000000 	.word	0x20000000
 800429c:	20000004 	.word	0x20000004

080042a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042a4:	b094      	sub	sp, #80	; 0x50
 80042a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	647b      	str	r3, [r7, #68]	; 0x44
 80042ac:	2300      	movs	r3, #0
 80042ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042b0:	2300      	movs	r3, #0
 80042b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042b8:	4b79      	ldr	r3, [pc, #484]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f003 030c 	and.w	r3, r3, #12
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d00d      	beq.n	80042e0 <HAL_RCC_GetSysClockFreq+0x40>
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	f200 80e1 	bhi.w	800448c <HAL_RCC_GetSysClockFreq+0x1ec>
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <HAL_RCC_GetSysClockFreq+0x34>
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d003      	beq.n	80042da <HAL_RCC_GetSysClockFreq+0x3a>
 80042d2:	e0db      	b.n	800448c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042d4:	4b73      	ldr	r3, [pc, #460]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80042d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042d8:	e0db      	b.n	8004492 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042da:	4b73      	ldr	r3, [pc, #460]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80042dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042de:	e0d8      	b.n	8004492 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042e0:	4b6f      	ldr	r3, [pc, #444]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ea:	4b6d      	ldr	r3, [pc, #436]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d063      	beq.n	80043be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f6:	4b6a      	ldr	r3, [pc, #424]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	099b      	lsrs	r3, r3, #6
 80042fc:	2200      	movs	r2, #0
 80042fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004300:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004308:	633b      	str	r3, [r7, #48]	; 0x30
 800430a:	2300      	movs	r3, #0
 800430c:	637b      	str	r3, [r7, #52]	; 0x34
 800430e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004312:	4622      	mov	r2, r4
 8004314:	462b      	mov	r3, r5
 8004316:	f04f 0000 	mov.w	r0, #0
 800431a:	f04f 0100 	mov.w	r1, #0
 800431e:	0159      	lsls	r1, r3, #5
 8004320:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004324:	0150      	lsls	r0, r2, #5
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	4621      	mov	r1, r4
 800432c:	1a51      	subs	r1, r2, r1
 800432e:	6139      	str	r1, [r7, #16]
 8004330:	4629      	mov	r1, r5
 8004332:	eb63 0301 	sbc.w	r3, r3, r1
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004344:	4659      	mov	r1, fp
 8004346:	018b      	lsls	r3, r1, #6
 8004348:	4651      	mov	r1, sl
 800434a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800434e:	4651      	mov	r1, sl
 8004350:	018a      	lsls	r2, r1, #6
 8004352:	4651      	mov	r1, sl
 8004354:	ebb2 0801 	subs.w	r8, r2, r1
 8004358:	4659      	mov	r1, fp
 800435a:	eb63 0901 	sbc.w	r9, r3, r1
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	f04f 0300 	mov.w	r3, #0
 8004366:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800436a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800436e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004372:	4690      	mov	r8, r2
 8004374:	4699      	mov	r9, r3
 8004376:	4623      	mov	r3, r4
 8004378:	eb18 0303 	adds.w	r3, r8, r3
 800437c:	60bb      	str	r3, [r7, #8]
 800437e:	462b      	mov	r3, r5
 8004380:	eb49 0303 	adc.w	r3, r9, r3
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004392:	4629      	mov	r1, r5
 8004394:	024b      	lsls	r3, r1, #9
 8004396:	4621      	mov	r1, r4
 8004398:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800439c:	4621      	mov	r1, r4
 800439e:	024a      	lsls	r2, r1, #9
 80043a0:	4610      	mov	r0, r2
 80043a2:	4619      	mov	r1, r3
 80043a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043a6:	2200      	movs	r2, #0
 80043a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80043aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043b0:	f7fb ff5e 	bl	8000270 <__aeabi_uldivmod>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4613      	mov	r3, r2
 80043ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043bc:	e058      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043be:	4b38      	ldr	r3, [pc, #224]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	099b      	lsrs	r3, r3, #6
 80043c4:	2200      	movs	r2, #0
 80043c6:	4618      	mov	r0, r3
 80043c8:	4611      	mov	r1, r2
 80043ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043ce:	623b      	str	r3, [r7, #32]
 80043d0:	2300      	movs	r3, #0
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
 80043d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043d8:	4642      	mov	r2, r8
 80043da:	464b      	mov	r3, r9
 80043dc:	f04f 0000 	mov.w	r0, #0
 80043e0:	f04f 0100 	mov.w	r1, #0
 80043e4:	0159      	lsls	r1, r3, #5
 80043e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043ea:	0150      	lsls	r0, r2, #5
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4641      	mov	r1, r8
 80043f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80043f6:	4649      	mov	r1, r9
 80043f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004408:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800440c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004410:	ebb2 040a 	subs.w	r4, r2, sl
 8004414:	eb63 050b 	sbc.w	r5, r3, fp
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	00eb      	lsls	r3, r5, #3
 8004422:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004426:	00e2      	lsls	r2, r4, #3
 8004428:	4614      	mov	r4, r2
 800442a:	461d      	mov	r5, r3
 800442c:	4643      	mov	r3, r8
 800442e:	18e3      	adds	r3, r4, r3
 8004430:	603b      	str	r3, [r7, #0]
 8004432:	464b      	mov	r3, r9
 8004434:	eb45 0303 	adc.w	r3, r5, r3
 8004438:	607b      	str	r3, [r7, #4]
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004446:	4629      	mov	r1, r5
 8004448:	028b      	lsls	r3, r1, #10
 800444a:	4621      	mov	r1, r4
 800444c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004450:	4621      	mov	r1, r4
 8004452:	028a      	lsls	r2, r1, #10
 8004454:	4610      	mov	r0, r2
 8004456:	4619      	mov	r1, r3
 8004458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800445a:	2200      	movs	r2, #0
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	61fa      	str	r2, [r7, #28]
 8004460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004464:	f7fb ff04 	bl	8000270 <__aeabi_uldivmod>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4613      	mov	r3, r2
 800446e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004470:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	0c1b      	lsrs	r3, r3, #16
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	3301      	adds	r3, #1
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004480:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004484:	fbb2 f3f3 	udiv	r3, r2, r3
 8004488:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800448a:	e002      	b.n	8004492 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800448c:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800448e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004490:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004494:	4618      	mov	r0, r3
 8004496:	3750      	adds	r7, #80	; 0x50
 8004498:	46bd      	mov	sp, r7
 800449a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800449e:	bf00      	nop
 80044a0:	40023800 	.word	0x40023800
 80044a4:	00f42400 	.word	0x00f42400
 80044a8:	007a1200 	.word	0x007a1200

080044ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044b0:	4b03      	ldr	r3, [pc, #12]	; (80044c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80044b2:	681b      	ldr	r3, [r3, #0]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	20000000 	.word	0x20000000

080044c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044c8:	f7ff fff0 	bl	80044ac <HAL_RCC_GetHCLKFreq>
 80044cc:	4602      	mov	r2, r0
 80044ce:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	0a9b      	lsrs	r3, r3, #10
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	4903      	ldr	r1, [pc, #12]	; (80044e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044da:	5ccb      	ldrb	r3, [r1, r3]
 80044dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40023800 	.word	0x40023800
 80044e8:	0800a2f4 	.word	0x0800a2f4

080044ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b00      	cmp	r3, #0
 8004506:	d105      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004510:	2b00      	cmp	r3, #0
 8004512:	d035      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004514:	4b62      	ldr	r3, [pc, #392]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800451a:	f7fc ffef 	bl	80014fc <HAL_GetTick>
 800451e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004520:	e008      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004522:	f7fc ffeb 	bl	80014fc <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e0b0      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004534:	4b5b      	ldr	r3, [pc, #364]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1f0      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	019a      	lsls	r2, r3, #6
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	071b      	lsls	r3, r3, #28
 800454c:	4955      	ldr	r1, [pc, #340]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004554:	4b52      	ldr	r3, [pc, #328]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004556:	2201      	movs	r2, #1
 8004558:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800455a:	f7fc ffcf 	bl	80014fc <HAL_GetTick>
 800455e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004560:	e008      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004562:	f7fc ffcb 	bl	80014fc <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e090      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004574:	4b4b      	ldr	r3, [pc, #300]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0f0      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 8083 	beq.w	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800458e:	2300      	movs	r3, #0
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	4b44      	ldr	r3, [pc, #272]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	4a43      	ldr	r2, [pc, #268]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459c:	6413      	str	r3, [r2, #64]	; 0x40
 800459e:	4b41      	ldr	r3, [pc, #260]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80045aa:	4b3f      	ldr	r3, [pc, #252]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a3e      	ldr	r2, [pc, #248]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045b6:	f7fc ffa1 	bl	80014fc <HAL_GetTick>
 80045ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045bc:	e008      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80045be:	f7fc ff9d 	bl	80014fc <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e062      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045d0:	4b35      	ldr	r3, [pc, #212]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0f0      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045dc:	4b31      	ldr	r3, [pc, #196]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d02f      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d028      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045fa:	4b2a      	ldr	r3, [pc, #168]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004602:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004604:	4b29      	ldr	r3, [pc, #164]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004606:	2201      	movs	r2, #1
 8004608:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800460a:	4b28      	ldr	r3, [pc, #160]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004610:	4a24      	ldr	r2, [pc, #144]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004616:	4b23      	ldr	r3, [pc, #140]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b01      	cmp	r3, #1
 8004620:	d114      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004622:	f7fc ff6b 	bl	80014fc <HAL_GetTick>
 8004626:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004628:	e00a      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800462a:	f7fc ff67 	bl	80014fc <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	f241 3288 	movw	r2, #5000	; 0x1388
 8004638:	4293      	cmp	r3, r2
 800463a:	d901      	bls.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e02a      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004640:	4b18      	ldr	r3, [pc, #96]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0ee      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004654:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004658:	d10d      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800465a:	4b12      	ldr	r3, [pc, #72]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800466a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466e:	490d      	ldr	r1, [pc, #52]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004670:	4313      	orrs	r3, r2
 8004672:	608b      	str	r3, [r1, #8]
 8004674:	e005      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004676:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	4a0a      	ldr	r2, [pc, #40]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800467c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004680:	6093      	str	r3, [r2, #8]
 8004682:	4b08      	ldr	r3, [pc, #32]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004684:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800468e:	4905      	ldr	r1, [pc, #20]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004690:	4313      	orrs	r3, r2
 8004692:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	42470068 	.word	0x42470068
 80046a4:	40023800 	.word	0x40023800
 80046a8:	40007000 	.word	0x40007000
 80046ac:	42470e40 	.word	0x42470e40

080046b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d13e      	bne.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80046ce:	4b23      	ldr	r3, [pc, #140]	; (800475c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d005      	beq.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d12f      	bne.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80046e4:	4b1e      	ldr	r3, [pc, #120]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046e6:	617b      	str	r3, [r7, #20]
          break;
 80046e8:	e02f      	b.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046ea:	4b1c      	ldr	r3, [pc, #112]	; (800475c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046f6:	d108      	bne.n	800470a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046f8:	4b18      	ldr	r3, [pc, #96]	; (800475c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004700:	4a18      	ldr	r2, [pc, #96]	; (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004702:	fbb2 f3f3 	udiv	r3, r2, r3
 8004706:	613b      	str	r3, [r7, #16]
 8004708:	e007      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800470a:	4b14      	ldr	r3, [pc, #80]	; (800475c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004712:	4a15      	ldr	r2, [pc, #84]	; (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004714:	fbb2 f3f3 	udiv	r3, r2, r3
 8004718:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800471a:	4b10      	ldr	r3, [pc, #64]	; (800475c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800471c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004720:	099b      	lsrs	r3, r3, #6
 8004722:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	fb02 f303 	mul.w	r3, r2, r3
 800472c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800472e:	4b0b      	ldr	r3, [pc, #44]	; (800475c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004734:	0f1b      	lsrs	r3, r3, #28
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004740:	617b      	str	r3, [r7, #20]
          break;
 8004742:	e002      	b.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	617b      	str	r3, [r7, #20]
          break;
 8004748:	bf00      	nop
        }
      }
      break;
 800474a:	bf00      	nop
    }
  }
  return frequency;
 800474c:	697b      	ldr	r3, [r7, #20]
}
 800474e:	4618      	mov	r0, r3
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40023800 	.word	0x40023800
 8004760:	00bb8000 	.word	0x00bb8000
 8004764:	007a1200 	.word	0x007a1200
 8004768:	00f42400 	.word	0x00f42400

0800476c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e07b      	b.n	8004876 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	2b00      	cmp	r3, #0
 8004784:	d108      	bne.n	8004798 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800478e:	d009      	beq.n	80047a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	61da      	str	r2, [r3, #28]
 8004796:	e005      	b.n	80047a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fc fca2 	bl	8001108 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047ec:	431a      	orrs	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004828:	ea42 0103 	orr.w	r1, r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004830:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	0c1b      	lsrs	r3, r3, #16
 8004842:	f003 0104 	and.w	r1, r3, #4
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	f003 0210 	and.w	r2, r3, #16
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69da      	ldr	r2, [r3, #28]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004864:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b082      	sub	sp, #8
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e041      	b.n	8004914 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d106      	bne.n	80048aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7fc fc77 	bl	8001198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2202      	movs	r2, #2
 80048ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3304      	adds	r3, #4
 80048ba:	4619      	mov	r1, r3
 80048bc:	4610      	mov	r0, r2
 80048be:	f000 fa95 	bl	8004dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b01      	cmp	r3, #1
 800492e:	d001      	beq.n	8004934 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e04e      	b.n	80049d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a23      	ldr	r2, [pc, #140]	; (80049e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d022      	beq.n	800499c <HAL_TIM_Base_Start_IT+0x80>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800495e:	d01d      	beq.n	800499c <HAL_TIM_Base_Start_IT+0x80>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a1f      	ldr	r2, [pc, #124]	; (80049e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d018      	beq.n	800499c <HAL_TIM_Base_Start_IT+0x80>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a1e      	ldr	r2, [pc, #120]	; (80049e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d013      	beq.n	800499c <HAL_TIM_Base_Start_IT+0x80>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a1c      	ldr	r2, [pc, #112]	; (80049ec <HAL_TIM_Base_Start_IT+0xd0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d00e      	beq.n	800499c <HAL_TIM_Base_Start_IT+0x80>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a1b      	ldr	r2, [pc, #108]	; (80049f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d009      	beq.n	800499c <HAL_TIM_Base_Start_IT+0x80>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a19      	ldr	r2, [pc, #100]	; (80049f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d004      	beq.n	800499c <HAL_TIM_Base_Start_IT+0x80>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a18      	ldr	r2, [pc, #96]	; (80049f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d111      	bne.n	80049c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2b06      	cmp	r3, #6
 80049ac:	d010      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f042 0201 	orr.w	r2, r2, #1
 80049bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049be:	e007      	b.n	80049d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0201 	orr.w	r2, r2, #1
 80049ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40010000 	.word	0x40010000
 80049e4:	40000400 	.word	0x40000400
 80049e8:	40000800 	.word	0x40000800
 80049ec:	40000c00 	.word	0x40000c00
 80049f0:	40010400 	.word	0x40010400
 80049f4:	40014000 	.word	0x40014000
 80049f8:	40001800 	.word	0x40001800

080049fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d122      	bne.n	8004a58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d11b      	bne.n	8004a58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0202 	mvn.w	r2, #2
 8004a28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f9b5 	bl	8004dae <HAL_TIM_IC_CaptureCallback>
 8004a44:	e005      	b.n	8004a52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f9a7 	bl	8004d9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f9b8 	bl	8004dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d122      	bne.n	8004aac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d11b      	bne.n	8004aac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f06f 0204 	mvn.w	r2, #4
 8004a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2202      	movs	r2, #2
 8004a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f98b 	bl	8004dae <HAL_TIM_IC_CaptureCallback>
 8004a98:	e005      	b.n	8004aa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f97d 	bl	8004d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f98e 	bl	8004dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b08      	cmp	r3, #8
 8004ab8:	d122      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f003 0308 	and.w	r3, r3, #8
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d11b      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0208 	mvn.w	r2, #8
 8004ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2204      	movs	r2, #4
 8004ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f961 	bl	8004dae <HAL_TIM_IC_CaptureCallback>
 8004aec:	e005      	b.n	8004afa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f953 	bl	8004d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f964 	bl	8004dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f003 0310 	and.w	r3, r3, #16
 8004b0a:	2b10      	cmp	r3, #16
 8004b0c:	d122      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0310 	and.w	r3, r3, #16
 8004b18:	2b10      	cmp	r3, #16
 8004b1a:	d11b      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0210 	mvn.w	r2, #16
 8004b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2208      	movs	r2, #8
 8004b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f937 	bl	8004dae <HAL_TIM_IC_CaptureCallback>
 8004b40:	e005      	b.n	8004b4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f929 	bl	8004d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f93a 	bl	8004dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d10e      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d107      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0201 	mvn.w	r2, #1
 8004b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fc f800 	bl	8000b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8a:	2b80      	cmp	r3, #128	; 0x80
 8004b8c:	d10e      	bne.n	8004bac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b98:	2b80      	cmp	r3, #128	; 0x80
 8004b9a:	d107      	bne.n	8004bac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fae0 	bl	800516c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb6:	2b40      	cmp	r3, #64	; 0x40
 8004bb8:	d10e      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc4:	2b40      	cmp	r3, #64	; 0x40
 8004bc6:	d107      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f8ff 	bl	8004dd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	2b20      	cmp	r3, #32
 8004be4:	d10e      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f003 0320 	and.w	r3, r3, #32
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	d107      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0220 	mvn.w	r2, #32
 8004bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 faaa 	bl	8005158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c04:	bf00      	nop
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_TIM_ConfigClockSource+0x1c>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e0b4      	b.n	8004d92 <HAL_TIM_ConfigClockSource+0x186>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c60:	d03e      	beq.n	8004ce0 <HAL_TIM_ConfigClockSource+0xd4>
 8004c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c66:	f200 8087 	bhi.w	8004d78 <HAL_TIM_ConfigClockSource+0x16c>
 8004c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6e:	f000 8086 	beq.w	8004d7e <HAL_TIM_ConfigClockSource+0x172>
 8004c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c76:	d87f      	bhi.n	8004d78 <HAL_TIM_ConfigClockSource+0x16c>
 8004c78:	2b70      	cmp	r3, #112	; 0x70
 8004c7a:	d01a      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0xa6>
 8004c7c:	2b70      	cmp	r3, #112	; 0x70
 8004c7e:	d87b      	bhi.n	8004d78 <HAL_TIM_ConfigClockSource+0x16c>
 8004c80:	2b60      	cmp	r3, #96	; 0x60
 8004c82:	d050      	beq.n	8004d26 <HAL_TIM_ConfigClockSource+0x11a>
 8004c84:	2b60      	cmp	r3, #96	; 0x60
 8004c86:	d877      	bhi.n	8004d78 <HAL_TIM_ConfigClockSource+0x16c>
 8004c88:	2b50      	cmp	r3, #80	; 0x50
 8004c8a:	d03c      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0xfa>
 8004c8c:	2b50      	cmp	r3, #80	; 0x50
 8004c8e:	d873      	bhi.n	8004d78 <HAL_TIM_ConfigClockSource+0x16c>
 8004c90:	2b40      	cmp	r3, #64	; 0x40
 8004c92:	d058      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x13a>
 8004c94:	2b40      	cmp	r3, #64	; 0x40
 8004c96:	d86f      	bhi.n	8004d78 <HAL_TIM_ConfigClockSource+0x16c>
 8004c98:	2b30      	cmp	r3, #48	; 0x30
 8004c9a:	d064      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0x15a>
 8004c9c:	2b30      	cmp	r3, #48	; 0x30
 8004c9e:	d86b      	bhi.n	8004d78 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca0:	2b20      	cmp	r3, #32
 8004ca2:	d060      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0x15a>
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	d867      	bhi.n	8004d78 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d05c      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0x15a>
 8004cac:	2b10      	cmp	r3, #16
 8004cae:	d05a      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0x15a>
 8004cb0:	e062      	b.n	8004d78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6818      	ldr	r0, [r3, #0]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	6899      	ldr	r1, [r3, #8]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f000 f9ad 	bl	8005020 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	609a      	str	r2, [r3, #8]
      break;
 8004cde:	e04f      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	6899      	ldr	r1, [r3, #8]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f000 f996 	bl	8005020 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d02:	609a      	str	r2, [r3, #8]
      break;
 8004d04:	e03c      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6818      	ldr	r0, [r3, #0]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	6859      	ldr	r1, [r3, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	461a      	mov	r2, r3
 8004d14:	f000 f90a 	bl	8004f2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2150      	movs	r1, #80	; 0x50
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 f963 	bl	8004fea <TIM_ITRx_SetConfig>
      break;
 8004d24:	e02c      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	6859      	ldr	r1, [r3, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	461a      	mov	r2, r3
 8004d34:	f000 f929 	bl	8004f8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2160      	movs	r1, #96	; 0x60
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 f953 	bl	8004fea <TIM_ITRx_SetConfig>
      break;
 8004d44:	e01c      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6818      	ldr	r0, [r3, #0]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	6859      	ldr	r1, [r3, #4]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	461a      	mov	r2, r3
 8004d54:	f000 f8ea 	bl	8004f2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2140      	movs	r1, #64	; 0x40
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 f943 	bl	8004fea <TIM_ITRx_SetConfig>
      break;
 8004d64:	e00c      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4619      	mov	r1, r3
 8004d70:	4610      	mov	r0, r2
 8004d72:	f000 f93a 	bl	8004fea <TIM_ITRx_SetConfig>
      break;
 8004d76:	e003      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d7c:	e000      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
	...

08004dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a40      	ldr	r2, [pc, #256]	; (8004f00 <TIM_Base_SetConfig+0x114>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d013      	beq.n	8004e2c <TIM_Base_SetConfig+0x40>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0a:	d00f      	beq.n	8004e2c <TIM_Base_SetConfig+0x40>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a3d      	ldr	r2, [pc, #244]	; (8004f04 <TIM_Base_SetConfig+0x118>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d00b      	beq.n	8004e2c <TIM_Base_SetConfig+0x40>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a3c      	ldr	r2, [pc, #240]	; (8004f08 <TIM_Base_SetConfig+0x11c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d007      	beq.n	8004e2c <TIM_Base_SetConfig+0x40>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a3b      	ldr	r2, [pc, #236]	; (8004f0c <TIM_Base_SetConfig+0x120>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d003      	beq.n	8004e2c <TIM_Base_SetConfig+0x40>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a3a      	ldr	r2, [pc, #232]	; (8004f10 <TIM_Base_SetConfig+0x124>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d108      	bne.n	8004e3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a2f      	ldr	r2, [pc, #188]	; (8004f00 <TIM_Base_SetConfig+0x114>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d02b      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4c:	d027      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a2c      	ldr	r2, [pc, #176]	; (8004f04 <TIM_Base_SetConfig+0x118>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d023      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a2b      	ldr	r2, [pc, #172]	; (8004f08 <TIM_Base_SetConfig+0x11c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d01f      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2a      	ldr	r2, [pc, #168]	; (8004f0c <TIM_Base_SetConfig+0x120>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d01b      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a29      	ldr	r2, [pc, #164]	; (8004f10 <TIM_Base_SetConfig+0x124>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d017      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a28      	ldr	r2, [pc, #160]	; (8004f14 <TIM_Base_SetConfig+0x128>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d013      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a27      	ldr	r2, [pc, #156]	; (8004f18 <TIM_Base_SetConfig+0x12c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00f      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a26      	ldr	r2, [pc, #152]	; (8004f1c <TIM_Base_SetConfig+0x130>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00b      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a25      	ldr	r2, [pc, #148]	; (8004f20 <TIM_Base_SetConfig+0x134>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d007      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a24      	ldr	r2, [pc, #144]	; (8004f24 <TIM_Base_SetConfig+0x138>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d003      	beq.n	8004e9e <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a23      	ldr	r2, [pc, #140]	; (8004f28 <TIM_Base_SetConfig+0x13c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d108      	bne.n	8004eb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a0a      	ldr	r2, [pc, #40]	; (8004f00 <TIM_Base_SetConfig+0x114>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d003      	beq.n	8004ee4 <TIM_Base_SetConfig+0xf8>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a0c      	ldr	r2, [pc, #48]	; (8004f10 <TIM_Base_SetConfig+0x124>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d103      	bne.n	8004eec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	615a      	str	r2, [r3, #20]
}
 8004ef2:	bf00      	nop
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40010000 	.word	0x40010000
 8004f04:	40000400 	.word	0x40000400
 8004f08:	40000800 	.word	0x40000800
 8004f0c:	40000c00 	.word	0x40000c00
 8004f10:	40010400 	.word	0x40010400
 8004f14:	40014000 	.word	0x40014000
 8004f18:	40014400 	.word	0x40014400
 8004f1c:	40014800 	.word	0x40014800
 8004f20:	40001800 	.word	0x40001800
 8004f24:	40001c00 	.word	0x40001c00
 8004f28:	40002000 	.word	0x40002000

08004f2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	f023 0201 	bic.w	r2, r3, #1
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f023 030a 	bic.w	r3, r3, #10
 8004f68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	621a      	str	r2, [r3, #32]
}
 8004f7e:	bf00      	nop
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b087      	sub	sp, #28
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	60f8      	str	r0, [r7, #12]
 8004f92:	60b9      	str	r1, [r7, #8]
 8004f94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	f023 0210 	bic.w	r2, r3, #16
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	031b      	lsls	r3, r3, #12
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	621a      	str	r2, [r3, #32]
}
 8004fde:	bf00      	nop
 8004fe0:	371c      	adds	r7, #28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b085      	sub	sp, #20
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005000:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	f043 0307 	orr.w	r3, r3, #7
 800500c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	609a      	str	r2, [r3, #8]
}
 8005014:	bf00      	nop
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
 800502c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800503a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	021a      	lsls	r2, r3, #8
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	431a      	orrs	r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	4313      	orrs	r3, r2
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	609a      	str	r2, [r3, #8]
}
 8005054:	bf00      	nop
 8005056:	371c      	adds	r7, #28
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005074:	2302      	movs	r3, #2
 8005076:	e05a      	b.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a21      	ldr	r2, [pc, #132]	; (800513c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d022      	beq.n	8005102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c4:	d01d      	beq.n	8005102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a1d      	ldr	r2, [pc, #116]	; (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d018      	beq.n	8005102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a1b      	ldr	r2, [pc, #108]	; (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d013      	beq.n	8005102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a1a      	ldr	r2, [pc, #104]	; (8005148 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00e      	beq.n	8005102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a18      	ldr	r2, [pc, #96]	; (800514c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d009      	beq.n	8005102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a17      	ldr	r2, [pc, #92]	; (8005150 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d004      	beq.n	8005102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a15      	ldr	r2, [pc, #84]	; (8005154 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d10c      	bne.n	800511c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005108:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	4313      	orrs	r3, r2
 8005112:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40010000 	.word	0x40010000
 8005140:	40000400 	.word	0x40000400
 8005144:	40000800 	.word	0x40000800
 8005148:	40000c00 	.word	0x40000c00
 800514c:	40010400 	.word	0x40010400
 8005150:	40014000 	.word	0x40014000
 8005154:	40001800 	.word	0x40001800

08005158 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005180:	b084      	sub	sp, #16
 8005182:	b580      	push	{r7, lr}
 8005184:	b084      	sub	sp, #16
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	f107 001c 	add.w	r0, r7, #28
 800518e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005194:	2b01      	cmp	r3, #1
 8005196:	d122      	bne.n	80051de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80051ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d105      	bne.n	80051d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f001 fbee 	bl	80069b4 <USB_CoreReset>
 80051d8:	4603      	mov	r3, r0
 80051da:	73fb      	strb	r3, [r7, #15]
 80051dc:	e01a      	b.n	8005214 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f001 fbe2 	bl	80069b4 <USB_CoreReset>
 80051f0:	4603      	mov	r3, r0
 80051f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80051f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	639a      	str	r2, [r3, #56]	; 0x38
 8005206:	e005      	b.n	8005214 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005216:	2b01      	cmp	r3, #1
 8005218:	d10b      	bne.n	8005232 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f043 0206 	orr.w	r2, r3, #6
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f043 0220 	orr.w	r2, r3, #32
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005232:	7bfb      	ldrb	r3, [r7, #15]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800523e:	b004      	add	sp, #16
 8005240:	4770      	bx	lr
	...

08005244 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	4613      	mov	r3, r2
 8005250:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005252:	79fb      	ldrb	r3, [r7, #7]
 8005254:	2b02      	cmp	r3, #2
 8005256:	d165      	bne.n	8005324 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4a41      	ldr	r2, [pc, #260]	; (8005360 <USB_SetTurnaroundTime+0x11c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d906      	bls.n	800526e <USB_SetTurnaroundTime+0x2a>
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	4a40      	ldr	r2, [pc, #256]	; (8005364 <USB_SetTurnaroundTime+0x120>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d202      	bcs.n	800526e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005268:	230f      	movs	r3, #15
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	e062      	b.n	8005334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	4a3c      	ldr	r2, [pc, #240]	; (8005364 <USB_SetTurnaroundTime+0x120>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d306      	bcc.n	8005284 <USB_SetTurnaroundTime+0x40>
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	4a3b      	ldr	r2, [pc, #236]	; (8005368 <USB_SetTurnaroundTime+0x124>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d202      	bcs.n	8005284 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800527e:	230e      	movs	r3, #14
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	e057      	b.n	8005334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	4a38      	ldr	r2, [pc, #224]	; (8005368 <USB_SetTurnaroundTime+0x124>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d306      	bcc.n	800529a <USB_SetTurnaroundTime+0x56>
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4a37      	ldr	r2, [pc, #220]	; (800536c <USB_SetTurnaroundTime+0x128>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d202      	bcs.n	800529a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005294:	230d      	movs	r3, #13
 8005296:	617b      	str	r3, [r7, #20]
 8005298:	e04c      	b.n	8005334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	4a33      	ldr	r2, [pc, #204]	; (800536c <USB_SetTurnaroundTime+0x128>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d306      	bcc.n	80052b0 <USB_SetTurnaroundTime+0x6c>
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	4a32      	ldr	r2, [pc, #200]	; (8005370 <USB_SetTurnaroundTime+0x12c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d802      	bhi.n	80052b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80052aa:	230c      	movs	r3, #12
 80052ac:	617b      	str	r3, [r7, #20]
 80052ae:	e041      	b.n	8005334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4a2f      	ldr	r2, [pc, #188]	; (8005370 <USB_SetTurnaroundTime+0x12c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d906      	bls.n	80052c6 <USB_SetTurnaroundTime+0x82>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4a2e      	ldr	r2, [pc, #184]	; (8005374 <USB_SetTurnaroundTime+0x130>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d802      	bhi.n	80052c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80052c0:	230b      	movs	r3, #11
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	e036      	b.n	8005334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	4a2a      	ldr	r2, [pc, #168]	; (8005374 <USB_SetTurnaroundTime+0x130>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d906      	bls.n	80052dc <USB_SetTurnaroundTime+0x98>
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	4a29      	ldr	r2, [pc, #164]	; (8005378 <USB_SetTurnaroundTime+0x134>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d802      	bhi.n	80052dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80052d6:	230a      	movs	r3, #10
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	e02b      	b.n	8005334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4a26      	ldr	r2, [pc, #152]	; (8005378 <USB_SetTurnaroundTime+0x134>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d906      	bls.n	80052f2 <USB_SetTurnaroundTime+0xae>
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	4a25      	ldr	r2, [pc, #148]	; (800537c <USB_SetTurnaroundTime+0x138>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d202      	bcs.n	80052f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80052ec:	2309      	movs	r3, #9
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	e020      	b.n	8005334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	4a21      	ldr	r2, [pc, #132]	; (800537c <USB_SetTurnaroundTime+0x138>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d306      	bcc.n	8005308 <USB_SetTurnaroundTime+0xc4>
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	4a20      	ldr	r2, [pc, #128]	; (8005380 <USB_SetTurnaroundTime+0x13c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d802      	bhi.n	8005308 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005302:	2308      	movs	r3, #8
 8005304:	617b      	str	r3, [r7, #20]
 8005306:	e015      	b.n	8005334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4a1d      	ldr	r2, [pc, #116]	; (8005380 <USB_SetTurnaroundTime+0x13c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d906      	bls.n	800531e <USB_SetTurnaroundTime+0xda>
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4a1c      	ldr	r2, [pc, #112]	; (8005384 <USB_SetTurnaroundTime+0x140>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d202      	bcs.n	800531e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005318:	2307      	movs	r3, #7
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	e00a      	b.n	8005334 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800531e:	2306      	movs	r3, #6
 8005320:	617b      	str	r3, [r7, #20]
 8005322:	e007      	b.n	8005334 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005324:	79fb      	ldrb	r3, [r7, #7]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d102      	bne.n	8005330 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800532a:	2309      	movs	r3, #9
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	e001      	b.n	8005334 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005330:	2309      	movs	r3, #9
 8005332:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	68da      	ldr	r2, [r3, #12]
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	029b      	lsls	r3, r3, #10
 8005348:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800534c:	431a      	orrs	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	371c      	adds	r7, #28
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	00d8acbf 	.word	0x00d8acbf
 8005364:	00e4e1c0 	.word	0x00e4e1c0
 8005368:	00f42400 	.word	0x00f42400
 800536c:	01067380 	.word	0x01067380
 8005370:	011a499f 	.word	0x011a499f
 8005374:	01312cff 	.word	0x01312cff
 8005378:	014ca43f 	.word	0x014ca43f
 800537c:	016e3600 	.word	0x016e3600
 8005380:	01a6ab1f 	.word	0x01a6ab1f
 8005384:	01e84800 	.word	0x01e84800

08005388 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f043 0201 	orr.w	r2, r3, #1
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f023 0201 	bic.w	r2, r3, #1
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	460b      	mov	r3, r1
 80053d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053e8:	78fb      	ldrb	r3, [r7, #3]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d115      	bne.n	800541a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053fa:	2001      	movs	r0, #1
 80053fc:	f7fc f88a 	bl	8001514 <HAL_Delay>
      ms++;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3301      	adds	r3, #1
 8005404:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f001 fa45 	bl	8006896 <USB_GetMode>
 800540c:	4603      	mov	r3, r0
 800540e:	2b01      	cmp	r3, #1
 8005410:	d01e      	beq.n	8005450 <USB_SetCurrentMode+0x84>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2b31      	cmp	r3, #49	; 0x31
 8005416:	d9f0      	bls.n	80053fa <USB_SetCurrentMode+0x2e>
 8005418:	e01a      	b.n	8005450 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d115      	bne.n	800544c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800542c:	2001      	movs	r0, #1
 800542e:	f7fc f871 	bl	8001514 <HAL_Delay>
      ms++;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	3301      	adds	r3, #1
 8005436:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f001 fa2c 	bl	8006896 <USB_GetMode>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d005      	beq.n	8005450 <USB_SetCurrentMode+0x84>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b31      	cmp	r3, #49	; 0x31
 8005448:	d9f0      	bls.n	800542c <USB_SetCurrentMode+0x60>
 800544a:	e001      	b.n	8005450 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e005      	b.n	800545c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b32      	cmp	r3, #50	; 0x32
 8005454:	d101      	bne.n	800545a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e000      	b.n	800545c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005464:	b084      	sub	sp, #16
 8005466:	b580      	push	{r7, lr}
 8005468:	b086      	sub	sp, #24
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
 800546e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005472:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800547e:	2300      	movs	r3, #0
 8005480:	613b      	str	r3, [r7, #16]
 8005482:	e009      	b.n	8005498 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	3340      	adds	r3, #64	; 0x40
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	2200      	movs	r2, #0
 8005490:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	3301      	adds	r3, #1
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	2b0e      	cmp	r3, #14
 800549c:	d9f2      	bls.n	8005484 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800549e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d11c      	bne.n	80054de <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054b2:	f043 0302 	orr.w	r3, r3, #2
 80054b6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	639a      	str	r2, [r3, #56]	; 0x38
 80054dc:	e00b      	b.n	80054f6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054fc:	461a      	mov	r2, r3
 80054fe:	2300      	movs	r3, #0
 8005500:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005508:	4619      	mov	r1, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005510:	461a      	mov	r2, r3
 8005512:	680b      	ldr	r3, [r1, #0]
 8005514:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005518:	2b01      	cmp	r3, #1
 800551a:	d10c      	bne.n	8005536 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800551c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551e:	2b00      	cmp	r3, #0
 8005520:	d104      	bne.n	800552c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005522:	2100      	movs	r1, #0
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f965 	bl	80057f4 <USB_SetDevSpeed>
 800552a:	e008      	b.n	800553e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800552c:	2101      	movs	r1, #1
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f960 	bl	80057f4 <USB_SetDevSpeed>
 8005534:	e003      	b.n	800553e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005536:	2103      	movs	r1, #3
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f95b 	bl	80057f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800553e:	2110      	movs	r1, #16
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f8f3 	bl	800572c <USB_FlushTxFifo>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f91f 	bl	8005794 <USB_FlushRxFifo>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005566:	461a      	mov	r2, r3
 8005568:	2300      	movs	r3, #0
 800556a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005572:	461a      	mov	r2, r3
 8005574:	2300      	movs	r3, #0
 8005576:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557e:	461a      	mov	r2, r3
 8005580:	2300      	movs	r3, #0
 8005582:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005584:	2300      	movs	r3, #0
 8005586:	613b      	str	r3, [r7, #16]
 8005588:	e043      	b.n	8005612 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800559c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055a0:	d118      	bne.n	80055d4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10a      	bne.n	80055be <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b4:	461a      	mov	r2, r3
 80055b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055ba:	6013      	str	r3, [r2, #0]
 80055bc:	e013      	b.n	80055e6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ca:	461a      	mov	r2, r3
 80055cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	e008      	b.n	80055e6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e0:	461a      	mov	r2, r3
 80055e2:	2300      	movs	r3, #0
 80055e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f2:	461a      	mov	r2, r3
 80055f4:	2300      	movs	r3, #0
 80055f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005604:	461a      	mov	r2, r3
 8005606:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800560a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	3301      	adds	r3, #1
 8005610:	613b      	str	r3, [r7, #16]
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	429a      	cmp	r2, r3
 8005618:	d3b7      	bcc.n	800558a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800561a:	2300      	movs	r3, #0
 800561c:	613b      	str	r3, [r7, #16]
 800561e:	e043      	b.n	80056a8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005636:	d118      	bne.n	800566a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10a      	bne.n	8005654 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564a:	461a      	mov	r2, r3
 800564c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	e013      	b.n	800567c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005660:	461a      	mov	r2, r3
 8005662:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	e008      	b.n	800567c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	4413      	add	r3, r2
 8005672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005676:	461a      	mov	r2, r3
 8005678:	2300      	movs	r3, #0
 800567a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005688:	461a      	mov	r2, r3
 800568a:	2300      	movs	r3, #0
 800568c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569a:	461a      	mov	r2, r3
 800569c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	3301      	adds	r3, #1
 80056a6:	613b      	str	r3, [r7, #16]
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d3b7      	bcc.n	8005620 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80056d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80056d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d105      	bne.n	80056e4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	f043 0210 	orr.w	r2, r3, #16
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	699a      	ldr	r2, [r3, #24]
 80056e8:	4b0f      	ldr	r3, [pc, #60]	; (8005728 <USB_DevInit+0x2c4>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80056f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d005      	beq.n	8005702 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	f043 0208 	orr.w	r2, r3, #8
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005704:	2b01      	cmp	r3, #1
 8005706:	d107      	bne.n	8005718 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005710:	f043 0304 	orr.w	r3, r3, #4
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005718:	7dfb      	ldrb	r3, [r7, #23]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005724:	b004      	add	sp, #16
 8005726:	4770      	bx	lr
 8005728:	803c3800 	.word	0x803c3800

0800572c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3301      	adds	r3, #1
 800573e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4a13      	ldr	r2, [pc, #76]	; (8005790 <USB_FlushTxFifo+0x64>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d901      	bls.n	800574c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e01b      	b.n	8005784 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	daf2      	bge.n	800573a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	019b      	lsls	r3, r3, #6
 800575c:	f043 0220 	orr.w	r2, r3, #32
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	3301      	adds	r3, #1
 8005768:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	4a08      	ldr	r2, [pc, #32]	; (8005790 <USB_FlushTxFifo+0x64>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d901      	bls.n	8005776 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e006      	b.n	8005784 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f003 0320 	and.w	r3, r3, #32
 800577e:	2b20      	cmp	r3, #32
 8005780:	d0f0      	beq.n	8005764 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	00030d40 	.word	0x00030d40

08005794 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	3301      	adds	r3, #1
 80057a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	4a11      	ldr	r2, [pc, #68]	; (80057f0 <USB_FlushRxFifo+0x5c>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d901      	bls.n	80057b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e018      	b.n	80057e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	daf2      	bge.n	80057a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2210      	movs	r2, #16
 80057c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	3301      	adds	r3, #1
 80057c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4a08      	ldr	r2, [pc, #32]	; (80057f0 <USB_FlushRxFifo+0x5c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d901      	bls.n	80057d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e006      	b.n	80057e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f003 0310 	and.w	r3, r3, #16
 80057de:	2b10      	cmp	r3, #16
 80057e0:	d0f0      	beq.n	80057c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	00030d40 	.word	0x00030d40

080057f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	460b      	mov	r3, r1
 80057fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	78fb      	ldrb	r3, [r7, #3]
 800580e:	68f9      	ldr	r1, [r7, #12]
 8005810:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005814:	4313      	orrs	r3, r2
 8005816:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005826:	b480      	push	{r7}
 8005828:	b087      	sub	sp, #28
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f003 0306 	and.w	r3, r3, #6
 800583e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d102      	bne.n	800584c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005846:	2300      	movs	r3, #0
 8005848:	75fb      	strb	r3, [r7, #23]
 800584a:	e00a      	b.n	8005862 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b02      	cmp	r3, #2
 8005850:	d002      	beq.n	8005858 <USB_GetDevSpeed+0x32>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b06      	cmp	r3, #6
 8005856:	d102      	bne.n	800585e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005858:	2302      	movs	r3, #2
 800585a:	75fb      	strb	r3, [r7, #23]
 800585c:	e001      	b.n	8005862 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800585e:	230f      	movs	r3, #15
 8005860:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005862:	7dfb      	ldrb	r3, [r7, #23]
}
 8005864:	4618      	mov	r0, r3
 8005866:	371c      	adds	r7, #28
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	785b      	ldrb	r3, [r3, #1]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d13a      	bne.n	8005902 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005892:	69da      	ldr	r2, [r3, #28]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	f003 030f 	and.w	r3, r3, #15
 800589c:	2101      	movs	r1, #1
 800589e:	fa01 f303 	lsl.w	r3, r1, r3
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	68f9      	ldr	r1, [r7, #12]
 80058a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058aa:	4313      	orrs	r3, r2
 80058ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d155      	bne.n	8005970 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	791b      	ldrb	r3, [r3, #4]
 80058de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	059b      	lsls	r3, r3, #22
 80058e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058e8:	4313      	orrs	r3, r2
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	0151      	lsls	r1, r2, #5
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	440a      	add	r2, r1
 80058f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	e036      	b.n	8005970 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005908:	69da      	ldr	r2, [r3, #28]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	f003 030f 	and.w	r3, r3, #15
 8005912:	2101      	movs	r1, #1
 8005914:	fa01 f303 	lsl.w	r3, r1, r3
 8005918:	041b      	lsls	r3, r3, #16
 800591a:	68f9      	ldr	r1, [r7, #12]
 800591c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005920:	4313      	orrs	r3, r2
 8005922:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d11a      	bne.n	8005970 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	791b      	ldrb	r3, [r3, #4]
 8005954:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005956:	430b      	orrs	r3, r1
 8005958:	4313      	orrs	r3, r2
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	0151      	lsls	r1, r2, #5
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	440a      	add	r2, r1
 8005962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800596a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800596e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
	...

08005980 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	785b      	ldrb	r3, [r3, #1]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d161      	bne.n	8005a60 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059b2:	d11f      	bne.n	80059f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	0151      	lsls	r1, r2, #5
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	440a      	add	r2, r1
 80059ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	0151      	lsls	r1, r2, #5
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	440a      	add	r2, r1
 80059ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	f003 030f 	and.w	r3, r3, #15
 8005a04:	2101      	movs	r1, #1
 8005a06:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	43db      	mvns	r3, r3
 8005a0e:	68f9      	ldr	r1, [r7, #12]
 8005a10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a14:	4013      	ands	r3, r2
 8005a16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1e:	69da      	ldr	r2, [r3, #28]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	f003 030f 	and.w	r3, r3, #15
 8005a28:	2101      	movs	r1, #1
 8005a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	43db      	mvns	r3, r3
 8005a32:	68f9      	ldr	r1, [r7, #12]
 8005a34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a38:	4013      	ands	r3, r2
 8005a3a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	0159      	lsls	r1, r3, #5
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	440b      	add	r3, r1
 8005a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a56:	4619      	mov	r1, r3
 8005a58:	4b35      	ldr	r3, [pc, #212]	; (8005b30 <USB_DeactivateEndpoint+0x1b0>)
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	600b      	str	r3, [r1, #0]
 8005a5e:	e060      	b.n	8005b22 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a76:	d11f      	bne.n	8005ab8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	0151      	lsls	r1, r2, #5
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	440a      	add	r2, r1
 8005a8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a96:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	0151      	lsls	r1, r2, #5
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	440a      	add	r2, r1
 8005aae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ab2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ab6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	f003 030f 	and.w	r3, r3, #15
 8005ac8:	2101      	movs	r1, #1
 8005aca:	fa01 f303 	lsl.w	r3, r1, r3
 8005ace:	041b      	lsls	r3, r3, #16
 8005ad0:	43db      	mvns	r3, r3
 8005ad2:	68f9      	ldr	r1, [r7, #12]
 8005ad4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ad8:	4013      	ands	r3, r2
 8005ada:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae2:	69da      	ldr	r2, [r3, #28]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	f003 030f 	and.w	r3, r3, #15
 8005aec:	2101      	movs	r1, #1
 8005aee:	fa01 f303 	lsl.w	r3, r1, r3
 8005af2:	041b      	lsls	r3, r3, #16
 8005af4:	43db      	mvns	r3, r3
 8005af6:	68f9      	ldr	r1, [r7, #12]
 8005af8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005afc:	4013      	ands	r3, r2
 8005afe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	0159      	lsls	r1, r3, #5
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	440b      	add	r3, r1
 8005b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	4b05      	ldr	r3, [pc, #20]	; (8005b34 <USB_DeactivateEndpoint+0x1b4>)
 8005b1e:	4013      	ands	r3, r2
 8005b20:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	ec337800 	.word	0xec337800
 8005b34:	eff37800 	.word	0xeff37800

08005b38 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08a      	sub	sp, #40	; 0x28
 8005b3c:	af02      	add	r7, sp, #8
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	4613      	mov	r3, r2
 8005b44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	785b      	ldrb	r3, [r3, #1]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	f040 815c 	bne.w	8005e12 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d132      	bne.n	8005bc8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	0151      	lsls	r1, r2, #5
 8005b74:	69fa      	ldr	r2, [r7, #28]
 8005b76:	440a      	add	r2, r1
 8005b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	0151      	lsls	r1, r2, #5
 8005b98:	69fa      	ldr	r2, [r7, #28]
 8005b9a:	440a      	add	r2, r1
 8005b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ba4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	0151      	lsls	r1, r2, #5
 8005bb8:	69fa      	ldr	r2, [r7, #28]
 8005bba:	440a      	add	r2, r1
 8005bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc0:	0cdb      	lsrs	r3, r3, #19
 8005bc2:	04db      	lsls	r3, r3, #19
 8005bc4:	6113      	str	r3, [r2, #16]
 8005bc6:	e074      	b.n	8005cb2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	0151      	lsls	r1, r2, #5
 8005bda:	69fa      	ldr	r2, [r7, #28]
 8005bdc:	440a      	add	r2, r1
 8005bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be2:	0cdb      	lsrs	r3, r3, #19
 8005be4:	04db      	lsls	r3, r3, #19
 8005be6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	0151      	lsls	r1, r2, #5
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	440a      	add	r2, r1
 8005bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c18:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	6999      	ldr	r1, [r3, #24]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	440b      	add	r3, r1
 8005c24:	1e59      	subs	r1, r3, #1
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c2e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c30:	4b9d      	ldr	r3, [pc, #628]	; (8005ea8 <USB_EPStartXfer+0x370>)
 8005c32:	400b      	ands	r3, r1
 8005c34:	69b9      	ldr	r1, [r7, #24]
 8005c36:	0148      	lsls	r0, r1, #5
 8005c38:	69f9      	ldr	r1, [r7, #28]
 8005c3a:	4401      	add	r1, r0
 8005c3c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c40:	4313      	orrs	r3, r2
 8005c42:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c50:	691a      	ldr	r2, [r3, #16]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c5a:	69b9      	ldr	r1, [r7, #24]
 8005c5c:	0148      	lsls	r0, r1, #5
 8005c5e:	69f9      	ldr	r1, [r7, #28]
 8005c60:	4401      	add	r1, r0
 8005c62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c66:	4313      	orrs	r3, r2
 8005c68:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	791b      	ldrb	r3, [r3, #4]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d11f      	bne.n	8005cb2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	0151      	lsls	r1, r2, #5
 8005c84:	69fa      	ldr	r2, [r7, #28]
 8005c86:	440a      	add	r2, r1
 8005c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c8c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005c90:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cb0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005cb2:	79fb      	ldrb	r3, [r7, #7]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d14b      	bne.n	8005d50 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d009      	beq.n	8005cd4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ccc:	461a      	mov	r2, r3
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	791b      	ldrb	r3, [r3, #4]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d128      	bne.n	8005d2e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d110      	bne.n	8005d0e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	0151      	lsls	r1, r2, #5
 8005cfe:	69fa      	ldr	r2, [r7, #28]
 8005d00:	440a      	add	r2, r1
 8005d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d0a:	6013      	str	r3, [r2, #0]
 8005d0c:	e00f      	b.n	8005d2e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	0151      	lsls	r1, r2, #5
 8005d20:	69fa      	ldr	r2, [r7, #28]
 8005d22:	440a      	add	r2, r1
 8005d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d2c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	0151      	lsls	r1, r2, #5
 8005d40:	69fa      	ldr	r2, [r7, #28]
 8005d42:	440a      	add	r2, r1
 8005d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	e133      	b.n	8005fb8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69ba      	ldr	r2, [r7, #24]
 8005d60:	0151      	lsls	r1, r2, #5
 8005d62:	69fa      	ldr	r2, [r7, #28]
 8005d64:	440a      	add	r2, r1
 8005d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d6e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	791b      	ldrb	r3, [r3, #4]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d015      	beq.n	8005da4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 811b 	beq.w	8005fb8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	f003 030f 	and.w	r3, r3, #15
 8005d92:	2101      	movs	r1, #1
 8005d94:	fa01 f303 	lsl.w	r3, r1, r3
 8005d98:	69f9      	ldr	r1, [r7, #28]
 8005d9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	634b      	str	r3, [r1, #52]	; 0x34
 8005da2:	e109      	b.n	8005fb8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d110      	bne.n	8005dd6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	0151      	lsls	r1, r2, #5
 8005dc6:	69fa      	ldr	r2, [r7, #28]
 8005dc8:	440a      	add	r2, r1
 8005dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	e00f      	b.n	8005df6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	0151      	lsls	r1, r2, #5
 8005de8:	69fa      	ldr	r2, [r7, #28]
 8005dea:	440a      	add	r2, r1
 8005dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005df4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	6919      	ldr	r1, [r3, #16]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	781a      	ldrb	r2, [r3, #0]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	b298      	uxth	r0, r3
 8005e04:	79fb      	ldrb	r3, [r7, #7]
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	4603      	mov	r3, r0
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 fade 	bl	80063cc <USB_WritePacket>
 8005e10:	e0d2      	b.n	8005fb8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	0151      	lsls	r1, r2, #5
 8005e24:	69fa      	ldr	r2, [r7, #28]
 8005e26:	440a      	add	r2, r1
 8005e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e2c:	0cdb      	lsrs	r3, r3, #19
 8005e2e:	04db      	lsls	r3, r3, #19
 8005e30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	0151      	lsls	r1, r2, #5
 8005e44:	69fa      	ldr	r2, [r7, #28]
 8005e46:	440a      	add	r2, r1
 8005e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e54:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d126      	bne.n	8005eac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6a:	691a      	ldr	r2, [r3, #16]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e74:	69b9      	ldr	r1, [r7, #24]
 8005e76:	0148      	lsls	r0, r1, #5
 8005e78:	69f9      	ldr	r1, [r7, #28]
 8005e7a:	4401      	add	r1, r0
 8005e7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e80:	4313      	orrs	r3, r2
 8005e82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	0151      	lsls	r1, r2, #5
 8005e96:	69fa      	ldr	r2, [r7, #28]
 8005e98:	440a      	add	r2, r1
 8005e9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ea2:	6113      	str	r3, [r2, #16]
 8005ea4:	e03a      	b.n	8005f1c <USB_EPStartXfer+0x3e4>
 8005ea6:	bf00      	nop
 8005ea8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	699a      	ldr	r2, [r3, #24]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	1e5a      	subs	r2, r3, #1
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	8afa      	ldrh	r2, [r7, #22]
 8005ec8:	fb03 f202 	mul.w	r2, r3, r2
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005edc:	691a      	ldr	r2, [r3, #16]
 8005ede:	8afb      	ldrh	r3, [r7, #22]
 8005ee0:	04d9      	lsls	r1, r3, #19
 8005ee2:	4b38      	ldr	r3, [pc, #224]	; (8005fc4 <USB_EPStartXfer+0x48c>)
 8005ee4:	400b      	ands	r3, r1
 8005ee6:	69b9      	ldr	r1, [r7, #24]
 8005ee8:	0148      	lsls	r0, r1, #5
 8005eea:	69f9      	ldr	r1, [r7, #28]
 8005eec:	4401      	add	r1, r0
 8005eee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f02:	691a      	ldr	r2, [r3, #16]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f0c:	69b9      	ldr	r1, [r7, #24]
 8005f0e:	0148      	lsls	r0, r1, #5
 8005f10:	69f9      	ldr	r1, [r7, #28]
 8005f12:	4401      	add	r1, r0
 8005f14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f1c:	79fb      	ldrb	r3, [r7, #7]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d10d      	bne.n	8005f3e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d009      	beq.n	8005f3e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	6919      	ldr	r1, [r3, #16]
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3a:	460a      	mov	r2, r1
 8005f3c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	791b      	ldrb	r3, [r3, #4]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d128      	bne.n	8005f98 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d110      	bne.n	8005f78 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	0151      	lsls	r1, r2, #5
 8005f68:	69fa      	ldr	r2, [r7, #28]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	e00f      	b.n	8005f98 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	0151      	lsls	r1, r2, #5
 8005f8a:	69fa      	ldr	r2, [r7, #28]
 8005f8c:	440a      	add	r2, r1
 8005f8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	0151      	lsls	r1, r2, #5
 8005faa:	69fa      	ldr	r2, [r7, #28]
 8005fac:	440a      	add	r2, r1
 8005fae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3720      	adds	r7, #32
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	1ff80000 	.word	0x1ff80000

08005fc8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	785b      	ldrb	r3, [r3, #1]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	f040 80ce 	bne.w	8006186 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d132      	bne.n	8006058 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	0151      	lsls	r1, r2, #5
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	440a      	add	r2, r1
 8006008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800600c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006010:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006014:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	4413      	add	r3, r2
 800601e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	0151      	lsls	r1, r2, #5
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	440a      	add	r2, r1
 800602c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006030:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006034:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	0151      	lsls	r1, r2, #5
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	440a      	add	r2, r1
 800604c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006050:	0cdb      	lsrs	r3, r3, #19
 8006052:	04db      	lsls	r3, r3, #19
 8006054:	6113      	str	r3, [r2, #16]
 8006056:	e04e      	b.n	80060f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	0151      	lsls	r1, r2, #5
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	440a      	add	r2, r1
 800606e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006072:	0cdb      	lsrs	r3, r3, #19
 8006074:	04db      	lsls	r3, r3, #19
 8006076:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	0151      	lsls	r1, r2, #5
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	440a      	add	r2, r1
 800608e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006092:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006096:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800609a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	699a      	ldr	r2, [r3, #24]
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d903      	bls.n	80060b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	0151      	lsls	r1, r2, #5
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	440a      	add	r2, r1
 80060c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060dc:	691a      	ldr	r2, [r3, #16]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060e6:	6939      	ldr	r1, [r7, #16]
 80060e8:	0148      	lsls	r0, r1, #5
 80060ea:	6979      	ldr	r1, [r7, #20]
 80060ec:	4401      	add	r1, r0
 80060ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80060f2:	4313      	orrs	r3, r2
 80060f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80060f6:	79fb      	ldrb	r3, [r7, #7]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d11e      	bne.n	800613a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d009      	beq.n	8006118 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006110:	461a      	mov	r2, r3
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	0151      	lsls	r1, r2, #5
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	440a      	add	r2, r1
 800612e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006132:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006136:	6013      	str	r3, [r2, #0]
 8006138:	e097      	b.n	800626a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	4413      	add	r3, r2
 8006142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	0151      	lsls	r1, r2, #5
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	440a      	add	r2, r1
 8006150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006154:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006158:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 8083 	beq.w	800626a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800616a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	f003 030f 	and.w	r3, r3, #15
 8006174:	2101      	movs	r1, #1
 8006176:	fa01 f303 	lsl.w	r3, r1, r3
 800617a:	6979      	ldr	r1, [r7, #20]
 800617c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006180:	4313      	orrs	r3, r2
 8006182:	634b      	str	r3, [r1, #52]	; 0x34
 8006184:	e071      	b.n	800626a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	0151      	lsls	r1, r2, #5
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	440a      	add	r2, r1
 800619c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061a0:	0cdb      	lsrs	r3, r3, #19
 80061a2:	04db      	lsls	r3, r3, #19
 80061a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	0151      	lsls	r1, r2, #5
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	440a      	add	r2, r1
 80061bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061c8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	68da      	ldr	r2, [r3, #12]
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	0151      	lsls	r1, r2, #5
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	440a      	add	r2, r1
 80061f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006200:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	015a      	lsls	r2, r3, #5
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	4413      	add	r3, r2
 800620a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620e:	691a      	ldr	r2, [r3, #16]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006218:	6939      	ldr	r1, [r7, #16]
 800621a:	0148      	lsls	r0, r1, #5
 800621c:	6979      	ldr	r1, [r7, #20]
 800621e:	4401      	add	r1, r0
 8006220:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006224:	4313      	orrs	r3, r2
 8006226:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006228:	79fb      	ldrb	r3, [r7, #7]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d10d      	bne.n	800624a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d009      	beq.n	800624a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	6919      	ldr	r1, [r3, #16]
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006246:	460a      	mov	r2, r1
 8006248:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	4413      	add	r3, r2
 8006252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	0151      	lsls	r1, r2, #5
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	440a      	add	r2, r1
 8006260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006264:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006268:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	371c      	adds	r7, #28
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	785b      	ldrb	r3, [r3, #1]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d14a      	bne.n	800632c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ae:	f040 8086 	bne.w	80063be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	7812      	ldrb	r2, [r2, #0]
 80062c6:	0151      	lsls	r1, r2, #5
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	440a      	add	r2, r1
 80062cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062d4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	7812      	ldrb	r2, [r2, #0]
 80062ea:	0151      	lsls	r1, r2, #5
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	440a      	add	r2, r1
 80062f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3301      	adds	r3, #1
 80062fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f242 7210 	movw	r2, #10000	; 0x2710
 8006306:	4293      	cmp	r3, r2
 8006308:	d902      	bls.n	8006310 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	75fb      	strb	r3, [r7, #23]
          break;
 800630e:	e056      	b.n	80063be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006324:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006328:	d0e7      	beq.n	80062fa <USB_EPStopXfer+0x82>
 800632a:	e048      	b.n	80063be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	4413      	add	r3, r2
 8006336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006340:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006344:	d13b      	bne.n	80063be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	7812      	ldrb	r2, [r2, #0]
 800635a:	0151      	lsls	r1, r2, #5
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	440a      	add	r2, r1
 8006360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006364:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006368:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	7812      	ldrb	r2, [r2, #0]
 800637e:	0151      	lsls	r1, r2, #5
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	440a      	add	r2, r1
 8006384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006388:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800638c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3301      	adds	r3, #1
 8006392:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f242 7210 	movw	r2, #10000	; 0x2710
 800639a:	4293      	cmp	r3, r2
 800639c:	d902      	bls.n	80063a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	75fb      	strb	r3, [r7, #23]
          break;
 80063a2:	e00c      	b.n	80063be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063bc:	d0e7      	beq.n	800638e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80063be:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	371c      	adds	r7, #28
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b089      	sub	sp, #36	; 0x24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	4611      	mov	r1, r2
 80063d8:	461a      	mov	r2, r3
 80063da:	460b      	mov	r3, r1
 80063dc:	71fb      	strb	r3, [r7, #7]
 80063de:	4613      	mov	r3, r2
 80063e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80063ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d123      	bne.n	800643a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80063f2:	88bb      	ldrh	r3, [r7, #4]
 80063f4:	3303      	adds	r3, #3
 80063f6:	089b      	lsrs	r3, r3, #2
 80063f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80063fa:	2300      	movs	r3, #0
 80063fc:	61bb      	str	r3, [r7, #24]
 80063fe:	e018      	b.n	8006432 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006400:	79fb      	ldrb	r3, [r7, #7]
 8006402:	031a      	lsls	r2, r3, #12
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	4413      	add	r3, r2
 8006408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800640c:	461a      	mov	r2, r3
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	3301      	adds	r3, #1
 8006418:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	3301      	adds	r3, #1
 800641e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	3301      	adds	r3, #1
 8006424:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	3301      	adds	r3, #1
 800642a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	3301      	adds	r3, #1
 8006430:	61bb      	str	r3, [r7, #24]
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	429a      	cmp	r2, r3
 8006438:	d3e2      	bcc.n	8006400 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3724      	adds	r7, #36	; 0x24
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006448:	b480      	push	{r7}
 800644a:	b08b      	sub	sp, #44	; 0x2c
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	4613      	mov	r3, r2
 8006454:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800645e:	88fb      	ldrh	r3, [r7, #6]
 8006460:	089b      	lsrs	r3, r3, #2
 8006462:	b29b      	uxth	r3, r3
 8006464:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006466:	88fb      	ldrh	r3, [r7, #6]
 8006468:	f003 0303 	and.w	r3, r3, #3
 800646c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800646e:	2300      	movs	r3, #0
 8006470:	623b      	str	r3, [r7, #32]
 8006472:	e014      	b.n	800649e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	3301      	adds	r3, #1
 8006484:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	3301      	adds	r3, #1
 800648a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	3301      	adds	r3, #1
 8006490:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	3301      	adds	r3, #1
 8006496:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006498:	6a3b      	ldr	r3, [r7, #32]
 800649a:	3301      	adds	r3, #1
 800649c:	623b      	str	r3, [r7, #32]
 800649e:	6a3a      	ldr	r2, [r7, #32]
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d3e6      	bcc.n	8006474 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80064a6:	8bfb      	ldrh	r3, [r7, #30]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d01e      	beq.n	80064ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064b6:	461a      	mov	r2, r3
 80064b8:	f107 0310 	add.w	r3, r7, #16
 80064bc:	6812      	ldr	r2, [r2, #0]
 80064be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	00db      	lsls	r3, r3, #3
 80064c8:	fa22 f303 	lsr.w	r3, r2, r3
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	701a      	strb	r2, [r3, #0]
      i++;
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	3301      	adds	r3, #1
 80064d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	3301      	adds	r3, #1
 80064dc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80064de:	8bfb      	ldrh	r3, [r7, #30]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80064e4:	8bfb      	ldrh	r3, [r7, #30]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1ea      	bne.n	80064c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	372c      	adds	r7, #44	; 0x2c
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	785b      	ldrb	r3, [r3, #1]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d12c      	bne.n	800656e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	db12      	blt.n	800654c <USB_EPSetStall+0x54>
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00f      	beq.n	800654c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4413      	add	r3, r2
 8006534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	0151      	lsls	r1, r2, #5
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	440a      	add	r2, r1
 8006542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006546:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800654a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	0151      	lsls	r1, r2, #5
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	440a      	add	r2, r1
 8006562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006566:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	e02b      	b.n	80065c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4413      	add	r3, r2
 8006576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	db12      	blt.n	80065a6 <USB_EPSetStall+0xae>
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00f      	beq.n	80065a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	4413      	add	r3, r2
 800658e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	0151      	lsls	r1, r2, #5
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	440a      	add	r2, r1
 800659c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	0151      	lsls	r1, r2, #5
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	440a      	add	r2, r1
 80065bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3714      	adds	r7, #20
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	785b      	ldrb	r3, [r3, #1]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d128      	bne.n	8006642 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	0151      	lsls	r1, r2, #5
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	440a      	add	r2, r1
 8006606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800660a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800660e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	791b      	ldrb	r3, [r3, #4]
 8006614:	2b03      	cmp	r3, #3
 8006616:	d003      	beq.n	8006620 <USB_EPClearStall+0x4c>
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	791b      	ldrb	r3, [r3, #4]
 800661c:	2b02      	cmp	r3, #2
 800661e:	d138      	bne.n	8006692 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	0151      	lsls	r1, r2, #5
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	440a      	add	r2, r1
 8006636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800663a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800663e:	6013      	str	r3, [r2, #0]
 8006640:	e027      	b.n	8006692 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	0151      	lsls	r1, r2, #5
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	440a      	add	r2, r1
 8006658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800665c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006660:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	791b      	ldrb	r3, [r3, #4]
 8006666:	2b03      	cmp	r3, #3
 8006668:	d003      	beq.n	8006672 <USB_EPClearStall+0x9e>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	791b      	ldrb	r3, [r3, #4]
 800666e:	2b02      	cmp	r3, #2
 8006670:	d10f      	bne.n	8006692 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4413      	add	r3, r2
 800667a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	0151      	lsls	r1, r2, #5
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	440a      	add	r2, r1
 8006688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800668c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006690:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80066c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80066d4:	68f9      	ldr	r1, [r7, #12]
 80066d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066da:	4313      	orrs	r3, r2
 80066dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006706:	f023 0303 	bic.w	r3, r3, #3
 800670a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800671a:	f023 0302 	bic.w	r3, r3, #2
 800671e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800672e:	b480      	push	{r7}
 8006730:	b085      	sub	sp, #20
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006748:	f023 0303 	bic.w	r3, r3, #3
 800674c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800675c:	f043 0302 	orr.w	r3, r3, #2
 8006760:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	4013      	ands	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006788:	68fb      	ldr	r3, [r7, #12]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006796:	b480      	push	{r7}
 8006798:	b085      	sub	sp, #20
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	4013      	ands	r3, r2
 80067b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	0c1b      	lsrs	r3, r3, #16
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b085      	sub	sp, #20
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e6:	69db      	ldr	r3, [r3, #28]
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	4013      	ands	r3, r2
 80067ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	b29b      	uxth	r3, r3
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80067fe:	b480      	push	{r7}
 8006800:	b085      	sub	sp, #20
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	460b      	mov	r3, r1
 8006808:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800680e:	78fb      	ldrb	r3, [r7, #3]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	4013      	ands	r3, r2
 800682a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800682c:	68bb      	ldr	r3, [r7, #8]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800683a:	b480      	push	{r7}
 800683c:	b087      	sub	sp, #28
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	460b      	mov	r3, r1
 8006844:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800685a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800685e:	78fb      	ldrb	r3, [r7, #3]
 8006860:	f003 030f 	and.w	r3, r3, #15
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	fa22 f303 	lsr.w	r3, r2, r3
 800686a:	01db      	lsls	r3, r3, #7
 800686c:	b2db      	uxtb	r3, r3
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	4313      	orrs	r3, r2
 8006872:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006874:	78fb      	ldrb	r3, [r7, #3]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	4013      	ands	r3, r2
 8006886:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006888:	68bb      	ldr	r3, [r7, #8]
}
 800688a:	4618      	mov	r0, r3
 800688c:	371c      	adds	r7, #28
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006896:	b480      	push	{r7}
 8006898:	b083      	sub	sp, #12
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	f003 0301 	and.w	r3, r3, #1
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b085      	sub	sp, #20
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80068d0:	f023 0307 	bic.w	r3, r3, #7
 80068d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	460b      	mov	r3, r1
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	333c      	adds	r3, #60	; 0x3c
 800690e:	3304      	adds	r3, #4
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	4a26      	ldr	r2, [pc, #152]	; (80069b0 <USB_EP0_OutStart+0xb8>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d90a      	bls.n	8006932 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800692c:	d101      	bne.n	8006932 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	e037      	b.n	80069a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006938:	461a      	mov	r2, r3
 800693a:	2300      	movs	r3, #0
 800693c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800694c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006950:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006960:	f043 0318 	orr.w	r3, r3, #24
 8006964:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006974:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006978:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800697a:	7afb      	ldrb	r3, [r7, #11]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d10f      	bne.n	80069a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006986:	461a      	mov	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800699a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800699e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	4f54300a 	.word	0x4f54300a

080069b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	3301      	adds	r3, #1
 80069c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	4a13      	ldr	r2, [pc, #76]	; (8006a18 <USB_CoreReset+0x64>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d901      	bls.n	80069d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e01b      	b.n	8006a0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	daf2      	bge.n	80069c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069da:	2300      	movs	r3, #0
 80069dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	f043 0201 	orr.w	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	3301      	adds	r3, #1
 80069ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4a09      	ldr	r2, [pc, #36]	; (8006a18 <USB_CoreReset+0x64>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d901      	bls.n	80069fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e006      	b.n	8006a0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d0f0      	beq.n	80069ea <USB_CoreReset+0x36>

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	00030d40 	.word	0x00030d40

08006a1c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	460b      	mov	r3, r1
 8006a26:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a28:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a2c:	f002 fca2 	bl	8009374 <USBD_static_malloc>
 8006a30:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d109      	bne.n	8006a4c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	32b0      	adds	r2, #176	; 0xb0
 8006a42:	2100      	movs	r1, #0
 8006a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006a48:	2302      	movs	r3, #2
 8006a4a:	e0d4      	b.n	8006bf6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006a4c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006a50:	2100      	movs	r1, #0
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f002 fdd7 	bl	8009606 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	32b0      	adds	r2, #176	; 0xb0
 8006a62:	68f9      	ldr	r1, [r7, #12]
 8006a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	32b0      	adds	r2, #176	; 0xb0
 8006a72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	7c1b      	ldrb	r3, [r3, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d138      	bne.n	8006af6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006a84:	4b5e      	ldr	r3, [pc, #376]	; (8006c00 <USBD_CDC_Init+0x1e4>)
 8006a86:	7819      	ldrb	r1, [r3, #0]
 8006a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f002 fb4d 	bl	800912e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006a94:	4b5a      	ldr	r3, [pc, #360]	; (8006c00 <USBD_CDC_Init+0x1e4>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	f003 020f 	and.w	r2, r3, #15
 8006a9c:	6879      	ldr	r1, [r7, #4]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	440b      	add	r3, r1
 8006aa8:	3324      	adds	r3, #36	; 0x24
 8006aaa:	2201      	movs	r2, #1
 8006aac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006aae:	4b55      	ldr	r3, [pc, #340]	; (8006c04 <USBD_CDC_Init+0x1e8>)
 8006ab0:	7819      	ldrb	r1, [r3, #0]
 8006ab2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f002 fb38 	bl	800912e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006abe:	4b51      	ldr	r3, [pc, #324]	; (8006c04 <USBD_CDC_Init+0x1e8>)
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	f003 020f 	and.w	r2, r3, #15
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	440b      	add	r3, r1
 8006ad2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006ada:	4b4b      	ldr	r3, [pc, #300]	; (8006c08 <USBD_CDC_Init+0x1ec>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	f003 020f 	and.w	r2, r3, #15
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	440b      	add	r3, r1
 8006aee:	3326      	adds	r3, #38	; 0x26
 8006af0:	2210      	movs	r2, #16
 8006af2:	801a      	strh	r2, [r3, #0]
 8006af4:	e035      	b.n	8006b62 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006af6:	4b42      	ldr	r3, [pc, #264]	; (8006c00 <USBD_CDC_Init+0x1e4>)
 8006af8:	7819      	ldrb	r1, [r3, #0]
 8006afa:	2340      	movs	r3, #64	; 0x40
 8006afc:	2202      	movs	r2, #2
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f002 fb15 	bl	800912e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b04:	4b3e      	ldr	r3, [pc, #248]	; (8006c00 <USBD_CDC_Init+0x1e4>)
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	f003 020f 	and.w	r2, r3, #15
 8006b0c:	6879      	ldr	r1, [r7, #4]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	440b      	add	r3, r1
 8006b18:	3324      	adds	r3, #36	; 0x24
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b1e:	4b39      	ldr	r3, [pc, #228]	; (8006c04 <USBD_CDC_Init+0x1e8>)
 8006b20:	7819      	ldrb	r1, [r3, #0]
 8006b22:	2340      	movs	r3, #64	; 0x40
 8006b24:	2202      	movs	r2, #2
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f002 fb01 	bl	800912e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b2c:	4b35      	ldr	r3, [pc, #212]	; (8006c04 <USBD_CDC_Init+0x1e8>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	f003 020f 	and.w	r2, r3, #15
 8006b34:	6879      	ldr	r1, [r7, #4]
 8006b36:	4613      	mov	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	440b      	add	r3, r1
 8006b40:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b44:	2201      	movs	r2, #1
 8006b46:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006b48:	4b2f      	ldr	r3, [pc, #188]	; (8006c08 <USBD_CDC_Init+0x1ec>)
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	f003 020f 	and.w	r2, r3, #15
 8006b50:	6879      	ldr	r1, [r7, #4]
 8006b52:	4613      	mov	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	440b      	add	r3, r1
 8006b5c:	3326      	adds	r3, #38	; 0x26
 8006b5e:	2210      	movs	r2, #16
 8006b60:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b62:	4b29      	ldr	r3, [pc, #164]	; (8006c08 <USBD_CDC_Init+0x1ec>)
 8006b64:	7819      	ldrb	r1, [r3, #0]
 8006b66:	2308      	movs	r3, #8
 8006b68:	2203      	movs	r2, #3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f002 fadf 	bl	800912e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006b70:	4b25      	ldr	r3, [pc, #148]	; (8006c08 <USBD_CDC_Init+0x1ec>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	f003 020f 	and.w	r2, r3, #15
 8006b78:	6879      	ldr	r1, [r7, #4]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	440b      	add	r3, r1
 8006b84:	3324      	adds	r3, #36	; 0x24
 8006b86:	2201      	movs	r2, #1
 8006b88:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	33b0      	adds	r3, #176	; 0xb0
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	e018      	b.n	8006bf6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	7c1b      	ldrb	r3, [r3, #16]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10a      	bne.n	8006be2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bcc:	4b0d      	ldr	r3, [pc, #52]	; (8006c04 <USBD_CDC_Init+0x1e8>)
 8006bce:	7819      	ldrb	r1, [r3, #0]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f002 fb96 	bl	800930c <USBD_LL_PrepareReceive>
 8006be0:	e008      	b.n	8006bf4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006be2:	4b08      	ldr	r3, [pc, #32]	; (8006c04 <USBD_CDC_Init+0x1e8>)
 8006be4:	7819      	ldrb	r1, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bec:	2340      	movs	r3, #64	; 0x40
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f002 fb8c 	bl	800930c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	20000093 	.word	0x20000093
 8006c04:	20000094 	.word	0x20000094
 8006c08:	20000095 	.word	0x20000095

08006c0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	460b      	mov	r3, r1
 8006c16:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006c18:	4b3a      	ldr	r3, [pc, #232]	; (8006d04 <USBD_CDC_DeInit+0xf8>)
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f002 faab 	bl	800917a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006c24:	4b37      	ldr	r3, [pc, #220]	; (8006d04 <USBD_CDC_DeInit+0xf8>)
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	f003 020f 	and.w	r2, r3, #15
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	440b      	add	r3, r1
 8006c38:	3324      	adds	r3, #36	; 0x24
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006c3e:	4b32      	ldr	r3, [pc, #200]	; (8006d08 <USBD_CDC_DeInit+0xfc>)
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f002 fa98 	bl	800917a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006c4a:	4b2f      	ldr	r3, [pc, #188]	; (8006d08 <USBD_CDC_DeInit+0xfc>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	f003 020f 	and.w	r2, r3, #15
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	4613      	mov	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	440b      	add	r3, r1
 8006c5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c62:	2200      	movs	r2, #0
 8006c64:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006c66:	4b29      	ldr	r3, [pc, #164]	; (8006d0c <USBD_CDC_DeInit+0x100>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f002 fa84 	bl	800917a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006c72:	4b26      	ldr	r3, [pc, #152]	; (8006d0c <USBD_CDC_DeInit+0x100>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	f003 020f 	and.w	r2, r3, #15
 8006c7a:	6879      	ldr	r1, [r7, #4]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	440b      	add	r3, r1
 8006c86:	3324      	adds	r3, #36	; 0x24
 8006c88:	2200      	movs	r2, #0
 8006c8a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006c8c:	4b1f      	ldr	r3, [pc, #124]	; (8006d0c <USBD_CDC_DeInit+0x100>)
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	f003 020f 	and.w	r2, r3, #15
 8006c94:	6879      	ldr	r1, [r7, #4]
 8006c96:	4613      	mov	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	440b      	add	r3, r1
 8006ca0:	3326      	adds	r3, #38	; 0x26
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	32b0      	adds	r2, #176	; 0xb0
 8006cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d01f      	beq.n	8006cf8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	33b0      	adds	r3, #176	; 0xb0
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	32b0      	adds	r2, #176	; 0xb0
 8006cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f002 fb58 	bl	8009390 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	32b0      	adds	r2, #176	; 0xb0
 8006cea:	2100      	movs	r1, #0
 8006cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	20000093 	.word	0x20000093
 8006d08:	20000094 	.word	0x20000094
 8006d0c:	20000095 	.word	0x20000095

08006d10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	32b0      	adds	r2, #176	; 0xb0
 8006d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d28:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e0bf      	b.n	8006ec0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d050      	beq.n	8006dee <USBD_CDC_Setup+0xde>
 8006d4c:	2b20      	cmp	r3, #32
 8006d4e:	f040 80af 	bne.w	8006eb0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	88db      	ldrh	r3, [r3, #6]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d03a      	beq.n	8006dd0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	b25b      	sxtb	r3, r3
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	da1b      	bge.n	8006d9c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	33b0      	adds	r3, #176	; 0xb0
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006d7a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	88d2      	ldrh	r2, [r2, #6]
 8006d80:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	88db      	ldrh	r3, [r3, #6]
 8006d86:	2b07      	cmp	r3, #7
 8006d88:	bf28      	it	cs
 8006d8a:	2307      	movcs	r3, #7
 8006d8c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	89fa      	ldrh	r2, [r7, #14]
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f001 fd89 	bl	80088ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006d9a:	e090      	b.n	8006ebe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	785a      	ldrb	r2, [r3, #1]
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	88db      	ldrh	r3, [r3, #6]
 8006daa:	2b3f      	cmp	r3, #63	; 0x3f
 8006dac:	d803      	bhi.n	8006db6 <USBD_CDC_Setup+0xa6>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	88db      	ldrh	r3, [r3, #6]
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	e000      	b.n	8006db8 <USBD_CDC_Setup+0xa8>
 8006db6:	2240      	movs	r2, #64	; 0x40
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006dbe:	6939      	ldr	r1, [r7, #16]
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f001 fd9b 	bl	8008904 <USBD_CtlPrepareRx>
      break;
 8006dce:	e076      	b.n	8006ebe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	33b0      	adds	r3, #176	; 0xb0
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	7850      	ldrb	r0, [r2, #1]
 8006de6:	2200      	movs	r2, #0
 8006de8:	6839      	ldr	r1, [r7, #0]
 8006dea:	4798      	blx	r3
      break;
 8006dec:	e067      	b.n	8006ebe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	785b      	ldrb	r3, [r3, #1]
 8006df2:	2b0b      	cmp	r3, #11
 8006df4:	d851      	bhi.n	8006e9a <USBD_CDC_Setup+0x18a>
 8006df6:	a201      	add	r2, pc, #4	; (adr r2, 8006dfc <USBD_CDC_Setup+0xec>)
 8006df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfc:	08006e2d 	.word	0x08006e2d
 8006e00:	08006ea9 	.word	0x08006ea9
 8006e04:	08006e9b 	.word	0x08006e9b
 8006e08:	08006e9b 	.word	0x08006e9b
 8006e0c:	08006e9b 	.word	0x08006e9b
 8006e10:	08006e9b 	.word	0x08006e9b
 8006e14:	08006e9b 	.word	0x08006e9b
 8006e18:	08006e9b 	.word	0x08006e9b
 8006e1c:	08006e9b 	.word	0x08006e9b
 8006e20:	08006e9b 	.word	0x08006e9b
 8006e24:	08006e57 	.word	0x08006e57
 8006e28:	08006e81 	.word	0x08006e81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	d107      	bne.n	8006e48 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e38:	f107 030a 	add.w	r3, r7, #10
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 fd33 	bl	80088ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e46:	e032      	b.n	8006eae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f001 fcbd 	bl	80087ca <USBD_CtlError>
            ret = USBD_FAIL;
 8006e50:	2303      	movs	r3, #3
 8006e52:	75fb      	strb	r3, [r7, #23]
          break;
 8006e54:	e02b      	b.n	8006eae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d107      	bne.n	8006e72 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e62:	f107 030d 	add.w	r3, r7, #13
 8006e66:	2201      	movs	r2, #1
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 fd1e 	bl	80088ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e70:	e01d      	b.n	8006eae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e72:	6839      	ldr	r1, [r7, #0]
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f001 fca8 	bl	80087ca <USBD_CtlError>
            ret = USBD_FAIL;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e7e:	e016      	b.n	8006eae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b03      	cmp	r3, #3
 8006e8a:	d00f      	beq.n	8006eac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006e8c:	6839      	ldr	r1, [r7, #0]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f001 fc9b 	bl	80087ca <USBD_CtlError>
            ret = USBD_FAIL;
 8006e94:	2303      	movs	r3, #3
 8006e96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006e98:	e008      	b.n	8006eac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f001 fc94 	bl	80087ca <USBD_CtlError>
          ret = USBD_FAIL;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ea6:	e002      	b.n	8006eae <USBD_CDC_Setup+0x19e>
          break;
 8006ea8:	bf00      	nop
 8006eaa:	e008      	b.n	8006ebe <USBD_CDC_Setup+0x1ae>
          break;
 8006eac:	bf00      	nop
      }
      break;
 8006eae:	e006      	b.n	8006ebe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f001 fc89 	bl	80087ca <USBD_CtlError>
      ret = USBD_FAIL;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	75fb      	strb	r3, [r7, #23]
      break;
 8006ebc:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3718      	adds	r7, #24
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006eda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	32b0      	adds	r2, #176	; 0xb0
 8006ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e065      	b.n	8006fbe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	32b0      	adds	r2, #176	; 0xb0
 8006efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f02:	78fb      	ldrb	r3, [r7, #3]
 8006f04:	f003 020f 	and.w	r2, r3, #15
 8006f08:	6879      	ldr	r1, [r7, #4]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	440b      	add	r3, r1
 8006f14:	3318      	adds	r3, #24
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d02f      	beq.n	8006f7c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006f1c:	78fb      	ldrb	r3, [r7, #3]
 8006f1e:	f003 020f 	and.w	r2, r3, #15
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	4613      	mov	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	440b      	add	r3, r1
 8006f2e:	3318      	adds	r3, #24
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	78fb      	ldrb	r3, [r7, #3]
 8006f34:	f003 010f 	and.w	r1, r3, #15
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	00db      	lsls	r3, r3, #3
 8006f3e:	440b      	add	r3, r1
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4403      	add	r3, r0
 8006f44:	3348      	adds	r3, #72	; 0x48
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f4c:	fb01 f303 	mul.w	r3, r1, r3
 8006f50:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d112      	bne.n	8006f7c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006f56:	78fb      	ldrb	r3, [r7, #3]
 8006f58:	f003 020f 	and.w	r2, r3, #15
 8006f5c:	6879      	ldr	r1, [r7, #4]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	440b      	add	r3, r1
 8006f68:	3318      	adds	r3, #24
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f6e:	78f9      	ldrb	r1, [r7, #3]
 8006f70:	2300      	movs	r3, #0
 8006f72:	2200      	movs	r2, #0
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f002 f9a8 	bl	80092ca <USBD_LL_Transmit>
 8006f7a:	e01f      	b.n	8006fbc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	33b0      	adds	r3, #176	; 0xb0
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4413      	add	r3, r2
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d010      	beq.n	8006fbc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	33b0      	adds	r3, #176	; 0xb0
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006fb8:	78fa      	ldrb	r2, [r7, #3]
 8006fba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b084      	sub	sp, #16
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	460b      	mov	r3, r1
 8006fd0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	32b0      	adds	r2, #176	; 0xb0
 8006fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	32b0      	adds	r2, #176	; 0xb0
 8006fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e01a      	b.n	800702e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ff8:	78fb      	ldrb	r3, [r7, #3]
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f002 f9a6 	bl	800934e <USBD_LL_GetRxDataSize>
 8007002:	4602      	mov	r2, r0
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	33b0      	adds	r3, #176	; 0xb0
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007028:	4611      	mov	r1, r2
 800702a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	32b0      	adds	r2, #176	; 0xb0
 8007048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800704c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007054:	2303      	movs	r3, #3
 8007056:	e025      	b.n	80070a4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	33b0      	adds	r3, #176	; 0xb0
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d01a      	beq.n	80070a2 <USBD_CDC_EP0_RxReady+0x6c>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007072:	2bff      	cmp	r3, #255	; 0xff
 8007074:	d015      	beq.n	80070a2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	33b0      	adds	r3, #176	; 0xb0
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800708e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007096:	b292      	uxth	r2, r2
 8007098:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	22ff      	movs	r2, #255	; 0xff
 800709e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80070b4:	2182      	movs	r1, #130	; 0x82
 80070b6:	4818      	ldr	r0, [pc, #96]	; (8007118 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070b8:	f000 fd4f 	bl	8007b5a <USBD_GetEpDesc>
 80070bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070be:	2101      	movs	r1, #1
 80070c0:	4815      	ldr	r0, [pc, #84]	; (8007118 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070c2:	f000 fd4a 	bl	8007b5a <USBD_GetEpDesc>
 80070c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070c8:	2181      	movs	r1, #129	; 0x81
 80070ca:	4813      	ldr	r0, [pc, #76]	; (8007118 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070cc:	f000 fd45 	bl	8007b5a <USBD_GetEpDesc>
 80070d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	2210      	movs	r2, #16
 80070dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d006      	beq.n	80070f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070ec:	711a      	strb	r2, [r3, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d006      	beq.n	8007106 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007100:	711a      	strb	r2, [r3, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2243      	movs	r2, #67	; 0x43
 800710a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800710c:	4b02      	ldr	r3, [pc, #8]	; (8007118 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800710e:	4618      	mov	r0, r3
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	20000050 	.word	0x20000050

0800711c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007124:	2182      	movs	r1, #130	; 0x82
 8007126:	4818      	ldr	r0, [pc, #96]	; (8007188 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007128:	f000 fd17 	bl	8007b5a <USBD_GetEpDesc>
 800712c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800712e:	2101      	movs	r1, #1
 8007130:	4815      	ldr	r0, [pc, #84]	; (8007188 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007132:	f000 fd12 	bl	8007b5a <USBD_GetEpDesc>
 8007136:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007138:	2181      	movs	r1, #129	; 0x81
 800713a:	4813      	ldr	r0, [pc, #76]	; (8007188 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800713c:	f000 fd0d 	bl	8007b5a <USBD_GetEpDesc>
 8007140:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	2210      	movs	r2, #16
 800714c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d006      	beq.n	8007162 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	2200      	movs	r2, #0
 8007158:	711a      	strb	r2, [r3, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f042 0202 	orr.w	r2, r2, #2
 8007160:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d006      	beq.n	8007176 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	711a      	strb	r2, [r3, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f042 0202 	orr.w	r2, r2, #2
 8007174:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2243      	movs	r2, #67	; 0x43
 800717a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800717c:	4b02      	ldr	r3, [pc, #8]	; (8007188 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800717e:	4618      	mov	r0, r3
 8007180:	3718      	adds	r7, #24
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	20000050 	.word	0x20000050

0800718c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007194:	2182      	movs	r1, #130	; 0x82
 8007196:	4818      	ldr	r0, [pc, #96]	; (80071f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007198:	f000 fcdf 	bl	8007b5a <USBD_GetEpDesc>
 800719c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800719e:	2101      	movs	r1, #1
 80071a0:	4815      	ldr	r0, [pc, #84]	; (80071f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071a2:	f000 fcda 	bl	8007b5a <USBD_GetEpDesc>
 80071a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071a8:	2181      	movs	r1, #129	; 0x81
 80071aa:	4813      	ldr	r0, [pc, #76]	; (80071f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071ac:	f000 fcd5 	bl	8007b5a <USBD_GetEpDesc>
 80071b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d002      	beq.n	80071be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	2210      	movs	r2, #16
 80071bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d006      	beq.n	80071d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071cc:	711a      	strb	r2, [r3, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d006      	beq.n	80071e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071e0:	711a      	strb	r2, [r3, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2243      	movs	r2, #67	; 0x43
 80071ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071ec:	4b02      	ldr	r3, [pc, #8]	; (80071f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	20000050 	.word	0x20000050

080071fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	220a      	movs	r2, #10
 8007208:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800720a:	4b03      	ldr	r3, [pc, #12]	; (8007218 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800720c:	4618      	mov	r0, r3
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr
 8007218:	2000000c 	.word	0x2000000c

0800721c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800722c:	2303      	movs	r3, #3
 800722e:	e009      	b.n	8007244 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	33b0      	adds	r3, #176	; 0xb0
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4413      	add	r3, r2
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007250:	b480      	push	{r7}
 8007252:	b087      	sub	sp, #28
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	32b0      	adds	r2, #176	; 0xb0
 8007266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007272:	2303      	movs	r3, #3
 8007274:	e008      	b.n	8007288 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	371c      	adds	r7, #28
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	32b0      	adds	r2, #176	; 0xb0
 80072a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e004      	b.n	80072c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3714      	adds	r7, #20
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
	...

080072d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	32b0      	adds	r2, #176	; 0xb0
 80072e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80072e8:	2301      	movs	r3, #1
 80072ea:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	32b0      	adds	r2, #176	; 0xb0
 80072f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80072fe:	2303      	movs	r3, #3
 8007300:	e025      	b.n	800734e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007308:	2b00      	cmp	r3, #0
 800730a:	d11f      	bne.n	800734c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	2201      	movs	r2, #1
 8007310:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007314:	4b10      	ldr	r3, [pc, #64]	; (8007358 <USBD_CDC_TransmitPacket+0x88>)
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	f003 020f 	and.w	r2, r3, #15
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	4613      	mov	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4403      	add	r3, r0
 800732e:	3318      	adds	r3, #24
 8007330:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007332:	4b09      	ldr	r3, [pc, #36]	; (8007358 <USBD_CDC_TransmitPacket+0x88>)
 8007334:	7819      	ldrb	r1, [r3, #0]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f001 ffc1 	bl	80092ca <USBD_LL_Transmit>

    ret = USBD_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800734c:	7bfb      	ldrb	r3, [r7, #15]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	20000093 	.word	0x20000093

0800735c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	32b0      	adds	r2, #176	; 0xb0
 800736e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007372:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	32b0      	adds	r2, #176	; 0xb0
 800737e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007386:	2303      	movs	r3, #3
 8007388:	e018      	b.n	80073bc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	7c1b      	ldrb	r3, [r3, #16]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10a      	bne.n	80073a8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007392:	4b0c      	ldr	r3, [pc, #48]	; (80073c4 <USBD_CDC_ReceivePacket+0x68>)
 8007394:	7819      	ldrb	r1, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800739c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f001 ffb3 	bl	800930c <USBD_LL_PrepareReceive>
 80073a6:	e008      	b.n	80073ba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073a8:	4b06      	ldr	r3, [pc, #24]	; (80073c4 <USBD_CDC_ReceivePacket+0x68>)
 80073aa:	7819      	ldrb	r1, [r3, #0]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073b2:	2340      	movs	r3, #64	; 0x40
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f001 ffa9 	bl	800930c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	20000094 	.word	0x20000094

080073c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b086      	sub	sp, #24
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	4613      	mov	r3, r2
 80073d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d101      	bne.n	80073e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80073dc:	2303      	movs	r3, #3
 80073de:	e01f      	b.n	8007420 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	79fa      	ldrb	r2, [r7, #7]
 8007412:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f001 fe23 	bl	8009060 <USBD_LL_Init>
 800741a:	4603      	mov	r3, r0
 800741c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800741e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007432:	2300      	movs	r3, #0
 8007434:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d101      	bne.n	8007440 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800743c:	2303      	movs	r3, #3
 800743e:	e025      	b.n	800748c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	32ae      	adds	r2, #174	; 0xae
 8007452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00f      	beq.n	800747c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	32ae      	adds	r2, #174	; 0xae
 8007466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800746a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746c:	f107 020e 	add.w	r2, r7, #14
 8007470:	4610      	mov	r0, r2
 8007472:	4798      	blx	r3
 8007474:	4602      	mov	r2, r0
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f001 fe2b 	bl	80090f8 <USBD_LL_Start>
 80074a2:	4603      	mov	r3, r0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b084      	sub	sp, #16
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	460b      	mov	r3, r1
 80074cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d009      	beq.n	80074f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	78fa      	ldrb	r2, [r7, #3]
 80074e6:	4611      	mov	r1, r2
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	4798      	blx	r3
 80074ec:	4603      	mov	r3, r0
 80074ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b084      	sub	sp, #16
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	460b      	mov	r3, r1
 8007504:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	78fa      	ldrb	r2, [r7, #3]
 8007514:	4611      	mov	r1, r2
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	4798      	blx	r3
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007520:	2303      	movs	r3, #3
 8007522:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007524:	7bfb      	ldrb	r3, [r7, #15]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b084      	sub	sp, #16
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	4618      	mov	r0, r3
 8007542:	f001 f908 	bl	8008756 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007554:	461a      	mov	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007562:	f003 031f 	and.w	r3, r3, #31
 8007566:	2b02      	cmp	r3, #2
 8007568:	d01a      	beq.n	80075a0 <USBD_LL_SetupStage+0x72>
 800756a:	2b02      	cmp	r3, #2
 800756c:	d822      	bhi.n	80075b4 <USBD_LL_SetupStage+0x86>
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <USBD_LL_SetupStage+0x4a>
 8007572:	2b01      	cmp	r3, #1
 8007574:	d00a      	beq.n	800758c <USBD_LL_SetupStage+0x5e>
 8007576:	e01d      	b.n	80075b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fb5f 	bl	8007c44 <USBD_StdDevReq>
 8007586:	4603      	mov	r3, r0
 8007588:	73fb      	strb	r3, [r7, #15]
      break;
 800758a:	e020      	b.n	80075ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fbc7 	bl	8007d28 <USBD_StdItfReq>
 800759a:	4603      	mov	r3, r0
 800759c:	73fb      	strb	r3, [r7, #15]
      break;
 800759e:	e016      	b.n	80075ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075a6:	4619      	mov	r1, r3
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fc29 	bl	8007e00 <USBD_StdEPReq>
 80075ae:	4603      	mov	r3, r0
 80075b0:	73fb      	strb	r3, [r7, #15]
      break;
 80075b2:	e00c      	b.n	80075ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f001 fdf8 	bl	80091b8 <USBD_LL_StallEP>
 80075c8:	4603      	mov	r3, r0
 80075ca:	73fb      	strb	r3, [r7, #15]
      break;
 80075cc:	bf00      	nop
  }

  return ret;
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	460b      	mov	r3, r1
 80075e2:	607a      	str	r2, [r7, #4]
 80075e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80075ea:	7afb      	ldrb	r3, [r7, #11]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d16e      	bne.n	80076ce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80075f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075fe:	2b03      	cmp	r3, #3
 8007600:	f040 8098 	bne.w	8007734 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	689a      	ldr	r2, [r3, #8]
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	429a      	cmp	r2, r3
 800760e:	d913      	bls.n	8007638 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	689a      	ldr	r2, [r3, #8]
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	1ad2      	subs	r2, r2, r3
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	68da      	ldr	r2, [r3, #12]
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	4293      	cmp	r3, r2
 8007628:	bf28      	it	cs
 800762a:	4613      	movcs	r3, r2
 800762c:	461a      	mov	r2, r3
 800762e:	6879      	ldr	r1, [r7, #4]
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f001 f984 	bl	800893e <USBD_CtlContinueRx>
 8007636:	e07d      	b.n	8007734 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800763e:	f003 031f 	and.w	r3, r3, #31
 8007642:	2b02      	cmp	r3, #2
 8007644:	d014      	beq.n	8007670 <USBD_LL_DataOutStage+0x98>
 8007646:	2b02      	cmp	r3, #2
 8007648:	d81d      	bhi.n	8007686 <USBD_LL_DataOutStage+0xae>
 800764a:	2b00      	cmp	r3, #0
 800764c:	d002      	beq.n	8007654 <USBD_LL_DataOutStage+0x7c>
 800764e:	2b01      	cmp	r3, #1
 8007650:	d003      	beq.n	800765a <USBD_LL_DataOutStage+0x82>
 8007652:	e018      	b.n	8007686 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007654:	2300      	movs	r3, #0
 8007656:	75bb      	strb	r3, [r7, #22]
            break;
 8007658:	e018      	b.n	800768c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007660:	b2db      	uxtb	r3, r3
 8007662:	4619      	mov	r1, r3
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f000 fa5e 	bl	8007b26 <USBD_CoreFindIF>
 800766a:	4603      	mov	r3, r0
 800766c:	75bb      	strb	r3, [r7, #22]
            break;
 800766e:	e00d      	b.n	800768c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007676:	b2db      	uxtb	r3, r3
 8007678:	4619      	mov	r1, r3
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 fa60 	bl	8007b40 <USBD_CoreFindEP>
 8007680:	4603      	mov	r3, r0
 8007682:	75bb      	strb	r3, [r7, #22]
            break;
 8007684:	e002      	b.n	800768c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007686:	2300      	movs	r3, #0
 8007688:	75bb      	strb	r3, [r7, #22]
            break;
 800768a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800768c:	7dbb      	ldrb	r3, [r7, #22]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d119      	bne.n	80076c6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b03      	cmp	r3, #3
 800769c:	d113      	bne.n	80076c6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800769e:	7dba      	ldrb	r2, [r7, #22]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	32ae      	adds	r2, #174	; 0xae
 80076a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00b      	beq.n	80076c6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80076ae:	7dba      	ldrb	r2, [r7, #22]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80076b6:	7dba      	ldrb	r2, [r7, #22]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	32ae      	adds	r2, #174	; 0xae
 80076bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f001 f94a 	bl	8008960 <USBD_CtlSendStatus>
 80076cc:	e032      	b.n	8007734 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80076ce:	7afb      	ldrb	r3, [r7, #11]
 80076d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	4619      	mov	r1, r3
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 fa31 	bl	8007b40 <USBD_CoreFindEP>
 80076de:	4603      	mov	r3, r0
 80076e0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076e2:	7dbb      	ldrb	r3, [r7, #22]
 80076e4:	2bff      	cmp	r3, #255	; 0xff
 80076e6:	d025      	beq.n	8007734 <USBD_LL_DataOutStage+0x15c>
 80076e8:	7dbb      	ldrb	r3, [r7, #22]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d122      	bne.n	8007734 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	d117      	bne.n	800772a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80076fa:	7dba      	ldrb	r2, [r7, #22]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	32ae      	adds	r2, #174	; 0xae
 8007700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00f      	beq.n	800772a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800770a:	7dba      	ldrb	r2, [r7, #22]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007712:	7dba      	ldrb	r2, [r7, #22]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	32ae      	adds	r2, #174	; 0xae
 8007718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	7afa      	ldrb	r2, [r7, #11]
 8007720:	4611      	mov	r1, r2
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	4798      	blx	r3
 8007726:	4603      	mov	r3, r0
 8007728:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800772a:	7dfb      	ldrb	r3, [r7, #23]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d001      	beq.n	8007734 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	e000      	b.n	8007736 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b086      	sub	sp, #24
 8007742:	af00      	add	r7, sp, #0
 8007744:	60f8      	str	r0, [r7, #12]
 8007746:	460b      	mov	r3, r1
 8007748:	607a      	str	r2, [r7, #4]
 800774a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800774c:	7afb      	ldrb	r3, [r7, #11]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d16f      	bne.n	8007832 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	3314      	adds	r3, #20
 8007756:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800775e:	2b02      	cmp	r3, #2
 8007760:	d15a      	bne.n	8007818 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	689a      	ldr	r2, [r3, #8]
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	429a      	cmp	r2, r3
 800776c:	d914      	bls.n	8007798 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	689a      	ldr	r2, [r3, #8]
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	1ad2      	subs	r2, r2, r3
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	461a      	mov	r2, r3
 8007782:	6879      	ldr	r1, [r7, #4]
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f001 f8ac 	bl	80088e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800778a:	2300      	movs	r3, #0
 800778c:	2200      	movs	r2, #0
 800778e:	2100      	movs	r1, #0
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f001 fdbb 	bl	800930c <USBD_LL_PrepareReceive>
 8007796:	e03f      	b.n	8007818 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d11c      	bne.n	80077de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d316      	bcc.n	80077de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d20f      	bcs.n	80077de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80077be:	2200      	movs	r2, #0
 80077c0:	2100      	movs	r1, #0
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f001 f88d 	bl	80088e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077d0:	2300      	movs	r3, #0
 80077d2:	2200      	movs	r2, #0
 80077d4:	2100      	movs	r1, #0
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f001 fd98 	bl	800930c <USBD_LL_PrepareReceive>
 80077dc:	e01c      	b.n	8007818 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b03      	cmp	r3, #3
 80077e8:	d10f      	bne.n	800780a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d009      	beq.n	800780a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800780a:	2180      	movs	r1, #128	; 0x80
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f001 fcd3 	bl	80091b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f001 f8b7 	bl	8008986 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d03a      	beq.n	8007898 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f7ff fe42 	bl	80074ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007830:	e032      	b.n	8007898 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007832:	7afb      	ldrb	r3, [r7, #11]
 8007834:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007838:	b2db      	uxtb	r3, r3
 800783a:	4619      	mov	r1, r3
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 f97f 	bl	8007b40 <USBD_CoreFindEP>
 8007842:	4603      	mov	r3, r0
 8007844:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007846:	7dfb      	ldrb	r3, [r7, #23]
 8007848:	2bff      	cmp	r3, #255	; 0xff
 800784a:	d025      	beq.n	8007898 <USBD_LL_DataInStage+0x15a>
 800784c:	7dfb      	ldrb	r3, [r7, #23]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d122      	bne.n	8007898 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b03      	cmp	r3, #3
 800785c:	d11c      	bne.n	8007898 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800785e:	7dfa      	ldrb	r2, [r7, #23]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	32ae      	adds	r2, #174	; 0xae
 8007864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d014      	beq.n	8007898 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800786e:	7dfa      	ldrb	r2, [r7, #23]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007876:	7dfa      	ldrb	r2, [r7, #23]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	32ae      	adds	r2, #174	; 0xae
 800787c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	7afa      	ldrb	r2, [r7, #11]
 8007884:	4611      	mov	r1, r2
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	4798      	blx	r3
 800788a:	4603      	mov	r3, r0
 800788c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800788e:	7dbb      	ldrb	r3, [r7, #22]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007894:	7dbb      	ldrb	r3, [r7, #22]
 8007896:	e000      	b.n	800789a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3718      	adds	r7, #24
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d014      	beq.n	8007908 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00e      	beq.n	8007908 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	6852      	ldr	r2, [r2, #4]
 80078f6:	b2d2      	uxtb	r2, r2
 80078f8:	4611      	mov	r1, r2
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	4798      	blx	r3
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007904:	2303      	movs	r3, #3
 8007906:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007908:	2340      	movs	r3, #64	; 0x40
 800790a:	2200      	movs	r2, #0
 800790c:	2100      	movs	r1, #0
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f001 fc0d 	bl	800912e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2240      	movs	r2, #64	; 0x40
 8007920:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007924:	2340      	movs	r3, #64	; 0x40
 8007926:	2200      	movs	r2, #0
 8007928:	2180      	movs	r1, #128	; 0x80
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f001 fbff 	bl	800912e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2240      	movs	r2, #64	; 0x40
 800793a:	621a      	str	r2, [r3, #32]

  return ret;
 800793c:	7bfb      	ldrb	r3, [r7, #15]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007946:	b480      	push	{r7}
 8007948:	b083      	sub	sp, #12
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	460b      	mov	r3, r1
 8007950:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	78fa      	ldrb	r2, [r7, #3]
 8007956:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007966:	b480      	push	{r7}
 8007968:	b083      	sub	sp, #12
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007974:	b2da      	uxtb	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2204      	movs	r2, #4
 8007980:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007992:	b480      	push	{r7}
 8007994:	b083      	sub	sp, #12
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b04      	cmp	r3, #4
 80079a4:	d106      	bne.n	80079b4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80079ac:	b2da      	uxtb	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	370c      	adds	r7, #12
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b082      	sub	sp, #8
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b03      	cmp	r3, #3
 80079d4:	d110      	bne.n	80079f8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00b      	beq.n	80079f8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d005      	beq.n	80079f8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f2:	69db      	ldr	r3, [r3, #28]
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b082      	sub	sp, #8
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	32ae      	adds	r2, #174	; 0xae
 8007a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a20:	2303      	movs	r3, #3
 8007a22:	e01c      	b.n	8007a5e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b03      	cmp	r3, #3
 8007a2e:	d115      	bne.n	8007a5c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	32ae      	adds	r2, #174	; 0xae
 8007a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3e:	6a1b      	ldr	r3, [r3, #32]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00b      	beq.n	8007a5c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	32ae      	adds	r2, #174	; 0xae
 8007a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a52:	6a1b      	ldr	r3, [r3, #32]
 8007a54:	78fa      	ldrb	r2, [r7, #3]
 8007a56:	4611      	mov	r1, r2
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b082      	sub	sp, #8
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	460b      	mov	r3, r1
 8007a70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	32ae      	adds	r2, #174	; 0xae
 8007a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e01c      	b.n	8007ac2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b03      	cmp	r3, #3
 8007a92:	d115      	bne.n	8007ac0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	32ae      	adds	r2, #174	; 0xae
 8007a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00b      	beq.n	8007ac0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	32ae      	adds	r2, #174	; 0xae
 8007ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	78fa      	ldrb	r2, [r7, #3]
 8007aba:	4611      	mov	r1, r2
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b083      	sub	sp, #12
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00e      	beq.n	8007b1c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	6852      	ldr	r2, [r2, #4]
 8007b0a:	b2d2      	uxtb	r2, r2
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	4798      	blx	r3
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d001      	beq.n	8007b1c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b083      	sub	sp, #12
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
 8007b2e:	460b      	mov	r3, r1
 8007b30:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b32:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b4c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b086      	sub	sp, #24
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	460b      	mov	r3, r1
 8007b64:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	885b      	ldrh	r3, [r3, #2]
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d920      	bls.n	8007bc4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007b8a:	e013      	b.n	8007bb4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007b8c:	f107 030a 	add.w	r3, r7, #10
 8007b90:	4619      	mov	r1, r3
 8007b92:	6978      	ldr	r0, [r7, #20]
 8007b94:	f000 f81b 	bl	8007bce <USBD_GetNextDesc>
 8007b98:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	785b      	ldrb	r3, [r3, #1]
 8007b9e:	2b05      	cmp	r3, #5
 8007ba0:	d108      	bne.n	8007bb4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	789b      	ldrb	r3, [r3, #2]
 8007baa:	78fa      	ldrb	r2, [r7, #3]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d008      	beq.n	8007bc2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	885b      	ldrh	r3, [r3, #2]
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	897b      	ldrh	r3, [r7, #10]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d8e5      	bhi.n	8007b8c <USBD_GetEpDesc+0x32>
 8007bc0:	e000      	b.n	8007bc4 <USBD_GetEpDesc+0x6a>
          break;
 8007bc2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007bc4:	693b      	ldr	r3, [r7, #16]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b085      	sub	sp, #20
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	881a      	ldrh	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	4413      	add	r3, r2
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b087      	sub	sp, #28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c26:	8a3b      	ldrh	r3, [r7, #16]
 8007c28:	021b      	lsls	r3, r3, #8
 8007c2a:	b21a      	sxth	r2, r3
 8007c2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	b21b      	sxth	r3, r3
 8007c34:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c36:	89fb      	ldrh	r3, [r7, #14]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	371c      	adds	r7, #28
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c5a:	2b40      	cmp	r3, #64	; 0x40
 8007c5c:	d005      	beq.n	8007c6a <USBD_StdDevReq+0x26>
 8007c5e:	2b40      	cmp	r3, #64	; 0x40
 8007c60:	d857      	bhi.n	8007d12 <USBD_StdDevReq+0xce>
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00f      	beq.n	8007c86 <USBD_StdDevReq+0x42>
 8007c66:	2b20      	cmp	r3, #32
 8007c68:	d153      	bne.n	8007d12 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	32ae      	adds	r2, #174	; 0xae
 8007c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	6839      	ldr	r1, [r7, #0]
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	4798      	blx	r3
 8007c80:	4603      	mov	r3, r0
 8007c82:	73fb      	strb	r3, [r7, #15]
      break;
 8007c84:	e04a      	b.n	8007d1c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	785b      	ldrb	r3, [r3, #1]
 8007c8a:	2b09      	cmp	r3, #9
 8007c8c:	d83b      	bhi.n	8007d06 <USBD_StdDevReq+0xc2>
 8007c8e:	a201      	add	r2, pc, #4	; (adr r2, 8007c94 <USBD_StdDevReq+0x50>)
 8007c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c94:	08007ce9 	.word	0x08007ce9
 8007c98:	08007cfd 	.word	0x08007cfd
 8007c9c:	08007d07 	.word	0x08007d07
 8007ca0:	08007cf3 	.word	0x08007cf3
 8007ca4:	08007d07 	.word	0x08007d07
 8007ca8:	08007cc7 	.word	0x08007cc7
 8007cac:	08007cbd 	.word	0x08007cbd
 8007cb0:	08007d07 	.word	0x08007d07
 8007cb4:	08007cdf 	.word	0x08007cdf
 8007cb8:	08007cd1 	.word	0x08007cd1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fa3c 	bl	800813c <USBD_GetDescriptor>
          break;
 8007cc4:	e024      	b.n	8007d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fba1 	bl	8008410 <USBD_SetAddress>
          break;
 8007cce:	e01f      	b.n	8007d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fbe0 	bl	8008498 <USBD_SetConfig>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	73fb      	strb	r3, [r7, #15]
          break;
 8007cdc:	e018      	b.n	8007d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007cde:	6839      	ldr	r1, [r7, #0]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fc83 	bl	80085ec <USBD_GetConfig>
          break;
 8007ce6:	e013      	b.n	8007d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fcb4 	bl	8008658 <USBD_GetStatus>
          break;
 8007cf0:	e00e      	b.n	8007d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007cf2:	6839      	ldr	r1, [r7, #0]
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fce3 	bl	80086c0 <USBD_SetFeature>
          break;
 8007cfa:	e009      	b.n	8007d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007cfc:	6839      	ldr	r1, [r7, #0]
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 fd07 	bl	8008712 <USBD_ClrFeature>
          break;
 8007d04:	e004      	b.n	8007d10 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007d06:	6839      	ldr	r1, [r7, #0]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fd5e 	bl	80087ca <USBD_CtlError>
          break;
 8007d0e:	bf00      	nop
      }
      break;
 8007d10:	e004      	b.n	8007d1c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007d12:	6839      	ldr	r1, [r7, #0]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fd58 	bl	80087ca <USBD_CtlError>
      break;
 8007d1a:	bf00      	nop
  }

  return ret;
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop

08007d28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d32:	2300      	movs	r3, #0
 8007d34:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d3e:	2b40      	cmp	r3, #64	; 0x40
 8007d40:	d005      	beq.n	8007d4e <USBD_StdItfReq+0x26>
 8007d42:	2b40      	cmp	r3, #64	; 0x40
 8007d44:	d852      	bhi.n	8007dec <USBD_StdItfReq+0xc4>
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <USBD_StdItfReq+0x26>
 8007d4a:	2b20      	cmp	r3, #32
 8007d4c:	d14e      	bne.n	8007dec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	3b01      	subs	r3, #1
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d840      	bhi.n	8007dde <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	889b      	ldrh	r3, [r3, #4]
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d836      	bhi.n	8007dd4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	889b      	ldrh	r3, [r3, #4]
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f7ff fed9 	bl	8007b26 <USBD_CoreFindIF>
 8007d74:	4603      	mov	r3, r0
 8007d76:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d78:	7bbb      	ldrb	r3, [r7, #14]
 8007d7a:	2bff      	cmp	r3, #255	; 0xff
 8007d7c:	d01d      	beq.n	8007dba <USBD_StdItfReq+0x92>
 8007d7e:	7bbb      	ldrb	r3, [r7, #14]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d11a      	bne.n	8007dba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007d84:	7bba      	ldrb	r2, [r7, #14]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	32ae      	adds	r2, #174	; 0xae
 8007d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00f      	beq.n	8007db4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007d94:	7bba      	ldrb	r2, [r7, #14]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d9c:	7bba      	ldrb	r2, [r7, #14]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	32ae      	adds	r2, #174	; 0xae
 8007da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	4798      	blx	r3
 8007dae:	4603      	mov	r3, r0
 8007db0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007db2:	e004      	b.n	8007dbe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007db4:	2303      	movs	r3, #3
 8007db6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007db8:	e001      	b.n	8007dbe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	88db      	ldrh	r3, [r3, #6]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d110      	bne.n	8007de8 <USBD_StdItfReq+0xc0>
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10d      	bne.n	8007de8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fdc7 	bl	8008960 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007dd2:	e009      	b.n	8007de8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007dd4:	6839      	ldr	r1, [r7, #0]
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fcf7 	bl	80087ca <USBD_CtlError>
          break;
 8007ddc:	e004      	b.n	8007de8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007dde:	6839      	ldr	r1, [r7, #0]
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fcf2 	bl	80087ca <USBD_CtlError>
          break;
 8007de6:	e000      	b.n	8007dea <USBD_StdItfReq+0xc2>
          break;
 8007de8:	bf00      	nop
      }
      break;
 8007dea:	e004      	b.n	8007df6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fceb 	bl	80087ca <USBD_CtlError>
      break;
 8007df4:	bf00      	nop
  }

  return ret;
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	889b      	ldrh	r3, [r3, #4]
 8007e12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e1c:	2b40      	cmp	r3, #64	; 0x40
 8007e1e:	d007      	beq.n	8007e30 <USBD_StdEPReq+0x30>
 8007e20:	2b40      	cmp	r3, #64	; 0x40
 8007e22:	f200 817f 	bhi.w	8008124 <USBD_StdEPReq+0x324>
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d02a      	beq.n	8007e80 <USBD_StdEPReq+0x80>
 8007e2a:	2b20      	cmp	r3, #32
 8007e2c:	f040 817a 	bne.w	8008124 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e30:	7bbb      	ldrb	r3, [r7, #14]
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7ff fe83 	bl	8007b40 <USBD_CoreFindEP>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e3e:	7b7b      	ldrb	r3, [r7, #13]
 8007e40:	2bff      	cmp	r3, #255	; 0xff
 8007e42:	f000 8174 	beq.w	800812e <USBD_StdEPReq+0x32e>
 8007e46:	7b7b      	ldrb	r3, [r7, #13]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f040 8170 	bne.w	800812e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007e4e:	7b7a      	ldrb	r2, [r7, #13]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007e56:	7b7a      	ldrb	r2, [r7, #13]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	32ae      	adds	r2, #174	; 0xae
 8007e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f000 8163 	beq.w	800812e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007e68:	7b7a      	ldrb	r2, [r7, #13]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	32ae      	adds	r2, #174	; 0xae
 8007e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	4798      	blx	r3
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e7e:	e156      	b.n	800812e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	785b      	ldrb	r3, [r3, #1]
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d008      	beq.n	8007e9a <USBD_StdEPReq+0x9a>
 8007e88:	2b03      	cmp	r3, #3
 8007e8a:	f300 8145 	bgt.w	8008118 <USBD_StdEPReq+0x318>
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f000 809b 	beq.w	8007fca <USBD_StdEPReq+0x1ca>
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d03c      	beq.n	8007f12 <USBD_StdEPReq+0x112>
 8007e98:	e13e      	b.n	8008118 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d002      	beq.n	8007eac <USBD_StdEPReq+0xac>
 8007ea6:	2b03      	cmp	r3, #3
 8007ea8:	d016      	beq.n	8007ed8 <USBD_StdEPReq+0xd8>
 8007eaa:	e02c      	b.n	8007f06 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007eac:	7bbb      	ldrb	r3, [r7, #14]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00d      	beq.n	8007ece <USBD_StdEPReq+0xce>
 8007eb2:	7bbb      	ldrb	r3, [r7, #14]
 8007eb4:	2b80      	cmp	r3, #128	; 0x80
 8007eb6:	d00a      	beq.n	8007ece <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007eb8:	7bbb      	ldrb	r3, [r7, #14]
 8007eba:	4619      	mov	r1, r3
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f001 f97b 	bl	80091b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ec2:	2180      	movs	r1, #128	; 0x80
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f001 f977 	bl	80091b8 <USBD_LL_StallEP>
 8007eca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ecc:	e020      	b.n	8007f10 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fc7a 	bl	80087ca <USBD_CtlError>
              break;
 8007ed6:	e01b      	b.n	8007f10 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	885b      	ldrh	r3, [r3, #2]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10e      	bne.n	8007efe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00b      	beq.n	8007efe <USBD_StdEPReq+0xfe>
 8007ee6:	7bbb      	ldrb	r3, [r7, #14]
 8007ee8:	2b80      	cmp	r3, #128	; 0x80
 8007eea:	d008      	beq.n	8007efe <USBD_StdEPReq+0xfe>
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	88db      	ldrh	r3, [r3, #6]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d104      	bne.n	8007efe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f001 f95d 	bl	80091b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fd2e 	bl	8008960 <USBD_CtlSendStatus>

              break;
 8007f04:	e004      	b.n	8007f10 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fc5e 	bl	80087ca <USBD_CtlError>
              break;
 8007f0e:	bf00      	nop
          }
          break;
 8007f10:	e107      	b.n	8008122 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d002      	beq.n	8007f24 <USBD_StdEPReq+0x124>
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d016      	beq.n	8007f50 <USBD_StdEPReq+0x150>
 8007f22:	e04b      	b.n	8007fbc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f24:	7bbb      	ldrb	r3, [r7, #14]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00d      	beq.n	8007f46 <USBD_StdEPReq+0x146>
 8007f2a:	7bbb      	ldrb	r3, [r7, #14]
 8007f2c:	2b80      	cmp	r3, #128	; 0x80
 8007f2e:	d00a      	beq.n	8007f46 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f30:	7bbb      	ldrb	r3, [r7, #14]
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f001 f93f 	bl	80091b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f3a:	2180      	movs	r1, #128	; 0x80
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f001 f93b 	bl	80091b8 <USBD_LL_StallEP>
 8007f42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f44:	e040      	b.n	8007fc8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fc3e 	bl	80087ca <USBD_CtlError>
              break;
 8007f4e:	e03b      	b.n	8007fc8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	885b      	ldrh	r3, [r3, #2]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d136      	bne.n	8007fc6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f58:	7bbb      	ldrb	r3, [r7, #14]
 8007f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d004      	beq.n	8007f6c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f62:	7bbb      	ldrb	r3, [r7, #14]
 8007f64:	4619      	mov	r1, r3
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f001 f945 	bl	80091f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fcf7 	bl	8008960 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f72:	7bbb      	ldrb	r3, [r7, #14]
 8007f74:	4619      	mov	r1, r3
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7ff fde2 	bl	8007b40 <USBD_CoreFindEP>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f80:	7b7b      	ldrb	r3, [r7, #13]
 8007f82:	2bff      	cmp	r3, #255	; 0xff
 8007f84:	d01f      	beq.n	8007fc6 <USBD_StdEPReq+0x1c6>
 8007f86:	7b7b      	ldrb	r3, [r7, #13]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d11c      	bne.n	8007fc6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007f8c:	7b7a      	ldrb	r2, [r7, #13]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007f94:	7b7a      	ldrb	r2, [r7, #13]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	32ae      	adds	r2, #174	; 0xae
 8007f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d010      	beq.n	8007fc6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007fa4:	7b7a      	ldrb	r2, [r7, #13]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	32ae      	adds	r2, #174	; 0xae
 8007faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	4798      	blx	r3
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007fba:	e004      	b.n	8007fc6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007fbc:	6839      	ldr	r1, [r7, #0]
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fc03 	bl	80087ca <USBD_CtlError>
              break;
 8007fc4:	e000      	b.n	8007fc8 <USBD_StdEPReq+0x1c8>
              break;
 8007fc6:	bf00      	nop
          }
          break;
 8007fc8:	e0ab      	b.n	8008122 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d002      	beq.n	8007fdc <USBD_StdEPReq+0x1dc>
 8007fd6:	2b03      	cmp	r3, #3
 8007fd8:	d032      	beq.n	8008040 <USBD_StdEPReq+0x240>
 8007fda:	e097      	b.n	800810c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d007      	beq.n	8007ff2 <USBD_StdEPReq+0x1f2>
 8007fe2:	7bbb      	ldrb	r3, [r7, #14]
 8007fe4:	2b80      	cmp	r3, #128	; 0x80
 8007fe6:	d004      	beq.n	8007ff2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fbed 	bl	80087ca <USBD_CtlError>
                break;
 8007ff0:	e091      	b.n	8008116 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ff2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	da0b      	bge.n	8008012 <USBD_StdEPReq+0x212>
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
 8007ffc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008000:	4613      	mov	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4413      	add	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	3310      	adds	r3, #16
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	4413      	add	r3, r2
 800800e:	3304      	adds	r3, #4
 8008010:	e00b      	b.n	800802a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008012:	7bbb      	ldrb	r3, [r7, #14]
 8008014:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008018:	4613      	mov	r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	4413      	add	r3, r2
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	4413      	add	r3, r2
 8008028:	3304      	adds	r3, #4
 800802a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	2200      	movs	r2, #0
 8008030:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	2202      	movs	r2, #2
 8008036:	4619      	mov	r1, r3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fc37 	bl	80088ac <USBD_CtlSendData>
              break;
 800803e:	e06a      	b.n	8008116 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008040:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008044:	2b00      	cmp	r3, #0
 8008046:	da11      	bge.n	800806c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008048:	7bbb      	ldrb	r3, [r7, #14]
 800804a:	f003 020f 	and.w	r2, r3, #15
 800804e:	6879      	ldr	r1, [r7, #4]
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	440b      	add	r3, r1
 800805a:	3324      	adds	r3, #36	; 0x24
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d117      	bne.n	8008092 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fbb0 	bl	80087ca <USBD_CtlError>
                  break;
 800806a:	e054      	b.n	8008116 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800806c:	7bbb      	ldrb	r3, [r7, #14]
 800806e:	f003 020f 	and.w	r2, r3, #15
 8008072:	6879      	ldr	r1, [r7, #4]
 8008074:	4613      	mov	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	440b      	add	r3, r1
 800807e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d104      	bne.n	8008092 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fb9d 	bl	80087ca <USBD_CtlError>
                  break;
 8008090:	e041      	b.n	8008116 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008092:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008096:	2b00      	cmp	r3, #0
 8008098:	da0b      	bge.n	80080b2 <USBD_StdEPReq+0x2b2>
 800809a:	7bbb      	ldrb	r3, [r7, #14]
 800809c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080a0:	4613      	mov	r3, r2
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	4413      	add	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	3310      	adds	r3, #16
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	4413      	add	r3, r2
 80080ae:	3304      	adds	r3, #4
 80080b0:	e00b      	b.n	80080ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080b2:	7bbb      	ldrb	r3, [r7, #14]
 80080b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080b8:	4613      	mov	r3, r2
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	4413      	add	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	4413      	add	r3, r2
 80080c8:	3304      	adds	r3, #4
 80080ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d002      	beq.n	80080d8 <USBD_StdEPReq+0x2d8>
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
 80080d4:	2b80      	cmp	r3, #128	; 0x80
 80080d6:	d103      	bne.n	80080e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2200      	movs	r2, #0
 80080dc:	601a      	str	r2, [r3, #0]
 80080de:	e00e      	b.n	80080fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
 80080e2:	4619      	mov	r1, r3
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f001 f8a5 	bl	8009234 <USBD_LL_IsStallEP>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	2201      	movs	r2, #1
 80080f4:	601a      	str	r2, [r3, #0]
 80080f6:	e002      	b.n	80080fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	2200      	movs	r2, #0
 80080fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2202      	movs	r2, #2
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fbd1 	bl	80088ac <USBD_CtlSendData>
              break;
 800810a:	e004      	b.n	8008116 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fb5b 	bl	80087ca <USBD_CtlError>
              break;
 8008114:	bf00      	nop
          }
          break;
 8008116:	e004      	b.n	8008122 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fb55 	bl	80087ca <USBD_CtlError>
          break;
 8008120:	bf00      	nop
      }
      break;
 8008122:	e005      	b.n	8008130 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fb4f 	bl	80087ca <USBD_CtlError>
      break;
 800812c:	e000      	b.n	8008130 <USBD_StdEPReq+0x330>
      break;
 800812e:	bf00      	nop
  }

  return ret;
 8008130:	7bfb      	ldrb	r3, [r7, #15]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
	...

0800813c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008146:	2300      	movs	r3, #0
 8008148:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800814a:	2300      	movs	r3, #0
 800814c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	885b      	ldrh	r3, [r3, #2]
 8008156:	0a1b      	lsrs	r3, r3, #8
 8008158:	b29b      	uxth	r3, r3
 800815a:	3b01      	subs	r3, #1
 800815c:	2b06      	cmp	r3, #6
 800815e:	f200 8128 	bhi.w	80083b2 <USBD_GetDescriptor+0x276>
 8008162:	a201      	add	r2, pc, #4	; (adr r2, 8008168 <USBD_GetDescriptor+0x2c>)
 8008164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008168:	08008185 	.word	0x08008185
 800816c:	0800819d 	.word	0x0800819d
 8008170:	080081dd 	.word	0x080081dd
 8008174:	080083b3 	.word	0x080083b3
 8008178:	080083b3 	.word	0x080083b3
 800817c:	08008353 	.word	0x08008353
 8008180:	0800837f 	.word	0x0800837f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	7c12      	ldrb	r2, [r2, #16]
 8008190:	f107 0108 	add.w	r1, r7, #8
 8008194:	4610      	mov	r0, r2
 8008196:	4798      	blx	r3
 8008198:	60f8      	str	r0, [r7, #12]
      break;
 800819a:	e112      	b.n	80083c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	7c1b      	ldrb	r3, [r3, #16]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10d      	bne.n	80081c0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ac:	f107 0208 	add.w	r2, r7, #8
 80081b0:	4610      	mov	r0, r2
 80081b2:	4798      	blx	r3
 80081b4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	3301      	adds	r3, #1
 80081ba:	2202      	movs	r2, #2
 80081bc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80081be:	e100      	b.n	80083c2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c8:	f107 0208 	add.w	r2, r7, #8
 80081cc:	4610      	mov	r0, r2
 80081ce:	4798      	blx	r3
 80081d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	3301      	adds	r3, #1
 80081d6:	2202      	movs	r2, #2
 80081d8:	701a      	strb	r2, [r3, #0]
      break;
 80081da:	e0f2      	b.n	80083c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	885b      	ldrh	r3, [r3, #2]
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b05      	cmp	r3, #5
 80081e4:	f200 80ac 	bhi.w	8008340 <USBD_GetDescriptor+0x204>
 80081e8:	a201      	add	r2, pc, #4	; (adr r2, 80081f0 <USBD_GetDescriptor+0xb4>)
 80081ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ee:	bf00      	nop
 80081f0:	08008209 	.word	0x08008209
 80081f4:	0800823d 	.word	0x0800823d
 80081f8:	08008271 	.word	0x08008271
 80081fc:	080082a5 	.word	0x080082a5
 8008200:	080082d9 	.word	0x080082d9
 8008204:	0800830d 	.word	0x0800830d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00b      	beq.n	800822c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	7c12      	ldrb	r2, [r2, #16]
 8008220:	f107 0108 	add.w	r1, r7, #8
 8008224:	4610      	mov	r0, r2
 8008226:	4798      	blx	r3
 8008228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800822a:	e091      	b.n	8008350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 facb 	bl	80087ca <USBD_CtlError>
            err++;
 8008234:	7afb      	ldrb	r3, [r7, #11]
 8008236:	3301      	adds	r3, #1
 8008238:	72fb      	strb	r3, [r7, #11]
          break;
 800823a:	e089      	b.n	8008350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00b      	beq.n	8008260 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	7c12      	ldrb	r2, [r2, #16]
 8008254:	f107 0108 	add.w	r1, r7, #8
 8008258:	4610      	mov	r0, r2
 800825a:	4798      	blx	r3
 800825c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800825e:	e077      	b.n	8008350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008260:	6839      	ldr	r1, [r7, #0]
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fab1 	bl	80087ca <USBD_CtlError>
            err++;
 8008268:	7afb      	ldrb	r3, [r7, #11]
 800826a:	3301      	adds	r3, #1
 800826c:	72fb      	strb	r3, [r7, #11]
          break;
 800826e:	e06f      	b.n	8008350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00b      	beq.n	8008294 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	7c12      	ldrb	r2, [r2, #16]
 8008288:	f107 0108 	add.w	r1, r7, #8
 800828c:	4610      	mov	r0, r2
 800828e:	4798      	blx	r3
 8008290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008292:	e05d      	b.n	8008350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008294:	6839      	ldr	r1, [r7, #0]
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fa97 	bl	80087ca <USBD_CtlError>
            err++;
 800829c:	7afb      	ldrb	r3, [r7, #11]
 800829e:	3301      	adds	r3, #1
 80082a0:	72fb      	strb	r3, [r7, #11]
          break;
 80082a2:	e055      	b.n	8008350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00b      	beq.n	80082c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	7c12      	ldrb	r2, [r2, #16]
 80082bc:	f107 0108 	add.w	r1, r7, #8
 80082c0:	4610      	mov	r0, r2
 80082c2:	4798      	blx	r3
 80082c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082c6:	e043      	b.n	8008350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fa7d 	bl	80087ca <USBD_CtlError>
            err++;
 80082d0:	7afb      	ldrb	r3, [r7, #11]
 80082d2:	3301      	adds	r3, #1
 80082d4:	72fb      	strb	r3, [r7, #11]
          break;
 80082d6:	e03b      	b.n	8008350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00b      	beq.n	80082fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ea:	695b      	ldr	r3, [r3, #20]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	7c12      	ldrb	r2, [r2, #16]
 80082f0:	f107 0108 	add.w	r1, r7, #8
 80082f4:	4610      	mov	r0, r2
 80082f6:	4798      	blx	r3
 80082f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082fa:	e029      	b.n	8008350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082fc:	6839      	ldr	r1, [r7, #0]
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fa63 	bl	80087ca <USBD_CtlError>
            err++;
 8008304:	7afb      	ldrb	r3, [r7, #11]
 8008306:	3301      	adds	r3, #1
 8008308:	72fb      	strb	r3, [r7, #11]
          break;
 800830a:	e021      	b.n	8008350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00b      	beq.n	8008330 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	7c12      	ldrb	r2, [r2, #16]
 8008324:	f107 0108 	add.w	r1, r7, #8
 8008328:	4610      	mov	r0, r2
 800832a:	4798      	blx	r3
 800832c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800832e:	e00f      	b.n	8008350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fa49 	bl	80087ca <USBD_CtlError>
            err++;
 8008338:	7afb      	ldrb	r3, [r7, #11]
 800833a:	3301      	adds	r3, #1
 800833c:	72fb      	strb	r3, [r7, #11]
          break;
 800833e:	e007      	b.n	8008350 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fa41 	bl	80087ca <USBD_CtlError>
          err++;
 8008348:	7afb      	ldrb	r3, [r7, #11]
 800834a:	3301      	adds	r3, #1
 800834c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800834e:	bf00      	nop
      }
      break;
 8008350:	e037      	b.n	80083c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	7c1b      	ldrb	r3, [r3, #16]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d109      	bne.n	800836e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008362:	f107 0208 	add.w	r2, r7, #8
 8008366:	4610      	mov	r0, r2
 8008368:	4798      	blx	r3
 800836a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800836c:	e029      	b.n	80083c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800836e:	6839      	ldr	r1, [r7, #0]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 fa2a 	bl	80087ca <USBD_CtlError>
        err++;
 8008376:	7afb      	ldrb	r3, [r7, #11]
 8008378:	3301      	adds	r3, #1
 800837a:	72fb      	strb	r3, [r7, #11]
      break;
 800837c:	e021      	b.n	80083c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	7c1b      	ldrb	r3, [r3, #16]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10d      	bne.n	80083a2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800838c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800838e:	f107 0208 	add.w	r2, r7, #8
 8008392:	4610      	mov	r0, r2
 8008394:	4798      	blx	r3
 8008396:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	3301      	adds	r3, #1
 800839c:	2207      	movs	r2, #7
 800839e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083a0:	e00f      	b.n	80083c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fa10 	bl	80087ca <USBD_CtlError>
        err++;
 80083aa:	7afb      	ldrb	r3, [r7, #11]
 80083ac:	3301      	adds	r3, #1
 80083ae:	72fb      	strb	r3, [r7, #11]
      break;
 80083b0:	e007      	b.n	80083c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fa08 	bl	80087ca <USBD_CtlError>
      err++;
 80083ba:	7afb      	ldrb	r3, [r7, #11]
 80083bc:	3301      	adds	r3, #1
 80083be:	72fb      	strb	r3, [r7, #11]
      break;
 80083c0:	bf00      	nop
  }

  if (err != 0U)
 80083c2:	7afb      	ldrb	r3, [r7, #11]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d11e      	bne.n	8008406 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	88db      	ldrh	r3, [r3, #6]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d016      	beq.n	80083fe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80083d0:	893b      	ldrh	r3, [r7, #8]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00e      	beq.n	80083f4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	88da      	ldrh	r2, [r3, #6]
 80083da:	893b      	ldrh	r3, [r7, #8]
 80083dc:	4293      	cmp	r3, r2
 80083de:	bf28      	it	cs
 80083e0:	4613      	movcs	r3, r2
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80083e6:	893b      	ldrh	r3, [r7, #8]
 80083e8:	461a      	mov	r2, r3
 80083ea:	68f9      	ldr	r1, [r7, #12]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fa5d 	bl	80088ac <USBD_CtlSendData>
 80083f2:	e009      	b.n	8008408 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f9e7 	bl	80087ca <USBD_CtlError>
 80083fc:	e004      	b.n	8008408 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 faae 	bl	8008960 <USBD_CtlSendStatus>
 8008404:	e000      	b.n	8008408 <USBD_GetDescriptor+0x2cc>
    return;
 8008406:	bf00      	nop
  }
}
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop

08008410 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	889b      	ldrh	r3, [r3, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d131      	bne.n	8008486 <USBD_SetAddress+0x76>
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	88db      	ldrh	r3, [r3, #6]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d12d      	bne.n	8008486 <USBD_SetAddress+0x76>
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	885b      	ldrh	r3, [r3, #2]
 800842e:	2b7f      	cmp	r3, #127	; 0x7f
 8008430:	d829      	bhi.n	8008486 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	885b      	ldrh	r3, [r3, #2]
 8008436:	b2db      	uxtb	r3, r3
 8008438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800843c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2b03      	cmp	r3, #3
 8008448:	d104      	bne.n	8008454 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800844a:	6839      	ldr	r1, [r7, #0]
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f9bc 	bl	80087ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008452:	e01d      	b.n	8008490 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	7bfa      	ldrb	r2, [r7, #15]
 8008458:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800845c:	7bfb      	ldrb	r3, [r7, #15]
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 ff13 	bl	800928c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fa7a 	bl	8008960 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800846c:	7bfb      	ldrb	r3, [r7, #15]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d004      	beq.n	800847c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2202      	movs	r2, #2
 8008476:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800847a:	e009      	b.n	8008490 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008484:	e004      	b.n	8008490 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f99e 	bl	80087ca <USBD_CtlError>
  }
}
 800848e:	bf00      	nop
 8008490:	bf00      	nop
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	885b      	ldrh	r3, [r3, #2]
 80084aa:	b2da      	uxtb	r2, r3
 80084ac:	4b4e      	ldr	r3, [pc, #312]	; (80085e8 <USBD_SetConfig+0x150>)
 80084ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084b0:	4b4d      	ldr	r3, [pc, #308]	; (80085e8 <USBD_SetConfig+0x150>)
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d905      	bls.n	80084c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80084b8:	6839      	ldr	r1, [r7, #0]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f985 	bl	80087ca <USBD_CtlError>
    return USBD_FAIL;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e08c      	b.n	80085de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d002      	beq.n	80084d6 <USBD_SetConfig+0x3e>
 80084d0:	2b03      	cmp	r3, #3
 80084d2:	d029      	beq.n	8008528 <USBD_SetConfig+0x90>
 80084d4:	e075      	b.n	80085c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80084d6:	4b44      	ldr	r3, [pc, #272]	; (80085e8 <USBD_SetConfig+0x150>)
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d020      	beq.n	8008520 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80084de:	4b42      	ldr	r3, [pc, #264]	; (80085e8 <USBD_SetConfig+0x150>)
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	461a      	mov	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084e8:	4b3f      	ldr	r3, [pc, #252]	; (80085e8 <USBD_SetConfig+0x150>)
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	4619      	mov	r1, r3
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7fe ffe7 	bl	80074c2 <USBD_SetClassConfig>
 80084f4:	4603      	mov	r3, r0
 80084f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d008      	beq.n	8008510 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f962 	bl	80087ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2202      	movs	r2, #2
 800850a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800850e:	e065      	b.n	80085dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fa25 	bl	8008960 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2203      	movs	r2, #3
 800851a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800851e:	e05d      	b.n	80085dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 fa1d 	bl	8008960 <USBD_CtlSendStatus>
      break;
 8008526:	e059      	b.n	80085dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008528:	4b2f      	ldr	r3, [pc, #188]	; (80085e8 <USBD_SetConfig+0x150>)
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d112      	bne.n	8008556 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2202      	movs	r2, #2
 8008534:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008538:	4b2b      	ldr	r3, [pc, #172]	; (80085e8 <USBD_SetConfig+0x150>)
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	461a      	mov	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008542:	4b29      	ldr	r3, [pc, #164]	; (80085e8 <USBD_SetConfig+0x150>)
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	4619      	mov	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7fe ffd6 	bl	80074fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fa06 	bl	8008960 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008554:	e042      	b.n	80085dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008556:	4b24      	ldr	r3, [pc, #144]	; (80085e8 <USBD_SetConfig+0x150>)
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	461a      	mov	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	429a      	cmp	r2, r3
 8008562:	d02a      	beq.n	80085ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	b2db      	uxtb	r3, r3
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7fe ffc4 	bl	80074fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008572:	4b1d      	ldr	r3, [pc, #116]	; (80085e8 <USBD_SetConfig+0x150>)
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800857c:	4b1a      	ldr	r3, [pc, #104]	; (80085e8 <USBD_SetConfig+0x150>)
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	4619      	mov	r1, r3
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f7fe ff9d 	bl	80074c2 <USBD_SetClassConfig>
 8008588:	4603      	mov	r3, r0
 800858a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800858c:	7bfb      	ldrb	r3, [r7, #15]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00f      	beq.n	80085b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 f918 	bl	80087ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	4619      	mov	r1, r3
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7fe ffa9 	bl	80074fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2202      	movs	r2, #2
 80085ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80085b0:	e014      	b.n	80085dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f9d4 	bl	8008960 <USBD_CtlSendStatus>
      break;
 80085b8:	e010      	b.n	80085dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f9d0 	bl	8008960 <USBD_CtlSendStatus>
      break;
 80085c0:	e00c      	b.n	80085dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f900 	bl	80087ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085ca:	4b07      	ldr	r3, [pc, #28]	; (80085e8 <USBD_SetConfig+0x150>)
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	4619      	mov	r1, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f7fe ff92 	bl	80074fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80085d6:	2303      	movs	r3, #3
 80085d8:	73fb      	strb	r3, [r7, #15]
      break;
 80085da:	bf00      	nop
  }

  return ret;
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	200002ec 	.word	0x200002ec

080085ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	88db      	ldrh	r3, [r3, #6]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d004      	beq.n	8008608 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80085fe:	6839      	ldr	r1, [r7, #0]
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f8e2 	bl	80087ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008606:	e023      	b.n	8008650 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800860e:	b2db      	uxtb	r3, r3
 8008610:	2b02      	cmp	r3, #2
 8008612:	dc02      	bgt.n	800861a <USBD_GetConfig+0x2e>
 8008614:	2b00      	cmp	r3, #0
 8008616:	dc03      	bgt.n	8008620 <USBD_GetConfig+0x34>
 8008618:	e015      	b.n	8008646 <USBD_GetConfig+0x5a>
 800861a:	2b03      	cmp	r3, #3
 800861c:	d00b      	beq.n	8008636 <USBD_GetConfig+0x4a>
 800861e:	e012      	b.n	8008646 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	3308      	adds	r3, #8
 800862a:	2201      	movs	r2, #1
 800862c:	4619      	mov	r1, r3
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f93c 	bl	80088ac <USBD_CtlSendData>
        break;
 8008634:	e00c      	b.n	8008650 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	3304      	adds	r3, #4
 800863a:	2201      	movs	r2, #1
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f934 	bl	80088ac <USBD_CtlSendData>
        break;
 8008644:	e004      	b.n	8008650 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008646:	6839      	ldr	r1, [r7, #0]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f8be 	bl	80087ca <USBD_CtlError>
        break;
 800864e:	bf00      	nop
}
 8008650:	bf00      	nop
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008668:	b2db      	uxtb	r3, r3
 800866a:	3b01      	subs	r3, #1
 800866c:	2b02      	cmp	r3, #2
 800866e:	d81e      	bhi.n	80086ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	88db      	ldrh	r3, [r3, #6]
 8008674:	2b02      	cmp	r3, #2
 8008676:	d004      	beq.n	8008682 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f8a5 	bl	80087ca <USBD_CtlError>
        break;
 8008680:	e01a      	b.n	80086b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800868e:	2b00      	cmp	r3, #0
 8008690:	d005      	beq.n	800869e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	f043 0202 	orr.w	r2, r3, #2
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	330c      	adds	r3, #12
 80086a2:	2202      	movs	r2, #2
 80086a4:	4619      	mov	r1, r3
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f900 	bl	80088ac <USBD_CtlSendData>
      break;
 80086ac:	e004      	b.n	80086b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80086ae:	6839      	ldr	r1, [r7, #0]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f88a 	bl	80087ca <USBD_CtlError>
      break;
 80086b6:	bf00      	nop
  }
}
 80086b8:	bf00      	nop
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	885b      	ldrh	r3, [r3, #2]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d107      	bne.n	80086e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f940 	bl	8008960 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80086e0:	e013      	b.n	800870a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	885b      	ldrh	r3, [r3, #2]
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d10b      	bne.n	8008702 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	889b      	ldrh	r3, [r3, #4]
 80086ee:	0a1b      	lsrs	r3, r3, #8
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f930 	bl	8008960 <USBD_CtlSendStatus>
}
 8008700:	e003      	b.n	800870a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008702:	6839      	ldr	r1, [r7, #0]
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f860 	bl	80087ca <USBD_CtlError>
}
 800870a:	bf00      	nop
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b082      	sub	sp, #8
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008722:	b2db      	uxtb	r3, r3
 8008724:	3b01      	subs	r3, #1
 8008726:	2b02      	cmp	r3, #2
 8008728:	d80b      	bhi.n	8008742 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	885b      	ldrh	r3, [r3, #2]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d10c      	bne.n	800874c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f910 	bl	8008960 <USBD_CtlSendStatus>
      }
      break;
 8008740:	e004      	b.n	800874c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 f840 	bl	80087ca <USBD_CtlError>
      break;
 800874a:	e000      	b.n	800874e <USBD_ClrFeature+0x3c>
      break;
 800874c:	bf00      	nop
  }
}
 800874e:	bf00      	nop
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b084      	sub	sp, #16
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	781a      	ldrb	r2, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	3301      	adds	r3, #1
 8008770:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	781a      	ldrb	r2, [r3, #0]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	3301      	adds	r3, #1
 800877e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f7ff fa41 	bl	8007c08 <SWAPBYTE>
 8008786:	4603      	mov	r3, r0
 8008788:	461a      	mov	r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	3301      	adds	r3, #1
 8008792:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	3301      	adds	r3, #1
 8008798:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f7ff fa34 	bl	8007c08 <SWAPBYTE>
 80087a0:	4603      	mov	r3, r0
 80087a2:	461a      	mov	r2, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	3301      	adds	r3, #1
 80087ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	3301      	adds	r3, #1
 80087b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f7ff fa27 	bl	8007c08 <SWAPBYTE>
 80087ba:	4603      	mov	r3, r0
 80087bc:	461a      	mov	r2, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	80da      	strh	r2, [r3, #6]
}
 80087c2:	bf00      	nop
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b082      	sub	sp, #8
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
 80087d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80087d4:	2180      	movs	r1, #128	; 0x80
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fcee 	bl	80091b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80087dc:	2100      	movs	r1, #0
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fcea 	bl	80091b8 <USBD_LL_StallEP>
}
 80087e4:	bf00      	nop
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80087f8:	2300      	movs	r3, #0
 80087fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d036      	beq.n	8008870 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008806:	6938      	ldr	r0, [r7, #16]
 8008808:	f000 f836 	bl	8008878 <USBD_GetLen>
 800880c:	4603      	mov	r3, r0
 800880e:	3301      	adds	r3, #1
 8008810:	b29b      	uxth	r3, r3
 8008812:	005b      	lsls	r3, r3, #1
 8008814:	b29a      	uxth	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800881a:	7dfb      	ldrb	r3, [r7, #23]
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	4413      	add	r3, r2
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	7812      	ldrb	r2, [r2, #0]
 8008824:	701a      	strb	r2, [r3, #0]
  idx++;
 8008826:	7dfb      	ldrb	r3, [r7, #23]
 8008828:	3301      	adds	r3, #1
 800882a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800882c:	7dfb      	ldrb	r3, [r7, #23]
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	4413      	add	r3, r2
 8008832:	2203      	movs	r2, #3
 8008834:	701a      	strb	r2, [r3, #0]
  idx++;
 8008836:	7dfb      	ldrb	r3, [r7, #23]
 8008838:	3301      	adds	r3, #1
 800883a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800883c:	e013      	b.n	8008866 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800883e:	7dfb      	ldrb	r3, [r7, #23]
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	4413      	add	r3, r2
 8008844:	693a      	ldr	r2, [r7, #16]
 8008846:	7812      	ldrb	r2, [r2, #0]
 8008848:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	3301      	adds	r3, #1
 800884e:	613b      	str	r3, [r7, #16]
    idx++;
 8008850:	7dfb      	ldrb	r3, [r7, #23]
 8008852:	3301      	adds	r3, #1
 8008854:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008856:	7dfb      	ldrb	r3, [r7, #23]
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	4413      	add	r3, r2
 800885c:	2200      	movs	r2, #0
 800885e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008860:	7dfb      	ldrb	r3, [r7, #23]
 8008862:	3301      	adds	r3, #1
 8008864:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1e7      	bne.n	800883e <USBD_GetString+0x52>
 800886e:	e000      	b.n	8008872 <USBD_GetString+0x86>
    return;
 8008870:	bf00      	nop
  }
}
 8008872:	3718      	adds	r7, #24
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008880:	2300      	movs	r3, #0
 8008882:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008888:	e005      	b.n	8008896 <USBD_GetLen+0x1e>
  {
    len++;
 800888a:	7bfb      	ldrb	r3, [r7, #15]
 800888c:	3301      	adds	r3, #1
 800888e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	3301      	adds	r3, #1
 8008894:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1f5      	bne.n	800888a <USBD_GetLen+0x12>
  }

  return len;
 800889e:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3714      	adds	r7, #20
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2202      	movs	r2, #2
 80088bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	2100      	movs	r1, #0
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f000 fcf9 	bl	80092ca <USBD_LL_Transmit>

  return USBD_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	60f8      	str	r0, [r7, #12]
 80088ea:	60b9      	str	r1, [r7, #8]
 80088ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	2100      	movs	r1, #0
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f000 fce8 	bl	80092ca <USBD_LL_Transmit>

  return USBD_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2203      	movs	r2, #3
 8008914:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	2100      	movs	r1, #0
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	f000 fcec 	bl	800930c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b084      	sub	sp, #16
 8008942:	af00      	add	r7, sp, #0
 8008944:	60f8      	str	r0, [r7, #12]
 8008946:	60b9      	str	r1, [r7, #8]
 8008948:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	68ba      	ldr	r2, [r7, #8]
 800894e:	2100      	movs	r1, #0
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f000 fcdb 	bl	800930c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2204      	movs	r2, #4
 800896c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008970:	2300      	movs	r3, #0
 8008972:	2200      	movs	r2, #0
 8008974:	2100      	movs	r1, #0
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fca7 	bl	80092ca <USBD_LL_Transmit>

  return USBD_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3708      	adds	r7, #8
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b082      	sub	sp, #8
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2205      	movs	r2, #5
 8008992:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008996:	2300      	movs	r3, #0
 8008998:	2200      	movs	r2, #0
 800899a:	2100      	movs	r1, #0
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fcb5 	bl	800930c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80089b0:	2200      	movs	r2, #0
 80089b2:	4912      	ldr	r1, [pc, #72]	; (80089fc <MX_USB_DEVICE_Init+0x50>)
 80089b4:	4812      	ldr	r0, [pc, #72]	; (8008a00 <MX_USB_DEVICE_Init+0x54>)
 80089b6:	f7fe fd07 	bl	80073c8 <USBD_Init>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d001      	beq.n	80089c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80089c0:	f7f8 f89c 	bl	8000afc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80089c4:	490f      	ldr	r1, [pc, #60]	; (8008a04 <MX_USB_DEVICE_Init+0x58>)
 80089c6:	480e      	ldr	r0, [pc, #56]	; (8008a00 <MX_USB_DEVICE_Init+0x54>)
 80089c8:	f7fe fd2e 	bl	8007428 <USBD_RegisterClass>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d001      	beq.n	80089d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80089d2:	f7f8 f893 	bl	8000afc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80089d6:	490c      	ldr	r1, [pc, #48]	; (8008a08 <MX_USB_DEVICE_Init+0x5c>)
 80089d8:	4809      	ldr	r0, [pc, #36]	; (8008a00 <MX_USB_DEVICE_Init+0x54>)
 80089da:	f7fe fc1f 	bl	800721c <USBD_CDC_RegisterInterface>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d001      	beq.n	80089e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80089e4:	f7f8 f88a 	bl	8000afc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80089e8:	4805      	ldr	r0, [pc, #20]	; (8008a00 <MX_USB_DEVICE_Init+0x54>)
 80089ea:	f7fe fd53 	bl	8007494 <USBD_Start>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d001      	beq.n	80089f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80089f4:	f7f8 f882 	bl	8000afc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80089f8:	bf00      	nop
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	200000ac 	.word	0x200000ac
 8008a00:	200002f0 	.word	0x200002f0
 8008a04:	20000018 	.word	0x20000018
 8008a08:	20000098 	.word	0x20000098

08008a0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008a10:	2200      	movs	r2, #0
 8008a12:	4905      	ldr	r1, [pc, #20]	; (8008a28 <CDC_Init_FS+0x1c>)
 8008a14:	4805      	ldr	r0, [pc, #20]	; (8008a2c <CDC_Init_FS+0x20>)
 8008a16:	f7fe fc1b 	bl	8007250 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008a1a:	4905      	ldr	r1, [pc, #20]	; (8008a30 <CDC_Init_FS+0x24>)
 8008a1c:	4803      	ldr	r0, [pc, #12]	; (8008a2c <CDC_Init_FS+0x20>)
 8008a1e:	f7fe fc39 	bl	8007294 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008a22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	20000dcc 	.word	0x20000dcc
 8008a2c:	200002f0 	.word	0x200002f0
 8008a30:	200005cc 	.word	0x200005cc

08008a34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008a34:	b480      	push	{r7}
 8008a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	6039      	str	r1, [r7, #0]
 8008a4e:	71fb      	strb	r3, [r7, #7]
 8008a50:	4613      	mov	r3, r2
 8008a52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008a54:	79fb      	ldrb	r3, [r7, #7]
 8008a56:	2b23      	cmp	r3, #35	; 0x23
 8008a58:	d84a      	bhi.n	8008af0 <CDC_Control_FS+0xac>
 8008a5a:	a201      	add	r2, pc, #4	; (adr r2, 8008a60 <CDC_Control_FS+0x1c>)
 8008a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a60:	08008af1 	.word	0x08008af1
 8008a64:	08008af1 	.word	0x08008af1
 8008a68:	08008af1 	.word	0x08008af1
 8008a6c:	08008af1 	.word	0x08008af1
 8008a70:	08008af1 	.word	0x08008af1
 8008a74:	08008af1 	.word	0x08008af1
 8008a78:	08008af1 	.word	0x08008af1
 8008a7c:	08008af1 	.word	0x08008af1
 8008a80:	08008af1 	.word	0x08008af1
 8008a84:	08008af1 	.word	0x08008af1
 8008a88:	08008af1 	.word	0x08008af1
 8008a8c:	08008af1 	.word	0x08008af1
 8008a90:	08008af1 	.word	0x08008af1
 8008a94:	08008af1 	.word	0x08008af1
 8008a98:	08008af1 	.word	0x08008af1
 8008a9c:	08008af1 	.word	0x08008af1
 8008aa0:	08008af1 	.word	0x08008af1
 8008aa4:	08008af1 	.word	0x08008af1
 8008aa8:	08008af1 	.word	0x08008af1
 8008aac:	08008af1 	.word	0x08008af1
 8008ab0:	08008af1 	.word	0x08008af1
 8008ab4:	08008af1 	.word	0x08008af1
 8008ab8:	08008af1 	.word	0x08008af1
 8008abc:	08008af1 	.word	0x08008af1
 8008ac0:	08008af1 	.word	0x08008af1
 8008ac4:	08008af1 	.word	0x08008af1
 8008ac8:	08008af1 	.word	0x08008af1
 8008acc:	08008af1 	.word	0x08008af1
 8008ad0:	08008af1 	.word	0x08008af1
 8008ad4:	08008af1 	.word	0x08008af1
 8008ad8:	08008af1 	.word	0x08008af1
 8008adc:	08008af1 	.word	0x08008af1
 8008ae0:	08008af1 	.word	0x08008af1
 8008ae4:	08008af1 	.word	0x08008af1
 8008ae8:	08008af1 	.word	0x08008af1
 8008aec:	08008af1 	.word	0x08008af1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008af0:	bf00      	nop
  }

  return (USBD_OK);
 8008af2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008b0a:	6879      	ldr	r1, [r7, #4]
 8008b0c:	4805      	ldr	r0, [pc, #20]	; (8008b24 <CDC_Receive_FS+0x24>)
 8008b0e:	f7fe fbc1 	bl	8007294 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008b12:	4804      	ldr	r0, [pc, #16]	; (8008b24 <CDC_Receive_FS+0x24>)
 8008b14:	f7fe fc22 	bl	800735c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008b18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3708      	adds	r7, #8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	200002f0 	.word	0x200002f0

08008b28 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	460b      	mov	r3, r1
 8008b32:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008b34:	2300      	movs	r3, #0
 8008b36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008b38:	4b0d      	ldr	r3, [pc, #52]	; (8008b70 <CDC_Transmit_FS+0x48>)
 8008b3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b3e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d001      	beq.n	8008b4e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e00b      	b.n	8008b66 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008b4e:	887b      	ldrh	r3, [r7, #2]
 8008b50:	461a      	mov	r2, r3
 8008b52:	6879      	ldr	r1, [r7, #4]
 8008b54:	4806      	ldr	r0, [pc, #24]	; (8008b70 <CDC_Transmit_FS+0x48>)
 8008b56:	f7fe fb7b 	bl	8007250 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008b5a:	4805      	ldr	r0, [pc, #20]	; (8008b70 <CDC_Transmit_FS+0x48>)
 8008b5c:	f7fe fbb8 	bl	80072d0 <USBD_CDC_TransmitPacket>
 8008b60:	4603      	mov	r3, r0
 8008b62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	200002f0 	.word	0x200002f0

08008b74 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b087      	sub	sp, #28
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008b82:	2300      	movs	r3, #0
 8008b84:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008b86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	371c      	adds	r7, #28
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
	...

08008b98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	6039      	str	r1, [r7, #0]
 8008ba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	2212      	movs	r2, #18
 8008ba8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008baa:	4b03      	ldr	r3, [pc, #12]	; (8008bb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	200000c8 	.word	0x200000c8

08008bbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	6039      	str	r1, [r7, #0]
 8008bc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	2204      	movs	r2, #4
 8008bcc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008bce:	4b03      	ldr	r3, [pc, #12]	; (8008bdc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr
 8008bdc:	200000dc 	.word	0x200000dc

08008be0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	4603      	mov	r3, r0
 8008be8:	6039      	str	r1, [r7, #0]
 8008bea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bec:	79fb      	ldrb	r3, [r7, #7]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d105      	bne.n	8008bfe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bf2:	683a      	ldr	r2, [r7, #0]
 8008bf4:	4907      	ldr	r1, [pc, #28]	; (8008c14 <USBD_FS_ProductStrDescriptor+0x34>)
 8008bf6:	4808      	ldr	r0, [pc, #32]	; (8008c18 <USBD_FS_ProductStrDescriptor+0x38>)
 8008bf8:	f7ff fdf8 	bl	80087ec <USBD_GetString>
 8008bfc:	e004      	b.n	8008c08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bfe:	683a      	ldr	r2, [r7, #0]
 8008c00:	4904      	ldr	r1, [pc, #16]	; (8008c14 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c02:	4805      	ldr	r0, [pc, #20]	; (8008c18 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c04:	f7ff fdf2 	bl	80087ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c08:	4b02      	ldr	r3, [pc, #8]	; (8008c14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	200015cc 	.word	0x200015cc
 8008c18:	0800a29c 	.word	0x0800a29c

08008c1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	4603      	mov	r3, r0
 8008c24:	6039      	str	r1, [r7, #0]
 8008c26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c28:	683a      	ldr	r2, [r7, #0]
 8008c2a:	4904      	ldr	r1, [pc, #16]	; (8008c3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c2c:	4804      	ldr	r0, [pc, #16]	; (8008c40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c2e:	f7ff fddd 	bl	80087ec <USBD_GetString>
  return USBD_StrDesc;
 8008c32:	4b02      	ldr	r3, [pc, #8]	; (8008c3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	200015cc 	.word	0x200015cc
 8008c40:	0800a2b4 	.word	0x0800a2b4

08008c44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	6039      	str	r1, [r7, #0]
 8008c4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	221a      	movs	r2, #26
 8008c54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c56:	f000 f843 	bl	8008ce0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c5a:	4b02      	ldr	r3, [pc, #8]	; (8008c64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	200000e0 	.word	0x200000e0

08008c68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	4603      	mov	r3, r0
 8008c70:	6039      	str	r1, [r7, #0]
 8008c72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c74:	79fb      	ldrb	r3, [r7, #7]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d105      	bne.n	8008c86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c7a:	683a      	ldr	r2, [r7, #0]
 8008c7c:	4907      	ldr	r1, [pc, #28]	; (8008c9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c7e:	4808      	ldr	r0, [pc, #32]	; (8008ca0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c80:	f7ff fdb4 	bl	80087ec <USBD_GetString>
 8008c84:	e004      	b.n	8008c90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	4904      	ldr	r1, [pc, #16]	; (8008c9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c8a:	4805      	ldr	r0, [pc, #20]	; (8008ca0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c8c:	f7ff fdae 	bl	80087ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c90:	4b02      	ldr	r3, [pc, #8]	; (8008c9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3708      	adds	r7, #8
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	200015cc 	.word	0x200015cc
 8008ca0:	0800a2c8 	.word	0x0800a2c8

08008ca4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	4603      	mov	r3, r0
 8008cac:	6039      	str	r1, [r7, #0]
 8008cae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008cb0:	79fb      	ldrb	r3, [r7, #7]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d105      	bne.n	8008cc2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	4907      	ldr	r1, [pc, #28]	; (8008cd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cba:	4808      	ldr	r0, [pc, #32]	; (8008cdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008cbc:	f7ff fd96 	bl	80087ec <USBD_GetString>
 8008cc0:	e004      	b.n	8008ccc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008cc2:	683a      	ldr	r2, [r7, #0]
 8008cc4:	4904      	ldr	r1, [pc, #16]	; (8008cd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cc6:	4805      	ldr	r0, [pc, #20]	; (8008cdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008cc8:	f7ff fd90 	bl	80087ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ccc:	4b02      	ldr	r3, [pc, #8]	; (8008cd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	200015cc 	.word	0x200015cc
 8008cdc:	0800a2d4 	.word	0x0800a2d4

08008ce0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ce6:	4b0f      	ldr	r3, [pc, #60]	; (8008d24 <Get_SerialNum+0x44>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008cec:	4b0e      	ldr	r3, [pc, #56]	; (8008d28 <Get_SerialNum+0x48>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008cf2:	4b0e      	ldr	r3, [pc, #56]	; (8008d2c <Get_SerialNum+0x4c>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d009      	beq.n	8008d1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d06:	2208      	movs	r2, #8
 8008d08:	4909      	ldr	r1, [pc, #36]	; (8008d30 <Get_SerialNum+0x50>)
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f000 f814 	bl	8008d38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d10:	2204      	movs	r2, #4
 8008d12:	4908      	ldr	r1, [pc, #32]	; (8008d34 <Get_SerialNum+0x54>)
 8008d14:	68b8      	ldr	r0, [r7, #8]
 8008d16:	f000 f80f 	bl	8008d38 <IntToUnicode>
  }
}
 8008d1a:	bf00      	nop
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	1fff7a10 	.word	0x1fff7a10
 8008d28:	1fff7a14 	.word	0x1fff7a14
 8008d2c:	1fff7a18 	.word	0x1fff7a18
 8008d30:	200000e2 	.word	0x200000e2
 8008d34:	200000f2 	.word	0x200000f2

08008d38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b087      	sub	sp, #28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	4613      	mov	r3, r2
 8008d44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d46:	2300      	movs	r3, #0
 8008d48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	75fb      	strb	r3, [r7, #23]
 8008d4e:	e027      	b.n	8008da0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	0f1b      	lsrs	r3, r3, #28
 8008d54:	2b09      	cmp	r3, #9
 8008d56:	d80b      	bhi.n	8008d70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	0f1b      	lsrs	r3, r3, #28
 8008d5c:	b2da      	uxtb	r2, r3
 8008d5e:	7dfb      	ldrb	r3, [r7, #23]
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	4619      	mov	r1, r3
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	440b      	add	r3, r1
 8008d68:	3230      	adds	r2, #48	; 0x30
 8008d6a:	b2d2      	uxtb	r2, r2
 8008d6c:	701a      	strb	r2, [r3, #0]
 8008d6e:	e00a      	b.n	8008d86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	0f1b      	lsrs	r3, r3, #28
 8008d74:	b2da      	uxtb	r2, r3
 8008d76:	7dfb      	ldrb	r3, [r7, #23]
 8008d78:	005b      	lsls	r3, r3, #1
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	440b      	add	r3, r1
 8008d80:	3237      	adds	r2, #55	; 0x37
 8008d82:	b2d2      	uxtb	r2, r2
 8008d84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	011b      	lsls	r3, r3, #4
 8008d8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d8c:	7dfb      	ldrb	r3, [r7, #23]
 8008d8e:	005b      	lsls	r3, r3, #1
 8008d90:	3301      	adds	r3, #1
 8008d92:	68ba      	ldr	r2, [r7, #8]
 8008d94:	4413      	add	r3, r2
 8008d96:	2200      	movs	r2, #0
 8008d98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d9a:	7dfb      	ldrb	r3, [r7, #23]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	75fb      	strb	r3, [r7, #23]
 8008da0:	7dfa      	ldrb	r2, [r7, #23]
 8008da2:	79fb      	ldrb	r3, [r7, #7]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d3d3      	bcc.n	8008d50 <IntToUnicode+0x18>
  }
}
 8008da8:	bf00      	nop
 8008daa:	bf00      	nop
 8008dac:	371c      	adds	r7, #28
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr
	...

08008db8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b08a      	sub	sp, #40	; 0x28
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dc0:	f107 0314 	add.w	r3, r7, #20
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	601a      	str	r2, [r3, #0]
 8008dc8:	605a      	str	r2, [r3, #4]
 8008dca:	609a      	str	r2, [r3, #8]
 8008dcc:	60da      	str	r2, [r3, #12]
 8008dce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008dd8:	d147      	bne.n	8008e6a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dda:	2300      	movs	r3, #0
 8008ddc:	613b      	str	r3, [r7, #16]
 8008dde:	4b25      	ldr	r3, [pc, #148]	; (8008e74 <HAL_PCD_MspInit+0xbc>)
 8008de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de2:	4a24      	ldr	r2, [pc, #144]	; (8008e74 <HAL_PCD_MspInit+0xbc>)
 8008de4:	f043 0301 	orr.w	r3, r3, #1
 8008de8:	6313      	str	r3, [r2, #48]	; 0x30
 8008dea:	4b22      	ldr	r3, [pc, #136]	; (8008e74 <HAL_PCD_MspInit+0xbc>)
 8008dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dee:	f003 0301 	and.w	r3, r3, #1
 8008df2:	613b      	str	r3, [r7, #16]
 8008df4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008df6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e00:	2300      	movs	r3, #0
 8008e02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008e04:	f107 0314 	add.w	r3, r7, #20
 8008e08:	4619      	mov	r1, r3
 8008e0a:	481b      	ldr	r0, [pc, #108]	; (8008e78 <HAL_PCD_MspInit+0xc0>)
 8008e0c:	f7f8 fcb8 	bl	8001780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008e10:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e16:	2302      	movs	r3, #2
 8008e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e22:	230a      	movs	r3, #10
 8008e24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e26:	f107 0314 	add.w	r3, r7, #20
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	4812      	ldr	r0, [pc, #72]	; (8008e78 <HAL_PCD_MspInit+0xc0>)
 8008e2e:	f7f8 fca7 	bl	8001780 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e32:	4b10      	ldr	r3, [pc, #64]	; (8008e74 <HAL_PCD_MspInit+0xbc>)
 8008e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e36:	4a0f      	ldr	r2, [pc, #60]	; (8008e74 <HAL_PCD_MspInit+0xbc>)
 8008e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e3c:	6353      	str	r3, [r2, #52]	; 0x34
 8008e3e:	2300      	movs	r3, #0
 8008e40:	60fb      	str	r3, [r7, #12]
 8008e42:	4b0c      	ldr	r3, [pc, #48]	; (8008e74 <HAL_PCD_MspInit+0xbc>)
 8008e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e46:	4a0b      	ldr	r2, [pc, #44]	; (8008e74 <HAL_PCD_MspInit+0xbc>)
 8008e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8008e4e:	4b09      	ldr	r3, [pc, #36]	; (8008e74 <HAL_PCD_MspInit+0xbc>)
 8008e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e56:	60fb      	str	r3, [r7, #12]
 8008e58:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	2043      	movs	r0, #67	; 0x43
 8008e60:	f7f8 fc57 	bl	8001712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e64:	2043      	movs	r0, #67	; 0x43
 8008e66:	f7f8 fc70 	bl	800174a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e6a:	bf00      	nop
 8008e6c:	3728      	adds	r7, #40	; 0x28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	40023800 	.word	0x40023800
 8008e78:	40020000 	.word	0x40020000

08008e7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008e90:	4619      	mov	r1, r3
 8008e92:	4610      	mov	r0, r2
 8008e94:	f7fe fb4b 	bl	800752e <USBD_LL_SetupStage>
}
 8008e98:	bf00      	nop
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008eb2:	78fa      	ldrb	r2, [r7, #3]
 8008eb4:	6879      	ldr	r1, [r7, #4]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	00db      	lsls	r3, r3, #3
 8008eba:	4413      	add	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	440b      	add	r3, r1
 8008ec0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	78fb      	ldrb	r3, [r7, #3]
 8008ec8:	4619      	mov	r1, r3
 8008eca:	f7fe fb85 	bl	80075d8 <USBD_LL_DataOutStage>
}
 8008ece:	bf00      	nop
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b082      	sub	sp, #8
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	460b      	mov	r3, r1
 8008ee0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008ee8:	78fa      	ldrb	r2, [r7, #3]
 8008eea:	6879      	ldr	r1, [r7, #4]
 8008eec:	4613      	mov	r3, r2
 8008eee:	00db      	lsls	r3, r3, #3
 8008ef0:	4413      	add	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	440b      	add	r3, r1
 8008ef6:	334c      	adds	r3, #76	; 0x4c
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	78fb      	ldrb	r3, [r7, #3]
 8008efc:	4619      	mov	r1, r3
 8008efe:	f7fe fc1e 	bl	800773e <USBD_LL_DataInStage>
}
 8008f02:	bf00      	nop
 8008f04:	3708      	adds	r7, #8
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b082      	sub	sp, #8
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7fe fd52 	bl	80079c2 <USBD_LL_SOF>
}
 8008f1e:	bf00      	nop
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b084      	sub	sp, #16
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d102      	bne.n	8008f40 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	73fb      	strb	r3, [r7, #15]
 8008f3e:	e008      	b.n	8008f52 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d102      	bne.n	8008f4e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	73fb      	strb	r3, [r7, #15]
 8008f4c:	e001      	b.n	8008f52 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008f4e:	f7f7 fdd5 	bl	8000afc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f58:	7bfa      	ldrb	r2, [r7, #15]
 8008f5a:	4611      	mov	r1, r2
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7fe fcf2 	bl	8007946 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7fe fc9a 	bl	80078a2 <USBD_LL_Reset>
}
 8008f6e:	bf00      	nop
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
	...

08008f78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fe fced 	bl	8007966 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	6812      	ldr	r2, [r2, #0]
 8008f9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f9e:	f043 0301 	orr.w	r3, r3, #1
 8008fa2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a1b      	ldr	r3, [r3, #32]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d005      	beq.n	8008fb8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008fac:	4b04      	ldr	r3, [pc, #16]	; (8008fc0 <HAL_PCD_SuspendCallback+0x48>)
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	4a03      	ldr	r2, [pc, #12]	; (8008fc0 <HAL_PCD_SuspendCallback+0x48>)
 8008fb2:	f043 0306 	orr.w	r3, r3, #6
 8008fb6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008fb8:	bf00      	nop
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	e000ed00 	.word	0xe000ed00

08008fc4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fe fcdd 	bl	8007992 <USBD_LL_Resume>
}
 8008fd8:	bf00      	nop
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ff2:	78fa      	ldrb	r2, [r7, #3]
 8008ff4:	4611      	mov	r1, r2
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fe fd35 	bl	8007a66 <USBD_LL_IsoOUTIncomplete>
}
 8008ffc:	bf00      	nop
 8008ffe:	3708      	adds	r7, #8
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	460b      	mov	r3, r1
 800900e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009016:	78fa      	ldrb	r2, [r7, #3]
 8009018:	4611      	mov	r1, r2
 800901a:	4618      	mov	r0, r3
 800901c:	f7fe fcf1 	bl	8007a02 <USBD_LL_IsoINIncomplete>
}
 8009020:	bf00      	nop
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009036:	4618      	mov	r0, r3
 8009038:	f7fe fd47 	bl	8007aca <USBD_LL_DevConnected>
}
 800903c:	bf00      	nop
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009052:	4618      	mov	r0, r3
 8009054:	f7fe fd44 	bl	8007ae0 <USBD_LL_DevDisconnected>
}
 8009058:	bf00      	nop
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d13c      	bne.n	80090ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009070:	4a20      	ldr	r2, [pc, #128]	; (80090f4 <USBD_LL_Init+0x94>)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a1e      	ldr	r2, [pc, #120]	; (80090f4 <USBD_LL_Init+0x94>)
 800907c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009080:	4b1c      	ldr	r3, [pc, #112]	; (80090f4 <USBD_LL_Init+0x94>)
 8009082:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009086:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009088:	4b1a      	ldr	r3, [pc, #104]	; (80090f4 <USBD_LL_Init+0x94>)
 800908a:	2204      	movs	r2, #4
 800908c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800908e:	4b19      	ldr	r3, [pc, #100]	; (80090f4 <USBD_LL_Init+0x94>)
 8009090:	2202      	movs	r2, #2
 8009092:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009094:	4b17      	ldr	r3, [pc, #92]	; (80090f4 <USBD_LL_Init+0x94>)
 8009096:	2200      	movs	r2, #0
 8009098:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800909a:	4b16      	ldr	r3, [pc, #88]	; (80090f4 <USBD_LL_Init+0x94>)
 800909c:	2202      	movs	r2, #2
 800909e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80090a0:	4b14      	ldr	r3, [pc, #80]	; (80090f4 <USBD_LL_Init+0x94>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80090a6:	4b13      	ldr	r3, [pc, #76]	; (80090f4 <USBD_LL_Init+0x94>)
 80090a8:	2200      	movs	r2, #0
 80090aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80090ac:	4b11      	ldr	r3, [pc, #68]	; (80090f4 <USBD_LL_Init+0x94>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80090b2:	4b10      	ldr	r3, [pc, #64]	; (80090f4 <USBD_LL_Init+0x94>)
 80090b4:	2201      	movs	r2, #1
 80090b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80090b8:	4b0e      	ldr	r3, [pc, #56]	; (80090f4 <USBD_LL_Init+0x94>)
 80090ba:	2200      	movs	r2, #0
 80090bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80090be:	480d      	ldr	r0, [pc, #52]	; (80090f4 <USBD_LL_Init+0x94>)
 80090c0:	f7f9 fb12 	bl	80026e8 <HAL_PCD_Init>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80090ca:	f7f7 fd17 	bl	8000afc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80090ce:	2180      	movs	r1, #128	; 0x80
 80090d0:	4808      	ldr	r0, [pc, #32]	; (80090f4 <USBD_LL_Init+0x94>)
 80090d2:	f7fa fd6a 	bl	8003baa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80090d6:	2240      	movs	r2, #64	; 0x40
 80090d8:	2100      	movs	r1, #0
 80090da:	4806      	ldr	r0, [pc, #24]	; (80090f4 <USBD_LL_Init+0x94>)
 80090dc:	f7fa fd1e 	bl	8003b1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80090e0:	2280      	movs	r2, #128	; 0x80
 80090e2:	2101      	movs	r1, #1
 80090e4:	4803      	ldr	r0, [pc, #12]	; (80090f4 <USBD_LL_Init+0x94>)
 80090e6:	f7fa fd19 	bl	8003b1c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	200017cc 	.word	0x200017cc

080090f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009100:	2300      	movs	r3, #0
 8009102:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009104:	2300      	movs	r3, #0
 8009106:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800910e:	4618      	mov	r0, r3
 8009110:	f7f9 fc07 	bl	8002922 <HAL_PCD_Start>
 8009114:	4603      	mov	r3, r0
 8009116:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009118:	7bfb      	ldrb	r3, [r7, #15]
 800911a:	4618      	mov	r0, r3
 800911c:	f000 f942 	bl	80093a4 <USBD_Get_USB_Status>
 8009120:	4603      	mov	r3, r0
 8009122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009124:	7bbb      	ldrb	r3, [r7, #14]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b084      	sub	sp, #16
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	4608      	mov	r0, r1
 8009138:	4611      	mov	r1, r2
 800913a:	461a      	mov	r2, r3
 800913c:	4603      	mov	r3, r0
 800913e:	70fb      	strb	r3, [r7, #3]
 8009140:	460b      	mov	r3, r1
 8009142:	70bb      	strb	r3, [r7, #2]
 8009144:	4613      	mov	r3, r2
 8009146:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009148:	2300      	movs	r3, #0
 800914a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800914c:	2300      	movs	r3, #0
 800914e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009156:	78bb      	ldrb	r3, [r7, #2]
 8009158:	883a      	ldrh	r2, [r7, #0]
 800915a:	78f9      	ldrb	r1, [r7, #3]
 800915c:	f7fa f8d8 	bl	8003310 <HAL_PCD_EP_Open>
 8009160:	4603      	mov	r3, r0
 8009162:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009164:	7bfb      	ldrb	r3, [r7, #15]
 8009166:	4618      	mov	r0, r3
 8009168:	f000 f91c 	bl	80093a4 <USBD_Get_USB_Status>
 800916c:	4603      	mov	r3, r0
 800916e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009170:	7bbb      	ldrb	r3, [r7, #14]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b084      	sub	sp, #16
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
 8009182:	460b      	mov	r3, r1
 8009184:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009186:	2300      	movs	r3, #0
 8009188:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800918a:	2300      	movs	r3, #0
 800918c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009194:	78fa      	ldrb	r2, [r7, #3]
 8009196:	4611      	mov	r1, r2
 8009198:	4618      	mov	r0, r3
 800919a:	f7fa f921 	bl	80033e0 <HAL_PCD_EP_Close>
 800919e:	4603      	mov	r3, r0
 80091a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 f8fd 	bl	80093a4 <USBD_Get_USB_Status>
 80091aa:	4603      	mov	r3, r0
 80091ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	460b      	mov	r3, r1
 80091c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091c4:	2300      	movs	r3, #0
 80091c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091d2:	78fa      	ldrb	r2, [r7, #3]
 80091d4:	4611      	mov	r1, r2
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fa f9f9 	bl	80035ce <HAL_PCD_EP_SetStall>
 80091dc:	4603      	mov	r3, r0
 80091de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 f8de 	bl	80093a4 <USBD_Get_USB_Status>
 80091e8:	4603      	mov	r3, r0
 80091ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b084      	sub	sp, #16
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
 80091fe:	460b      	mov	r3, r1
 8009200:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009202:	2300      	movs	r3, #0
 8009204:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009206:	2300      	movs	r3, #0
 8009208:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009210:	78fa      	ldrb	r2, [r7, #3]
 8009212:	4611      	mov	r1, r2
 8009214:	4618      	mov	r0, r3
 8009216:	f7fa fa3e 	bl	8003696 <HAL_PCD_EP_ClrStall>
 800921a:	4603      	mov	r3, r0
 800921c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800921e:	7bfb      	ldrb	r3, [r7, #15]
 8009220:	4618      	mov	r0, r3
 8009222:	f000 f8bf 	bl	80093a4 <USBD_Get_USB_Status>
 8009226:	4603      	mov	r3, r0
 8009228:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800922a:	7bbb      	ldrb	r3, [r7, #14]
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	460b      	mov	r3, r1
 800923e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009246:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009248:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800924c:	2b00      	cmp	r3, #0
 800924e:	da0b      	bge.n	8009268 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009250:	78fb      	ldrb	r3, [r7, #3]
 8009252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009256:	68f9      	ldr	r1, [r7, #12]
 8009258:	4613      	mov	r3, r2
 800925a:	00db      	lsls	r3, r3, #3
 800925c:	4413      	add	r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	440b      	add	r3, r1
 8009262:	333e      	adds	r3, #62	; 0x3e
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	e00b      	b.n	8009280 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009268:	78fb      	ldrb	r3, [r7, #3]
 800926a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800926e:	68f9      	ldr	r1, [r7, #12]
 8009270:	4613      	mov	r3, r2
 8009272:	00db      	lsls	r3, r3, #3
 8009274:	4413      	add	r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	440b      	add	r3, r1
 800927a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800927e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009280:	4618      	mov	r0, r3
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	460b      	mov	r3, r1
 8009296:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092a6:	78fa      	ldrb	r2, [r7, #3]
 80092a8:	4611      	mov	r1, r2
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fa f80b 	bl	80032c6 <HAL_PCD_SetAddress>
 80092b0:	4603      	mov	r3, r0
 80092b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 f874 	bl	80093a4 <USBD_Get_USB_Status>
 80092bc:	4603      	mov	r3, r0
 80092be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b086      	sub	sp, #24
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	60f8      	str	r0, [r7, #12]
 80092d2:	607a      	str	r2, [r7, #4]
 80092d4:	603b      	str	r3, [r7, #0]
 80092d6:	460b      	mov	r3, r1
 80092d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80092e8:	7af9      	ldrb	r1, [r7, #11]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	f7fa f924 	bl	800353a <HAL_PCD_EP_Transmit>
 80092f2:	4603      	mov	r3, r0
 80092f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092f6:	7dfb      	ldrb	r3, [r7, #23]
 80092f8:	4618      	mov	r0, r3
 80092fa:	f000 f853 	bl	80093a4 <USBD_Get_USB_Status>
 80092fe:	4603      	mov	r3, r0
 8009300:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009302:	7dbb      	ldrb	r3, [r7, #22]
}
 8009304:	4618      	mov	r0, r3
 8009306:	3718      	adds	r7, #24
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	607a      	str	r2, [r7, #4]
 8009316:	603b      	str	r3, [r7, #0]
 8009318:	460b      	mov	r3, r1
 800931a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800931c:	2300      	movs	r3, #0
 800931e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800932a:	7af9      	ldrb	r1, [r7, #11]
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	f7fa f8a0 	bl	8003474 <HAL_PCD_EP_Receive>
 8009334:	4603      	mov	r3, r0
 8009336:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009338:	7dfb      	ldrb	r3, [r7, #23]
 800933a:	4618      	mov	r0, r3
 800933c:	f000 f832 	bl	80093a4 <USBD_Get_USB_Status>
 8009340:	4603      	mov	r3, r0
 8009342:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009344:	7dbb      	ldrb	r3, [r7, #22]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3718      	adds	r7, #24
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b082      	sub	sp, #8
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
 8009356:	460b      	mov	r3, r1
 8009358:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009360:	78fa      	ldrb	r2, [r7, #3]
 8009362:	4611      	mov	r1, r2
 8009364:	4618      	mov	r0, r3
 8009366:	f7fa f8d0 	bl	800350a <HAL_PCD_EP_GetRxCount>
 800936a:	4603      	mov	r3, r0
}
 800936c:	4618      	mov	r0, r3
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800937c:	4b03      	ldr	r3, [pc, #12]	; (800938c <USBD_static_malloc+0x18>)
}
 800937e:	4618      	mov	r0, r3
 8009380:	370c      	adds	r7, #12
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	20001cd8 	.word	0x20001cd8

08009390 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]

}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	4603      	mov	r3, r0
 80093ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ae:	2300      	movs	r3, #0
 80093b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80093b2:	79fb      	ldrb	r3, [r7, #7]
 80093b4:	2b03      	cmp	r3, #3
 80093b6:	d817      	bhi.n	80093e8 <USBD_Get_USB_Status+0x44>
 80093b8:	a201      	add	r2, pc, #4	; (adr r2, 80093c0 <USBD_Get_USB_Status+0x1c>)
 80093ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093be:	bf00      	nop
 80093c0:	080093d1 	.word	0x080093d1
 80093c4:	080093d7 	.word	0x080093d7
 80093c8:	080093dd 	.word	0x080093dd
 80093cc:	080093e3 	.word	0x080093e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80093d0:	2300      	movs	r3, #0
 80093d2:	73fb      	strb	r3, [r7, #15]
    break;
 80093d4:	e00b      	b.n	80093ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093d6:	2303      	movs	r3, #3
 80093d8:	73fb      	strb	r3, [r7, #15]
    break;
 80093da:	e008      	b.n	80093ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093dc:	2301      	movs	r3, #1
 80093de:	73fb      	strb	r3, [r7, #15]
    break;
 80093e0:	e005      	b.n	80093ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093e2:	2303      	movs	r3, #3
 80093e4:	73fb      	strb	r3, [r7, #15]
    break;
 80093e6:	e002      	b.n	80093ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80093e8:	2303      	movs	r3, #3
 80093ea:	73fb      	strb	r3, [r7, #15]
    break;
 80093ec:	bf00      	nop
  }
  return usb_status;
 80093ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3714      	adds	r7, #20
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <std>:
 80093fc:	2300      	movs	r3, #0
 80093fe:	b510      	push	{r4, lr}
 8009400:	4604      	mov	r4, r0
 8009402:	e9c0 3300 	strd	r3, r3, [r0]
 8009406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800940a:	6083      	str	r3, [r0, #8]
 800940c:	8181      	strh	r1, [r0, #12]
 800940e:	6643      	str	r3, [r0, #100]	; 0x64
 8009410:	81c2      	strh	r2, [r0, #14]
 8009412:	6183      	str	r3, [r0, #24]
 8009414:	4619      	mov	r1, r3
 8009416:	2208      	movs	r2, #8
 8009418:	305c      	adds	r0, #92	; 0x5c
 800941a:	f000 f8f4 	bl	8009606 <memset>
 800941e:	4b05      	ldr	r3, [pc, #20]	; (8009434 <std+0x38>)
 8009420:	6263      	str	r3, [r4, #36]	; 0x24
 8009422:	4b05      	ldr	r3, [pc, #20]	; (8009438 <std+0x3c>)
 8009424:	62a3      	str	r3, [r4, #40]	; 0x28
 8009426:	4b05      	ldr	r3, [pc, #20]	; (800943c <std+0x40>)
 8009428:	62e3      	str	r3, [r4, #44]	; 0x2c
 800942a:	4b05      	ldr	r3, [pc, #20]	; (8009440 <std+0x44>)
 800942c:	6224      	str	r4, [r4, #32]
 800942e:	6323      	str	r3, [r4, #48]	; 0x30
 8009430:	bd10      	pop	{r4, pc}
 8009432:	bf00      	nop
 8009434:	08009581 	.word	0x08009581
 8009438:	080095a3 	.word	0x080095a3
 800943c:	080095db 	.word	0x080095db
 8009440:	080095ff 	.word	0x080095ff

08009444 <stdio_exit_handler>:
 8009444:	4a02      	ldr	r2, [pc, #8]	; (8009450 <stdio_exit_handler+0xc>)
 8009446:	4903      	ldr	r1, [pc, #12]	; (8009454 <stdio_exit_handler+0x10>)
 8009448:	4803      	ldr	r0, [pc, #12]	; (8009458 <stdio_exit_handler+0x14>)
 800944a:	f000 b869 	b.w	8009520 <_fwalk_sglue>
 800944e:	bf00      	nop
 8009450:	200000fc 	.word	0x200000fc
 8009454:	08009fa1 	.word	0x08009fa1
 8009458:	20000108 	.word	0x20000108

0800945c <cleanup_stdio>:
 800945c:	6841      	ldr	r1, [r0, #4]
 800945e:	4b0c      	ldr	r3, [pc, #48]	; (8009490 <cleanup_stdio+0x34>)
 8009460:	4299      	cmp	r1, r3
 8009462:	b510      	push	{r4, lr}
 8009464:	4604      	mov	r4, r0
 8009466:	d001      	beq.n	800946c <cleanup_stdio+0x10>
 8009468:	f000 fd9a 	bl	8009fa0 <_fflush_r>
 800946c:	68a1      	ldr	r1, [r4, #8]
 800946e:	4b09      	ldr	r3, [pc, #36]	; (8009494 <cleanup_stdio+0x38>)
 8009470:	4299      	cmp	r1, r3
 8009472:	d002      	beq.n	800947a <cleanup_stdio+0x1e>
 8009474:	4620      	mov	r0, r4
 8009476:	f000 fd93 	bl	8009fa0 <_fflush_r>
 800947a:	68e1      	ldr	r1, [r4, #12]
 800947c:	4b06      	ldr	r3, [pc, #24]	; (8009498 <cleanup_stdio+0x3c>)
 800947e:	4299      	cmp	r1, r3
 8009480:	d004      	beq.n	800948c <cleanup_stdio+0x30>
 8009482:	4620      	mov	r0, r4
 8009484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009488:	f000 bd8a 	b.w	8009fa0 <_fflush_r>
 800948c:	bd10      	pop	{r4, pc}
 800948e:	bf00      	nop
 8009490:	20001ef8 	.word	0x20001ef8
 8009494:	20001f60 	.word	0x20001f60
 8009498:	20001fc8 	.word	0x20001fc8

0800949c <global_stdio_init.part.0>:
 800949c:	b510      	push	{r4, lr}
 800949e:	4b0b      	ldr	r3, [pc, #44]	; (80094cc <global_stdio_init.part.0+0x30>)
 80094a0:	4c0b      	ldr	r4, [pc, #44]	; (80094d0 <global_stdio_init.part.0+0x34>)
 80094a2:	4a0c      	ldr	r2, [pc, #48]	; (80094d4 <global_stdio_init.part.0+0x38>)
 80094a4:	601a      	str	r2, [r3, #0]
 80094a6:	4620      	mov	r0, r4
 80094a8:	2200      	movs	r2, #0
 80094aa:	2104      	movs	r1, #4
 80094ac:	f7ff ffa6 	bl	80093fc <std>
 80094b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80094b4:	2201      	movs	r2, #1
 80094b6:	2109      	movs	r1, #9
 80094b8:	f7ff ffa0 	bl	80093fc <std>
 80094bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80094c0:	2202      	movs	r2, #2
 80094c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094c6:	2112      	movs	r1, #18
 80094c8:	f7ff bf98 	b.w	80093fc <std>
 80094cc:	20002030 	.word	0x20002030
 80094d0:	20001ef8 	.word	0x20001ef8
 80094d4:	08009445 	.word	0x08009445

080094d8 <__sfp_lock_acquire>:
 80094d8:	4801      	ldr	r0, [pc, #4]	; (80094e0 <__sfp_lock_acquire+0x8>)
 80094da:	f000 b90d 	b.w	80096f8 <__retarget_lock_acquire_recursive>
 80094de:	bf00      	nop
 80094e0:	20002039 	.word	0x20002039

080094e4 <__sfp_lock_release>:
 80094e4:	4801      	ldr	r0, [pc, #4]	; (80094ec <__sfp_lock_release+0x8>)
 80094e6:	f000 b908 	b.w	80096fa <__retarget_lock_release_recursive>
 80094ea:	bf00      	nop
 80094ec:	20002039 	.word	0x20002039

080094f0 <__sinit>:
 80094f0:	b510      	push	{r4, lr}
 80094f2:	4604      	mov	r4, r0
 80094f4:	f7ff fff0 	bl	80094d8 <__sfp_lock_acquire>
 80094f8:	6a23      	ldr	r3, [r4, #32]
 80094fa:	b11b      	cbz	r3, 8009504 <__sinit+0x14>
 80094fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009500:	f7ff bff0 	b.w	80094e4 <__sfp_lock_release>
 8009504:	4b04      	ldr	r3, [pc, #16]	; (8009518 <__sinit+0x28>)
 8009506:	6223      	str	r3, [r4, #32]
 8009508:	4b04      	ldr	r3, [pc, #16]	; (800951c <__sinit+0x2c>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1f5      	bne.n	80094fc <__sinit+0xc>
 8009510:	f7ff ffc4 	bl	800949c <global_stdio_init.part.0>
 8009514:	e7f2      	b.n	80094fc <__sinit+0xc>
 8009516:	bf00      	nop
 8009518:	0800945d 	.word	0x0800945d
 800951c:	20002030 	.word	0x20002030

08009520 <_fwalk_sglue>:
 8009520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009524:	4607      	mov	r7, r0
 8009526:	4688      	mov	r8, r1
 8009528:	4614      	mov	r4, r2
 800952a:	2600      	movs	r6, #0
 800952c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009530:	f1b9 0901 	subs.w	r9, r9, #1
 8009534:	d505      	bpl.n	8009542 <_fwalk_sglue+0x22>
 8009536:	6824      	ldr	r4, [r4, #0]
 8009538:	2c00      	cmp	r4, #0
 800953a:	d1f7      	bne.n	800952c <_fwalk_sglue+0xc>
 800953c:	4630      	mov	r0, r6
 800953e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009542:	89ab      	ldrh	r3, [r5, #12]
 8009544:	2b01      	cmp	r3, #1
 8009546:	d907      	bls.n	8009558 <_fwalk_sglue+0x38>
 8009548:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800954c:	3301      	adds	r3, #1
 800954e:	d003      	beq.n	8009558 <_fwalk_sglue+0x38>
 8009550:	4629      	mov	r1, r5
 8009552:	4638      	mov	r0, r7
 8009554:	47c0      	blx	r8
 8009556:	4306      	orrs	r6, r0
 8009558:	3568      	adds	r5, #104	; 0x68
 800955a:	e7e9      	b.n	8009530 <_fwalk_sglue+0x10>

0800955c <iprintf>:
 800955c:	b40f      	push	{r0, r1, r2, r3}
 800955e:	b507      	push	{r0, r1, r2, lr}
 8009560:	4906      	ldr	r1, [pc, #24]	; (800957c <iprintf+0x20>)
 8009562:	ab04      	add	r3, sp, #16
 8009564:	6808      	ldr	r0, [r1, #0]
 8009566:	f853 2b04 	ldr.w	r2, [r3], #4
 800956a:	6881      	ldr	r1, [r0, #8]
 800956c:	9301      	str	r3, [sp, #4]
 800956e:	f000 f9e7 	bl	8009940 <_vfiprintf_r>
 8009572:	b003      	add	sp, #12
 8009574:	f85d eb04 	ldr.w	lr, [sp], #4
 8009578:	b004      	add	sp, #16
 800957a:	4770      	bx	lr
 800957c:	20000154 	.word	0x20000154

08009580 <__sread>:
 8009580:	b510      	push	{r4, lr}
 8009582:	460c      	mov	r4, r1
 8009584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009588:	f000 f868 	bl	800965c <_read_r>
 800958c:	2800      	cmp	r0, #0
 800958e:	bfab      	itete	ge
 8009590:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009592:	89a3      	ldrhlt	r3, [r4, #12]
 8009594:	181b      	addge	r3, r3, r0
 8009596:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800959a:	bfac      	ite	ge
 800959c:	6563      	strge	r3, [r4, #84]	; 0x54
 800959e:	81a3      	strhlt	r3, [r4, #12]
 80095a0:	bd10      	pop	{r4, pc}

080095a2 <__swrite>:
 80095a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095a6:	461f      	mov	r7, r3
 80095a8:	898b      	ldrh	r3, [r1, #12]
 80095aa:	05db      	lsls	r3, r3, #23
 80095ac:	4605      	mov	r5, r0
 80095ae:	460c      	mov	r4, r1
 80095b0:	4616      	mov	r6, r2
 80095b2:	d505      	bpl.n	80095c0 <__swrite+0x1e>
 80095b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095b8:	2302      	movs	r3, #2
 80095ba:	2200      	movs	r2, #0
 80095bc:	f000 f83c 	bl	8009638 <_lseek_r>
 80095c0:	89a3      	ldrh	r3, [r4, #12]
 80095c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095ca:	81a3      	strh	r3, [r4, #12]
 80095cc:	4632      	mov	r2, r6
 80095ce:	463b      	mov	r3, r7
 80095d0:	4628      	mov	r0, r5
 80095d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095d6:	f000 b853 	b.w	8009680 <_write_r>

080095da <__sseek>:
 80095da:	b510      	push	{r4, lr}
 80095dc:	460c      	mov	r4, r1
 80095de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e2:	f000 f829 	bl	8009638 <_lseek_r>
 80095e6:	1c43      	adds	r3, r0, #1
 80095e8:	89a3      	ldrh	r3, [r4, #12]
 80095ea:	bf15      	itete	ne
 80095ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80095ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80095f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80095f6:	81a3      	strheq	r3, [r4, #12]
 80095f8:	bf18      	it	ne
 80095fa:	81a3      	strhne	r3, [r4, #12]
 80095fc:	bd10      	pop	{r4, pc}

080095fe <__sclose>:
 80095fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009602:	f000 b809 	b.w	8009618 <_close_r>

08009606 <memset>:
 8009606:	4402      	add	r2, r0
 8009608:	4603      	mov	r3, r0
 800960a:	4293      	cmp	r3, r2
 800960c:	d100      	bne.n	8009610 <memset+0xa>
 800960e:	4770      	bx	lr
 8009610:	f803 1b01 	strb.w	r1, [r3], #1
 8009614:	e7f9      	b.n	800960a <memset+0x4>
	...

08009618 <_close_r>:
 8009618:	b538      	push	{r3, r4, r5, lr}
 800961a:	4d06      	ldr	r5, [pc, #24]	; (8009634 <_close_r+0x1c>)
 800961c:	2300      	movs	r3, #0
 800961e:	4604      	mov	r4, r0
 8009620:	4608      	mov	r0, r1
 8009622:	602b      	str	r3, [r5, #0]
 8009624:	f7f7 fe39 	bl	800129a <_close>
 8009628:	1c43      	adds	r3, r0, #1
 800962a:	d102      	bne.n	8009632 <_close_r+0x1a>
 800962c:	682b      	ldr	r3, [r5, #0]
 800962e:	b103      	cbz	r3, 8009632 <_close_r+0x1a>
 8009630:	6023      	str	r3, [r4, #0]
 8009632:	bd38      	pop	{r3, r4, r5, pc}
 8009634:	20002034 	.word	0x20002034

08009638 <_lseek_r>:
 8009638:	b538      	push	{r3, r4, r5, lr}
 800963a:	4d07      	ldr	r5, [pc, #28]	; (8009658 <_lseek_r+0x20>)
 800963c:	4604      	mov	r4, r0
 800963e:	4608      	mov	r0, r1
 8009640:	4611      	mov	r1, r2
 8009642:	2200      	movs	r2, #0
 8009644:	602a      	str	r2, [r5, #0]
 8009646:	461a      	mov	r2, r3
 8009648:	f7f7 fe4e 	bl	80012e8 <_lseek>
 800964c:	1c43      	adds	r3, r0, #1
 800964e:	d102      	bne.n	8009656 <_lseek_r+0x1e>
 8009650:	682b      	ldr	r3, [r5, #0]
 8009652:	b103      	cbz	r3, 8009656 <_lseek_r+0x1e>
 8009654:	6023      	str	r3, [r4, #0]
 8009656:	bd38      	pop	{r3, r4, r5, pc}
 8009658:	20002034 	.word	0x20002034

0800965c <_read_r>:
 800965c:	b538      	push	{r3, r4, r5, lr}
 800965e:	4d07      	ldr	r5, [pc, #28]	; (800967c <_read_r+0x20>)
 8009660:	4604      	mov	r4, r0
 8009662:	4608      	mov	r0, r1
 8009664:	4611      	mov	r1, r2
 8009666:	2200      	movs	r2, #0
 8009668:	602a      	str	r2, [r5, #0]
 800966a:	461a      	mov	r2, r3
 800966c:	f7f7 fdf8 	bl	8001260 <_read>
 8009670:	1c43      	adds	r3, r0, #1
 8009672:	d102      	bne.n	800967a <_read_r+0x1e>
 8009674:	682b      	ldr	r3, [r5, #0]
 8009676:	b103      	cbz	r3, 800967a <_read_r+0x1e>
 8009678:	6023      	str	r3, [r4, #0]
 800967a:	bd38      	pop	{r3, r4, r5, pc}
 800967c:	20002034 	.word	0x20002034

08009680 <_write_r>:
 8009680:	b538      	push	{r3, r4, r5, lr}
 8009682:	4d07      	ldr	r5, [pc, #28]	; (80096a0 <_write_r+0x20>)
 8009684:	4604      	mov	r4, r0
 8009686:	4608      	mov	r0, r1
 8009688:	4611      	mov	r1, r2
 800968a:	2200      	movs	r2, #0
 800968c:	602a      	str	r2, [r5, #0]
 800968e:	461a      	mov	r2, r3
 8009690:	f7f6 ffda 	bl	8000648 <_write>
 8009694:	1c43      	adds	r3, r0, #1
 8009696:	d102      	bne.n	800969e <_write_r+0x1e>
 8009698:	682b      	ldr	r3, [r5, #0]
 800969a:	b103      	cbz	r3, 800969e <_write_r+0x1e>
 800969c:	6023      	str	r3, [r4, #0]
 800969e:	bd38      	pop	{r3, r4, r5, pc}
 80096a0:	20002034 	.word	0x20002034

080096a4 <__errno>:
 80096a4:	4b01      	ldr	r3, [pc, #4]	; (80096ac <__errno+0x8>)
 80096a6:	6818      	ldr	r0, [r3, #0]
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	20000154 	.word	0x20000154

080096b0 <__libc_init_array>:
 80096b0:	b570      	push	{r4, r5, r6, lr}
 80096b2:	4d0d      	ldr	r5, [pc, #52]	; (80096e8 <__libc_init_array+0x38>)
 80096b4:	4c0d      	ldr	r4, [pc, #52]	; (80096ec <__libc_init_array+0x3c>)
 80096b6:	1b64      	subs	r4, r4, r5
 80096b8:	10a4      	asrs	r4, r4, #2
 80096ba:	2600      	movs	r6, #0
 80096bc:	42a6      	cmp	r6, r4
 80096be:	d109      	bne.n	80096d4 <__libc_init_array+0x24>
 80096c0:	4d0b      	ldr	r5, [pc, #44]	; (80096f0 <__libc_init_array+0x40>)
 80096c2:	4c0c      	ldr	r4, [pc, #48]	; (80096f4 <__libc_init_array+0x44>)
 80096c4:	f000 fdbe 	bl	800a244 <_init>
 80096c8:	1b64      	subs	r4, r4, r5
 80096ca:	10a4      	asrs	r4, r4, #2
 80096cc:	2600      	movs	r6, #0
 80096ce:	42a6      	cmp	r6, r4
 80096d0:	d105      	bne.n	80096de <__libc_init_array+0x2e>
 80096d2:	bd70      	pop	{r4, r5, r6, pc}
 80096d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80096d8:	4798      	blx	r3
 80096da:	3601      	adds	r6, #1
 80096dc:	e7ee      	b.n	80096bc <__libc_init_array+0xc>
 80096de:	f855 3b04 	ldr.w	r3, [r5], #4
 80096e2:	4798      	blx	r3
 80096e4:	3601      	adds	r6, #1
 80096e6:	e7f2      	b.n	80096ce <__libc_init_array+0x1e>
 80096e8:	0800a338 	.word	0x0800a338
 80096ec:	0800a338 	.word	0x0800a338
 80096f0:	0800a338 	.word	0x0800a338
 80096f4:	0800a33c 	.word	0x0800a33c

080096f8 <__retarget_lock_acquire_recursive>:
 80096f8:	4770      	bx	lr

080096fa <__retarget_lock_release_recursive>:
 80096fa:	4770      	bx	lr

080096fc <_free_r>:
 80096fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096fe:	2900      	cmp	r1, #0
 8009700:	d044      	beq.n	800978c <_free_r+0x90>
 8009702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009706:	9001      	str	r0, [sp, #4]
 8009708:	2b00      	cmp	r3, #0
 800970a:	f1a1 0404 	sub.w	r4, r1, #4
 800970e:	bfb8      	it	lt
 8009710:	18e4      	addlt	r4, r4, r3
 8009712:	f000 f8df 	bl	80098d4 <__malloc_lock>
 8009716:	4a1e      	ldr	r2, [pc, #120]	; (8009790 <_free_r+0x94>)
 8009718:	9801      	ldr	r0, [sp, #4]
 800971a:	6813      	ldr	r3, [r2, #0]
 800971c:	b933      	cbnz	r3, 800972c <_free_r+0x30>
 800971e:	6063      	str	r3, [r4, #4]
 8009720:	6014      	str	r4, [r2, #0]
 8009722:	b003      	add	sp, #12
 8009724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009728:	f000 b8da 	b.w	80098e0 <__malloc_unlock>
 800972c:	42a3      	cmp	r3, r4
 800972e:	d908      	bls.n	8009742 <_free_r+0x46>
 8009730:	6825      	ldr	r5, [r4, #0]
 8009732:	1961      	adds	r1, r4, r5
 8009734:	428b      	cmp	r3, r1
 8009736:	bf01      	itttt	eq
 8009738:	6819      	ldreq	r1, [r3, #0]
 800973a:	685b      	ldreq	r3, [r3, #4]
 800973c:	1949      	addeq	r1, r1, r5
 800973e:	6021      	streq	r1, [r4, #0]
 8009740:	e7ed      	b.n	800971e <_free_r+0x22>
 8009742:	461a      	mov	r2, r3
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	b10b      	cbz	r3, 800974c <_free_r+0x50>
 8009748:	42a3      	cmp	r3, r4
 800974a:	d9fa      	bls.n	8009742 <_free_r+0x46>
 800974c:	6811      	ldr	r1, [r2, #0]
 800974e:	1855      	adds	r5, r2, r1
 8009750:	42a5      	cmp	r5, r4
 8009752:	d10b      	bne.n	800976c <_free_r+0x70>
 8009754:	6824      	ldr	r4, [r4, #0]
 8009756:	4421      	add	r1, r4
 8009758:	1854      	adds	r4, r2, r1
 800975a:	42a3      	cmp	r3, r4
 800975c:	6011      	str	r1, [r2, #0]
 800975e:	d1e0      	bne.n	8009722 <_free_r+0x26>
 8009760:	681c      	ldr	r4, [r3, #0]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	6053      	str	r3, [r2, #4]
 8009766:	440c      	add	r4, r1
 8009768:	6014      	str	r4, [r2, #0]
 800976a:	e7da      	b.n	8009722 <_free_r+0x26>
 800976c:	d902      	bls.n	8009774 <_free_r+0x78>
 800976e:	230c      	movs	r3, #12
 8009770:	6003      	str	r3, [r0, #0]
 8009772:	e7d6      	b.n	8009722 <_free_r+0x26>
 8009774:	6825      	ldr	r5, [r4, #0]
 8009776:	1961      	adds	r1, r4, r5
 8009778:	428b      	cmp	r3, r1
 800977a:	bf04      	itt	eq
 800977c:	6819      	ldreq	r1, [r3, #0]
 800977e:	685b      	ldreq	r3, [r3, #4]
 8009780:	6063      	str	r3, [r4, #4]
 8009782:	bf04      	itt	eq
 8009784:	1949      	addeq	r1, r1, r5
 8009786:	6021      	streq	r1, [r4, #0]
 8009788:	6054      	str	r4, [r2, #4]
 800978a:	e7ca      	b.n	8009722 <_free_r+0x26>
 800978c:	b003      	add	sp, #12
 800978e:	bd30      	pop	{r4, r5, pc}
 8009790:	2000203c 	.word	0x2000203c

08009794 <sbrk_aligned>:
 8009794:	b570      	push	{r4, r5, r6, lr}
 8009796:	4e0e      	ldr	r6, [pc, #56]	; (80097d0 <sbrk_aligned+0x3c>)
 8009798:	460c      	mov	r4, r1
 800979a:	6831      	ldr	r1, [r6, #0]
 800979c:	4605      	mov	r5, r0
 800979e:	b911      	cbnz	r1, 80097a6 <sbrk_aligned+0x12>
 80097a0:	f000 fcbc 	bl	800a11c <_sbrk_r>
 80097a4:	6030      	str	r0, [r6, #0]
 80097a6:	4621      	mov	r1, r4
 80097a8:	4628      	mov	r0, r5
 80097aa:	f000 fcb7 	bl	800a11c <_sbrk_r>
 80097ae:	1c43      	adds	r3, r0, #1
 80097b0:	d00a      	beq.n	80097c8 <sbrk_aligned+0x34>
 80097b2:	1cc4      	adds	r4, r0, #3
 80097b4:	f024 0403 	bic.w	r4, r4, #3
 80097b8:	42a0      	cmp	r0, r4
 80097ba:	d007      	beq.n	80097cc <sbrk_aligned+0x38>
 80097bc:	1a21      	subs	r1, r4, r0
 80097be:	4628      	mov	r0, r5
 80097c0:	f000 fcac 	bl	800a11c <_sbrk_r>
 80097c4:	3001      	adds	r0, #1
 80097c6:	d101      	bne.n	80097cc <sbrk_aligned+0x38>
 80097c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80097cc:	4620      	mov	r0, r4
 80097ce:	bd70      	pop	{r4, r5, r6, pc}
 80097d0:	20002040 	.word	0x20002040

080097d4 <_malloc_r>:
 80097d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097d8:	1ccd      	adds	r5, r1, #3
 80097da:	f025 0503 	bic.w	r5, r5, #3
 80097de:	3508      	adds	r5, #8
 80097e0:	2d0c      	cmp	r5, #12
 80097e2:	bf38      	it	cc
 80097e4:	250c      	movcc	r5, #12
 80097e6:	2d00      	cmp	r5, #0
 80097e8:	4607      	mov	r7, r0
 80097ea:	db01      	blt.n	80097f0 <_malloc_r+0x1c>
 80097ec:	42a9      	cmp	r1, r5
 80097ee:	d905      	bls.n	80097fc <_malloc_r+0x28>
 80097f0:	230c      	movs	r3, #12
 80097f2:	603b      	str	r3, [r7, #0]
 80097f4:	2600      	movs	r6, #0
 80097f6:	4630      	mov	r0, r6
 80097f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80098d0 <_malloc_r+0xfc>
 8009800:	f000 f868 	bl	80098d4 <__malloc_lock>
 8009804:	f8d8 3000 	ldr.w	r3, [r8]
 8009808:	461c      	mov	r4, r3
 800980a:	bb5c      	cbnz	r4, 8009864 <_malloc_r+0x90>
 800980c:	4629      	mov	r1, r5
 800980e:	4638      	mov	r0, r7
 8009810:	f7ff ffc0 	bl	8009794 <sbrk_aligned>
 8009814:	1c43      	adds	r3, r0, #1
 8009816:	4604      	mov	r4, r0
 8009818:	d155      	bne.n	80098c6 <_malloc_r+0xf2>
 800981a:	f8d8 4000 	ldr.w	r4, [r8]
 800981e:	4626      	mov	r6, r4
 8009820:	2e00      	cmp	r6, #0
 8009822:	d145      	bne.n	80098b0 <_malloc_r+0xdc>
 8009824:	2c00      	cmp	r4, #0
 8009826:	d048      	beq.n	80098ba <_malloc_r+0xe6>
 8009828:	6823      	ldr	r3, [r4, #0]
 800982a:	4631      	mov	r1, r6
 800982c:	4638      	mov	r0, r7
 800982e:	eb04 0903 	add.w	r9, r4, r3
 8009832:	f000 fc73 	bl	800a11c <_sbrk_r>
 8009836:	4581      	cmp	r9, r0
 8009838:	d13f      	bne.n	80098ba <_malloc_r+0xe6>
 800983a:	6821      	ldr	r1, [r4, #0]
 800983c:	1a6d      	subs	r5, r5, r1
 800983e:	4629      	mov	r1, r5
 8009840:	4638      	mov	r0, r7
 8009842:	f7ff ffa7 	bl	8009794 <sbrk_aligned>
 8009846:	3001      	adds	r0, #1
 8009848:	d037      	beq.n	80098ba <_malloc_r+0xe6>
 800984a:	6823      	ldr	r3, [r4, #0]
 800984c:	442b      	add	r3, r5
 800984e:	6023      	str	r3, [r4, #0]
 8009850:	f8d8 3000 	ldr.w	r3, [r8]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d038      	beq.n	80098ca <_malloc_r+0xf6>
 8009858:	685a      	ldr	r2, [r3, #4]
 800985a:	42a2      	cmp	r2, r4
 800985c:	d12b      	bne.n	80098b6 <_malloc_r+0xe2>
 800985e:	2200      	movs	r2, #0
 8009860:	605a      	str	r2, [r3, #4]
 8009862:	e00f      	b.n	8009884 <_malloc_r+0xb0>
 8009864:	6822      	ldr	r2, [r4, #0]
 8009866:	1b52      	subs	r2, r2, r5
 8009868:	d41f      	bmi.n	80098aa <_malloc_r+0xd6>
 800986a:	2a0b      	cmp	r2, #11
 800986c:	d917      	bls.n	800989e <_malloc_r+0xca>
 800986e:	1961      	adds	r1, r4, r5
 8009870:	42a3      	cmp	r3, r4
 8009872:	6025      	str	r5, [r4, #0]
 8009874:	bf18      	it	ne
 8009876:	6059      	strne	r1, [r3, #4]
 8009878:	6863      	ldr	r3, [r4, #4]
 800987a:	bf08      	it	eq
 800987c:	f8c8 1000 	streq.w	r1, [r8]
 8009880:	5162      	str	r2, [r4, r5]
 8009882:	604b      	str	r3, [r1, #4]
 8009884:	4638      	mov	r0, r7
 8009886:	f104 060b 	add.w	r6, r4, #11
 800988a:	f000 f829 	bl	80098e0 <__malloc_unlock>
 800988e:	f026 0607 	bic.w	r6, r6, #7
 8009892:	1d23      	adds	r3, r4, #4
 8009894:	1af2      	subs	r2, r6, r3
 8009896:	d0ae      	beq.n	80097f6 <_malloc_r+0x22>
 8009898:	1b9b      	subs	r3, r3, r6
 800989a:	50a3      	str	r3, [r4, r2]
 800989c:	e7ab      	b.n	80097f6 <_malloc_r+0x22>
 800989e:	42a3      	cmp	r3, r4
 80098a0:	6862      	ldr	r2, [r4, #4]
 80098a2:	d1dd      	bne.n	8009860 <_malloc_r+0x8c>
 80098a4:	f8c8 2000 	str.w	r2, [r8]
 80098a8:	e7ec      	b.n	8009884 <_malloc_r+0xb0>
 80098aa:	4623      	mov	r3, r4
 80098ac:	6864      	ldr	r4, [r4, #4]
 80098ae:	e7ac      	b.n	800980a <_malloc_r+0x36>
 80098b0:	4634      	mov	r4, r6
 80098b2:	6876      	ldr	r6, [r6, #4]
 80098b4:	e7b4      	b.n	8009820 <_malloc_r+0x4c>
 80098b6:	4613      	mov	r3, r2
 80098b8:	e7cc      	b.n	8009854 <_malloc_r+0x80>
 80098ba:	230c      	movs	r3, #12
 80098bc:	603b      	str	r3, [r7, #0]
 80098be:	4638      	mov	r0, r7
 80098c0:	f000 f80e 	bl	80098e0 <__malloc_unlock>
 80098c4:	e797      	b.n	80097f6 <_malloc_r+0x22>
 80098c6:	6025      	str	r5, [r4, #0]
 80098c8:	e7dc      	b.n	8009884 <_malloc_r+0xb0>
 80098ca:	605b      	str	r3, [r3, #4]
 80098cc:	deff      	udf	#255	; 0xff
 80098ce:	bf00      	nop
 80098d0:	2000203c 	.word	0x2000203c

080098d4 <__malloc_lock>:
 80098d4:	4801      	ldr	r0, [pc, #4]	; (80098dc <__malloc_lock+0x8>)
 80098d6:	f7ff bf0f 	b.w	80096f8 <__retarget_lock_acquire_recursive>
 80098da:	bf00      	nop
 80098dc:	20002038 	.word	0x20002038

080098e0 <__malloc_unlock>:
 80098e0:	4801      	ldr	r0, [pc, #4]	; (80098e8 <__malloc_unlock+0x8>)
 80098e2:	f7ff bf0a 	b.w	80096fa <__retarget_lock_release_recursive>
 80098e6:	bf00      	nop
 80098e8:	20002038 	.word	0x20002038

080098ec <__sfputc_r>:
 80098ec:	6893      	ldr	r3, [r2, #8]
 80098ee:	3b01      	subs	r3, #1
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	b410      	push	{r4}
 80098f4:	6093      	str	r3, [r2, #8]
 80098f6:	da08      	bge.n	800990a <__sfputc_r+0x1e>
 80098f8:	6994      	ldr	r4, [r2, #24]
 80098fa:	42a3      	cmp	r3, r4
 80098fc:	db01      	blt.n	8009902 <__sfputc_r+0x16>
 80098fe:	290a      	cmp	r1, #10
 8009900:	d103      	bne.n	800990a <__sfputc_r+0x1e>
 8009902:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009906:	f000 bb73 	b.w	8009ff0 <__swbuf_r>
 800990a:	6813      	ldr	r3, [r2, #0]
 800990c:	1c58      	adds	r0, r3, #1
 800990e:	6010      	str	r0, [r2, #0]
 8009910:	7019      	strb	r1, [r3, #0]
 8009912:	4608      	mov	r0, r1
 8009914:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009918:	4770      	bx	lr

0800991a <__sfputs_r>:
 800991a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800991c:	4606      	mov	r6, r0
 800991e:	460f      	mov	r7, r1
 8009920:	4614      	mov	r4, r2
 8009922:	18d5      	adds	r5, r2, r3
 8009924:	42ac      	cmp	r4, r5
 8009926:	d101      	bne.n	800992c <__sfputs_r+0x12>
 8009928:	2000      	movs	r0, #0
 800992a:	e007      	b.n	800993c <__sfputs_r+0x22>
 800992c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009930:	463a      	mov	r2, r7
 8009932:	4630      	mov	r0, r6
 8009934:	f7ff ffda 	bl	80098ec <__sfputc_r>
 8009938:	1c43      	adds	r3, r0, #1
 800993a:	d1f3      	bne.n	8009924 <__sfputs_r+0xa>
 800993c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009940 <_vfiprintf_r>:
 8009940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009944:	460d      	mov	r5, r1
 8009946:	b09d      	sub	sp, #116	; 0x74
 8009948:	4614      	mov	r4, r2
 800994a:	4698      	mov	r8, r3
 800994c:	4606      	mov	r6, r0
 800994e:	b118      	cbz	r0, 8009958 <_vfiprintf_r+0x18>
 8009950:	6a03      	ldr	r3, [r0, #32]
 8009952:	b90b      	cbnz	r3, 8009958 <_vfiprintf_r+0x18>
 8009954:	f7ff fdcc 	bl	80094f0 <__sinit>
 8009958:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800995a:	07d9      	lsls	r1, r3, #31
 800995c:	d405      	bmi.n	800996a <_vfiprintf_r+0x2a>
 800995e:	89ab      	ldrh	r3, [r5, #12]
 8009960:	059a      	lsls	r2, r3, #22
 8009962:	d402      	bmi.n	800996a <_vfiprintf_r+0x2a>
 8009964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009966:	f7ff fec7 	bl	80096f8 <__retarget_lock_acquire_recursive>
 800996a:	89ab      	ldrh	r3, [r5, #12]
 800996c:	071b      	lsls	r3, r3, #28
 800996e:	d501      	bpl.n	8009974 <_vfiprintf_r+0x34>
 8009970:	692b      	ldr	r3, [r5, #16]
 8009972:	b99b      	cbnz	r3, 800999c <_vfiprintf_r+0x5c>
 8009974:	4629      	mov	r1, r5
 8009976:	4630      	mov	r0, r6
 8009978:	f000 fb78 	bl	800a06c <__swsetup_r>
 800997c:	b170      	cbz	r0, 800999c <_vfiprintf_r+0x5c>
 800997e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009980:	07dc      	lsls	r4, r3, #31
 8009982:	d504      	bpl.n	800998e <_vfiprintf_r+0x4e>
 8009984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009988:	b01d      	add	sp, #116	; 0x74
 800998a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800998e:	89ab      	ldrh	r3, [r5, #12]
 8009990:	0598      	lsls	r0, r3, #22
 8009992:	d4f7      	bmi.n	8009984 <_vfiprintf_r+0x44>
 8009994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009996:	f7ff feb0 	bl	80096fa <__retarget_lock_release_recursive>
 800999a:	e7f3      	b.n	8009984 <_vfiprintf_r+0x44>
 800999c:	2300      	movs	r3, #0
 800999e:	9309      	str	r3, [sp, #36]	; 0x24
 80099a0:	2320      	movs	r3, #32
 80099a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80099aa:	2330      	movs	r3, #48	; 0x30
 80099ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009b60 <_vfiprintf_r+0x220>
 80099b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099b4:	f04f 0901 	mov.w	r9, #1
 80099b8:	4623      	mov	r3, r4
 80099ba:	469a      	mov	sl, r3
 80099bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099c0:	b10a      	cbz	r2, 80099c6 <_vfiprintf_r+0x86>
 80099c2:	2a25      	cmp	r2, #37	; 0x25
 80099c4:	d1f9      	bne.n	80099ba <_vfiprintf_r+0x7a>
 80099c6:	ebba 0b04 	subs.w	fp, sl, r4
 80099ca:	d00b      	beq.n	80099e4 <_vfiprintf_r+0xa4>
 80099cc:	465b      	mov	r3, fp
 80099ce:	4622      	mov	r2, r4
 80099d0:	4629      	mov	r1, r5
 80099d2:	4630      	mov	r0, r6
 80099d4:	f7ff ffa1 	bl	800991a <__sfputs_r>
 80099d8:	3001      	adds	r0, #1
 80099da:	f000 80a9 	beq.w	8009b30 <_vfiprintf_r+0x1f0>
 80099de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099e0:	445a      	add	r2, fp
 80099e2:	9209      	str	r2, [sp, #36]	; 0x24
 80099e4:	f89a 3000 	ldrb.w	r3, [sl]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f000 80a1 	beq.w	8009b30 <_vfiprintf_r+0x1f0>
 80099ee:	2300      	movs	r3, #0
 80099f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099f8:	f10a 0a01 	add.w	sl, sl, #1
 80099fc:	9304      	str	r3, [sp, #16]
 80099fe:	9307      	str	r3, [sp, #28]
 8009a00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a04:	931a      	str	r3, [sp, #104]	; 0x68
 8009a06:	4654      	mov	r4, sl
 8009a08:	2205      	movs	r2, #5
 8009a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a0e:	4854      	ldr	r0, [pc, #336]	; (8009b60 <_vfiprintf_r+0x220>)
 8009a10:	f7f6 fbde 	bl	80001d0 <memchr>
 8009a14:	9a04      	ldr	r2, [sp, #16]
 8009a16:	b9d8      	cbnz	r0, 8009a50 <_vfiprintf_r+0x110>
 8009a18:	06d1      	lsls	r1, r2, #27
 8009a1a:	bf44      	itt	mi
 8009a1c:	2320      	movmi	r3, #32
 8009a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a22:	0713      	lsls	r3, r2, #28
 8009a24:	bf44      	itt	mi
 8009a26:	232b      	movmi	r3, #43	; 0x2b
 8009a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a30:	2b2a      	cmp	r3, #42	; 0x2a
 8009a32:	d015      	beq.n	8009a60 <_vfiprintf_r+0x120>
 8009a34:	9a07      	ldr	r2, [sp, #28]
 8009a36:	4654      	mov	r4, sl
 8009a38:	2000      	movs	r0, #0
 8009a3a:	f04f 0c0a 	mov.w	ip, #10
 8009a3e:	4621      	mov	r1, r4
 8009a40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a44:	3b30      	subs	r3, #48	; 0x30
 8009a46:	2b09      	cmp	r3, #9
 8009a48:	d94d      	bls.n	8009ae6 <_vfiprintf_r+0x1a6>
 8009a4a:	b1b0      	cbz	r0, 8009a7a <_vfiprintf_r+0x13a>
 8009a4c:	9207      	str	r2, [sp, #28]
 8009a4e:	e014      	b.n	8009a7a <_vfiprintf_r+0x13a>
 8009a50:	eba0 0308 	sub.w	r3, r0, r8
 8009a54:	fa09 f303 	lsl.w	r3, r9, r3
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	9304      	str	r3, [sp, #16]
 8009a5c:	46a2      	mov	sl, r4
 8009a5e:	e7d2      	b.n	8009a06 <_vfiprintf_r+0xc6>
 8009a60:	9b03      	ldr	r3, [sp, #12]
 8009a62:	1d19      	adds	r1, r3, #4
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	9103      	str	r1, [sp, #12]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	bfbb      	ittet	lt
 8009a6c:	425b      	neglt	r3, r3
 8009a6e:	f042 0202 	orrlt.w	r2, r2, #2
 8009a72:	9307      	strge	r3, [sp, #28]
 8009a74:	9307      	strlt	r3, [sp, #28]
 8009a76:	bfb8      	it	lt
 8009a78:	9204      	strlt	r2, [sp, #16]
 8009a7a:	7823      	ldrb	r3, [r4, #0]
 8009a7c:	2b2e      	cmp	r3, #46	; 0x2e
 8009a7e:	d10c      	bne.n	8009a9a <_vfiprintf_r+0x15a>
 8009a80:	7863      	ldrb	r3, [r4, #1]
 8009a82:	2b2a      	cmp	r3, #42	; 0x2a
 8009a84:	d134      	bne.n	8009af0 <_vfiprintf_r+0x1b0>
 8009a86:	9b03      	ldr	r3, [sp, #12]
 8009a88:	1d1a      	adds	r2, r3, #4
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	9203      	str	r2, [sp, #12]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	bfb8      	it	lt
 8009a92:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009a96:	3402      	adds	r4, #2
 8009a98:	9305      	str	r3, [sp, #20]
 8009a9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009b70 <_vfiprintf_r+0x230>
 8009a9e:	7821      	ldrb	r1, [r4, #0]
 8009aa0:	2203      	movs	r2, #3
 8009aa2:	4650      	mov	r0, sl
 8009aa4:	f7f6 fb94 	bl	80001d0 <memchr>
 8009aa8:	b138      	cbz	r0, 8009aba <_vfiprintf_r+0x17a>
 8009aaa:	9b04      	ldr	r3, [sp, #16]
 8009aac:	eba0 000a 	sub.w	r0, r0, sl
 8009ab0:	2240      	movs	r2, #64	; 0x40
 8009ab2:	4082      	lsls	r2, r0
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	3401      	adds	r4, #1
 8009ab8:	9304      	str	r3, [sp, #16]
 8009aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009abe:	4829      	ldr	r0, [pc, #164]	; (8009b64 <_vfiprintf_r+0x224>)
 8009ac0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ac4:	2206      	movs	r2, #6
 8009ac6:	f7f6 fb83 	bl	80001d0 <memchr>
 8009aca:	2800      	cmp	r0, #0
 8009acc:	d03f      	beq.n	8009b4e <_vfiprintf_r+0x20e>
 8009ace:	4b26      	ldr	r3, [pc, #152]	; (8009b68 <_vfiprintf_r+0x228>)
 8009ad0:	bb1b      	cbnz	r3, 8009b1a <_vfiprintf_r+0x1da>
 8009ad2:	9b03      	ldr	r3, [sp, #12]
 8009ad4:	3307      	adds	r3, #7
 8009ad6:	f023 0307 	bic.w	r3, r3, #7
 8009ada:	3308      	adds	r3, #8
 8009adc:	9303      	str	r3, [sp, #12]
 8009ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ae0:	443b      	add	r3, r7
 8009ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ae4:	e768      	b.n	80099b8 <_vfiprintf_r+0x78>
 8009ae6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009aea:	460c      	mov	r4, r1
 8009aec:	2001      	movs	r0, #1
 8009aee:	e7a6      	b.n	8009a3e <_vfiprintf_r+0xfe>
 8009af0:	2300      	movs	r3, #0
 8009af2:	3401      	adds	r4, #1
 8009af4:	9305      	str	r3, [sp, #20]
 8009af6:	4619      	mov	r1, r3
 8009af8:	f04f 0c0a 	mov.w	ip, #10
 8009afc:	4620      	mov	r0, r4
 8009afe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b02:	3a30      	subs	r2, #48	; 0x30
 8009b04:	2a09      	cmp	r2, #9
 8009b06:	d903      	bls.n	8009b10 <_vfiprintf_r+0x1d0>
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d0c6      	beq.n	8009a9a <_vfiprintf_r+0x15a>
 8009b0c:	9105      	str	r1, [sp, #20]
 8009b0e:	e7c4      	b.n	8009a9a <_vfiprintf_r+0x15a>
 8009b10:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b14:	4604      	mov	r4, r0
 8009b16:	2301      	movs	r3, #1
 8009b18:	e7f0      	b.n	8009afc <_vfiprintf_r+0x1bc>
 8009b1a:	ab03      	add	r3, sp, #12
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	462a      	mov	r2, r5
 8009b20:	4b12      	ldr	r3, [pc, #72]	; (8009b6c <_vfiprintf_r+0x22c>)
 8009b22:	a904      	add	r1, sp, #16
 8009b24:	4630      	mov	r0, r6
 8009b26:	f3af 8000 	nop.w
 8009b2a:	4607      	mov	r7, r0
 8009b2c:	1c78      	adds	r0, r7, #1
 8009b2e:	d1d6      	bne.n	8009ade <_vfiprintf_r+0x19e>
 8009b30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b32:	07d9      	lsls	r1, r3, #31
 8009b34:	d405      	bmi.n	8009b42 <_vfiprintf_r+0x202>
 8009b36:	89ab      	ldrh	r3, [r5, #12]
 8009b38:	059a      	lsls	r2, r3, #22
 8009b3a:	d402      	bmi.n	8009b42 <_vfiprintf_r+0x202>
 8009b3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b3e:	f7ff fddc 	bl	80096fa <__retarget_lock_release_recursive>
 8009b42:	89ab      	ldrh	r3, [r5, #12]
 8009b44:	065b      	lsls	r3, r3, #25
 8009b46:	f53f af1d 	bmi.w	8009984 <_vfiprintf_r+0x44>
 8009b4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b4c:	e71c      	b.n	8009988 <_vfiprintf_r+0x48>
 8009b4e:	ab03      	add	r3, sp, #12
 8009b50:	9300      	str	r3, [sp, #0]
 8009b52:	462a      	mov	r2, r5
 8009b54:	4b05      	ldr	r3, [pc, #20]	; (8009b6c <_vfiprintf_r+0x22c>)
 8009b56:	a904      	add	r1, sp, #16
 8009b58:	4630      	mov	r0, r6
 8009b5a:	f000 f879 	bl	8009c50 <_printf_i>
 8009b5e:	e7e4      	b.n	8009b2a <_vfiprintf_r+0x1ea>
 8009b60:	0800a2fc 	.word	0x0800a2fc
 8009b64:	0800a306 	.word	0x0800a306
 8009b68:	00000000 	.word	0x00000000
 8009b6c:	0800991b 	.word	0x0800991b
 8009b70:	0800a302 	.word	0x0800a302

08009b74 <_printf_common>:
 8009b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b78:	4616      	mov	r6, r2
 8009b7a:	4699      	mov	r9, r3
 8009b7c:	688a      	ldr	r2, [r1, #8]
 8009b7e:	690b      	ldr	r3, [r1, #16]
 8009b80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b84:	4293      	cmp	r3, r2
 8009b86:	bfb8      	it	lt
 8009b88:	4613      	movlt	r3, r2
 8009b8a:	6033      	str	r3, [r6, #0]
 8009b8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b90:	4607      	mov	r7, r0
 8009b92:	460c      	mov	r4, r1
 8009b94:	b10a      	cbz	r2, 8009b9a <_printf_common+0x26>
 8009b96:	3301      	adds	r3, #1
 8009b98:	6033      	str	r3, [r6, #0]
 8009b9a:	6823      	ldr	r3, [r4, #0]
 8009b9c:	0699      	lsls	r1, r3, #26
 8009b9e:	bf42      	ittt	mi
 8009ba0:	6833      	ldrmi	r3, [r6, #0]
 8009ba2:	3302      	addmi	r3, #2
 8009ba4:	6033      	strmi	r3, [r6, #0]
 8009ba6:	6825      	ldr	r5, [r4, #0]
 8009ba8:	f015 0506 	ands.w	r5, r5, #6
 8009bac:	d106      	bne.n	8009bbc <_printf_common+0x48>
 8009bae:	f104 0a19 	add.w	sl, r4, #25
 8009bb2:	68e3      	ldr	r3, [r4, #12]
 8009bb4:	6832      	ldr	r2, [r6, #0]
 8009bb6:	1a9b      	subs	r3, r3, r2
 8009bb8:	42ab      	cmp	r3, r5
 8009bba:	dc26      	bgt.n	8009c0a <_printf_common+0x96>
 8009bbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bc0:	1e13      	subs	r3, r2, #0
 8009bc2:	6822      	ldr	r2, [r4, #0]
 8009bc4:	bf18      	it	ne
 8009bc6:	2301      	movne	r3, #1
 8009bc8:	0692      	lsls	r2, r2, #26
 8009bca:	d42b      	bmi.n	8009c24 <_printf_common+0xb0>
 8009bcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bd0:	4649      	mov	r1, r9
 8009bd2:	4638      	mov	r0, r7
 8009bd4:	47c0      	blx	r8
 8009bd6:	3001      	adds	r0, #1
 8009bd8:	d01e      	beq.n	8009c18 <_printf_common+0xa4>
 8009bda:	6823      	ldr	r3, [r4, #0]
 8009bdc:	6922      	ldr	r2, [r4, #16]
 8009bde:	f003 0306 	and.w	r3, r3, #6
 8009be2:	2b04      	cmp	r3, #4
 8009be4:	bf02      	ittt	eq
 8009be6:	68e5      	ldreq	r5, [r4, #12]
 8009be8:	6833      	ldreq	r3, [r6, #0]
 8009bea:	1aed      	subeq	r5, r5, r3
 8009bec:	68a3      	ldr	r3, [r4, #8]
 8009bee:	bf0c      	ite	eq
 8009bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bf4:	2500      	movne	r5, #0
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	bfc4      	itt	gt
 8009bfa:	1a9b      	subgt	r3, r3, r2
 8009bfc:	18ed      	addgt	r5, r5, r3
 8009bfe:	2600      	movs	r6, #0
 8009c00:	341a      	adds	r4, #26
 8009c02:	42b5      	cmp	r5, r6
 8009c04:	d11a      	bne.n	8009c3c <_printf_common+0xc8>
 8009c06:	2000      	movs	r0, #0
 8009c08:	e008      	b.n	8009c1c <_printf_common+0xa8>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	4652      	mov	r2, sl
 8009c0e:	4649      	mov	r1, r9
 8009c10:	4638      	mov	r0, r7
 8009c12:	47c0      	blx	r8
 8009c14:	3001      	adds	r0, #1
 8009c16:	d103      	bne.n	8009c20 <_printf_common+0xac>
 8009c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c20:	3501      	adds	r5, #1
 8009c22:	e7c6      	b.n	8009bb2 <_printf_common+0x3e>
 8009c24:	18e1      	adds	r1, r4, r3
 8009c26:	1c5a      	adds	r2, r3, #1
 8009c28:	2030      	movs	r0, #48	; 0x30
 8009c2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c2e:	4422      	add	r2, r4
 8009c30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c38:	3302      	adds	r3, #2
 8009c3a:	e7c7      	b.n	8009bcc <_printf_common+0x58>
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	4622      	mov	r2, r4
 8009c40:	4649      	mov	r1, r9
 8009c42:	4638      	mov	r0, r7
 8009c44:	47c0      	blx	r8
 8009c46:	3001      	adds	r0, #1
 8009c48:	d0e6      	beq.n	8009c18 <_printf_common+0xa4>
 8009c4a:	3601      	adds	r6, #1
 8009c4c:	e7d9      	b.n	8009c02 <_printf_common+0x8e>
	...

08009c50 <_printf_i>:
 8009c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c54:	7e0f      	ldrb	r7, [r1, #24]
 8009c56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c58:	2f78      	cmp	r7, #120	; 0x78
 8009c5a:	4691      	mov	r9, r2
 8009c5c:	4680      	mov	r8, r0
 8009c5e:	460c      	mov	r4, r1
 8009c60:	469a      	mov	sl, r3
 8009c62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c66:	d807      	bhi.n	8009c78 <_printf_i+0x28>
 8009c68:	2f62      	cmp	r7, #98	; 0x62
 8009c6a:	d80a      	bhi.n	8009c82 <_printf_i+0x32>
 8009c6c:	2f00      	cmp	r7, #0
 8009c6e:	f000 80d4 	beq.w	8009e1a <_printf_i+0x1ca>
 8009c72:	2f58      	cmp	r7, #88	; 0x58
 8009c74:	f000 80c0 	beq.w	8009df8 <_printf_i+0x1a8>
 8009c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c80:	e03a      	b.n	8009cf8 <_printf_i+0xa8>
 8009c82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c86:	2b15      	cmp	r3, #21
 8009c88:	d8f6      	bhi.n	8009c78 <_printf_i+0x28>
 8009c8a:	a101      	add	r1, pc, #4	; (adr r1, 8009c90 <_printf_i+0x40>)
 8009c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c90:	08009ce9 	.word	0x08009ce9
 8009c94:	08009cfd 	.word	0x08009cfd
 8009c98:	08009c79 	.word	0x08009c79
 8009c9c:	08009c79 	.word	0x08009c79
 8009ca0:	08009c79 	.word	0x08009c79
 8009ca4:	08009c79 	.word	0x08009c79
 8009ca8:	08009cfd 	.word	0x08009cfd
 8009cac:	08009c79 	.word	0x08009c79
 8009cb0:	08009c79 	.word	0x08009c79
 8009cb4:	08009c79 	.word	0x08009c79
 8009cb8:	08009c79 	.word	0x08009c79
 8009cbc:	08009e01 	.word	0x08009e01
 8009cc0:	08009d29 	.word	0x08009d29
 8009cc4:	08009dbb 	.word	0x08009dbb
 8009cc8:	08009c79 	.word	0x08009c79
 8009ccc:	08009c79 	.word	0x08009c79
 8009cd0:	08009e23 	.word	0x08009e23
 8009cd4:	08009c79 	.word	0x08009c79
 8009cd8:	08009d29 	.word	0x08009d29
 8009cdc:	08009c79 	.word	0x08009c79
 8009ce0:	08009c79 	.word	0x08009c79
 8009ce4:	08009dc3 	.word	0x08009dc3
 8009ce8:	682b      	ldr	r3, [r5, #0]
 8009cea:	1d1a      	adds	r2, r3, #4
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	602a      	str	r2, [r5, #0]
 8009cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e09f      	b.n	8009e3c <_printf_i+0x1ec>
 8009cfc:	6820      	ldr	r0, [r4, #0]
 8009cfe:	682b      	ldr	r3, [r5, #0]
 8009d00:	0607      	lsls	r7, r0, #24
 8009d02:	f103 0104 	add.w	r1, r3, #4
 8009d06:	6029      	str	r1, [r5, #0]
 8009d08:	d501      	bpl.n	8009d0e <_printf_i+0xbe>
 8009d0a:	681e      	ldr	r6, [r3, #0]
 8009d0c:	e003      	b.n	8009d16 <_printf_i+0xc6>
 8009d0e:	0646      	lsls	r6, r0, #25
 8009d10:	d5fb      	bpl.n	8009d0a <_printf_i+0xba>
 8009d12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009d16:	2e00      	cmp	r6, #0
 8009d18:	da03      	bge.n	8009d22 <_printf_i+0xd2>
 8009d1a:	232d      	movs	r3, #45	; 0x2d
 8009d1c:	4276      	negs	r6, r6
 8009d1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d22:	485a      	ldr	r0, [pc, #360]	; (8009e8c <_printf_i+0x23c>)
 8009d24:	230a      	movs	r3, #10
 8009d26:	e012      	b.n	8009d4e <_printf_i+0xfe>
 8009d28:	682b      	ldr	r3, [r5, #0]
 8009d2a:	6820      	ldr	r0, [r4, #0]
 8009d2c:	1d19      	adds	r1, r3, #4
 8009d2e:	6029      	str	r1, [r5, #0]
 8009d30:	0605      	lsls	r5, r0, #24
 8009d32:	d501      	bpl.n	8009d38 <_printf_i+0xe8>
 8009d34:	681e      	ldr	r6, [r3, #0]
 8009d36:	e002      	b.n	8009d3e <_printf_i+0xee>
 8009d38:	0641      	lsls	r1, r0, #25
 8009d3a:	d5fb      	bpl.n	8009d34 <_printf_i+0xe4>
 8009d3c:	881e      	ldrh	r6, [r3, #0]
 8009d3e:	4853      	ldr	r0, [pc, #332]	; (8009e8c <_printf_i+0x23c>)
 8009d40:	2f6f      	cmp	r7, #111	; 0x6f
 8009d42:	bf0c      	ite	eq
 8009d44:	2308      	moveq	r3, #8
 8009d46:	230a      	movne	r3, #10
 8009d48:	2100      	movs	r1, #0
 8009d4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d4e:	6865      	ldr	r5, [r4, #4]
 8009d50:	60a5      	str	r5, [r4, #8]
 8009d52:	2d00      	cmp	r5, #0
 8009d54:	bfa2      	ittt	ge
 8009d56:	6821      	ldrge	r1, [r4, #0]
 8009d58:	f021 0104 	bicge.w	r1, r1, #4
 8009d5c:	6021      	strge	r1, [r4, #0]
 8009d5e:	b90e      	cbnz	r6, 8009d64 <_printf_i+0x114>
 8009d60:	2d00      	cmp	r5, #0
 8009d62:	d04b      	beq.n	8009dfc <_printf_i+0x1ac>
 8009d64:	4615      	mov	r5, r2
 8009d66:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d6a:	fb03 6711 	mls	r7, r3, r1, r6
 8009d6e:	5dc7      	ldrb	r7, [r0, r7]
 8009d70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d74:	4637      	mov	r7, r6
 8009d76:	42bb      	cmp	r3, r7
 8009d78:	460e      	mov	r6, r1
 8009d7a:	d9f4      	bls.n	8009d66 <_printf_i+0x116>
 8009d7c:	2b08      	cmp	r3, #8
 8009d7e:	d10b      	bne.n	8009d98 <_printf_i+0x148>
 8009d80:	6823      	ldr	r3, [r4, #0]
 8009d82:	07de      	lsls	r6, r3, #31
 8009d84:	d508      	bpl.n	8009d98 <_printf_i+0x148>
 8009d86:	6923      	ldr	r3, [r4, #16]
 8009d88:	6861      	ldr	r1, [r4, #4]
 8009d8a:	4299      	cmp	r1, r3
 8009d8c:	bfde      	ittt	le
 8009d8e:	2330      	movle	r3, #48	; 0x30
 8009d90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d94:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009d98:	1b52      	subs	r2, r2, r5
 8009d9a:	6122      	str	r2, [r4, #16]
 8009d9c:	f8cd a000 	str.w	sl, [sp]
 8009da0:	464b      	mov	r3, r9
 8009da2:	aa03      	add	r2, sp, #12
 8009da4:	4621      	mov	r1, r4
 8009da6:	4640      	mov	r0, r8
 8009da8:	f7ff fee4 	bl	8009b74 <_printf_common>
 8009dac:	3001      	adds	r0, #1
 8009dae:	d14a      	bne.n	8009e46 <_printf_i+0x1f6>
 8009db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009db4:	b004      	add	sp, #16
 8009db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	f043 0320 	orr.w	r3, r3, #32
 8009dc0:	6023      	str	r3, [r4, #0]
 8009dc2:	4833      	ldr	r0, [pc, #204]	; (8009e90 <_printf_i+0x240>)
 8009dc4:	2778      	movs	r7, #120	; 0x78
 8009dc6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	6829      	ldr	r1, [r5, #0]
 8009dce:	061f      	lsls	r7, r3, #24
 8009dd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8009dd4:	d402      	bmi.n	8009ddc <_printf_i+0x18c>
 8009dd6:	065f      	lsls	r7, r3, #25
 8009dd8:	bf48      	it	mi
 8009dda:	b2b6      	uxthmi	r6, r6
 8009ddc:	07df      	lsls	r7, r3, #31
 8009dde:	bf48      	it	mi
 8009de0:	f043 0320 	orrmi.w	r3, r3, #32
 8009de4:	6029      	str	r1, [r5, #0]
 8009de6:	bf48      	it	mi
 8009de8:	6023      	strmi	r3, [r4, #0]
 8009dea:	b91e      	cbnz	r6, 8009df4 <_printf_i+0x1a4>
 8009dec:	6823      	ldr	r3, [r4, #0]
 8009dee:	f023 0320 	bic.w	r3, r3, #32
 8009df2:	6023      	str	r3, [r4, #0]
 8009df4:	2310      	movs	r3, #16
 8009df6:	e7a7      	b.n	8009d48 <_printf_i+0xf8>
 8009df8:	4824      	ldr	r0, [pc, #144]	; (8009e8c <_printf_i+0x23c>)
 8009dfa:	e7e4      	b.n	8009dc6 <_printf_i+0x176>
 8009dfc:	4615      	mov	r5, r2
 8009dfe:	e7bd      	b.n	8009d7c <_printf_i+0x12c>
 8009e00:	682b      	ldr	r3, [r5, #0]
 8009e02:	6826      	ldr	r6, [r4, #0]
 8009e04:	6961      	ldr	r1, [r4, #20]
 8009e06:	1d18      	adds	r0, r3, #4
 8009e08:	6028      	str	r0, [r5, #0]
 8009e0a:	0635      	lsls	r5, r6, #24
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	d501      	bpl.n	8009e14 <_printf_i+0x1c4>
 8009e10:	6019      	str	r1, [r3, #0]
 8009e12:	e002      	b.n	8009e1a <_printf_i+0x1ca>
 8009e14:	0670      	lsls	r0, r6, #25
 8009e16:	d5fb      	bpl.n	8009e10 <_printf_i+0x1c0>
 8009e18:	8019      	strh	r1, [r3, #0]
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	6123      	str	r3, [r4, #16]
 8009e1e:	4615      	mov	r5, r2
 8009e20:	e7bc      	b.n	8009d9c <_printf_i+0x14c>
 8009e22:	682b      	ldr	r3, [r5, #0]
 8009e24:	1d1a      	adds	r2, r3, #4
 8009e26:	602a      	str	r2, [r5, #0]
 8009e28:	681d      	ldr	r5, [r3, #0]
 8009e2a:	6862      	ldr	r2, [r4, #4]
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	4628      	mov	r0, r5
 8009e30:	f7f6 f9ce 	bl	80001d0 <memchr>
 8009e34:	b108      	cbz	r0, 8009e3a <_printf_i+0x1ea>
 8009e36:	1b40      	subs	r0, r0, r5
 8009e38:	6060      	str	r0, [r4, #4]
 8009e3a:	6863      	ldr	r3, [r4, #4]
 8009e3c:	6123      	str	r3, [r4, #16]
 8009e3e:	2300      	movs	r3, #0
 8009e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e44:	e7aa      	b.n	8009d9c <_printf_i+0x14c>
 8009e46:	6923      	ldr	r3, [r4, #16]
 8009e48:	462a      	mov	r2, r5
 8009e4a:	4649      	mov	r1, r9
 8009e4c:	4640      	mov	r0, r8
 8009e4e:	47d0      	blx	sl
 8009e50:	3001      	adds	r0, #1
 8009e52:	d0ad      	beq.n	8009db0 <_printf_i+0x160>
 8009e54:	6823      	ldr	r3, [r4, #0]
 8009e56:	079b      	lsls	r3, r3, #30
 8009e58:	d413      	bmi.n	8009e82 <_printf_i+0x232>
 8009e5a:	68e0      	ldr	r0, [r4, #12]
 8009e5c:	9b03      	ldr	r3, [sp, #12]
 8009e5e:	4298      	cmp	r0, r3
 8009e60:	bfb8      	it	lt
 8009e62:	4618      	movlt	r0, r3
 8009e64:	e7a6      	b.n	8009db4 <_printf_i+0x164>
 8009e66:	2301      	movs	r3, #1
 8009e68:	4632      	mov	r2, r6
 8009e6a:	4649      	mov	r1, r9
 8009e6c:	4640      	mov	r0, r8
 8009e6e:	47d0      	blx	sl
 8009e70:	3001      	adds	r0, #1
 8009e72:	d09d      	beq.n	8009db0 <_printf_i+0x160>
 8009e74:	3501      	adds	r5, #1
 8009e76:	68e3      	ldr	r3, [r4, #12]
 8009e78:	9903      	ldr	r1, [sp, #12]
 8009e7a:	1a5b      	subs	r3, r3, r1
 8009e7c:	42ab      	cmp	r3, r5
 8009e7e:	dcf2      	bgt.n	8009e66 <_printf_i+0x216>
 8009e80:	e7eb      	b.n	8009e5a <_printf_i+0x20a>
 8009e82:	2500      	movs	r5, #0
 8009e84:	f104 0619 	add.w	r6, r4, #25
 8009e88:	e7f5      	b.n	8009e76 <_printf_i+0x226>
 8009e8a:	bf00      	nop
 8009e8c:	0800a30d 	.word	0x0800a30d
 8009e90:	0800a31e 	.word	0x0800a31e

08009e94 <__sflush_r>:
 8009e94:	898a      	ldrh	r2, [r1, #12]
 8009e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e9a:	4605      	mov	r5, r0
 8009e9c:	0710      	lsls	r0, r2, #28
 8009e9e:	460c      	mov	r4, r1
 8009ea0:	d458      	bmi.n	8009f54 <__sflush_r+0xc0>
 8009ea2:	684b      	ldr	r3, [r1, #4]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	dc05      	bgt.n	8009eb4 <__sflush_r+0x20>
 8009ea8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	dc02      	bgt.n	8009eb4 <__sflush_r+0x20>
 8009eae:	2000      	movs	r0, #0
 8009eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009eb6:	2e00      	cmp	r6, #0
 8009eb8:	d0f9      	beq.n	8009eae <__sflush_r+0x1a>
 8009eba:	2300      	movs	r3, #0
 8009ebc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ec0:	682f      	ldr	r7, [r5, #0]
 8009ec2:	6a21      	ldr	r1, [r4, #32]
 8009ec4:	602b      	str	r3, [r5, #0]
 8009ec6:	d032      	beq.n	8009f2e <__sflush_r+0x9a>
 8009ec8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009eca:	89a3      	ldrh	r3, [r4, #12]
 8009ecc:	075a      	lsls	r2, r3, #29
 8009ece:	d505      	bpl.n	8009edc <__sflush_r+0x48>
 8009ed0:	6863      	ldr	r3, [r4, #4]
 8009ed2:	1ac0      	subs	r0, r0, r3
 8009ed4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ed6:	b10b      	cbz	r3, 8009edc <__sflush_r+0x48>
 8009ed8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009eda:	1ac0      	subs	r0, r0, r3
 8009edc:	2300      	movs	r3, #0
 8009ede:	4602      	mov	r2, r0
 8009ee0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ee2:	6a21      	ldr	r1, [r4, #32]
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	47b0      	blx	r6
 8009ee8:	1c43      	adds	r3, r0, #1
 8009eea:	89a3      	ldrh	r3, [r4, #12]
 8009eec:	d106      	bne.n	8009efc <__sflush_r+0x68>
 8009eee:	6829      	ldr	r1, [r5, #0]
 8009ef0:	291d      	cmp	r1, #29
 8009ef2:	d82b      	bhi.n	8009f4c <__sflush_r+0xb8>
 8009ef4:	4a29      	ldr	r2, [pc, #164]	; (8009f9c <__sflush_r+0x108>)
 8009ef6:	410a      	asrs	r2, r1
 8009ef8:	07d6      	lsls	r6, r2, #31
 8009efa:	d427      	bmi.n	8009f4c <__sflush_r+0xb8>
 8009efc:	2200      	movs	r2, #0
 8009efe:	6062      	str	r2, [r4, #4]
 8009f00:	04d9      	lsls	r1, r3, #19
 8009f02:	6922      	ldr	r2, [r4, #16]
 8009f04:	6022      	str	r2, [r4, #0]
 8009f06:	d504      	bpl.n	8009f12 <__sflush_r+0x7e>
 8009f08:	1c42      	adds	r2, r0, #1
 8009f0a:	d101      	bne.n	8009f10 <__sflush_r+0x7c>
 8009f0c:	682b      	ldr	r3, [r5, #0]
 8009f0e:	b903      	cbnz	r3, 8009f12 <__sflush_r+0x7e>
 8009f10:	6560      	str	r0, [r4, #84]	; 0x54
 8009f12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f14:	602f      	str	r7, [r5, #0]
 8009f16:	2900      	cmp	r1, #0
 8009f18:	d0c9      	beq.n	8009eae <__sflush_r+0x1a>
 8009f1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f1e:	4299      	cmp	r1, r3
 8009f20:	d002      	beq.n	8009f28 <__sflush_r+0x94>
 8009f22:	4628      	mov	r0, r5
 8009f24:	f7ff fbea 	bl	80096fc <_free_r>
 8009f28:	2000      	movs	r0, #0
 8009f2a:	6360      	str	r0, [r4, #52]	; 0x34
 8009f2c:	e7c0      	b.n	8009eb0 <__sflush_r+0x1c>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	4628      	mov	r0, r5
 8009f32:	47b0      	blx	r6
 8009f34:	1c41      	adds	r1, r0, #1
 8009f36:	d1c8      	bne.n	8009eca <__sflush_r+0x36>
 8009f38:	682b      	ldr	r3, [r5, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d0c5      	beq.n	8009eca <__sflush_r+0x36>
 8009f3e:	2b1d      	cmp	r3, #29
 8009f40:	d001      	beq.n	8009f46 <__sflush_r+0xb2>
 8009f42:	2b16      	cmp	r3, #22
 8009f44:	d101      	bne.n	8009f4a <__sflush_r+0xb6>
 8009f46:	602f      	str	r7, [r5, #0]
 8009f48:	e7b1      	b.n	8009eae <__sflush_r+0x1a>
 8009f4a:	89a3      	ldrh	r3, [r4, #12]
 8009f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f50:	81a3      	strh	r3, [r4, #12]
 8009f52:	e7ad      	b.n	8009eb0 <__sflush_r+0x1c>
 8009f54:	690f      	ldr	r7, [r1, #16]
 8009f56:	2f00      	cmp	r7, #0
 8009f58:	d0a9      	beq.n	8009eae <__sflush_r+0x1a>
 8009f5a:	0793      	lsls	r3, r2, #30
 8009f5c:	680e      	ldr	r6, [r1, #0]
 8009f5e:	bf08      	it	eq
 8009f60:	694b      	ldreq	r3, [r1, #20]
 8009f62:	600f      	str	r7, [r1, #0]
 8009f64:	bf18      	it	ne
 8009f66:	2300      	movne	r3, #0
 8009f68:	eba6 0807 	sub.w	r8, r6, r7
 8009f6c:	608b      	str	r3, [r1, #8]
 8009f6e:	f1b8 0f00 	cmp.w	r8, #0
 8009f72:	dd9c      	ble.n	8009eae <__sflush_r+0x1a>
 8009f74:	6a21      	ldr	r1, [r4, #32]
 8009f76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f78:	4643      	mov	r3, r8
 8009f7a:	463a      	mov	r2, r7
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	47b0      	blx	r6
 8009f80:	2800      	cmp	r0, #0
 8009f82:	dc06      	bgt.n	8009f92 <__sflush_r+0xfe>
 8009f84:	89a3      	ldrh	r3, [r4, #12]
 8009f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f8a:	81a3      	strh	r3, [r4, #12]
 8009f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f90:	e78e      	b.n	8009eb0 <__sflush_r+0x1c>
 8009f92:	4407      	add	r7, r0
 8009f94:	eba8 0800 	sub.w	r8, r8, r0
 8009f98:	e7e9      	b.n	8009f6e <__sflush_r+0xda>
 8009f9a:	bf00      	nop
 8009f9c:	dfbffffe 	.word	0xdfbffffe

08009fa0 <_fflush_r>:
 8009fa0:	b538      	push	{r3, r4, r5, lr}
 8009fa2:	690b      	ldr	r3, [r1, #16]
 8009fa4:	4605      	mov	r5, r0
 8009fa6:	460c      	mov	r4, r1
 8009fa8:	b913      	cbnz	r3, 8009fb0 <_fflush_r+0x10>
 8009faa:	2500      	movs	r5, #0
 8009fac:	4628      	mov	r0, r5
 8009fae:	bd38      	pop	{r3, r4, r5, pc}
 8009fb0:	b118      	cbz	r0, 8009fba <_fflush_r+0x1a>
 8009fb2:	6a03      	ldr	r3, [r0, #32]
 8009fb4:	b90b      	cbnz	r3, 8009fba <_fflush_r+0x1a>
 8009fb6:	f7ff fa9b 	bl	80094f0 <__sinit>
 8009fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d0f3      	beq.n	8009faa <_fflush_r+0xa>
 8009fc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009fc4:	07d0      	lsls	r0, r2, #31
 8009fc6:	d404      	bmi.n	8009fd2 <_fflush_r+0x32>
 8009fc8:	0599      	lsls	r1, r3, #22
 8009fca:	d402      	bmi.n	8009fd2 <_fflush_r+0x32>
 8009fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fce:	f7ff fb93 	bl	80096f8 <__retarget_lock_acquire_recursive>
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	4621      	mov	r1, r4
 8009fd6:	f7ff ff5d 	bl	8009e94 <__sflush_r>
 8009fda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fdc:	07da      	lsls	r2, r3, #31
 8009fde:	4605      	mov	r5, r0
 8009fe0:	d4e4      	bmi.n	8009fac <_fflush_r+0xc>
 8009fe2:	89a3      	ldrh	r3, [r4, #12]
 8009fe4:	059b      	lsls	r3, r3, #22
 8009fe6:	d4e1      	bmi.n	8009fac <_fflush_r+0xc>
 8009fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fea:	f7ff fb86 	bl	80096fa <__retarget_lock_release_recursive>
 8009fee:	e7dd      	b.n	8009fac <_fflush_r+0xc>

08009ff0 <__swbuf_r>:
 8009ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff2:	460e      	mov	r6, r1
 8009ff4:	4614      	mov	r4, r2
 8009ff6:	4605      	mov	r5, r0
 8009ff8:	b118      	cbz	r0, 800a002 <__swbuf_r+0x12>
 8009ffa:	6a03      	ldr	r3, [r0, #32]
 8009ffc:	b90b      	cbnz	r3, 800a002 <__swbuf_r+0x12>
 8009ffe:	f7ff fa77 	bl	80094f0 <__sinit>
 800a002:	69a3      	ldr	r3, [r4, #24]
 800a004:	60a3      	str	r3, [r4, #8]
 800a006:	89a3      	ldrh	r3, [r4, #12]
 800a008:	071a      	lsls	r2, r3, #28
 800a00a:	d525      	bpl.n	800a058 <__swbuf_r+0x68>
 800a00c:	6923      	ldr	r3, [r4, #16]
 800a00e:	b31b      	cbz	r3, 800a058 <__swbuf_r+0x68>
 800a010:	6823      	ldr	r3, [r4, #0]
 800a012:	6922      	ldr	r2, [r4, #16]
 800a014:	1a98      	subs	r0, r3, r2
 800a016:	6963      	ldr	r3, [r4, #20]
 800a018:	b2f6      	uxtb	r6, r6
 800a01a:	4283      	cmp	r3, r0
 800a01c:	4637      	mov	r7, r6
 800a01e:	dc04      	bgt.n	800a02a <__swbuf_r+0x3a>
 800a020:	4621      	mov	r1, r4
 800a022:	4628      	mov	r0, r5
 800a024:	f7ff ffbc 	bl	8009fa0 <_fflush_r>
 800a028:	b9e0      	cbnz	r0, 800a064 <__swbuf_r+0x74>
 800a02a:	68a3      	ldr	r3, [r4, #8]
 800a02c:	3b01      	subs	r3, #1
 800a02e:	60a3      	str	r3, [r4, #8]
 800a030:	6823      	ldr	r3, [r4, #0]
 800a032:	1c5a      	adds	r2, r3, #1
 800a034:	6022      	str	r2, [r4, #0]
 800a036:	701e      	strb	r6, [r3, #0]
 800a038:	6962      	ldr	r2, [r4, #20]
 800a03a:	1c43      	adds	r3, r0, #1
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d004      	beq.n	800a04a <__swbuf_r+0x5a>
 800a040:	89a3      	ldrh	r3, [r4, #12]
 800a042:	07db      	lsls	r3, r3, #31
 800a044:	d506      	bpl.n	800a054 <__swbuf_r+0x64>
 800a046:	2e0a      	cmp	r6, #10
 800a048:	d104      	bne.n	800a054 <__swbuf_r+0x64>
 800a04a:	4621      	mov	r1, r4
 800a04c:	4628      	mov	r0, r5
 800a04e:	f7ff ffa7 	bl	8009fa0 <_fflush_r>
 800a052:	b938      	cbnz	r0, 800a064 <__swbuf_r+0x74>
 800a054:	4638      	mov	r0, r7
 800a056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a058:	4621      	mov	r1, r4
 800a05a:	4628      	mov	r0, r5
 800a05c:	f000 f806 	bl	800a06c <__swsetup_r>
 800a060:	2800      	cmp	r0, #0
 800a062:	d0d5      	beq.n	800a010 <__swbuf_r+0x20>
 800a064:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a068:	e7f4      	b.n	800a054 <__swbuf_r+0x64>
	...

0800a06c <__swsetup_r>:
 800a06c:	b538      	push	{r3, r4, r5, lr}
 800a06e:	4b2a      	ldr	r3, [pc, #168]	; (800a118 <__swsetup_r+0xac>)
 800a070:	4605      	mov	r5, r0
 800a072:	6818      	ldr	r0, [r3, #0]
 800a074:	460c      	mov	r4, r1
 800a076:	b118      	cbz	r0, 800a080 <__swsetup_r+0x14>
 800a078:	6a03      	ldr	r3, [r0, #32]
 800a07a:	b90b      	cbnz	r3, 800a080 <__swsetup_r+0x14>
 800a07c:	f7ff fa38 	bl	80094f0 <__sinit>
 800a080:	89a3      	ldrh	r3, [r4, #12]
 800a082:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a086:	0718      	lsls	r0, r3, #28
 800a088:	d422      	bmi.n	800a0d0 <__swsetup_r+0x64>
 800a08a:	06d9      	lsls	r1, r3, #27
 800a08c:	d407      	bmi.n	800a09e <__swsetup_r+0x32>
 800a08e:	2309      	movs	r3, #9
 800a090:	602b      	str	r3, [r5, #0]
 800a092:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a096:	81a3      	strh	r3, [r4, #12]
 800a098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a09c:	e034      	b.n	800a108 <__swsetup_r+0x9c>
 800a09e:	0758      	lsls	r0, r3, #29
 800a0a0:	d512      	bpl.n	800a0c8 <__swsetup_r+0x5c>
 800a0a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0a4:	b141      	cbz	r1, 800a0b8 <__swsetup_r+0x4c>
 800a0a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0aa:	4299      	cmp	r1, r3
 800a0ac:	d002      	beq.n	800a0b4 <__swsetup_r+0x48>
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	f7ff fb24 	bl	80096fc <_free_r>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	6363      	str	r3, [r4, #52]	; 0x34
 800a0b8:	89a3      	ldrh	r3, [r4, #12]
 800a0ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0be:	81a3      	strh	r3, [r4, #12]
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	6063      	str	r3, [r4, #4]
 800a0c4:	6923      	ldr	r3, [r4, #16]
 800a0c6:	6023      	str	r3, [r4, #0]
 800a0c8:	89a3      	ldrh	r3, [r4, #12]
 800a0ca:	f043 0308 	orr.w	r3, r3, #8
 800a0ce:	81a3      	strh	r3, [r4, #12]
 800a0d0:	6923      	ldr	r3, [r4, #16]
 800a0d2:	b94b      	cbnz	r3, 800a0e8 <__swsetup_r+0x7c>
 800a0d4:	89a3      	ldrh	r3, [r4, #12]
 800a0d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0de:	d003      	beq.n	800a0e8 <__swsetup_r+0x7c>
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	f000 f850 	bl	800a188 <__smakebuf_r>
 800a0e8:	89a0      	ldrh	r0, [r4, #12]
 800a0ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0ee:	f010 0301 	ands.w	r3, r0, #1
 800a0f2:	d00a      	beq.n	800a10a <__swsetup_r+0x9e>
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	60a3      	str	r3, [r4, #8]
 800a0f8:	6963      	ldr	r3, [r4, #20]
 800a0fa:	425b      	negs	r3, r3
 800a0fc:	61a3      	str	r3, [r4, #24]
 800a0fe:	6923      	ldr	r3, [r4, #16]
 800a100:	b943      	cbnz	r3, 800a114 <__swsetup_r+0xa8>
 800a102:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a106:	d1c4      	bne.n	800a092 <__swsetup_r+0x26>
 800a108:	bd38      	pop	{r3, r4, r5, pc}
 800a10a:	0781      	lsls	r1, r0, #30
 800a10c:	bf58      	it	pl
 800a10e:	6963      	ldrpl	r3, [r4, #20]
 800a110:	60a3      	str	r3, [r4, #8]
 800a112:	e7f4      	b.n	800a0fe <__swsetup_r+0x92>
 800a114:	2000      	movs	r0, #0
 800a116:	e7f7      	b.n	800a108 <__swsetup_r+0x9c>
 800a118:	20000154 	.word	0x20000154

0800a11c <_sbrk_r>:
 800a11c:	b538      	push	{r3, r4, r5, lr}
 800a11e:	4d06      	ldr	r5, [pc, #24]	; (800a138 <_sbrk_r+0x1c>)
 800a120:	2300      	movs	r3, #0
 800a122:	4604      	mov	r4, r0
 800a124:	4608      	mov	r0, r1
 800a126:	602b      	str	r3, [r5, #0]
 800a128:	f7f7 f8ec 	bl	8001304 <_sbrk>
 800a12c:	1c43      	adds	r3, r0, #1
 800a12e:	d102      	bne.n	800a136 <_sbrk_r+0x1a>
 800a130:	682b      	ldr	r3, [r5, #0]
 800a132:	b103      	cbz	r3, 800a136 <_sbrk_r+0x1a>
 800a134:	6023      	str	r3, [r4, #0]
 800a136:	bd38      	pop	{r3, r4, r5, pc}
 800a138:	20002034 	.word	0x20002034

0800a13c <__swhatbuf_r>:
 800a13c:	b570      	push	{r4, r5, r6, lr}
 800a13e:	460c      	mov	r4, r1
 800a140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a144:	2900      	cmp	r1, #0
 800a146:	b096      	sub	sp, #88	; 0x58
 800a148:	4615      	mov	r5, r2
 800a14a:	461e      	mov	r6, r3
 800a14c:	da0d      	bge.n	800a16a <__swhatbuf_r+0x2e>
 800a14e:	89a3      	ldrh	r3, [r4, #12]
 800a150:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a154:	f04f 0100 	mov.w	r1, #0
 800a158:	bf0c      	ite	eq
 800a15a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a15e:	2340      	movne	r3, #64	; 0x40
 800a160:	2000      	movs	r0, #0
 800a162:	6031      	str	r1, [r6, #0]
 800a164:	602b      	str	r3, [r5, #0]
 800a166:	b016      	add	sp, #88	; 0x58
 800a168:	bd70      	pop	{r4, r5, r6, pc}
 800a16a:	466a      	mov	r2, sp
 800a16c:	f000 f848 	bl	800a200 <_fstat_r>
 800a170:	2800      	cmp	r0, #0
 800a172:	dbec      	blt.n	800a14e <__swhatbuf_r+0x12>
 800a174:	9901      	ldr	r1, [sp, #4]
 800a176:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a17a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a17e:	4259      	negs	r1, r3
 800a180:	4159      	adcs	r1, r3
 800a182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a186:	e7eb      	b.n	800a160 <__swhatbuf_r+0x24>

0800a188 <__smakebuf_r>:
 800a188:	898b      	ldrh	r3, [r1, #12]
 800a18a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a18c:	079d      	lsls	r5, r3, #30
 800a18e:	4606      	mov	r6, r0
 800a190:	460c      	mov	r4, r1
 800a192:	d507      	bpl.n	800a1a4 <__smakebuf_r+0x1c>
 800a194:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a198:	6023      	str	r3, [r4, #0]
 800a19a:	6123      	str	r3, [r4, #16]
 800a19c:	2301      	movs	r3, #1
 800a19e:	6163      	str	r3, [r4, #20]
 800a1a0:	b002      	add	sp, #8
 800a1a2:	bd70      	pop	{r4, r5, r6, pc}
 800a1a4:	ab01      	add	r3, sp, #4
 800a1a6:	466a      	mov	r2, sp
 800a1a8:	f7ff ffc8 	bl	800a13c <__swhatbuf_r>
 800a1ac:	9900      	ldr	r1, [sp, #0]
 800a1ae:	4605      	mov	r5, r0
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	f7ff fb0f 	bl	80097d4 <_malloc_r>
 800a1b6:	b948      	cbnz	r0, 800a1cc <__smakebuf_r+0x44>
 800a1b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1bc:	059a      	lsls	r2, r3, #22
 800a1be:	d4ef      	bmi.n	800a1a0 <__smakebuf_r+0x18>
 800a1c0:	f023 0303 	bic.w	r3, r3, #3
 800a1c4:	f043 0302 	orr.w	r3, r3, #2
 800a1c8:	81a3      	strh	r3, [r4, #12]
 800a1ca:	e7e3      	b.n	800a194 <__smakebuf_r+0xc>
 800a1cc:	89a3      	ldrh	r3, [r4, #12]
 800a1ce:	6020      	str	r0, [r4, #0]
 800a1d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1d4:	81a3      	strh	r3, [r4, #12]
 800a1d6:	9b00      	ldr	r3, [sp, #0]
 800a1d8:	6163      	str	r3, [r4, #20]
 800a1da:	9b01      	ldr	r3, [sp, #4]
 800a1dc:	6120      	str	r0, [r4, #16]
 800a1de:	b15b      	cbz	r3, 800a1f8 <__smakebuf_r+0x70>
 800a1e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	f000 f81d 	bl	800a224 <_isatty_r>
 800a1ea:	b128      	cbz	r0, 800a1f8 <__smakebuf_r+0x70>
 800a1ec:	89a3      	ldrh	r3, [r4, #12]
 800a1ee:	f023 0303 	bic.w	r3, r3, #3
 800a1f2:	f043 0301 	orr.w	r3, r3, #1
 800a1f6:	81a3      	strh	r3, [r4, #12]
 800a1f8:	89a3      	ldrh	r3, [r4, #12]
 800a1fa:	431d      	orrs	r5, r3
 800a1fc:	81a5      	strh	r5, [r4, #12]
 800a1fe:	e7cf      	b.n	800a1a0 <__smakebuf_r+0x18>

0800a200 <_fstat_r>:
 800a200:	b538      	push	{r3, r4, r5, lr}
 800a202:	4d07      	ldr	r5, [pc, #28]	; (800a220 <_fstat_r+0x20>)
 800a204:	2300      	movs	r3, #0
 800a206:	4604      	mov	r4, r0
 800a208:	4608      	mov	r0, r1
 800a20a:	4611      	mov	r1, r2
 800a20c:	602b      	str	r3, [r5, #0]
 800a20e:	f7f7 f850 	bl	80012b2 <_fstat>
 800a212:	1c43      	adds	r3, r0, #1
 800a214:	d102      	bne.n	800a21c <_fstat_r+0x1c>
 800a216:	682b      	ldr	r3, [r5, #0]
 800a218:	b103      	cbz	r3, 800a21c <_fstat_r+0x1c>
 800a21a:	6023      	str	r3, [r4, #0]
 800a21c:	bd38      	pop	{r3, r4, r5, pc}
 800a21e:	bf00      	nop
 800a220:	20002034 	.word	0x20002034

0800a224 <_isatty_r>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	4d06      	ldr	r5, [pc, #24]	; (800a240 <_isatty_r+0x1c>)
 800a228:	2300      	movs	r3, #0
 800a22a:	4604      	mov	r4, r0
 800a22c:	4608      	mov	r0, r1
 800a22e:	602b      	str	r3, [r5, #0]
 800a230:	f7f7 f84f 	bl	80012d2 <_isatty>
 800a234:	1c43      	adds	r3, r0, #1
 800a236:	d102      	bne.n	800a23e <_isatty_r+0x1a>
 800a238:	682b      	ldr	r3, [r5, #0]
 800a23a:	b103      	cbz	r3, 800a23e <_isatty_r+0x1a>
 800a23c:	6023      	str	r3, [r4, #0]
 800a23e:	bd38      	pop	{r3, r4, r5, pc}
 800a240:	20002034 	.word	0x20002034

0800a244 <_init>:
 800a244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a246:	bf00      	nop
 800a248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a24a:	bc08      	pop	{r3}
 800a24c:	469e      	mov	lr, r3
 800a24e:	4770      	bx	lr

0800a250 <_fini>:
 800a250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a252:	bf00      	nop
 800a254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a256:	bc08      	pop	{r3}
 800a258:	469e      	mov	lr, r3
 800a25a:	4770      	bx	lr
