
F4Disc-00k-blinkySystickBasic-callback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008130  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080082b8  080082b8  000182b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008318  08008318  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008318  08008318  00018318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008320  08008320  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008320  08008320  00018320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008324  08008324  00018324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08008328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001d20  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001e1c  20001e1c  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000142d0  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000375c  00000000  00000000  0003443f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011d8  00000000  00000000  00037ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d99  00000000  00000000  00038d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023eda  00000000  00000000  00039b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017605  00000000  00000000  0005d9eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ca16f  00000000  00000000  00074ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000049dc  00000000  00000000  0013f160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  00143b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080082a0 	.word	0x080082a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	080082a0 	.word	0x080082a0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fbda 	bl	8000c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f80c 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f908 	bl	80006e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d4:	f000 f872 	bl	80005bc <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d8:	f000 f89e 	bl	8000618 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004dc:	f000 f8cc 	bl	8000678 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004e0:	f007 f9b0 	bl	8007844 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <main+0x20>
	...

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b094      	sub	sp, #80	; 0x50
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0320 	add.w	r3, r7, #32
 80004f2:	2230      	movs	r2, #48	; 0x30
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f007 fea6 	bl	8008248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	f107 030c 	add.w	r3, r7, #12
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800050c:	2300      	movs	r3, #0
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	4b28      	ldr	r3, [pc, #160]	; (80005b4 <SystemClock_Config+0xcc>)
 8000512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000514:	4a27      	ldr	r2, [pc, #156]	; (80005b4 <SystemClock_Config+0xcc>)
 8000516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051a:	6413      	str	r3, [r2, #64]	; 0x40
 800051c:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <SystemClock_Config+0xcc>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000528:	2300      	movs	r3, #0
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <SystemClock_Config+0xd0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a21      	ldr	r2, [pc, #132]	; (80005b8 <SystemClock_Config+0xd0>)
 8000532:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000536:	6013      	str	r3, [r2, #0]
 8000538:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <SystemClock_Config+0xd0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000544:	2301      	movs	r3, #1
 8000546:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054e:	2302      	movs	r3, #2
 8000550:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000552:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000556:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000558:	2308      	movs	r3, #8
 800055a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800055c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000560:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000562:	2302      	movs	r3, #2
 8000564:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000566:	2307      	movs	r3, #7
 8000568:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	4618      	mov	r0, r3
 8000570:	f002 ff4c 	bl	800340c <HAL_RCC_OscConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800057a:	f000 f9d3 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057e:	230f      	movs	r3, #15
 8000580:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000582:	2302      	movs	r3, #2
 8000584:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800058a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800058e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000594:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	2105      	movs	r1, #5
 800059c:	4618      	mov	r0, r3
 800059e:	f003 f9ad 	bl	80038fc <HAL_RCC_ClockConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005a8:	f000 f9bc 	bl	8000924 <Error_Handler>
  }
}
 80005ac:	bf00      	nop
 80005ae:	3750      	adds	r7, #80	; 0x50
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40007000 	.word	0x40007000

080005bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <MX_I2C1_Init+0x50>)
 80005c2:	4a13      	ldr	r2, [pc, #76]	; (8000610 <MX_I2C1_Init+0x54>)
 80005c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_I2C1_Init+0x50>)
 80005c8:	4a12      	ldr	r2, [pc, #72]	; (8000614 <MX_I2C1_Init+0x58>)
 80005ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_I2C1_Init+0x50>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_I2C1_Init+0x50>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_I2C1_Init+0x50>)
 80005da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <MX_I2C1_Init+0x50>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_I2C1_Init+0x50>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005f8:	4804      	ldr	r0, [pc, #16]	; (800060c <MX_I2C1_Init+0x50>)
 80005fa:	f000 fea5 	bl	8001348 <HAL_I2C_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000604:	f000 f98e 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000118 	.word	0x20000118
 8000610:	40005400 	.word	0x40005400
 8000614:	000186a0 	.word	0x000186a0

08000618 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800061c:	4b13      	ldr	r3, [pc, #76]	; (800066c <MX_I2S3_Init+0x54>)
 800061e:	4a14      	ldr	r2, [pc, #80]	; (8000670 <MX_I2S3_Init+0x58>)
 8000620:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000622:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_I2S3_Init+0x54>)
 8000624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000628:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <MX_I2S3_Init+0x54>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000630:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_I2S3_Init+0x54>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000636:	4b0d      	ldr	r3, [pc, #52]	; (800066c <MX_I2S3_Init+0x54>)
 8000638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800063c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_I2S3_Init+0x54>)
 8000640:	4a0c      	ldr	r2, [pc, #48]	; (8000674 <MX_I2S3_Init+0x5c>)
 8000642:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_I2S3_Init+0x54>)
 8000646:	2200      	movs	r2, #0
 8000648:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_I2S3_Init+0x54>)
 800064c:	2200      	movs	r2, #0
 800064e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_I2S3_Init+0x54>)
 8000652:	2200      	movs	r2, #0
 8000654:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_I2S3_Init+0x54>)
 8000658:	f000 ffba 	bl	80015d0 <HAL_I2S_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000662:	f000 f95f 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	2000016c 	.word	0x2000016c
 8000670:	40003c00 	.word	0x40003c00
 8000674:	00017700 	.word	0x00017700

08000678 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_SPI1_Init+0x64>)
 800067e:	4a18      	ldr	r2, [pc, #96]	; (80006e0 <MX_SPI1_Init+0x68>)
 8000680:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <MX_SPI1_Init+0x64>)
 8000684:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000688:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_SPI1_Init+0x64>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_SPI1_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_SPI1_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_SPI1_Init+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_SPI1_Init+0x64>)
 80006a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_SPI1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_SPI1_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_SPI1_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_SPI1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_SPI1_Init+0x64>)
 80006c4:	220a      	movs	r2, #10
 80006c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_SPI1_Init+0x64>)
 80006ca:	f003 fc63 	bl	8003f94 <HAL_SPI_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006d4:	f000 f926 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200001b4 	.word	0x200001b4
 80006e0:	40013000 	.word	0x40013000

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
 80006fe:	4b72      	ldr	r3, [pc, #456]	; (80008c8 <MX_GPIO_Init+0x1e4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a71      	ldr	r2, [pc, #452]	; (80008c8 <MX_GPIO_Init+0x1e4>)
 8000704:	f043 0310 	orr.w	r3, r3, #16
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b6f      	ldr	r3, [pc, #444]	; (80008c8 <MX_GPIO_Init+0x1e4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0310 	and.w	r3, r3, #16
 8000712:	61bb      	str	r3, [r7, #24]
 8000714:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	4b6b      	ldr	r3, [pc, #428]	; (80008c8 <MX_GPIO_Init+0x1e4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a6a      	ldr	r2, [pc, #424]	; (80008c8 <MX_GPIO_Init+0x1e4>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b68      	ldr	r3, [pc, #416]	; (80008c8 <MX_GPIO_Init+0x1e4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b64      	ldr	r3, [pc, #400]	; (80008c8 <MX_GPIO_Init+0x1e4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a63      	ldr	r2, [pc, #396]	; (80008c8 <MX_GPIO_Init+0x1e4>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b61      	ldr	r3, [pc, #388]	; (80008c8 <MX_GPIO_Init+0x1e4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b5d      	ldr	r3, [pc, #372]	; (80008c8 <MX_GPIO_Init+0x1e4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a5c      	ldr	r2, [pc, #368]	; (80008c8 <MX_GPIO_Init+0x1e4>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b5a      	ldr	r3, [pc, #360]	; (80008c8 <MX_GPIO_Init+0x1e4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b56      	ldr	r3, [pc, #344]	; (80008c8 <MX_GPIO_Init+0x1e4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a55      	ldr	r2, [pc, #340]	; (80008c8 <MX_GPIO_Init+0x1e4>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b53      	ldr	r3, [pc, #332]	; (80008c8 <MX_GPIO_Init+0x1e4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b4f      	ldr	r3, [pc, #316]	; (80008c8 <MX_GPIO_Init+0x1e4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a4e      	ldr	r2, [pc, #312]	; (80008c8 <MX_GPIO_Init+0x1e4>)
 8000790:	f043 0308 	orr.w	r3, r3, #8
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b4c      	ldr	r3, [pc, #304]	; (80008c8 <MX_GPIO_Init+0x1e4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2108      	movs	r1, #8
 80007a6:	4849      	ldr	r0, [pc, #292]	; (80008cc <MX_GPIO_Init+0x1e8>)
 80007a8:	f000 fd9a 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2101      	movs	r1, #1
 80007b0:	4847      	ldr	r0, [pc, #284]	; (80008d0 <MX_GPIO_Init+0x1ec>)
 80007b2:	f000 fd95 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007b6:	2200      	movs	r2, #0
 80007b8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007bc:	4845      	ldr	r0, [pc, #276]	; (80008d4 <MX_GPIO_Init+0x1f0>)
 80007be:	f000 fd8f 	bl	80012e0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007c2:	2308      	movs	r3, #8
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	483c      	ldr	r0, [pc, #240]	; (80008cc <MX_GPIO_Init+0x1e8>)
 80007da:	f000 fbe5 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007de:	2301      	movs	r3, #1
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	4836      	ldr	r0, [pc, #216]	; (80008d0 <MX_GPIO_Init+0x1ec>)
 80007f6:	f000 fbd7 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007fa:	2308      	movs	r3, #8
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800080a:	2305      	movs	r3, #5
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	482e      	ldr	r0, [pc, #184]	; (80008d0 <MX_GPIO_Init+0x1ec>)
 8000816:	f000 fbc7 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800081a:	2301      	movs	r3, #1
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800081e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	482a      	ldr	r0, [pc, #168]	; (80008d8 <MX_GPIO_Init+0x1f4>)
 8000830:	f000 fbba 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000834:	2304      	movs	r3, #4
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	4825      	ldr	r0, [pc, #148]	; (80008dc <MX_GPIO_Init+0x1f8>)
 8000848:	f000 fbae 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800084c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	2302      	movs	r3, #2
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800085e:	2305      	movs	r3, #5
 8000860:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	481c      	ldr	r0, [pc, #112]	; (80008dc <MX_GPIO_Init+0x1f8>)
 800086a:	f000 fb9d 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800086e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000872:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4813      	ldr	r0, [pc, #76]	; (80008d4 <MX_GPIO_Init+0x1f0>)
 8000888:	f000 fb8e 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800088c:	2320      	movs	r3, #32
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	480d      	ldr	r0, [pc, #52]	; (80008d4 <MX_GPIO_Init+0x1f0>)
 80008a0:	f000 fb82 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008a4:	2302      	movs	r3, #2
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008a8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_GPIO_Init+0x1e8>)
 80008ba:	f000 fb75 	bl	8000fa8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008be:	bf00      	nop
 80008c0:	3730      	adds	r7, #48	; 0x30
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40021000 	.word	0x40021000
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40020c00 	.word	0x40020c00
 80008d8:	40020000 	.word	0x40020000
 80008dc:	40020400 	.word	0x40020400

080008e0 <HAL_IncTick>:

/* USER CODE BEGIN 4 */
void HAL_IncTick(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  uwTick ++;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_IncTick+0x38>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	3301      	adds	r3, #1
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <HAL_IncTick+0x38>)
 80008ec:	6013      	str	r3, [r2, #0]
  if((uwTick%2000)==0){
 80008ee:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <HAL_IncTick+0x38>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_IncTick+0x3c>)
 80008f4:	fba3 1302 	umull	r1, r3, r3, r2
 80008f8:	09db      	lsrs	r3, r3, #7
 80008fa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80008fe:	fb01 f303 	mul.w	r3, r1, r3
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	2b00      	cmp	r3, #0
 8000906:	d104      	bne.n	8000912 <HAL_IncTick+0x32>
//	  uwTick%2000 -> 2detik
//	  uwTick%1000 -> 1 detik
//	  uwTick%500  -> 0.5 detik
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000908:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <HAL_IncTick+0x40>)
 800090e:	f000 fd00 	bl	8001312 <HAL_GPIO_TogglePin>
  }
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2000020c 	.word	0x2000020c
 800091c:	10624dd3 	.word	0x10624dd3
 8000920:	40020c00 	.word	0x40020c00

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0x8>
	...

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	4a0f      	ldr	r2, [pc, #60]	; (800097c <HAL_MspInit+0x4c>)
 8000940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000944:	6453      	str	r3, [r2, #68]	; 0x44
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <HAL_MspInit+0x4c>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	4a08      	ldr	r2, [pc, #32]	; (800097c <HAL_MspInit+0x4c>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_MspInit+0x4c>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800096e:	2007      	movs	r0, #7
 8000970:	f000 fad8 	bl	8000f24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800

08000980 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a19      	ldr	r2, [pc, #100]	; (8000a04 <HAL_I2C_MspInit+0x84>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d12c      	bne.n	80009fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <HAL_I2C_MspInit+0x88>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <HAL_I2C_MspInit+0x88>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <HAL_I2C_MspInit+0x88>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009be:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c4:	2312      	movs	r3, #18
 80009c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d0:	2304      	movs	r3, #4
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	480c      	ldr	r0, [pc, #48]	; (8000a0c <HAL_I2C_MspInit+0x8c>)
 80009dc:	f000 fae4 	bl	8000fa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_I2C_MspInit+0x88>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <HAL_I2C_MspInit+0x88>)
 80009ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ee:	6413      	str	r3, [r2, #64]	; 0x40
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <HAL_I2C_MspInit+0x88>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009fc:	bf00      	nop
 80009fe:	3728      	adds	r7, #40	; 0x28
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40005400 	.word	0x40005400
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020400 	.word	0x40020400

08000a10 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08e      	sub	sp, #56	; 0x38
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a31      	ldr	r2, [pc, #196]	; (8000b00 <HAL_I2S_MspInit+0xf0>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d15a      	bne.n	8000af6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a40:	2301      	movs	r3, #1
 8000a42:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a44:	23c0      	movs	r3, #192	; 0xc0
 8000a46:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4618      	mov	r0, r3
 8000a52:	f003 f95f 	bl	8003d14 <HAL_RCCEx_PeriphCLKConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a5c:	f7ff ff62 	bl	8000924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <HAL_I2S_MspInit+0xf4>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	4a26      	ldr	r2, [pc, #152]	; (8000b04 <HAL_I2S_MspInit+0xf4>)
 8000a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a70:	4b24      	ldr	r3, [pc, #144]	; (8000b04 <HAL_I2S_MspInit+0xf4>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <HAL_I2S_MspInit+0xf4>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	4a1f      	ldr	r2, [pc, #124]	; (8000b04 <HAL_I2S_MspInit+0xf4>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <HAL_I2S_MspInit+0xf4>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <HAL_I2S_MspInit+0xf4>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	4a18      	ldr	r2, [pc, #96]	; (8000b04 <HAL_I2S_MspInit+0xf4>)
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <HAL_I2S_MspInit+0xf4>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ab4:	2310      	movs	r3, #16
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ac4:	2306      	movs	r3, #6
 8000ac6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000acc:	4619      	mov	r1, r3
 8000ace:	480e      	ldr	r0, [pc, #56]	; (8000b08 <HAL_I2S_MspInit+0xf8>)
 8000ad0:	f000 fa6a 	bl	8000fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ad4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ae6:	2306      	movs	r3, #6
 8000ae8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	4619      	mov	r1, r3
 8000af0:	4806      	ldr	r0, [pc, #24]	; (8000b0c <HAL_I2S_MspInit+0xfc>)
 8000af2:	f000 fa59 	bl	8000fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000af6:	bf00      	nop
 8000af8:	3738      	adds	r7, #56	; 0x38
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40003c00 	.word	0x40003c00
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40020800 	.word	0x40020800

08000b10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a19      	ldr	r2, [pc, #100]	; (8000b94 <HAL_SPI_MspInit+0x84>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d12b      	bne.n	8000b8a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b40:	6453      	str	r3, [r2, #68]	; 0x44
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b6a:	23e0      	movs	r3, #224	; 0xe0
 8000b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b7a:	2305      	movs	r3, #5
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	; (8000b9c <HAL_SPI_MspInit+0x8c>)
 8000b86:	f000 fa0f 	bl	8000fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b8a:	bf00      	nop
 8000b8c:	3728      	adds	r7, #40	; 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40013000 	.word	0x40013000
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020000 	.word	0x40020000

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <MemManage_Handler+0x4>

08000bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bec:	f7ff fe78 	bl	80008e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //   HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <OTG_FS_IRQHandler+0x10>)
 8000bfa:	f001 fad9 	bl	80021b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200016f0 	.word	0x200016f0

08000c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <SystemInit+0x20>)
 8000c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <SystemInit+0x20>)
 8000c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c30:	480d      	ldr	r0, [pc, #52]	; (8000c68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c32:	490e      	ldr	r1, [pc, #56]	; (8000c6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c34:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c48:	4c0b      	ldr	r4, [pc, #44]	; (8000c78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c56:	f7ff ffd7 	bl	8000c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5a:	f007 fafd 	bl	8008258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5e:	f7ff fc31 	bl	80004c4 <main>
  bx  lr    
 8000c62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c6c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000c70:	08008328 	.word	0x08008328
  ldr r2, =_sbss
 8000c74:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000c78:	20001e1c 	.word	0x20001e1c

08000c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC_IRQHandler>
	...

08000c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <HAL_Init+0x40>)
 8000c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_Init+0x40>)
 8000c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <HAL_Init+0x40>)
 8000ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 f93b 	bl	8000f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f000 f808 	bl	8000cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb4:	f7ff fe3c 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023c00 	.word	0x40023c00

08000cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_InitTick+0x54>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_InitTick+0x58>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f953 	bl	8000f8e <HAL_SYSTICK_Config>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00e      	b.n	8000d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b0f      	cmp	r3, #15
 8000cf6:	d80a      	bhi.n	8000d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d00:	f000 f91b 	bl	8000f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <HAL_InitTick+0x5c>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e000      	b.n	8000d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000004 	.word	0x20000004

08000d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <HAL_GetTick+0x14>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	2000020c 	.word	0x2000020c

08000d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d44:	f7ff ffee 	bl	8000d24 <HAL_GetTick>
 8000d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d54:	d005      	beq.n	8000d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <HAL_Delay+0x44>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4413      	add	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d62:	bf00      	nop
 8000d64:	f7ff ffde 	bl	8000d24 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d8f7      	bhi.n	8000d64 <HAL_Delay+0x28>
  {
  }
}
 8000d74:	bf00      	nop
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008

08000d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da0:	4013      	ands	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db6:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	60d3      	str	r3, [r2, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	f003 0307 	and.w	r3, r3, #7
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	db0b      	blt.n	8000e12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f003 021f 	and.w	r2, r3, #31
 8000e00:	4907      	ldr	r1, [pc, #28]	; (8000e20 <__NVIC_EnableIRQ+0x38>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	095b      	lsrs	r3, r3, #5
 8000e08:	2001      	movs	r0, #1
 8000e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000e100 	.word	0xe000e100

08000e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	db0a      	blt.n	8000e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	490c      	ldr	r1, [pc, #48]	; (8000e70 <__NVIC_SetPriority+0x4c>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	0112      	lsls	r2, r2, #4
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	440b      	add	r3, r1
 8000e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e4c:	e00a      	b.n	8000e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4908      	ldr	r1, [pc, #32]	; (8000e74 <__NVIC_SetPriority+0x50>)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	3b04      	subs	r3, #4
 8000e5c:	0112      	lsls	r2, r2, #4
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	440b      	add	r3, r1
 8000e62:	761a      	strb	r2, [r3, #24]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000e100 	.word	0xe000e100
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	; 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f1c3 0307 	rsb	r3, r3, #7
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	bf28      	it	cs
 8000e96:	2304      	movcs	r3, #4
 8000e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	2b06      	cmp	r3, #6
 8000ea0:	d902      	bls.n	8000ea8 <NVIC_EncodePriority+0x30>
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3b03      	subs	r3, #3
 8000ea6:	e000      	b.n	8000eaa <NVIC_EncodePriority+0x32>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	401a      	ands	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	43d9      	mvns	r1, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	4313      	orrs	r3, r2
         );
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3724      	adds	r7, #36	; 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef0:	d301      	bcc.n	8000ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00f      	b.n	8000f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <SysTick_Config+0x40>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000efe:	210f      	movs	r1, #15
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f04:	f7ff ff8e 	bl	8000e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <SysTick_Config+0x40>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0e:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <SysTick_Config+0x40>)
 8000f10:	2207      	movs	r2, #7
 8000f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	e000e010 	.word	0xe000e010

08000f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff ff29 	bl	8000d84 <__NVIC_SetPriorityGrouping>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b086      	sub	sp, #24
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4603      	mov	r3, r0
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
 8000f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f4c:	f7ff ff3e 	bl	8000dcc <__NVIC_GetPriorityGrouping>
 8000f50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	68b9      	ldr	r1, [r7, #8]
 8000f56:	6978      	ldr	r0, [r7, #20]
 8000f58:	f7ff ff8e 	bl	8000e78 <NVIC_EncodePriority>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f62:	4611      	mov	r1, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff5d 	bl	8000e24 <__NVIC_SetPriority>
}
 8000f6a:	bf00      	nop
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff31 	bl	8000de8 <__NVIC_EnableIRQ>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ffa2 	bl	8000ee0 <SysTick_Config>
 8000f9c:	4603      	mov	r3, r0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
 8000fc2:	e16b      	b.n	800129c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	f040 815a 	bne.w	8001296 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d005      	beq.n	8000ffa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d130      	bne.n	800105c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	2203      	movs	r2, #3
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001030:	2201      	movs	r2, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	091b      	lsrs	r3, r3, #4
 8001046:	f003 0201 	and.w	r2, r3, #1
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b03      	cmp	r3, #3
 8001066:	d017      	beq.n	8001098 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d123      	bne.n	80010ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	08da      	lsrs	r2, r3, #3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3208      	adds	r2, #8
 80010ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	f003 0307 	and.w	r3, r3, #7
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	220f      	movs	r2, #15
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	691a      	ldr	r2, [r3, #16]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	08da      	lsrs	r2, r3, #3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3208      	adds	r2, #8
 80010e6:	69b9      	ldr	r1, [r7, #24]
 80010e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	2203      	movs	r2, #3
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0203 	and.w	r2, r3, #3
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 80b4 	beq.w	8001296 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b60      	ldr	r3, [pc, #384]	; (80012b4 <HAL_GPIO_Init+0x30c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	4a5f      	ldr	r2, [pc, #380]	; (80012b4 <HAL_GPIO_Init+0x30c>)
 8001138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800113c:	6453      	str	r3, [r2, #68]	; 0x44
 800113e:	4b5d      	ldr	r3, [pc, #372]	; (80012b4 <HAL_GPIO_Init+0x30c>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800114a:	4a5b      	ldr	r2, [pc, #364]	; (80012b8 <HAL_GPIO_Init+0x310>)
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	3302      	adds	r3, #2
 8001152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	220f      	movs	r2, #15
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a52      	ldr	r2, [pc, #328]	; (80012bc <HAL_GPIO_Init+0x314>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d02b      	beq.n	80011ce <HAL_GPIO_Init+0x226>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a51      	ldr	r2, [pc, #324]	; (80012c0 <HAL_GPIO_Init+0x318>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d025      	beq.n	80011ca <HAL_GPIO_Init+0x222>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a50      	ldr	r2, [pc, #320]	; (80012c4 <HAL_GPIO_Init+0x31c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d01f      	beq.n	80011c6 <HAL_GPIO_Init+0x21e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4f      	ldr	r2, [pc, #316]	; (80012c8 <HAL_GPIO_Init+0x320>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d019      	beq.n	80011c2 <HAL_GPIO_Init+0x21a>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4e      	ldr	r2, [pc, #312]	; (80012cc <HAL_GPIO_Init+0x324>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d013      	beq.n	80011be <HAL_GPIO_Init+0x216>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4d      	ldr	r2, [pc, #308]	; (80012d0 <HAL_GPIO_Init+0x328>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d00d      	beq.n	80011ba <HAL_GPIO_Init+0x212>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4c      	ldr	r2, [pc, #304]	; (80012d4 <HAL_GPIO_Init+0x32c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d007      	beq.n	80011b6 <HAL_GPIO_Init+0x20e>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4b      	ldr	r2, [pc, #300]	; (80012d8 <HAL_GPIO_Init+0x330>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d101      	bne.n	80011b2 <HAL_GPIO_Init+0x20a>
 80011ae:	2307      	movs	r3, #7
 80011b0:	e00e      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011b2:	2308      	movs	r3, #8
 80011b4:	e00c      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011b6:	2306      	movs	r3, #6
 80011b8:	e00a      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011ba:	2305      	movs	r3, #5
 80011bc:	e008      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011be:	2304      	movs	r3, #4
 80011c0:	e006      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011c2:	2303      	movs	r3, #3
 80011c4:	e004      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011c6:	2302      	movs	r3, #2
 80011c8:	e002      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011ca:	2301      	movs	r3, #1
 80011cc:	e000      	b.n	80011d0 <HAL_GPIO_Init+0x228>
 80011ce:	2300      	movs	r3, #0
 80011d0:	69fa      	ldr	r2, [r7, #28]
 80011d2:	f002 0203 	and.w	r2, r2, #3
 80011d6:	0092      	lsls	r2, r2, #2
 80011d8:	4093      	lsls	r3, r2
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e0:	4935      	ldr	r1, [pc, #212]	; (80012b8 <HAL_GPIO_Init+0x310>)
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	3302      	adds	r3, #2
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ee:	4b3b      	ldr	r3, [pc, #236]	; (80012dc <HAL_GPIO_Init+0x334>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001212:	4a32      	ldr	r2, [pc, #200]	; (80012dc <HAL_GPIO_Init+0x334>)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001218:	4b30      	ldr	r3, [pc, #192]	; (80012dc <HAL_GPIO_Init+0x334>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800123c:	4a27      	ldr	r2, [pc, #156]	; (80012dc <HAL_GPIO_Init+0x334>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <HAL_GPIO_Init+0x334>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001266:	4a1d      	ldr	r2, [pc, #116]	; (80012dc <HAL_GPIO_Init+0x334>)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <HAL_GPIO_Init+0x334>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001290:	4a12      	ldr	r2, [pc, #72]	; (80012dc <HAL_GPIO_Init+0x334>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3301      	adds	r3, #1
 800129a:	61fb      	str	r3, [r7, #28]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	2b0f      	cmp	r3, #15
 80012a0:	f67f ae90 	bls.w	8000fc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	3724      	adds	r7, #36	; 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40013800 	.word	0x40013800
 80012bc:	40020000 	.word	0x40020000
 80012c0:	40020400 	.word	0x40020400
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40020c00 	.word	0x40020c00
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40021400 	.word	0x40021400
 80012d4:	40021800 	.word	0x40021800
 80012d8:	40021c00 	.word	0x40021c00
 80012dc:	40013c00 	.word	0x40013c00

080012e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
 80012ec:	4613      	mov	r3, r2
 80012ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f0:	787b      	ldrb	r3, [r7, #1]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f6:	887a      	ldrh	r2, [r7, #2]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012fc:	e003      	b.n	8001306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012fe:	887b      	ldrh	r3, [r7, #2]
 8001300:	041a      	lsls	r2, r3, #16
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	619a      	str	r2, [r3, #24]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001312:	b480      	push	{r7}
 8001314:	b085      	sub	sp, #20
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	460b      	mov	r3, r1
 800131c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001324:	887a      	ldrh	r2, [r7, #2]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4013      	ands	r3, r2
 800132a:	041a      	lsls	r2, r3, #16
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	43d9      	mvns	r1, r3
 8001330:	887b      	ldrh	r3, [r7, #2]
 8001332:	400b      	ands	r3, r1
 8001334:	431a      	orrs	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	619a      	str	r2, [r3, #24]
}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e12b      	b.n	80015b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d106      	bne.n	8001374 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fb06 	bl	8000980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2224      	movs	r2, #36	; 0x24
 8001378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0201 	bic.w	r2, r2, #1
 800138a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800139a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013ac:	f002 fc9e 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 80013b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4a81      	ldr	r2, [pc, #516]	; (80015bc <HAL_I2C_Init+0x274>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d807      	bhi.n	80013cc <HAL_I2C_Init+0x84>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4a80      	ldr	r2, [pc, #512]	; (80015c0 <HAL_I2C_Init+0x278>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	bf94      	ite	ls
 80013c4:	2301      	movls	r3, #1
 80013c6:	2300      	movhi	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	e006      	b.n	80013da <HAL_I2C_Init+0x92>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4a7d      	ldr	r2, [pc, #500]	; (80015c4 <HAL_I2C_Init+0x27c>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	bf94      	ite	ls
 80013d4:	2301      	movls	r3, #1
 80013d6:	2300      	movhi	r3, #0
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e0e7      	b.n	80015b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4a78      	ldr	r2, [pc, #480]	; (80015c8 <HAL_I2C_Init+0x280>)
 80013e6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ea:	0c9b      	lsrs	r3, r3, #18
 80013ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	68ba      	ldr	r2, [r7, #8]
 80013fe:	430a      	orrs	r2, r1
 8001400:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	4a6a      	ldr	r2, [pc, #424]	; (80015bc <HAL_I2C_Init+0x274>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d802      	bhi.n	800141c <HAL_I2C_Init+0xd4>
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	3301      	adds	r3, #1
 800141a:	e009      	b.n	8001430 <HAL_I2C_Init+0xe8>
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001422:	fb02 f303 	mul.w	r3, r2, r3
 8001426:	4a69      	ldr	r2, [pc, #420]	; (80015cc <HAL_I2C_Init+0x284>)
 8001428:	fba2 2303 	umull	r2, r3, r2, r3
 800142c:	099b      	lsrs	r3, r3, #6
 800142e:	3301      	adds	r3, #1
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	430b      	orrs	r3, r1
 8001436:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001442:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	495c      	ldr	r1, [pc, #368]	; (80015bc <HAL_I2C_Init+0x274>)
 800144c:	428b      	cmp	r3, r1
 800144e:	d819      	bhi.n	8001484 <HAL_I2C_Init+0x13c>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	fbb1 f3f3 	udiv	r3, r1, r3
 800145e:	1c59      	adds	r1, r3, #1
 8001460:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001464:	400b      	ands	r3, r1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00a      	beq.n	8001480 <HAL_I2C_Init+0x138>
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1e59      	subs	r1, r3, #1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fbb1 f3f3 	udiv	r3, r1, r3
 8001478:	3301      	adds	r3, #1
 800147a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800147e:	e051      	b.n	8001524 <HAL_I2C_Init+0x1dc>
 8001480:	2304      	movs	r3, #4
 8001482:	e04f      	b.n	8001524 <HAL_I2C_Init+0x1dc>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d111      	bne.n	80014b0 <HAL_I2C_Init+0x168>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	1e58      	subs	r0, r3, #1
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6859      	ldr	r1, [r3, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	440b      	add	r3, r1
 800149a:	fbb0 f3f3 	udiv	r3, r0, r3
 800149e:	3301      	adds	r3, #1
 80014a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	bf0c      	ite	eq
 80014a8:	2301      	moveq	r3, #1
 80014aa:	2300      	movne	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	e012      	b.n	80014d6 <HAL_I2C_Init+0x18e>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1e58      	subs	r0, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6859      	ldr	r1, [r3, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	0099      	lsls	r1, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c6:	3301      	adds	r3, #1
 80014c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	bf0c      	ite	eq
 80014d0:	2301      	moveq	r3, #1
 80014d2:	2300      	movne	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_I2C_Init+0x196>
 80014da:	2301      	movs	r3, #1
 80014dc:	e022      	b.n	8001524 <HAL_I2C_Init+0x1dc>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10e      	bne.n	8001504 <HAL_I2C_Init+0x1bc>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	1e58      	subs	r0, r3, #1
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6859      	ldr	r1, [r3, #4]
 80014ee:	460b      	mov	r3, r1
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	440b      	add	r3, r1
 80014f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80014f8:	3301      	adds	r3, #1
 80014fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001502:	e00f      	b.n	8001524 <HAL_I2C_Init+0x1dc>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	1e58      	subs	r0, r3, #1
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6859      	ldr	r1, [r3, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	0099      	lsls	r1, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	fbb0 f3f3 	udiv	r3, r0, r3
 800151a:	3301      	adds	r3, #1
 800151c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	6809      	ldr	r1, [r1, #0]
 8001528:	4313      	orrs	r3, r2
 800152a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69da      	ldr	r2, [r3, #28]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001552:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6911      	ldr	r1, [r2, #16]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68d2      	ldr	r2, [r2, #12]
 800155e:	4311      	orrs	r1, r2
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	430b      	orrs	r3, r1
 8001566:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695a      	ldr	r2, [r3, #20]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 0201 	orr.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2220      	movs	r2, #32
 800159e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	000186a0 	.word	0x000186a0
 80015c0:	001e847f 	.word	0x001e847f
 80015c4:	003d08ff 	.word	0x003d08ff
 80015c8:	431bde83 	.word	0x431bde83
 80015cc:	10624dd3 	.word	0x10624dd3

080015d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e128      	b.n	8001834 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d109      	bne.n	8001602 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a90      	ldr	r2, [pc, #576]	; (800183c <HAL_I2S_Init+0x26c>)
 80015fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff fa07 	bl	8000a10 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2202      	movs	r2, #2
 8001606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001618:	f023 030f 	bic.w	r3, r3, #15
 800161c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2202      	movs	r2, #2
 8001624:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d060      	beq.n	80016f0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d102      	bne.n	800163c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001636:	2310      	movs	r3, #16
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e001      	b.n	8001640 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800163c:	2320      	movs	r3, #32
 800163e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b20      	cmp	r3, #32
 8001646:	d802      	bhi.n	800164e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800164e:	2001      	movs	r0, #1
 8001650:	f002 fc42 	bl	8003ed8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001654:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800165e:	d125      	bne.n	80016ac <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d010      	beq.n	800168a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	461a      	mov	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	fbb2 f3f3 	udiv	r3, r2, r3
 8001684:	3305      	adds	r3, #5
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	e01f      	b.n	80016ca <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	fbb2 f2f3 	udiv	r2, r2, r3
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	461a      	mov	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	3305      	adds	r3, #5
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	e00e      	b.n	80016ca <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	461a      	mov	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c6:	3305      	adds	r3, #5
 80016c8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	4a5c      	ldr	r2, [pc, #368]	; (8001840 <HAL_I2S_Init+0x270>)
 80016ce:	fba2 2303 	umull	r2, r3, r2, r3
 80016d2:	08db      	lsrs	r3, r3, #3
 80016d4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	085b      	lsrs	r3, r3, #1
 80016e6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	61bb      	str	r3, [r7, #24]
 80016ee:	e003      	b.n	80016f8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80016f0:	2302      	movs	r3, #2
 80016f2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d902      	bls.n	8001704 <HAL_I2S_Init+0x134>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	2bff      	cmp	r3, #255	; 0xff
 8001702:	d907      	bls.n	8001714 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001708:	f043 0210 	orr.w	r2, r3, #16
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e08f      	b.n	8001834 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691a      	ldr	r2, [r3, #16]
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	ea42 0103 	orr.w	r1, r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	430a      	orrs	r2, r1
 8001726:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001732:	f023 030f 	bic.w	r3, r3, #15
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6851      	ldr	r1, [r2, #4]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6892      	ldr	r2, [r2, #8]
 800173e:	4311      	orrs	r1, r2
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	68d2      	ldr	r2, [r2, #12]
 8001744:	4311      	orrs	r1, r2
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6992      	ldr	r2, [r2, #24]
 800174a:	430a      	orrs	r2, r1
 800174c:	431a      	orrs	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001756:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d161      	bne.n	8001824 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a38      	ldr	r2, [pc, #224]	; (8001844 <HAL_I2S_Init+0x274>)
 8001764:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a37      	ldr	r2, [pc, #220]	; (8001848 <HAL_I2S_Init+0x278>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d101      	bne.n	8001774 <HAL_I2S_Init+0x1a4>
 8001770:	4b36      	ldr	r3, [pc, #216]	; (800184c <HAL_I2S_Init+0x27c>)
 8001772:	e001      	b.n	8001778 <HAL_I2S_Init+0x1a8>
 8001774:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6812      	ldr	r2, [r2, #0]
 800177e:	4932      	ldr	r1, [pc, #200]	; (8001848 <HAL_I2S_Init+0x278>)
 8001780:	428a      	cmp	r2, r1
 8001782:	d101      	bne.n	8001788 <HAL_I2S_Init+0x1b8>
 8001784:	4a31      	ldr	r2, [pc, #196]	; (800184c <HAL_I2S_Init+0x27c>)
 8001786:	e001      	b.n	800178c <HAL_I2S_Init+0x1bc>
 8001788:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800178c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001790:	f023 030f 	bic.w	r3, r3, #15
 8001794:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a2b      	ldr	r2, [pc, #172]	; (8001848 <HAL_I2S_Init+0x278>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d101      	bne.n	80017a4 <HAL_I2S_Init+0x1d4>
 80017a0:	4b2a      	ldr	r3, [pc, #168]	; (800184c <HAL_I2S_Init+0x27c>)
 80017a2:	e001      	b.n	80017a8 <HAL_I2S_Init+0x1d8>
 80017a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017a8:	2202      	movs	r2, #2
 80017aa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a25      	ldr	r2, [pc, #148]	; (8001848 <HAL_I2S_Init+0x278>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d101      	bne.n	80017ba <HAL_I2S_Init+0x1ea>
 80017b6:	4b25      	ldr	r3, [pc, #148]	; (800184c <HAL_I2S_Init+0x27c>)
 80017b8:	e001      	b.n	80017be <HAL_I2S_Init+0x1ee>
 80017ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017ca:	d003      	beq.n	80017d4 <HAL_I2S_Init+0x204>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d103      	bne.n	80017dc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80017d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	e001      	b.n	80017e0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80017ea:	4313      	orrs	r3, r2
 80017ec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80017f4:	4313      	orrs	r3, r2
 80017f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80017fe:	4313      	orrs	r3, r2
 8001800:	b29a      	uxth	r2, r3
 8001802:	897b      	ldrh	r3, [r7, #10]
 8001804:	4313      	orrs	r3, r2
 8001806:	b29b      	uxth	r3, r3
 8001808:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800180c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a0d      	ldr	r2, [pc, #52]	; (8001848 <HAL_I2S_Init+0x278>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d101      	bne.n	800181c <HAL_I2S_Init+0x24c>
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <HAL_I2S_Init+0x27c>)
 800181a:	e001      	b.n	8001820 <HAL_I2S_Init+0x250>
 800181c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001820:	897a      	ldrh	r2, [r7, #10]
 8001822:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3720      	adds	r7, #32
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	08001947 	.word	0x08001947
 8001840:	cccccccd 	.word	0xcccccccd
 8001844:	08001a5d 	.word	0x08001a5d
 8001848:	40003800 	.word	0x40003800
 800184c:	40003400 	.word	0x40003400

08001850 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	881a      	ldrh	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	1c9a      	adds	r2, r3, #2
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	3b01      	subs	r3, #1
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018bc:	b29b      	uxth	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10e      	bne.n	80018e0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80018d0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ffb8 	bl	8001850 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	b292      	uxth	r2, r2
 80018fc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001902:	1c9a      	adds	r2, r3, #2
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800190c:	b29b      	uxth	r3, r3
 800190e:	3b01      	subs	r3, #1
 8001910:	b29a      	uxth	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800191a:	b29b      	uxth	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10e      	bne.n	800193e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800192e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ff93 	bl	8001864 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b04      	cmp	r3, #4
 8001960:	d13a      	bne.n	80019d8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b01      	cmp	r3, #1
 800196a:	d109      	bne.n	8001980 <I2S_IRQHandler+0x3a>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001976:	2b40      	cmp	r3, #64	; 0x40
 8001978:	d102      	bne.n	8001980 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffb4 	bl	80018e8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001986:	2b40      	cmp	r3, #64	; 0x40
 8001988:	d126      	bne.n	80019d8 <I2S_IRQHandler+0x92>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0320 	and.w	r3, r3, #32
 8001994:	2b20      	cmp	r3, #32
 8001996:	d11f      	bne.n	80019d8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80019a6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	f043 0202 	orr.w	r2, r3, #2
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ff50 	bl	8001878 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d136      	bne.n	8001a52 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d109      	bne.n	8001a02 <I2S_IRQHandler+0xbc>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f8:	2b80      	cmp	r3, #128	; 0x80
 80019fa:	d102      	bne.n	8001a02 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff45 	bl	800188c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d122      	bne.n	8001a52 <I2S_IRQHandler+0x10c>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0320 	and.w	r3, r3, #32
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	d11b      	bne.n	8001a52 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a28:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a44:	f043 0204 	orr.w	r2, r3, #4
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff13 	bl	8001878 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001a52:	bf00      	nop
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a92      	ldr	r2, [pc, #584]	; (8001cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d101      	bne.n	8001a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001a76:	4b92      	ldr	r3, [pc, #584]	; (8001cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001a78:	e001      	b.n	8001a7e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001a7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a8b      	ldr	r2, [pc, #556]	; (8001cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d101      	bne.n	8001a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001a94:	4b8a      	ldr	r3, [pc, #552]	; (8001cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001a96:	e001      	b.n	8001a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001a98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa8:	d004      	beq.n	8001ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f040 8099 	bne.w	8001be6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d107      	bne.n	8001ace <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f925 	bl	8001d18 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d107      	bne.n	8001ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f9c8 	bl	8001e78 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aee:	2b40      	cmp	r3, #64	; 0x40
 8001af0:	d13a      	bne.n	8001b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	f003 0320 	and.w	r3, r3, #32
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d035      	beq.n	8001b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a6e      	ldr	r2, [pc, #440]	; (8001cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d101      	bne.n	8001b0a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001b06:	4b6e      	ldr	r3, [pc, #440]	; (8001cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b08:	e001      	b.n	8001b0e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001b0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4969      	ldr	r1, [pc, #420]	; (8001cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b16:	428b      	cmp	r3, r1
 8001b18:	d101      	bne.n	8001b1e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001b1a:	4b69      	ldr	r3, [pc, #420]	; (8001cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b1c:	e001      	b.n	8001b22 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001b1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b26:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b36:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f043 0202 	orr.w	r2, r3, #2
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff fe88 	bl	8001878 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	f040 80c3 	bne.w	8001cfa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f003 0320 	and.w	r3, r3, #32
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 80bd 	beq.w	8001cfa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b8e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a49      	ldr	r2, [pc, #292]	; (8001cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001b9a:	4b49      	ldr	r3, [pc, #292]	; (8001cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b9c:	e001      	b.n	8001ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001b9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4944      	ldr	r1, [pc, #272]	; (8001cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001baa:	428b      	cmp	r3, r1
 8001bac:	d101      	bne.n	8001bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001bae:	4b44      	ldr	r3, [pc, #272]	; (8001cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001bb0:	e001      	b.n	8001bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001bb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bb6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001bba:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	f043 0204 	orr.w	r2, r3, #4
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff fe4a 	bl	8001878 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001be4:	e089      	b.n	8001cfa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d107      	bne.n	8001c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d002      	beq.n	8001c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f8be 	bl	8001d7c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d107      	bne.n	8001c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f8fd 	bl	8001e14 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c20:	2b40      	cmp	r3, #64	; 0x40
 8001c22:	d12f      	bne.n	8001c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f003 0320 	and.w	r3, r3, #32
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d02a      	beq.n	8001c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c3c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a1e      	ldr	r2, [pc, #120]	; (8001cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d101      	bne.n	8001c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c4a:	e001      	b.n	8001c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001c4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4919      	ldr	r1, [pc, #100]	; (8001cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c58:	428b      	cmp	r3, r1
 8001c5a:	d101      	bne.n	8001c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001c5c:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c5e:	e001      	b.n	8001c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001c60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c68:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	f043 0202 	orr.w	r2, r3, #2
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff fdfa 	bl	8001878 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d136      	bne.n	8001cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	f003 0320 	and.w	r3, r3, #32
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d031      	beq.n	8001cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a07      	ldr	r2, [pc, #28]	; (8001cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d101      	bne.n	8001ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001ca2:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ca4:	e001      	b.n	8001caa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001ca6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4902      	ldr	r1, [pc, #8]	; (8001cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001cb2:	428b      	cmp	r3, r1
 8001cb4:	d106      	bne.n	8001cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001cb6:	4b02      	ldr	r3, [pc, #8]	; (8001cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001cb8:	e006      	b.n	8001cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001cba:	bf00      	nop
 8001cbc:	40003800 	.word	0x40003800
 8001cc0:	40003400 	.word	0x40003400
 8001cc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ccc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cdc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	f043 0204 	orr.w	r2, r3, #4
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff fdc0 	bl	8001878 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001cf8:	e000      	b.n	8001cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001cfa:	bf00      	nop
}
 8001cfc:	bf00      	nop
 8001cfe:	3720      	adds	r7, #32
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	1c99      	adds	r1, r3, #2
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6251      	str	r1, [r2, #36]	; 0x24
 8001d2a:	881a      	ldrh	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d113      	bne.n	8001d72 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d58:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d106      	bne.n	8001d72 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ffc9 	bl	8001d04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	1c99      	adds	r1, r3, #2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6251      	str	r1, [r2, #36]	; 0x24
 8001d8e:	8819      	ldrh	r1, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a1d      	ldr	r2, [pc, #116]	; (8001e0c <I2SEx_TxISR_I2SExt+0x90>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d101      	bne.n	8001d9e <I2SEx_TxISR_I2SExt+0x22>
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <I2SEx_TxISR_I2SExt+0x94>)
 8001d9c:	e001      	b.n	8001da2 <I2SEx_TxISR_I2SExt+0x26>
 8001d9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001da2:	460a      	mov	r2, r1
 8001da4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	3b01      	subs	r3, #1
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d121      	bne.n	8001e02 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <I2SEx_TxISR_I2SExt+0x90>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d101      	bne.n	8001dcc <I2SEx_TxISR_I2SExt+0x50>
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <I2SEx_TxISR_I2SExt+0x94>)
 8001dca:	e001      	b.n	8001dd0 <I2SEx_TxISR_I2SExt+0x54>
 8001dcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	490d      	ldr	r1, [pc, #52]	; (8001e0c <I2SEx_TxISR_I2SExt+0x90>)
 8001dd8:	428b      	cmp	r3, r1
 8001dda:	d101      	bne.n	8001de0 <I2SEx_TxISR_I2SExt+0x64>
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <I2SEx_TxISR_I2SExt+0x94>)
 8001dde:	e001      	b.n	8001de4 <I2SEx_TxISR_I2SExt+0x68>
 8001de0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001de4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001de8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d106      	bne.n	8001e02 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ff81 	bl	8001d04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40003800 	.word	0x40003800
 8001e10:	40003400 	.word	0x40003400

08001e14 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68d8      	ldr	r0, [r3, #12]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e26:	1c99      	adds	r1, r3, #2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001e2c:	b282      	uxth	r2, r0
 8001e2e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d113      	bne.n	8001e70 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e56:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d106      	bne.n	8001e70 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ff4a 	bl	8001d04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a20      	ldr	r2, [pc, #128]	; (8001f08 <I2SEx_RxISR_I2SExt+0x90>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d101      	bne.n	8001e8e <I2SEx_RxISR_I2SExt+0x16>
 8001e8a:	4b20      	ldr	r3, [pc, #128]	; (8001f0c <I2SEx_RxISR_I2SExt+0x94>)
 8001e8c:	e001      	b.n	8001e92 <I2SEx_RxISR_I2SExt+0x1a>
 8001e8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e92:	68d8      	ldr	r0, [r3, #12]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	1c99      	adds	r1, r3, #2
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001e9e:	b282      	uxth	r2, r0
 8001ea0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d121      	bne.n	8001efe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <I2SEx_RxISR_I2SExt+0x90>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d101      	bne.n	8001ec8 <I2SEx_RxISR_I2SExt+0x50>
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <I2SEx_RxISR_I2SExt+0x94>)
 8001ec6:	e001      	b.n	8001ecc <I2SEx_RxISR_I2SExt+0x54>
 8001ec8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	490d      	ldr	r1, [pc, #52]	; (8001f08 <I2SEx_RxISR_I2SExt+0x90>)
 8001ed4:	428b      	cmp	r3, r1
 8001ed6:	d101      	bne.n	8001edc <I2SEx_RxISR_I2SExt+0x64>
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <I2SEx_RxISR_I2SExt+0x94>)
 8001eda:	e001      	b.n	8001ee0 <I2SEx_RxISR_I2SExt+0x68>
 8001edc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ee0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ee4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d106      	bne.n	8001efe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff03 	bl	8001d04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40003800 	.word	0x40003800
 8001f0c:	40003400 	.word	0x40003400

08001f10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f12:	b08f      	sub	sp, #60	; 0x3c
 8001f14:	af0a      	add	r7, sp, #40	; 0x28
 8001f16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e10f      	b.n	8002142 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d106      	bne.n	8001f42 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f005 fe61 	bl	8007c04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2203      	movs	r2, #3
 8001f46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d102      	bne.n	8001f5c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f002 f9b4 	bl	80042ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	687e      	ldr	r6, [r7, #4]
 8001f6e:	466d      	mov	r5, sp
 8001f70:	f106 0410 	add.w	r4, r6, #16
 8001f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f80:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f84:	1d33      	adds	r3, r6, #4
 8001f86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f88:	6838      	ldr	r0, [r7, #0]
 8001f8a:	f002 f88c 	bl	80040a6 <USB_CoreInit>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2202      	movs	r2, #2
 8001f98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0d0      	b.n	8002142 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f002 f9a2 	bl	80042f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fac:	2300      	movs	r3, #0
 8001fae:	73fb      	strb	r3, [r7, #15]
 8001fb0:	e04a      	b.n	8002048 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fb2:	7bfa      	ldrb	r2, [r7, #15]
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4413      	add	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	333d      	adds	r3, #61	; 0x3d
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	333c      	adds	r3, #60	; 0x3c
 8001fd6:	7bfa      	ldrb	r2, [r7, #15]
 8001fd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fda:	7bfa      	ldrb	r2, [r7, #15]
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	b298      	uxth	r0, r3
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	3344      	adds	r3, #68	; 0x44
 8001fee:	4602      	mov	r2, r0
 8001ff0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	3340      	adds	r3, #64	; 0x40
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	3348      	adds	r3, #72	; 0x48
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800201a:	7bfa      	ldrb	r2, [r7, #15]
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4413      	add	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	334c      	adds	r3, #76	; 0x4c
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800202e:	7bfa      	ldrb	r2, [r7, #15]
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	3354      	adds	r3, #84	; 0x54
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	3301      	adds	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	429a      	cmp	r2, r3
 8002050:	d3af      	bcc.n	8001fb2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]
 8002056:	e044      	b.n	80020e2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002080:	7bfa      	ldrb	r2, [r7, #15]
 8002082:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020b0:	7bfa      	ldrb	r2, [r7, #15]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4413      	add	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	3301      	adds	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
 80020e2:	7bfa      	ldrb	r2, [r7, #15]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d3b5      	bcc.n	8002058 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	603b      	str	r3, [r7, #0]
 80020f2:	687e      	ldr	r6, [r7, #4]
 80020f4:	466d      	mov	r5, sp
 80020f6:	f106 0410 	add.w	r4, r6, #16
 80020fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002100:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002102:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002106:	e885 0003 	stmia.w	r5, {r0, r1}
 800210a:	1d33      	adds	r3, r6, #4
 800210c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800210e:	6838      	ldr	r0, [r7, #0]
 8002110:	f002 f93a 	bl	8004388 <USB_DevInit>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2202      	movs	r2, #2
 800211e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e00d      	b.n	8002142 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f003 fa89 	bl	8005652 <USB_DevDisconnect>

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800214a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <HAL_PCD_Start+0x1c>
 8002162:	2302      	movs	r3, #2
 8002164:	e020      	b.n	80021a8 <HAL_PCD_Start+0x5e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	2b01      	cmp	r3, #1
 8002174:	d109      	bne.n	800218a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800217a:	2b01      	cmp	r3, #1
 800217c:	d005      	beq.n	800218a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002182:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f002 f88c 	bl	80042ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f003 fa39 	bl	8005610 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021b0:	b590      	push	{r4, r7, lr}
 80021b2:	b08d      	sub	sp, #52	; 0x34
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f003 faf7 	bl	80057ba <USB_GetMode>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f040 848a 	bne.w	8002ae8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f003 fa5b 	bl	8005694 <USB_ReadInterrupts>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 8480 	beq.w	8002ae6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	0a1b      	lsrs	r3, r3, #8
 80021f0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f003 fa48 	bl	8005694 <USB_ReadInterrupts>
 8002204:	4603      	mov	r3, r0
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b02      	cmp	r3, #2
 800220c:	d107      	bne.n	800221e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	695a      	ldr	r2, [r3, #20]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f002 0202 	and.w	r2, r2, #2
 800221c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f003 fa36 	bl	8005694 <USB_ReadInterrupts>
 8002228:	4603      	mov	r3, r0
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	2b10      	cmp	r3, #16
 8002230:	d161      	bne.n	80022f6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699a      	ldr	r2, [r3, #24]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0210 	bic.w	r2, r2, #16
 8002240:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	f003 020f 	and.w	r2, r3, #15
 800224e:	4613      	mov	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4413      	add	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	3304      	adds	r3, #4
 8002260:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	0c5b      	lsrs	r3, r3, #17
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	2b02      	cmp	r3, #2
 800226c:	d124      	bne.n	80022b8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002274:	4013      	ands	r3, r2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d035      	beq.n	80022e6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002284:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002288:	b29b      	uxth	r3, r3
 800228a:	461a      	mov	r2, r3
 800228c:	6a38      	ldr	r0, [r7, #32]
 800228e:	f003 f86d 	bl	800536c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800229e:	441a      	add	r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	6a1a      	ldr	r2, [r3, #32]
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	091b      	lsrs	r3, r3, #4
 80022ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022b0:	441a      	add	r2, r3
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	621a      	str	r2, [r3, #32]
 80022b6:	e016      	b.n	80022e6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	0c5b      	lsrs	r3, r3, #17
 80022bc:	f003 030f 	and.w	r3, r3, #15
 80022c0:	2b06      	cmp	r3, #6
 80022c2:	d110      	bne.n	80022e6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022ca:	2208      	movs	r2, #8
 80022cc:	4619      	mov	r1, r3
 80022ce:	6a38      	ldr	r0, [r7, #32]
 80022d0:	f003 f84c 	bl	800536c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	6a1a      	ldr	r2, [r3, #32]
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	091b      	lsrs	r3, r3, #4
 80022dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022e0:	441a      	add	r2, r3
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	699a      	ldr	r2, [r3, #24]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0210 	orr.w	r2, r2, #16
 80022f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f003 f9ca 	bl	8005694 <USB_ReadInterrupts>
 8002300:	4603      	mov	r3, r0
 8002302:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002306:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800230a:	f040 80a7 	bne.w	800245c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f003 f9cf 	bl	80056ba <USB_ReadDevAllOutEpInterrupt>
 800231c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800231e:	e099      	b.n	8002454 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 808e 	beq.w	8002448 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	4611      	mov	r1, r2
 8002336:	4618      	mov	r0, r3
 8002338:	f003 f9f3 	bl	8005722 <USB_ReadDevOutEPInterrupt>
 800233c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00c      	beq.n	8002362 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	4413      	add	r3, r2
 8002350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002354:	461a      	mov	r2, r3
 8002356:	2301      	movs	r3, #1
 8002358:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800235a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 fec3 	bl	80030e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00c      	beq.n	8002386 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	015a      	lsls	r2, r3, #5
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	4413      	add	r3, r2
 8002374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002378:	461a      	mov	r2, r3
 800237a:	2308      	movs	r3, #8
 800237c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800237e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 ff99 	bl	80032b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	2b00      	cmp	r3, #0
 800238e:	d008      	beq.n	80023a2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	4413      	add	r3, r2
 8002398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800239c:	461a      	mov	r2, r3
 800239e:	2310      	movs	r3, #16
 80023a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d030      	beq.n	800240e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b4:	2b80      	cmp	r3, #128	; 0x80
 80023b6:	d109      	bne.n	80023cc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80023cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	3304      	adds	r3, #4
 80023e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	78db      	ldrb	r3, [r3, #3]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d108      	bne.n	80023fc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2200      	movs	r2, #0
 80023ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	4619      	mov	r1, r3
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f005 fd18 	bl	8007e2c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	4413      	add	r3, r2
 8002404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002408:	461a      	mov	r2, r3
 800240a:	2302      	movs	r3, #2
 800240c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	f003 0320 	and.w	r3, r3, #32
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	015a      	lsls	r2, r3, #5
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	4413      	add	r3, r2
 8002420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002424:	461a      	mov	r2, r3
 8002426:	2320      	movs	r3, #32
 8002428:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d009      	beq.n	8002448 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	4413      	add	r3, r2
 800243c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002440:	461a      	mov	r2, r3
 8002442:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002446:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	3301      	adds	r3, #1
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	085b      	lsrs	r3, r3, #1
 8002452:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002456:	2b00      	cmp	r3, #0
 8002458:	f47f af62 	bne.w	8002320 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f003 f917 	bl	8005694 <USB_ReadInterrupts>
 8002466:	4603      	mov	r3, r0
 8002468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800246c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002470:	f040 80db 	bne.w	800262a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f003 f938 	bl	80056ee <USB_ReadDevAllInEpInterrupt>
 800247e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002484:	e0cd      	b.n	8002622 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 80c2 	beq.w	8002616 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f003 f95e 	bl	800575e <USB_ReadDevInEPInterrupt>
 80024a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d057      	beq.n	800255e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	2201      	movs	r2, #1
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69f9      	ldr	r1, [r7, #28]
 80024ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024ce:	4013      	ands	r3, r2
 80024d0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024de:	461a      	mov	r2, r3
 80024e0:	2301      	movs	r3, #1
 80024e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d132      	bne.n	8002552 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	334c      	adds	r3, #76	; 0x4c
 80024fc:	6819      	ldr	r1, [r3, #0]
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002502:	4613      	mov	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4403      	add	r3, r0
 800250c:	3348      	adds	r3, #72	; 0x48
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4419      	add	r1, r3
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4403      	add	r3, r0
 8002520:	334c      	adds	r3, #76	; 0x4c
 8002522:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	2b00      	cmp	r3, #0
 8002528:	d113      	bne.n	8002552 <HAL_PCD_IRQHandler+0x3a2>
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	3354      	adds	r3, #84	; 0x54
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d108      	bne.n	8002552 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800254a:	461a      	mov	r2, r3
 800254c:	2101      	movs	r1, #1
 800254e:	f003 f965 	bl	800581c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	b2db      	uxtb	r3, r3
 8002556:	4619      	mov	r1, r3
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f005 fbe2 	bl	8007d22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b00      	cmp	r3, #0
 8002566:	d008      	beq.n	800257a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	4413      	add	r3, r2
 8002570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002574:	461a      	mov	r2, r3
 8002576:	2308      	movs	r3, #8
 8002578:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	4413      	add	r3, r2
 800258c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002590:	461a      	mov	r2, r3
 8002592:	2310      	movs	r3, #16
 8002594:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025ac:	461a      	mov	r2, r3
 80025ae:	2340      	movs	r3, #64	; 0x40
 80025b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d023      	beq.n	8002604 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80025bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025be:	6a38      	ldr	r0, [r7, #32]
 80025c0:	f002 f846 	bl	8004650 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80025c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	3338      	adds	r3, #56	; 0x38
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	4413      	add	r3, r2
 80025d4:	3304      	adds	r3, #4
 80025d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	78db      	ldrb	r3, [r3, #3]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d108      	bne.n	80025f2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2200      	movs	r2, #0
 80025e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	4619      	mov	r1, r3
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f005 fc2f 	bl	8007e50 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	015a      	lsls	r2, r3, #5
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025fe:	461a      	mov	r2, r3
 8002600:	2302      	movs	r3, #2
 8002602:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800260e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 fcdb 	bl	8002fcc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	3301      	adds	r3, #1
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800261c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261e:	085b      	lsrs	r3, r3, #1
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002624:	2b00      	cmp	r3, #0
 8002626:	f47f af2e 	bne.w	8002486 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f003 f830 	bl	8005694 <USB_ReadInterrupts>
 8002634:	4603      	mov	r3, r0
 8002636:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800263a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800263e:	d122      	bne.n	8002686 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800264e:	f023 0301 	bic.w	r3, r3, #1
 8002652:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800265a:	2b01      	cmp	r3, #1
 800265c:	d108      	bne.n	8002670 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002666:	2100      	movs	r1, #0
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fec3 	bl	80033f4 <HAL_PCDEx_LPM_Callback>
 800266e:	e002      	b.n	8002676 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f005 fbcd 	bl	8007e10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695a      	ldr	r2, [r3, #20]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002684:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f003 f802 	bl	8005694 <USB_ReadInterrupts>
 8002690:	4603      	mov	r3, r0
 8002692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800269a:	d112      	bne.n	80026c2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d102      	bne.n	80026b2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f005 fb89 	bl	8007dc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80026c0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f002 ffe4 	bl	8005694 <USB_ReadInterrupts>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d6:	f040 80b7 	bne.w	8002848 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2110      	movs	r1, #16
 80026f4:	4618      	mov	r0, r3
 80026f6:	f001 ffab 	bl	8004650 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026fe:	e046      	b.n	800278e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	4413      	add	r3, r2
 8002708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800270c:	461a      	mov	r2, r3
 800270e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002712:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	4413      	add	r3, r2
 800271c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002724:	0151      	lsls	r1, r2, #5
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	440a      	add	r2, r1
 800272a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800272e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002732:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	4413      	add	r3, r2
 800273c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002740:	461a      	mov	r2, r3
 8002742:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002746:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	4413      	add	r3, r2
 8002750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002758:	0151      	lsls	r1, r2, #5
 800275a:	69fa      	ldr	r2, [r7, #28]
 800275c:	440a      	add	r2, r1
 800275e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002762:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002766:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	4413      	add	r3, r2
 8002770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002778:	0151      	lsls	r1, r2, #5
 800277a:	69fa      	ldr	r2, [r7, #28]
 800277c:	440a      	add	r2, r1
 800277e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002782:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002786:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278a:	3301      	adds	r3, #1
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002794:	429a      	cmp	r2, r3
 8002796:	d3b3      	bcc.n	8002700 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	69fa      	ldr	r2, [r7, #28]
 80027a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80027aa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d016      	beq.n	80027e2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027c4:	f043 030b 	orr.w	r3, r3, #11
 80027c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d4:	69fa      	ldr	r2, [r7, #28]
 80027d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027da:	f043 030b 	orr.w	r3, r3, #11
 80027de:	6453      	str	r3, [r2, #68]	; 0x44
 80027e0:	e015      	b.n	800280e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027f4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80027f8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002808:	f043 030b 	orr.w	r3, r3, #11
 800280c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800281c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002820:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002832:	461a      	mov	r2, r3
 8002834:	f002 fff2 	bl	800581c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695a      	ldr	r2, [r3, #20]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002846:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f002 ff21 	bl	8005694 <USB_ReadInterrupts>
 8002852:	4603      	mov	r3, r0
 8002854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800285c:	d124      	bne.n	80028a8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f002 ffb7 	bl	80057d6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f001 ff6c 	bl	800474a <USB_GetDevSpeed>
 8002872:	4603      	mov	r3, r0
 8002874:	461a      	mov	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681c      	ldr	r4, [r3, #0]
 800287e:	f001 fa29 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8002882:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002888:	b2db      	uxtb	r3, r3
 800288a:	461a      	mov	r2, r3
 800288c:	4620      	mov	r0, r4
 800288e:	f001 fc6b 	bl	8004168 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f005 fa6d 	bl	8007d72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80028a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f002 fef1 	bl	8005694 <USB_ReadInterrupts>
 80028b2:	4603      	mov	r3, r0
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d10a      	bne.n	80028d2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f005 fa4a 	bl	8007d56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695a      	ldr	r2, [r3, #20]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f002 0208 	and.w	r2, r2, #8
 80028d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f002 fedc 	bl	8005694 <USB_ReadInterrupts>
 80028dc:	4603      	mov	r3, r0
 80028de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e2:	2b80      	cmp	r3, #128	; 0x80
 80028e4:	d122      	bne.n	800292c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028f2:	2301      	movs	r3, #1
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
 80028f6:	e014      	b.n	8002922 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fc:	4613      	mov	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d105      	bne.n	800291c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	b2db      	uxtb	r3, r3
 8002914:	4619      	mov	r1, r3
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 fb27 	bl	8002f6a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	3301      	adds	r3, #1
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002928:	429a      	cmp	r2, r3
 800292a:	d3e5      	bcc.n	80028f8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f002 feaf 	bl	8005694 <USB_ReadInterrupts>
 8002936:	4603      	mov	r3, r0
 8002938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800293c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002940:	d13b      	bne.n	80029ba <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002942:	2301      	movs	r3, #1
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
 8002946:	e02b      	b.n	80029a0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	4413      	add	r3, r2
 8002950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295c:	4613      	mov	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	3340      	adds	r3, #64	; 0x40
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d115      	bne.n	800299a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800296e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002970:	2b00      	cmp	r3, #0
 8002972:	da12      	bge.n	800299a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002978:	4613      	mov	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	333f      	adds	r3, #63	; 0x3f
 8002984:	2201      	movs	r2, #1
 8002986:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002990:	b2db      	uxtb	r3, r3
 8002992:	4619      	mov	r1, r3
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 fae8 	bl	8002f6a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	3301      	adds	r3, #1
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d3ce      	bcc.n	8002948 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80029b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f002 fe68 	bl	8005694 <USB_ReadInterrupts>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029ce:	d155      	bne.n	8002a7c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029d0:	2301      	movs	r3, #1
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
 80029d4:	e045      	b.n	8002a62 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	015a      	lsls	r2, r3, #5
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	4413      	add	r3, r2
 80029de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d12e      	bne.n	8002a5c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029fe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	da2b      	bge.n	8002a5c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002a10:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d121      	bne.n	8002a5c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	4413      	add	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10a      	bne.n	8002a5c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	69fa      	ldr	r2, [r7, #28]
 8002a50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a58:	6053      	str	r3, [r2, #4]
            break;
 8002a5a:	e007      	b.n	8002a6c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	3301      	adds	r3, #1
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d3b4      	bcc.n	80029d6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f002 fe07 	bl	8005694 <USB_ReadInterrupts>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a90:	d10a      	bne.n	8002aa8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f005 f9ee 	bl	8007e74 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695a      	ldr	r2, [r3, #20]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002aa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f002 fdf1 	bl	8005694 <USB_ReadInterrupts>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d115      	bne.n	8002ae8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f005 f9de 	bl	8007e90 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6859      	ldr	r1, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	605a      	str	r2, [r3, #4]
 8002ae4:	e000      	b.n	8002ae8 <HAL_PCD_IRQHandler+0x938>
      return;
 8002ae6:	bf00      	nop
    }
  }
}
 8002ae8:	3734      	adds	r7, #52	; 0x34
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd90      	pop	{r4, r7, pc}

08002aee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	460b      	mov	r3, r1
 8002af8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_PCD_SetAddress+0x1a>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e013      	b.n	8002b30 <HAL_PCD_SetAddress+0x42>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	78fa      	ldrb	r2, [r7, #3]
 8002b14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	78fa      	ldrb	r2, [r7, #3]
 8002b1e:	4611      	mov	r1, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f002 fd4f 	bl	80055c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	4608      	mov	r0, r1
 8002b42:	4611      	mov	r1, r2
 8002b44:	461a      	mov	r2, r3
 8002b46:	4603      	mov	r3, r0
 8002b48:	70fb      	strb	r3, [r7, #3]
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	803b      	strh	r3, [r7, #0]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	da0f      	bge.n	8002b7e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	f003 020f 	and.w	r2, r3, #15
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	3338      	adds	r3, #56	; 0x38
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	3304      	adds	r3, #4
 8002b74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	705a      	strb	r2, [r3, #1]
 8002b7c:	e00f      	b.n	8002b9e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	f003 020f 	and.w	r2, r3, #15
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	4413      	add	r3, r2
 8002b94:	3304      	adds	r3, #4
 8002b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b9e:	78fb      	ldrb	r3, [r7, #3]
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002baa:	883a      	ldrh	r2, [r7, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	78ba      	ldrb	r2, [r7, #2]
 8002bb4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	785b      	ldrb	r3, [r3, #1]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d004      	beq.n	8002bc8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002bc8:	78bb      	ldrb	r3, [r7, #2]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d102      	bne.n	8002bd4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <HAL_PCD_EP_Open+0xaa>
 8002bde:	2302      	movs	r3, #2
 8002be0:	e00e      	b.n	8002c00 <HAL_PCD_EP_Open+0xc8>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68f9      	ldr	r1, [r7, #12]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f001 fdcf 	bl	8004794 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002bfe:	7afb      	ldrb	r3, [r7, #11]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	da0f      	bge.n	8002c3c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	f003 020f 	and.w	r2, r3, #15
 8002c22:	4613      	mov	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	3338      	adds	r3, #56	; 0x38
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	4413      	add	r3, r2
 8002c30:	3304      	adds	r3, #4
 8002c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	705a      	strb	r2, [r3, #1]
 8002c3a:	e00f      	b.n	8002c5c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	f003 020f 	and.w	r2, r3, #15
 8002c42:	4613      	mov	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	4413      	add	r3, r2
 8002c52:	3304      	adds	r3, #4
 8002c54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c5c:	78fb      	ldrb	r3, [r7, #3]
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <HAL_PCD_EP_Close+0x6e>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e00e      	b.n	8002c94 <HAL_PCD_EP_Close+0x8c>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68f9      	ldr	r1, [r7, #12]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f001 fe0d 	bl	80048a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	607a      	str	r2, [r7, #4]
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cac:	7afb      	ldrb	r3, [r7, #11]
 8002cae:	f003 020f 	and.w	r2, r3, #15
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cde:	7afb      	ldrb	r3, [r7, #11]
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d102      	bne.n	8002cf8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cf8:	7afb      	ldrb	r3, [r7, #11]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d109      	bne.n	8002d16 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	6979      	ldr	r1, [r7, #20]
 8002d10:	f002 f8ec 	bl	8004eec <USB_EP0StartXfer>
 8002d14:	e008      	b.n	8002d28 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	6979      	ldr	r1, [r7, #20]
 8002d24:	f001 fe9a 	bl	8004a5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	f003 020f 	and.w	r2, r3, #15
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002d54:	681b      	ldr	r3, [r3, #0]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b086      	sub	sp, #24
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	603b      	str	r3, [r7, #0]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d72:	7afb      	ldrb	r3, [r7, #11]
 8002d74:	f003 020f 	and.w	r2, r3, #15
 8002d78:	4613      	mov	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	3338      	adds	r3, #56	; 0x38
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4413      	add	r3, r2
 8002d86:	3304      	adds	r3, #4
 8002d88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002da2:	7afb      	ldrb	r3, [r7, #11]
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d102      	bne.n	8002dbc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dbc:	7afb      	ldrb	r3, [r7, #11]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	6979      	ldr	r1, [r7, #20]
 8002dd4:	f002 f88a 	bl	8004eec <USB_EP0StartXfer>
 8002dd8:	e008      	b.n	8002dec <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	6979      	ldr	r1, [r7, #20]
 8002de8:	f001 fe38 	bl	8004a5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	f003 020f 	and.w	r2, r3, #15
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d901      	bls.n	8002e14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e050      	b.n	8002eb6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	da0f      	bge.n	8002e3c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	f003 020f 	and.w	r2, r3, #15
 8002e22:	4613      	mov	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	3338      	adds	r3, #56	; 0x38
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	4413      	add	r3, r2
 8002e30:	3304      	adds	r3, #4
 8002e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2201      	movs	r2, #1
 8002e38:	705a      	strb	r2, [r3, #1]
 8002e3a:	e00d      	b.n	8002e58 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3304      	adds	r3, #4
 8002e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e5e:	78fb      	ldrb	r3, [r7, #3]
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_PCD_EP_SetStall+0x82>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e01e      	b.n	8002eb6 <HAL_PCD_EP_SetStall+0xc0>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68f9      	ldr	r1, [r7, #12]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f002 fac8 	bl	800541c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e8c:	78fb      	ldrb	r3, [r7, #3]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10a      	bne.n	8002eac <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	b2d9      	uxtb	r1, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f002 fcb8 	bl	800581c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	f003 020f 	and.w	r2, r3, #15
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d901      	bls.n	8002edc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e042      	b.n	8002f62 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	da0f      	bge.n	8002f04 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	f003 020f 	and.w	r2, r3, #15
 8002eea:	4613      	mov	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	3338      	adds	r3, #56	; 0x38
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3304      	adds	r3, #4
 8002efa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2201      	movs	r2, #1
 8002f00:	705a      	strb	r2, [r3, #1]
 8002f02:	e00f      	b.n	8002f24 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	f003 020f 	and.w	r2, r3, #15
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	4413      	add	r3, r2
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_PCD_EP_ClrStall+0x86>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e00e      	b.n	8002f62 <HAL_PCD_EP_ClrStall+0xa4>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68f9      	ldr	r1, [r7, #12]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f002 fad0 	bl	80054f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	460b      	mov	r3, r1
 8002f74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	da0c      	bge.n	8002f98 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	f003 020f 	and.w	r2, r3, #15
 8002f84:	4613      	mov	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	3338      	adds	r3, #56	; 0x38
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	3304      	adds	r3, #4
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	e00c      	b.n	8002fb2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	f003 020f 	and.w	r2, r3, #15
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	3304      	adds	r3, #4
 8002fb0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68f9      	ldr	r1, [r7, #12]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f002 f8ef 	bl	800519c <USB_EPStopXfer>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002fc2:	7afb      	ldrb	r3, [r7, #11]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	; 0x28
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	3338      	adds	r3, #56	; 0x38
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	4413      	add	r3, r2
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a1a      	ldr	r2, [r3, #32]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d901      	bls.n	8003004 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e06c      	b.n	80030de <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	699a      	ldr	r2, [r3, #24]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	69fa      	ldr	r2, [r7, #28]
 8003016:	429a      	cmp	r2, r3
 8003018:	d902      	bls.n	8003020 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	3303      	adds	r3, #3
 8003024:	089b      	lsrs	r3, r3, #2
 8003026:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003028:	e02b      	b.n	8003082 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	69fa      	ldr	r2, [r7, #28]
 800303c:	429a      	cmp	r2, r3
 800303e:	d902      	bls.n	8003046 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3303      	adds	r3, #3
 800304a:	089b      	lsrs	r3, r3, #2
 800304c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6919      	ldr	r1, [r3, #16]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800305e:	b2db      	uxtb	r3, r3
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	4603      	mov	r3, r0
 8003064:	6978      	ldr	r0, [r7, #20]
 8003066:	f002 f943 	bl	80052f0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	441a      	add	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a1a      	ldr	r2, [r3, #32]
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	441a      	add	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4413      	add	r3, r2
 800308a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	429a      	cmp	r2, r3
 8003096:	d809      	bhi.n	80030ac <PCD_WriteEmptyTxFifo+0xe0>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a1a      	ldr	r2, [r3, #32]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d203      	bcs.n	80030ac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1be      	bne.n	800302a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	699a      	ldr	r2, [r3, #24]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d811      	bhi.n	80030dc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	2201      	movs	r2, #1
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	43db      	mvns	r3, r3
 80030d2:	6939      	ldr	r1, [r7, #16]
 80030d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030d8:	4013      	ands	r3, r2
 80030da:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3720      	adds	r7, #32
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	333c      	adds	r3, #60	; 0x3c
 8003100:	3304      	adds	r3, #4
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	4413      	add	r3, r2
 800310e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d17b      	bne.n	8003216 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f003 0308 	and.w	r3, r3, #8
 8003124:	2b00      	cmp	r3, #0
 8003126:	d015      	beq.n	8003154 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	4a61      	ldr	r2, [pc, #388]	; (80032b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	f240 80b9 	bls.w	80032a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80b3 	beq.w	80032a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	4413      	add	r3, r2
 8003146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800314a:	461a      	mov	r2, r3
 800314c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003150:	6093      	str	r3, [r2, #8]
 8003152:	e0a7      	b.n	80032a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b00      	cmp	r3, #0
 800315c:	d009      	beq.n	8003172 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	4413      	add	r3, r2
 8003166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800316a:	461a      	mov	r2, r3
 800316c:	2320      	movs	r3, #32
 800316e:	6093      	str	r3, [r2, #8]
 8003170:	e098      	b.n	80032a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003178:	2b00      	cmp	r3, #0
 800317a:	f040 8093 	bne.w	80032a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	4a4b      	ldr	r2, [pc, #300]	; (80032b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d90f      	bls.n	80031a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00a      	beq.n	80031a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	4413      	add	r3, r2
 8003198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800319c:	461a      	mov	r2, r3
 800319e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031a2:	6093      	str	r3, [r2, #8]
 80031a4:	e07e      	b.n	80032a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	4613      	mov	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	4413      	add	r3, r2
 80031b8:	3304      	adds	r3, #4
 80031ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	69da      	ldr	r2, [r3, #28]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	0159      	lsls	r1, r3, #5
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	440b      	add	r3, r1
 80031c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d2:	1ad2      	subs	r2, r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d114      	bne.n	8003208 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d109      	bne.n	80031fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031f0:	461a      	mov	r2, r3
 80031f2:	2101      	movs	r1, #1
 80031f4:	f002 fb12 	bl	800581c <USB_EP0_OutStart>
 80031f8:	e006      	b.n	8003208 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	441a      	add	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	4619      	mov	r1, r3
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f004 fd6c 	bl	8007cec <HAL_PCD_DataOutStageCallback>
 8003214:	e046      	b.n	80032a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	4a26      	ldr	r2, [pc, #152]	; (80032b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d124      	bne.n	8003268 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00a      	beq.n	800323e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	4413      	add	r3, r2
 8003230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003234:	461a      	mov	r2, r3
 8003236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800323a:	6093      	str	r3, [r2, #8]
 800323c:	e032      	b.n	80032a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	4413      	add	r3, r2
 8003250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003254:	461a      	mov	r2, r3
 8003256:	2320      	movs	r3, #32
 8003258:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	b2db      	uxtb	r3, r3
 800325e:	4619      	mov	r1, r3
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f004 fd43 	bl	8007cec <HAL_PCD_DataOutStageCallback>
 8003266:	e01d      	b.n	80032a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d114      	bne.n	8003298 <PCD_EP_OutXfrComplete_int+0x1b0>
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	4613      	mov	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d108      	bne.n	8003298 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003290:	461a      	mov	r2, r3
 8003292:	2100      	movs	r1, #0
 8003294:	f002 fac2 	bl	800581c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	b2db      	uxtb	r3, r3
 800329c:	4619      	mov	r1, r3
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f004 fd24 	bl	8007cec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3720      	adds	r7, #32
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	4f54300a 	.word	0x4f54300a
 80032b4:	4f54310a 	.word	0x4f54310a

080032b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	333c      	adds	r3, #60	; 0x3c
 80032d0:	3304      	adds	r3, #4
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	015a      	lsls	r2, r3, #5
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4413      	add	r3, r2
 80032de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4a15      	ldr	r2, [pc, #84]	; (8003340 <PCD_EP_OutSetupPacket_int+0x88>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d90e      	bls.n	800330c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d009      	beq.n	800330c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003304:	461a      	mov	r2, r3
 8003306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800330a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f004 fcdb 	bl	8007cc8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4a0a      	ldr	r2, [pc, #40]	; (8003340 <PCD_EP_OutSetupPacket_int+0x88>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d90c      	bls.n	8003334 <PCD_EP_OutSetupPacket_int+0x7c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d108      	bne.n	8003334 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800332c:	461a      	mov	r2, r3
 800332e:	2101      	movs	r1, #1
 8003330:	f002 fa74 	bl	800581c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	4f54300a 	.word	0x4f54300a

08003344 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	70fb      	strb	r3, [r7, #3]
 8003350:	4613      	mov	r3, r2
 8003352:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d107      	bne.n	8003372 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003362:	883b      	ldrh	r3, [r7, #0]
 8003364:	0419      	lsls	r1, r3, #16
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	430a      	orrs	r2, r1
 800336e:	629a      	str	r2, [r3, #40]	; 0x28
 8003370:	e028      	b.n	80033c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	0c1b      	lsrs	r3, r3, #16
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	4413      	add	r3, r2
 800337e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003380:	2300      	movs	r3, #0
 8003382:	73fb      	strb	r3, [r7, #15]
 8003384:	e00d      	b.n	80033a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	3340      	adds	r3, #64	; 0x40
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	0c1b      	lsrs	r3, r3, #16
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	4413      	add	r3, r2
 800339a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800339c:	7bfb      	ldrb	r3, [r7, #15]
 800339e:	3301      	adds	r3, #1
 80033a0:	73fb      	strb	r3, [r7, #15]
 80033a2:	7bfa      	ldrb	r2, [r7, #15]
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d3ec      	bcc.n	8003386 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80033ac:	883b      	ldrh	r3, [r7, #0]
 80033ae:	0418      	lsls	r0, r3, #16
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6819      	ldr	r1, [r3, #0]
 80033b4:	78fb      	ldrb	r3, [r7, #3]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	4302      	orrs	r2, r0
 80033bc:	3340      	adds	r3, #64	; 0x40
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	460b      	mov	r3, r1
 80033dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	887a      	ldrh	r2, [r7, #2]
 80033e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e267      	b.n	80038ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d075      	beq.n	8003516 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800342a:	4b88      	ldr	r3, [pc, #544]	; (800364c <HAL_RCC_OscConfig+0x240>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
 8003432:	2b04      	cmp	r3, #4
 8003434:	d00c      	beq.n	8003450 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003436:	4b85      	ldr	r3, [pc, #532]	; (800364c <HAL_RCC_OscConfig+0x240>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800343e:	2b08      	cmp	r3, #8
 8003440:	d112      	bne.n	8003468 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003442:	4b82      	ldr	r3, [pc, #520]	; (800364c <HAL_RCC_OscConfig+0x240>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800344a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800344e:	d10b      	bne.n	8003468 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003450:	4b7e      	ldr	r3, [pc, #504]	; (800364c <HAL_RCC_OscConfig+0x240>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d05b      	beq.n	8003514 <HAL_RCC_OscConfig+0x108>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d157      	bne.n	8003514 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e242      	b.n	80038ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003470:	d106      	bne.n	8003480 <HAL_RCC_OscConfig+0x74>
 8003472:	4b76      	ldr	r3, [pc, #472]	; (800364c <HAL_RCC_OscConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a75      	ldr	r2, [pc, #468]	; (800364c <HAL_RCC_OscConfig+0x240>)
 8003478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	e01d      	b.n	80034bc <HAL_RCC_OscConfig+0xb0>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003488:	d10c      	bne.n	80034a4 <HAL_RCC_OscConfig+0x98>
 800348a:	4b70      	ldr	r3, [pc, #448]	; (800364c <HAL_RCC_OscConfig+0x240>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a6f      	ldr	r2, [pc, #444]	; (800364c <HAL_RCC_OscConfig+0x240>)
 8003490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	4b6d      	ldr	r3, [pc, #436]	; (800364c <HAL_RCC_OscConfig+0x240>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a6c      	ldr	r2, [pc, #432]	; (800364c <HAL_RCC_OscConfig+0x240>)
 800349c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e00b      	b.n	80034bc <HAL_RCC_OscConfig+0xb0>
 80034a4:	4b69      	ldr	r3, [pc, #420]	; (800364c <HAL_RCC_OscConfig+0x240>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a68      	ldr	r2, [pc, #416]	; (800364c <HAL_RCC_OscConfig+0x240>)
 80034aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ae:	6013      	str	r3, [r2, #0]
 80034b0:	4b66      	ldr	r3, [pc, #408]	; (800364c <HAL_RCC_OscConfig+0x240>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a65      	ldr	r2, [pc, #404]	; (800364c <HAL_RCC_OscConfig+0x240>)
 80034b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d013      	beq.n	80034ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7fd fc2e 	bl	8000d24 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034cc:	f7fd fc2a 	bl	8000d24 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	; 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e207      	b.n	80038ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034de:	4b5b      	ldr	r3, [pc, #364]	; (800364c <HAL_RCC_OscConfig+0x240>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0xc0>
 80034ea:	e014      	b.n	8003516 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ec:	f7fd fc1a 	bl	8000d24 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f4:	f7fd fc16 	bl	8000d24 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b64      	cmp	r3, #100	; 0x64
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e1f3      	b.n	80038ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003506:	4b51      	ldr	r3, [pc, #324]	; (800364c <HAL_RCC_OscConfig+0x240>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0xe8>
 8003512:	e000      	b.n	8003516 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d063      	beq.n	80035ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003522:	4b4a      	ldr	r3, [pc, #296]	; (800364c <HAL_RCC_OscConfig+0x240>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00b      	beq.n	8003546 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800352e:	4b47      	ldr	r3, [pc, #284]	; (800364c <HAL_RCC_OscConfig+0x240>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003536:	2b08      	cmp	r3, #8
 8003538:	d11c      	bne.n	8003574 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800353a:	4b44      	ldr	r3, [pc, #272]	; (800364c <HAL_RCC_OscConfig+0x240>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d116      	bne.n	8003574 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003546:	4b41      	ldr	r3, [pc, #260]	; (800364c <HAL_RCC_OscConfig+0x240>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d005      	beq.n	800355e <HAL_RCC_OscConfig+0x152>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d001      	beq.n	800355e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e1c7      	b.n	80038ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800355e:	4b3b      	ldr	r3, [pc, #236]	; (800364c <HAL_RCC_OscConfig+0x240>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4937      	ldr	r1, [pc, #220]	; (800364c <HAL_RCC_OscConfig+0x240>)
 800356e:	4313      	orrs	r3, r2
 8003570:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003572:	e03a      	b.n	80035ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d020      	beq.n	80035be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800357c:	4b34      	ldr	r3, [pc, #208]	; (8003650 <HAL_RCC_OscConfig+0x244>)
 800357e:	2201      	movs	r2, #1
 8003580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003582:	f7fd fbcf 	bl	8000d24 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800358a:	f7fd fbcb 	bl	8000d24 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e1a8      	b.n	80038ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359c:	4b2b      	ldr	r3, [pc, #172]	; (800364c <HAL_RCC_OscConfig+0x240>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0f0      	beq.n	800358a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a8:	4b28      	ldr	r3, [pc, #160]	; (800364c <HAL_RCC_OscConfig+0x240>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4925      	ldr	r1, [pc, #148]	; (800364c <HAL_RCC_OscConfig+0x240>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	600b      	str	r3, [r1, #0]
 80035bc:	e015      	b.n	80035ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035be:	4b24      	ldr	r3, [pc, #144]	; (8003650 <HAL_RCC_OscConfig+0x244>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fd fbae 	bl	8000d24 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035cc:	f7fd fbaa 	bl	8000d24 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e187      	b.n	80038ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035de:	4b1b      	ldr	r3, [pc, #108]	; (800364c <HAL_RCC_OscConfig+0x240>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d036      	beq.n	8003664 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d016      	beq.n	800362c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035fe:	4b15      	ldr	r3, [pc, #84]	; (8003654 <HAL_RCC_OscConfig+0x248>)
 8003600:	2201      	movs	r2, #1
 8003602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003604:	f7fd fb8e 	bl	8000d24 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800360c:	f7fd fb8a 	bl	8000d24 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e167      	b.n	80038ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800361e:	4b0b      	ldr	r3, [pc, #44]	; (800364c <HAL_RCC_OscConfig+0x240>)
 8003620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f0      	beq.n	800360c <HAL_RCC_OscConfig+0x200>
 800362a:	e01b      	b.n	8003664 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800362c:	4b09      	ldr	r3, [pc, #36]	; (8003654 <HAL_RCC_OscConfig+0x248>)
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003632:	f7fd fb77 	bl	8000d24 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003638:	e00e      	b.n	8003658 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800363a:	f7fd fb73 	bl	8000d24 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d907      	bls.n	8003658 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e150      	b.n	80038ee <HAL_RCC_OscConfig+0x4e2>
 800364c:	40023800 	.word	0x40023800
 8003650:	42470000 	.word	0x42470000
 8003654:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003658:	4b88      	ldr	r3, [pc, #544]	; (800387c <HAL_RCC_OscConfig+0x470>)
 800365a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1ea      	bne.n	800363a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 8097 	beq.w	80037a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003672:	2300      	movs	r3, #0
 8003674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003676:	4b81      	ldr	r3, [pc, #516]	; (800387c <HAL_RCC_OscConfig+0x470>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10f      	bne.n	80036a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	4b7d      	ldr	r3, [pc, #500]	; (800387c <HAL_RCC_OscConfig+0x470>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	4a7c      	ldr	r2, [pc, #496]	; (800387c <HAL_RCC_OscConfig+0x470>)
 800368c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003690:	6413      	str	r3, [r2, #64]	; 0x40
 8003692:	4b7a      	ldr	r3, [pc, #488]	; (800387c <HAL_RCC_OscConfig+0x470>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369a:	60bb      	str	r3, [r7, #8]
 800369c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800369e:	2301      	movs	r3, #1
 80036a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a2:	4b77      	ldr	r3, [pc, #476]	; (8003880 <HAL_RCC_OscConfig+0x474>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d118      	bne.n	80036e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ae:	4b74      	ldr	r3, [pc, #464]	; (8003880 <HAL_RCC_OscConfig+0x474>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a73      	ldr	r2, [pc, #460]	; (8003880 <HAL_RCC_OscConfig+0x474>)
 80036b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ba:	f7fd fb33 	bl	8000d24 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c2:	f7fd fb2f 	bl	8000d24 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e10c      	b.n	80038ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d4:	4b6a      	ldr	r3, [pc, #424]	; (8003880 <HAL_RCC_OscConfig+0x474>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d106      	bne.n	80036f6 <HAL_RCC_OscConfig+0x2ea>
 80036e8:	4b64      	ldr	r3, [pc, #400]	; (800387c <HAL_RCC_OscConfig+0x470>)
 80036ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ec:	4a63      	ldr	r2, [pc, #396]	; (800387c <HAL_RCC_OscConfig+0x470>)
 80036ee:	f043 0301 	orr.w	r3, r3, #1
 80036f2:	6713      	str	r3, [r2, #112]	; 0x70
 80036f4:	e01c      	b.n	8003730 <HAL_RCC_OscConfig+0x324>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b05      	cmp	r3, #5
 80036fc:	d10c      	bne.n	8003718 <HAL_RCC_OscConfig+0x30c>
 80036fe:	4b5f      	ldr	r3, [pc, #380]	; (800387c <HAL_RCC_OscConfig+0x470>)
 8003700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003702:	4a5e      	ldr	r2, [pc, #376]	; (800387c <HAL_RCC_OscConfig+0x470>)
 8003704:	f043 0304 	orr.w	r3, r3, #4
 8003708:	6713      	str	r3, [r2, #112]	; 0x70
 800370a:	4b5c      	ldr	r3, [pc, #368]	; (800387c <HAL_RCC_OscConfig+0x470>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370e:	4a5b      	ldr	r2, [pc, #364]	; (800387c <HAL_RCC_OscConfig+0x470>)
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	6713      	str	r3, [r2, #112]	; 0x70
 8003716:	e00b      	b.n	8003730 <HAL_RCC_OscConfig+0x324>
 8003718:	4b58      	ldr	r3, [pc, #352]	; (800387c <HAL_RCC_OscConfig+0x470>)
 800371a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371c:	4a57      	ldr	r2, [pc, #348]	; (800387c <HAL_RCC_OscConfig+0x470>)
 800371e:	f023 0301 	bic.w	r3, r3, #1
 8003722:	6713      	str	r3, [r2, #112]	; 0x70
 8003724:	4b55      	ldr	r3, [pc, #340]	; (800387c <HAL_RCC_OscConfig+0x470>)
 8003726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003728:	4a54      	ldr	r2, [pc, #336]	; (800387c <HAL_RCC_OscConfig+0x470>)
 800372a:	f023 0304 	bic.w	r3, r3, #4
 800372e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d015      	beq.n	8003764 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003738:	f7fd faf4 	bl	8000d24 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373e:	e00a      	b.n	8003756 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003740:	f7fd faf0 	bl	8000d24 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	f241 3288 	movw	r2, #5000	; 0x1388
 800374e:	4293      	cmp	r3, r2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e0cb      	b.n	80038ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003756:	4b49      	ldr	r3, [pc, #292]	; (800387c <HAL_RCC_OscConfig+0x470>)
 8003758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0ee      	beq.n	8003740 <HAL_RCC_OscConfig+0x334>
 8003762:	e014      	b.n	800378e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003764:	f7fd fade 	bl	8000d24 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800376a:	e00a      	b.n	8003782 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800376c:	f7fd fada 	bl	8000d24 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	f241 3288 	movw	r2, #5000	; 0x1388
 800377a:	4293      	cmp	r3, r2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e0b5      	b.n	80038ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003782:	4b3e      	ldr	r3, [pc, #248]	; (800387c <HAL_RCC_OscConfig+0x470>)
 8003784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1ee      	bne.n	800376c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800378e:	7dfb      	ldrb	r3, [r7, #23]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d105      	bne.n	80037a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003794:	4b39      	ldr	r3, [pc, #228]	; (800387c <HAL_RCC_OscConfig+0x470>)
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	4a38      	ldr	r2, [pc, #224]	; (800387c <HAL_RCC_OscConfig+0x470>)
 800379a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800379e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 80a1 	beq.w	80038ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037aa:	4b34      	ldr	r3, [pc, #208]	; (800387c <HAL_RCC_OscConfig+0x470>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 030c 	and.w	r3, r3, #12
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d05c      	beq.n	8003870 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d141      	bne.n	8003842 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037be:	4b31      	ldr	r3, [pc, #196]	; (8003884 <HAL_RCC_OscConfig+0x478>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c4:	f7fd faae 	bl	8000d24 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037cc:	f7fd faaa 	bl	8000d24 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e087      	b.n	80038ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037de:	4b27      	ldr	r3, [pc, #156]	; (800387c <HAL_RCC_OscConfig+0x470>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69da      	ldr	r2, [r3, #28]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	019b      	lsls	r3, r3, #6
 80037fa:	431a      	orrs	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	085b      	lsrs	r3, r3, #1
 8003802:	3b01      	subs	r3, #1
 8003804:	041b      	lsls	r3, r3, #16
 8003806:	431a      	orrs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	061b      	lsls	r3, r3, #24
 800380e:	491b      	ldr	r1, [pc, #108]	; (800387c <HAL_RCC_OscConfig+0x470>)
 8003810:	4313      	orrs	r3, r2
 8003812:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003814:	4b1b      	ldr	r3, [pc, #108]	; (8003884 <HAL_RCC_OscConfig+0x478>)
 8003816:	2201      	movs	r2, #1
 8003818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381a:	f7fd fa83 	bl	8000d24 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003822:	f7fd fa7f 	bl	8000d24 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e05c      	b.n	80038ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003834:	4b11      	ldr	r3, [pc, #68]	; (800387c <HAL_RCC_OscConfig+0x470>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f0      	beq.n	8003822 <HAL_RCC_OscConfig+0x416>
 8003840:	e054      	b.n	80038ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003842:	4b10      	ldr	r3, [pc, #64]	; (8003884 <HAL_RCC_OscConfig+0x478>)
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7fd fa6c 	bl	8000d24 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003850:	f7fd fa68 	bl	8000d24 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e045      	b.n	80038ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003862:	4b06      	ldr	r3, [pc, #24]	; (800387c <HAL_RCC_OscConfig+0x470>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0x444>
 800386e:	e03d      	b.n	80038ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d107      	bne.n	8003888 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e038      	b.n	80038ee <HAL_RCC_OscConfig+0x4e2>
 800387c:	40023800 	.word	0x40023800
 8003880:	40007000 	.word	0x40007000
 8003884:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003888:	4b1b      	ldr	r3, [pc, #108]	; (80038f8 <HAL_RCC_OscConfig+0x4ec>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d028      	beq.n	80038e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d121      	bne.n	80038e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d11a      	bne.n	80038e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038b8:	4013      	ands	r3, r2
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d111      	bne.n	80038e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ce:	085b      	lsrs	r3, r3, #1
 80038d0:	3b01      	subs	r3, #1
 80038d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d107      	bne.n	80038e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d001      	beq.n	80038ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e000      	b.n	80038ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40023800 	.word	0x40023800

080038fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0cc      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003910:	4b68      	ldr	r3, [pc, #416]	; (8003ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d90c      	bls.n	8003938 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391e:	4b65      	ldr	r3, [pc, #404]	; (8003ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003926:	4b63      	ldr	r3, [pc, #396]	; (8003ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d001      	beq.n	8003938 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0b8      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d020      	beq.n	8003986 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003950:	4b59      	ldr	r3, [pc, #356]	; (8003ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	4a58      	ldr	r2, [pc, #352]	; (8003ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800395a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0308 	and.w	r3, r3, #8
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003968:	4b53      	ldr	r3, [pc, #332]	; (8003ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	4a52      	ldr	r2, [pc, #328]	; (8003ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003972:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003974:	4b50      	ldr	r3, [pc, #320]	; (8003ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	494d      	ldr	r1, [pc, #308]	; (8003ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	4313      	orrs	r3, r2
 8003984:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d044      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d107      	bne.n	80039aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399a:	4b47      	ldr	r3, [pc, #284]	; (8003ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d119      	bne.n	80039da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e07f      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d003      	beq.n	80039ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	d107      	bne.n	80039ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ba:	4b3f      	ldr	r3, [pc, #252]	; (8003ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d109      	bne.n	80039da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e06f      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ca:	4b3b      	ldr	r3, [pc, #236]	; (8003ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e067      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039da:	4b37      	ldr	r3, [pc, #220]	; (8003ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f023 0203 	bic.w	r2, r3, #3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	4934      	ldr	r1, [pc, #208]	; (8003ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039ec:	f7fd f99a 	bl	8000d24 <HAL_GetTick>
 80039f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f2:	e00a      	b.n	8003a0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f4:	f7fd f996 	bl	8000d24 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e04f      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0a:	4b2b      	ldr	r3, [pc, #172]	; (8003ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 020c 	and.w	r2, r3, #12
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d1eb      	bne.n	80039f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a1c:	4b25      	ldr	r3, [pc, #148]	; (8003ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d20c      	bcs.n	8003a44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2a:	4b22      	ldr	r3, [pc, #136]	; (8003ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a32:	4b20      	ldr	r3, [pc, #128]	; (8003ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e032      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a50:	4b19      	ldr	r3, [pc, #100]	; (8003ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	4916      	ldr	r1, [pc, #88]	; (8003ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d009      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a6e:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	490e      	ldr	r1, [pc, #56]	; (8003ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a82:	f000 f821 	bl	8003ac8 <HAL_RCC_GetSysClockFreq>
 8003a86:	4602      	mov	r2, r0
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	091b      	lsrs	r3, r3, #4
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	490a      	ldr	r1, [pc, #40]	; (8003abc <HAL_RCC_ClockConfig+0x1c0>)
 8003a94:	5ccb      	ldrb	r3, [r1, r3]
 8003a96:	fa22 f303 	lsr.w	r3, r2, r3
 8003a9a:	4a09      	ldr	r2, [pc, #36]	; (8003ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a9e:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fd f90e 	bl	8000cc4 <HAL_InitTick>

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40023c00 	.word	0x40023c00
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	08008300 	.word	0x08008300
 8003ac0:	20000000 	.word	0x20000000
 8003ac4:	20000004 	.word	0x20000004

08003ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003acc:	b094      	sub	sp, #80	; 0x50
 8003ace:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ad8:	2300      	movs	r3, #0
 8003ada:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ae0:	4b79      	ldr	r3, [pc, #484]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 030c 	and.w	r3, r3, #12
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d00d      	beq.n	8003b08 <HAL_RCC_GetSysClockFreq+0x40>
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	f200 80e1 	bhi.w	8003cb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <HAL_RCC_GetSysClockFreq+0x34>
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d003      	beq.n	8003b02 <HAL_RCC_GetSysClockFreq+0x3a>
 8003afa:	e0db      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003afc:	4b73      	ldr	r3, [pc, #460]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x204>)
 8003afe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003b00:	e0db      	b.n	8003cba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b02:	4b73      	ldr	r3, [pc, #460]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b06:	e0d8      	b.n	8003cba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b08:	4b6f      	ldr	r3, [pc, #444]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b12:	4b6d      	ldr	r3, [pc, #436]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d063      	beq.n	8003be6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b1e:	4b6a      	ldr	r3, [pc, #424]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	099b      	lsrs	r3, r3, #6
 8003b24:	2200      	movs	r2, #0
 8003b26:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b30:	633b      	str	r3, [r7, #48]	; 0x30
 8003b32:	2300      	movs	r3, #0
 8003b34:	637b      	str	r3, [r7, #52]	; 0x34
 8003b36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b3a:	4622      	mov	r2, r4
 8003b3c:	462b      	mov	r3, r5
 8003b3e:	f04f 0000 	mov.w	r0, #0
 8003b42:	f04f 0100 	mov.w	r1, #0
 8003b46:	0159      	lsls	r1, r3, #5
 8003b48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b4c:	0150      	lsls	r0, r2, #5
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4621      	mov	r1, r4
 8003b54:	1a51      	subs	r1, r2, r1
 8003b56:	6139      	str	r1, [r7, #16]
 8003b58:	4629      	mov	r1, r5
 8003b5a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b5e:	617b      	str	r3, [r7, #20]
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b6c:	4659      	mov	r1, fp
 8003b6e:	018b      	lsls	r3, r1, #6
 8003b70:	4651      	mov	r1, sl
 8003b72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b76:	4651      	mov	r1, sl
 8003b78:	018a      	lsls	r2, r1, #6
 8003b7a:	4651      	mov	r1, sl
 8003b7c:	ebb2 0801 	subs.w	r8, r2, r1
 8003b80:	4659      	mov	r1, fp
 8003b82:	eb63 0901 	sbc.w	r9, r3, r1
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b9a:	4690      	mov	r8, r2
 8003b9c:	4699      	mov	r9, r3
 8003b9e:	4623      	mov	r3, r4
 8003ba0:	eb18 0303 	adds.w	r3, r8, r3
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	462b      	mov	r3, r5
 8003ba8:	eb49 0303 	adc.w	r3, r9, r3
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	f04f 0200 	mov.w	r2, #0
 8003bb2:	f04f 0300 	mov.w	r3, #0
 8003bb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bba:	4629      	mov	r1, r5
 8003bbc:	024b      	lsls	r3, r1, #9
 8003bbe:	4621      	mov	r1, r4
 8003bc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	024a      	lsls	r2, r1, #9
 8003bc8:	4610      	mov	r0, r2
 8003bca:	4619      	mov	r1, r3
 8003bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bce:	2200      	movs	r2, #0
 8003bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bd8:	f7fc faf6 	bl	80001c8 <__aeabi_uldivmod>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4613      	mov	r3, r2
 8003be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003be4:	e058      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003be6:	4b38      	ldr	r3, [pc, #224]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	099b      	lsrs	r3, r3, #6
 8003bec:	2200      	movs	r2, #0
 8003bee:	4618      	mov	r0, r3
 8003bf0:	4611      	mov	r1, r2
 8003bf2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bf6:	623b      	str	r3, [r7, #32]
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c00:	4642      	mov	r2, r8
 8003c02:	464b      	mov	r3, r9
 8003c04:	f04f 0000 	mov.w	r0, #0
 8003c08:	f04f 0100 	mov.w	r1, #0
 8003c0c:	0159      	lsls	r1, r3, #5
 8003c0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c12:	0150      	lsls	r0, r2, #5
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4641      	mov	r1, r8
 8003c1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c1e:	4649      	mov	r1, r9
 8003c20:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c38:	ebb2 040a 	subs.w	r4, r2, sl
 8003c3c:	eb63 050b 	sbc.w	r5, r3, fp
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	00eb      	lsls	r3, r5, #3
 8003c4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c4e:	00e2      	lsls	r2, r4, #3
 8003c50:	4614      	mov	r4, r2
 8003c52:	461d      	mov	r5, r3
 8003c54:	4643      	mov	r3, r8
 8003c56:	18e3      	adds	r3, r4, r3
 8003c58:	603b      	str	r3, [r7, #0]
 8003c5a:	464b      	mov	r3, r9
 8003c5c:	eb45 0303 	adc.w	r3, r5, r3
 8003c60:	607b      	str	r3, [r7, #4]
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	f04f 0300 	mov.w	r3, #0
 8003c6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c6e:	4629      	mov	r1, r5
 8003c70:	028b      	lsls	r3, r1, #10
 8003c72:	4621      	mov	r1, r4
 8003c74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c78:	4621      	mov	r1, r4
 8003c7a:	028a      	lsls	r2, r1, #10
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	4619      	mov	r1, r3
 8003c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c82:	2200      	movs	r2, #0
 8003c84:	61bb      	str	r3, [r7, #24]
 8003c86:	61fa      	str	r2, [r7, #28]
 8003c88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c8c:	f7fc fa9c 	bl	80001c8 <__aeabi_uldivmod>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4613      	mov	r3, r2
 8003c96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	0c1b      	lsrs	r3, r3, #16
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ca8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cb2:	e002      	b.n	8003cba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cb4:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x204>)
 8003cb6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3750      	adds	r7, #80	; 0x50
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	00f42400 	.word	0x00f42400
 8003cd0:	007a1200 	.word	0x007a1200

08003cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cd8:	4b03      	ldr	r3, [pc, #12]	; (8003ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cda:	681b      	ldr	r3, [r3, #0]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	20000000 	.word	0x20000000

08003cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cf0:	f7ff fff0 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	0a9b      	lsrs	r3, r3, #10
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	4903      	ldr	r1, [pc, #12]	; (8003d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d02:	5ccb      	ldrb	r3, [r1, r3]
 8003d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	08008310 	.word	0x08008310

08003d14 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d105      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d035      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d3c:	4b62      	ldr	r3, [pc, #392]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d42:	f7fc ffef 	bl	8000d24 <HAL_GetTick>
 8003d46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d48:	e008      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d4a:	f7fc ffeb 	bl	8000d24 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e0b0      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d5c:	4b5b      	ldr	r3, [pc, #364]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f0      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	019a      	lsls	r2, r3, #6
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	071b      	lsls	r3, r3, #28
 8003d74:	4955      	ldr	r1, [pc, #340]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d7c:	4b52      	ldr	r3, [pc, #328]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003d7e:	2201      	movs	r2, #1
 8003d80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d82:	f7fc ffcf 	bl	8000d24 <HAL_GetTick>
 8003d86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d88:	e008      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d8a:	f7fc ffcb 	bl	8000d24 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e090      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d9c:	4b4b      	ldr	r3, [pc, #300]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0f0      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 8083 	beq.w	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003db6:	2300      	movs	r3, #0
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	4b44      	ldr	r3, [pc, #272]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	4a43      	ldr	r2, [pc, #268]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc6:	4b41      	ldr	r3, [pc, #260]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003dd2:	4b3f      	ldr	r3, [pc, #252]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a3e      	ldr	r2, [pc, #248]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ddc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003dde:	f7fc ffa1 	bl	8000d24 <HAL_GetTick>
 8003de2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003de4:	e008      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003de6:	f7fc ff9d 	bl	8000d24 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e062      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003df8:	4b35      	ldr	r3, [pc, #212]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0f0      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e04:	4b31      	ldr	r3, [pc, #196]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e0c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d02f      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d028      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e22:	4b2a      	ldr	r3, [pc, #168]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e2a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e2c:	4b29      	ldr	r3, [pc, #164]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e32:	4b28      	ldr	r3, [pc, #160]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e38:	4a24      	ldr	r2, [pc, #144]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e3e:	4b23      	ldr	r3, [pc, #140]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d114      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e4a:	f7fc ff6b 	bl	8000d24 <HAL_GetTick>
 8003e4e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e50:	e00a      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e52:	f7fc ff67 	bl	8000d24 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e02a      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e68:	4b18      	ldr	r3, [pc, #96]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0ee      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e80:	d10d      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003e82:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e96:	490d      	ldr	r1, [pc, #52]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	608b      	str	r3, [r1, #8]
 8003e9c:	e005      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ea4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ea8:	6093      	str	r3, [r2, #8]
 8003eaa:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb6:	4905      	ldr	r1, [pc, #20]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	42470068 	.word	0x42470068
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	40007000 	.word	0x40007000
 8003ed4:	42470e40 	.word	0x42470e40

08003ed8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d13e      	bne.n	8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003ef6:	4b23      	ldr	r3, [pc, #140]	; (8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d12f      	bne.n	8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003f0c:	4b1e      	ldr	r3, [pc, #120]	; (8003f88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f0e:	617b      	str	r3, [r7, #20]
          break;
 8003f10:	e02f      	b.n	8003f72 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003f12:	4b1c      	ldr	r3, [pc, #112]	; (8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f1e:	d108      	bne.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003f20:	4b18      	ldr	r3, [pc, #96]	; (8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f28:	4a18      	ldr	r2, [pc, #96]	; (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2e:	613b      	str	r3, [r7, #16]
 8003f30:	e007      	b.n	8003f42 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003f32:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f3a:	4a15      	ldr	r2, [pc, #84]	; (8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f40:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003f42:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f48:	099b      	lsrs	r3, r3, #6
 8003f4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	fb02 f303 	mul.w	r3, r2, r3
 8003f54:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003f56:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f5c:	0f1b      	lsrs	r3, r3, #28
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f68:	617b      	str	r3, [r7, #20]
          break;
 8003f6a:	e002      	b.n	8003f72 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
          break;
 8003f70:	bf00      	nop
        }
      }
      break;
 8003f72:	bf00      	nop
    }
  }
  return frequency;
 8003f74:	697b      	ldr	r3, [r7, #20]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	371c      	adds	r7, #28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40023800 	.word	0x40023800
 8003f88:	00bb8000 	.word	0x00bb8000
 8003f8c:	007a1200 	.word	0x007a1200
 8003f90:	00f42400 	.word	0x00f42400

08003f94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e07b      	b.n	800409e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d108      	bne.n	8003fc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb6:	d009      	beq.n	8003fcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	61da      	str	r2, [r3, #28]
 8003fbe:	e005      	b.n	8003fcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d106      	bne.n	8003fec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7fc fd92 	bl	8000b10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004002:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	431a      	orrs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004050:	ea42 0103 	orr.w	r1, r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004058:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	0c1b      	lsrs	r3, r3, #16
 800406a:	f003 0104 	and.w	r1, r3, #4
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	f003 0210 	and.w	r2, r3, #16
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	69da      	ldr	r2, [r3, #28]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800408c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040a6:	b084      	sub	sp, #16
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	f107 001c 	add.w	r0, r7, #28
 80040b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d122      	bne.n	8004104 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80040d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80040e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d105      	bne.n	80040f8 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f001 fbed 	bl	80058d8 <USB_CoreReset>
 80040fe:	4603      	mov	r3, r0
 8004100:	73fb      	strb	r3, [r7, #15]
 8004102:	e01a      	b.n	800413a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f001 fbe1 	bl	80058d8 <USB_CoreReset>
 8004116:	4603      	mov	r3, r0
 8004118:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800411a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800411c:	2b00      	cmp	r3, #0
 800411e:	d106      	bne.n	800412e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004124:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	639a      	str	r2, [r3, #56]	; 0x38
 800412c:	e005      	b.n	800413a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004132:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	2b01      	cmp	r3, #1
 800413e:	d10b      	bne.n	8004158 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f043 0206 	orr.w	r2, r3, #6
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f043 0220 	orr.w	r2, r3, #32
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004158:	7bfb      	ldrb	r3, [r7, #15]
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004164:	b004      	add	sp, #16
 8004166:	4770      	bx	lr

08004168 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	4613      	mov	r3, r2
 8004174:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	2b02      	cmp	r3, #2
 800417a:	d165      	bne.n	8004248 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4a41      	ldr	r2, [pc, #260]	; (8004284 <USB_SetTurnaroundTime+0x11c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d906      	bls.n	8004192 <USB_SetTurnaroundTime+0x2a>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	4a40      	ldr	r2, [pc, #256]	; (8004288 <USB_SetTurnaroundTime+0x120>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d202      	bcs.n	8004192 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800418c:	230f      	movs	r3, #15
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	e062      	b.n	8004258 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	4a3c      	ldr	r2, [pc, #240]	; (8004288 <USB_SetTurnaroundTime+0x120>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d306      	bcc.n	80041a8 <USB_SetTurnaroundTime+0x40>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	4a3b      	ldr	r2, [pc, #236]	; (800428c <USB_SetTurnaroundTime+0x124>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d202      	bcs.n	80041a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80041a2:	230e      	movs	r3, #14
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	e057      	b.n	8004258 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	4a38      	ldr	r2, [pc, #224]	; (800428c <USB_SetTurnaroundTime+0x124>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d306      	bcc.n	80041be <USB_SetTurnaroundTime+0x56>
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4a37      	ldr	r2, [pc, #220]	; (8004290 <USB_SetTurnaroundTime+0x128>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d202      	bcs.n	80041be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80041b8:	230d      	movs	r3, #13
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	e04c      	b.n	8004258 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	4a33      	ldr	r2, [pc, #204]	; (8004290 <USB_SetTurnaroundTime+0x128>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d306      	bcc.n	80041d4 <USB_SetTurnaroundTime+0x6c>
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	4a32      	ldr	r2, [pc, #200]	; (8004294 <USB_SetTurnaroundTime+0x12c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d802      	bhi.n	80041d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80041ce:	230c      	movs	r3, #12
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	e041      	b.n	8004258 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4a2f      	ldr	r2, [pc, #188]	; (8004294 <USB_SetTurnaroundTime+0x12c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d906      	bls.n	80041ea <USB_SetTurnaroundTime+0x82>
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4a2e      	ldr	r2, [pc, #184]	; (8004298 <USB_SetTurnaroundTime+0x130>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d802      	bhi.n	80041ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80041e4:	230b      	movs	r3, #11
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	e036      	b.n	8004258 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	4a2a      	ldr	r2, [pc, #168]	; (8004298 <USB_SetTurnaroundTime+0x130>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d906      	bls.n	8004200 <USB_SetTurnaroundTime+0x98>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	4a29      	ldr	r2, [pc, #164]	; (800429c <USB_SetTurnaroundTime+0x134>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d802      	bhi.n	8004200 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80041fa:	230a      	movs	r3, #10
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	e02b      	b.n	8004258 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4a26      	ldr	r2, [pc, #152]	; (800429c <USB_SetTurnaroundTime+0x134>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d906      	bls.n	8004216 <USB_SetTurnaroundTime+0xae>
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4a25      	ldr	r2, [pc, #148]	; (80042a0 <USB_SetTurnaroundTime+0x138>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d202      	bcs.n	8004216 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004210:	2309      	movs	r3, #9
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	e020      	b.n	8004258 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	4a21      	ldr	r2, [pc, #132]	; (80042a0 <USB_SetTurnaroundTime+0x138>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d306      	bcc.n	800422c <USB_SetTurnaroundTime+0xc4>
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	4a20      	ldr	r2, [pc, #128]	; (80042a4 <USB_SetTurnaroundTime+0x13c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d802      	bhi.n	800422c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004226:	2308      	movs	r3, #8
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	e015      	b.n	8004258 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4a1d      	ldr	r2, [pc, #116]	; (80042a4 <USB_SetTurnaroundTime+0x13c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d906      	bls.n	8004242 <USB_SetTurnaroundTime+0xda>
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4a1c      	ldr	r2, [pc, #112]	; (80042a8 <USB_SetTurnaroundTime+0x140>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d202      	bcs.n	8004242 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800423c:	2307      	movs	r3, #7
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	e00a      	b.n	8004258 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004242:	2306      	movs	r3, #6
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	e007      	b.n	8004258 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004248:	79fb      	ldrb	r3, [r7, #7]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d102      	bne.n	8004254 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800424e:	2309      	movs	r3, #9
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	e001      	b.n	8004258 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004254:	2309      	movs	r3, #9
 8004256:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	029b      	lsls	r3, r3, #10
 800426c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004270:	431a      	orrs	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	371c      	adds	r7, #28
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	00d8acbf 	.word	0x00d8acbf
 8004288:	00e4e1c0 	.word	0x00e4e1c0
 800428c:	00f42400 	.word	0x00f42400
 8004290:	01067380 	.word	0x01067380
 8004294:	011a499f 	.word	0x011a499f
 8004298:	01312cff 	.word	0x01312cff
 800429c:	014ca43f 	.word	0x014ca43f
 80042a0:	016e3600 	.word	0x016e3600
 80042a4:	01a6ab1f 	.word	0x01a6ab1f
 80042a8:	01e84800 	.word	0x01e84800

080042ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f043 0201 	orr.w	r2, r3, #1
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f023 0201 	bic.w	r2, r3, #1
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d115      	bne.n	800433e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800431e:	2001      	movs	r0, #1
 8004320:	f7fc fd0c 	bl	8000d3c <HAL_Delay>
      ms++;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3301      	adds	r3, #1
 8004328:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f001 fa45 	bl	80057ba <USB_GetMode>
 8004330:	4603      	mov	r3, r0
 8004332:	2b01      	cmp	r3, #1
 8004334:	d01e      	beq.n	8004374 <USB_SetCurrentMode+0x84>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2b31      	cmp	r3, #49	; 0x31
 800433a:	d9f0      	bls.n	800431e <USB_SetCurrentMode+0x2e>
 800433c:	e01a      	b.n	8004374 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d115      	bne.n	8004370 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004350:	2001      	movs	r0, #1
 8004352:	f7fc fcf3 	bl	8000d3c <HAL_Delay>
      ms++;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	3301      	adds	r3, #1
 800435a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f001 fa2c 	bl	80057ba <USB_GetMode>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <USB_SetCurrentMode+0x84>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b31      	cmp	r3, #49	; 0x31
 800436c:	d9f0      	bls.n	8004350 <USB_SetCurrentMode+0x60>
 800436e:	e001      	b.n	8004374 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e005      	b.n	8004380 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b32      	cmp	r3, #50	; 0x32
 8004378:	d101      	bne.n	800437e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004388:	b084      	sub	sp, #16
 800438a:	b580      	push	{r7, lr}
 800438c:	b086      	sub	sp, #24
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004396:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80043a2:	2300      	movs	r3, #0
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	e009      	b.n	80043bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	3340      	adds	r3, #64	; 0x40
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	2200      	movs	r2, #0
 80043b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	3301      	adds	r3, #1
 80043ba:	613b      	str	r3, [r7, #16]
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	2b0e      	cmp	r3, #14
 80043c0:	d9f2      	bls.n	80043a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80043c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d11c      	bne.n	8004402 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043d6:	f043 0302 	orr.w	r3, r3, #2
 80043da:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	639a      	str	r2, [r3, #56]	; 0x38
 8004400:	e00b      	b.n	800441a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004406:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004412:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004420:	461a      	mov	r2, r3
 8004422:	2300      	movs	r3, #0
 8004424:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800442c:	4619      	mov	r1, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004434:	461a      	mov	r2, r3
 8004436:	680b      	ldr	r3, [r1, #0]
 8004438:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800443a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443c:	2b01      	cmp	r3, #1
 800443e:	d10c      	bne.n	800445a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004442:	2b00      	cmp	r3, #0
 8004444:	d104      	bne.n	8004450 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004446:	2100      	movs	r1, #0
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f965 	bl	8004718 <USB_SetDevSpeed>
 800444e:	e008      	b.n	8004462 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004450:	2101      	movs	r1, #1
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f960 	bl	8004718 <USB_SetDevSpeed>
 8004458:	e003      	b.n	8004462 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800445a:	2103      	movs	r1, #3
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f95b 	bl	8004718 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004462:	2110      	movs	r1, #16
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f8f3 	bl	8004650 <USB_FlushTxFifo>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f91f 	bl	80046b8 <USB_FlushRxFifo>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448a:	461a      	mov	r2, r3
 800448c:	2300      	movs	r3, #0
 800448e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004496:	461a      	mov	r2, r3
 8004498:	2300      	movs	r3, #0
 800449a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a2:	461a      	mov	r2, r3
 80044a4:	2300      	movs	r3, #0
 80044a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044a8:	2300      	movs	r3, #0
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	e043      	b.n	8004536 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044c4:	d118      	bne.n	80044f8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d8:	461a      	mov	r2, r3
 80044da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	e013      	b.n	800450a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ee:	461a      	mov	r2, r3
 80044f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	e008      	b.n	800450a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004504:	461a      	mov	r2, r3
 8004506:	2300      	movs	r3, #0
 8004508:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4413      	add	r3, r2
 8004512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004516:	461a      	mov	r2, r3
 8004518:	2300      	movs	r3, #0
 800451a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004528:	461a      	mov	r2, r3
 800452a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800452e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	3301      	adds	r3, #1
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	429a      	cmp	r2, r3
 800453c:	d3b7      	bcc.n	80044ae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800453e:	2300      	movs	r3, #0
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	e043      	b.n	80045cc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800455a:	d118      	bne.n	800458e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10a      	bne.n	8004578 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456e:	461a      	mov	r2, r3
 8004570:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	e013      	b.n	80045a0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004584:	461a      	mov	r2, r3
 8004586:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	e008      	b.n	80045a0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459a:	461a      	mov	r2, r3
 800459c:	2300      	movs	r3, #0
 800459e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ac:	461a      	mov	r2, r3
 80045ae:	2300      	movs	r3, #0
 80045b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045be:	461a      	mov	r2, r3
 80045c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	3301      	adds	r3, #1
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d3b7      	bcc.n	8004544 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80045f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d105      	bne.n	8004608 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	f043 0210 	orr.w	r2, r3, #16
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699a      	ldr	r2, [r3, #24]
 800460c:	4b0f      	ldr	r3, [pc, #60]	; (800464c <USB_DevInit+0x2c4>)
 800460e:	4313      	orrs	r3, r2
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	f043 0208 	orr.w	r2, r3, #8
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004628:	2b01      	cmp	r3, #1
 800462a:	d107      	bne.n	800463c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004634:	f043 0304 	orr.w	r3, r3, #4
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800463c:	7dfb      	ldrb	r3, [r7, #23]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004648:	b004      	add	sp, #16
 800464a:	4770      	bx	lr
 800464c:	803c3800 	.word	0x803c3800

08004650 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3301      	adds	r3, #1
 8004662:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4a13      	ldr	r2, [pc, #76]	; (80046b4 <USB_FlushTxFifo+0x64>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d901      	bls.n	8004670 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e01b      	b.n	80046a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	daf2      	bge.n	800465e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	019b      	lsls	r3, r3, #6
 8004680:	f043 0220 	orr.w	r2, r3, #32
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3301      	adds	r3, #1
 800468c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4a08      	ldr	r2, [pc, #32]	; (80046b4 <USB_FlushTxFifo+0x64>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e006      	b.n	80046a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b20      	cmp	r3, #32
 80046a4:	d0f0      	beq.n	8004688 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	00030d40 	.word	0x00030d40

080046b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3301      	adds	r3, #1
 80046c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4a11      	ldr	r2, [pc, #68]	; (8004714 <USB_FlushRxFifo+0x5c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d901      	bls.n	80046d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e018      	b.n	8004708 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	daf2      	bge.n	80046c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2210      	movs	r2, #16
 80046e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	3301      	adds	r3, #1
 80046ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4a08      	ldr	r2, [pc, #32]	; (8004714 <USB_FlushRxFifo+0x5c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d901      	bls.n	80046fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e006      	b.n	8004708 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f003 0310 	and.w	r3, r3, #16
 8004702:	2b10      	cmp	r3, #16
 8004704:	d0f0      	beq.n	80046e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	00030d40 	.word	0x00030d40

08004718 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	460b      	mov	r3, r1
 8004722:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	68f9      	ldr	r1, [r7, #12]
 8004734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004738:	4313      	orrs	r3, r2
 800473a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800474a:	b480      	push	{r7}
 800474c:	b087      	sub	sp, #28
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 0306 	and.w	r3, r3, #6
 8004762:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d102      	bne.n	8004770 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800476a:	2300      	movs	r3, #0
 800476c:	75fb      	strb	r3, [r7, #23]
 800476e:	e00a      	b.n	8004786 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b02      	cmp	r3, #2
 8004774:	d002      	beq.n	800477c <USB_GetDevSpeed+0x32>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b06      	cmp	r3, #6
 800477a:	d102      	bne.n	8004782 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800477c:	2302      	movs	r3, #2
 800477e:	75fb      	strb	r3, [r7, #23]
 8004780:	e001      	b.n	8004786 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004782:	230f      	movs	r3, #15
 8004784:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004786:	7dfb      	ldrb	r3, [r7, #23]
}
 8004788:	4618      	mov	r0, r3
 800478a:	371c      	adds	r7, #28
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	785b      	ldrb	r3, [r3, #1]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d13a      	bne.n	8004826 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	f003 030f 	and.w	r3, r3, #15
 80047c0:	2101      	movs	r1, #1
 80047c2:	fa01 f303 	lsl.w	r3, r1, r3
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	68f9      	ldr	r1, [r7, #12]
 80047ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047ce:	4313      	orrs	r3, r2
 80047d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d155      	bne.n	8004894 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	791b      	ldrb	r3, [r3, #4]
 8004802:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004804:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	059b      	lsls	r3, r3, #22
 800480a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800480c:	4313      	orrs	r3, r2
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	0151      	lsls	r1, r2, #5
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	440a      	add	r2, r1
 8004816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800481a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800481e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	e036      	b.n	8004894 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482c:	69da      	ldr	r2, [r3, #28]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	2101      	movs	r1, #1
 8004838:	fa01 f303 	lsl.w	r3, r1, r3
 800483c:	041b      	lsls	r3, r3, #16
 800483e:	68f9      	ldr	r1, [r7, #12]
 8004840:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004844:	4313      	orrs	r3, r2
 8004846:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d11a      	bne.n	8004894 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	791b      	ldrb	r3, [r3, #4]
 8004878:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800487a:	430b      	orrs	r3, r1
 800487c:	4313      	orrs	r3, r2
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	0151      	lsls	r1, r2, #5
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	440a      	add	r2, r1
 8004886:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800488a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800488e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004892:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
	...

080048a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	785b      	ldrb	r3, [r3, #1]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d161      	bne.n	8004984 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048d6:	d11f      	bne.n	8004918 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	0151      	lsls	r1, r2, #5
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	440a      	add	r2, r1
 80048ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	0151      	lsls	r1, r2, #5
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	440a      	add	r2, r1
 800490e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004912:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004916:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	f003 030f 	and.w	r3, r3, #15
 8004928:	2101      	movs	r1, #1
 800492a:	fa01 f303 	lsl.w	r3, r1, r3
 800492e:	b29b      	uxth	r3, r3
 8004930:	43db      	mvns	r3, r3
 8004932:	68f9      	ldr	r1, [r7, #12]
 8004934:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004938:	4013      	ands	r3, r2
 800493a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004942:	69da      	ldr	r2, [r3, #28]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	2101      	movs	r1, #1
 800494e:	fa01 f303 	lsl.w	r3, r1, r3
 8004952:	b29b      	uxth	r3, r3
 8004954:	43db      	mvns	r3, r3
 8004956:	68f9      	ldr	r1, [r7, #12]
 8004958:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800495c:	4013      	ands	r3, r2
 800495e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	0159      	lsls	r1, r3, #5
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	440b      	add	r3, r1
 8004976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497a:	4619      	mov	r1, r3
 800497c:	4b35      	ldr	r3, [pc, #212]	; (8004a54 <USB_DeactivateEndpoint+0x1b0>)
 800497e:	4013      	ands	r3, r2
 8004980:	600b      	str	r3, [r1, #0]
 8004982:	e060      	b.n	8004a46 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004996:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800499a:	d11f      	bne.n	80049dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	0151      	lsls	r1, r2, #5
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	440a      	add	r2, r1
 80049b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	0151      	lsls	r1, r2, #5
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	440a      	add	r2, r1
 80049d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	f003 030f 	and.w	r3, r3, #15
 80049ec:	2101      	movs	r1, #1
 80049ee:	fa01 f303 	lsl.w	r3, r1, r3
 80049f2:	041b      	lsls	r3, r3, #16
 80049f4:	43db      	mvns	r3, r3
 80049f6:	68f9      	ldr	r1, [r7, #12]
 80049f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049fc:	4013      	ands	r3, r2
 80049fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a06:	69da      	ldr	r2, [r3, #28]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	f003 030f 	and.w	r3, r3, #15
 8004a10:	2101      	movs	r1, #1
 8004a12:	fa01 f303 	lsl.w	r3, r1, r3
 8004a16:	041b      	lsls	r3, r3, #16
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	68f9      	ldr	r1, [r7, #12]
 8004a1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a20:	4013      	ands	r3, r2
 8004a22:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	0159      	lsls	r1, r3, #5
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	440b      	add	r3, r1
 8004a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <USB_DeactivateEndpoint+0x1b4>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	ec337800 	.word	0xec337800
 8004a58:	eff37800 	.word	0xeff37800

08004a5c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08a      	sub	sp, #40	; 0x28
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	4613      	mov	r3, r2
 8004a68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	785b      	ldrb	r3, [r3, #1]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	f040 815c 	bne.w	8004d36 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d132      	bne.n	8004aec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	0151      	lsls	r1, r2, #5
 8004a98:	69fa      	ldr	r2, [r7, #28]
 8004a9a:	440a      	add	r2, r1
 8004a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004aa4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004aa8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	0151      	lsls	r1, r2, #5
 8004abc:	69fa      	ldr	r2, [r7, #28]
 8004abe:	440a      	add	r2, r1
 8004ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ac4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ac8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	0151      	lsls	r1, r2, #5
 8004adc:	69fa      	ldr	r2, [r7, #28]
 8004ade:	440a      	add	r2, r1
 8004ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ae4:	0cdb      	lsrs	r3, r3, #19
 8004ae6:	04db      	lsls	r3, r3, #19
 8004ae8:	6113      	str	r3, [r2, #16]
 8004aea:	e074      	b.n	8004bd6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	0151      	lsls	r1, r2, #5
 8004afe:	69fa      	ldr	r2, [r7, #28]
 8004b00:	440a      	add	r2, r1
 8004b02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b06:	0cdb      	lsrs	r3, r3, #19
 8004b08:	04db      	lsls	r3, r3, #19
 8004b0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	0151      	lsls	r1, r2, #5
 8004b1e:	69fa      	ldr	r2, [r7, #28]
 8004b20:	440a      	add	r2, r1
 8004b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	6999      	ldr	r1, [r3, #24]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	440b      	add	r3, r1
 8004b48:	1e59      	subs	r1, r3, #1
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b52:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004b54:	4b9d      	ldr	r3, [pc, #628]	; (8004dcc <USB_EPStartXfer+0x370>)
 8004b56:	400b      	ands	r3, r1
 8004b58:	69b9      	ldr	r1, [r7, #24]
 8004b5a:	0148      	lsls	r0, r1, #5
 8004b5c:	69f9      	ldr	r1, [r7, #28]
 8004b5e:	4401      	add	r1, r0
 8004b60:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b64:	4313      	orrs	r3, r2
 8004b66:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b7e:	69b9      	ldr	r1, [r7, #24]
 8004b80:	0148      	lsls	r0, r1, #5
 8004b82:	69f9      	ldr	r1, [r7, #28]
 8004b84:	4401      	add	r1, r0
 8004b86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	791b      	ldrb	r3, [r3, #4]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d11f      	bne.n	8004bd6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	0151      	lsls	r1, r2, #5
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	440a      	add	r2, r1
 8004bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004bb4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	0151      	lsls	r1, r2, #5
 8004bc8:	69fa      	ldr	r2, [r7, #28]
 8004bca:	440a      	add	r2, r1
 8004bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bd4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d14b      	bne.n	8004c74 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d009      	beq.n	8004bf8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	791b      	ldrb	r3, [r3, #4]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d128      	bne.n	8004c52 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d110      	bne.n	8004c32 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	0151      	lsls	r1, r2, #5
 8004c22:	69fa      	ldr	r2, [r7, #28]
 8004c24:	440a      	add	r2, r1
 8004c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	e00f      	b.n	8004c52 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	0151      	lsls	r1, r2, #5
 8004c44:	69fa      	ldr	r2, [r7, #28]
 8004c46:	440a      	add	r2, r1
 8004c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c50:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	0151      	lsls	r1, r2, #5
 8004c64:	69fa      	ldr	r2, [r7, #28]
 8004c66:	440a      	add	r2, r1
 8004c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	e133      	b.n	8004edc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	0151      	lsls	r1, r2, #5
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	440a      	add	r2, r1
 8004c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c92:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	791b      	ldrb	r3, [r3, #4]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d015      	beq.n	8004cc8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 811b 	beq.w	8004edc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cbc:	69f9      	ldr	r1, [r7, #28]
 8004cbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	634b      	str	r3, [r1, #52]	; 0x34
 8004cc6:	e109      	b.n	8004edc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d110      	bne.n	8004cfa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	0151      	lsls	r1, r2, #5
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	440a      	add	r2, r1
 8004cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	e00f      	b.n	8004d1a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	0151      	lsls	r1, r2, #5
 8004d0c:	69fa      	ldr	r2, [r7, #28]
 8004d0e:	440a      	add	r2, r1
 8004d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d18:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	6919      	ldr	r1, [r3, #16]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	781a      	ldrb	r2, [r3, #0]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	b298      	uxth	r0, r3
 8004d28:	79fb      	ldrb	r3, [r7, #7]
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 fade 	bl	80052f0 <USB_WritePacket>
 8004d34:	e0d2      	b.n	8004edc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	0151      	lsls	r1, r2, #5
 8004d48:	69fa      	ldr	r2, [r7, #28]
 8004d4a:	440a      	add	r2, r1
 8004d4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d50:	0cdb      	lsrs	r3, r3, #19
 8004d52:	04db      	lsls	r3, r3, #19
 8004d54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	0151      	lsls	r1, r2, #5
 8004d68:	69fa      	ldr	r2, [r7, #28]
 8004d6a:	440a      	add	r2, r1
 8004d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d78:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d126      	bne.n	8004dd0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d98:	69b9      	ldr	r1, [r7, #24]
 8004d9a:	0148      	lsls	r0, r1, #5
 8004d9c:	69f9      	ldr	r1, [r7, #28]
 8004d9e:	4401      	add	r1, r0
 8004da0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004da4:	4313      	orrs	r3, r2
 8004da6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	0151      	lsls	r1, r2, #5
 8004dba:	69fa      	ldr	r2, [r7, #28]
 8004dbc:	440a      	add	r2, r1
 8004dbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dc6:	6113      	str	r3, [r2, #16]
 8004dc8:	e03a      	b.n	8004e40 <USB_EPStartXfer+0x3e4>
 8004dca:	bf00      	nop
 8004dcc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	699a      	ldr	r2, [r3, #24]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	4413      	add	r3, r2
 8004dda:	1e5a      	subs	r2, r3, #1
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	8afa      	ldrh	r2, [r7, #22]
 8004dec:	fb03 f202 	mul.w	r2, r3, r2
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e00:	691a      	ldr	r2, [r3, #16]
 8004e02:	8afb      	ldrh	r3, [r7, #22]
 8004e04:	04d9      	lsls	r1, r3, #19
 8004e06:	4b38      	ldr	r3, [pc, #224]	; (8004ee8 <USB_EPStartXfer+0x48c>)
 8004e08:	400b      	ands	r3, r1
 8004e0a:	69b9      	ldr	r1, [r7, #24]
 8004e0c:	0148      	lsls	r0, r1, #5
 8004e0e:	69f9      	ldr	r1, [r7, #28]
 8004e10:	4401      	add	r1, r0
 8004e12:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e16:	4313      	orrs	r3, r2
 8004e18:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e30:	69b9      	ldr	r1, [r7, #24]
 8004e32:	0148      	lsls	r0, r1, #5
 8004e34:	69f9      	ldr	r1, [r7, #28]
 8004e36:	4401      	add	r1, r0
 8004e38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d10d      	bne.n	8004e62 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d009      	beq.n	8004e62 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	6919      	ldr	r1, [r3, #16]
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5e:	460a      	mov	r2, r1
 8004e60:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	791b      	ldrb	r3, [r3, #4]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d128      	bne.n	8004ebc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d110      	bne.n	8004e9c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	0151      	lsls	r1, r2, #5
 8004e8c:	69fa      	ldr	r2, [r7, #28]
 8004e8e:	440a      	add	r2, r1
 8004e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	e00f      	b.n	8004ebc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	0151      	lsls	r1, r2, #5
 8004eae:	69fa      	ldr	r2, [r7, #28]
 8004eb0:	440a      	add	r2, r1
 8004eb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	0151      	lsls	r1, r2, #5
 8004ece:	69fa      	ldr	r2, [r7, #28]
 8004ed0:	440a      	add	r2, r1
 8004ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ed6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004eda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3720      	adds	r7, #32
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	1ff80000 	.word	0x1ff80000

08004eec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	785b      	ldrb	r3, [r3, #1]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	f040 80ce 	bne.w	80050aa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d132      	bne.n	8004f7c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	0151      	lsls	r1, r2, #5
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	440a      	add	r2, r1
 8004f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	0151      	lsls	r1, r2, #5
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	440a      	add	r2, r1
 8004f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	0151      	lsls	r1, r2, #5
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	440a      	add	r2, r1
 8004f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f74:	0cdb      	lsrs	r3, r3, #19
 8004f76:	04db      	lsls	r3, r3, #19
 8004f78:	6113      	str	r3, [r2, #16]
 8004f7a:	e04e      	b.n	800501a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	0151      	lsls	r1, r2, #5
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	440a      	add	r2, r1
 8004f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f96:	0cdb      	lsrs	r3, r3, #19
 8004f98:	04db      	lsls	r3, r3, #19
 8004f9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	0151      	lsls	r1, r2, #5
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	440a      	add	r2, r1
 8004fb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fbe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	699a      	ldr	r2, [r3, #24]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d903      	bls.n	8004fd4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	0151      	lsls	r1, r2, #5
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	440a      	add	r2, r1
 8004fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ff2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005000:	691a      	ldr	r2, [r3, #16]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800500a:	6939      	ldr	r1, [r7, #16]
 800500c:	0148      	lsls	r0, r1, #5
 800500e:	6979      	ldr	r1, [r7, #20]
 8005010:	4401      	add	r1, r0
 8005012:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005016:	4313      	orrs	r3, r2
 8005018:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d11e      	bne.n	800505e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d009      	beq.n	800503c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005034:	461a      	mov	r2, r3
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	0151      	lsls	r1, r2, #5
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	440a      	add	r2, r1
 8005052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005056:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	e097      	b.n	800518e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	0151      	lsls	r1, r2, #5
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	440a      	add	r2, r1
 8005074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005078:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800507c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 8083 	beq.w	800518e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	f003 030f 	and.w	r3, r3, #15
 8005098:	2101      	movs	r1, #1
 800509a:	fa01 f303 	lsl.w	r3, r1, r3
 800509e:	6979      	ldr	r1, [r7, #20]
 80050a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050a4:	4313      	orrs	r3, r2
 80050a6:	634b      	str	r3, [r1, #52]	; 0x34
 80050a8:	e071      	b.n	800518e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	0151      	lsls	r1, r2, #5
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	440a      	add	r2, r1
 80050c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050c4:	0cdb      	lsrs	r3, r3, #19
 80050c6:	04db      	lsls	r3, r3, #19
 80050c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	0151      	lsls	r1, r2, #5
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	440a      	add	r2, r1
 80050e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050ec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	0151      	lsls	r1, r2, #5
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	440a      	add	r2, r1
 800511c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005120:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005124:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800513c:	6939      	ldr	r1, [r7, #16]
 800513e:	0148      	lsls	r0, r1, #5
 8005140:	6979      	ldr	r1, [r7, #20]
 8005142:	4401      	add	r1, r0
 8005144:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005148:	4313      	orrs	r3, r2
 800514a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800514c:	79fb      	ldrb	r3, [r7, #7]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d10d      	bne.n	800516e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d009      	beq.n	800516e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	6919      	ldr	r1, [r3, #16]
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516a:	460a      	mov	r2, r1
 800516c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	0151      	lsls	r1, r2, #5
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	440a      	add	r2, r1
 8005184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005188:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800518c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	371c      	adds	r7, #28
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	785b      	ldrb	r3, [r3, #1]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d14a      	bne.n	8005250 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051d2:	f040 8086 	bne.w	80052e2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	7812      	ldrb	r2, [r2, #0]
 80051ea:	0151      	lsls	r1, r2, #5
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	440a      	add	r2, r1
 80051f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051f8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	7812      	ldrb	r2, [r2, #0]
 800520e:	0151      	lsls	r1, r2, #5
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	440a      	add	r2, r1
 8005214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005218:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800521c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	3301      	adds	r3, #1
 8005222:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f242 7210 	movw	r2, #10000	; 0x2710
 800522a:	4293      	cmp	r3, r2
 800522c:	d902      	bls.n	8005234 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	75fb      	strb	r3, [r7, #23]
          break;
 8005232:	e056      	b.n	80052e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005248:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800524c:	d0e7      	beq.n	800521e <USB_EPStopXfer+0x82>
 800524e:	e048      	b.n	80052e2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005264:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005268:	d13b      	bne.n	80052e2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	7812      	ldrb	r2, [r2, #0]
 800527e:	0151      	lsls	r1, r2, #5
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	440a      	add	r2, r1
 8005284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005288:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800528c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	7812      	ldrb	r2, [r2, #0]
 80052a2:	0151      	lsls	r1, r2, #5
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	440a      	add	r2, r1
 80052a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3301      	adds	r3, #1
 80052b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80052be:	4293      	cmp	r3, r2
 80052c0:	d902      	bls.n	80052c8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	75fb      	strb	r3, [r7, #23]
          break;
 80052c6:	e00c      	b.n	80052e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052e0:	d0e7      	beq.n	80052b2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80052e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	371c      	adds	r7, #28
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b089      	sub	sp, #36	; 0x24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	4611      	mov	r1, r2
 80052fc:	461a      	mov	r2, r3
 80052fe:	460b      	mov	r3, r1
 8005300:	71fb      	strb	r3, [r7, #7]
 8005302:	4613      	mov	r3, r2
 8005304:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800530e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005312:	2b00      	cmp	r3, #0
 8005314:	d123      	bne.n	800535e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005316:	88bb      	ldrh	r3, [r7, #4]
 8005318:	3303      	adds	r3, #3
 800531a:	089b      	lsrs	r3, r3, #2
 800531c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800531e:	2300      	movs	r3, #0
 8005320:	61bb      	str	r3, [r7, #24]
 8005322:	e018      	b.n	8005356 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005324:	79fb      	ldrb	r3, [r7, #7]
 8005326:	031a      	lsls	r2, r3, #12
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	4413      	add	r3, r2
 800532c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005330:	461a      	mov	r2, r3
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	3301      	adds	r3, #1
 800533c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	3301      	adds	r3, #1
 8005342:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	3301      	adds	r3, #1
 8005348:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	3301      	adds	r3, #1
 800534e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	3301      	adds	r3, #1
 8005354:	61bb      	str	r3, [r7, #24]
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	429a      	cmp	r2, r3
 800535c:	d3e2      	bcc.n	8005324 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3724      	adds	r7, #36	; 0x24
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800536c:	b480      	push	{r7}
 800536e:	b08b      	sub	sp, #44	; 0x2c
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	4613      	mov	r3, r2
 8005378:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005382:	88fb      	ldrh	r3, [r7, #6]
 8005384:	089b      	lsrs	r3, r3, #2
 8005386:	b29b      	uxth	r3, r3
 8005388:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800538a:	88fb      	ldrh	r3, [r7, #6]
 800538c:	f003 0303 	and.w	r3, r3, #3
 8005390:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005392:	2300      	movs	r3, #0
 8005394:	623b      	str	r3, [r7, #32]
 8005396:	e014      	b.n	80053c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	3301      	adds	r3, #1
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	3301      	adds	r3, #1
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	3301      	adds	r3, #1
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	3301      	adds	r3, #1
 80053ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	3301      	adds	r3, #1
 80053c0:	623b      	str	r3, [r7, #32]
 80053c2:	6a3a      	ldr	r2, [r7, #32]
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d3e6      	bcc.n	8005398 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80053ca:	8bfb      	ldrh	r3, [r7, #30]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d01e      	beq.n	800540e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053da:	461a      	mov	r2, r3
 80053dc:	f107 0310 	add.w	r3, r7, #16
 80053e0:	6812      	ldr	r2, [r2, #0]
 80053e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	fa22 f303 	lsr.w	r3, r2, r3
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	701a      	strb	r2, [r3, #0]
      i++;
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	3301      	adds	r3, #1
 80053fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	3301      	adds	r3, #1
 8005400:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005402:	8bfb      	ldrh	r3, [r7, #30]
 8005404:	3b01      	subs	r3, #1
 8005406:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005408:	8bfb      	ldrh	r3, [r7, #30]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1ea      	bne.n	80053e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005410:	4618      	mov	r0, r3
 8005412:	372c      	adds	r7, #44	; 0x2c
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	785b      	ldrb	r3, [r3, #1]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d12c      	bne.n	8005492 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	db12      	blt.n	8005470 <USB_EPSetStall+0x54>
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00f      	beq.n	8005470 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	0151      	lsls	r1, r2, #5
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	440a      	add	r2, r1
 8005466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800546a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800546e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	0151      	lsls	r1, r2, #5
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	440a      	add	r2, r1
 8005486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800548a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	e02b      	b.n	80054ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	db12      	blt.n	80054ca <USB_EPSetStall+0xae>
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00f      	beq.n	80054ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	0151      	lsls	r1, r2, #5
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	440a      	add	r2, r1
 80054c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	0151      	lsls	r1, r2, #5
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	440a      	add	r2, r1
 80054e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	785b      	ldrb	r3, [r3, #1]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d128      	bne.n	8005566 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	0151      	lsls	r1, r2, #5
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	440a      	add	r2, r1
 800552a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005532:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	791b      	ldrb	r3, [r3, #4]
 8005538:	2b03      	cmp	r3, #3
 800553a:	d003      	beq.n	8005544 <USB_EPClearStall+0x4c>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	791b      	ldrb	r3, [r3, #4]
 8005540:	2b02      	cmp	r3, #2
 8005542:	d138      	bne.n	80055b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	0151      	lsls	r1, r2, #5
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	440a      	add	r2, r1
 800555a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800555e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	e027      	b.n	80055b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	0151      	lsls	r1, r2, #5
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	440a      	add	r2, r1
 800557c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005580:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005584:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	791b      	ldrb	r3, [r3, #4]
 800558a:	2b03      	cmp	r3, #3
 800558c:	d003      	beq.n	8005596 <USB_EPClearStall+0x9e>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	791b      	ldrb	r3, [r3, #4]
 8005592:	2b02      	cmp	r3, #2
 8005594:	d10f      	bne.n	80055b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	0151      	lsls	r1, r2, #5
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	440a      	add	r2, r1
 80055ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	460b      	mov	r3, r1
 80055ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80055e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	78fb      	ldrb	r3, [r7, #3]
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80055f8:	68f9      	ldr	r1, [r7, #12]
 80055fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055fe:	4313      	orrs	r3, r2
 8005600:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800562a:	f023 0303 	bic.w	r3, r3, #3
 800562e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800563e:	f023 0302 	bic.w	r3, r3, #2
 8005642:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005652:	b480      	push	{r7}
 8005654:	b085      	sub	sp, #20
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800566c:	f023 0303 	bic.w	r3, r3, #3
 8005670:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005680:	f043 0302 	orr.w	r3, r3, #2
 8005684:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4013      	ands	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80056ac:	68fb      	ldr	r3, [r7, #12]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b085      	sub	sp, #20
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	4013      	ands	r3, r2
 80056dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	0c1b      	lsrs	r3, r3, #16
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b085      	sub	sp, #20
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	4013      	ands	r3, r2
 8005710:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	b29b      	uxth	r3, r3
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005722:	b480      	push	{r7}
 8005724:	b085      	sub	sp, #20
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	460b      	mov	r3, r1
 800572c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005732:	78fb      	ldrb	r3, [r7, #3]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	4013      	ands	r3, r2
 800574e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005750:	68bb      	ldr	r3, [r7, #8]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800575e:	b480      	push	{r7}
 8005760:	b087      	sub	sp, #28
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	460b      	mov	r3, r1
 8005768:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005780:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005782:	78fb      	ldrb	r3, [r7, #3]
 8005784:	f003 030f 	and.w	r3, r3, #15
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	fa22 f303 	lsr.w	r3, r2, r3
 800578e:	01db      	lsls	r3, r3, #7
 8005790:	b2db      	uxtb	r3, r3
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	4313      	orrs	r3, r2
 8005796:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005798:	78fb      	ldrb	r3, [r7, #3]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	4013      	ands	r3, r2
 80057aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057ac:	68bb      	ldr	r3, [r7, #8]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	371c      	adds	r7, #28
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	f003 0301 	and.w	r3, r3, #1
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b085      	sub	sp, #20
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80057f4:	f023 0307 	bic.w	r3, r3, #7
 80057f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800580c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	460b      	mov	r3, r1
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	333c      	adds	r3, #60	; 0x3c
 8005832:	3304      	adds	r3, #4
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	4a26      	ldr	r2, [pc, #152]	; (80058d4 <USB_EP0_OutStart+0xb8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d90a      	bls.n	8005856 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800584c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005850:	d101      	bne.n	8005856 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	e037      	b.n	80058c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585c:	461a      	mov	r2, r3
 800585e:	2300      	movs	r3, #0
 8005860:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005870:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005874:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005884:	f043 0318 	orr.w	r3, r3, #24
 8005888:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005898:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800589c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800589e:	7afb      	ldrb	r3, [r7, #11]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d10f      	bne.n	80058c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058aa:	461a      	mov	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80058c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	371c      	adds	r7, #28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	4f54300a 	.word	0x4f54300a

080058d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3301      	adds	r3, #1
 80058e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4a13      	ldr	r2, [pc, #76]	; (800593c <USB_CoreReset+0x64>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d901      	bls.n	80058f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e01b      	b.n	800592e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	daf2      	bge.n	80058e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058fe:	2300      	movs	r3, #0
 8005900:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	f043 0201 	orr.w	r2, r3, #1
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	3301      	adds	r3, #1
 8005912:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4a09      	ldr	r2, [pc, #36]	; (800593c <USB_CoreReset+0x64>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d901      	bls.n	8005920 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e006      	b.n	800592e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b01      	cmp	r3, #1
 800592a:	d0f0      	beq.n	800590e <USB_CoreReset+0x36>

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	00030d40 	.word	0x00030d40

08005940 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800594c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005950:	f002 fc36 	bl	80081c0 <USBD_static_malloc>
 8005954:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d109      	bne.n	8005970 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	32b0      	adds	r2, #176	; 0xb0
 8005966:	2100      	movs	r1, #0
 8005968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800596c:	2302      	movs	r3, #2
 800596e:	e0d4      	b.n	8005b1a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005970:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005974:	2100      	movs	r1, #0
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f002 fc66 	bl	8008248 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	32b0      	adds	r2, #176	; 0xb0
 8005986:	68f9      	ldr	r1, [r7, #12]
 8005988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	32b0      	adds	r2, #176	; 0xb0
 8005996:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	7c1b      	ldrb	r3, [r3, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d138      	bne.n	8005a1a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80059a8:	4b5e      	ldr	r3, [pc, #376]	; (8005b24 <USBD_CDC_Init+0x1e4>)
 80059aa:	7819      	ldrb	r1, [r3, #0]
 80059ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059b0:	2202      	movs	r2, #2
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f002 fae1 	bl	8007f7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80059b8:	4b5a      	ldr	r3, [pc, #360]	; (8005b24 <USBD_CDC_Init+0x1e4>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	f003 020f 	and.w	r2, r3, #15
 80059c0:	6879      	ldr	r1, [r7, #4]
 80059c2:	4613      	mov	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	440b      	add	r3, r1
 80059cc:	3324      	adds	r3, #36	; 0x24
 80059ce:	2201      	movs	r2, #1
 80059d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80059d2:	4b55      	ldr	r3, [pc, #340]	; (8005b28 <USBD_CDC_Init+0x1e8>)
 80059d4:	7819      	ldrb	r1, [r3, #0]
 80059d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059da:	2202      	movs	r2, #2
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f002 facc 	bl	8007f7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80059e2:	4b51      	ldr	r3, [pc, #324]	; (8005b28 <USBD_CDC_Init+0x1e8>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	f003 020f 	and.w	r2, r3, #15
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80059fa:	2201      	movs	r2, #1
 80059fc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80059fe:	4b4b      	ldr	r3, [pc, #300]	; (8005b2c <USBD_CDC_Init+0x1ec>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	f003 020f 	and.w	r2, r3, #15
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	440b      	add	r3, r1
 8005a12:	3326      	adds	r3, #38	; 0x26
 8005a14:	2210      	movs	r2, #16
 8005a16:	801a      	strh	r2, [r3, #0]
 8005a18:	e035      	b.n	8005a86 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005a1a:	4b42      	ldr	r3, [pc, #264]	; (8005b24 <USBD_CDC_Init+0x1e4>)
 8005a1c:	7819      	ldrb	r1, [r3, #0]
 8005a1e:	2340      	movs	r3, #64	; 0x40
 8005a20:	2202      	movs	r2, #2
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f002 faa9 	bl	8007f7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005a28:	4b3e      	ldr	r3, [pc, #248]	; (8005b24 <USBD_CDC_Init+0x1e4>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	f003 020f 	and.w	r2, r3, #15
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	4613      	mov	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	440b      	add	r3, r1
 8005a3c:	3324      	adds	r3, #36	; 0x24
 8005a3e:	2201      	movs	r2, #1
 8005a40:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005a42:	4b39      	ldr	r3, [pc, #228]	; (8005b28 <USBD_CDC_Init+0x1e8>)
 8005a44:	7819      	ldrb	r1, [r3, #0]
 8005a46:	2340      	movs	r3, #64	; 0x40
 8005a48:	2202      	movs	r2, #2
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f002 fa95 	bl	8007f7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005a50:	4b35      	ldr	r3, [pc, #212]	; (8005b28 <USBD_CDC_Init+0x1e8>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	f003 020f 	and.w	r2, r3, #15
 8005a58:	6879      	ldr	r1, [r7, #4]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	440b      	add	r3, r1
 8005a64:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a68:	2201      	movs	r2, #1
 8005a6a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005a6c:	4b2f      	ldr	r3, [pc, #188]	; (8005b2c <USBD_CDC_Init+0x1ec>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	f003 020f 	and.w	r2, r3, #15
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	4613      	mov	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	440b      	add	r3, r1
 8005a80:	3326      	adds	r3, #38	; 0x26
 8005a82:	2210      	movs	r2, #16
 8005a84:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a86:	4b29      	ldr	r3, [pc, #164]	; (8005b2c <USBD_CDC_Init+0x1ec>)
 8005a88:	7819      	ldrb	r1, [r3, #0]
 8005a8a:	2308      	movs	r3, #8
 8005a8c:	2203      	movs	r2, #3
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f002 fa73 	bl	8007f7a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005a94:	4b25      	ldr	r3, [pc, #148]	; (8005b2c <USBD_CDC_Init+0x1ec>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	f003 020f 	and.w	r2, r3, #15
 8005a9c:	6879      	ldr	r1, [r7, #4]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	440b      	add	r3, r1
 8005aa8:	3324      	adds	r3, #36	; 0x24
 8005aaa:	2201      	movs	r2, #1
 8005aac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	33b0      	adds	r3, #176	; 0xb0
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4413      	add	r3, r2
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e018      	b.n	8005b1a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	7c1b      	ldrb	r3, [r3, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10a      	bne.n	8005b06 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005af0:	4b0d      	ldr	r3, [pc, #52]	; (8005b28 <USBD_CDC_Init+0x1e8>)
 8005af2:	7819      	ldrb	r1, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f002 fb2a 	bl	8008158 <USBD_LL_PrepareReceive>
 8005b04:	e008      	b.n	8005b18 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b06:	4b08      	ldr	r3, [pc, #32]	; (8005b28 <USBD_CDC_Init+0x1e8>)
 8005b08:	7819      	ldrb	r1, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b10:	2340      	movs	r3, #64	; 0x40
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f002 fb20 	bl	8008158 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20000093 	.word	0x20000093
 8005b28:	20000094 	.word	0x20000094
 8005b2c:	20000095 	.word	0x20000095

08005b30 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005b3c:	4b3a      	ldr	r3, [pc, #232]	; (8005c28 <USBD_CDC_DeInit+0xf8>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	4619      	mov	r1, r3
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f002 fa3f 	bl	8007fc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005b48:	4b37      	ldr	r3, [pc, #220]	; (8005c28 <USBD_CDC_DeInit+0xf8>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	f003 020f 	and.w	r2, r3, #15
 8005b50:	6879      	ldr	r1, [r7, #4]
 8005b52:	4613      	mov	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	440b      	add	r3, r1
 8005b5c:	3324      	adds	r3, #36	; 0x24
 8005b5e:	2200      	movs	r2, #0
 8005b60:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005b62:	4b32      	ldr	r3, [pc, #200]	; (8005c2c <USBD_CDC_DeInit+0xfc>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	4619      	mov	r1, r3
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f002 fa2c 	bl	8007fc6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005b6e:	4b2f      	ldr	r3, [pc, #188]	; (8005c2c <USBD_CDC_DeInit+0xfc>)
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	f003 020f 	and.w	r2, r3, #15
 8005b76:	6879      	ldr	r1, [r7, #4]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	440b      	add	r3, r1
 8005b82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b86:	2200      	movs	r2, #0
 8005b88:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005b8a:	4b29      	ldr	r3, [pc, #164]	; (8005c30 <USBD_CDC_DeInit+0x100>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	4619      	mov	r1, r3
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f002 fa18 	bl	8007fc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005b96:	4b26      	ldr	r3, [pc, #152]	; (8005c30 <USBD_CDC_DeInit+0x100>)
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	f003 020f 	and.w	r2, r3, #15
 8005b9e:	6879      	ldr	r1, [r7, #4]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	440b      	add	r3, r1
 8005baa:	3324      	adds	r3, #36	; 0x24
 8005bac:	2200      	movs	r2, #0
 8005bae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005bb0:	4b1f      	ldr	r3, [pc, #124]	; (8005c30 <USBD_CDC_DeInit+0x100>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	f003 020f 	and.w	r2, r3, #15
 8005bb8:	6879      	ldr	r1, [r7, #4]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	440b      	add	r3, r1
 8005bc4:	3326      	adds	r3, #38	; 0x26
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	32b0      	adds	r2, #176	; 0xb0
 8005bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d01f      	beq.n	8005c1c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	33b0      	adds	r3, #176	; 0xb0
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	32b0      	adds	r2, #176	; 0xb0
 8005bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f002 faec 	bl	80081dc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	32b0      	adds	r2, #176	; 0xb0
 8005c0e:	2100      	movs	r1, #0
 8005c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20000093 	.word	0x20000093
 8005c2c:	20000094 	.word	0x20000094
 8005c30:	20000095 	.word	0x20000095

08005c34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	32b0      	adds	r2, #176	; 0xb0
 8005c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c4c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e0bf      	b.n	8005de4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d050      	beq.n	8005d12 <USBD_CDC_Setup+0xde>
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	f040 80af 	bne.w	8005dd4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	88db      	ldrh	r3, [r3, #6]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d03a      	beq.n	8005cf4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	b25b      	sxtb	r3, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	da1b      	bge.n	8005cc0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	33b0      	adds	r3, #176	; 0xb0
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005c9e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	88d2      	ldrh	r2, [r2, #6]
 8005ca4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	88db      	ldrh	r3, [r3, #6]
 8005caa:	2b07      	cmp	r3, #7
 8005cac:	bf28      	it	cs
 8005cae:	2307      	movcs	r3, #7
 8005cb0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	89fa      	ldrh	r2, [r7, #14]
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f001 fd43 	bl	8007744 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005cbe:	e090      	b.n	8005de2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	785a      	ldrb	r2, [r3, #1]
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	88db      	ldrh	r3, [r3, #6]
 8005cce:	2b3f      	cmp	r3, #63	; 0x3f
 8005cd0:	d803      	bhi.n	8005cda <USBD_CDC_Setup+0xa6>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	88db      	ldrh	r3, [r3, #6]
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	e000      	b.n	8005cdc <USBD_CDC_Setup+0xa8>
 8005cda:	2240      	movs	r2, #64	; 0x40
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005ce2:	6939      	ldr	r1, [r7, #16]
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005cea:	461a      	mov	r2, r3
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f001 fd55 	bl	800779c <USBD_CtlPrepareRx>
      break;
 8005cf2:	e076      	b.n	8005de2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	33b0      	adds	r3, #176	; 0xb0
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	7850      	ldrb	r0, [r2, #1]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	6839      	ldr	r1, [r7, #0]
 8005d0e:	4798      	blx	r3
      break;
 8005d10:	e067      	b.n	8005de2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	785b      	ldrb	r3, [r3, #1]
 8005d16:	2b0b      	cmp	r3, #11
 8005d18:	d851      	bhi.n	8005dbe <USBD_CDC_Setup+0x18a>
 8005d1a:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <USBD_CDC_Setup+0xec>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d51 	.word	0x08005d51
 8005d24:	08005dcd 	.word	0x08005dcd
 8005d28:	08005dbf 	.word	0x08005dbf
 8005d2c:	08005dbf 	.word	0x08005dbf
 8005d30:	08005dbf 	.word	0x08005dbf
 8005d34:	08005dbf 	.word	0x08005dbf
 8005d38:	08005dbf 	.word	0x08005dbf
 8005d3c:	08005dbf 	.word	0x08005dbf
 8005d40:	08005dbf 	.word	0x08005dbf
 8005d44:	08005dbf 	.word	0x08005dbf
 8005d48:	08005d7b 	.word	0x08005d7b
 8005d4c:	08005da5 	.word	0x08005da5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b03      	cmp	r3, #3
 8005d5a:	d107      	bne.n	8005d6c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d5c:	f107 030a 	add.w	r3, r7, #10
 8005d60:	2202      	movs	r2, #2
 8005d62:	4619      	mov	r1, r3
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f001 fced 	bl	8007744 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d6a:	e032      	b.n	8005dd2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d6c:	6839      	ldr	r1, [r7, #0]
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f001 fc77 	bl	8007662 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d74:	2303      	movs	r3, #3
 8005d76:	75fb      	strb	r3, [r7, #23]
          break;
 8005d78:	e02b      	b.n	8005dd2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	d107      	bne.n	8005d96 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005d86:	f107 030d 	add.w	r3, r7, #13
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f001 fcd8 	bl	8007744 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d94:	e01d      	b.n	8005dd2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d96:	6839      	ldr	r1, [r7, #0]
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f001 fc62 	bl	8007662 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	75fb      	strb	r3, [r7, #23]
          break;
 8005da2:	e016      	b.n	8005dd2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d00f      	beq.n	8005dd0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005db0:	6839      	ldr	r1, [r7, #0]
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f001 fc55 	bl	8007662 <USBD_CtlError>
            ret = USBD_FAIL;
 8005db8:	2303      	movs	r3, #3
 8005dba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005dbc:	e008      	b.n	8005dd0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005dbe:	6839      	ldr	r1, [r7, #0]
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f001 fc4e 	bl	8007662 <USBD_CtlError>
          ret = USBD_FAIL;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	75fb      	strb	r3, [r7, #23]
          break;
 8005dca:	e002      	b.n	8005dd2 <USBD_CDC_Setup+0x19e>
          break;
 8005dcc:	bf00      	nop
 8005dce:	e008      	b.n	8005de2 <USBD_CDC_Setup+0x1ae>
          break;
 8005dd0:	bf00      	nop
      }
      break;
 8005dd2:	e006      	b.n	8005de2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005dd4:	6839      	ldr	r1, [r7, #0]
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f001 fc43 	bl	8007662 <USBD_CtlError>
      ret = USBD_FAIL;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	75fb      	strb	r3, [r7, #23]
      break;
 8005de0:	bf00      	nop
  }

  return (uint8_t)ret;
 8005de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005dfe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	32b0      	adds	r2, #176	; 0xb0
 8005e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e065      	b.n	8005ee2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	32b0      	adds	r2, #176	; 0xb0
 8005e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e24:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005e26:	78fb      	ldrb	r3, [r7, #3]
 8005e28:	f003 020f 	and.w	r2, r3, #15
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	440b      	add	r3, r1
 8005e38:	3318      	adds	r3, #24
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d02f      	beq.n	8005ea0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	f003 020f 	and.w	r2, r3, #15
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	440b      	add	r3, r1
 8005e52:	3318      	adds	r3, #24
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	78fb      	ldrb	r3, [r7, #3]
 8005e58:	f003 010f 	and.w	r1, r3, #15
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	460b      	mov	r3, r1
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	440b      	add	r3, r1
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4403      	add	r3, r0
 8005e68:	3348      	adds	r3, #72	; 0x48
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005e70:	fb01 f303 	mul.w	r3, r1, r3
 8005e74:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d112      	bne.n	8005ea0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005e7a:	78fb      	ldrb	r3, [r7, #3]
 8005e7c:	f003 020f 	and.w	r2, r3, #15
 8005e80:	6879      	ldr	r1, [r7, #4]
 8005e82:	4613      	mov	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	440b      	add	r3, r1
 8005e8c:	3318      	adds	r3, #24
 8005e8e:	2200      	movs	r2, #0
 8005e90:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005e92:	78f9      	ldrb	r1, [r7, #3]
 8005e94:	2300      	movs	r3, #0
 8005e96:	2200      	movs	r2, #0
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f002 f93c 	bl	8008116 <USBD_LL_Transmit>
 8005e9e:	e01f      	b.n	8005ee0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	33b0      	adds	r3, #176	; 0xb0
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d010      	beq.n	8005ee0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	33b0      	adds	r3, #176	; 0xb0
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005edc:	78fa      	ldrb	r2, [r7, #3]
 8005ede:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b084      	sub	sp, #16
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	32b0      	adds	r2, #176	; 0xb0
 8005f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f04:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	32b0      	adds	r2, #176	; 0xb0
 8005f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d101      	bne.n	8005f1c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e01a      	b.n	8005f52 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	4619      	mov	r1, r3
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f002 f93a 	bl	800819a <USBD_LL_GetRxDataSize>
 8005f26:	4602      	mov	r2, r0
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	33b0      	adds	r3, #176	; 0xb0
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005f4c:	4611      	mov	r1, r2
 8005f4e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b084      	sub	sp, #16
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	32b0      	adds	r2, #176	; 0xb0
 8005f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e025      	b.n	8005fc8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	33b0      	adds	r3, #176	; 0xb0
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d01a      	beq.n	8005fc6 <USBD_CDC_EP0_RxReady+0x6c>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005f96:	2bff      	cmp	r3, #255	; 0xff
 8005f98:	d015      	beq.n	8005fc6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	33b0      	adds	r3, #176	; 0xb0
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005fb2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005fba:	b292      	uxth	r2, r2
 8005fbc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	22ff      	movs	r2, #255	; 0xff
 8005fc2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005fd8:	2182      	movs	r1, #130	; 0x82
 8005fda:	4818      	ldr	r0, [pc, #96]	; (800603c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005fdc:	f000 fd09 	bl	80069f2 <USBD_GetEpDesc>
 8005fe0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	4815      	ldr	r0, [pc, #84]	; (800603c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005fe6:	f000 fd04 	bl	80069f2 <USBD_GetEpDesc>
 8005fea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005fec:	2181      	movs	r1, #129	; 0x81
 8005fee:	4813      	ldr	r0, [pc, #76]	; (800603c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ff0:	f000 fcff 	bl	80069f2 <USBD_GetEpDesc>
 8005ff4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d002      	beq.n	8006002 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	2210      	movs	r2, #16
 8006000:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d006      	beq.n	8006016 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	2200      	movs	r2, #0
 800600c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006010:	711a      	strb	r2, [r3, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d006      	beq.n	800602a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006024:	711a      	strb	r2, [r3, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2243      	movs	r2, #67	; 0x43
 800602e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006030:	4b02      	ldr	r3, [pc, #8]	; (800603c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006032:	4618      	mov	r0, r3
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	20000050 	.word	0x20000050

08006040 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006048:	2182      	movs	r1, #130	; 0x82
 800604a:	4818      	ldr	r0, [pc, #96]	; (80060ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800604c:	f000 fcd1 	bl	80069f2 <USBD_GetEpDesc>
 8006050:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006052:	2101      	movs	r1, #1
 8006054:	4815      	ldr	r0, [pc, #84]	; (80060ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006056:	f000 fccc 	bl	80069f2 <USBD_GetEpDesc>
 800605a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800605c:	2181      	movs	r1, #129	; 0x81
 800605e:	4813      	ldr	r0, [pc, #76]	; (80060ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006060:	f000 fcc7 	bl	80069f2 <USBD_GetEpDesc>
 8006064:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d002      	beq.n	8006072 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2210      	movs	r2, #16
 8006070:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d006      	beq.n	8006086 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	2200      	movs	r2, #0
 800607c:	711a      	strb	r2, [r3, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f042 0202 	orr.w	r2, r2, #2
 8006084:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d006      	beq.n	800609a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	711a      	strb	r2, [r3, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f042 0202 	orr.w	r2, r2, #2
 8006098:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2243      	movs	r2, #67	; 0x43
 800609e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80060a0:	4b02      	ldr	r3, [pc, #8]	; (80060ac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3718      	adds	r7, #24
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	20000050 	.word	0x20000050

080060b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80060b8:	2182      	movs	r1, #130	; 0x82
 80060ba:	4818      	ldr	r0, [pc, #96]	; (800611c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80060bc:	f000 fc99 	bl	80069f2 <USBD_GetEpDesc>
 80060c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80060c2:	2101      	movs	r1, #1
 80060c4:	4815      	ldr	r0, [pc, #84]	; (800611c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80060c6:	f000 fc94 	bl	80069f2 <USBD_GetEpDesc>
 80060ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80060cc:	2181      	movs	r1, #129	; 0x81
 80060ce:	4813      	ldr	r0, [pc, #76]	; (800611c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80060d0:	f000 fc8f 	bl	80069f2 <USBD_GetEpDesc>
 80060d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	2210      	movs	r2, #16
 80060e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d006      	beq.n	80060f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060f0:	711a      	strb	r2, [r3, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d006      	beq.n	800610a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006104:	711a      	strb	r2, [r3, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2243      	movs	r2, #67	; 0x43
 800610e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006110:	4b02      	ldr	r3, [pc, #8]	; (800611c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	20000050 	.word	0x20000050

08006120 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	220a      	movs	r2, #10
 800612c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800612e:	4b03      	ldr	r3, [pc, #12]	; (800613c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006130:	4618      	mov	r0, r3
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr
 800613c:	2000000c 	.word	0x2000000c

08006140 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006150:	2303      	movs	r3, #3
 8006152:	e009      	b.n	8006168 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	33b0      	adds	r3, #176	; 0xb0
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	32b0      	adds	r2, #176	; 0xb0
 800618a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800618e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006196:	2303      	movs	r3, #3
 8006198:	e008      	b.n	80061ac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	371c      	adds	r7, #28
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	32b0      	adds	r2, #176	; 0xb0
 80061cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80061d8:	2303      	movs	r3, #3
 80061da:	e004      	b.n	80061e6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
	...

080061f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	32b0      	adds	r2, #176	; 0xb0
 8006206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800620a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	32b0      	adds	r2, #176	; 0xb0
 8006216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800621e:	2303      	movs	r3, #3
 8006220:	e018      	b.n	8006254 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	7c1b      	ldrb	r3, [r3, #16]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10a      	bne.n	8006240 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800622a:	4b0c      	ldr	r3, [pc, #48]	; (800625c <USBD_CDC_ReceivePacket+0x68>)
 800622c:	7819      	ldrb	r1, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 ff8d 	bl	8008158 <USBD_LL_PrepareReceive>
 800623e:	e008      	b.n	8006252 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006240:	4b06      	ldr	r3, [pc, #24]	; (800625c <USBD_CDC_ReceivePacket+0x68>)
 8006242:	7819      	ldrb	r1, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800624a:	2340      	movs	r3, #64	; 0x40
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 ff83 	bl	8008158 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	20000094 	.word	0x20000094

08006260 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	4613      	mov	r3, r2
 800626c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006274:	2303      	movs	r3, #3
 8006276:	e01f      	b.n	80062b8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	79fa      	ldrb	r2, [r7, #7]
 80062aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f001 fdfd 	bl	8007eac <USBD_LL_Init>
 80062b2:	4603      	mov	r3, r0
 80062b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80062b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e025      	b.n	8006324 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	32ae      	adds	r2, #174	; 0xae
 80062ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00f      	beq.n	8006314 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	32ae      	adds	r2, #174	; 0xae
 80062fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	f107 020e 	add.w	r2, r7, #14
 8006308:	4610      	mov	r0, r2
 800630a:	4798      	blx	r3
 800630c:	4602      	mov	r2, r0
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f001 fe05 	bl	8007f44 <USBD_LL_Start>
 800633a:	4603      	mov	r3, r0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800634c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800634e:	4618      	mov	r0, r3
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	460b      	mov	r3, r1
 8006364:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006370:	2b00      	cmp	r3, #0
 8006372:	d009      	beq.n	8006388 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	78fa      	ldrb	r2, [r7, #3]
 800637e:	4611      	mov	r1, r2
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	4798      	blx	r3
 8006384:	4603      	mov	r3, r0
 8006386:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006388:	7bfb      	ldrb	r3, [r7, #15]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	460b      	mov	r3, r1
 800639c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	78fa      	ldrb	r2, [r7, #3]
 80063ac:	4611      	mov	r1, r2
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	4798      	blx	r3
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80063b8:	2303      	movs	r3, #3
 80063ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b084      	sub	sp, #16
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063d6:	6839      	ldr	r1, [r7, #0]
 80063d8:	4618      	mov	r0, r3
 80063da:	f001 f908 	bl	80075ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80063ec:	461a      	mov	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063fa:	f003 031f 	and.w	r3, r3, #31
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d01a      	beq.n	8006438 <USBD_LL_SetupStage+0x72>
 8006402:	2b02      	cmp	r3, #2
 8006404:	d822      	bhi.n	800644c <USBD_LL_SetupStage+0x86>
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <USBD_LL_SetupStage+0x4a>
 800640a:	2b01      	cmp	r3, #1
 800640c:	d00a      	beq.n	8006424 <USBD_LL_SetupStage+0x5e>
 800640e:	e01d      	b.n	800644c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006416:	4619      	mov	r1, r3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 fb5f 	bl	8006adc <USBD_StdDevReq>
 800641e:	4603      	mov	r3, r0
 8006420:	73fb      	strb	r3, [r7, #15]
      break;
 8006422:	e020      	b.n	8006466 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800642a:	4619      	mov	r1, r3
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fbc7 	bl	8006bc0 <USBD_StdItfReq>
 8006432:	4603      	mov	r3, r0
 8006434:	73fb      	strb	r3, [r7, #15]
      break;
 8006436:	e016      	b.n	8006466 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fc29 	bl	8006c98 <USBD_StdEPReq>
 8006446:	4603      	mov	r3, r0
 8006448:	73fb      	strb	r3, [r7, #15]
      break;
 800644a:	e00c      	b.n	8006466 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006452:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006456:	b2db      	uxtb	r3, r3
 8006458:	4619      	mov	r1, r3
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f001 fdd2 	bl	8008004 <USBD_LL_StallEP>
 8006460:	4603      	mov	r3, r0
 8006462:	73fb      	strb	r3, [r7, #15]
      break;
 8006464:	bf00      	nop
  }

  return ret;
 8006466:	7bfb      	ldrb	r3, [r7, #15]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	460b      	mov	r3, r1
 800647a:	607a      	str	r2, [r7, #4]
 800647c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800647e:	2300      	movs	r3, #0
 8006480:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006482:	7afb      	ldrb	r3, [r7, #11]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d16e      	bne.n	8006566 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800648e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006496:	2b03      	cmp	r3, #3
 8006498:	f040 8098 	bne.w	80065cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d913      	bls.n	80064d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	1ad2      	subs	r2, r2, r3
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	68da      	ldr	r2, [r3, #12]
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	4293      	cmp	r3, r2
 80064c0:	bf28      	it	cs
 80064c2:	4613      	movcs	r3, r2
 80064c4:	461a      	mov	r2, r3
 80064c6:	6879      	ldr	r1, [r7, #4]
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f001 f984 	bl	80077d6 <USBD_CtlContinueRx>
 80064ce:	e07d      	b.n	80065cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064d6:	f003 031f 	and.w	r3, r3, #31
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d014      	beq.n	8006508 <USBD_LL_DataOutStage+0x98>
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d81d      	bhi.n	800651e <USBD_LL_DataOutStage+0xae>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <USBD_LL_DataOutStage+0x7c>
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d003      	beq.n	80064f2 <USBD_LL_DataOutStage+0x82>
 80064ea:	e018      	b.n	800651e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	75bb      	strb	r3, [r7, #22]
            break;
 80064f0:	e018      	b.n	8006524 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	4619      	mov	r1, r3
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 fa5e 	bl	80069be <USBD_CoreFindIF>
 8006502:	4603      	mov	r3, r0
 8006504:	75bb      	strb	r3, [r7, #22]
            break;
 8006506:	e00d      	b.n	8006524 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800650e:	b2db      	uxtb	r3, r3
 8006510:	4619      	mov	r1, r3
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f000 fa60 	bl	80069d8 <USBD_CoreFindEP>
 8006518:	4603      	mov	r3, r0
 800651a:	75bb      	strb	r3, [r7, #22]
            break;
 800651c:	e002      	b.n	8006524 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	75bb      	strb	r3, [r7, #22]
            break;
 8006522:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006524:	7dbb      	ldrb	r3, [r7, #22]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d119      	bne.n	800655e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b03      	cmp	r3, #3
 8006534:	d113      	bne.n	800655e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006536:	7dba      	ldrb	r2, [r7, #22]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	32ae      	adds	r2, #174	; 0xae
 800653c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00b      	beq.n	800655e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006546:	7dba      	ldrb	r2, [r7, #22]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800654e:	7dba      	ldrb	r2, [r7, #22]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	32ae      	adds	r2, #174	; 0xae
 8006554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f001 f94a 	bl	80077f8 <USBD_CtlSendStatus>
 8006564:	e032      	b.n	80065cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006566:	7afb      	ldrb	r3, [r7, #11]
 8006568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800656c:	b2db      	uxtb	r3, r3
 800656e:	4619      	mov	r1, r3
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 fa31 	bl	80069d8 <USBD_CoreFindEP>
 8006576:	4603      	mov	r3, r0
 8006578:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800657a:	7dbb      	ldrb	r3, [r7, #22]
 800657c:	2bff      	cmp	r3, #255	; 0xff
 800657e:	d025      	beq.n	80065cc <USBD_LL_DataOutStage+0x15c>
 8006580:	7dbb      	ldrb	r3, [r7, #22]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d122      	bne.n	80065cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b03      	cmp	r3, #3
 8006590:	d117      	bne.n	80065c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006592:	7dba      	ldrb	r2, [r7, #22]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	32ae      	adds	r2, #174	; 0xae
 8006598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00f      	beq.n	80065c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80065a2:	7dba      	ldrb	r2, [r7, #22]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80065aa:	7dba      	ldrb	r2, [r7, #22]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	32ae      	adds	r2, #174	; 0xae
 80065b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	7afa      	ldrb	r2, [r7, #11]
 80065b8:	4611      	mov	r1, r2
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	4798      	blx	r3
 80065be:	4603      	mov	r3, r0
 80065c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80065c2:	7dfb      	ldrb	r3, [r7, #23]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80065c8:	7dfb      	ldrb	r3, [r7, #23]
 80065ca:	e000      	b.n	80065ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3718      	adds	r7, #24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b086      	sub	sp, #24
 80065da:	af00      	add	r7, sp, #0
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	460b      	mov	r3, r1
 80065e0:	607a      	str	r2, [r7, #4]
 80065e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80065e4:	7afb      	ldrb	r3, [r7, #11]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d16f      	bne.n	80066ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3314      	adds	r3, #20
 80065ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d15a      	bne.n	80066b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	689a      	ldr	r2, [r3, #8]
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	429a      	cmp	r2, r3
 8006604:	d914      	bls.n	8006630 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	689a      	ldr	r2, [r3, #8]
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	1ad2      	subs	r2, r2, r3
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	461a      	mov	r2, r3
 800661a:	6879      	ldr	r1, [r7, #4]
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f001 f8ac 	bl	800777a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006622:	2300      	movs	r3, #0
 8006624:	2200      	movs	r2, #0
 8006626:	2100      	movs	r1, #0
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f001 fd95 	bl	8008158 <USBD_LL_PrepareReceive>
 800662e:	e03f      	b.n	80066b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	429a      	cmp	r2, r3
 800663a:	d11c      	bne.n	8006676 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006644:	429a      	cmp	r2, r3
 8006646:	d316      	bcc.n	8006676 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006652:	429a      	cmp	r2, r3
 8006654:	d20f      	bcs.n	8006676 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006656:	2200      	movs	r2, #0
 8006658:	2100      	movs	r1, #0
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f001 f88d 	bl	800777a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006668:	2300      	movs	r3, #0
 800666a:	2200      	movs	r2, #0
 800666c:	2100      	movs	r1, #0
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f001 fd72 	bl	8008158 <USBD_LL_PrepareReceive>
 8006674:	e01c      	b.n	80066b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b03      	cmp	r3, #3
 8006680:	d10f      	bne.n	80066a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d009      	beq.n	80066a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066a2:	2180      	movs	r1, #128	; 0x80
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f001 fcad 	bl	8008004 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f001 f8b7 	bl	800781e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d03a      	beq.n	8006730 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f7ff fe42 	bl	8006344 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80066c8:	e032      	b.n	8006730 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80066ca:	7afb      	ldrb	r3, [r7, #11]
 80066cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	4619      	mov	r1, r3
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f000 f97f 	bl	80069d8 <USBD_CoreFindEP>
 80066da:	4603      	mov	r3, r0
 80066dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066de:	7dfb      	ldrb	r3, [r7, #23]
 80066e0:	2bff      	cmp	r3, #255	; 0xff
 80066e2:	d025      	beq.n	8006730 <USBD_LL_DataInStage+0x15a>
 80066e4:	7dfb      	ldrb	r3, [r7, #23]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d122      	bne.n	8006730 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b03      	cmp	r3, #3
 80066f4:	d11c      	bne.n	8006730 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80066f6:	7dfa      	ldrb	r2, [r7, #23]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	32ae      	adds	r2, #174	; 0xae
 80066fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d014      	beq.n	8006730 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006706:	7dfa      	ldrb	r2, [r7, #23]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800670e:	7dfa      	ldrb	r2, [r7, #23]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	32ae      	adds	r2, #174	; 0xae
 8006714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	7afa      	ldrb	r2, [r7, #11]
 800671c:	4611      	mov	r1, r2
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	4798      	blx	r3
 8006722:	4603      	mov	r3, r0
 8006724:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006726:	7dbb      	ldrb	r3, [r7, #22]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800672c:	7dbb      	ldrb	r3, [r7, #22]
 800672e:	e000      	b.n	8006732 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3718      	adds	r7, #24
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b084      	sub	sp, #16
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006772:	2b00      	cmp	r3, #0
 8006774:	d014      	beq.n	80067a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00e      	beq.n	80067a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6852      	ldr	r2, [r2, #4]
 800678e:	b2d2      	uxtb	r2, r2
 8006790:	4611      	mov	r1, r2
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	4798      	blx	r3
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d001      	beq.n	80067a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800679c:	2303      	movs	r3, #3
 800679e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067a0:	2340      	movs	r3, #64	; 0x40
 80067a2:	2200      	movs	r2, #0
 80067a4:	2100      	movs	r1, #0
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f001 fbe7 	bl	8007f7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2240      	movs	r2, #64	; 0x40
 80067b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067bc:	2340      	movs	r3, #64	; 0x40
 80067be:	2200      	movs	r2, #0
 80067c0:	2180      	movs	r1, #128	; 0x80
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f001 fbd9 	bl	8007f7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2240      	movs	r2, #64	; 0x40
 80067d2:	621a      	str	r2, [r3, #32]

  return ret;
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80067de:	b480      	push	{r7}
 80067e0:	b083      	sub	sp, #12
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	460b      	mov	r3, r1
 80067e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	78fa      	ldrb	r2, [r7, #3]
 80067ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80067fe:	b480      	push	{r7}
 8006800:	b083      	sub	sp, #12
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800680c:	b2da      	uxtb	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2204      	movs	r2, #4
 8006818:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800682a:	b480      	push	{r7}
 800682c:	b083      	sub	sp, #12
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b04      	cmp	r3, #4
 800683c:	d106      	bne.n	800684c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006844:	b2da      	uxtb	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b082      	sub	sp, #8
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b03      	cmp	r3, #3
 800686c:	d110      	bne.n	8006890 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00b      	beq.n	8006890 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d005      	beq.n	8006890 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b082      	sub	sp, #8
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	460b      	mov	r3, r1
 80068a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	32ae      	adds	r2, #174	; 0xae
 80068b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e01c      	b.n	80068f6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d115      	bne.n	80068f4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	32ae      	adds	r2, #174	; 0xae
 80068d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00b      	beq.n	80068f4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	32ae      	adds	r2, #174	; 0xae
 80068e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	78fa      	ldrb	r2, [r7, #3]
 80068ee:	4611      	mov	r1, r2
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b082      	sub	sp, #8
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	460b      	mov	r3, r1
 8006908:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	32ae      	adds	r2, #174	; 0xae
 8006914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800691c:	2303      	movs	r3, #3
 800691e:	e01c      	b.n	800695a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b03      	cmp	r3, #3
 800692a:	d115      	bne.n	8006958 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	32ae      	adds	r2, #174	; 0xae
 8006936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00b      	beq.n	8006958 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	32ae      	adds	r2, #174	; 0xae
 800694a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	78fa      	ldrb	r2, [r7, #3]
 8006952:	4611      	mov	r1, r2
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00e      	beq.n	80069b4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	6852      	ldr	r2, [r2, #4]
 80069a2:	b2d2      	uxtb	r2, r2
 80069a4:	4611      	mov	r1, r2
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	4798      	blx	r3
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80069b0:	2303      	movs	r3, #3
 80069b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	460b      	mov	r3, r1
 80069c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	460b      	mov	r3, r1
 80069e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b086      	sub	sp, #24
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	460b      	mov	r3, r1
 80069fc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006a06:	2300      	movs	r3, #0
 8006a08:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	885b      	ldrh	r3, [r3, #2]
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d920      	bls.n	8006a5c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006a22:	e013      	b.n	8006a4c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006a24:	f107 030a 	add.w	r3, r7, #10
 8006a28:	4619      	mov	r1, r3
 8006a2a:	6978      	ldr	r0, [r7, #20]
 8006a2c:	f000 f81b 	bl	8006a66 <USBD_GetNextDesc>
 8006a30:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	785b      	ldrb	r3, [r3, #1]
 8006a36:	2b05      	cmp	r3, #5
 8006a38:	d108      	bne.n	8006a4c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	789b      	ldrb	r3, [r3, #2]
 8006a42:	78fa      	ldrb	r2, [r7, #3]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d008      	beq.n	8006a5a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	885b      	ldrh	r3, [r3, #2]
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	897b      	ldrh	r3, [r7, #10]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d8e5      	bhi.n	8006a24 <USBD_GetEpDesc+0x32>
 8006a58:	e000      	b.n	8006a5c <USBD_GetEpDesc+0x6a>
          break;
 8006a5a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006a5c:	693b      	ldr	r3, [r7, #16]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b085      	sub	sp, #20
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	881a      	ldrh	r2, [r3, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	4413      	add	r3, r2
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4413      	add	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006a92:	68fb      	ldr	r3, [r7, #12]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3714      	adds	r7, #20
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b087      	sub	sp, #28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006abe:	8a3b      	ldrh	r3, [r7, #16]
 8006ac0:	021b      	lsls	r3, r3, #8
 8006ac2:	b21a      	sxth	r2, r3
 8006ac4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	b21b      	sxth	r3, r3
 8006acc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006ace:	89fb      	ldrh	r3, [r7, #14]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	371c      	adds	r7, #28
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006af2:	2b40      	cmp	r3, #64	; 0x40
 8006af4:	d005      	beq.n	8006b02 <USBD_StdDevReq+0x26>
 8006af6:	2b40      	cmp	r3, #64	; 0x40
 8006af8:	d857      	bhi.n	8006baa <USBD_StdDevReq+0xce>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00f      	beq.n	8006b1e <USBD_StdDevReq+0x42>
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	d153      	bne.n	8006baa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	32ae      	adds	r2, #174	; 0xae
 8006b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	4798      	blx	r3
 8006b18:	4603      	mov	r3, r0
 8006b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b1c:	e04a      	b.n	8006bb4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	785b      	ldrb	r3, [r3, #1]
 8006b22:	2b09      	cmp	r3, #9
 8006b24:	d83b      	bhi.n	8006b9e <USBD_StdDevReq+0xc2>
 8006b26:	a201      	add	r2, pc, #4	; (adr r2, 8006b2c <USBD_StdDevReq+0x50>)
 8006b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2c:	08006b81 	.word	0x08006b81
 8006b30:	08006b95 	.word	0x08006b95
 8006b34:	08006b9f 	.word	0x08006b9f
 8006b38:	08006b8b 	.word	0x08006b8b
 8006b3c:	08006b9f 	.word	0x08006b9f
 8006b40:	08006b5f 	.word	0x08006b5f
 8006b44:	08006b55 	.word	0x08006b55
 8006b48:	08006b9f 	.word	0x08006b9f
 8006b4c:	08006b77 	.word	0x08006b77
 8006b50:	08006b69 	.word	0x08006b69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fa3c 	bl	8006fd4 <USBD_GetDescriptor>
          break;
 8006b5c:	e024      	b.n	8006ba8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fba1 	bl	80072a8 <USBD_SetAddress>
          break;
 8006b66:	e01f      	b.n	8006ba8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fbe0 	bl	8007330 <USBD_SetConfig>
 8006b70:	4603      	mov	r3, r0
 8006b72:	73fb      	strb	r3, [r7, #15]
          break;
 8006b74:	e018      	b.n	8006ba8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fc83 	bl	8007484 <USBD_GetConfig>
          break;
 8006b7e:	e013      	b.n	8006ba8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fcb4 	bl	80074f0 <USBD_GetStatus>
          break;
 8006b88:	e00e      	b.n	8006ba8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fce3 	bl	8007558 <USBD_SetFeature>
          break;
 8006b92:	e009      	b.n	8006ba8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fd07 	bl	80075aa <USBD_ClrFeature>
          break;
 8006b9c:	e004      	b.n	8006ba8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fd5e 	bl	8007662 <USBD_CtlError>
          break;
 8006ba6:	bf00      	nop
      }
      break;
 8006ba8:	e004      	b.n	8006bb4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006baa:	6839      	ldr	r1, [r7, #0]
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fd58 	bl	8007662 <USBD_CtlError>
      break;
 8006bb2:	bf00      	nop
  }

  return ret;
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop

08006bc0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bd6:	2b40      	cmp	r3, #64	; 0x40
 8006bd8:	d005      	beq.n	8006be6 <USBD_StdItfReq+0x26>
 8006bda:	2b40      	cmp	r3, #64	; 0x40
 8006bdc:	d852      	bhi.n	8006c84 <USBD_StdItfReq+0xc4>
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <USBD_StdItfReq+0x26>
 8006be2:	2b20      	cmp	r3, #32
 8006be4:	d14e      	bne.n	8006c84 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d840      	bhi.n	8006c76 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	889b      	ldrh	r3, [r3, #4]
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d836      	bhi.n	8006c6c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	889b      	ldrh	r3, [r3, #4]
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	4619      	mov	r1, r3
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7ff fed9 	bl	80069be <USBD_CoreFindIF>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c10:	7bbb      	ldrb	r3, [r7, #14]
 8006c12:	2bff      	cmp	r3, #255	; 0xff
 8006c14:	d01d      	beq.n	8006c52 <USBD_StdItfReq+0x92>
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d11a      	bne.n	8006c52 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006c1c:	7bba      	ldrb	r2, [r7, #14]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	32ae      	adds	r2, #174	; 0xae
 8006c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00f      	beq.n	8006c4c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006c2c:	7bba      	ldrb	r2, [r7, #14]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c34:	7bba      	ldrb	r2, [r7, #14]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	32ae      	adds	r2, #174	; 0xae
 8006c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	4798      	blx	r3
 8006c46:	4603      	mov	r3, r0
 8006c48:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c4a:	e004      	b.n	8006c56 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c50:	e001      	b.n	8006c56 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006c52:	2303      	movs	r3, #3
 8006c54:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	88db      	ldrh	r3, [r3, #6]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d110      	bne.n	8006c80 <USBD_StdItfReq+0xc0>
 8006c5e:	7bfb      	ldrb	r3, [r7, #15]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10d      	bne.n	8006c80 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fdc7 	bl	80077f8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c6a:	e009      	b.n	8006c80 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fcf7 	bl	8007662 <USBD_CtlError>
          break;
 8006c74:	e004      	b.n	8006c80 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fcf2 	bl	8007662 <USBD_CtlError>
          break;
 8006c7e:	e000      	b.n	8006c82 <USBD_StdItfReq+0xc2>
          break;
 8006c80:	bf00      	nop
      }
      break;
 8006c82:	e004      	b.n	8006c8e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006c84:	6839      	ldr	r1, [r7, #0]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fceb 	bl	8007662 <USBD_CtlError>
      break;
 8006c8c:	bf00      	nop
  }

  return ret;
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	889b      	ldrh	r3, [r3, #4]
 8006caa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cb4:	2b40      	cmp	r3, #64	; 0x40
 8006cb6:	d007      	beq.n	8006cc8 <USBD_StdEPReq+0x30>
 8006cb8:	2b40      	cmp	r3, #64	; 0x40
 8006cba:	f200 817f 	bhi.w	8006fbc <USBD_StdEPReq+0x324>
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d02a      	beq.n	8006d18 <USBD_StdEPReq+0x80>
 8006cc2:	2b20      	cmp	r3, #32
 8006cc4:	f040 817a 	bne.w	8006fbc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006cc8:	7bbb      	ldrb	r3, [r7, #14]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7ff fe83 	bl	80069d8 <USBD_CoreFindEP>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cd6:	7b7b      	ldrb	r3, [r7, #13]
 8006cd8:	2bff      	cmp	r3, #255	; 0xff
 8006cda:	f000 8174 	beq.w	8006fc6 <USBD_StdEPReq+0x32e>
 8006cde:	7b7b      	ldrb	r3, [r7, #13]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f040 8170 	bne.w	8006fc6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006ce6:	7b7a      	ldrb	r2, [r7, #13]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006cee:	7b7a      	ldrb	r2, [r7, #13]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	32ae      	adds	r2, #174	; 0xae
 8006cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f000 8163 	beq.w	8006fc6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006d00:	7b7a      	ldrb	r2, [r7, #13]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	32ae      	adds	r2, #174	; 0xae
 8006d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	4798      	blx	r3
 8006d12:	4603      	mov	r3, r0
 8006d14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d16:	e156      	b.n	8006fc6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	785b      	ldrb	r3, [r3, #1]
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d008      	beq.n	8006d32 <USBD_StdEPReq+0x9a>
 8006d20:	2b03      	cmp	r3, #3
 8006d22:	f300 8145 	bgt.w	8006fb0 <USBD_StdEPReq+0x318>
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f000 809b 	beq.w	8006e62 <USBD_StdEPReq+0x1ca>
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d03c      	beq.n	8006daa <USBD_StdEPReq+0x112>
 8006d30:	e13e      	b.n	8006fb0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d002      	beq.n	8006d44 <USBD_StdEPReq+0xac>
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d016      	beq.n	8006d70 <USBD_StdEPReq+0xd8>
 8006d42:	e02c      	b.n	8006d9e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d44:	7bbb      	ldrb	r3, [r7, #14]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00d      	beq.n	8006d66 <USBD_StdEPReq+0xce>
 8006d4a:	7bbb      	ldrb	r3, [r7, #14]
 8006d4c:	2b80      	cmp	r3, #128	; 0x80
 8006d4e:	d00a      	beq.n	8006d66 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d50:	7bbb      	ldrb	r3, [r7, #14]
 8006d52:	4619      	mov	r1, r3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f001 f955 	bl	8008004 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d5a:	2180      	movs	r1, #128	; 0x80
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f001 f951 	bl	8008004 <USBD_LL_StallEP>
 8006d62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d64:	e020      	b.n	8006da8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006d66:	6839      	ldr	r1, [r7, #0]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fc7a 	bl	8007662 <USBD_CtlError>
              break;
 8006d6e:	e01b      	b.n	8006da8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	885b      	ldrh	r3, [r3, #2]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10e      	bne.n	8006d96 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d78:	7bbb      	ldrb	r3, [r7, #14]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00b      	beq.n	8006d96 <USBD_StdEPReq+0xfe>
 8006d7e:	7bbb      	ldrb	r3, [r7, #14]
 8006d80:	2b80      	cmp	r3, #128	; 0x80
 8006d82:	d008      	beq.n	8006d96 <USBD_StdEPReq+0xfe>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	88db      	ldrh	r3, [r3, #6]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d104      	bne.n	8006d96 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d8c:	7bbb      	ldrb	r3, [r7, #14]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 f937 	bl	8008004 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fd2e 	bl	80077f8 <USBD_CtlSendStatus>

              break;
 8006d9c:	e004      	b.n	8006da8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fc5e 	bl	8007662 <USBD_CtlError>
              break;
 8006da6:	bf00      	nop
          }
          break;
 8006da8:	e107      	b.n	8006fba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d002      	beq.n	8006dbc <USBD_StdEPReq+0x124>
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d016      	beq.n	8006de8 <USBD_StdEPReq+0x150>
 8006dba:	e04b      	b.n	8006e54 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dbc:	7bbb      	ldrb	r3, [r7, #14]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00d      	beq.n	8006dde <USBD_StdEPReq+0x146>
 8006dc2:	7bbb      	ldrb	r3, [r7, #14]
 8006dc4:	2b80      	cmp	r3, #128	; 0x80
 8006dc6:	d00a      	beq.n	8006dde <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 f919 	bl	8008004 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dd2:	2180      	movs	r1, #128	; 0x80
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f001 f915 	bl	8008004 <USBD_LL_StallEP>
 8006dda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ddc:	e040      	b.n	8006e60 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fc3e 	bl	8007662 <USBD_CtlError>
              break;
 8006de6:	e03b      	b.n	8006e60 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	885b      	ldrh	r3, [r3, #2]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d136      	bne.n	8006e5e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d004      	beq.n	8006e04 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006dfa:	7bbb      	ldrb	r3, [r7, #14]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f001 f91f 	bl	8008042 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fcf7 	bl	80077f8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006e0a:	7bbb      	ldrb	r3, [r7, #14]
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7ff fde2 	bl	80069d8 <USBD_CoreFindEP>
 8006e14:	4603      	mov	r3, r0
 8006e16:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e18:	7b7b      	ldrb	r3, [r7, #13]
 8006e1a:	2bff      	cmp	r3, #255	; 0xff
 8006e1c:	d01f      	beq.n	8006e5e <USBD_StdEPReq+0x1c6>
 8006e1e:	7b7b      	ldrb	r3, [r7, #13]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d11c      	bne.n	8006e5e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006e24:	7b7a      	ldrb	r2, [r7, #13]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006e2c:	7b7a      	ldrb	r2, [r7, #13]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	32ae      	adds	r2, #174	; 0xae
 8006e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d010      	beq.n	8006e5e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006e3c:	7b7a      	ldrb	r2, [r7, #13]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	32ae      	adds	r2, #174	; 0xae
 8006e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	4798      	blx	r3
 8006e4e:	4603      	mov	r3, r0
 8006e50:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006e52:	e004      	b.n	8006e5e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fc03 	bl	8007662 <USBD_CtlError>
              break;
 8006e5c:	e000      	b.n	8006e60 <USBD_StdEPReq+0x1c8>
              break;
 8006e5e:	bf00      	nop
          }
          break;
 8006e60:	e0ab      	b.n	8006fba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d002      	beq.n	8006e74 <USBD_StdEPReq+0x1dc>
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d032      	beq.n	8006ed8 <USBD_StdEPReq+0x240>
 8006e72:	e097      	b.n	8006fa4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e74:	7bbb      	ldrb	r3, [r7, #14]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d007      	beq.n	8006e8a <USBD_StdEPReq+0x1f2>
 8006e7a:	7bbb      	ldrb	r3, [r7, #14]
 8006e7c:	2b80      	cmp	r3, #128	; 0x80
 8006e7e:	d004      	beq.n	8006e8a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fbed 	bl	8007662 <USBD_CtlError>
                break;
 8006e88:	e091      	b.n	8006fae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	da0b      	bge.n	8006eaa <USBD_StdEPReq+0x212>
 8006e92:	7bbb      	ldrb	r3, [r7, #14]
 8006e94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e98:	4613      	mov	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	3310      	adds	r3, #16
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	e00b      	b.n	8006ec2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006eaa:	7bbb      	ldrb	r3, [r7, #14]
 8006eac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2202      	movs	r2, #2
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fc37 	bl	8007744 <USBD_CtlSendData>
              break;
 8006ed6:	e06a      	b.n	8006fae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006ed8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	da11      	bge.n	8006f04 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	f003 020f 	and.w	r2, r3, #15
 8006ee6:	6879      	ldr	r1, [r7, #4]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	440b      	add	r3, r1
 8006ef2:	3324      	adds	r3, #36	; 0x24
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d117      	bne.n	8006f2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fbb0 	bl	8007662 <USBD_CtlError>
                  break;
 8006f02:	e054      	b.n	8006fae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f04:	7bbb      	ldrb	r3, [r7, #14]
 8006f06:	f003 020f 	and.w	r2, r3, #15
 8006f0a:	6879      	ldr	r1, [r7, #4]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	440b      	add	r3, r1
 8006f16:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d104      	bne.n	8006f2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fb9d 	bl	8007662 <USBD_CtlError>
                  break;
 8006f28:	e041      	b.n	8006fae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	da0b      	bge.n	8006f4a <USBD_StdEPReq+0x2b2>
 8006f32:	7bbb      	ldrb	r3, [r7, #14]
 8006f34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f38:	4613      	mov	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	3310      	adds	r3, #16
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	4413      	add	r3, r2
 8006f46:	3304      	adds	r3, #4
 8006f48:	e00b      	b.n	8006f62 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f4a:	7bbb      	ldrb	r3, [r7, #14]
 8006f4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f50:	4613      	mov	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	4413      	add	r3, r2
 8006f60:	3304      	adds	r3, #4
 8006f62:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f64:	7bbb      	ldrb	r3, [r7, #14]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d002      	beq.n	8006f70 <USBD_StdEPReq+0x2d8>
 8006f6a:	7bbb      	ldrb	r3, [r7, #14]
 8006f6c:	2b80      	cmp	r3, #128	; 0x80
 8006f6e:	d103      	bne.n	8006f78 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2200      	movs	r2, #0
 8006f74:	601a      	str	r2, [r3, #0]
 8006f76:	e00e      	b.n	8006f96 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006f78:	7bbb      	ldrb	r3, [r7, #14]
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f001 f87f 	bl	8008080 <USBD_LL_IsStallEP>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d003      	beq.n	8006f90 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	e002      	b.n	8006f96 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	2200      	movs	r2, #0
 8006f94:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2202      	movs	r2, #2
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fbd1 	bl	8007744 <USBD_CtlSendData>
              break;
 8006fa2:	e004      	b.n	8006fae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fb5b 	bl	8007662 <USBD_CtlError>
              break;
 8006fac:	bf00      	nop
          }
          break;
 8006fae:	e004      	b.n	8006fba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fb55 	bl	8007662 <USBD_CtlError>
          break;
 8006fb8:	bf00      	nop
      }
      break;
 8006fba:	e005      	b.n	8006fc8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fb4f 	bl	8007662 <USBD_CtlError>
      break;
 8006fc4:	e000      	b.n	8006fc8 <USBD_StdEPReq+0x330>
      break;
 8006fc6:	bf00      	nop
  }

  return ret;
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
	...

08006fd4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	885b      	ldrh	r3, [r3, #2]
 8006fee:	0a1b      	lsrs	r3, r3, #8
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	2b06      	cmp	r3, #6
 8006ff6:	f200 8128 	bhi.w	800724a <USBD_GetDescriptor+0x276>
 8006ffa:	a201      	add	r2, pc, #4	; (adr r2, 8007000 <USBD_GetDescriptor+0x2c>)
 8006ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007000:	0800701d 	.word	0x0800701d
 8007004:	08007035 	.word	0x08007035
 8007008:	08007075 	.word	0x08007075
 800700c:	0800724b 	.word	0x0800724b
 8007010:	0800724b 	.word	0x0800724b
 8007014:	080071eb 	.word	0x080071eb
 8007018:	08007217 	.word	0x08007217
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	7c12      	ldrb	r2, [r2, #16]
 8007028:	f107 0108 	add.w	r1, r7, #8
 800702c:	4610      	mov	r0, r2
 800702e:	4798      	blx	r3
 8007030:	60f8      	str	r0, [r7, #12]
      break;
 8007032:	e112      	b.n	800725a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	7c1b      	ldrb	r3, [r3, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10d      	bne.n	8007058 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007044:	f107 0208 	add.w	r2, r7, #8
 8007048:	4610      	mov	r0, r2
 800704a:	4798      	blx	r3
 800704c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3301      	adds	r3, #1
 8007052:	2202      	movs	r2, #2
 8007054:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007056:	e100      	b.n	800725a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007060:	f107 0208 	add.w	r2, r7, #8
 8007064:	4610      	mov	r0, r2
 8007066:	4798      	blx	r3
 8007068:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	3301      	adds	r3, #1
 800706e:	2202      	movs	r2, #2
 8007070:	701a      	strb	r2, [r3, #0]
      break;
 8007072:	e0f2      	b.n	800725a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	885b      	ldrh	r3, [r3, #2]
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b05      	cmp	r3, #5
 800707c:	f200 80ac 	bhi.w	80071d8 <USBD_GetDescriptor+0x204>
 8007080:	a201      	add	r2, pc, #4	; (adr r2, 8007088 <USBD_GetDescriptor+0xb4>)
 8007082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007086:	bf00      	nop
 8007088:	080070a1 	.word	0x080070a1
 800708c:	080070d5 	.word	0x080070d5
 8007090:	08007109 	.word	0x08007109
 8007094:	0800713d 	.word	0x0800713d
 8007098:	08007171 	.word	0x08007171
 800709c:	080071a5 	.word	0x080071a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00b      	beq.n	80070c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	7c12      	ldrb	r2, [r2, #16]
 80070b8:	f107 0108 	add.w	r1, r7, #8
 80070bc:	4610      	mov	r0, r2
 80070be:	4798      	blx	r3
 80070c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070c2:	e091      	b.n	80071e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 facb 	bl	8007662 <USBD_CtlError>
            err++;
 80070cc:	7afb      	ldrb	r3, [r7, #11]
 80070ce:	3301      	adds	r3, #1
 80070d0:	72fb      	strb	r3, [r7, #11]
          break;
 80070d2:	e089      	b.n	80071e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00b      	beq.n	80070f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	7c12      	ldrb	r2, [r2, #16]
 80070ec:	f107 0108 	add.w	r1, r7, #8
 80070f0:	4610      	mov	r0, r2
 80070f2:	4798      	blx	r3
 80070f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070f6:	e077      	b.n	80071e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fab1 	bl	8007662 <USBD_CtlError>
            err++;
 8007100:	7afb      	ldrb	r3, [r7, #11]
 8007102:	3301      	adds	r3, #1
 8007104:	72fb      	strb	r3, [r7, #11]
          break;
 8007106:	e06f      	b.n	80071e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00b      	beq.n	800712c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	7c12      	ldrb	r2, [r2, #16]
 8007120:	f107 0108 	add.w	r1, r7, #8
 8007124:	4610      	mov	r0, r2
 8007126:	4798      	blx	r3
 8007128:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800712a:	e05d      	b.n	80071e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800712c:	6839      	ldr	r1, [r7, #0]
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fa97 	bl	8007662 <USBD_CtlError>
            err++;
 8007134:	7afb      	ldrb	r3, [r7, #11]
 8007136:	3301      	adds	r3, #1
 8007138:	72fb      	strb	r3, [r7, #11]
          break;
 800713a:	e055      	b.n	80071e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00b      	beq.n	8007160 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	7c12      	ldrb	r2, [r2, #16]
 8007154:	f107 0108 	add.w	r1, r7, #8
 8007158:	4610      	mov	r0, r2
 800715a:	4798      	blx	r3
 800715c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800715e:	e043      	b.n	80071e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fa7d 	bl	8007662 <USBD_CtlError>
            err++;
 8007168:	7afb      	ldrb	r3, [r7, #11]
 800716a:	3301      	adds	r3, #1
 800716c:	72fb      	strb	r3, [r7, #11]
          break;
 800716e:	e03b      	b.n	80071e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00b      	beq.n	8007194 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	7c12      	ldrb	r2, [r2, #16]
 8007188:	f107 0108 	add.w	r1, r7, #8
 800718c:	4610      	mov	r0, r2
 800718e:	4798      	blx	r3
 8007190:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007192:	e029      	b.n	80071e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007194:	6839      	ldr	r1, [r7, #0]
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fa63 	bl	8007662 <USBD_CtlError>
            err++;
 800719c:	7afb      	ldrb	r3, [r7, #11]
 800719e:	3301      	adds	r3, #1
 80071a0:	72fb      	strb	r3, [r7, #11]
          break;
 80071a2:	e021      	b.n	80071e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00b      	beq.n	80071c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	7c12      	ldrb	r2, [r2, #16]
 80071bc:	f107 0108 	add.w	r1, r7, #8
 80071c0:	4610      	mov	r0, r2
 80071c2:	4798      	blx	r3
 80071c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071c6:	e00f      	b.n	80071e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fa49 	bl	8007662 <USBD_CtlError>
            err++;
 80071d0:	7afb      	ldrb	r3, [r7, #11]
 80071d2:	3301      	adds	r3, #1
 80071d4:	72fb      	strb	r3, [r7, #11]
          break;
 80071d6:	e007      	b.n	80071e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fa41 	bl	8007662 <USBD_CtlError>
          err++;
 80071e0:	7afb      	ldrb	r3, [r7, #11]
 80071e2:	3301      	adds	r3, #1
 80071e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80071e6:	bf00      	nop
      }
      break;
 80071e8:	e037      	b.n	800725a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	7c1b      	ldrb	r3, [r3, #16]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d109      	bne.n	8007206 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071fa:	f107 0208 	add.w	r2, r7, #8
 80071fe:	4610      	mov	r0, r2
 8007200:	4798      	blx	r3
 8007202:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007204:	e029      	b.n	800725a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fa2a 	bl	8007662 <USBD_CtlError>
        err++;
 800720e:	7afb      	ldrb	r3, [r7, #11]
 8007210:	3301      	adds	r3, #1
 8007212:	72fb      	strb	r3, [r7, #11]
      break;
 8007214:	e021      	b.n	800725a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	7c1b      	ldrb	r3, [r3, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10d      	bne.n	800723a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007226:	f107 0208 	add.w	r2, r7, #8
 800722a:	4610      	mov	r0, r2
 800722c:	4798      	blx	r3
 800722e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	3301      	adds	r3, #1
 8007234:	2207      	movs	r2, #7
 8007236:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007238:	e00f      	b.n	800725a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fa10 	bl	8007662 <USBD_CtlError>
        err++;
 8007242:	7afb      	ldrb	r3, [r7, #11]
 8007244:	3301      	adds	r3, #1
 8007246:	72fb      	strb	r3, [r7, #11]
      break;
 8007248:	e007      	b.n	800725a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fa08 	bl	8007662 <USBD_CtlError>
      err++;
 8007252:	7afb      	ldrb	r3, [r7, #11]
 8007254:	3301      	adds	r3, #1
 8007256:	72fb      	strb	r3, [r7, #11]
      break;
 8007258:	bf00      	nop
  }

  if (err != 0U)
 800725a:	7afb      	ldrb	r3, [r7, #11]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d11e      	bne.n	800729e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	88db      	ldrh	r3, [r3, #6]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d016      	beq.n	8007296 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007268:	893b      	ldrh	r3, [r7, #8]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00e      	beq.n	800728c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	88da      	ldrh	r2, [r3, #6]
 8007272:	893b      	ldrh	r3, [r7, #8]
 8007274:	4293      	cmp	r3, r2
 8007276:	bf28      	it	cs
 8007278:	4613      	movcs	r3, r2
 800727a:	b29b      	uxth	r3, r3
 800727c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800727e:	893b      	ldrh	r3, [r7, #8]
 8007280:	461a      	mov	r2, r3
 8007282:	68f9      	ldr	r1, [r7, #12]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fa5d 	bl	8007744 <USBD_CtlSendData>
 800728a:	e009      	b.n	80072a0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f9e7 	bl	8007662 <USBD_CtlError>
 8007294:	e004      	b.n	80072a0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 faae 	bl	80077f8 <USBD_CtlSendStatus>
 800729c:	e000      	b.n	80072a0 <USBD_GetDescriptor+0x2cc>
    return;
 800729e:	bf00      	nop
  }
}
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop

080072a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	889b      	ldrh	r3, [r3, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d131      	bne.n	800731e <USBD_SetAddress+0x76>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	88db      	ldrh	r3, [r3, #6]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d12d      	bne.n	800731e <USBD_SetAddress+0x76>
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	885b      	ldrh	r3, [r3, #2]
 80072c6:	2b7f      	cmp	r3, #127	; 0x7f
 80072c8:	d829      	bhi.n	800731e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	885b      	ldrh	r3, [r3, #2]
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b03      	cmp	r3, #3
 80072e0:	d104      	bne.n	80072ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f9bc 	bl	8007662 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ea:	e01d      	b.n	8007328 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	7bfa      	ldrb	r2, [r7, #15]
 80072f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80072f4:	7bfb      	ldrb	r3, [r7, #15]
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 feed 	bl	80080d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fa7a 	bl	80077f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007304:	7bfb      	ldrb	r3, [r7, #15]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d004      	beq.n	8007314 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2202      	movs	r2, #2
 800730e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007312:	e009      	b.n	8007328 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800731c:	e004      	b.n	8007328 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f99e 	bl	8007662 <USBD_CtlError>
  }
}
 8007326:	bf00      	nop
 8007328:	bf00      	nop
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	885b      	ldrh	r3, [r3, #2]
 8007342:	b2da      	uxtb	r2, r3
 8007344:	4b4e      	ldr	r3, [pc, #312]	; (8007480 <USBD_SetConfig+0x150>)
 8007346:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007348:	4b4d      	ldr	r3, [pc, #308]	; (8007480 <USBD_SetConfig+0x150>)
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d905      	bls.n	800735c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007350:	6839      	ldr	r1, [r7, #0]
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f985 	bl	8007662 <USBD_CtlError>
    return USBD_FAIL;
 8007358:	2303      	movs	r3, #3
 800735a:	e08c      	b.n	8007476 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b02      	cmp	r3, #2
 8007366:	d002      	beq.n	800736e <USBD_SetConfig+0x3e>
 8007368:	2b03      	cmp	r3, #3
 800736a:	d029      	beq.n	80073c0 <USBD_SetConfig+0x90>
 800736c:	e075      	b.n	800745a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800736e:	4b44      	ldr	r3, [pc, #272]	; (8007480 <USBD_SetConfig+0x150>)
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d020      	beq.n	80073b8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007376:	4b42      	ldr	r3, [pc, #264]	; (8007480 <USBD_SetConfig+0x150>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007380:	4b3f      	ldr	r3, [pc, #252]	; (8007480 <USBD_SetConfig+0x150>)
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	4619      	mov	r1, r3
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7fe ffe7 	bl	800635a <USBD_SetClassConfig>
 800738c:	4603      	mov	r3, r0
 800738e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007390:	7bfb      	ldrb	r3, [r7, #15]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d008      	beq.n	80073a8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007396:	6839      	ldr	r1, [r7, #0]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f962 	bl	8007662 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2202      	movs	r2, #2
 80073a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073a6:	e065      	b.n	8007474 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fa25 	bl	80077f8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2203      	movs	r2, #3
 80073b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80073b6:	e05d      	b.n	8007474 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fa1d 	bl	80077f8 <USBD_CtlSendStatus>
      break;
 80073be:	e059      	b.n	8007474 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80073c0:	4b2f      	ldr	r3, [pc, #188]	; (8007480 <USBD_SetConfig+0x150>)
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d112      	bne.n	80073ee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80073d0:	4b2b      	ldr	r3, [pc, #172]	; (8007480 <USBD_SetConfig+0x150>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073da:	4b29      	ldr	r3, [pc, #164]	; (8007480 <USBD_SetConfig+0x150>)
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7fe ffd6 	bl	8006392 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fa06 	bl	80077f8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073ec:	e042      	b.n	8007474 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80073ee:	4b24      	ldr	r3, [pc, #144]	; (8007480 <USBD_SetConfig+0x150>)
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	461a      	mov	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d02a      	beq.n	8007452 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	b2db      	uxtb	r3, r3
 8007402:	4619      	mov	r1, r3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7fe ffc4 	bl	8006392 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800740a:	4b1d      	ldr	r3, [pc, #116]	; (8007480 <USBD_SetConfig+0x150>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	461a      	mov	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007414:	4b1a      	ldr	r3, [pc, #104]	; (8007480 <USBD_SetConfig+0x150>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7fe ff9d 	bl	800635a <USBD_SetClassConfig>
 8007420:	4603      	mov	r3, r0
 8007422:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007424:	7bfb      	ldrb	r3, [r7, #15]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00f      	beq.n	800744a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f918 	bl	8007662 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	b2db      	uxtb	r3, r3
 8007438:	4619      	mov	r1, r3
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7fe ffa9 	bl	8006392 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007448:	e014      	b.n	8007474 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f9d4 	bl	80077f8 <USBD_CtlSendStatus>
      break;
 8007450:	e010      	b.n	8007474 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f9d0 	bl	80077f8 <USBD_CtlSendStatus>
      break;
 8007458:	e00c      	b.n	8007474 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f900 	bl	8007662 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007462:	4b07      	ldr	r3, [pc, #28]	; (8007480 <USBD_SetConfig+0x150>)
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7fe ff92 	bl	8006392 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800746e:	2303      	movs	r3, #3
 8007470:	73fb      	strb	r3, [r7, #15]
      break;
 8007472:	bf00      	nop
  }

  return ret;
 8007474:	7bfb      	ldrb	r3, [r7, #15]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20000210 	.word	0x20000210

08007484 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	88db      	ldrh	r3, [r3, #6]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d004      	beq.n	80074a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f8e2 	bl	8007662 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800749e:	e023      	b.n	80074e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	dc02      	bgt.n	80074b2 <USBD_GetConfig+0x2e>
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	dc03      	bgt.n	80074b8 <USBD_GetConfig+0x34>
 80074b0:	e015      	b.n	80074de <USBD_GetConfig+0x5a>
 80074b2:	2b03      	cmp	r3, #3
 80074b4:	d00b      	beq.n	80074ce <USBD_GetConfig+0x4a>
 80074b6:	e012      	b.n	80074de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3308      	adds	r3, #8
 80074c2:	2201      	movs	r2, #1
 80074c4:	4619      	mov	r1, r3
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f93c 	bl	8007744 <USBD_CtlSendData>
        break;
 80074cc:	e00c      	b.n	80074e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	3304      	adds	r3, #4
 80074d2:	2201      	movs	r2, #1
 80074d4:	4619      	mov	r1, r3
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f934 	bl	8007744 <USBD_CtlSendData>
        break;
 80074dc:	e004      	b.n	80074e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80074de:	6839      	ldr	r1, [r7, #0]
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f8be 	bl	8007662 <USBD_CtlError>
        break;
 80074e6:	bf00      	nop
}
 80074e8:	bf00      	nop
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007500:	b2db      	uxtb	r3, r3
 8007502:	3b01      	subs	r3, #1
 8007504:	2b02      	cmp	r3, #2
 8007506:	d81e      	bhi.n	8007546 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	88db      	ldrh	r3, [r3, #6]
 800750c:	2b02      	cmp	r3, #2
 800750e:	d004      	beq.n	800751a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007510:	6839      	ldr	r1, [r7, #0]
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f8a5 	bl	8007662 <USBD_CtlError>
        break;
 8007518:	e01a      	b.n	8007550 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007526:	2b00      	cmp	r3, #0
 8007528:	d005      	beq.n	8007536 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f043 0202 	orr.w	r2, r3, #2
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	330c      	adds	r3, #12
 800753a:	2202      	movs	r2, #2
 800753c:	4619      	mov	r1, r3
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f900 	bl	8007744 <USBD_CtlSendData>
      break;
 8007544:	e004      	b.n	8007550 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f88a 	bl	8007662 <USBD_CtlError>
      break;
 800754e:	bf00      	nop
  }
}
 8007550:	bf00      	nop
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	885b      	ldrh	r3, [r3, #2]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d107      	bne.n	800757a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f940 	bl	80077f8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007578:	e013      	b.n	80075a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	885b      	ldrh	r3, [r3, #2]
 800757e:	2b02      	cmp	r3, #2
 8007580:	d10b      	bne.n	800759a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	889b      	ldrh	r3, [r3, #4]
 8007586:	0a1b      	lsrs	r3, r3, #8
 8007588:	b29b      	uxth	r3, r3
 800758a:	b2da      	uxtb	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f930 	bl	80077f8 <USBD_CtlSendStatus>
}
 8007598:	e003      	b.n	80075a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f860 	bl	8007662 <USBD_CtlError>
}
 80075a2:	bf00      	nop
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b082      	sub	sp, #8
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	3b01      	subs	r3, #1
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d80b      	bhi.n	80075da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	885b      	ldrh	r3, [r3, #2]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d10c      	bne.n	80075e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f910 	bl	80077f8 <USBD_CtlSendStatus>
      }
      break;
 80075d8:	e004      	b.n	80075e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80075da:	6839      	ldr	r1, [r7, #0]
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f840 	bl	8007662 <USBD_CtlError>
      break;
 80075e2:	e000      	b.n	80075e6 <USBD_ClrFeature+0x3c>
      break;
 80075e4:	bf00      	nop
  }
}
 80075e6:	bf00      	nop
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b084      	sub	sp, #16
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	781a      	ldrb	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3301      	adds	r3, #1
 8007608:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	781a      	ldrb	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	3301      	adds	r3, #1
 8007616:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f7ff fa41 	bl	8006aa0 <SWAPBYTE>
 800761e:	4603      	mov	r3, r0
 8007620:	461a      	mov	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	3301      	adds	r3, #1
 800762a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	3301      	adds	r3, #1
 8007630:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f7ff fa34 	bl	8006aa0 <SWAPBYTE>
 8007638:	4603      	mov	r3, r0
 800763a:	461a      	mov	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	3301      	adds	r3, #1
 8007644:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	3301      	adds	r3, #1
 800764a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f7ff fa27 	bl	8006aa0 <SWAPBYTE>
 8007652:	4603      	mov	r3, r0
 8007654:	461a      	mov	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	80da      	strh	r2, [r3, #6]
}
 800765a:	bf00      	nop
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b082      	sub	sp, #8
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800766c:	2180      	movs	r1, #128	; 0x80
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fcc8 	bl	8008004 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007674:	2100      	movs	r1, #0
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fcc4 	bl	8008004 <USBD_LL_StallEP>
}
 800767c:	bf00      	nop
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007690:	2300      	movs	r3, #0
 8007692:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d036      	beq.n	8007708 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800769e:	6938      	ldr	r0, [r7, #16]
 80076a0:	f000 f836 	bl	8007710 <USBD_GetLen>
 80076a4:	4603      	mov	r3, r0
 80076a6:	3301      	adds	r3, #1
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	005b      	lsls	r3, r3, #1
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80076b2:	7dfb      	ldrb	r3, [r7, #23]
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	4413      	add	r3, r2
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	7812      	ldrb	r2, [r2, #0]
 80076bc:	701a      	strb	r2, [r3, #0]
  idx++;
 80076be:	7dfb      	ldrb	r3, [r7, #23]
 80076c0:	3301      	adds	r3, #1
 80076c2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80076c4:	7dfb      	ldrb	r3, [r7, #23]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	4413      	add	r3, r2
 80076ca:	2203      	movs	r2, #3
 80076cc:	701a      	strb	r2, [r3, #0]
  idx++;
 80076ce:	7dfb      	ldrb	r3, [r7, #23]
 80076d0:	3301      	adds	r3, #1
 80076d2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80076d4:	e013      	b.n	80076fe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80076d6:	7dfb      	ldrb	r3, [r7, #23]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	4413      	add	r3, r2
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	7812      	ldrb	r2, [r2, #0]
 80076e0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	3301      	adds	r3, #1
 80076e6:	613b      	str	r3, [r7, #16]
    idx++;
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
 80076ea:	3301      	adds	r3, #1
 80076ec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80076ee:	7dfb      	ldrb	r3, [r7, #23]
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	4413      	add	r3, r2
 80076f4:	2200      	movs	r2, #0
 80076f6:	701a      	strb	r2, [r3, #0]
    idx++;
 80076f8:	7dfb      	ldrb	r3, [r7, #23]
 80076fa:	3301      	adds	r3, #1
 80076fc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e7      	bne.n	80076d6 <USBD_GetString+0x52>
 8007706:	e000      	b.n	800770a <USBD_GetString+0x86>
    return;
 8007708:	bf00      	nop
  }
}
 800770a:	3718      	adds	r7, #24
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007718:	2300      	movs	r3, #0
 800771a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007720:	e005      	b.n	800772e <USBD_GetLen+0x1e>
  {
    len++;
 8007722:	7bfb      	ldrb	r3, [r7, #15]
 8007724:	3301      	adds	r3, #1
 8007726:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	3301      	adds	r3, #1
 800772c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1f5      	bne.n	8007722 <USBD_GetLen+0x12>
  }

  return len;
 8007736:	7bfb      	ldrb	r3, [r7, #15]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3714      	adds	r7, #20
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2202      	movs	r2, #2
 8007754:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	2100      	movs	r1, #0
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 fcd3 	bl	8008116 <USBD_LL_Transmit>

  return USBD_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b084      	sub	sp, #16
 800777e:	af00      	add	r7, sp, #0
 8007780:	60f8      	str	r0, [r7, #12]
 8007782:	60b9      	str	r1, [r7, #8]
 8007784:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	2100      	movs	r1, #0
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f000 fcc2 	bl	8008116 <USBD_LL_Transmit>

  return USBD_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2203      	movs	r2, #3
 80077ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	2100      	movs	r1, #0
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f000 fcc6 	bl	8008158 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b084      	sub	sp, #16
 80077da:	af00      	add	r7, sp, #0
 80077dc:	60f8      	str	r0, [r7, #12]
 80077de:	60b9      	str	r1, [r7, #8]
 80077e0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	2100      	movs	r1, #0
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 fcb5 	bl	8008158 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2204      	movs	r2, #4
 8007804:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007808:	2300      	movs	r3, #0
 800780a:	2200      	movs	r2, #0
 800780c:	2100      	movs	r1, #0
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fc81 	bl	8008116 <USBD_LL_Transmit>

  return USBD_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b082      	sub	sp, #8
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2205      	movs	r2, #5
 800782a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800782e:	2300      	movs	r3, #0
 8007830:	2200      	movs	r2, #0
 8007832:	2100      	movs	r1, #0
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fc8f 	bl	8008158 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3708      	adds	r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007848:	2200      	movs	r2, #0
 800784a:	4912      	ldr	r1, [pc, #72]	; (8007894 <MX_USB_DEVICE_Init+0x50>)
 800784c:	4812      	ldr	r0, [pc, #72]	; (8007898 <MX_USB_DEVICE_Init+0x54>)
 800784e:	f7fe fd07 	bl	8006260 <USBD_Init>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d001      	beq.n	800785c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007858:	f7f9 f864 	bl	8000924 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800785c:	490f      	ldr	r1, [pc, #60]	; (800789c <MX_USB_DEVICE_Init+0x58>)
 800785e:	480e      	ldr	r0, [pc, #56]	; (8007898 <MX_USB_DEVICE_Init+0x54>)
 8007860:	f7fe fd2e 	bl	80062c0 <USBD_RegisterClass>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d001      	beq.n	800786e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800786a:	f7f9 f85b 	bl	8000924 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800786e:	490c      	ldr	r1, [pc, #48]	; (80078a0 <MX_USB_DEVICE_Init+0x5c>)
 8007870:	4809      	ldr	r0, [pc, #36]	; (8007898 <MX_USB_DEVICE_Init+0x54>)
 8007872:	f7fe fc65 	bl	8006140 <USBD_CDC_RegisterInterface>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d001      	beq.n	8007880 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800787c:	f7f9 f852 	bl	8000924 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007880:	4805      	ldr	r0, [pc, #20]	; (8007898 <MX_USB_DEVICE_Init+0x54>)
 8007882:	f7fe fd53 	bl	800632c <USBD_Start>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800788c:	f7f9 f84a 	bl	8000924 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007890:	bf00      	nop
 8007892:	bd80      	pop	{r7, pc}
 8007894:	200000ac 	.word	0x200000ac
 8007898:	20000214 	.word	0x20000214
 800789c:	20000018 	.word	0x20000018
 80078a0:	20000098 	.word	0x20000098

080078a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80078a8:	2200      	movs	r2, #0
 80078aa:	4905      	ldr	r1, [pc, #20]	; (80078c0 <CDC_Init_FS+0x1c>)
 80078ac:	4805      	ldr	r0, [pc, #20]	; (80078c4 <CDC_Init_FS+0x20>)
 80078ae:	f7fe fc61 	bl	8006174 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80078b2:	4905      	ldr	r1, [pc, #20]	; (80078c8 <CDC_Init_FS+0x24>)
 80078b4:	4803      	ldr	r0, [pc, #12]	; (80078c4 <CDC_Init_FS+0x20>)
 80078b6:	f7fe fc7f 	bl	80061b8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80078ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80078bc:	4618      	mov	r0, r3
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	20000cf0 	.word	0x20000cf0
 80078c4:	20000214 	.word	0x20000214
 80078c8:	200004f0 	.word	0x200004f0

080078cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80078cc:	b480      	push	{r7}
 80078ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80078d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	4603      	mov	r3, r0
 80078e4:	6039      	str	r1, [r7, #0]
 80078e6:	71fb      	strb	r3, [r7, #7]
 80078e8:	4613      	mov	r3, r2
 80078ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80078ec:	79fb      	ldrb	r3, [r7, #7]
 80078ee:	2b23      	cmp	r3, #35	; 0x23
 80078f0:	d84a      	bhi.n	8007988 <CDC_Control_FS+0xac>
 80078f2:	a201      	add	r2, pc, #4	; (adr r2, 80078f8 <CDC_Control_FS+0x1c>)
 80078f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f8:	08007989 	.word	0x08007989
 80078fc:	08007989 	.word	0x08007989
 8007900:	08007989 	.word	0x08007989
 8007904:	08007989 	.word	0x08007989
 8007908:	08007989 	.word	0x08007989
 800790c:	08007989 	.word	0x08007989
 8007910:	08007989 	.word	0x08007989
 8007914:	08007989 	.word	0x08007989
 8007918:	08007989 	.word	0x08007989
 800791c:	08007989 	.word	0x08007989
 8007920:	08007989 	.word	0x08007989
 8007924:	08007989 	.word	0x08007989
 8007928:	08007989 	.word	0x08007989
 800792c:	08007989 	.word	0x08007989
 8007930:	08007989 	.word	0x08007989
 8007934:	08007989 	.word	0x08007989
 8007938:	08007989 	.word	0x08007989
 800793c:	08007989 	.word	0x08007989
 8007940:	08007989 	.word	0x08007989
 8007944:	08007989 	.word	0x08007989
 8007948:	08007989 	.word	0x08007989
 800794c:	08007989 	.word	0x08007989
 8007950:	08007989 	.word	0x08007989
 8007954:	08007989 	.word	0x08007989
 8007958:	08007989 	.word	0x08007989
 800795c:	08007989 	.word	0x08007989
 8007960:	08007989 	.word	0x08007989
 8007964:	08007989 	.word	0x08007989
 8007968:	08007989 	.word	0x08007989
 800796c:	08007989 	.word	0x08007989
 8007970:	08007989 	.word	0x08007989
 8007974:	08007989 	.word	0x08007989
 8007978:	08007989 	.word	0x08007989
 800797c:	08007989 	.word	0x08007989
 8007980:	08007989 	.word	0x08007989
 8007984:	08007989 	.word	0x08007989
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007988:	bf00      	nop
  }

  return (USBD_OK);
 800798a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800798c:	4618      	mov	r0, r3
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80079a2:	6879      	ldr	r1, [r7, #4]
 80079a4:	4805      	ldr	r0, [pc, #20]	; (80079bc <CDC_Receive_FS+0x24>)
 80079a6:	f7fe fc07 	bl	80061b8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80079aa:	4804      	ldr	r0, [pc, #16]	; (80079bc <CDC_Receive_FS+0x24>)
 80079ac:	f7fe fc22 	bl	80061f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80079b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	20000214 	.word	0x20000214

080079c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	4613      	mov	r3, r2
 80079cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80079d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	371c      	adds	r7, #28
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
	...

080079e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	4603      	mov	r3, r0
 80079ec:	6039      	str	r1, [r7, #0]
 80079ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	2212      	movs	r2, #18
 80079f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80079f6:	4b03      	ldr	r3, [pc, #12]	; (8007a04 <USBD_FS_DeviceDescriptor+0x20>)
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr
 8007a04:	200000c8 	.word	0x200000c8

08007a08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	4603      	mov	r3, r0
 8007a10:	6039      	str	r1, [r7, #0]
 8007a12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2204      	movs	r2, #4
 8007a18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a1a:	4b03      	ldr	r3, [pc, #12]	; (8007a28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	200000dc 	.word	0x200000dc

08007a2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	4603      	mov	r3, r0
 8007a34:	6039      	str	r1, [r7, #0]
 8007a36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a38:	79fb      	ldrb	r3, [r7, #7]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d105      	bne.n	8007a4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	4907      	ldr	r1, [pc, #28]	; (8007a60 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a42:	4808      	ldr	r0, [pc, #32]	; (8007a64 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a44:	f7ff fe1e 	bl	8007684 <USBD_GetString>
 8007a48:	e004      	b.n	8007a54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	4904      	ldr	r1, [pc, #16]	; (8007a60 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a4e:	4805      	ldr	r0, [pc, #20]	; (8007a64 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a50:	f7ff fe18 	bl	8007684 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a54:	4b02      	ldr	r3, [pc, #8]	; (8007a60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	200014f0 	.word	0x200014f0
 8007a64:	080082b8 	.word	0x080082b8

08007a68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	4603      	mov	r3, r0
 8007a70:	6039      	str	r1, [r7, #0]
 8007a72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	4904      	ldr	r1, [pc, #16]	; (8007a88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007a78:	4804      	ldr	r0, [pc, #16]	; (8007a8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007a7a:	f7ff fe03 	bl	8007684 <USBD_GetString>
  return USBD_StrDesc;
 8007a7e:	4b02      	ldr	r3, [pc, #8]	; (8007a88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	200014f0 	.word	0x200014f0
 8007a8c:	080082d0 	.word	0x080082d0

08007a90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	4603      	mov	r3, r0
 8007a98:	6039      	str	r1, [r7, #0]
 8007a9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	221a      	movs	r2, #26
 8007aa0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007aa2:	f000 f843 	bl	8007b2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007aa6:	4b02      	ldr	r3, [pc, #8]	; (8007ab0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	200000e0 	.word	0x200000e0

08007ab4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	4603      	mov	r3, r0
 8007abc:	6039      	str	r1, [r7, #0]
 8007abe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ac0:	79fb      	ldrb	r3, [r7, #7]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d105      	bne.n	8007ad2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	4907      	ldr	r1, [pc, #28]	; (8007ae8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007aca:	4808      	ldr	r0, [pc, #32]	; (8007aec <USBD_FS_ConfigStrDescriptor+0x38>)
 8007acc:	f7ff fdda 	bl	8007684 <USBD_GetString>
 8007ad0:	e004      	b.n	8007adc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	4904      	ldr	r1, [pc, #16]	; (8007ae8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ad6:	4805      	ldr	r0, [pc, #20]	; (8007aec <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ad8:	f7ff fdd4 	bl	8007684 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007adc:	4b02      	ldr	r3, [pc, #8]	; (8007ae8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	200014f0 	.word	0x200014f0
 8007aec:	080082e4 	.word	0x080082e4

08007af0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	4603      	mov	r3, r0
 8007af8:	6039      	str	r1, [r7, #0]
 8007afa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007afc:	79fb      	ldrb	r3, [r7, #7]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d105      	bne.n	8007b0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	4907      	ldr	r1, [pc, #28]	; (8007b24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b06:	4808      	ldr	r0, [pc, #32]	; (8007b28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b08:	f7ff fdbc 	bl	8007684 <USBD_GetString>
 8007b0c:	e004      	b.n	8007b18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	4904      	ldr	r1, [pc, #16]	; (8007b24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b12:	4805      	ldr	r0, [pc, #20]	; (8007b28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b14:	f7ff fdb6 	bl	8007684 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b18:	4b02      	ldr	r3, [pc, #8]	; (8007b24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	200014f0 	.word	0x200014f0
 8007b28:	080082f0 	.word	0x080082f0

08007b2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b32:	4b0f      	ldr	r3, [pc, #60]	; (8007b70 <Get_SerialNum+0x44>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b38:	4b0e      	ldr	r3, [pc, #56]	; (8007b74 <Get_SerialNum+0x48>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b3e:	4b0e      	ldr	r3, [pc, #56]	; (8007b78 <Get_SerialNum+0x4c>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4413      	add	r3, r2
 8007b4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d009      	beq.n	8007b66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b52:	2208      	movs	r2, #8
 8007b54:	4909      	ldr	r1, [pc, #36]	; (8007b7c <Get_SerialNum+0x50>)
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f000 f814 	bl	8007b84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b5c:	2204      	movs	r2, #4
 8007b5e:	4908      	ldr	r1, [pc, #32]	; (8007b80 <Get_SerialNum+0x54>)
 8007b60:	68b8      	ldr	r0, [r7, #8]
 8007b62:	f000 f80f 	bl	8007b84 <IntToUnicode>
  }
}
 8007b66:	bf00      	nop
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	1fff7a10 	.word	0x1fff7a10
 8007b74:	1fff7a14 	.word	0x1fff7a14
 8007b78:	1fff7a18 	.word	0x1fff7a18
 8007b7c:	200000e2 	.word	0x200000e2
 8007b80:	200000f2 	.word	0x200000f2

08007b84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b087      	sub	sp, #28
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007b92:	2300      	movs	r3, #0
 8007b94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007b96:	2300      	movs	r3, #0
 8007b98:	75fb      	strb	r3, [r7, #23]
 8007b9a:	e027      	b.n	8007bec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	0f1b      	lsrs	r3, r3, #28
 8007ba0:	2b09      	cmp	r3, #9
 8007ba2:	d80b      	bhi.n	8007bbc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	0f1b      	lsrs	r3, r3, #28
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	7dfb      	ldrb	r3, [r7, #23]
 8007bac:	005b      	lsls	r3, r3, #1
 8007bae:	4619      	mov	r1, r3
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	440b      	add	r3, r1
 8007bb4:	3230      	adds	r2, #48	; 0x30
 8007bb6:	b2d2      	uxtb	r2, r2
 8007bb8:	701a      	strb	r2, [r3, #0]
 8007bba:	e00a      	b.n	8007bd2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	0f1b      	lsrs	r3, r3, #28
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	7dfb      	ldrb	r3, [r7, #23]
 8007bc4:	005b      	lsls	r3, r3, #1
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	440b      	add	r3, r1
 8007bcc:	3237      	adds	r2, #55	; 0x37
 8007bce:	b2d2      	uxtb	r2, r2
 8007bd0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	011b      	lsls	r3, r3, #4
 8007bd6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007bd8:	7dfb      	ldrb	r3, [r7, #23]
 8007bda:	005b      	lsls	r3, r3, #1
 8007bdc:	3301      	adds	r3, #1
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	4413      	add	r3, r2
 8007be2:	2200      	movs	r2, #0
 8007be4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007be6:	7dfb      	ldrb	r3, [r7, #23]
 8007be8:	3301      	adds	r3, #1
 8007bea:	75fb      	strb	r3, [r7, #23]
 8007bec:	7dfa      	ldrb	r2, [r7, #23]
 8007bee:	79fb      	ldrb	r3, [r7, #7]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d3d3      	bcc.n	8007b9c <IntToUnicode+0x18>
  }
}
 8007bf4:	bf00      	nop
 8007bf6:	bf00      	nop
 8007bf8:	371c      	adds	r7, #28
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
	...

08007c04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b08a      	sub	sp, #40	; 0x28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c0c:	f107 0314 	add.w	r3, r7, #20
 8007c10:	2200      	movs	r2, #0
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	605a      	str	r2, [r3, #4]
 8007c16:	609a      	str	r2, [r3, #8]
 8007c18:	60da      	str	r2, [r3, #12]
 8007c1a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c24:	d147      	bne.n	8007cb6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c26:	2300      	movs	r3, #0
 8007c28:	613b      	str	r3, [r7, #16]
 8007c2a:	4b25      	ldr	r3, [pc, #148]	; (8007cc0 <HAL_PCD_MspInit+0xbc>)
 8007c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2e:	4a24      	ldr	r2, [pc, #144]	; (8007cc0 <HAL_PCD_MspInit+0xbc>)
 8007c30:	f043 0301 	orr.w	r3, r3, #1
 8007c34:	6313      	str	r3, [r2, #48]	; 0x30
 8007c36:	4b22      	ldr	r3, [pc, #136]	; (8007cc0 <HAL_PCD_MspInit+0xbc>)
 8007c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	613b      	str	r3, [r7, #16]
 8007c40:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007c42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007c50:	f107 0314 	add.w	r3, r7, #20
 8007c54:	4619      	mov	r1, r3
 8007c56:	481b      	ldr	r0, [pc, #108]	; (8007cc4 <HAL_PCD_MspInit+0xc0>)
 8007c58:	f7f9 f9a6 	bl	8000fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007c5c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c62:	2302      	movs	r3, #2
 8007c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c66:	2300      	movs	r3, #0
 8007c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007c6e:	230a      	movs	r3, #10
 8007c70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c72:	f107 0314 	add.w	r3, r7, #20
 8007c76:	4619      	mov	r1, r3
 8007c78:	4812      	ldr	r0, [pc, #72]	; (8007cc4 <HAL_PCD_MspInit+0xc0>)
 8007c7a:	f7f9 f995 	bl	8000fa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007c7e:	4b10      	ldr	r3, [pc, #64]	; (8007cc0 <HAL_PCD_MspInit+0xbc>)
 8007c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c82:	4a0f      	ldr	r2, [pc, #60]	; (8007cc0 <HAL_PCD_MspInit+0xbc>)
 8007c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c88:	6353      	str	r3, [r2, #52]	; 0x34
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	60fb      	str	r3, [r7, #12]
 8007c8e:	4b0c      	ldr	r3, [pc, #48]	; (8007cc0 <HAL_PCD_MspInit+0xbc>)
 8007c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c92:	4a0b      	ldr	r2, [pc, #44]	; (8007cc0 <HAL_PCD_MspInit+0xbc>)
 8007c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c98:	6453      	str	r3, [r2, #68]	; 0x44
 8007c9a:	4b09      	ldr	r3, [pc, #36]	; (8007cc0 <HAL_PCD_MspInit+0xbc>)
 8007c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ca2:	60fb      	str	r3, [r7, #12]
 8007ca4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2100      	movs	r1, #0
 8007caa:	2043      	movs	r0, #67	; 0x43
 8007cac:	f7f9 f945 	bl	8000f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007cb0:	2043      	movs	r0, #67	; 0x43
 8007cb2:	f7f9 f95e 	bl	8000f72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007cb6:	bf00      	nop
 8007cb8:	3728      	adds	r7, #40	; 0x28
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	40023800 	.word	0x40023800
 8007cc4:	40020000 	.word	0x40020000

08007cc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007cdc:	4619      	mov	r1, r3
 8007cde:	4610      	mov	r0, r2
 8007ce0:	f7fe fb71 	bl	80063c6 <USBD_LL_SetupStage>
}
 8007ce4:	bf00      	nop
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007cfe:	78fa      	ldrb	r2, [r7, #3]
 8007d00:	6879      	ldr	r1, [r7, #4]
 8007d02:	4613      	mov	r3, r2
 8007d04:	00db      	lsls	r3, r3, #3
 8007d06:	4413      	add	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	440b      	add	r3, r1
 8007d0c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	78fb      	ldrb	r3, [r7, #3]
 8007d14:	4619      	mov	r1, r3
 8007d16:	f7fe fbab 	bl	8006470 <USBD_LL_DataOutStage>
}
 8007d1a:	bf00      	nop
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b082      	sub	sp, #8
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007d34:	78fa      	ldrb	r2, [r7, #3]
 8007d36:	6879      	ldr	r1, [r7, #4]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	00db      	lsls	r3, r3, #3
 8007d3c:	4413      	add	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	440b      	add	r3, r1
 8007d42:	334c      	adds	r3, #76	; 0x4c
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	78fb      	ldrb	r3, [r7, #3]
 8007d48:	4619      	mov	r1, r3
 8007d4a:	f7fe fc44 	bl	80065d6 <USBD_LL_DataInStage>
}
 8007d4e:	bf00      	nop
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b082      	sub	sp, #8
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7fe fd78 	bl	800685a <USBD_LL_SOF>
}
 8007d6a:	bf00      	nop
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b084      	sub	sp, #16
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d102      	bne.n	8007d8c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007d86:	2300      	movs	r3, #0
 8007d88:	73fb      	strb	r3, [r7, #15]
 8007d8a:	e008      	b.n	8007d9e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d102      	bne.n	8007d9a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007d94:	2301      	movs	r3, #1
 8007d96:	73fb      	strb	r3, [r7, #15]
 8007d98:	e001      	b.n	8007d9e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007d9a:	f7f8 fdc3 	bl	8000924 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007da4:	7bfa      	ldrb	r2, [r7, #15]
 8007da6:	4611      	mov	r1, r2
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fe fd18 	bl	80067de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fe fcc0 	bl	800673a <USBD_LL_Reset>
}
 8007dba:	bf00      	nop
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
	...

08007dc4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fe fd13 	bl	80067fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	6812      	ldr	r2, [r2, #0]
 8007de6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007dea:	f043 0301 	orr.w	r3, r3, #1
 8007dee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d005      	beq.n	8007e04 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007df8:	4b04      	ldr	r3, [pc, #16]	; (8007e0c <HAL_PCD_SuspendCallback+0x48>)
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	4a03      	ldr	r2, [pc, #12]	; (8007e0c <HAL_PCD_SuspendCallback+0x48>)
 8007dfe:	f043 0306 	orr.w	r3, r3, #6
 8007e02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e04:	bf00      	nop
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	e000ed00 	.word	0xe000ed00

08007e10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fe fd03 	bl	800682a <USBD_LL_Resume>
}
 8007e24:	bf00      	nop
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	460b      	mov	r3, r1
 8007e36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e3e:	78fa      	ldrb	r2, [r7, #3]
 8007e40:	4611      	mov	r1, r2
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fe fd5b 	bl	80068fe <USBD_LL_IsoOUTIncomplete>
}
 8007e48:	bf00      	nop
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e62:	78fa      	ldrb	r2, [r7, #3]
 8007e64:	4611      	mov	r1, r2
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fe fd17 	bl	800689a <USBD_LL_IsoINIncomplete>
}
 8007e6c:	bf00      	nop
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fe fd6d 	bl	8006962 <USBD_LL_DevConnected>
}
 8007e88:	bf00      	nop
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7fe fd6a 	bl	8006978 <USBD_LL_DevDisconnected>
}
 8007ea4:	bf00      	nop
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d13c      	bne.n	8007f36 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007ebc:	4a20      	ldr	r2, [pc, #128]	; (8007f40 <USBD_LL_Init+0x94>)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a1e      	ldr	r2, [pc, #120]	; (8007f40 <USBD_LL_Init+0x94>)
 8007ec8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ecc:	4b1c      	ldr	r3, [pc, #112]	; (8007f40 <USBD_LL_Init+0x94>)
 8007ece:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007ed2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007ed4:	4b1a      	ldr	r3, [pc, #104]	; (8007f40 <USBD_LL_Init+0x94>)
 8007ed6:	2204      	movs	r2, #4
 8007ed8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007eda:	4b19      	ldr	r3, [pc, #100]	; (8007f40 <USBD_LL_Init+0x94>)
 8007edc:	2202      	movs	r2, #2
 8007ede:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ee0:	4b17      	ldr	r3, [pc, #92]	; (8007f40 <USBD_LL_Init+0x94>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007ee6:	4b16      	ldr	r3, [pc, #88]	; (8007f40 <USBD_LL_Init+0x94>)
 8007ee8:	2202      	movs	r2, #2
 8007eea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007eec:	4b14      	ldr	r3, [pc, #80]	; (8007f40 <USBD_LL_Init+0x94>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007ef2:	4b13      	ldr	r3, [pc, #76]	; (8007f40 <USBD_LL_Init+0x94>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007ef8:	4b11      	ldr	r3, [pc, #68]	; (8007f40 <USBD_LL_Init+0x94>)
 8007efa:	2200      	movs	r2, #0
 8007efc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007efe:	4b10      	ldr	r3, [pc, #64]	; (8007f40 <USBD_LL_Init+0x94>)
 8007f00:	2201      	movs	r2, #1
 8007f02:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007f04:	4b0e      	ldr	r3, [pc, #56]	; (8007f40 <USBD_LL_Init+0x94>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007f0a:	480d      	ldr	r0, [pc, #52]	; (8007f40 <USBD_LL_Init+0x94>)
 8007f0c:	f7fa f800 	bl	8001f10 <HAL_PCD_Init>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d001      	beq.n	8007f1a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007f16:	f7f8 fd05 	bl	8000924 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007f1a:	2180      	movs	r1, #128	; 0x80
 8007f1c:	4808      	ldr	r0, [pc, #32]	; (8007f40 <USBD_LL_Init+0x94>)
 8007f1e:	f7fb fa58 	bl	80033d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007f22:	2240      	movs	r2, #64	; 0x40
 8007f24:	2100      	movs	r1, #0
 8007f26:	4806      	ldr	r0, [pc, #24]	; (8007f40 <USBD_LL_Init+0x94>)
 8007f28:	f7fb fa0c 	bl	8003344 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007f2c:	2280      	movs	r2, #128	; 0x80
 8007f2e:	2101      	movs	r1, #1
 8007f30:	4803      	ldr	r0, [pc, #12]	; (8007f40 <USBD_LL_Init+0x94>)
 8007f32:	f7fb fa07 	bl	8003344 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	200016f0 	.word	0x200016f0

08007f44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7fa f8f5 	bl	800214a <HAL_PCD_Start>
 8007f60:	4603      	mov	r3, r0
 8007f62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
 8007f66:	4618      	mov	r0, r3
 8007f68:	f000 f942 	bl	80081f0 <USBD_Get_USB_Status>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f70:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b084      	sub	sp, #16
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	4608      	mov	r0, r1
 8007f84:	4611      	mov	r1, r2
 8007f86:	461a      	mov	r2, r3
 8007f88:	4603      	mov	r3, r0
 8007f8a:	70fb      	strb	r3, [r7, #3]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	70bb      	strb	r3, [r7, #2]
 8007f90:	4613      	mov	r3, r2
 8007f92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f94:	2300      	movs	r3, #0
 8007f96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007fa2:	78bb      	ldrb	r3, [r7, #2]
 8007fa4:	883a      	ldrh	r2, [r7, #0]
 8007fa6:	78f9      	ldrb	r1, [r7, #3]
 8007fa8:	f7fa fdc6 	bl	8002b38 <HAL_PCD_EP_Open>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 f91c 	bl	80081f0 <USBD_Get_USB_Status>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b084      	sub	sp, #16
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	460b      	mov	r3, r1
 8007fd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007fe0:	78fa      	ldrb	r2, [r7, #3]
 8007fe2:	4611      	mov	r1, r2
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7fa fe0f 	bl	8002c08 <HAL_PCD_EP_Close>
 8007fea:	4603      	mov	r3, r0
 8007fec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f000 f8fd 	bl	80081f0 <USBD_Get_USB_Status>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	460b      	mov	r3, r1
 800800e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008010:	2300      	movs	r3, #0
 8008012:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800801e:	78fa      	ldrb	r2, [r7, #3]
 8008020:	4611      	mov	r1, r2
 8008022:	4618      	mov	r0, r3
 8008024:	f7fa fee7 	bl	8002df6 <HAL_PCD_EP_SetStall>
 8008028:	4603      	mov	r3, r0
 800802a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800802c:	7bfb      	ldrb	r3, [r7, #15]
 800802e:	4618      	mov	r0, r3
 8008030:	f000 f8de 	bl	80081f0 <USBD_Get_USB_Status>
 8008034:	4603      	mov	r3, r0
 8008036:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008038:	7bbb      	ldrb	r3, [r7, #14]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b084      	sub	sp, #16
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	460b      	mov	r3, r1
 800804c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800805c:	78fa      	ldrb	r2, [r7, #3]
 800805e:	4611      	mov	r1, r2
 8008060:	4618      	mov	r0, r3
 8008062:	f7fa ff2c 	bl	8002ebe <HAL_PCD_EP_ClrStall>
 8008066:	4603      	mov	r3, r0
 8008068:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800806a:	7bfb      	ldrb	r3, [r7, #15]
 800806c:	4618      	mov	r0, r3
 800806e:	f000 f8bf 	bl	80081f0 <USBD_Get_USB_Status>
 8008072:	4603      	mov	r3, r0
 8008074:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008076:	7bbb      	ldrb	r3, [r7, #14]
}
 8008078:	4618      	mov	r0, r3
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	460b      	mov	r3, r1
 800808a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008092:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008094:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008098:	2b00      	cmp	r3, #0
 800809a:	da0b      	bge.n	80080b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800809c:	78fb      	ldrb	r3, [r7, #3]
 800809e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080a2:	68f9      	ldr	r1, [r7, #12]
 80080a4:	4613      	mov	r3, r2
 80080a6:	00db      	lsls	r3, r3, #3
 80080a8:	4413      	add	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	440b      	add	r3, r1
 80080ae:	333e      	adds	r3, #62	; 0x3e
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	e00b      	b.n	80080cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80080b4:	78fb      	ldrb	r3, [r7, #3]
 80080b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080ba:	68f9      	ldr	r1, [r7, #12]
 80080bc:	4613      	mov	r3, r2
 80080be:	00db      	lsls	r3, r3, #3
 80080c0:	4413      	add	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	440b      	add	r3, r1
 80080c6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80080ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	460b      	mov	r3, r1
 80080e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080e8:	2300      	movs	r3, #0
 80080ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080f2:	78fa      	ldrb	r2, [r7, #3]
 80080f4:	4611      	mov	r1, r2
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fa fcf9 	bl	8002aee <HAL_PCD_SetAddress>
 80080fc:	4603      	mov	r3, r0
 80080fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008100:	7bfb      	ldrb	r3, [r7, #15]
 8008102:	4618      	mov	r0, r3
 8008104:	f000 f874 	bl	80081f0 <USBD_Get_USB_Status>
 8008108:	4603      	mov	r3, r0
 800810a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800810c:	7bbb      	ldrb	r3, [r7, #14]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b086      	sub	sp, #24
 800811a:	af00      	add	r7, sp, #0
 800811c:	60f8      	str	r0, [r7, #12]
 800811e:	607a      	str	r2, [r7, #4]
 8008120:	603b      	str	r3, [r7, #0]
 8008122:	460b      	mov	r3, r1
 8008124:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008126:	2300      	movs	r3, #0
 8008128:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008134:	7af9      	ldrb	r1, [r7, #11]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	f7fa fe12 	bl	8002d62 <HAL_PCD_EP_Transmit>
 800813e:	4603      	mov	r3, r0
 8008140:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008142:	7dfb      	ldrb	r3, [r7, #23]
 8008144:	4618      	mov	r0, r3
 8008146:	f000 f853 	bl	80081f0 <USBD_Get_USB_Status>
 800814a:	4603      	mov	r3, r0
 800814c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800814e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008150:	4618      	mov	r0, r3
 8008152:	3718      	adds	r7, #24
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	607a      	str	r2, [r7, #4]
 8008162:	603b      	str	r3, [r7, #0]
 8008164:	460b      	mov	r3, r1
 8008166:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008176:	7af9      	ldrb	r1, [r7, #11]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	f7fa fd8e 	bl	8002c9c <HAL_PCD_EP_Receive>
 8008180:	4603      	mov	r3, r0
 8008182:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008184:	7dfb      	ldrb	r3, [r7, #23]
 8008186:	4618      	mov	r0, r3
 8008188:	f000 f832 	bl	80081f0 <USBD_Get_USB_Status>
 800818c:	4603      	mov	r3, r0
 800818e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008190:	7dbb      	ldrb	r3, [r7, #22]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3718      	adds	r7, #24
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b082      	sub	sp, #8
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	460b      	mov	r3, r1
 80081a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081ac:	78fa      	ldrb	r2, [r7, #3]
 80081ae:	4611      	mov	r1, r2
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fa fdbe 	bl	8002d32 <HAL_PCD_EP_GetRxCount>
 80081b6:	4603      	mov	r3, r0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80081c8:	4b03      	ldr	r3, [pc, #12]	; (80081d8 <USBD_static_malloc+0x18>)
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	20001bfc 	.word	0x20001bfc

080081dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]

}
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	4603      	mov	r3, r0
 80081f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081fa:	2300      	movs	r3, #0
 80081fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80081fe:	79fb      	ldrb	r3, [r7, #7]
 8008200:	2b03      	cmp	r3, #3
 8008202:	d817      	bhi.n	8008234 <USBD_Get_USB_Status+0x44>
 8008204:	a201      	add	r2, pc, #4	; (adr r2, 800820c <USBD_Get_USB_Status+0x1c>)
 8008206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820a:	bf00      	nop
 800820c:	0800821d 	.word	0x0800821d
 8008210:	08008223 	.word	0x08008223
 8008214:	08008229 	.word	0x08008229
 8008218:	0800822f 	.word	0x0800822f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	73fb      	strb	r3, [r7, #15]
    break;
 8008220:	e00b      	b.n	800823a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008222:	2303      	movs	r3, #3
 8008224:	73fb      	strb	r3, [r7, #15]
    break;
 8008226:	e008      	b.n	800823a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008228:	2301      	movs	r3, #1
 800822a:	73fb      	strb	r3, [r7, #15]
    break;
 800822c:	e005      	b.n	800823a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800822e:	2303      	movs	r3, #3
 8008230:	73fb      	strb	r3, [r7, #15]
    break;
 8008232:	e002      	b.n	800823a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008234:	2303      	movs	r3, #3
 8008236:	73fb      	strb	r3, [r7, #15]
    break;
 8008238:	bf00      	nop
  }
  return usb_status;
 800823a:	7bfb      	ldrb	r3, [r7, #15]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <memset>:
 8008248:	4402      	add	r2, r0
 800824a:	4603      	mov	r3, r0
 800824c:	4293      	cmp	r3, r2
 800824e:	d100      	bne.n	8008252 <memset+0xa>
 8008250:	4770      	bx	lr
 8008252:	f803 1b01 	strb.w	r1, [r3], #1
 8008256:	e7f9      	b.n	800824c <memset+0x4>

08008258 <__libc_init_array>:
 8008258:	b570      	push	{r4, r5, r6, lr}
 800825a:	4d0d      	ldr	r5, [pc, #52]	; (8008290 <__libc_init_array+0x38>)
 800825c:	4c0d      	ldr	r4, [pc, #52]	; (8008294 <__libc_init_array+0x3c>)
 800825e:	1b64      	subs	r4, r4, r5
 8008260:	10a4      	asrs	r4, r4, #2
 8008262:	2600      	movs	r6, #0
 8008264:	42a6      	cmp	r6, r4
 8008266:	d109      	bne.n	800827c <__libc_init_array+0x24>
 8008268:	4d0b      	ldr	r5, [pc, #44]	; (8008298 <__libc_init_array+0x40>)
 800826a:	4c0c      	ldr	r4, [pc, #48]	; (800829c <__libc_init_array+0x44>)
 800826c:	f000 f818 	bl	80082a0 <_init>
 8008270:	1b64      	subs	r4, r4, r5
 8008272:	10a4      	asrs	r4, r4, #2
 8008274:	2600      	movs	r6, #0
 8008276:	42a6      	cmp	r6, r4
 8008278:	d105      	bne.n	8008286 <__libc_init_array+0x2e>
 800827a:	bd70      	pop	{r4, r5, r6, pc}
 800827c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008280:	4798      	blx	r3
 8008282:	3601      	adds	r6, #1
 8008284:	e7ee      	b.n	8008264 <__libc_init_array+0xc>
 8008286:	f855 3b04 	ldr.w	r3, [r5], #4
 800828a:	4798      	blx	r3
 800828c:	3601      	adds	r6, #1
 800828e:	e7f2      	b.n	8008276 <__libc_init_array+0x1e>
 8008290:	08008320 	.word	0x08008320
 8008294:	08008320 	.word	0x08008320
 8008298:	08008320 	.word	0x08008320
 800829c:	08008324 	.word	0x08008324

080082a0 <_init>:
 80082a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a2:	bf00      	nop
 80082a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a6:	bc08      	pop	{r3}
 80082a8:	469e      	mov	lr, r3
 80082aa:	4770      	bx	lr

080082ac <_fini>:
 80082ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ae:	bf00      	nop
 80082b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082b2:	bc08      	pop	{r3}
 80082b4:	469e      	mov	lr, r3
 80082b6:	4770      	bx	lr
