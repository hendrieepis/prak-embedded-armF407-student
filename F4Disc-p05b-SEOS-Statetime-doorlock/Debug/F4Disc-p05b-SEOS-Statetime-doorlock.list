
F4Disc-p05b-SEOS-Statetime-doorlock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a234  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  0800a3c4  0800a3c4  0001a3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a560  0800a560  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a560  0800a560  0001a560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a568  0800a568  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a568  0800a568  0001a568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a56c  0800a56c  0001a56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800a570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002015c  2**0
                  CONTENTS
 10 .bss          00001ec8  2000015c  2000015c  0002015c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002024  20002024  0002015c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a493  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000044ed  00000000  00000000  0003a662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018b8  00000000  00000000  0003eb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012f6  00000000  00000000  00040408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026df8  00000000  00000000  000416fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000203c4  00000000  00000000  000684f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d4dd2  00000000  00000000  000888ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006e58  00000000  00000000  0015d68c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  001644e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000015c 	.word	0x2000015c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a3ac 	.word	0x0800a3ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000160 	.word	0x20000160
 80001cc:	0800a3ac 	.word	0x0800a3ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <checkBoard>:
 */

#include "checkboard.h"
#include "main.h"
#include "stdio.h"
void checkBoard(void){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
	  HAL_Delay(5000);
 8000572:	f241 3088 	movw	r0, #5000	; 0x1388
 8000576:	f001 f869 	bl	800164c <HAL_Delay>
	  printf("Cek BarLED, buzzer, USER LED \n\r");
 800057a:	482c      	ldr	r0, [pc, #176]	; (800062c <checkBoard+0xc0>)
 800057c:	f009 f8a2 	bl	80096c4 <iprintf>
	  HAL_Delay(1000);
 8000580:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000584:	f001 f862 	bl	800164c <HAL_Delay>
	  for (uint8_t cnt=0;cnt<8;cnt++){
 8000588:	2300      	movs	r3, #0
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	e044      	b.n	8000618 <checkBoard+0xac>

		  HAL_GPIO_TogglePin(BAR0_GPIO_Port, BAR0_Pin);
 800058e:	2140      	movs	r1, #64	; 0x40
 8000590:	4827      	ldr	r0, [pc, #156]	; (8000630 <checkBoard+0xc4>)
 8000592:	f001 fb5e 	bl	8001c52 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR1_GPIO_Port, BAR1_Pin);
 8000596:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059a:	4826      	ldr	r0, [pc, #152]	; (8000634 <checkBoard+0xc8>)
 800059c:	f001 fb59 	bl	8001c52 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR2_GPIO_Port, BAR2_Pin);
 80005a0:	2110      	movs	r1, #16
 80005a2:	4823      	ldr	r0, [pc, #140]	; (8000630 <checkBoard+0xc4>)
 80005a4:	f001 fb55 	bl	8001c52 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR3_GPIO_Port, BAR3_Pin);
 80005a8:	2120      	movs	r1, #32
 80005aa:	4821      	ldr	r0, [pc, #132]	; (8000630 <checkBoard+0xc4>)
 80005ac:	f001 fb51 	bl	8001c52 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR4_GPIO_Port, BAR4_Pin);
 80005b0:	2104      	movs	r1, #4
 80005b2:	481f      	ldr	r0, [pc, #124]	; (8000630 <checkBoard+0xc4>)
 80005b4:	f001 fb4d 	bl	8001c52 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR5_GPIO_Port, BAR5_Pin);
 80005b8:	2110      	movs	r1, #16
 80005ba:	481f      	ldr	r0, [pc, #124]	; (8000638 <checkBoard+0xcc>)
 80005bc:	f001 fb49 	bl	8001c52 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR6_GPIO_Port, BAR6_Pin);
 80005c0:	2120      	movs	r1, #32
 80005c2:	481d      	ldr	r0, [pc, #116]	; (8000638 <checkBoard+0xcc>)
 80005c4:	f001 fb45 	bl	8001c52 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR7_GPIO_Port, BAR7_Pin);
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	481c      	ldr	r0, [pc, #112]	; (800063c <checkBoard+0xd0>)
 80005cc:	f001 fb41 	bl	8001c52 <HAL_GPIO_TogglePin>

		  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80005d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d4:	4817      	ldr	r0, [pc, #92]	; (8000634 <checkBoard+0xc8>)
 80005d6:	f001 fb3c 	bl	8001c52 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80005da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005de:	4817      	ldr	r0, [pc, #92]	; (800063c <checkBoard+0xd0>)
 80005e0:	f001 fb37 	bl	8001c52 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80005e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e8:	4814      	ldr	r0, [pc, #80]	; (800063c <checkBoard+0xd0>)
 80005ea:	f001 fb32 	bl	8001c52 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 80005ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f2:	4812      	ldr	r0, [pc, #72]	; (800063c <checkBoard+0xd0>)
 80005f4:	f001 fb2d 	bl	8001c52 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 80005f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005fc:	480f      	ldr	r0, [pc, #60]	; (800063c <checkBoard+0xd0>)
 80005fe:	f001 fb28 	bl	8001c52 <HAL_GPIO_TogglePin>
		  printf("count: %d \n\r",cnt);
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	4619      	mov	r1, r3
 8000606:	480e      	ldr	r0, [pc, #56]	; (8000640 <checkBoard+0xd4>)
 8000608:	f009 f85c 	bl	80096c4 <iprintf>
		  HAL_Delay(100);
 800060c:	2064      	movs	r0, #100	; 0x64
 800060e:	f001 f81d 	bl	800164c <HAL_Delay>
	  for (uint8_t cnt=0;cnt<8;cnt++){
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	3301      	adds	r3, #1
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	2b07      	cmp	r3, #7
 800061c:	d9b7      	bls.n	800058e <checkBoard+0x22>
	  }

	  printf("Cek Button \n\r");
 800061e:	4809      	ldr	r0, [pc, #36]	; (8000644 <checkBoard+0xd8>)
 8000620:	f009 f850 	bl	80096c4 <iprintf>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	0800a3c4 	.word	0x0800a3c4
 8000630:	40021000 	.word	0x40021000
 8000634:	40020800 	.word	0x40020800
 8000638:	40020400 	.word	0x40020400
 800063c:	40020c00 	.word	0x40020c00
 8000640:	0800a3e4 	.word	0x0800a3e4
 8000644:	0800a3f4 	.word	0x0800a3f4

08000648 <_write>:
I2S_HandleTypeDef hi2s3;
SPI_HandleTypeDef hspi1;

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*) ptr, len); return len;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	b29b      	uxth	r3, r3
 8000658:	4619      	mov	r1, r3
 800065a:	68b8      	ldr	r0, [r7, #8]
 800065c:	f008 fb18 	bl	8008c90 <CDC_Transmit_FS>
 8000660:	687b      	ldr	r3, [r7, #4]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2230      	movs	r2, #48	; 0x30
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f009 f877 	bl	800976e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	4b28      	ldr	r3, [pc, #160]	; (8000738 <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a27      	ldr	r2, [pc, #156]	; (8000738 <SystemClock_Config+0xcc>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
 80006a0:	4b25      	ldr	r3, [pc, #148]	; (8000738 <SystemClock_Config+0xcc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a21      	ldr	r2, [pc, #132]	; (800073c <SystemClock_Config+0xd0>)
 80006b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c8:	2301      	movs	r3, #1
 80006ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006dc:	2308      	movs	r3, #8
 80006de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ea:	2307      	movs	r3, #7
 80006ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 fb2a 	bl	8003d4c <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006fe:	f000 f9fd 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	230f      	movs	r3, #15
 8000704:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2302      	movs	r3, #2
 8000708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000712:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000718:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	2105      	movs	r1, #5
 8000720:	4618      	mov	r0, r3
 8000722:	f003 fd8b 	bl	800423c <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800072c:	f000 f9e6 	bl	8000afc <Error_Handler>
  }
}
 8000730:	bf00      	nop
 8000732:	3750      	adds	r7, #80	; 0x50
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_I2C1_Init+0x50>)
 8000746:	4a13      	ldr	r2, [pc, #76]	; (8000794 <MX_I2C1_Init+0x54>)
 8000748:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_I2C1_Init+0x50>)
 800074c:	4a12      	ldr	r2, [pc, #72]	; (8000798 <MX_I2C1_Init+0x58>)
 800074e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_I2C1_Init+0x50>)
 800075e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000762:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <MX_I2C1_Init+0x50>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_I2C1_Init+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <MX_I2C1_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_I2C1_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_I2C1_Init+0x50>)
 800077e:	f001 fa83 	bl	8001c88 <HAL_I2C_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000788:	f000 f9b8 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000178 	.word	0x20000178
 8000794:	40005400 	.word	0x40005400
 8000798:	000186a0 	.word	0x000186a0

0800079c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2S3_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007a0:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007a2:	4a14      	ldr	r2, [pc, #80]	; (80007f4 <MX_I2S3_Init+0x58>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ac:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007b4:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007c4:	4a0c      	ldr	r2, [pc, #48]	; (80007f8 <MX_I2S3_Init+0x5c>)
 80007c6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007dc:	f001 fb98 	bl	8001f10 <HAL_I2S_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007e6:	f000 f989 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200001cc 	.word	0x200001cc
 80007f4:	40003c00 	.word	0x40003c00
 80007f8:	00017700 	.word	0x00017700

080007fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_SPI1_Init+0x64>)
 8000802:	4a18      	ldr	r2, [pc, #96]	; (8000864 <MX_SPI1_Init+0x68>)
 8000804:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_SPI1_Init+0x64>)
 8000808:	f44f 7282 	mov.w	r2, #260	; 0x104
 800080c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_SPI1_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_SPI1_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_SPI1_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_SPI1_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_SPI1_Init+0x64>)
 8000828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800082c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_SPI1_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <MX_SPI1_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_SPI1_Init+0x64>)
 800083c:	2200      	movs	r2, #0
 800083e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <MX_SPI1_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_SPI1_Init+0x64>)
 8000848:	220a      	movs	r2, #10
 800084a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_SPI1_Init+0x64>)
 800084e:	f004 f841 	bl	80048d4 <HAL_SPI_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000858:	f000 f950 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000214 	.word	0x20000214
 8000864:	40013000 	.word	0x40013000

08000868 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	; 0x30
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
 8000882:	4b98      	ldr	r3, [pc, #608]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a97      	ldr	r2, [pc, #604]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 8000888:	f043 0310 	orr.w	r3, r3, #16
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b95      	ldr	r3, [pc, #596]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0310 	and.w	r3, r3, #16
 8000896:	61bb      	str	r3, [r7, #24]
 8000898:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	4b91      	ldr	r3, [pc, #580]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a90      	ldr	r2, [pc, #576]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b8e      	ldr	r3, [pc, #568]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b8a      	ldr	r3, [pc, #552]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a89      	ldr	r2, [pc, #548]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b87      	ldr	r3, [pc, #540]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b83      	ldr	r3, [pc, #524]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a82      	ldr	r2, [pc, #520]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b80      	ldr	r3, [pc, #512]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	4b7c      	ldr	r3, [pc, #496]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a7b      	ldr	r2, [pc, #492]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b79      	ldr	r3, [pc, #484]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b75      	ldr	r3, [pc, #468]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a74      	ldr	r2, [pc, #464]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b72      	ldr	r3, [pc, #456]	; (8000ae4 <MX_GPIO_Init+0x27c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0308 	and.w	r3, r3, #8
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BAR4_Pin|CS_I2C_SPI_Pin|BAR2_Pin|BAR3_Pin
 8000926:	2200      	movs	r2, #0
 8000928:	217c      	movs	r1, #124	; 0x7c
 800092a:	486f      	ldr	r0, [pc, #444]	; (8000ae8 <MX_GPIO_Init+0x280>)
 800092c:	f001 f978 	bl	8001c20 <HAL_GPIO_WritePin>
                          |BAR0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BAR1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8000936:	486d      	ldr	r0, [pc, #436]	; (8000aec <MX_GPIO_Init+0x284>)
 8000938:	f001 f972 	bl	8001c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800093c:	2201      	movs	r2, #1
 800093e:	2101      	movs	r1, #1
 8000940:	486a      	ldr	r0, [pc, #424]	; (8000aec <MX_GPIO_Init+0x284>)
 8000942:	f001 f96d 	bl	8001c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000946:	2200      	movs	r2, #0
 8000948:	f24f 0190 	movw	r1, #61584	; 0xf090
 800094c:	4868      	ldr	r0, [pc, #416]	; (8000af0 <MX_GPIO_Init+0x288>)
 800094e:	f001 f967 	bl	8001c20 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin|BAR7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BAR5_Pin|BAR6_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2130      	movs	r1, #48	; 0x30
 8000956:	4867      	ldr	r0, [pc, #412]	; (8000af4 <MX_GPIO_Init+0x28c>)
 8000958:	f001 f962 	bl	8001c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BAR4_Pin CS_I2C_SPI_Pin BAR2_Pin BAR3_Pin
                           BAR0_Pin */
  GPIO_InitStruct.Pin = BAR4_Pin|CS_I2C_SPI_Pin|BAR2_Pin|BAR3_Pin
 800095c:	237c      	movs	r3, #124	; 0x7c
 800095e:	61fb      	str	r3, [r7, #28]
                          |BAR0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	485d      	ldr	r0, [pc, #372]	; (8000ae8 <MX_GPIO_Init+0x280>)
 8000974:	f000 ffa0 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BAR1_Pin OTG_FS_PowerSwitchOn_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = BAR1_Pin|OTG_FS_PowerSwitchOn_Pin|BUZZER_Pin;
 8000978:	f642 0301 	movw	r3, #10241	; 0x2801
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4856      	ldr	r0, [pc, #344]	; (8000aec <MX_GPIO_Init+0x284>)
 8000992:	f000 ff91 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000996:	2308      	movs	r3, #8
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009a6:	2305      	movs	r3, #5
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	484e      	ldr	r0, [pc, #312]	; (8000aec <MX_GPIO_Init+0x284>)
 80009b2:	f000 ff81 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b6:	2301      	movs	r3, #1
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ba:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	484b      	ldr	r0, [pc, #300]	; (8000af8 <MX_GPIO_Init+0x290>)
 80009cc:	f000 ff74 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_UP_Pin BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_RIGHT_Pin;
 80009d0:	2330      	movs	r3, #48	; 0x30
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d8:	2301      	movs	r3, #1
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4842      	ldr	r0, [pc, #264]	; (8000aec <MX_GPIO_Init+0x284>)
 80009e4:	f000 ff68 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_DN_Pin BTN_LEFT_Pin SW3_Pin SW4_Pin */
  GPIO_InitStruct.Pin = BTN_DN_Pin|BTN_LEFT_Pin|SW3_Pin|SW4_Pin;
 80009e8:	f641 0303 	movw	r3, #6147	; 0x1803
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	483d      	ldr	r0, [pc, #244]	; (8000af4 <MX_GPIO_Init+0x28c>)
 80009fe:	f000 ff5b 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a02:	2304      	movs	r3, #4
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4837      	ldr	r0, [pc, #220]	; (8000af4 <MX_GPIO_Init+0x28c>)
 8000a16:	f000 ff4f 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_OK_Pin BTN_CANCEL_Pin */
  GPIO_InitStruct.Pin = BTN_OK_Pin|BTN_CANCEL_Pin;
 8000a1a:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	482e      	ldr	r0, [pc, #184]	; (8000ae8 <MX_GPIO_Init+0x280>)
 8000a30:	f000 ff42 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a46:	2305      	movs	r3, #5
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4828      	ldr	r0, [pc, #160]	; (8000af4 <MX_GPIO_Init+0x28c>)
 8000a52:	f000 ff31 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin SW1_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|SW1_Pin;
 8000a56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4821      	ldr	r0, [pc, #132]	; (8000af0 <MX_GPIO_Init+0x288>)
 8000a6c:	f000 ff24 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin BAR7_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a70:	f24f 0390 	movw	r3, #61584	; 0xf090
 8000a74:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin|BAR7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4819      	ldr	r0, [pc, #100]	; (8000af0 <MX_GPIO_Init+0x288>)
 8000a8a:	f000 ff15 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a8e:	2320      	movs	r3, #32
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4813      	ldr	r0, [pc, #76]	; (8000af0 <MX_GPIO_Init+0x288>)
 8000aa2:	f000 ff09 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BAR5_Pin BAR6_Pin */
  GPIO_InitStruct.Pin = BAR5_Pin|BAR6_Pin;
 8000aa6:	2330      	movs	r3, #48	; 0x30
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <MX_GPIO_Init+0x28c>)
 8000abe:	f000 fefb 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ac6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <MX_GPIO_Init+0x280>)
 8000ad8:	f000 feee 	bl	80018b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000adc:	bf00      	nop
 8000ade:	3730      	adds	r7, #48	; 0x30
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40020800 	.word	0x40020800
 8000af0:	40020c00 	.word	0x40020c00
 8000af4:	40020400 	.word	0x40020400
 8000af8:	40020000 	.word	0x40020000

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>
	...

08000b08 <Button1_OK>:
 */
#include "keypad.h"
#include "main.h"
#include "stdio.h"

unsigned char Button1_OK(void){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
	static unsigned char debounce=0xFF;
	unsigned char detectedFLag=0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(BTN_UP_GPIO_Port,BTN_UP_Pin)== GPIO_PIN_RESET){
 8000b12:	2110      	movs	r1, #16
 8000b14:	4812      	ldr	r0, [pc, #72]	; (8000b60 <Button1_OK+0x58>)
 8000b16:	f001 f86b 	bl	8001bf0 <HAL_GPIO_ReadPin>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d106      	bne.n	8000b2e <Button1_OK+0x26>
		debounce=(debounce<<1);
 8000b20:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <Button1_OK+0x5c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <Button1_OK+0x5c>)
 8000b2a:	701a      	strb	r2, [r3, #0]
 8000b2c:	e009      	b.n	8000b42 <Button1_OK+0x3a>
	} else {
		debounce= (debounce<<1)|1;
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <Button1_OK+0x5c>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	b25b      	sxtb	r3, r3
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	b25b      	sxtb	r3, r3
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <Button1_OK+0x5c>)
 8000b40:	701a      	strb	r2, [r3, #0]
	}
	if (debounce==0x03) {
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <Button1_OK+0x5c>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	d104      	bne.n	8000b54 <Button1_OK+0x4c>
		printf("1-OK \n\r");
 8000b4a:	4807      	ldr	r0, [pc, #28]	; (8000b68 <Button1_OK+0x60>)
 8000b4c:	f008 fdba 	bl	80096c4 <iprintf>
		//		print_UART2("1-OK",5);
		detectedFLag=1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	71fb      	strb	r3, [r7, #7]
	}
	return detectedFLag;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40020800 	.word	0x40020800
 8000b64:	20000000 	.word	0x20000000
 8000b68:	0800a404 	.word	0x0800a404

08000b6c <Button2_OK>:

unsigned char Button2_OK(void){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
	static unsigned char debounce=0xFF;
	unsigned char detectedFLag=0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_RESET){
 8000b76:	2102      	movs	r1, #2
 8000b78:	4812      	ldr	r0, [pc, #72]	; (8000bc4 <Button2_OK+0x58>)
 8000b7a:	f001 f839 	bl	8001bf0 <HAL_GPIO_ReadPin>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d106      	bne.n	8000b92 <Button2_OK+0x26>
		debounce=(debounce<<1);
 8000b84:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <Button2_OK+0x5c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <Button2_OK+0x5c>)
 8000b8e:	701a      	strb	r2, [r3, #0]
 8000b90:	e009      	b.n	8000ba6 <Button2_OK+0x3a>
	} else {
		debounce= (debounce<<1)|1;
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <Button2_OK+0x5c>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	b25b      	sxtb	r3, r3
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	b25b      	sxtb	r3, r3
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <Button2_OK+0x5c>)
 8000ba4:	701a      	strb	r2, [r3, #0]
	}
	if (debounce==0x03) {
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <Button2_OK+0x5c>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	d104      	bne.n	8000bb8 <Button2_OK+0x4c>
		printf("2-OK \n\r");
 8000bae:	4807      	ldr	r0, [pc, #28]	; (8000bcc <Button2_OK+0x60>)
 8000bb0:	f008 fd88 	bl	80096c4 <iprintf>
		//		print_UART2("2-OK",5);
		detectedFLag=1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	71fb      	strb	r3, [r7, #7]
	}
	return detectedFLag;
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40020400 	.word	0x40020400
 8000bc8:	20000001 	.word	0x20000001
 8000bcc:	0800a40c 	.word	0x0800a40c

08000bd0 <Button3_OK>:

unsigned char Button3_OK(void){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
	static unsigned char debounce=0xFF;
	unsigned char detectedFLag=0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port,BTN_RIGHT_Pin)== GPIO_PIN_RESET){
 8000bda:	2120      	movs	r1, #32
 8000bdc:	4812      	ldr	r0, [pc, #72]	; (8000c28 <Button3_OK+0x58>)
 8000bde:	f001 f807 	bl	8001bf0 <HAL_GPIO_ReadPin>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d106      	bne.n	8000bf6 <Button3_OK+0x26>
		debounce=(debounce<<1);
 8000be8:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <Button3_OK+0x5c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <Button3_OK+0x5c>)
 8000bf2:	701a      	strb	r2, [r3, #0]
 8000bf4:	e009      	b.n	8000c0a <Button3_OK+0x3a>
	} else {
		debounce= (debounce<<1)|1;
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <Button3_OK+0x5c>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	b25b      	sxtb	r3, r3
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	b25b      	sxtb	r3, r3
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <Button3_OK+0x5c>)
 8000c08:	701a      	strb	r2, [r3, #0]
	}
	if (debounce==0x03) {
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <Button3_OK+0x5c>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b03      	cmp	r3, #3
 8000c10:	d104      	bne.n	8000c1c <Button3_OK+0x4c>
		printf("3-OK \n\r");
 8000c12:	4807      	ldr	r0, [pc, #28]	; (8000c30 <Button3_OK+0x60>)
 8000c14:	f008 fd56 	bl	80096c4 <iprintf>
		//		print_UART2("3-OK",5);
		detectedFLag=1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	71fb      	strb	r3, [r7, #7]
	}
	return detectedFLag;
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40020800 	.word	0x40020800
 8000c2c:	20000002 	.word	0x20000002
 8000c30:	0800a414 	.word	0x0800a414

08000c34 <Button4_OK>:

unsigned char Button4_OK(void){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
	static unsigned char debounce=0xFF;
	unsigned char detectedFLag=0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(BTN_DN_GPIO_Port,BTN_DN_Pin)== GPIO_PIN_RESET){
 8000c3e:	2101      	movs	r1, #1
 8000c40:	4812      	ldr	r0, [pc, #72]	; (8000c8c <Button4_OK+0x58>)
 8000c42:	f000 ffd5 	bl	8001bf0 <HAL_GPIO_ReadPin>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d106      	bne.n	8000c5a <Button4_OK+0x26>
		debounce=(debounce<<1);
 8000c4c:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <Button4_OK+0x5c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <Button4_OK+0x5c>)
 8000c56:	701a      	strb	r2, [r3, #0]
 8000c58:	e009      	b.n	8000c6e <Button4_OK+0x3a>
	} else {
		debounce= (debounce<<1)|1;
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <Button4_OK+0x5c>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	b25b      	sxtb	r3, r3
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	b25b      	sxtb	r3, r3
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <Button4_OK+0x5c>)
 8000c6c:	701a      	strb	r2, [r3, #0]
	}
	if (debounce==0x03) {
 8000c6e:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <Button4_OK+0x5c>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d104      	bne.n	8000c80 <Button4_OK+0x4c>
		printf("4-OK \n\r");
 8000c76:	4807      	ldr	r0, [pc, #28]	; (8000c94 <Button4_OK+0x60>)
 8000c78:	f008 fd24 	bl	80096c4 <iprintf>
		//		print_UART2("4-OK",5);
		detectedFLag=1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	71fb      	strb	r3, [r7, #7]
	}
	return detectedFLag;
 8000c80:	79fb      	ldrb	r3, [r7, #7]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40020400 	.word	0x40020400
 8000c90:	20000003 	.word	0x20000003
 8000c94:	0800a41c 	.word	0x0800a41c

08000c98 <main>:
#include "hardwareinit.h"
#include "seos.h"
#include "checkboard.h"

int main(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0

  HAL_Init();
 8000c9c:	f000 fc64 	bl	8001568 <HAL_Init>
  SystemClock_Config();
 8000ca0:	f7ff fce4 	bl	800066c <SystemClock_Config>
  MX_GPIO_Init();
 8000ca4:	f7ff fde0 	bl	8000868 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ca8:	f7ff fd4a 	bl	8000740 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000cac:	f7ff fd76 	bl	800079c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000cb0:	f7ff fda4 	bl	80007fc <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000cb4:	f007 ff2e 	bl	8008b14 <MX_USB_DEVICE_Init>
  checkBoard();
 8000cb8:	f7ff fc58 	bl	800056c <checkBoard>
  SCH_INIT(2); //in ms
 8000cbc:	2002      	movs	r0, #2
 8000cbe:	f000 f865 	bl	8000d8c <SCH_INIT>
  SCH_START();
 8000cc2:	f000 f86f 	bl	8000da4 <SCH_START>
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <main+0x2e>

08000cc8 <HAL_TIM_PeriodElapsedCallback>:
#include "seos.h"
#include "task.h"

TIM_HandleTypeDef htim2;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	if((htim->Instance)==TIM2){
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cd8:	d101      	bne.n	8000cde <HAL_TIM_PeriodElapsedCallback+0x16>
		//		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //debuging LED
		Task_Run();
 8000cda:	f000 fab7 	bl	800124c <Task_Run>
	}
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM2_Init(uint32_t periode)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfe:	f107 0308 	add.w	r3, r7, #8
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000d08:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <MX_TIM2_Init+0xa0>)
 8000d0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d0e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 42000-1; // harusnya 16 bit (0-65536)
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <MX_TIM2_Init+0xa0>)
 8000d12:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000d16:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <MX_TIM2_Init+0xa0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = (periode*2)-1;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	3b01      	subs	r3, #1
 8000d24:	4a18      	ldr	r2, [pc, #96]	; (8000d88 <MX_TIM2_Init+0xa0>)
 8000d26:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d28:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <MX_TIM2_Init+0xa0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2e:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <MX_TIM2_Init+0xa0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d34:	4814      	ldr	r0, [pc, #80]	; (8000d88 <MX_TIM2_Init+0xa0>)
 8000d36:	f003 fe56 	bl	80049e6 <HAL_TIM_Base_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8000d40:	f7ff fedc 	bl	8000afc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d48:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d4a:	f107 0310 	add.w	r3, r7, #16
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480d      	ldr	r0, [pc, #52]	; (8000d88 <MX_TIM2_Init+0xa0>)
 8000d52:	f004 f80f 	bl	8004d74 <HAL_TIM_ConfigClockSource>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM2_Init+0x78>
	{
		Error_Handler();
 8000d5c:	f7ff fece 	bl	8000afc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d68:	f107 0308 	add.w	r3, r7, #8
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4806      	ldr	r0, [pc, #24]	; (8000d88 <MX_TIM2_Init+0xa0>)
 8000d70:	f004 fa2a 	bl	80051c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 8000d7a:	f7ff febf 	bl	8000afc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	3720      	adds	r7, #32
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2000026c 	.word	0x2000026c

08000d8c <SCH_INIT>:

void SCH_INIT(uint32_t periode){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	/* Scheduler in ms */
	MX_TIM2_Init(periode);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff ffa7 	bl	8000ce8 <MX_TIM2_Init>

	/* USER CODE END 2 */
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <SCH_START>:

void SCH_START(void){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000da8:	4803      	ldr	r0, [pc, #12]	; (8000db8 <SCH_START+0x14>)
 8000daa:	f003 fe6b 	bl	8004a84 <HAL_TIM_Base_Start_IT>
	Task_Init();
 8000dae:	f000 fa3b 	bl	8001228 <Task_Init>
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	2000026c 	.word	0x2000026c

08000dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <HAL_MspInit+0x4c>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	4a0f      	ldr	r2, [pc, #60]	; (8000e08 <HAL_MspInit+0x4c>)
 8000dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <HAL_MspInit+0x4c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_MspInit+0x4c>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <HAL_MspInit+0x4c>)
 8000de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dec:	6413      	str	r3, [r2, #64]	; 0x40
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_MspInit+0x4c>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dfa:	2007      	movs	r0, #7
 8000dfc:	f000 fd1a 	bl	8001834 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40023800 	.word	0x40023800

08000e0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a19      	ldr	r2, [pc, #100]	; (8000e90 <HAL_I2C_MspInit+0x84>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d12c      	bne.n	8000e88 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <HAL_I2C_MspInit+0x88>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <HAL_I2C_MspInit+0x88>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_I2C_MspInit+0x88>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e4a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e50:	2312      	movs	r3, #18
 8000e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e54:	2301      	movs	r3, #1
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	480c      	ldr	r0, [pc, #48]	; (8000e98 <HAL_I2C_MspInit+0x8c>)
 8000e68:	f000 fd26 	bl	80018b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_I2C_MspInit+0x88>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <HAL_I2C_MspInit+0x88>)
 8000e76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <HAL_I2C_MspInit+0x88>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e88:	bf00      	nop
 8000e8a:	3728      	adds	r7, #40	; 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40005400 	.word	0x40005400
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020400 	.word	0x40020400

08000e9c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08e      	sub	sp, #56	; 0x38
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a31      	ldr	r2, [pc, #196]	; (8000f8c <HAL_I2S_MspInit+0xf0>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d15a      	bne.n	8000f82 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ed0:	23c0      	movs	r3, #192	; 0xc0
 8000ed2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4618      	mov	r0, r3
 8000ede:	f003 fbb9 	bl	8004654 <HAL_RCCEx_PeriphCLKConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ee8:	f7ff fe08 	bl	8000afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <HAL_I2S_MspInit+0xf4>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	4a26      	ldr	r2, [pc, #152]	; (8000f90 <HAL_I2S_MspInit+0xf4>)
 8000ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000efa:	6413      	str	r3, [r2, #64]	; 0x40
 8000efc:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <HAL_I2S_MspInit+0xf4>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <HAL_I2S_MspInit+0xf4>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f10:	4a1f      	ldr	r2, [pc, #124]	; (8000f90 <HAL_I2S_MspInit+0xf4>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	6313      	str	r3, [r2, #48]	; 0x30
 8000f18:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <HAL_I2S_MspInit+0xf4>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HAL_I2S_MspInit+0xf4>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2c:	4a18      	ldr	r2, [pc, #96]	; (8000f90 <HAL_I2S_MspInit+0xf4>)
 8000f2e:	f043 0304 	orr.w	r3, r3, #4
 8000f32:	6313      	str	r3, [r2, #48]	; 0x30
 8000f34:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <HAL_I2S_MspInit+0xf4>)
 8000f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f38:	f003 0304 	and.w	r3, r3, #4
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f40:	2310      	movs	r3, #16
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f50:	2306      	movs	r3, #6
 8000f52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f58:	4619      	mov	r1, r3
 8000f5a:	480e      	ldr	r0, [pc, #56]	; (8000f94 <HAL_I2S_MspInit+0xf8>)
 8000f5c:	f000 fcac 	bl	80018b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f60:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f72:	2306      	movs	r3, #6
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4806      	ldr	r0, [pc, #24]	; (8000f98 <HAL_I2S_MspInit+0xfc>)
 8000f7e:	f000 fc9b 	bl	80018b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f82:	bf00      	nop
 8000f84:	3738      	adds	r7, #56	; 0x38
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40003c00 	.word	0x40003c00
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40020800 	.word	0x40020800

08000f9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a19      	ldr	r2, [pc, #100]	; (8001020 <HAL_SPI_MspInit+0x84>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d12b      	bne.n	8001016 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <HAL_SPI_MspInit+0x88>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	4a17      	ldr	r2, [pc, #92]	; (8001024 <HAL_SPI_MspInit+0x88>)
 8000fc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_SPI_MspInit+0x88>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <HAL_SPI_MspInit+0x88>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a10      	ldr	r2, [pc, #64]	; (8001024 <HAL_SPI_MspInit+0x88>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_SPI_MspInit+0x88>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ff6:	23e0      	movs	r3, #224	; 0xe0
 8000ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001006:	2305      	movs	r3, #5
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	4805      	ldr	r0, [pc, #20]	; (8001028 <HAL_SPI_MspInit+0x8c>)
 8001012:	f000 fc51 	bl	80018b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001016:	bf00      	nop
 8001018:	3728      	adds	r7, #40	; 0x28
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40013000 	.word	0x40013000
 8001024:	40023800 	.word	0x40023800
 8001028:	40020000 	.word	0x40020000

0800102c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800103c:	d115      	bne.n	800106a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_TIM_Base_MspInit+0x48>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <HAL_TIM_Base_MspInit+0x48>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_TIM_Base_MspInit+0x48>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2100      	movs	r1, #0
 800105e:	201c      	movs	r0, #28
 8001060:	f000 fbf3 	bl	800184a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001064:	201c      	movs	r0, #28
 8001066:	f000 fc0c 	bl	8001882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800

08001078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800107c:	e7fe      	b.n	800107c <NMI_Handler+0x4>

0800107e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <HardFault_Handler+0x4>

08001084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <MemManage_Handler+0x4>

0800108a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <BusFault_Handler+0x4>

08001090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <UsageFault_Handler+0x4>

08001096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c4:	f000 faa2 	bl	800160c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}

080010cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <TIM2_IRQHandler+0x10>)
 80010d2:	f003 fd47 	bl	8004b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2000026c 	.word	0x2000026c

080010e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <OTG_FS_IRQHandler+0x10>)
 80010e6:	f001 fd03 	bl	8002af0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200017ac 	.word	0x200017ac

080010f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	e00a      	b.n	800111c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001106:	f3af 8000 	nop.w
 800110a:	4601      	mov	r1, r0
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	60ba      	str	r2, [r7, #8]
 8001112:	b2ca      	uxtb	r2, r1
 8001114:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3301      	adds	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	429a      	cmp	r2, r3
 8001122:	dbf0      	blt.n	8001106 <_read+0x12>
  }

  return len;
 8001124:	687b      	ldr	r3, [r7, #4]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <_close>:
  }
  return len;
}

int _close(int file)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001156:	605a      	str	r2, [r3, #4]
  return 0;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <_isatty>:

int _isatty(int file)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800116e:	2301      	movs	r3, #1
}
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a0:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <_sbrk+0x5c>)
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <_sbrk+0x60>)
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <_sbrk+0x64>)
 80011b6:	4a12      	ldr	r2, [pc, #72]	; (8001200 <_sbrk+0x68>)
 80011b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d207      	bcs.n	80011d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c8:	f008 fb20 	bl	800980c <__errno>
 80011cc:	4603      	mov	r3, r0
 80011ce:	220c      	movs	r2, #12
 80011d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011d6:	e009      	b.n	80011ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <_sbrk+0x64>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <_sbrk+0x64>)
 80011e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ea:	68fb      	ldr	r3, [r7, #12]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20020000 	.word	0x20020000
 80011f8:	00000400 	.word	0x00000400
 80011fc:	200002b4 	.word	0x200002b4
 8001200:	20002028 	.word	0x20002028

08001204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <SystemInit+0x20>)
 800120a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800120e:	4a05      	ldr	r2, [pc, #20]	; (8001224 <SystemInit+0x20>)
 8001210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <Task_Init>:
volatile uint8_t count=0;
volatile uint8_t fail_count=0;

volatile uint16_t timeout;

void Task_Init(void){
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
	timeout=0;
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <Task_Init+0x1c>)
 800122e:	2200      	movs	r2, #0
 8001230:	801a      	strh	r2, [r3, #0]
	Kondisi=start;
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <Task_Init+0x20>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	200002c4 	.word	0x200002c4
 8001248:	200002b8 	.word	0x200002b8

0800124c <Task_Run>:

void Task_Run(void){
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0

	switch(Kondisi)
 8001252:	4ba0      	ldr	r3, [pc, #640]	; (80014d4 <Task_Run+0x288>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b06      	cmp	r3, #6
 8001258:	f200 8137 	bhi.w	80014ca <Task_Run+0x27e>
 800125c:	a201      	add	r2, pc, #4	; (adr r2, 8001264 <Task_Run+0x18>)
 800125e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001262:	bf00      	nop
 8001264:	08001281 	.word	0x08001281
 8001268:	0800128f 	.word	0x0800128f
 800126c:	080012df 	.word	0x080012df
 8001270:	080013e9 	.word	0x080013e9
 8001274:	08001455 	.word	0x08001455
 8001278:	0800146d 	.word	0x0800146d
 800127c:	080014a7 	.word	0x080014a7
	{
	case start:
	{
		printf("****     Alarm System   PENS 2023 ***** \n\r");
 8001280:	4895      	ldr	r0, [pc, #596]	; (80014d8 <Task_Run+0x28c>)
 8001282:	f008 fa1f 	bl	80096c4 <iprintf>
		Kondisi=startDelay;
 8001286:	4b93      	ldr	r3, [pc, #588]	; (80014d4 <Task_Run+0x288>)
 8001288:	2201      	movs	r2, #1
 800128a:	701a      	strb	r2, [r3, #0]
		break;
 800128c:	e11d      	b.n	80014ca <Task_Run+0x27e>
	}
	case startDelay:
	{
		count=0;
 800128e:	4b93      	ldr	r3, [pc, #588]	; (80014dc <Task_Run+0x290>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
		fail_count=0;
 8001294:	4b92      	ldr	r3, [pc, #584]	; (80014e0 <Task_Run+0x294>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);
 800129a:	2201      	movs	r2, #1
 800129c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a0:	4890      	ldr	r0, [pc, #576]	; (80014e4 <Task_Run+0x298>)
 80012a2:	f000 fcbd 	bl	8001c20 <HAL_GPIO_WritePin>
		if (++timeout > 1000) // dari scheduler sebesar 2ms*1000= 2 detik
 80012a6:	4b90      	ldr	r3, [pc, #576]	; (80014e8 <Task_Run+0x29c>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	3301      	adds	r3, #1
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	4a8d      	ldr	r2, [pc, #564]	; (80014e8 <Task_Run+0x29c>)
 80012b2:	4619      	mov	r1, r3
 80012b4:	8011      	strh	r1, [r2, #0]
 80012b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012ba:	f240 8101 	bls.w	80014c0 <Task_Run+0x274>
		{
			printf("Enter Password  \n\r"); //current state
 80012be:	488b      	ldr	r0, [pc, #556]	; (80014ec <Task_Run+0x2a0>)
 80012c0:	f008 fa00 	bl	80096c4 <iprintf>
			HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ca:	4886      	ldr	r0, [pc, #536]	; (80014e4 <Task_Run+0x298>)
 80012cc:	f000 fca8 	bl	8001c20 <HAL_GPIO_WritePin>
			timeout=0;
 80012d0:	4b85      	ldr	r3, [pc, #532]	; (80014e8 <Task_Run+0x29c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	801a      	strh	r2, [r3, #0]
			Kondisi=enterpass;
 80012d6:	4b7f      	ldr	r3, [pc, #508]	; (80014d4 <Task_Run+0x288>)
 80012d8:	2202      	movs	r2, #2
 80012da:	701a      	strb	r2, [r3, #0]
		}
		break;
 80012dc:	e0f0      	b.n	80014c0 <Task_Run+0x274>
	}
	case enterpass:
	{
		if(Button1_OK())
 80012de:	f7ff fc13 	bl	8000b08 <Button1_OK>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d008      	beq.n	80012fa <Task_Run+0xae>
		{
			label=1;
 80012e8:	4b81      	ldr	r3, [pc, #516]	; (80014f0 <Task_Run+0x2a4>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
			pressed=YES;
 80012ee:	4b81      	ldr	r3, [pc, #516]	; (80014f4 <Task_Run+0x2a8>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	701a      	strb	r2, [r3, #0]
			timeout=0;
 80012f4:	4b7c      	ldr	r3, [pc, #496]	; (80014e8 <Task_Run+0x29c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	801a      	strh	r2, [r3, #0]
		}

		if (Button2_OK())
 80012fa:	f7ff fc37 	bl	8000b6c <Button2_OK>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d008      	beq.n	8001316 <Task_Run+0xca>
		{
			label=2;
 8001304:	4b7a      	ldr	r3, [pc, #488]	; (80014f0 <Task_Run+0x2a4>)
 8001306:	2202      	movs	r2, #2
 8001308:	701a      	strb	r2, [r3, #0]
			pressed=YES;
 800130a:	4b7a      	ldr	r3, [pc, #488]	; (80014f4 <Task_Run+0x2a8>)
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]
			timeout=0;
 8001310:	4b75      	ldr	r3, [pc, #468]	; (80014e8 <Task_Run+0x29c>)
 8001312:	2200      	movs	r2, #0
 8001314:	801a      	strh	r2, [r3, #0]
		}

		if (Button3_OK())
 8001316:	f7ff fc5b 	bl	8000bd0 <Button3_OK>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d008      	beq.n	8001332 <Task_Run+0xe6>
		{
			label=3;
 8001320:	4b73      	ldr	r3, [pc, #460]	; (80014f0 <Task_Run+0x2a4>)
 8001322:	2203      	movs	r2, #3
 8001324:	701a      	strb	r2, [r3, #0]
			pressed=YES;
 8001326:	4b73      	ldr	r3, [pc, #460]	; (80014f4 <Task_Run+0x2a8>)
 8001328:	2201      	movs	r2, #1
 800132a:	701a      	strb	r2, [r3, #0]
			timeout=0;
 800132c:	4b6e      	ldr	r3, [pc, #440]	; (80014e8 <Task_Run+0x29c>)
 800132e:	2200      	movs	r2, #0
 8001330:	801a      	strh	r2, [r3, #0]
		}

		if (Button4_OK())
 8001332:	f7ff fc7f 	bl	8000c34 <Button4_OK>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d008      	beq.n	800134e <Task_Run+0x102>
		{
			label=4;
 800133c:	4b6c      	ldr	r3, [pc, #432]	; (80014f0 <Task_Run+0x2a4>)
 800133e:	2204      	movs	r2, #4
 8001340:	701a      	strb	r2, [r3, #0]
			pressed=YES;
 8001342:	4b6c      	ldr	r3, [pc, #432]	; (80014f4 <Task_Run+0x2a8>)
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
			timeout=0;
 8001348:	4b67      	ldr	r3, [pc, #412]	; (80014e8 <Task_Run+0x29c>)
 800134a:	2200      	movs	r2, #0
 800134c:	801a      	strh	r2, [r3, #0]
		}

		if (pressed==YES)
 800134e:	4b69      	ldr	r3, [pc, #420]	; (80014f4 <Task_Run+0x2a8>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b01      	cmp	r3, #1
 8001356:	d124      	bne.n	80013a2 <Task_Run+0x156>
		{
			//geser karakter
//			kombinasi[0]=kombinasi[1]; kombinasi[1]=kombinasi[2]; kombinasi[2]=kombinasi[3];
//			kombinasi[3]=label;
			// atau pakai cara ini
			for (int i = 0; i < 3; i++) {
 8001358:	2300      	movs	r3, #0
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	e00c      	b.n	8001378 <Task_Run+0x12c>
			    kombinasi[i] = kombinasi[i + 1];
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3301      	adds	r3, #1
 8001362:	4a65      	ldr	r2, [pc, #404]	; (80014f8 <Task_Run+0x2ac>)
 8001364:	5cd3      	ldrb	r3, [r2, r3]
 8001366:	b2d9      	uxtb	r1, r3
 8001368:	4a63      	ldr	r2, [pc, #396]	; (80014f8 <Task_Run+0x2ac>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	460a      	mov	r2, r1
 8001370:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 3; i++) {
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3301      	adds	r3, #1
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b02      	cmp	r3, #2
 800137c:	ddef      	ble.n	800135e <Task_Run+0x112>
			}
			kombinasi[3] = label;
 800137e:	4b5c      	ldr	r3, [pc, #368]	; (80014f0 <Task_Run+0x2a4>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b2da      	uxtb	r2, r3
 8001384:	4b5c      	ldr	r3, [pc, #368]	; (80014f8 <Task_Run+0x2ac>)
 8001386:	70da      	strb	r2, [r3, #3]

			pressed=NO;
 8001388:	4b5a      	ldr	r3, [pc, #360]	; (80014f4 <Task_Run+0x2a8>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
			label=0;
 800138e:	4b58      	ldr	r3, [pc, #352]	; (80014f0 <Task_Run+0x2a4>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
			count++;
 8001394:	4b51      	ldr	r3, [pc, #324]	; (80014dc <Task_Run+0x290>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	3301      	adds	r3, #1
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4b4f      	ldr	r3, [pc, #316]	; (80014dc <Task_Run+0x290>)
 80013a0:	701a      	strb	r2, [r3, #0]
			//			printf("*"); //current state
		}

		//sudah 4 karakter
		if (count>3) Kondisi=check;
 80013a2:	4b4e      	ldr	r3, [pc, #312]	; (80014dc <Task_Run+0x290>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	d902      	bls.n	80013b2 <Task_Run+0x166>
 80013ac:	4b49      	ldr	r3, [pc, #292]	; (80014d4 <Task_Run+0x288>)
 80013ae:	2203      	movs	r2, #3
 80013b0:	701a      	strb	r2, [r3, #0]

		//jeda memasukkan password lebih dari 3 detik
		if ((++timeout>1500) && (count >0))
 80013b2:	4b4d      	ldr	r3, [pc, #308]	; (80014e8 <Task_Run+0x29c>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	3301      	adds	r3, #1
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	4a4a      	ldr	r2, [pc, #296]	; (80014e8 <Task_Run+0x29c>)
 80013be:	4619      	mov	r1, r3
 80013c0:	8011      	strh	r1, [r2, #0]
 80013c2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d97c      	bls.n	80014c4 <Task_Run+0x278>
 80013ca:	4b44      	ldr	r3, [pc, #272]	; (80014dc <Task_Run+0x290>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d077      	beq.n	80014c4 <Task_Run+0x278>
		{
			printf("Time Out!.......Access Denied! \n\r");
 80013d4:	4849      	ldr	r0, [pc, #292]	; (80014fc <Task_Run+0x2b0>)
 80013d6:	f008 f975 	bl	80096c4 <iprintf>
			Kondisi=alarm;
 80013da:	4b3e      	ldr	r3, [pc, #248]	; (80014d4 <Task_Run+0x288>)
 80013dc:	2206      	movs	r2, #6
 80013de:	701a      	strb	r2, [r3, #0]
			timeout=0;
 80013e0:	4b41      	ldr	r3, [pc, #260]	; (80014e8 <Task_Run+0x29c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	801a      	strh	r2, [r3, #0]
		}

		break;
 80013e6:	e06d      	b.n	80014c4 <Task_Run+0x278>
	}
	case check:
	{
		if      ((kombinasi[0]==2)&&
 80013e8:	4b43      	ldr	r3, [pc, #268]	; (80014f8 <Task_Run+0x2ac>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d112      	bne.n	8001418 <Task_Run+0x1cc>
				(kombinasi[1]==2)&&
 80013f2:	4b41      	ldr	r3, [pc, #260]	; (80014f8 <Task_Run+0x2ac>)
 80013f4:	785b      	ldrb	r3, [r3, #1]
 80013f6:	b2db      	uxtb	r3, r3
		if      ((kombinasi[0]==2)&&
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d10d      	bne.n	8001418 <Task_Run+0x1cc>
				(kombinasi[2]==2)&&
 80013fc:	4b3e      	ldr	r3, [pc, #248]	; (80014f8 <Task_Run+0x2ac>)
 80013fe:	789b      	ldrb	r3, [r3, #2]
 8001400:	b2db      	uxtb	r3, r3
				(kombinasi[1]==2)&&
 8001402:	2b02      	cmp	r3, #2
 8001404:	d108      	bne.n	8001418 <Task_Run+0x1cc>
				(kombinasi[3]==2))
 8001406:	4b3c      	ldr	r3, [pc, #240]	; (80014f8 <Task_Run+0x2ac>)
 8001408:	78db      	ldrb	r3, [r3, #3]
 800140a:	b2db      	uxtb	r3, r3
				(kombinasi[2]==2)&&
 800140c:	2b02      	cmp	r3, #2
 800140e:	d103      	bne.n	8001418 <Task_Run+0x1cc>
		{
			Kondisi=open;
 8001410:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <Task_Run+0x288>)
 8001412:	2204      	movs	r2, #4
 8001414:	701a      	strb	r2, [r3, #0]
				count=0;
				Kondisi=enterpass;
			}
		}

		break;
 8001416:	e058      	b.n	80014ca <Task_Run+0x27e>
			if (++fail_count >= 3)
 8001418:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <Task_Run+0x294>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	3301      	adds	r3, #1
 8001420:	b2db      	uxtb	r3, r3
 8001422:	4a2f      	ldr	r2, [pc, #188]	; (80014e0 <Task_Run+0x294>)
 8001424:	4619      	mov	r1, r3
 8001426:	7011      	strb	r1, [r2, #0]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d906      	bls.n	800143a <Task_Run+0x1ee>
				Kondisi=alarm;
 800142c:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <Task_Run+0x288>)
 800142e:	2206      	movs	r2, #6
 8001430:	701a      	strb	r2, [r3, #0]
				printf("Fail 3x..... Access Denied! \n\r");
 8001432:	4833      	ldr	r0, [pc, #204]	; (8001500 <Task_Run+0x2b4>)
 8001434:	f008 f946 	bl	80096c4 <iprintf>
		break;
 8001438:	e047      	b.n	80014ca <Task_Run+0x27e>
				printf("Coba lagi \n\r");
 800143a:	4832      	ldr	r0, [pc, #200]	; (8001504 <Task_Run+0x2b8>)
 800143c:	f008 f942 	bl	80096c4 <iprintf>
				timeout=0;
 8001440:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <Task_Run+0x29c>)
 8001442:	2200      	movs	r2, #0
 8001444:	801a      	strh	r2, [r3, #0]
				count=0;
 8001446:	4b25      	ldr	r3, [pc, #148]	; (80014dc <Task_Run+0x290>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
				Kondisi=enterpass;
 800144c:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <Task_Run+0x288>)
 800144e:	2202      	movs	r2, #2
 8001450:	701a      	strb	r2, [r3, #0]
		break;
 8001452:	e03a      	b.n	80014ca <Task_Run+0x27e>
	}

	case open:
	{
		printf("Access Granted \n\r");
 8001454:	482c      	ldr	r0, [pc, #176]	; (8001508 <Task_Run+0x2bc>)
 8001456:	f008 f935 	bl	80096c4 <iprintf>
		doorOpen;
 800145a:	2201      	movs	r2, #1
 800145c:	2110      	movs	r1, #16
 800145e:	482b      	ldr	r0, [pc, #172]	; (800150c <Task_Run+0x2c0>)
 8001460:	f000 fbde 	bl	8001c20 <HAL_GPIO_WritePin>
		Kondisi=openDelay;
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <Task_Run+0x288>)
 8001466:	2205      	movs	r2, #5
 8001468:	701a      	strb	r2, [r3, #0]
		break;
 800146a:	e02e      	b.n	80014ca <Task_Run+0x27e>
	}
	case openDelay:
	{
		if (++timeout > 1000) // dari scheduler sebesar 2ms*1000= 2 detik
 800146c:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <Task_Run+0x29c>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	b29b      	uxth	r3, r3
 8001472:	3301      	adds	r3, #1
 8001474:	b29b      	uxth	r3, r3
 8001476:	4a1c      	ldr	r2, [pc, #112]	; (80014e8 <Task_Run+0x29c>)
 8001478:	4619      	mov	r1, r3
 800147a:	8011      	strh	r1, [r2, #0]
 800147c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001480:	d922      	bls.n	80014c8 <Task_Run+0x27c>
		{
			doorClose;
 8001482:	2200      	movs	r2, #0
 8001484:	2110      	movs	r1, #16
 8001486:	4821      	ldr	r0, [pc, #132]	; (800150c <Task_Run+0x2c0>)
 8001488:	f000 fbca 	bl	8001c20 <HAL_GPIO_WritePin>
			buzzerOFF;
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001492:	481f      	ldr	r0, [pc, #124]	; (8001510 <Task_Run+0x2c4>)
 8001494:	f000 fbc4 	bl	8001c20 <HAL_GPIO_WritePin>
			Kondisi=start;
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <Task_Run+0x288>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
			timeout=0;
 800149e:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <Task_Run+0x29c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	801a      	strh	r2, [r3, #0]
		}
		break;
 80014a4:	e010      	b.n	80014c8 <Task_Run+0x27c>
	}

	case alarm:
	{
		buzzerON;
 80014a6:	2201      	movs	r2, #1
 80014a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ac:	4818      	ldr	r0, [pc, #96]	; (8001510 <Task_Run+0x2c4>)
 80014ae:	f000 fbb7 	bl	8001c20 <HAL_GPIO_WritePin>
		count=0;
 80014b2:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <Task_Run+0x290>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
		pressed=NO;
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <Task_Run+0x2a8>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
		break;
 80014be:	e004      	b.n	80014ca <Task_Run+0x27e>
		break;
 80014c0:	bf00      	nop
 80014c2:	e002      	b.n	80014ca <Task_Run+0x27e>
		break;
 80014c4:	bf00      	nop
 80014c6:	e000      	b.n	80014ca <Task_Run+0x27e>
		break;
 80014c8:	bf00      	nop
	}


	}

}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200002b8 	.word	0x200002b8
 80014d8:	0800a424 	.word	0x0800a424
 80014dc:	200002c1 	.word	0x200002c1
 80014e0:	200002c2 	.word	0x200002c2
 80014e4:	40020c00 	.word	0x40020c00
 80014e8:	200002c4 	.word	0x200002c4
 80014ec:	0800a450 	.word	0x0800a450
 80014f0:	200002b9 	.word	0x200002b9
 80014f4:	200002c0 	.word	0x200002c0
 80014f8:	200002bc 	.word	0x200002bc
 80014fc:	0800a464 	.word	0x0800a464
 8001500:	0800a488 	.word	0x0800a488
 8001504:	0800a4a8 	.word	0x0800a4a8
 8001508:	0800a4b8 	.word	0x0800a4b8
 800150c:	40021000 	.word	0x40021000
 8001510:	40020800 	.word	0x40020800

08001514 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001514:	f8df d034 	ldr.w	sp, [pc, #52]	; 800154c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001518:	480d      	ldr	r0, [pc, #52]	; (8001550 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800151a:	490e      	ldr	r1, [pc, #56]	; (8001554 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800151c:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001520:	e002      	b.n	8001528 <LoopCopyDataInit>

08001522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001526:	3304      	adds	r3, #4

08001528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800152c:	d3f9      	bcc.n	8001522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152e:	4a0b      	ldr	r2, [pc, #44]	; (800155c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001530:	4c0b      	ldr	r4, [pc, #44]	; (8001560 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001534:	e001      	b.n	800153a <LoopFillZerobss>

08001536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001538:	3204      	adds	r2, #4

0800153a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800153c:	d3fb      	bcc.n	8001536 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800153e:	f7ff fe61 	bl	8001204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001542:	f008 f969 	bl	8009818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001546:	f7ff fba7 	bl	8000c98 <main>
  bx  lr    
 800154a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800154c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001554:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8001558:	0800a570 	.word	0x0800a570
  ldr r2, =_sbss
 800155c:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8001560:	20002024 	.word	0x20002024

08001564 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001564:	e7fe      	b.n	8001564 <ADC_IRQHandler>
	...

08001568 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800156c:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <HAL_Init+0x40>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0d      	ldr	r2, [pc, #52]	; (80015a8 <HAL_Init+0x40>)
 8001572:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001576:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_Init+0x40>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <HAL_Init+0x40>)
 800157e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001582:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <HAL_Init+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <HAL_Init+0x40>)
 800158a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800158e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001590:	2003      	movs	r0, #3
 8001592:	f000 f94f 	bl	8001834 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001596:	2000      	movs	r0, #0
 8001598:	f000 f808 	bl	80015ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800159c:	f7ff fc0e 	bl	8000dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40023c00 	.word	0x40023c00

080015ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <HAL_InitTick+0x54>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_InitTick+0x58>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f967 	bl	800189e <HAL_SYSTICK_Config>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00e      	b.n	80015f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b0f      	cmp	r3, #15
 80015de:	d80a      	bhi.n	80015f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e0:	2200      	movs	r2, #0
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015e8:	f000 f92f 	bl	800184a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ec:	4a06      	ldr	r2, [pc, #24]	; (8001608 <HAL_InitTick+0x5c>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e000      	b.n	80015f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000004 	.word	0x20000004
 8001604:	2000000c 	.word	0x2000000c
 8001608:	20000008 	.word	0x20000008

0800160c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_IncTick+0x20>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_IncTick+0x24>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4413      	add	r3, r2
 800161c:	4a04      	ldr	r2, [pc, #16]	; (8001630 <HAL_IncTick+0x24>)
 800161e:	6013      	str	r3, [r2, #0]
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	2000000c 	.word	0x2000000c
 8001630:	200002c8 	.word	0x200002c8

08001634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return uwTick;
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <HAL_GetTick+0x14>)
 800163a:	681b      	ldr	r3, [r3, #0]
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	200002c8 	.word	0x200002c8

0800164c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001654:	f7ff ffee 	bl	8001634 <HAL_GetTick>
 8001658:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001664:	d005      	beq.n	8001672 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_Delay+0x44>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4413      	add	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001672:	bf00      	nop
 8001674:	f7ff ffde 	bl	8001634 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	429a      	cmp	r2, r3
 8001682:	d8f7      	bhi.n	8001674 <HAL_Delay+0x28>
  {
  }
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000000c 	.word	0x2000000c

08001694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b0:	4013      	ands	r3, r2
 80016b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016c6:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	60d3      	str	r3, [r2, #12]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <__NVIC_GetPriorityGrouping+0x18>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	f003 0307 	and.w	r3, r3, #7
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	2b00      	cmp	r3, #0
 8001708:	db0b      	blt.n	8001722 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	f003 021f 	and.w	r2, r3, #31
 8001710:	4907      	ldr	r1, [pc, #28]	; (8001730 <__NVIC_EnableIRQ+0x38>)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	2001      	movs	r0, #1
 800171a:	fa00 f202 	lsl.w	r2, r0, r2
 800171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000e100 	.word	0xe000e100

08001734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	6039      	str	r1, [r7, #0]
 800173e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	2b00      	cmp	r3, #0
 8001746:	db0a      	blt.n	800175e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	b2da      	uxtb	r2, r3
 800174c:	490c      	ldr	r1, [pc, #48]	; (8001780 <__NVIC_SetPriority+0x4c>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	0112      	lsls	r2, r2, #4
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	440b      	add	r3, r1
 8001758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800175c:	e00a      	b.n	8001774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4908      	ldr	r1, [pc, #32]	; (8001784 <__NVIC_SetPriority+0x50>)
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	3b04      	subs	r3, #4
 800176c:	0112      	lsls	r2, r2, #4
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	440b      	add	r3, r1
 8001772:	761a      	strb	r2, [r3, #24]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000e100 	.word	0xe000e100
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	; 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f1c3 0307 	rsb	r3, r3, #7
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	bf28      	it	cs
 80017a6:	2304      	movcs	r3, #4
 80017a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3304      	adds	r3, #4
 80017ae:	2b06      	cmp	r3, #6
 80017b0:	d902      	bls.n	80017b8 <NVIC_EncodePriority+0x30>
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3b03      	subs	r3, #3
 80017b6:	e000      	b.n	80017ba <NVIC_EncodePriority+0x32>
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43da      	mvns	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	401a      	ands	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	43d9      	mvns	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	4313      	orrs	r3, r2
         );
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3724      	adds	r7, #36	; 0x24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001800:	d301      	bcc.n	8001806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001802:	2301      	movs	r3, #1
 8001804:	e00f      	b.n	8001826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <SysTick_Config+0x40>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800180e:	210f      	movs	r1, #15
 8001810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001814:	f7ff ff8e 	bl	8001734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <SysTick_Config+0x40>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181e:	4b04      	ldr	r3, [pc, #16]	; (8001830 <SysTick_Config+0x40>)
 8001820:	2207      	movs	r2, #7
 8001822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	e000e010 	.word	0xe000e010

08001834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ff29 	bl	8001694 <__NVIC_SetPriorityGrouping>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800184a:	b580      	push	{r7, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800185c:	f7ff ff3e 	bl	80016dc <__NVIC_GetPriorityGrouping>
 8001860:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	6978      	ldr	r0, [r7, #20]
 8001868:	f7ff ff8e 	bl	8001788 <NVIC_EncodePriority>
 800186c:	4602      	mov	r2, r0
 800186e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff5d 	bl	8001734 <__NVIC_SetPriority>
}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800188c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff31 	bl	80016f8 <__NVIC_EnableIRQ>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ffa2 	bl	80017f0 <SysTick_Config>
 80018ac:	4603      	mov	r3, r0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	; 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
 80018d2:	e16b      	b.n	8001bac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018d4:	2201      	movs	r2, #1
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	f040 815a 	bne.w	8001ba6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d005      	beq.n	800190a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001906:	2b02      	cmp	r3, #2
 8001908:	d130      	bne.n	800196c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	2203      	movs	r2, #3
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001940:	2201      	movs	r2, #1
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	f003 0201 	and.w	r2, r3, #1
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	2b03      	cmp	r3, #3
 8001976:	d017      	beq.n	80019a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	2203      	movs	r2, #3
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d123      	bne.n	80019fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	08da      	lsrs	r2, r3, #3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3208      	adds	r2, #8
 80019bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	220f      	movs	r2, #15
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	691a      	ldr	r2, [r3, #16]
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	08da      	lsrs	r2, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3208      	adds	r2, #8
 80019f6:	69b9      	ldr	r1, [r7, #24]
 80019f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	2203      	movs	r2, #3
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0203 	and.w	r2, r3, #3
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 80b4 	beq.w	8001ba6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b60      	ldr	r3, [pc, #384]	; (8001bc4 <HAL_GPIO_Init+0x30c>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	4a5f      	ldr	r2, [pc, #380]	; (8001bc4 <HAL_GPIO_Init+0x30c>)
 8001a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4e:	4b5d      	ldr	r3, [pc, #372]	; (8001bc4 <HAL_GPIO_Init+0x30c>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a5a:	4a5b      	ldr	r2, [pc, #364]	; (8001bc8 <HAL_GPIO_Init+0x310>)
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	089b      	lsrs	r3, r3, #2
 8001a60:	3302      	adds	r3, #2
 8001a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	220f      	movs	r2, #15
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a52      	ldr	r2, [pc, #328]	; (8001bcc <HAL_GPIO_Init+0x314>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d02b      	beq.n	8001ade <HAL_GPIO_Init+0x226>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a51      	ldr	r2, [pc, #324]	; (8001bd0 <HAL_GPIO_Init+0x318>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d025      	beq.n	8001ada <HAL_GPIO_Init+0x222>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a50      	ldr	r2, [pc, #320]	; (8001bd4 <HAL_GPIO_Init+0x31c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d01f      	beq.n	8001ad6 <HAL_GPIO_Init+0x21e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a4f      	ldr	r2, [pc, #316]	; (8001bd8 <HAL_GPIO_Init+0x320>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d019      	beq.n	8001ad2 <HAL_GPIO_Init+0x21a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a4e      	ldr	r2, [pc, #312]	; (8001bdc <HAL_GPIO_Init+0x324>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d013      	beq.n	8001ace <HAL_GPIO_Init+0x216>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4d      	ldr	r2, [pc, #308]	; (8001be0 <HAL_GPIO_Init+0x328>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d00d      	beq.n	8001aca <HAL_GPIO_Init+0x212>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4c      	ldr	r2, [pc, #304]	; (8001be4 <HAL_GPIO_Init+0x32c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d007      	beq.n	8001ac6 <HAL_GPIO_Init+0x20e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4b      	ldr	r2, [pc, #300]	; (8001be8 <HAL_GPIO_Init+0x330>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d101      	bne.n	8001ac2 <HAL_GPIO_Init+0x20a>
 8001abe:	2307      	movs	r3, #7
 8001ac0:	e00e      	b.n	8001ae0 <HAL_GPIO_Init+0x228>
 8001ac2:	2308      	movs	r3, #8
 8001ac4:	e00c      	b.n	8001ae0 <HAL_GPIO_Init+0x228>
 8001ac6:	2306      	movs	r3, #6
 8001ac8:	e00a      	b.n	8001ae0 <HAL_GPIO_Init+0x228>
 8001aca:	2305      	movs	r3, #5
 8001acc:	e008      	b.n	8001ae0 <HAL_GPIO_Init+0x228>
 8001ace:	2304      	movs	r3, #4
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x228>
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e004      	b.n	8001ae0 <HAL_GPIO_Init+0x228>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e002      	b.n	8001ae0 <HAL_GPIO_Init+0x228>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_GPIO_Init+0x228>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	69fa      	ldr	r2, [r7, #28]
 8001ae2:	f002 0203 	and.w	r2, r2, #3
 8001ae6:	0092      	lsls	r2, r2, #2
 8001ae8:	4093      	lsls	r3, r2
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af0:	4935      	ldr	r1, [pc, #212]	; (8001bc8 <HAL_GPIO_Init+0x310>)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	089b      	lsrs	r3, r3, #2
 8001af6:	3302      	adds	r3, #2
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001afe:	4b3b      	ldr	r3, [pc, #236]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b22:	4a32      	ldr	r2, [pc, #200]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b28:	4b30      	ldr	r3, [pc, #192]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b4c:	4a27      	ldr	r2, [pc, #156]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b52:	4b26      	ldr	r3, [pc, #152]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b76:	4a1d      	ldr	r2, [pc, #116]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ba0:	4a12      	ldr	r2, [pc, #72]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	61fb      	str	r3, [r7, #28]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	2b0f      	cmp	r3, #15
 8001bb0:	f67f ae90 	bls.w	80018d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	3724      	adds	r7, #36	; 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40013800 	.word	0x40013800
 8001bcc:	40020000 	.word	0x40020000
 8001bd0:	40020400 	.word	0x40020400
 8001bd4:	40020800 	.word	0x40020800
 8001bd8:	40020c00 	.word	0x40020c00
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40021400 	.word	0x40021400
 8001be4:	40021800 	.word	0x40021800
 8001be8:	40021c00 	.word	0x40021c00
 8001bec:	40013c00 	.word	0x40013c00

08001bf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
 8001c0c:	e001      	b.n	8001c12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c30:	787b      	ldrb	r3, [r7, #1]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c36:	887a      	ldrh	r2, [r7, #2]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c3c:	e003      	b.n	8001c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c3e:	887b      	ldrh	r3, [r7, #2]
 8001c40:	041a      	lsls	r2, r3, #16
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	619a      	str	r2, [r3, #24]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b085      	sub	sp, #20
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c64:	887a      	ldrh	r2, [r7, #2]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	041a      	lsls	r2, r3, #16
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	887b      	ldrh	r3, [r7, #2]
 8001c72:	400b      	ands	r3, r1
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	619a      	str	r2, [r3, #24]
}
 8001c7a:	bf00      	nop
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e12b      	b.n	8001ef2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d106      	bne.n	8001cb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff f8ac 	bl	8000e0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2224      	movs	r2, #36	; 0x24
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0201 	bic.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cec:	f002 fc9e 	bl	800462c <HAL_RCC_GetPCLK1Freq>
 8001cf0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4a81      	ldr	r2, [pc, #516]	; (8001efc <HAL_I2C_Init+0x274>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d807      	bhi.n	8001d0c <HAL_I2C_Init+0x84>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4a80      	ldr	r2, [pc, #512]	; (8001f00 <HAL_I2C_Init+0x278>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	bf94      	ite	ls
 8001d04:	2301      	movls	r3, #1
 8001d06:	2300      	movhi	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	e006      	b.n	8001d1a <HAL_I2C_Init+0x92>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4a7d      	ldr	r2, [pc, #500]	; (8001f04 <HAL_I2C_Init+0x27c>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	bf94      	ite	ls
 8001d14:	2301      	movls	r3, #1
 8001d16:	2300      	movhi	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e0e7      	b.n	8001ef2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4a78      	ldr	r2, [pc, #480]	; (8001f08 <HAL_I2C_Init+0x280>)
 8001d26:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2a:	0c9b      	lsrs	r3, r3, #18
 8001d2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	4a6a      	ldr	r2, [pc, #424]	; (8001efc <HAL_I2C_Init+0x274>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d802      	bhi.n	8001d5c <HAL_I2C_Init+0xd4>
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	e009      	b.n	8001d70 <HAL_I2C_Init+0xe8>
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d62:	fb02 f303 	mul.w	r3, r2, r3
 8001d66:	4a69      	ldr	r2, [pc, #420]	; (8001f0c <HAL_I2C_Init+0x284>)
 8001d68:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6c:	099b      	lsrs	r3, r3, #6
 8001d6e:	3301      	adds	r3, #1
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	430b      	orrs	r3, r1
 8001d76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	495c      	ldr	r1, [pc, #368]	; (8001efc <HAL_I2C_Init+0x274>)
 8001d8c:	428b      	cmp	r3, r1
 8001d8e:	d819      	bhi.n	8001dc4 <HAL_I2C_Init+0x13c>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	1e59      	subs	r1, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d9e:	1c59      	adds	r1, r3, #1
 8001da0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001da4:	400b      	ands	r3, r1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00a      	beq.n	8001dc0 <HAL_I2C_Init+0x138>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1e59      	subs	r1, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001db8:	3301      	adds	r3, #1
 8001dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dbe:	e051      	b.n	8001e64 <HAL_I2C_Init+0x1dc>
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	e04f      	b.n	8001e64 <HAL_I2C_Init+0x1dc>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d111      	bne.n	8001df0 <HAL_I2C_Init+0x168>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1e58      	subs	r0, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	440b      	add	r3, r1
 8001dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dde:	3301      	adds	r3, #1
 8001de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf0c      	ite	eq
 8001de8:	2301      	moveq	r3, #1
 8001dea:	2300      	movne	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	e012      	b.n	8001e16 <HAL_I2C_Init+0x18e>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	1e58      	subs	r0, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	0099      	lsls	r1, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e06:	3301      	adds	r3, #1
 8001e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	bf0c      	ite	eq
 8001e10:	2301      	moveq	r3, #1
 8001e12:	2300      	movne	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_I2C_Init+0x196>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e022      	b.n	8001e64 <HAL_I2C_Init+0x1dc>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10e      	bne.n	8001e44 <HAL_I2C_Init+0x1bc>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1e58      	subs	r0, r3, #1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6859      	ldr	r1, [r3, #4]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	440b      	add	r3, r1
 8001e34:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e38:	3301      	adds	r3, #1
 8001e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e42:	e00f      	b.n	8001e64 <HAL_I2C_Init+0x1dc>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1e58      	subs	r0, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6859      	ldr	r1, [r3, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	0099      	lsls	r1, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	6809      	ldr	r1, [r1, #0]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69da      	ldr	r2, [r3, #28]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6911      	ldr	r1, [r2, #16]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	68d2      	ldr	r2, [r2, #12]
 8001e9e:	4311      	orrs	r1, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695a      	ldr	r2, [r3, #20]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2220      	movs	r2, #32
 8001ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	000186a0 	.word	0x000186a0
 8001f00:	001e847f 	.word	0x001e847f
 8001f04:	003d08ff 	.word	0x003d08ff
 8001f08:	431bde83 	.word	0x431bde83
 8001f0c:	10624dd3 	.word	0x10624dd3

08001f10 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e128      	b.n	8002174 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d109      	bne.n	8001f42 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a90      	ldr	r2, [pc, #576]	; (800217c <HAL_I2S_Init+0x26c>)
 8001f3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7fe ffad 	bl	8000e9c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2202      	movs	r2, #2
 8001f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f58:	f023 030f 	bic.w	r3, r3, #15
 8001f5c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2202      	movs	r2, #2
 8001f64:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d060      	beq.n	8002030 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d102      	bne.n	8001f7c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001f76:	2310      	movs	r3, #16
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	e001      	b.n	8001f80 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	d802      	bhi.n	8001f8e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001f8e:	2001      	movs	r0, #1
 8001f90:	f002 fc42 	bl	8004818 <HAL_RCCEx_GetPeriphCLKFreq>
 8001f94:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f9e:	d125      	bne.n	8001fec <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d010      	beq.n	8001fca <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	461a      	mov	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc4:	3305      	adds	r3, #5
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	e01f      	b.n	800200a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	461a      	mov	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe6:	3305      	adds	r3, #5
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	e00e      	b.n	800200a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	fbb2 f3f3 	udiv	r3, r2, r3
 8002006:	3305      	adds	r3, #5
 8002008:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4a5c      	ldr	r2, [pc, #368]	; (8002180 <HAL_I2S_Init+0x270>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	08db      	lsrs	r3, r3, #3
 8002014:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	085b      	lsrs	r3, r3, #1
 8002026:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	021b      	lsls	r3, r3, #8
 800202c:	61bb      	str	r3, [r7, #24]
 800202e:	e003      	b.n	8002038 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002030:	2302      	movs	r3, #2
 8002032:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002034:	2300      	movs	r3, #0
 8002036:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d902      	bls.n	8002044 <HAL_I2S_Init+0x134>
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	2bff      	cmp	r3, #255	; 0xff
 8002042:	d907      	bls.n	8002054 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002048:	f043 0210 	orr.w	r2, r3, #16
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e08f      	b.n	8002174 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	ea42 0103 	orr.w	r1, r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	430a      	orrs	r2, r1
 8002066:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002072:	f023 030f 	bic.w	r3, r3, #15
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6851      	ldr	r1, [r2, #4]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6892      	ldr	r2, [r2, #8]
 800207e:	4311      	orrs	r1, r2
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	68d2      	ldr	r2, [r2, #12]
 8002084:	4311      	orrs	r1, r2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6992      	ldr	r2, [r2, #24]
 800208a:	430a      	orrs	r2, r1
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002096:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d161      	bne.n	8002164 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a38      	ldr	r2, [pc, #224]	; (8002184 <HAL_I2S_Init+0x274>)
 80020a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a37      	ldr	r2, [pc, #220]	; (8002188 <HAL_I2S_Init+0x278>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d101      	bne.n	80020b4 <HAL_I2S_Init+0x1a4>
 80020b0:	4b36      	ldr	r3, [pc, #216]	; (800218c <HAL_I2S_Init+0x27c>)
 80020b2:	e001      	b.n	80020b8 <HAL_I2S_Init+0x1a8>
 80020b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	4932      	ldr	r1, [pc, #200]	; (8002188 <HAL_I2S_Init+0x278>)
 80020c0:	428a      	cmp	r2, r1
 80020c2:	d101      	bne.n	80020c8 <HAL_I2S_Init+0x1b8>
 80020c4:	4a31      	ldr	r2, [pc, #196]	; (800218c <HAL_I2S_Init+0x27c>)
 80020c6:	e001      	b.n	80020cc <HAL_I2S_Init+0x1bc>
 80020c8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80020cc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80020d0:	f023 030f 	bic.w	r3, r3, #15
 80020d4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a2b      	ldr	r2, [pc, #172]	; (8002188 <HAL_I2S_Init+0x278>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_I2S_Init+0x1d4>
 80020e0:	4b2a      	ldr	r3, [pc, #168]	; (800218c <HAL_I2S_Init+0x27c>)
 80020e2:	e001      	b.n	80020e8 <HAL_I2S_Init+0x1d8>
 80020e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020e8:	2202      	movs	r2, #2
 80020ea:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a25      	ldr	r2, [pc, #148]	; (8002188 <HAL_I2S_Init+0x278>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d101      	bne.n	80020fa <HAL_I2S_Init+0x1ea>
 80020f6:	4b25      	ldr	r3, [pc, #148]	; (800218c <HAL_I2S_Init+0x27c>)
 80020f8:	e001      	b.n	80020fe <HAL_I2S_Init+0x1ee>
 80020fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800210a:	d003      	beq.n	8002114 <HAL_I2S_Init+0x204>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d103      	bne.n	800211c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002114:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	e001      	b.n	8002120 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800211c:	2300      	movs	r3, #0
 800211e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800212a:	4313      	orrs	r3, r2
 800212c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002134:	4313      	orrs	r3, r2
 8002136:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800213e:	4313      	orrs	r3, r2
 8002140:	b29a      	uxth	r2, r3
 8002142:	897b      	ldrh	r3, [r7, #10]
 8002144:	4313      	orrs	r3, r2
 8002146:	b29b      	uxth	r3, r3
 8002148:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800214c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a0d      	ldr	r2, [pc, #52]	; (8002188 <HAL_I2S_Init+0x278>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d101      	bne.n	800215c <HAL_I2S_Init+0x24c>
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <HAL_I2S_Init+0x27c>)
 800215a:	e001      	b.n	8002160 <HAL_I2S_Init+0x250>
 800215c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002160:	897a      	ldrh	r2, [r7, #10]
 8002162:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3720      	adds	r7, #32
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	08002287 	.word	0x08002287
 8002180:	cccccccd 	.word	0xcccccccd
 8002184:	0800239d 	.word	0x0800239d
 8002188:	40003800 	.word	0x40003800
 800218c:	40003400 	.word	0x40003400

08002190 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	881a      	ldrh	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	1c9a      	adds	r2, r3, #2
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10e      	bne.n	8002220 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002210:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ffb8 	bl	8002190 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	b292      	uxth	r2, r2
 800223c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	1c9a      	adds	r2, r3, #2
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800224c:	b29b      	uxth	r3, r3
 800224e:	3b01      	subs	r3, #1
 8002250:	b29a      	uxth	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800225a:	b29b      	uxth	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10e      	bne.n	800227e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800226e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff ff93 	bl	80021a4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d13a      	bne.n	8002318 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d109      	bne.n	80022c0 <I2S_IRQHandler+0x3a>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b6:	2b40      	cmp	r3, #64	; 0x40
 80022b8:	d102      	bne.n	80022c0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff ffb4 	bl	8002228 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c6:	2b40      	cmp	r3, #64	; 0x40
 80022c8:	d126      	bne.n	8002318 <I2S_IRQHandler+0x92>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0320 	and.w	r3, r3, #32
 80022d4:	2b20      	cmp	r3, #32
 80022d6:	d11f      	bne.n	8002318 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80022e8:	2300      	movs	r3, #0
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	f043 0202 	orr.w	r2, r3, #2
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff ff50 	bl	80021b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b03      	cmp	r3, #3
 8002322:	d136      	bne.n	8002392 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b02      	cmp	r3, #2
 800232c:	d109      	bne.n	8002342 <I2S_IRQHandler+0xbc>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002338:	2b80      	cmp	r3, #128	; 0x80
 800233a:	d102      	bne.n	8002342 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff45 	bl	80021cc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b08      	cmp	r3, #8
 800234a:	d122      	bne.n	8002392 <I2S_IRQHandler+0x10c>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	2b20      	cmp	r3, #32
 8002358:	d11b      	bne.n	8002392 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002368:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002384:	f043 0204 	orr.w	r2, r3, #4
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ff13 	bl	80021b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002392:	bf00      	nop
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a92      	ldr	r2, [pc, #584]	; (80025fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d101      	bne.n	80023ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80023b6:	4b92      	ldr	r3, [pc, #584]	; (8002600 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80023b8:	e001      	b.n	80023be <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80023ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a8b      	ldr	r2, [pc, #556]	; (80025fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d101      	bne.n	80023d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80023d4:	4b8a      	ldr	r3, [pc, #552]	; (8002600 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80023d6:	e001      	b.n	80023dc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80023d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023e8:	d004      	beq.n	80023f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f040 8099 	bne.w	8002526 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d107      	bne.n	800240e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f925 	bl	8002658 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b01      	cmp	r3, #1
 8002416:	d107      	bne.n	8002428 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f9c8 	bl	80027b8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242e:	2b40      	cmp	r3, #64	; 0x40
 8002430:	d13a      	bne.n	80024a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f003 0320 	and.w	r3, r3, #32
 8002438:	2b00      	cmp	r3, #0
 800243a:	d035      	beq.n	80024a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a6e      	ldr	r2, [pc, #440]	; (80025fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d101      	bne.n	800244a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002446:	4b6e      	ldr	r3, [pc, #440]	; (8002600 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002448:	e001      	b.n	800244e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800244a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4969      	ldr	r1, [pc, #420]	; (80025fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002456:	428b      	cmp	r3, r1
 8002458:	d101      	bne.n	800245e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800245a:	4b69      	ldr	r3, [pc, #420]	; (8002600 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800245c:	e001      	b.n	8002462 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800245e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002462:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002466:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002476:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002478:	2300      	movs	r3, #0
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	f043 0202 	orr.w	r2, r3, #2
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff fe88 	bl	80021b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	f040 80c3 	bne.w	800263a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 80bd 	beq.w	800263a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024ce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a49      	ldr	r2, [pc, #292]	; (80025fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d101      	bne.n	80024de <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80024da:	4b49      	ldr	r3, [pc, #292]	; (8002600 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80024dc:	e001      	b.n	80024e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80024de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4944      	ldr	r1, [pc, #272]	; (80025fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80024ea:	428b      	cmp	r3, r1
 80024ec:	d101      	bne.n	80024f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80024ee:	4b44      	ldr	r3, [pc, #272]	; (8002600 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80024f0:	e001      	b.n	80024f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80024f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024fa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80024fc:	2300      	movs	r3, #0
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	f043 0204 	orr.w	r2, r3, #4
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff fe4a 	bl	80021b8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002524:	e089      	b.n	800263a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b02      	cmp	r3, #2
 800252e:	d107      	bne.n	8002540 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f8be 	bl	80026bc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b01      	cmp	r3, #1
 8002548:	d107      	bne.n	800255a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f8fd 	bl	8002754 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002560:	2b40      	cmp	r3, #64	; 0x40
 8002562:	d12f      	bne.n	80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f003 0320 	and.w	r3, r3, #32
 800256a:	2b00      	cmp	r3, #0
 800256c:	d02a      	beq.n	80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800257c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a1e      	ldr	r2, [pc, #120]	; (80025fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d101      	bne.n	800258c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002588:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800258a:	e001      	b.n	8002590 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800258c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4919      	ldr	r1, [pc, #100]	; (80025fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002598:	428b      	cmp	r3, r1
 800259a:	d101      	bne.n	80025a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800259c:	4b18      	ldr	r3, [pc, #96]	; (8002600 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800259e:	e001      	b.n	80025a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80025a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025a8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f043 0202 	orr.w	r2, r3, #2
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff fdfa 	bl	80021b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d136      	bne.n	800263c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	f003 0320 	and.w	r3, r3, #32
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d031      	beq.n	800263c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a07      	ldr	r2, [pc, #28]	; (80025fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d101      	bne.n	80025e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80025e2:	4b07      	ldr	r3, [pc, #28]	; (8002600 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80025e4:	e001      	b.n	80025ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80025e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4902      	ldr	r1, [pc, #8]	; (80025fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80025f2:	428b      	cmp	r3, r1
 80025f4:	d106      	bne.n	8002604 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80025f6:	4b02      	ldr	r3, [pc, #8]	; (8002600 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80025f8:	e006      	b.n	8002608 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80025fa:	bf00      	nop
 80025fc:	40003800 	.word	0x40003800
 8002600:	40003400 	.word	0x40003400
 8002604:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002608:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800260c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800261c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	f043 0204 	orr.w	r2, r3, #4
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff fdc0 	bl	80021b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002638:	e000      	b.n	800263c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800263a:	bf00      	nop
}
 800263c:	bf00      	nop
 800263e:	3720      	adds	r7, #32
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	1c99      	adds	r1, r3, #2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6251      	str	r1, [r2, #36]	; 0x24
 800266a:	881a      	ldrh	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002676:	b29b      	uxth	r3, r3
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d113      	bne.n	80026b2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002698:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800269e:	b29b      	uxth	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d106      	bne.n	80026b2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff ffc9 	bl	8002644 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	1c99      	adds	r1, r3, #2
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6251      	str	r1, [r2, #36]	; 0x24
 80026ce:	8819      	ldrh	r1, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a1d      	ldr	r2, [pc, #116]	; (800274c <I2SEx_TxISR_I2SExt+0x90>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <I2SEx_TxISR_I2SExt+0x22>
 80026da:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <I2SEx_TxISR_I2SExt+0x94>)
 80026dc:	e001      	b.n	80026e2 <I2SEx_TxISR_I2SExt+0x26>
 80026de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026e2:	460a      	mov	r2, r1
 80026e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d121      	bne.n	8002742 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a12      	ldr	r2, [pc, #72]	; (800274c <I2SEx_TxISR_I2SExt+0x90>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d101      	bne.n	800270c <I2SEx_TxISR_I2SExt+0x50>
 8002708:	4b11      	ldr	r3, [pc, #68]	; (8002750 <I2SEx_TxISR_I2SExt+0x94>)
 800270a:	e001      	b.n	8002710 <I2SEx_TxISR_I2SExt+0x54>
 800270c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	490d      	ldr	r1, [pc, #52]	; (800274c <I2SEx_TxISR_I2SExt+0x90>)
 8002718:	428b      	cmp	r3, r1
 800271a:	d101      	bne.n	8002720 <I2SEx_TxISR_I2SExt+0x64>
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <I2SEx_TxISR_I2SExt+0x94>)
 800271e:	e001      	b.n	8002724 <I2SEx_TxISR_I2SExt+0x68>
 8002720:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002724:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002728:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800272e:	b29b      	uxth	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d106      	bne.n	8002742 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff ff81 	bl	8002644 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40003800 	.word	0x40003800
 8002750:	40003400 	.word	0x40003400

08002754 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68d8      	ldr	r0, [r3, #12]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002766:	1c99      	adds	r1, r3, #2
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800276c:	b282      	uxth	r2, r0
 800276e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002782:	b29b      	uxth	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d113      	bne.n	80027b0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002796:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279c:	b29b      	uxth	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff ff4a 	bl	8002644 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a20      	ldr	r2, [pc, #128]	; (8002848 <I2SEx_RxISR_I2SExt+0x90>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d101      	bne.n	80027ce <I2SEx_RxISR_I2SExt+0x16>
 80027ca:	4b20      	ldr	r3, [pc, #128]	; (800284c <I2SEx_RxISR_I2SExt+0x94>)
 80027cc:	e001      	b.n	80027d2 <I2SEx_RxISR_I2SExt+0x1a>
 80027ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027d2:	68d8      	ldr	r0, [r3, #12]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	1c99      	adds	r1, r3, #2
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80027de:	b282      	uxth	r2, r0
 80027e0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d121      	bne.n	800283e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <I2SEx_RxISR_I2SExt+0x90>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d101      	bne.n	8002808 <I2SEx_RxISR_I2SExt+0x50>
 8002804:	4b11      	ldr	r3, [pc, #68]	; (800284c <I2SEx_RxISR_I2SExt+0x94>)
 8002806:	e001      	b.n	800280c <I2SEx_RxISR_I2SExt+0x54>
 8002808:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	490d      	ldr	r1, [pc, #52]	; (8002848 <I2SEx_RxISR_I2SExt+0x90>)
 8002814:	428b      	cmp	r3, r1
 8002816:	d101      	bne.n	800281c <I2SEx_RxISR_I2SExt+0x64>
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <I2SEx_RxISR_I2SExt+0x94>)
 800281a:	e001      	b.n	8002820 <I2SEx_RxISR_I2SExt+0x68>
 800281c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002820:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002824:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d106      	bne.n	800283e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ff03 	bl	8002644 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40003800 	.word	0x40003800
 800284c:	40003400 	.word	0x40003400

08002850 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002852:	b08f      	sub	sp, #60	; 0x3c
 8002854:	af0a      	add	r7, sp, #40	; 0x28
 8002856:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e10f      	b.n	8002a82 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d106      	bne.n	8002882 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f006 fb4f 	bl	8008f20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2203      	movs	r2, #3
 8002886:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002892:	2b00      	cmp	r3, #0
 8002894:	d102      	bne.n	800289c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f002 fe36 	bl	8005512 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	687e      	ldr	r6, [r7, #4]
 80028ae:	466d      	mov	r5, sp
 80028b0:	f106 0410 	add.w	r4, r6, #16
 80028b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80028c4:	1d33      	adds	r3, r6, #4
 80028c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028c8:	6838      	ldr	r0, [r7, #0]
 80028ca:	f002 fd0d 	bl	80052e8 <USB_CoreInit>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0d0      	b.n	8002a82 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2100      	movs	r1, #0
 80028e6:	4618      	mov	r0, r3
 80028e8:	f002 fe24 	bl	8005534 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ec:	2300      	movs	r3, #0
 80028ee:	73fb      	strb	r3, [r7, #15]
 80028f0:	e04a      	b.n	8002988 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028f2:	7bfa      	ldrb	r2, [r7, #15]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	333d      	adds	r3, #61	; 0x3d
 8002902:	2201      	movs	r2, #1
 8002904:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002906:	7bfa      	ldrb	r2, [r7, #15]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	333c      	adds	r3, #60	; 0x3c
 8002916:	7bfa      	ldrb	r2, [r7, #15]
 8002918:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800291a:	7bfa      	ldrb	r2, [r7, #15]
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	b298      	uxth	r0, r3
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	3344      	adds	r3, #68	; 0x44
 800292e:	4602      	mov	r2, r0
 8002930:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	3340      	adds	r3, #64	; 0x40
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002946:	7bfa      	ldrb	r2, [r7, #15]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	3348      	adds	r3, #72	; 0x48
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800295a:	7bfa      	ldrb	r2, [r7, #15]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	334c      	adds	r3, #76	; 0x4c
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	3354      	adds	r3, #84	; 0x54
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	3301      	adds	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
 8002988:	7bfa      	ldrb	r2, [r7, #15]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	429a      	cmp	r2, r3
 8002990:	d3af      	bcc.n	80028f2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002992:	2300      	movs	r3, #0
 8002994:	73fb      	strb	r3, [r7, #15]
 8002996:	e044      	b.n	8002a22 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002998:	7bfa      	ldrb	r2, [r7, #15]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029ae:	7bfa      	ldrb	r2, [r7, #15]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4413      	add	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80029c0:	7bfa      	ldrb	r2, [r7, #15]
 80029c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029c4:	7bfa      	ldrb	r2, [r7, #15]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029d6:	2200      	movs	r2, #0
 80029d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029da:	7bfa      	ldrb	r2, [r7, #15]
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029f0:	7bfa      	ldrb	r2, [r7, #15]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a06:	7bfa      	ldrb	r2, [r7, #15]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
 8002a22:	7bfa      	ldrb	r2, [r7, #15]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d3b5      	bcc.n	8002998 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	603b      	str	r3, [r7, #0]
 8002a32:	687e      	ldr	r6, [r7, #4]
 8002a34:	466d      	mov	r5, sp
 8002a36:	f106 0410 	add.w	r4, r6, #16
 8002a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a46:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a4a:	1d33      	adds	r3, r6, #4
 8002a4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a4e:	6838      	ldr	r0, [r7, #0]
 8002a50:	f002 fdbc 	bl	80055cc <USB_DevInit>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e00d      	b.n	8002a82 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f003 ff0b 	bl	8006896 <USB_DevDisconnect>

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a8a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_PCD_Start+0x1c>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e020      	b.n	8002ae8 <HAL_PCD_Start+0x5e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d109      	bne.n	8002aca <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d005      	beq.n	8002aca <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f002 fd0e 	bl	80054f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f003 febb 	bl	8006854 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	b08d      	sub	sp, #52	; 0x34
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f003 ff79 	bl	80069fe <USB_GetMode>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f040 848a 	bne.w	8003428 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f003 fedd 	bl	80068d8 <USB_ReadInterrupts>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 8480 	beq.w	8003426 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	0a1b      	lsrs	r3, r3, #8
 8002b30:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f003 feca 	bl	80068d8 <USB_ReadInterrupts>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d107      	bne.n	8002b5e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f002 0202 	and.w	r2, r2, #2
 8002b5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f003 feb8 	bl	80068d8 <USB_ReadInterrupts>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b10      	cmp	r3, #16
 8002b70:	d161      	bne.n	8002c36 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699a      	ldr	r2, [r3, #24]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0210 	bic.w	r2, r2, #16
 8002b80:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	f003 020f 	and.w	r2, r3, #15
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	0c5b      	lsrs	r3, r3, #17
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d124      	bne.n	8002bf8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d035      	beq.n	8002c26 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	461a      	mov	r2, r3
 8002bcc:	6a38      	ldr	r0, [r7, #32]
 8002bce:	f003 fcef 	bl	80065b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bde:	441a      	add	r2, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	6a1a      	ldr	r2, [r3, #32]
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bf0:	441a      	add	r2, r3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	621a      	str	r2, [r3, #32]
 8002bf6:	e016      	b.n	8002c26 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	0c5b      	lsrs	r3, r3, #17
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	2b06      	cmp	r3, #6
 8002c02:	d110      	bne.n	8002c26 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c0a:	2208      	movs	r2, #8
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	6a38      	ldr	r0, [r7, #32]
 8002c10:	f003 fcce 	bl	80065b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	6a1a      	ldr	r2, [r3, #32]
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	091b      	lsrs	r3, r3, #4
 8002c1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c20:	441a      	add	r2, r3
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699a      	ldr	r2, [r3, #24]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0210 	orr.w	r2, r2, #16
 8002c34:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f003 fe4c 	bl	80068d8 <USB_ReadInterrupts>
 8002c40:	4603      	mov	r3, r0
 8002c42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c4a:	f040 80a7 	bne.w	8002d9c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f003 fe51 	bl	80068fe <USB_ReadDevAllOutEpInterrupt>
 8002c5c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002c5e:	e099      	b.n	8002d94 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 808e 	beq.w	8002d88 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	4611      	mov	r1, r2
 8002c76:	4618      	mov	r0, r3
 8002c78:	f003 fe75 	bl	8006966 <USB_ReadDevOutEPInterrupt>
 8002c7c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00c      	beq.n	8002ca2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c94:	461a      	mov	r2, r3
 8002c96:	2301      	movs	r3, #1
 8002c98:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 fec3 	bl	8003a28 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00c      	beq.n	8002cc6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2308      	movs	r3, #8
 8002cbc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002cbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 ff99 	bl	8003bf8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2310      	movs	r3, #16
 8002ce0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d030      	beq.n	8002d4e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf4:	2b80      	cmp	r3, #128	; 0x80
 8002cf6:	d109      	bne.n	8002d0c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	69fa      	ldr	r2, [r7, #28]
 8002d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d0a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0e:	4613      	mov	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3304      	adds	r3, #4
 8002d20:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	78db      	ldrb	r3, [r3, #3]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d108      	bne.n	8002d3c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	4619      	mov	r1, r3
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f006 fa06 	bl	8009148 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d64:	461a      	mov	r2, r3
 8002d66:	2320      	movs	r3, #32
 8002d68:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d009      	beq.n	8002d88 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d80:	461a      	mov	r2, r3
 8002d82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d86:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	085b      	lsrs	r3, r3, #1
 8002d92:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f47f af62 	bne.w	8002c60 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f003 fd99 	bl	80068d8 <USB_ReadInterrupts>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002db0:	f040 80db 	bne.w	8002f6a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f003 fdba 	bl	8006932 <USB_ReadDevAllInEpInterrupt>
 8002dbe:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002dc4:	e0cd      	b.n	8002f62 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80c2 	beq.w	8002f56 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f003 fde0 	bl	80069a2 <USB_ReadDevInEPInterrupt>
 8002de2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d057      	beq.n	8002e9e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	f003 030f 	and.w	r3, r3, #15
 8002df4:	2201      	movs	r2, #1
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69f9      	ldr	r1, [r7, #28]
 8002e0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e0e:	4013      	ands	r3, r2
 8002e10:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e1e:	461a      	mov	r2, r3
 8002e20:	2301      	movs	r3, #1
 8002e22:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d132      	bne.n	8002e92 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	334c      	adds	r3, #76	; 0x4c
 8002e3c:	6819      	ldr	r1, [r3, #0]
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4403      	add	r3, r0
 8002e4c:	3348      	adds	r3, #72	; 0x48
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4419      	add	r1, r3
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e56:	4613      	mov	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4403      	add	r3, r0
 8002e60:	334c      	adds	r3, #76	; 0x4c
 8002e62:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d113      	bne.n	8002e92 <HAL_PCD_IRQHandler+0x3a2>
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e6e:	4613      	mov	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	3354      	adds	r3, #84	; 0x54
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d108      	bne.n	8002e92 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	f003 fde7 	bl	8006a60 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	4619      	mov	r1, r3
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f006 f8d0 	bl	800903e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	2310      	movs	r3, #16
 8002ed4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eec:	461a      	mov	r2, r3
 8002eee:	2340      	movs	r3, #64	; 0x40
 8002ef0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d023      	beq.n	8002f44 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002efc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002efe:	6a38      	ldr	r0, [r7, #32]
 8002f00:	f002 fcc8 	bl	8005894 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f06:	4613      	mov	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	3338      	adds	r3, #56	; 0x38
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	4413      	add	r3, r2
 8002f14:	3304      	adds	r3, #4
 8002f16:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	78db      	ldrb	r3, [r3, #3]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d108      	bne.n	8002f32 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2200      	movs	r2, #0
 8002f24:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f006 f91d 	bl	800916c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f3e:	461a      	mov	r2, r3
 8002f40:	2302      	movs	r3, #2
 8002f42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fcdb 	bl	800390c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	3301      	adds	r3, #1
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5e:	085b      	lsrs	r3, r3, #1
 8002f60:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f47f af2e 	bne.w	8002dc6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f003 fcb2 	bl	80068d8 <USB_ReadInterrupts>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f7e:	d122      	bne.n	8002fc6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	69fa      	ldr	r2, [r7, #28]
 8002f8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f8e:	f023 0301 	bic.w	r3, r3, #1
 8002f92:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d108      	bne.n	8002fb0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 fec3 	bl	8003d34 <HAL_PCDEx_LPM_Callback>
 8002fae:	e002      	b.n	8002fb6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f006 f8bb 	bl	800912c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002fc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f003 fc84 	bl	80068d8 <USB_ReadInterrupts>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fda:	d112      	bne.n	8003002 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d102      	bne.n	8002ff2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f006 f877 	bl	80090e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695a      	ldr	r2, [r3, #20]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003000:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f003 fc66 	bl	80068d8 <USB_ReadInterrupts>
 800300c:	4603      	mov	r3, r0
 800300e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003016:	f040 80b7 	bne.w	8003188 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	69fa      	ldr	r2, [r7, #28]
 8003024:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003028:	f023 0301 	bic.w	r3, r3, #1
 800302c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2110      	movs	r1, #16
 8003034:	4618      	mov	r0, r3
 8003036:	f002 fc2d 	bl	8005894 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800303a:	2300      	movs	r3, #0
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800303e:	e046      	b.n	80030ce <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	4413      	add	r3, r2
 8003048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800304c:	461a      	mov	r2, r3
 800304e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003052:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	4413      	add	r3, r2
 800305c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003064:	0151      	lsls	r1, r2, #5
 8003066:	69fa      	ldr	r2, [r7, #28]
 8003068:	440a      	add	r2, r1
 800306a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800306e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003072:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	4413      	add	r3, r2
 800307c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003080:	461a      	mov	r2, r3
 8003082:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003086:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	4413      	add	r3, r2
 8003090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003098:	0151      	lsls	r1, r2, #5
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	440a      	add	r2, r1
 800309e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80030a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030b8:	0151      	lsls	r1, r2, #5
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	440a      	add	r2, r1
 80030be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80030c6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ca:	3301      	adds	r3, #1
 80030cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d3b3      	bcc.n	8003040 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	69fa      	ldr	r2, [r7, #28]
 80030e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030e6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80030ea:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d016      	beq.n	8003122 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003104:	f043 030b 	orr.w	r3, r3, #11
 8003108:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800311a:	f043 030b 	orr.w	r3, r3, #11
 800311e:	6453      	str	r3, [r2, #68]	; 0x44
 8003120:	e015      	b.n	800314e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003130:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003134:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003138:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003148:	f043 030b 	orr.w	r3, r3, #11
 800314c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69fa      	ldr	r2, [r7, #28]
 8003158:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800315c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003160:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003172:	461a      	mov	r2, r3
 8003174:	f003 fc74 	bl	8006a60 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695a      	ldr	r2, [r3, #20]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003186:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f003 fba3 	bl	80068d8 <USB_ReadInterrupts>
 8003192:	4603      	mov	r3, r0
 8003194:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800319c:	d124      	bne.n	80031e8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f003 fc39 	bl	8006a1a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f002 fbee 	bl	800598e <USB_GetDevSpeed>
 80031b2:	4603      	mov	r3, r0
 80031b4:	461a      	mov	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681c      	ldr	r4, [r3, #0]
 80031be:	f001 fa29 	bl	8004614 <HAL_RCC_GetHCLKFreq>
 80031c2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	4620      	mov	r0, r4
 80031ce:	f002 f8ed 	bl	80053ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f005 ff5b 	bl	800908e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80031e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f003 fb73 	bl	80068d8 <USB_ReadInterrupts>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d10a      	bne.n	8003212 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f005 ff38 	bl	8009072 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f002 0208 	and.w	r2, r2, #8
 8003210:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f003 fb5e 	bl	80068d8 <USB_ReadInterrupts>
 800321c:	4603      	mov	r3, r0
 800321e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003222:	2b80      	cmp	r3, #128	; 0x80
 8003224:	d122      	bne.n	800326c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003232:	2301      	movs	r3, #1
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
 8003236:	e014      	b.n	8003262 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d105      	bne.n	800325c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	b2db      	uxtb	r3, r3
 8003254:	4619      	mov	r1, r3
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fb27 	bl	80038aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	3301      	adds	r3, #1
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003268:	429a      	cmp	r2, r3
 800326a:	d3e5      	bcc.n	8003238 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f003 fb31 	bl	80068d8 <USB_ReadInterrupts>
 8003276:	4603      	mov	r3, r0
 8003278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800327c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003280:	d13b      	bne.n	80032fa <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003282:	2301      	movs	r3, #1
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
 8003286:	e02b      	b.n	80032e0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329c:	4613      	mov	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	3340      	adds	r3, #64	; 0x40
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d115      	bne.n	80032da <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80032ae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	da12      	bge.n	80032da <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b8:	4613      	mov	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	4413      	add	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	333f      	adds	r3, #63	; 0x3f
 80032c4:	2201      	movs	r2, #1
 80032c6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	4619      	mov	r1, r3
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 fae8 	bl	80038aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	3301      	adds	r3, #1
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d3ce      	bcc.n	8003288 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80032f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f003 faea 	bl	80068d8 <USB_ReadInterrupts>
 8003304:	4603      	mov	r3, r0
 8003306:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800330a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800330e:	d155      	bne.n	80033bc <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003310:	2301      	movs	r3, #1
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
 8003314:	e045      	b.n	80033a2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	015a      	lsls	r2, r3, #5
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	4413      	add	r3, r2
 800331e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332a:	4613      	mov	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d12e      	bne.n	800339c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800333e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003340:	2b00      	cmp	r3, #0
 8003342:	da2b      	bge.n	800339c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003350:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003354:	429a      	cmp	r2, r3
 8003356:	d121      	bne.n	800339c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800336a:	2201      	movs	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10a      	bne.n	800339c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003394:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003398:	6053      	str	r3, [r2, #4]
            break;
 800339a:	e007      	b.n	80033ac <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	3301      	adds	r3, #1
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d3b4      	bcc.n	8003316 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80033ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f003 fa89 	bl	80068d8 <USB_ReadInterrupts>
 80033c6:	4603      	mov	r3, r0
 80033c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d0:	d10a      	bne.n	80033e8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f005 fedc 	bl	8009190 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695a      	ldr	r2, [r3, #20]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f003 fa73 	bl	80068d8 <USB_ReadInterrupts>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d115      	bne.n	8003428 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f005 fecc 	bl	80091ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6859      	ldr	r1, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	430a      	orrs	r2, r1
 8003422:	605a      	str	r2, [r3, #4]
 8003424:	e000      	b.n	8003428 <HAL_PCD_IRQHandler+0x938>
      return;
 8003426:	bf00      	nop
    }
  }
}
 8003428:	3734      	adds	r7, #52	; 0x34
 800342a:	46bd      	mov	sp, r7
 800342c:	bd90      	pop	{r4, r7, pc}

0800342e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	460b      	mov	r3, r1
 8003438:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <HAL_PCD_SetAddress+0x1a>
 8003444:	2302      	movs	r3, #2
 8003446:	e013      	b.n	8003470 <HAL_PCD_SetAddress+0x42>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	4611      	mov	r1, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f003 f9d1 	bl	8006808 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	4608      	mov	r0, r1
 8003482:	4611      	mov	r1, r2
 8003484:	461a      	mov	r2, r3
 8003486:	4603      	mov	r3, r0
 8003488:	70fb      	strb	r3, [r7, #3]
 800348a:	460b      	mov	r3, r1
 800348c:	803b      	strh	r3, [r7, #0]
 800348e:	4613      	mov	r3, r2
 8003490:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003496:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800349a:	2b00      	cmp	r3, #0
 800349c:	da0f      	bge.n	80034be <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	f003 020f 	and.w	r2, r3, #15
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	3338      	adds	r3, #56	; 0x38
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	3304      	adds	r3, #4
 80034b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	705a      	strb	r2, [r3, #1]
 80034bc:	e00f      	b.n	80034de <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	f003 020f 	and.w	r2, r3, #15
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	4413      	add	r3, r2
 80034d4:	3304      	adds	r3, #4
 80034d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034de:	78fb      	ldrb	r3, [r7, #3]
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034ea:	883a      	ldrh	r2, [r7, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	78ba      	ldrb	r2, [r7, #2]
 80034f4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	785b      	ldrb	r3, [r3, #1]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d004      	beq.n	8003508 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003508:	78bb      	ldrb	r3, [r7, #2]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d102      	bne.n	8003514 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <HAL_PCD_EP_Open+0xaa>
 800351e:	2302      	movs	r3, #2
 8003520:	e00e      	b.n	8003540 <HAL_PCD_EP_Open+0xc8>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68f9      	ldr	r1, [r7, #12]
 8003530:	4618      	mov	r0, r3
 8003532:	f002 fa51 	bl	80059d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800353e:	7afb      	ldrb	r3, [r7, #11]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003554:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003558:	2b00      	cmp	r3, #0
 800355a:	da0f      	bge.n	800357c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800355c:	78fb      	ldrb	r3, [r7, #3]
 800355e:	f003 020f 	and.w	r2, r3, #15
 8003562:	4613      	mov	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	3338      	adds	r3, #56	; 0x38
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	4413      	add	r3, r2
 8003570:	3304      	adds	r3, #4
 8003572:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	705a      	strb	r2, [r3, #1]
 800357a:	e00f      	b.n	800359c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	f003 020f 	and.w	r2, r3, #15
 8003582:	4613      	mov	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	4413      	add	r3, r2
 8003592:	3304      	adds	r3, #4
 8003594:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800359c:	78fb      	ldrb	r3, [r7, #3]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_PCD_EP_Close+0x6e>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e00e      	b.n	80035d4 <HAL_PCD_EP_Close+0x8c>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68f9      	ldr	r1, [r7, #12]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f002 fa8f 	bl	8005ae8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	460b      	mov	r3, r1
 80035ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035ec:	7afb      	ldrb	r3, [r7, #11]
 80035ee:	f003 020f 	and.w	r2, r3, #15
 80035f2:	4613      	mov	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4413      	add	r3, r2
 8003602:	3304      	adds	r3, #4
 8003604:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2200      	movs	r2, #0
 8003616:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2200      	movs	r2, #0
 800361c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800361e:	7afb      	ldrb	r3, [r7, #11]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	b2da      	uxtb	r2, r3
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d102      	bne.n	8003638 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003638:	7afb      	ldrb	r3, [r7, #11]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	461a      	mov	r2, r3
 800364e:	6979      	ldr	r1, [r7, #20]
 8003650:	f002 fd6e 	bl	8006130 <USB_EP0StartXfer>
 8003654:	e008      	b.n	8003668 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	6979      	ldr	r1, [r7, #20]
 8003664:	f002 fb1c 	bl	8005ca0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	460b      	mov	r3, r1
 800367c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800367e:	78fb      	ldrb	r3, [r7, #3]
 8003680:	f003 020f 	and.w	r2, r3, #15
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	4613      	mov	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	440b      	add	r3, r1
 8003690:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003694:	681b      	ldr	r3, [r3, #0]
}
 8003696:	4618      	mov	r0, r3
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b086      	sub	sp, #24
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
 80036ae:	460b      	mov	r3, r1
 80036b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036b2:	7afb      	ldrb	r3, [r7, #11]
 80036b4:	f003 020f 	and.w	r2, r3, #15
 80036b8:	4613      	mov	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	3338      	adds	r3, #56	; 0x38
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4413      	add	r3, r2
 80036c6:	3304      	adds	r3, #4
 80036c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2200      	movs	r2, #0
 80036da:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2201      	movs	r2, #1
 80036e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036e2:	7afb      	ldrb	r3, [r7, #11]
 80036e4:	f003 030f 	and.w	r3, r3, #15
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d102      	bne.n	80036fc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036fc:	7afb      	ldrb	r3, [r7, #11]
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	2b00      	cmp	r3, #0
 8003704:	d109      	bne.n	800371a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	b2db      	uxtb	r3, r3
 8003710:	461a      	mov	r2, r3
 8003712:	6979      	ldr	r1, [r7, #20]
 8003714:	f002 fd0c 	bl	8006130 <USB_EP0StartXfer>
 8003718:	e008      	b.n	800372c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	6979      	ldr	r1, [r7, #20]
 8003728:	f002 faba 	bl	8005ca0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	460b      	mov	r3, r1
 8003740:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003742:	78fb      	ldrb	r3, [r7, #3]
 8003744:	f003 020f 	and.w	r2, r3, #15
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	429a      	cmp	r2, r3
 800374e:	d901      	bls.n	8003754 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e050      	b.n	80037f6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003754:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003758:	2b00      	cmp	r3, #0
 800375a:	da0f      	bge.n	800377c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800375c:	78fb      	ldrb	r3, [r7, #3]
 800375e:	f003 020f 	and.w	r2, r3, #15
 8003762:	4613      	mov	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	3338      	adds	r3, #56	; 0x38
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	4413      	add	r3, r2
 8003770:	3304      	adds	r3, #4
 8003772:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2201      	movs	r2, #1
 8003778:	705a      	strb	r2, [r3, #1]
 800377a:	e00d      	b.n	8003798 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800377c:	78fa      	ldrb	r2, [r7, #3]
 800377e:	4613      	mov	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	4413      	add	r3, r2
 800378e:	3304      	adds	r3, #4
 8003790:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2201      	movs	r2, #1
 800379c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800379e:	78fb      	ldrb	r3, [r7, #3]
 80037a0:	f003 030f 	and.w	r3, r3, #15
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_PCD_EP_SetStall+0x82>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e01e      	b.n	80037f6 <HAL_PCD_EP_SetStall+0xc0>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68f9      	ldr	r1, [r7, #12]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f002 ff4a 	bl	8006660 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10a      	bne.n	80037ec <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	b2d9      	uxtb	r1, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037e6:	461a      	mov	r2, r3
 80037e8:	f003 f93a 	bl	8006a60 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	460b      	mov	r3, r1
 8003808:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	f003 020f 	and.w	r2, r3, #15
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	429a      	cmp	r2, r3
 8003816:	d901      	bls.n	800381c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e042      	b.n	80038a2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800381c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003820:	2b00      	cmp	r3, #0
 8003822:	da0f      	bge.n	8003844 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003824:	78fb      	ldrb	r3, [r7, #3]
 8003826:	f003 020f 	and.w	r2, r3, #15
 800382a:	4613      	mov	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	3338      	adds	r3, #56	; 0x38
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	4413      	add	r3, r2
 8003838:	3304      	adds	r3, #4
 800383a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	705a      	strb	r2, [r3, #1]
 8003842:	e00f      	b.n	8003864 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	f003 020f 	and.w	r2, r3, #15
 800384a:	4613      	mov	r3, r2
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	3304      	adds	r3, #4
 800385c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	f003 030f 	and.w	r3, r3, #15
 8003870:	b2da      	uxtb	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_PCD_EP_ClrStall+0x86>
 8003880:	2302      	movs	r3, #2
 8003882:	e00e      	b.n	80038a2 <HAL_PCD_EP_ClrStall+0xa4>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68f9      	ldr	r1, [r7, #12]
 8003892:	4618      	mov	r0, r3
 8003894:	f002 ff52 	bl	800673c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b084      	sub	sp, #16
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	460b      	mov	r3, r1
 80038b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80038b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	da0c      	bge.n	80038d8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038be:	78fb      	ldrb	r3, [r7, #3]
 80038c0:	f003 020f 	and.w	r2, r3, #15
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	3338      	adds	r3, #56	; 0x38
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	4413      	add	r3, r2
 80038d2:	3304      	adds	r3, #4
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	e00c      	b.n	80038f2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	f003 020f 	and.w	r2, r3, #15
 80038de:	4613      	mov	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	4413      	add	r3, r2
 80038ee:	3304      	adds	r3, #4
 80038f0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68f9      	ldr	r1, [r7, #12]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f002 fd71 	bl	80063e0 <USB_EPStopXfer>
 80038fe:	4603      	mov	r3, r0
 8003900:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003902:	7afb      	ldrb	r3, [r7, #11]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08a      	sub	sp, #40	; 0x28
 8003910:	af02      	add	r7, sp, #8
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	4613      	mov	r3, r2
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	4413      	add	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	3338      	adds	r3, #56	; 0x38
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	4413      	add	r3, r2
 8003930:	3304      	adds	r3, #4
 8003932:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a1a      	ldr	r2, [r3, #32]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	429a      	cmp	r2, r3
 800393e:	d901      	bls.n	8003944 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e06c      	b.n	8003a1e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	69fa      	ldr	r2, [r7, #28]
 8003956:	429a      	cmp	r2, r3
 8003958:	d902      	bls.n	8003960 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	3303      	adds	r3, #3
 8003964:	089b      	lsrs	r3, r3, #2
 8003966:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003968:	e02b      	b.n	80039c2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	69fa      	ldr	r2, [r7, #28]
 800397c:	429a      	cmp	r2, r3
 800397e:	d902      	bls.n	8003986 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	3303      	adds	r3, #3
 800398a:	089b      	lsrs	r3, r3, #2
 800398c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6919      	ldr	r1, [r3, #16]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	b2da      	uxtb	r2, r3
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	4603      	mov	r3, r0
 80039a4:	6978      	ldr	r0, [r7, #20]
 80039a6:	f002 fdc5 	bl	8006534 <USB_WritePacket>

    ep->xfer_buff  += len;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	441a      	add	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a1a      	ldr	r2, [r3, #32]
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	441a      	add	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d809      	bhi.n	80039ec <PCD_WriteEmptyTxFifo+0xe0>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a1a      	ldr	r2, [r3, #32]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d203      	bcs.n	80039ec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1be      	bne.n	800396a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	699a      	ldr	r2, [r3, #24]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d811      	bhi.n	8003a1c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	2201      	movs	r2, #1
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	43db      	mvns	r3, r3
 8003a12:	6939      	ldr	r1, [r7, #16]
 8003a14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a18:	4013      	ands	r3, r2
 8003a1a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3720      	adds	r7, #32
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
	...

08003a28 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	333c      	adds	r3, #60	; 0x3c
 8003a40:	3304      	adds	r3, #4
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d17b      	bne.n	8003b56 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d015      	beq.n	8003a94 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	4a61      	ldr	r2, [pc, #388]	; (8003bf0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	f240 80b9 	bls.w	8003be4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 80b3 	beq.w	8003be4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a90:	6093      	str	r3, [r2, #8]
 8003a92:	e0a7      	b.n	8003be4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f003 0320 	and.w	r3, r3, #32
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	015a      	lsls	r2, r3, #5
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aaa:	461a      	mov	r2, r3
 8003aac:	2320      	movs	r3, #32
 8003aae:	6093      	str	r3, [r2, #8]
 8003ab0:	e098      	b.n	8003be4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f040 8093 	bne.w	8003be4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	4a4b      	ldr	r2, [pc, #300]	; (8003bf0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d90f      	bls.n	8003ae6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00a      	beq.n	8003ae6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003adc:	461a      	mov	r2, r3
 8003ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ae2:	6093      	str	r3, [r2, #8]
 8003ae4:	e07e      	b.n	8003be4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	4413      	add	r3, r2
 8003af8:	3304      	adds	r3, #4
 8003afa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	0159      	lsls	r1, r3, #5
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	440b      	add	r3, r1
 8003b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b12:	1ad2      	subs	r2, r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d114      	bne.n	8003b48 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d109      	bne.n	8003b3a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6818      	ldr	r0, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b30:	461a      	mov	r2, r3
 8003b32:	2101      	movs	r1, #1
 8003b34:	f002 ff94 	bl	8006a60 <USB_EP0_OutStart>
 8003b38:	e006      	b.n	8003b48 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	441a      	add	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f005 fa5a 	bl	8009008 <HAL_PCD_DataOutStageCallback>
 8003b54:	e046      	b.n	8003be4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	4a26      	ldr	r2, [pc, #152]	; (8003bf4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d124      	bne.n	8003ba8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b74:	461a      	mov	r2, r3
 8003b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b7a:	6093      	str	r3, [r2, #8]
 8003b7c:	e032      	b.n	8003be4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b94:	461a      	mov	r2, r3
 8003b96:	2320      	movs	r3, #32
 8003b98:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f005 fa31 	bl	8009008 <HAL_PCD_DataOutStageCallback>
 8003ba6:	e01d      	b.n	8003be4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d114      	bne.n	8003bd8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d108      	bne.n	8003bd8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	f002 ff44 	bl	8006a60 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	4619      	mov	r1, r3
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f005 fa12 	bl	8009008 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3720      	adds	r7, #32
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	4f54300a 	.word	0x4f54300a
 8003bf4:	4f54310a 	.word	0x4f54310a

08003bf8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	333c      	adds	r3, #60	; 0x3c
 8003c10:	3304      	adds	r3, #4
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4a15      	ldr	r2, [pc, #84]	; (8003c80 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d90e      	bls.n	8003c4c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d009      	beq.n	8003c4c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c44:	461a      	mov	r2, r3
 8003c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c4a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f005 f9c9 	bl	8008fe4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4a0a      	ldr	r2, [pc, #40]	; (8003c80 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d90c      	bls.n	8003c74 <PCD_EP_OutSetupPacket_int+0x7c>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d108      	bne.n	8003c74 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	2101      	movs	r1, #1
 8003c70:	f002 fef6 	bl	8006a60 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	4f54300a 	.word	0x4f54300a

08003c84 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	70fb      	strb	r3, [r7, #3]
 8003c90:	4613      	mov	r3, r2
 8003c92:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d107      	bne.n	8003cb2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ca2:	883b      	ldrh	r3, [r7, #0]
 8003ca4:	0419      	lsls	r1, r3, #16
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	629a      	str	r2, [r3, #40]	; 0x28
 8003cb0:	e028      	b.n	8003d04 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb8:	0c1b      	lsrs	r3, r3, #16
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	73fb      	strb	r3, [r7, #15]
 8003cc4:	e00d      	b.n	8003ce2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	3340      	adds	r3, #64	; 0x40
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	0c1b      	lsrs	r3, r3, #16
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	4413      	add	r3, r2
 8003cda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	73fb      	strb	r3, [r7, #15]
 8003ce2:	7bfa      	ldrb	r2, [r7, #15]
 8003ce4:	78fb      	ldrb	r3, [r7, #3]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d3ec      	bcc.n	8003cc6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003cec:	883b      	ldrh	r3, [r7, #0]
 8003cee:	0418      	lsls	r0, r3, #16
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6819      	ldr	r1, [r3, #0]
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	4302      	orrs	r2, r0
 8003cfc:	3340      	adds	r3, #64	; 0x40
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	887a      	ldrh	r2, [r7, #2]
 8003d24:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e267      	b.n	800422e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d075      	beq.n	8003e56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d6a:	4b88      	ldr	r3, [pc, #544]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d00c      	beq.n	8003d90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d76:	4b85      	ldr	r3, [pc, #532]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d112      	bne.n	8003da8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d82:	4b82      	ldr	r3, [pc, #520]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d8e:	d10b      	bne.n	8003da8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d90:	4b7e      	ldr	r3, [pc, #504]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d05b      	beq.n	8003e54 <HAL_RCC_OscConfig+0x108>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d157      	bne.n	8003e54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e242      	b.n	800422e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db0:	d106      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x74>
 8003db2:	4b76      	ldr	r3, [pc, #472]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a75      	ldr	r2, [pc, #468]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	e01d      	b.n	8003dfc <HAL_RCC_OscConfig+0xb0>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dc8:	d10c      	bne.n	8003de4 <HAL_RCC_OscConfig+0x98>
 8003dca:	4b70      	ldr	r3, [pc, #448]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a6f      	ldr	r2, [pc, #444]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	4b6d      	ldr	r3, [pc, #436]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a6c      	ldr	r2, [pc, #432]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	e00b      	b.n	8003dfc <HAL_RCC_OscConfig+0xb0>
 8003de4:	4b69      	ldr	r3, [pc, #420]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a68      	ldr	r2, [pc, #416]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dee:	6013      	str	r3, [r2, #0]
 8003df0:	4b66      	ldr	r3, [pc, #408]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a65      	ldr	r2, [pc, #404]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d013      	beq.n	8003e2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e04:	f7fd fc16 	bl	8001634 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e0c:	f7fd fc12 	bl	8001634 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	; 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e207      	b.n	800422e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1e:	4b5b      	ldr	r3, [pc, #364]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0xc0>
 8003e2a:	e014      	b.n	8003e56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2c:	f7fd fc02 	bl	8001634 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e34:	f7fd fbfe 	bl	8001634 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b64      	cmp	r3, #100	; 0x64
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e1f3      	b.n	800422e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e46:	4b51      	ldr	r3, [pc, #324]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f0      	bne.n	8003e34 <HAL_RCC_OscConfig+0xe8>
 8003e52:	e000      	b.n	8003e56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d063      	beq.n	8003f2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e62:	4b4a      	ldr	r3, [pc, #296]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 030c 	and.w	r3, r3, #12
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00b      	beq.n	8003e86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e6e:	4b47      	ldr	r3, [pc, #284]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d11c      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e7a:	4b44      	ldr	r3, [pc, #272]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d116      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e86:	4b41      	ldr	r3, [pc, #260]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <HAL_RCC_OscConfig+0x152>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d001      	beq.n	8003e9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e1c7      	b.n	800422e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e9e:	4b3b      	ldr	r3, [pc, #236]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	4937      	ldr	r1, [pc, #220]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb2:	e03a      	b.n	8003f2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d020      	beq.n	8003efe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ebc:	4b34      	ldr	r3, [pc, #208]	; (8003f90 <HAL_RCC_OscConfig+0x244>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec2:	f7fd fbb7 	bl	8001634 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eca:	f7fd fbb3 	bl	8001634 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e1a8      	b.n	800422e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003edc:	4b2b      	ldr	r3, [pc, #172]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0f0      	beq.n	8003eca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee8:	4b28      	ldr	r3, [pc, #160]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	4925      	ldr	r1, [pc, #148]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	600b      	str	r3, [r1, #0]
 8003efc:	e015      	b.n	8003f2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003efe:	4b24      	ldr	r3, [pc, #144]	; (8003f90 <HAL_RCC_OscConfig+0x244>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f04:	f7fd fb96 	bl	8001634 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f0c:	f7fd fb92 	bl	8001634 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e187      	b.n	800422e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f1e:	4b1b      	ldr	r3, [pc, #108]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f0      	bne.n	8003f0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d036      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d016      	beq.n	8003f6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f3e:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <HAL_RCC_OscConfig+0x248>)
 8003f40:	2201      	movs	r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f44:	f7fd fb76 	bl	8001634 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f4c:	f7fd fb72 	bl	8001634 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e167      	b.n	800422e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f5e:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <HAL_RCC_OscConfig+0x240>)
 8003f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCC_OscConfig+0x200>
 8003f6a:	e01b      	b.n	8003fa4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f6c:	4b09      	ldr	r3, [pc, #36]	; (8003f94 <HAL_RCC_OscConfig+0x248>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f72:	f7fd fb5f 	bl	8001634 <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f78:	e00e      	b.n	8003f98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f7a:	f7fd fb5b 	bl	8001634 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d907      	bls.n	8003f98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e150      	b.n	800422e <HAL_RCC_OscConfig+0x4e2>
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	42470000 	.word	0x42470000
 8003f94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f98:	4b88      	ldr	r3, [pc, #544]	; (80041bc <HAL_RCC_OscConfig+0x470>)
 8003f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1ea      	bne.n	8003f7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 8097 	beq.w	80040e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fb6:	4b81      	ldr	r3, [pc, #516]	; (80041bc <HAL_RCC_OscConfig+0x470>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10f      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60bb      	str	r3, [r7, #8]
 8003fc6:	4b7d      	ldr	r3, [pc, #500]	; (80041bc <HAL_RCC_OscConfig+0x470>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	4a7c      	ldr	r2, [pc, #496]	; (80041bc <HAL_RCC_OscConfig+0x470>)
 8003fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd2:	4b7a      	ldr	r3, [pc, #488]	; (80041bc <HAL_RCC_OscConfig+0x470>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fda:	60bb      	str	r3, [r7, #8]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe2:	4b77      	ldr	r3, [pc, #476]	; (80041c0 <HAL_RCC_OscConfig+0x474>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d118      	bne.n	8004020 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fee:	4b74      	ldr	r3, [pc, #464]	; (80041c0 <HAL_RCC_OscConfig+0x474>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a73      	ldr	r2, [pc, #460]	; (80041c0 <HAL_RCC_OscConfig+0x474>)
 8003ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ffa:	f7fd fb1b 	bl	8001634 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004002:	f7fd fb17 	bl	8001634 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e10c      	b.n	800422e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004014:	4b6a      	ldr	r3, [pc, #424]	; (80041c0 <HAL_RCC_OscConfig+0x474>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0f0      	beq.n	8004002 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d106      	bne.n	8004036 <HAL_RCC_OscConfig+0x2ea>
 8004028:	4b64      	ldr	r3, [pc, #400]	; (80041bc <HAL_RCC_OscConfig+0x470>)
 800402a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402c:	4a63      	ldr	r2, [pc, #396]	; (80041bc <HAL_RCC_OscConfig+0x470>)
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	6713      	str	r3, [r2, #112]	; 0x70
 8004034:	e01c      	b.n	8004070 <HAL_RCC_OscConfig+0x324>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b05      	cmp	r3, #5
 800403c:	d10c      	bne.n	8004058 <HAL_RCC_OscConfig+0x30c>
 800403e:	4b5f      	ldr	r3, [pc, #380]	; (80041bc <HAL_RCC_OscConfig+0x470>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004042:	4a5e      	ldr	r2, [pc, #376]	; (80041bc <HAL_RCC_OscConfig+0x470>)
 8004044:	f043 0304 	orr.w	r3, r3, #4
 8004048:	6713      	str	r3, [r2, #112]	; 0x70
 800404a:	4b5c      	ldr	r3, [pc, #368]	; (80041bc <HAL_RCC_OscConfig+0x470>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404e:	4a5b      	ldr	r2, [pc, #364]	; (80041bc <HAL_RCC_OscConfig+0x470>)
 8004050:	f043 0301 	orr.w	r3, r3, #1
 8004054:	6713      	str	r3, [r2, #112]	; 0x70
 8004056:	e00b      	b.n	8004070 <HAL_RCC_OscConfig+0x324>
 8004058:	4b58      	ldr	r3, [pc, #352]	; (80041bc <HAL_RCC_OscConfig+0x470>)
 800405a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405c:	4a57      	ldr	r2, [pc, #348]	; (80041bc <HAL_RCC_OscConfig+0x470>)
 800405e:	f023 0301 	bic.w	r3, r3, #1
 8004062:	6713      	str	r3, [r2, #112]	; 0x70
 8004064:	4b55      	ldr	r3, [pc, #340]	; (80041bc <HAL_RCC_OscConfig+0x470>)
 8004066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004068:	4a54      	ldr	r2, [pc, #336]	; (80041bc <HAL_RCC_OscConfig+0x470>)
 800406a:	f023 0304 	bic.w	r3, r3, #4
 800406e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d015      	beq.n	80040a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004078:	f7fd fadc 	bl	8001634 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407e:	e00a      	b.n	8004096 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004080:	f7fd fad8 	bl	8001634 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	f241 3288 	movw	r2, #5000	; 0x1388
 800408e:	4293      	cmp	r3, r2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e0cb      	b.n	800422e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004096:	4b49      	ldr	r3, [pc, #292]	; (80041bc <HAL_RCC_OscConfig+0x470>)
 8004098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0ee      	beq.n	8004080 <HAL_RCC_OscConfig+0x334>
 80040a2:	e014      	b.n	80040ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a4:	f7fd fac6 	bl	8001634 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040aa:	e00a      	b.n	80040c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ac:	f7fd fac2 	bl	8001634 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e0b5      	b.n	800422e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c2:	4b3e      	ldr	r3, [pc, #248]	; (80041bc <HAL_RCC_OscConfig+0x470>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1ee      	bne.n	80040ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040ce:	7dfb      	ldrb	r3, [r7, #23]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d105      	bne.n	80040e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d4:	4b39      	ldr	r3, [pc, #228]	; (80041bc <HAL_RCC_OscConfig+0x470>)
 80040d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d8:	4a38      	ldr	r2, [pc, #224]	; (80041bc <HAL_RCC_OscConfig+0x470>)
 80040da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 80a1 	beq.w	800422c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040ea:	4b34      	ldr	r3, [pc, #208]	; (80041bc <HAL_RCC_OscConfig+0x470>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 030c 	and.w	r3, r3, #12
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	d05c      	beq.n	80041b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d141      	bne.n	8004182 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fe:	4b31      	ldr	r3, [pc, #196]	; (80041c4 <HAL_RCC_OscConfig+0x478>)
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004104:	f7fd fa96 	bl	8001634 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800410c:	f7fd fa92 	bl	8001634 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e087      	b.n	800422e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411e:	4b27      	ldr	r3, [pc, #156]	; (80041bc <HAL_RCC_OscConfig+0x470>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69da      	ldr	r2, [r3, #28]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	019b      	lsls	r3, r3, #6
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	085b      	lsrs	r3, r3, #1
 8004142:	3b01      	subs	r3, #1
 8004144:	041b      	lsls	r3, r3, #16
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	061b      	lsls	r3, r3, #24
 800414e:	491b      	ldr	r1, [pc, #108]	; (80041bc <HAL_RCC_OscConfig+0x470>)
 8004150:	4313      	orrs	r3, r2
 8004152:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004154:	4b1b      	ldr	r3, [pc, #108]	; (80041c4 <HAL_RCC_OscConfig+0x478>)
 8004156:	2201      	movs	r2, #1
 8004158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415a:	f7fd fa6b 	bl	8001634 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004162:	f7fd fa67 	bl	8001634 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e05c      	b.n	800422e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004174:	4b11      	ldr	r3, [pc, #68]	; (80041bc <HAL_RCC_OscConfig+0x470>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0f0      	beq.n	8004162 <HAL_RCC_OscConfig+0x416>
 8004180:	e054      	b.n	800422c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004182:	4b10      	ldr	r3, [pc, #64]	; (80041c4 <HAL_RCC_OscConfig+0x478>)
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004188:	f7fd fa54 	bl	8001634 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004190:	f7fd fa50 	bl	8001634 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e045      	b.n	800422e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a2:	4b06      	ldr	r3, [pc, #24]	; (80041bc <HAL_RCC_OscConfig+0x470>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f0      	bne.n	8004190 <HAL_RCC_OscConfig+0x444>
 80041ae:	e03d      	b.n	800422c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d107      	bne.n	80041c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e038      	b.n	800422e <HAL_RCC_OscConfig+0x4e2>
 80041bc:	40023800 	.word	0x40023800
 80041c0:	40007000 	.word	0x40007000
 80041c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041c8:	4b1b      	ldr	r3, [pc, #108]	; (8004238 <HAL_RCC_OscConfig+0x4ec>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d028      	beq.n	8004228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d121      	bne.n	8004228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d11a      	bne.n	8004228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041f8:	4013      	ands	r3, r2
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004200:	4293      	cmp	r3, r2
 8004202:	d111      	bne.n	8004228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420e:	085b      	lsrs	r3, r3, #1
 8004210:	3b01      	subs	r3, #1
 8004212:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004214:	429a      	cmp	r2, r3
 8004216:	d107      	bne.n	8004228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004222:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004224:	429a      	cmp	r2, r3
 8004226:	d001      	beq.n	800422c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e000      	b.n	800422e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40023800 	.word	0x40023800

0800423c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e0cc      	b.n	80043ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004250:	4b68      	ldr	r3, [pc, #416]	; (80043f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d90c      	bls.n	8004278 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425e:	4b65      	ldr	r3, [pc, #404]	; (80043f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004266:	4b63      	ldr	r3, [pc, #396]	; (80043f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d001      	beq.n	8004278 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0b8      	b.n	80043ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d020      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004290:	4b59      	ldr	r3, [pc, #356]	; (80043f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	4a58      	ldr	r2, [pc, #352]	; (80043f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004296:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800429a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d005      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042a8:	4b53      	ldr	r3, [pc, #332]	; (80043f8 <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	4a52      	ldr	r2, [pc, #328]	; (80043f8 <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042b4:	4b50      	ldr	r3, [pc, #320]	; (80043f8 <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	494d      	ldr	r1, [pc, #308]	; (80043f8 <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d044      	beq.n	800435c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d107      	bne.n	80042ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042da:	4b47      	ldr	r3, [pc, #284]	; (80043f8 <HAL_RCC_ClockConfig+0x1bc>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d119      	bne.n	800431a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e07f      	b.n	80043ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d003      	beq.n	80042fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042f6:	2b03      	cmp	r3, #3
 80042f8:	d107      	bne.n	800430a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042fa:	4b3f      	ldr	r3, [pc, #252]	; (80043f8 <HAL_RCC_ClockConfig+0x1bc>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d109      	bne.n	800431a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e06f      	b.n	80043ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430a:	4b3b      	ldr	r3, [pc, #236]	; (80043f8 <HAL_RCC_ClockConfig+0x1bc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e067      	b.n	80043ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800431a:	4b37      	ldr	r3, [pc, #220]	; (80043f8 <HAL_RCC_ClockConfig+0x1bc>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f023 0203 	bic.w	r2, r3, #3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	4934      	ldr	r1, [pc, #208]	; (80043f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004328:	4313      	orrs	r3, r2
 800432a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800432c:	f7fd f982 	bl	8001634 <HAL_GetTick>
 8004330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004332:	e00a      	b.n	800434a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004334:	f7fd f97e 	bl	8001634 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004342:	4293      	cmp	r3, r2
 8004344:	d901      	bls.n	800434a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e04f      	b.n	80043ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434a:	4b2b      	ldr	r3, [pc, #172]	; (80043f8 <HAL_RCC_ClockConfig+0x1bc>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 020c 	and.w	r2, r3, #12
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	429a      	cmp	r2, r3
 800435a:	d1eb      	bne.n	8004334 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800435c:	4b25      	ldr	r3, [pc, #148]	; (80043f4 <HAL_RCC_ClockConfig+0x1b8>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d20c      	bcs.n	8004384 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436a:	4b22      	ldr	r3, [pc, #136]	; (80043f4 <HAL_RCC_ClockConfig+0x1b8>)
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004372:	4b20      	ldr	r3, [pc, #128]	; (80043f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d001      	beq.n	8004384 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e032      	b.n	80043ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d008      	beq.n	80043a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004390:	4b19      	ldr	r3, [pc, #100]	; (80043f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	4916      	ldr	r1, [pc, #88]	; (80043f8 <HAL_RCC_ClockConfig+0x1bc>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d009      	beq.n	80043c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ae:	4b12      	ldr	r3, [pc, #72]	; (80043f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	490e      	ldr	r1, [pc, #56]	; (80043f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043c2:	f000 f821 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 80043c6:	4602      	mov	r2, r0
 80043c8:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	091b      	lsrs	r3, r3, #4
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	490a      	ldr	r1, [pc, #40]	; (80043fc <HAL_RCC_ClockConfig+0x1c0>)
 80043d4:	5ccb      	ldrb	r3, [r1, r3]
 80043d6:	fa22 f303 	lsr.w	r3, r2, r3
 80043da:	4a09      	ldr	r2, [pc, #36]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 80043dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043de:	4b09      	ldr	r3, [pc, #36]	; (8004404 <HAL_RCC_ClockConfig+0x1c8>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fd f8e2 	bl	80015ac <HAL_InitTick>

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40023c00 	.word	0x40023c00
 80043f8:	40023800 	.word	0x40023800
 80043fc:	0800a514 	.word	0x0800a514
 8004400:	20000004 	.word	0x20000004
 8004404:	20000008 	.word	0x20000008

08004408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800440c:	b094      	sub	sp, #80	; 0x50
 800440e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	647b      	str	r3, [r7, #68]	; 0x44
 8004414:	2300      	movs	r3, #0
 8004416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004418:	2300      	movs	r3, #0
 800441a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004420:	4b79      	ldr	r3, [pc, #484]	; (8004608 <HAL_RCC_GetSysClockFreq+0x200>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f003 030c 	and.w	r3, r3, #12
 8004428:	2b08      	cmp	r3, #8
 800442a:	d00d      	beq.n	8004448 <HAL_RCC_GetSysClockFreq+0x40>
 800442c:	2b08      	cmp	r3, #8
 800442e:	f200 80e1 	bhi.w	80045f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004432:	2b00      	cmp	r3, #0
 8004434:	d002      	beq.n	800443c <HAL_RCC_GetSysClockFreq+0x34>
 8004436:	2b04      	cmp	r3, #4
 8004438:	d003      	beq.n	8004442 <HAL_RCC_GetSysClockFreq+0x3a>
 800443a:	e0db      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800443c:	4b73      	ldr	r3, [pc, #460]	; (800460c <HAL_RCC_GetSysClockFreq+0x204>)
 800443e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004440:	e0db      	b.n	80045fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004442:	4b73      	ldr	r3, [pc, #460]	; (8004610 <HAL_RCC_GetSysClockFreq+0x208>)
 8004444:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004446:	e0d8      	b.n	80045fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004448:	4b6f      	ldr	r3, [pc, #444]	; (8004608 <HAL_RCC_GetSysClockFreq+0x200>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004450:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004452:	4b6d      	ldr	r3, [pc, #436]	; (8004608 <HAL_RCC_GetSysClockFreq+0x200>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d063      	beq.n	8004526 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800445e:	4b6a      	ldr	r3, [pc, #424]	; (8004608 <HAL_RCC_GetSysClockFreq+0x200>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	099b      	lsrs	r3, r3, #6
 8004464:	2200      	movs	r2, #0
 8004466:	63bb      	str	r3, [r7, #56]	; 0x38
 8004468:	63fa      	str	r2, [r7, #60]	; 0x3c
 800446a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004470:	633b      	str	r3, [r7, #48]	; 0x30
 8004472:	2300      	movs	r3, #0
 8004474:	637b      	str	r3, [r7, #52]	; 0x34
 8004476:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800447a:	4622      	mov	r2, r4
 800447c:	462b      	mov	r3, r5
 800447e:	f04f 0000 	mov.w	r0, #0
 8004482:	f04f 0100 	mov.w	r1, #0
 8004486:	0159      	lsls	r1, r3, #5
 8004488:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800448c:	0150      	lsls	r0, r2, #5
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4621      	mov	r1, r4
 8004494:	1a51      	subs	r1, r2, r1
 8004496:	6139      	str	r1, [r7, #16]
 8004498:	4629      	mov	r1, r5
 800449a:	eb63 0301 	sbc.w	r3, r3, r1
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044ac:	4659      	mov	r1, fp
 80044ae:	018b      	lsls	r3, r1, #6
 80044b0:	4651      	mov	r1, sl
 80044b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044b6:	4651      	mov	r1, sl
 80044b8:	018a      	lsls	r2, r1, #6
 80044ba:	4651      	mov	r1, sl
 80044bc:	ebb2 0801 	subs.w	r8, r2, r1
 80044c0:	4659      	mov	r1, fp
 80044c2:	eb63 0901 	sbc.w	r9, r3, r1
 80044c6:	f04f 0200 	mov.w	r2, #0
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044da:	4690      	mov	r8, r2
 80044dc:	4699      	mov	r9, r3
 80044de:	4623      	mov	r3, r4
 80044e0:	eb18 0303 	adds.w	r3, r8, r3
 80044e4:	60bb      	str	r3, [r7, #8]
 80044e6:	462b      	mov	r3, r5
 80044e8:	eb49 0303 	adc.w	r3, r9, r3
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044fa:	4629      	mov	r1, r5
 80044fc:	024b      	lsls	r3, r1, #9
 80044fe:	4621      	mov	r1, r4
 8004500:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004504:	4621      	mov	r1, r4
 8004506:	024a      	lsls	r2, r1, #9
 8004508:	4610      	mov	r0, r2
 800450a:	4619      	mov	r1, r3
 800450c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800450e:	2200      	movs	r2, #0
 8004510:	62bb      	str	r3, [r7, #40]	; 0x28
 8004512:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004514:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004518:	f7fb feaa 	bl	8000270 <__aeabi_uldivmod>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4613      	mov	r3, r2
 8004522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004524:	e058      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004526:	4b38      	ldr	r3, [pc, #224]	; (8004608 <HAL_RCC_GetSysClockFreq+0x200>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	099b      	lsrs	r3, r3, #6
 800452c:	2200      	movs	r2, #0
 800452e:	4618      	mov	r0, r3
 8004530:	4611      	mov	r1, r2
 8004532:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004536:	623b      	str	r3, [r7, #32]
 8004538:	2300      	movs	r3, #0
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
 800453c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004540:	4642      	mov	r2, r8
 8004542:	464b      	mov	r3, r9
 8004544:	f04f 0000 	mov.w	r0, #0
 8004548:	f04f 0100 	mov.w	r1, #0
 800454c:	0159      	lsls	r1, r3, #5
 800454e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004552:	0150      	lsls	r0, r2, #5
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4641      	mov	r1, r8
 800455a:	ebb2 0a01 	subs.w	sl, r2, r1
 800455e:	4649      	mov	r1, r9
 8004560:	eb63 0b01 	sbc.w	fp, r3, r1
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	f04f 0300 	mov.w	r3, #0
 800456c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004570:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004574:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004578:	ebb2 040a 	subs.w	r4, r2, sl
 800457c:	eb63 050b 	sbc.w	r5, r3, fp
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	f04f 0300 	mov.w	r3, #0
 8004588:	00eb      	lsls	r3, r5, #3
 800458a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800458e:	00e2      	lsls	r2, r4, #3
 8004590:	4614      	mov	r4, r2
 8004592:	461d      	mov	r5, r3
 8004594:	4643      	mov	r3, r8
 8004596:	18e3      	adds	r3, r4, r3
 8004598:	603b      	str	r3, [r7, #0]
 800459a:	464b      	mov	r3, r9
 800459c:	eb45 0303 	adc.w	r3, r5, r3
 80045a0:	607b      	str	r3, [r7, #4]
 80045a2:	f04f 0200 	mov.w	r2, #0
 80045a6:	f04f 0300 	mov.w	r3, #0
 80045aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045ae:	4629      	mov	r1, r5
 80045b0:	028b      	lsls	r3, r1, #10
 80045b2:	4621      	mov	r1, r4
 80045b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045b8:	4621      	mov	r1, r4
 80045ba:	028a      	lsls	r2, r1, #10
 80045bc:	4610      	mov	r0, r2
 80045be:	4619      	mov	r1, r3
 80045c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c2:	2200      	movs	r2, #0
 80045c4:	61bb      	str	r3, [r7, #24]
 80045c6:	61fa      	str	r2, [r7, #28]
 80045c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045cc:	f7fb fe50 	bl	8000270 <__aeabi_uldivmod>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4613      	mov	r3, r2
 80045d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045d8:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <HAL_RCC_GetSysClockFreq+0x200>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	0c1b      	lsrs	r3, r3, #16
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	3301      	adds	r3, #1
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80045e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045f2:	e002      	b.n	80045fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045f4:	4b05      	ldr	r3, [pc, #20]	; (800460c <HAL_RCC_GetSysClockFreq+0x204>)
 80045f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3750      	adds	r7, #80	; 0x50
 8004600:	46bd      	mov	sp, r7
 8004602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004606:	bf00      	nop
 8004608:	40023800 	.word	0x40023800
 800460c:	00f42400 	.word	0x00f42400
 8004610:	007a1200 	.word	0x007a1200

08004614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004618:	4b03      	ldr	r3, [pc, #12]	; (8004628 <HAL_RCC_GetHCLKFreq+0x14>)
 800461a:	681b      	ldr	r3, [r3, #0]
}
 800461c:	4618      	mov	r0, r3
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	20000004 	.word	0x20000004

0800462c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004630:	f7ff fff0 	bl	8004614 <HAL_RCC_GetHCLKFreq>
 8004634:	4602      	mov	r2, r0
 8004636:	4b05      	ldr	r3, [pc, #20]	; (800464c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	0a9b      	lsrs	r3, r3, #10
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	4903      	ldr	r1, [pc, #12]	; (8004650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004642:	5ccb      	ldrb	r3, [r1, r3]
 8004644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004648:	4618      	mov	r0, r3
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40023800 	.word	0x40023800
 8004650:	0800a524 	.word	0x0800a524

08004654 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	d105      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004678:	2b00      	cmp	r3, #0
 800467a:	d035      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800467c:	4b62      	ldr	r3, [pc, #392]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004682:	f7fc ffd7 	bl	8001634 <HAL_GetTick>
 8004686:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004688:	e008      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800468a:	f7fc ffd3 	bl	8001634 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e0b0      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800469c:	4b5b      	ldr	r3, [pc, #364]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f0      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	019a      	lsls	r2, r3, #6
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	071b      	lsls	r3, r3, #28
 80046b4:	4955      	ldr	r1, [pc, #340]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046bc:	4b52      	ldr	r3, [pc, #328]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80046be:	2201      	movs	r2, #1
 80046c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046c2:	f7fc ffb7 	bl	8001634 <HAL_GetTick>
 80046c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046c8:	e008      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046ca:	f7fc ffb3 	bl	8001634 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e090      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046dc:	4b4b      	ldr	r3, [pc, #300]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0f0      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 8083 	beq.w	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046f6:	2300      	movs	r3, #0
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	4b44      	ldr	r3, [pc, #272]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	4a43      	ldr	r2, [pc, #268]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004704:	6413      	str	r3, [r2, #64]	; 0x40
 8004706:	4b41      	ldr	r3, [pc, #260]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004712:	4b3f      	ldr	r3, [pc, #252]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a3e      	ldr	r2, [pc, #248]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800471c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800471e:	f7fc ff89 	bl	8001634 <HAL_GetTick>
 8004722:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004724:	e008      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004726:	f7fc ff85 	bl	8001634 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d901      	bls.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e062      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004738:	4b35      	ldr	r3, [pc, #212]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0f0      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004744:	4b31      	ldr	r3, [pc, #196]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800474c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d02f      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	429a      	cmp	r2, r3
 8004760:	d028      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004762:	4b2a      	ldr	r3, [pc, #168]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800476a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800476c:	4b29      	ldr	r3, [pc, #164]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800476e:	2201      	movs	r2, #1
 8004770:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004772:	4b28      	ldr	r3, [pc, #160]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004778:	4a24      	ldr	r2, [pc, #144]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800477e:	4b23      	ldr	r3, [pc, #140]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b01      	cmp	r3, #1
 8004788:	d114      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800478a:	f7fc ff53 	bl	8001634 <HAL_GetTick>
 800478e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004790:	e00a      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004792:	f7fc ff4f 	bl	8001634 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e02a      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a8:	4b18      	ldr	r3, [pc, #96]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0ee      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047c0:	d10d      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80047c2:	4b12      	ldr	r3, [pc, #72]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80047d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047d6:	490d      	ldr	r1, [pc, #52]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	608b      	str	r3, [r1, #8]
 80047dc:	e005      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 80047de:	4b0b      	ldr	r3, [pc, #44]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	4a0a      	ldr	r2, [pc, #40]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047e8:	6093      	str	r3, [r2, #8]
 80047ea:	4b08      	ldr	r3, [pc, #32]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f6:	4905      	ldr	r1, [pc, #20]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	42470068 	.word	0x42470068
 800480c:	40023800 	.word	0x40023800
 8004810:	40007000 	.word	0x40007000
 8004814:	42470e40 	.word	0x42470e40

08004818 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d13e      	bne.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004836:	4b23      	ldr	r3, [pc, #140]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d12f      	bne.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800484c:	4b1e      	ldr	r3, [pc, #120]	; (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800484e:	617b      	str	r3, [r7, #20]
          break;
 8004850:	e02f      	b.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004852:	4b1c      	ldr	r3, [pc, #112]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800485a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800485e:	d108      	bne.n	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004860:	4b18      	ldr	r3, [pc, #96]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004868:	4a18      	ldr	r2, [pc, #96]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800486a:	fbb2 f3f3 	udiv	r3, r2, r3
 800486e:	613b      	str	r3, [r7, #16]
 8004870:	e007      	b.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004872:	4b14      	ldr	r3, [pc, #80]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800487a:	4a15      	ldr	r2, [pc, #84]	; (80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800487c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004880:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004882:	4b10      	ldr	r3, [pc, #64]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004888:	099b      	lsrs	r3, r3, #6
 800488a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	fb02 f303 	mul.w	r3, r2, r3
 8004894:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004896:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800489c:	0f1b      	lsrs	r3, r3, #28
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a8:	617b      	str	r3, [r7, #20]
          break;
 80048aa:	e002      	b.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	617b      	str	r3, [r7, #20]
          break;
 80048b0:	bf00      	nop
        }
      }
      break;
 80048b2:	bf00      	nop
    }
  }
  return frequency;
 80048b4:	697b      	ldr	r3, [r7, #20]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40023800 	.word	0x40023800
 80048c8:	00bb8000 	.word	0x00bb8000
 80048cc:	007a1200 	.word	0x007a1200
 80048d0:	00f42400 	.word	0x00f42400

080048d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e07b      	b.n	80049de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d108      	bne.n	8004900 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048f6:	d009      	beq.n	800490c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	61da      	str	r2, [r3, #28]
 80048fe:	e005      	b.n	800490c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7fc fb38 	bl	8000f9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004942:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	431a      	orrs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800497c:	431a      	orrs	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004990:	ea42 0103 	orr.w	r1, r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004998:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	0c1b      	lsrs	r3, r3, #16
 80049aa:	f003 0104 	and.w	r1, r3, #4
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	f003 0210 	and.w	r2, r3, #16
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69da      	ldr	r2, [r3, #28]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b082      	sub	sp, #8
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e041      	b.n	8004a7c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d106      	bne.n	8004a12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7fc fb0d 	bl	800102c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2202      	movs	r2, #2
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3304      	adds	r3, #4
 8004a22:	4619      	mov	r1, r3
 8004a24:	4610      	mov	r0, r2
 8004a26:	f000 fa95 	bl	8004f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d001      	beq.n	8004a9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e04e      	b.n	8004b3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a23      	ldr	r2, [pc, #140]	; (8004b48 <HAL_TIM_Base_Start_IT+0xc4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d022      	beq.n	8004b04 <HAL_TIM_Base_Start_IT+0x80>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac6:	d01d      	beq.n	8004b04 <HAL_TIM_Base_Start_IT+0x80>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a1f      	ldr	r2, [pc, #124]	; (8004b4c <HAL_TIM_Base_Start_IT+0xc8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d018      	beq.n	8004b04 <HAL_TIM_Base_Start_IT+0x80>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a1e      	ldr	r2, [pc, #120]	; (8004b50 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d013      	beq.n	8004b04 <HAL_TIM_Base_Start_IT+0x80>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a1c      	ldr	r2, [pc, #112]	; (8004b54 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d00e      	beq.n	8004b04 <HAL_TIM_Base_Start_IT+0x80>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a1b      	ldr	r2, [pc, #108]	; (8004b58 <HAL_TIM_Base_Start_IT+0xd4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d009      	beq.n	8004b04 <HAL_TIM_Base_Start_IT+0x80>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a19      	ldr	r2, [pc, #100]	; (8004b5c <HAL_TIM_Base_Start_IT+0xd8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d004      	beq.n	8004b04 <HAL_TIM_Base_Start_IT+0x80>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a18      	ldr	r2, [pc, #96]	; (8004b60 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d111      	bne.n	8004b28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b06      	cmp	r3, #6
 8004b14:	d010      	beq.n	8004b38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0201 	orr.w	r2, r2, #1
 8004b24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b26:	e007      	b.n	8004b38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0201 	orr.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	40010000 	.word	0x40010000
 8004b4c:	40000400 	.word	0x40000400
 8004b50:	40000800 	.word	0x40000800
 8004b54:	40000c00 	.word	0x40000c00
 8004b58:	40010400 	.word	0x40010400
 8004b5c:	40014000 	.word	0x40014000
 8004b60:	40001800 	.word	0x40001800

08004b64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d122      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d11b      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f06f 0202 	mvn.w	r2, #2
 8004b90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f9b5 	bl	8004f16 <HAL_TIM_IC_CaptureCallback>
 8004bac:	e005      	b.n	8004bba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f9a7 	bl	8004f02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f9b8 	bl	8004f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d122      	bne.n	8004c14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d11b      	bne.n	8004c14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0204 	mvn.w	r2, #4
 8004be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2202      	movs	r2, #2
 8004bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f98b 	bl	8004f16 <HAL_TIM_IC_CaptureCallback>
 8004c00:	e005      	b.n	8004c0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f97d 	bl	8004f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f98e 	bl	8004f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d122      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0308 	and.w	r3, r3, #8
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d11b      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0208 	mvn.w	r2, #8
 8004c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f961 	bl	8004f16 <HAL_TIM_IC_CaptureCallback>
 8004c54:	e005      	b.n	8004c62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f953 	bl	8004f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f964 	bl	8004f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	f003 0310 	and.w	r3, r3, #16
 8004c72:	2b10      	cmp	r3, #16
 8004c74:	d122      	bne.n	8004cbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	2b10      	cmp	r3, #16
 8004c82:	d11b      	bne.n	8004cbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f06f 0210 	mvn.w	r2, #16
 8004c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2208      	movs	r2, #8
 8004c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f937 	bl	8004f16 <HAL_TIM_IC_CaptureCallback>
 8004ca8:	e005      	b.n	8004cb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f929 	bl	8004f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f93a 	bl	8004f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d10e      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d107      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f06f 0201 	mvn.w	r2, #1
 8004ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fb fff0 	bl	8000cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf2:	2b80      	cmp	r3, #128	; 0x80
 8004cf4:	d10e      	bne.n	8004d14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d00:	2b80      	cmp	r3, #128	; 0x80
 8004d02:	d107      	bne.n	8004d14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 fae0 	bl	80052d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1e:	2b40      	cmp	r3, #64	; 0x40
 8004d20:	d10e      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2c:	2b40      	cmp	r3, #64	; 0x40
 8004d2e:	d107      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f8ff 	bl	8004f3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	d10e      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	d107      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0220 	mvn.w	r2, #32
 8004d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 faaa 	bl	80052c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d6c:	bf00      	nop
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_TIM_ConfigClockSource+0x1c>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e0b4      	b.n	8004efa <HAL_TIM_ConfigClockSource+0x186>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004db6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc8:	d03e      	beq.n	8004e48 <HAL_TIM_ConfigClockSource+0xd4>
 8004dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dce:	f200 8087 	bhi.w	8004ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd6:	f000 8086 	beq.w	8004ee6 <HAL_TIM_ConfigClockSource+0x172>
 8004dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dde:	d87f      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8004de0:	2b70      	cmp	r3, #112	; 0x70
 8004de2:	d01a      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0xa6>
 8004de4:	2b70      	cmp	r3, #112	; 0x70
 8004de6:	d87b      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8004de8:	2b60      	cmp	r3, #96	; 0x60
 8004dea:	d050      	beq.n	8004e8e <HAL_TIM_ConfigClockSource+0x11a>
 8004dec:	2b60      	cmp	r3, #96	; 0x60
 8004dee:	d877      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8004df0:	2b50      	cmp	r3, #80	; 0x50
 8004df2:	d03c      	beq.n	8004e6e <HAL_TIM_ConfigClockSource+0xfa>
 8004df4:	2b50      	cmp	r3, #80	; 0x50
 8004df6:	d873      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8004df8:	2b40      	cmp	r3, #64	; 0x40
 8004dfa:	d058      	beq.n	8004eae <HAL_TIM_ConfigClockSource+0x13a>
 8004dfc:	2b40      	cmp	r3, #64	; 0x40
 8004dfe:	d86f      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8004e00:	2b30      	cmp	r3, #48	; 0x30
 8004e02:	d064      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x15a>
 8004e04:	2b30      	cmp	r3, #48	; 0x30
 8004e06:	d86b      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8004e08:	2b20      	cmp	r3, #32
 8004e0a:	d060      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x15a>
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	d867      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d05c      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x15a>
 8004e14:	2b10      	cmp	r3, #16
 8004e16:	d05a      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x15a>
 8004e18:	e062      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6818      	ldr	r0, [r3, #0]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	6899      	ldr	r1, [r3, #8]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f000 f9ad 	bl	8005188 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	609a      	str	r2, [r3, #8]
      break;
 8004e46:	e04f      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	6899      	ldr	r1, [r3, #8]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f000 f996 	bl	8005188 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e6a:	609a      	str	r2, [r3, #8]
      break;
 8004e6c:	e03c      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	6859      	ldr	r1, [r3, #4]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f000 f90a 	bl	8005094 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2150      	movs	r1, #80	; 0x50
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 f963 	bl	8005152 <TIM_ITRx_SetConfig>
      break;
 8004e8c:	e02c      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	6859      	ldr	r1, [r3, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	f000 f929 	bl	80050f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2160      	movs	r1, #96	; 0x60
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 f953 	bl	8005152 <TIM_ITRx_SetConfig>
      break;
 8004eac:	e01c      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6859      	ldr	r1, [r3, #4]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f000 f8ea 	bl	8005094 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2140      	movs	r1, #64	; 0x40
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 f943 	bl	8005152 <TIM_ITRx_SetConfig>
      break;
 8004ecc:	e00c      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4610      	mov	r0, r2
 8004eda:	f000 f93a 	bl	8005152 <TIM_ITRx_SetConfig>
      break;
 8004ede:	e003      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee4:	e000      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ee6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b083      	sub	sp, #12
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
	...

08004f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a40      	ldr	r2, [pc, #256]	; (8005068 <TIM_Base_SetConfig+0x114>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d013      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f72:	d00f      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a3d      	ldr	r2, [pc, #244]	; (800506c <TIM_Base_SetConfig+0x118>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00b      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a3c      	ldr	r2, [pc, #240]	; (8005070 <TIM_Base_SetConfig+0x11c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d007      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a3b      	ldr	r2, [pc, #236]	; (8005074 <TIM_Base_SetConfig+0x120>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d003      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a3a      	ldr	r2, [pc, #232]	; (8005078 <TIM_Base_SetConfig+0x124>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d108      	bne.n	8004fa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a2f      	ldr	r2, [pc, #188]	; (8005068 <TIM_Base_SetConfig+0x114>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d02b      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb4:	d027      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a2c      	ldr	r2, [pc, #176]	; (800506c <TIM_Base_SetConfig+0x118>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d023      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a2b      	ldr	r2, [pc, #172]	; (8005070 <TIM_Base_SetConfig+0x11c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d01f      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a2a      	ldr	r2, [pc, #168]	; (8005074 <TIM_Base_SetConfig+0x120>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d01b      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a29      	ldr	r2, [pc, #164]	; (8005078 <TIM_Base_SetConfig+0x124>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d017      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a28      	ldr	r2, [pc, #160]	; (800507c <TIM_Base_SetConfig+0x128>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d013      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a27      	ldr	r2, [pc, #156]	; (8005080 <TIM_Base_SetConfig+0x12c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00f      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a26      	ldr	r2, [pc, #152]	; (8005084 <TIM_Base_SetConfig+0x130>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d00b      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a25      	ldr	r2, [pc, #148]	; (8005088 <TIM_Base_SetConfig+0x134>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d007      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a24      	ldr	r2, [pc, #144]	; (800508c <TIM_Base_SetConfig+0x138>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d003      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a23      	ldr	r2, [pc, #140]	; (8005090 <TIM_Base_SetConfig+0x13c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d108      	bne.n	8005018 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800500c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4313      	orrs	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a0a      	ldr	r2, [pc, #40]	; (8005068 <TIM_Base_SetConfig+0x114>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d003      	beq.n	800504c <TIM_Base_SetConfig+0xf8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a0c      	ldr	r2, [pc, #48]	; (8005078 <TIM_Base_SetConfig+0x124>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d103      	bne.n	8005054 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	691a      	ldr	r2, [r3, #16]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	615a      	str	r2, [r3, #20]
}
 800505a:	bf00      	nop
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40010000 	.word	0x40010000
 800506c:	40000400 	.word	0x40000400
 8005070:	40000800 	.word	0x40000800
 8005074:	40000c00 	.word	0x40000c00
 8005078:	40010400 	.word	0x40010400
 800507c:	40014000 	.word	0x40014000
 8005080:	40014400 	.word	0x40014400
 8005084:	40014800 	.word	0x40014800
 8005088:	40001800 	.word	0x40001800
 800508c:	40001c00 	.word	0x40001c00
 8005090:	40002000 	.word	0x40002000

08005094 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f023 0201 	bic.w	r2, r3, #1
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f023 030a 	bic.w	r3, r3, #10
 80050d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	621a      	str	r2, [r3, #32]
}
 80050e6:	bf00      	nop
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b087      	sub	sp, #28
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	f023 0210 	bic.w	r2, r3, #16
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800511c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	031b      	lsls	r3, r3, #12
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800512e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	4313      	orrs	r3, r2
 8005138:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	621a      	str	r2, [r3, #32]
}
 8005146:	bf00      	nop
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005152:	b480      	push	{r7}
 8005154:	b085      	sub	sp, #20
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
 800515a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005168:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4313      	orrs	r3, r2
 8005170:	f043 0307 	orr.w	r3, r3, #7
 8005174:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	609a      	str	r2, [r3, #8]
}
 800517c:	bf00      	nop
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	021a      	lsls	r2, r3, #8
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	431a      	orrs	r2, r3
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	609a      	str	r2, [r3, #8]
}
 80051bc:	bf00      	nop
 80051be:	371c      	adds	r7, #28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051dc:	2302      	movs	r3, #2
 80051de:	e05a      	b.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005206:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a21      	ldr	r2, [pc, #132]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d022      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522c:	d01d      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a1d      	ldr	r2, [pc, #116]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d018      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a1b      	ldr	r2, [pc, #108]	; (80052ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d013      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a1a      	ldr	r2, [pc, #104]	; (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d00e      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a18      	ldr	r2, [pc, #96]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d009      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a17      	ldr	r2, [pc, #92]	; (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d004      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a15      	ldr	r2, [pc, #84]	; (80052bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d10c      	bne.n	8005284 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005270:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	4313      	orrs	r3, r2
 800527a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40010000 	.word	0x40010000
 80052a8:	40000400 	.word	0x40000400
 80052ac:	40000800 	.word	0x40000800
 80052b0:	40000c00 	.word	0x40000c00
 80052b4:	40010400 	.word	0x40010400
 80052b8:	40014000 	.word	0x40014000
 80052bc:	40001800 	.word	0x40001800

080052c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052e8:	b084      	sub	sp, #16
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b084      	sub	sp, #16
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	f107 001c 	add.w	r0, r7, #28
 80052f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d122      	bne.n	8005346 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800532a:	2b01      	cmp	r3, #1
 800532c:	d105      	bne.n	800533a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f001 fbee 	bl	8006b1c <USB_CoreReset>
 8005340:	4603      	mov	r3, r0
 8005342:	73fb      	strb	r3, [r7, #15]
 8005344:	e01a      	b.n	800537c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f001 fbe2 	bl	8006b1c <USB_CoreReset>
 8005358:	4603      	mov	r3, r0
 800535a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800535c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005366:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	639a      	str	r2, [r3, #56]	; 0x38
 800536e:	e005      	b.n	800537c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800537c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537e:	2b01      	cmp	r3, #1
 8005380:	d10b      	bne.n	800539a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f043 0206 	orr.w	r2, r3, #6
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f043 0220 	orr.w	r2, r3, #32
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800539a:	7bfb      	ldrb	r3, [r7, #15]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053a6:	b004      	add	sp, #16
 80053a8:	4770      	bx	lr
	...

080053ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	4613      	mov	r3, r2
 80053b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d165      	bne.n	800548c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4a41      	ldr	r2, [pc, #260]	; (80054c8 <USB_SetTurnaroundTime+0x11c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d906      	bls.n	80053d6 <USB_SetTurnaroundTime+0x2a>
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	4a40      	ldr	r2, [pc, #256]	; (80054cc <USB_SetTurnaroundTime+0x120>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d202      	bcs.n	80053d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80053d0:	230f      	movs	r3, #15
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	e062      	b.n	800549c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	4a3c      	ldr	r2, [pc, #240]	; (80054cc <USB_SetTurnaroundTime+0x120>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d306      	bcc.n	80053ec <USB_SetTurnaroundTime+0x40>
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	4a3b      	ldr	r2, [pc, #236]	; (80054d0 <USB_SetTurnaroundTime+0x124>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d202      	bcs.n	80053ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80053e6:	230e      	movs	r3, #14
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	e057      	b.n	800549c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4a38      	ldr	r2, [pc, #224]	; (80054d0 <USB_SetTurnaroundTime+0x124>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d306      	bcc.n	8005402 <USB_SetTurnaroundTime+0x56>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	4a37      	ldr	r2, [pc, #220]	; (80054d4 <USB_SetTurnaroundTime+0x128>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d202      	bcs.n	8005402 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80053fc:	230d      	movs	r3, #13
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	e04c      	b.n	800549c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	4a33      	ldr	r2, [pc, #204]	; (80054d4 <USB_SetTurnaroundTime+0x128>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d306      	bcc.n	8005418 <USB_SetTurnaroundTime+0x6c>
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	4a32      	ldr	r2, [pc, #200]	; (80054d8 <USB_SetTurnaroundTime+0x12c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d802      	bhi.n	8005418 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005412:	230c      	movs	r3, #12
 8005414:	617b      	str	r3, [r7, #20]
 8005416:	e041      	b.n	800549c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4a2f      	ldr	r2, [pc, #188]	; (80054d8 <USB_SetTurnaroundTime+0x12c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d906      	bls.n	800542e <USB_SetTurnaroundTime+0x82>
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	4a2e      	ldr	r2, [pc, #184]	; (80054dc <USB_SetTurnaroundTime+0x130>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d802      	bhi.n	800542e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005428:	230b      	movs	r3, #11
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	e036      	b.n	800549c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	4a2a      	ldr	r2, [pc, #168]	; (80054dc <USB_SetTurnaroundTime+0x130>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d906      	bls.n	8005444 <USB_SetTurnaroundTime+0x98>
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	4a29      	ldr	r2, [pc, #164]	; (80054e0 <USB_SetTurnaroundTime+0x134>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d802      	bhi.n	8005444 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800543e:	230a      	movs	r3, #10
 8005440:	617b      	str	r3, [r7, #20]
 8005442:	e02b      	b.n	800549c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4a26      	ldr	r2, [pc, #152]	; (80054e0 <USB_SetTurnaroundTime+0x134>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d906      	bls.n	800545a <USB_SetTurnaroundTime+0xae>
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	4a25      	ldr	r2, [pc, #148]	; (80054e4 <USB_SetTurnaroundTime+0x138>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d202      	bcs.n	800545a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005454:	2309      	movs	r3, #9
 8005456:	617b      	str	r3, [r7, #20]
 8005458:	e020      	b.n	800549c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	4a21      	ldr	r2, [pc, #132]	; (80054e4 <USB_SetTurnaroundTime+0x138>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d306      	bcc.n	8005470 <USB_SetTurnaroundTime+0xc4>
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	4a20      	ldr	r2, [pc, #128]	; (80054e8 <USB_SetTurnaroundTime+0x13c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d802      	bhi.n	8005470 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800546a:	2308      	movs	r3, #8
 800546c:	617b      	str	r3, [r7, #20]
 800546e:	e015      	b.n	800549c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	4a1d      	ldr	r2, [pc, #116]	; (80054e8 <USB_SetTurnaroundTime+0x13c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d906      	bls.n	8005486 <USB_SetTurnaroundTime+0xda>
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	4a1c      	ldr	r2, [pc, #112]	; (80054ec <USB_SetTurnaroundTime+0x140>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d202      	bcs.n	8005486 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005480:	2307      	movs	r3, #7
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	e00a      	b.n	800549c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005486:	2306      	movs	r3, #6
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	e007      	b.n	800549c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800548c:	79fb      	ldrb	r3, [r7, #7]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d102      	bne.n	8005498 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005492:	2309      	movs	r3, #9
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	e001      	b.n	800549c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005498:	2309      	movs	r3, #9
 800549a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	68da      	ldr	r2, [r3, #12]
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	029b      	lsls	r3, r3, #10
 80054b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80054b4:	431a      	orrs	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	371c      	adds	r7, #28
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	00d8acbf 	.word	0x00d8acbf
 80054cc:	00e4e1c0 	.word	0x00e4e1c0
 80054d0:	00f42400 	.word	0x00f42400
 80054d4:	01067380 	.word	0x01067380
 80054d8:	011a499f 	.word	0x011a499f
 80054dc:	01312cff 	.word	0x01312cff
 80054e0:	014ca43f 	.word	0x014ca43f
 80054e4:	016e3600 	.word	0x016e3600
 80054e8:	01a6ab1f 	.word	0x01a6ab1f
 80054ec:	01e84800 	.word	0x01e84800

080054f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f043 0201 	orr.w	r2, r3, #1
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f023 0201 	bic.w	r2, r3, #1
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	460b      	mov	r3, r1
 800553e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d115      	bne.n	8005582 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005562:	2001      	movs	r0, #1
 8005564:	f7fc f872 	bl	800164c <HAL_Delay>
      ms++;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3301      	adds	r3, #1
 800556c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f001 fa45 	bl	80069fe <USB_GetMode>
 8005574:	4603      	mov	r3, r0
 8005576:	2b01      	cmp	r3, #1
 8005578:	d01e      	beq.n	80055b8 <USB_SetCurrentMode+0x84>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2b31      	cmp	r3, #49	; 0x31
 800557e:	d9f0      	bls.n	8005562 <USB_SetCurrentMode+0x2e>
 8005580:	e01a      	b.n	80055b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005582:	78fb      	ldrb	r3, [r7, #3]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d115      	bne.n	80055b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005594:	2001      	movs	r0, #1
 8005596:	f7fc f859 	bl	800164c <HAL_Delay>
      ms++;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	3301      	adds	r3, #1
 800559e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f001 fa2c 	bl	80069fe <USB_GetMode>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d005      	beq.n	80055b8 <USB_SetCurrentMode+0x84>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2b31      	cmp	r3, #49	; 0x31
 80055b0:	d9f0      	bls.n	8005594 <USB_SetCurrentMode+0x60>
 80055b2:	e001      	b.n	80055b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e005      	b.n	80055c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b32      	cmp	r3, #50	; 0x32
 80055bc:	d101      	bne.n	80055c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055cc:	b084      	sub	sp, #16
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b086      	sub	sp, #24
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80055da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80055e6:	2300      	movs	r3, #0
 80055e8:	613b      	str	r3, [r7, #16]
 80055ea:	e009      	b.n	8005600 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	3340      	adds	r3, #64	; 0x40
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	2200      	movs	r2, #0
 80055f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	3301      	adds	r3, #1
 80055fe:	613b      	str	r3, [r7, #16]
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	2b0e      	cmp	r3, #14
 8005604:	d9f2      	bls.n	80055ec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005608:	2b00      	cmp	r3, #0
 800560a:	d11c      	bne.n	8005646 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800561a:	f043 0302 	orr.w	r3, r3, #2
 800561e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005630:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	639a      	str	r2, [r3, #56]	; 0x38
 8005644:	e00b      	b.n	800565e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005656:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005664:	461a      	mov	r2, r3
 8005666:	2300      	movs	r3, #0
 8005668:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005670:	4619      	mov	r1, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005678:	461a      	mov	r2, r3
 800567a:	680b      	ldr	r3, [r1, #0]
 800567c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800567e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005680:	2b01      	cmp	r3, #1
 8005682:	d10c      	bne.n	800569e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005686:	2b00      	cmp	r3, #0
 8005688:	d104      	bne.n	8005694 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800568a:	2100      	movs	r1, #0
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f965 	bl	800595c <USB_SetDevSpeed>
 8005692:	e008      	b.n	80056a6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005694:	2101      	movs	r1, #1
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f960 	bl	800595c <USB_SetDevSpeed>
 800569c:	e003      	b.n	80056a6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800569e:	2103      	movs	r1, #3
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f95b 	bl	800595c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056a6:	2110      	movs	r1, #16
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f8f3 	bl	8005894 <USB_FlushTxFifo>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f91f 	bl	80058fc <USB_FlushRxFifo>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ce:	461a      	mov	r2, r3
 80056d0:	2300      	movs	r3, #0
 80056d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056da:	461a      	mov	r2, r3
 80056dc:	2300      	movs	r3, #0
 80056de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e6:	461a      	mov	r2, r3
 80056e8:	2300      	movs	r3, #0
 80056ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056ec:	2300      	movs	r3, #0
 80056ee:	613b      	str	r3, [r7, #16]
 80056f0:	e043      	b.n	800577a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005704:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005708:	d118      	bne.n	800573c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10a      	bne.n	8005726 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571c:	461a      	mov	r2, r3
 800571e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005722:	6013      	str	r3, [r2, #0]
 8005724:	e013      	b.n	800574e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005732:	461a      	mov	r2, r3
 8005734:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	e008      	b.n	800574e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005748:	461a      	mov	r2, r3
 800574a:	2300      	movs	r3, #0
 800574c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575a:	461a      	mov	r2, r3
 800575c:	2300      	movs	r3, #0
 800575e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576c:	461a      	mov	r2, r3
 800576e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005772:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	3301      	adds	r3, #1
 8005778:	613b      	str	r3, [r7, #16]
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	429a      	cmp	r2, r3
 8005780:	d3b7      	bcc.n	80056f2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005782:	2300      	movs	r3, #0
 8005784:	613b      	str	r3, [r7, #16]
 8005786:	e043      	b.n	8005810 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800579a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800579e:	d118      	bne.n	80057d2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10a      	bne.n	80057bc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b2:	461a      	mov	r2, r3
 80057b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057b8:	6013      	str	r3, [r2, #0]
 80057ba:	e013      	b.n	80057e4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c8:	461a      	mov	r2, r3
 80057ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057ce:	6013      	str	r3, [r2, #0]
 80057d0:	e008      	b.n	80057e4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057de:	461a      	mov	r2, r3
 80057e0:	2300      	movs	r3, #0
 80057e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f0:	461a      	mov	r2, r3
 80057f2:	2300      	movs	r3, #0
 80057f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005802:	461a      	mov	r2, r3
 8005804:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005808:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	3301      	adds	r3, #1
 800580e:	613b      	str	r3, [r7, #16]
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	429a      	cmp	r2, r3
 8005816:	d3b7      	bcc.n	8005788 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005826:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800582a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005838:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800583a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583c:	2b00      	cmp	r3, #0
 800583e:	d105      	bne.n	800584c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	f043 0210 	orr.w	r2, r3, #16
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	699a      	ldr	r2, [r3, #24]
 8005850:	4b0f      	ldr	r3, [pc, #60]	; (8005890 <USB_DevInit+0x2c4>)
 8005852:	4313      	orrs	r3, r2
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800585a:	2b00      	cmp	r3, #0
 800585c:	d005      	beq.n	800586a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	f043 0208 	orr.w	r2, r3, #8
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800586a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800586c:	2b01      	cmp	r3, #1
 800586e:	d107      	bne.n	8005880 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005878:	f043 0304 	orr.w	r3, r3, #4
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005880:	7dfb      	ldrb	r3, [r7, #23]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800588c:	b004      	add	sp, #16
 800588e:	4770      	bx	lr
 8005890:	803c3800 	.word	0x803c3800

08005894 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800589e:	2300      	movs	r3, #0
 80058a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3301      	adds	r3, #1
 80058a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4a13      	ldr	r2, [pc, #76]	; (80058f8 <USB_FlushTxFifo+0x64>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d901      	bls.n	80058b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e01b      	b.n	80058ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	daf2      	bge.n	80058a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	019b      	lsls	r3, r3, #6
 80058c4:	f043 0220 	orr.w	r2, r3, #32
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3301      	adds	r3, #1
 80058d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4a08      	ldr	r2, [pc, #32]	; (80058f8 <USB_FlushTxFifo+0x64>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d901      	bls.n	80058de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e006      	b.n	80058ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b20      	cmp	r3, #32
 80058e8:	d0f0      	beq.n	80058cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	00030d40 	.word	0x00030d40

080058fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005904:	2300      	movs	r3, #0
 8005906:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	3301      	adds	r3, #1
 800590c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4a11      	ldr	r2, [pc, #68]	; (8005958 <USB_FlushRxFifo+0x5c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d901      	bls.n	800591a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e018      	b.n	800594c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	daf2      	bge.n	8005908 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2210      	movs	r2, #16
 800592a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	3301      	adds	r3, #1
 8005930:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4a08      	ldr	r2, [pc, #32]	; (8005958 <USB_FlushRxFifo+0x5c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d901      	bls.n	800593e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e006      	b.n	800594c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 0310 	and.w	r3, r3, #16
 8005946:	2b10      	cmp	r3, #16
 8005948:	d0f0      	beq.n	800592c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	00030d40 	.word	0x00030d40

0800595c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	78fb      	ldrb	r3, [r7, #3]
 8005976:	68f9      	ldr	r1, [r7, #12]
 8005978:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800597c:	4313      	orrs	r3, r2
 800597e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800598e:	b480      	push	{r7}
 8005990:	b087      	sub	sp, #28
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 0306 	and.w	r3, r3, #6
 80059a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d102      	bne.n	80059b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80059ae:	2300      	movs	r3, #0
 80059b0:	75fb      	strb	r3, [r7, #23]
 80059b2:	e00a      	b.n	80059ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d002      	beq.n	80059c0 <USB_GetDevSpeed+0x32>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2b06      	cmp	r3, #6
 80059be:	d102      	bne.n	80059c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80059c0:	2302      	movs	r3, #2
 80059c2:	75fb      	strb	r3, [r7, #23]
 80059c4:	e001      	b.n	80059ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80059c6:	230f      	movs	r3, #15
 80059c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80059ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	371c      	adds	r7, #28
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	785b      	ldrb	r3, [r3, #1]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d13a      	bne.n	8005a6a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fa:	69da      	ldr	r2, [r3, #28]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	f003 030f 	and.w	r3, r3, #15
 8005a04:	2101      	movs	r1, #1
 8005a06:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	68f9      	ldr	r1, [r7, #12]
 8005a0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a12:	4313      	orrs	r3, r2
 8005a14:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d155      	bne.n	8005ad8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	791b      	ldrb	r3, [r3, #4]
 8005a46:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a48:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	059b      	lsls	r3, r3, #22
 8005a4e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a50:	4313      	orrs	r3, r2
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	0151      	lsls	r1, r2, #5
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	440a      	add	r2, r1
 8005a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	e036      	b.n	8005ad8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a70:	69da      	ldr	r2, [r3, #28]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	f003 030f 	and.w	r3, r3, #15
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a80:	041b      	lsls	r3, r3, #16
 8005a82:	68f9      	ldr	r1, [r7, #12]
 8005a84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d11a      	bne.n	8005ad8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	791b      	ldrb	r3, [r3, #4]
 8005abc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005abe:	430b      	orrs	r3, r1
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
	...

08005ae8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	785b      	ldrb	r3, [r3, #1]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d161      	bne.n	8005bc8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b1a:	d11f      	bne.n	8005b5c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	0151      	lsls	r1, r2, #5
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	440a      	add	r2, r1
 8005b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b3a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	0151      	lsls	r1, r2, #5
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	440a      	add	r2, r1
 8005b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	f003 030f 	and.w	r3, r3, #15
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	43db      	mvns	r3, r3
 8005b76:	68f9      	ldr	r1, [r7, #12]
 8005b78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b86:	69da      	ldr	r2, [r3, #28]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	f003 030f 	and.w	r3, r3, #15
 8005b90:	2101      	movs	r1, #1
 8005b92:	fa01 f303 	lsl.w	r3, r1, r3
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	43db      	mvns	r3, r3
 8005b9a:	68f9      	ldr	r1, [r7, #12]
 8005b9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	0159      	lsls	r1, r3, #5
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	440b      	add	r3, r1
 8005bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	4b35      	ldr	r3, [pc, #212]	; (8005c98 <USB_DeactivateEndpoint+0x1b0>)
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	600b      	str	r3, [r1, #0]
 8005bc6:	e060      	b.n	8005c8a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bde:	d11f      	bne.n	8005c20 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	0151      	lsls	r1, r2, #5
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	440a      	add	r2, r1
 8005bf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bfa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bfe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	0151      	lsls	r1, r2, #5
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	440a      	add	r2, r1
 8005c16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	2101      	movs	r1, #1
 8005c32:	fa01 f303 	lsl.w	r3, r1, r3
 8005c36:	041b      	lsls	r3, r3, #16
 8005c38:	43db      	mvns	r3, r3
 8005c3a:	68f9      	ldr	r1, [r7, #12]
 8005c3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c40:	4013      	ands	r3, r2
 8005c42:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4a:	69da      	ldr	r2, [r3, #28]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	f003 030f 	and.w	r3, r3, #15
 8005c54:	2101      	movs	r1, #1
 8005c56:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5a:	041b      	lsls	r3, r3, #16
 8005c5c:	43db      	mvns	r3, r3
 8005c5e:	68f9      	ldr	r1, [r7, #12]
 8005c60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c64:	4013      	ands	r3, r2
 8005c66:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	0159      	lsls	r1, r3, #5
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	440b      	add	r3, r1
 8005c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c82:	4619      	mov	r1, r3
 8005c84:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <USB_DeactivateEndpoint+0x1b4>)
 8005c86:	4013      	ands	r3, r2
 8005c88:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	ec337800 	.word	0xec337800
 8005c9c:	eff37800 	.word	0xeff37800

08005ca0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08a      	sub	sp, #40	; 0x28
 8005ca4:	af02      	add	r7, sp, #8
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	4613      	mov	r3, r2
 8005cac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	785b      	ldrb	r3, [r3, #1]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	f040 815c 	bne.w	8005f7a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d132      	bne.n	8005d30 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	0151      	lsls	r1, r2, #5
 8005cdc:	69fa      	ldr	r2, [r7, #28]
 8005cde:	440a      	add	r2, r1
 8005ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ce4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ce8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	0151      	lsls	r1, r2, #5
 8005d00:	69fa      	ldr	r2, [r7, #28]
 8005d02:	440a      	add	r2, r1
 8005d04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	0151      	lsls	r1, r2, #5
 8005d20:	69fa      	ldr	r2, [r7, #28]
 8005d22:	440a      	add	r2, r1
 8005d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d28:	0cdb      	lsrs	r3, r3, #19
 8005d2a:	04db      	lsls	r3, r3, #19
 8005d2c:	6113      	str	r3, [r2, #16]
 8005d2e:	e074      	b.n	8005e1a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	69ba      	ldr	r2, [r7, #24]
 8005d40:	0151      	lsls	r1, r2, #5
 8005d42:	69fa      	ldr	r2, [r7, #28]
 8005d44:	440a      	add	r2, r1
 8005d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d4a:	0cdb      	lsrs	r3, r3, #19
 8005d4c:	04db      	lsls	r3, r3, #19
 8005d4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	69ba      	ldr	r2, [r7, #24]
 8005d60:	0151      	lsls	r1, r2, #5
 8005d62:	69fa      	ldr	r2, [r7, #28]
 8005d64:	440a      	add	r2, r1
 8005d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d80:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	6999      	ldr	r1, [r3, #24]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	440b      	add	r3, r1
 8005d8c:	1e59      	subs	r1, r3, #1
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d96:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d98:	4b9d      	ldr	r3, [pc, #628]	; (8006010 <USB_EPStartXfer+0x370>)
 8005d9a:	400b      	ands	r3, r1
 8005d9c:	69b9      	ldr	r1, [r7, #24]
 8005d9e:	0148      	lsls	r0, r1, #5
 8005da0:	69f9      	ldr	r1, [r7, #28]
 8005da2:	4401      	add	r1, r0
 8005da4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005da8:	4313      	orrs	r3, r2
 8005daa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db8:	691a      	ldr	r2, [r3, #16]
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dc2:	69b9      	ldr	r1, [r7, #24]
 8005dc4:	0148      	lsls	r0, r1, #5
 8005dc6:	69f9      	ldr	r1, [r7, #28]
 8005dc8:	4401      	add	r1, r0
 8005dca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	791b      	ldrb	r3, [r3, #4]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d11f      	bne.n	8005e1a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	0151      	lsls	r1, r2, #5
 8005dec:	69fa      	ldr	r2, [r7, #28]
 8005dee:	440a      	add	r2, r1
 8005df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005df8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	0151      	lsls	r1, r2, #5
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	440a      	add	r2, r1
 8005e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e18:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005e1a:	79fb      	ldrb	r3, [r7, #7]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d14b      	bne.n	8005eb8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d009      	beq.n	8005e3c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e34:	461a      	mov	r2, r3
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	791b      	ldrb	r3, [r3, #4]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d128      	bne.n	8005e96 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d110      	bne.n	8005e76 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	0151      	lsls	r1, r2, #5
 8005e66:	69fa      	ldr	r2, [r7, #28]
 8005e68:	440a      	add	r2, r1
 8005e6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	e00f      	b.n	8005e96 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	0151      	lsls	r1, r2, #5
 8005e88:	69fa      	ldr	r2, [r7, #28]
 8005e8a:	440a      	add	r2, r1
 8005e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e94:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	0151      	lsls	r1, r2, #5
 8005ea8:	69fa      	ldr	r2, [r7, #28]
 8005eaa:	440a      	add	r2, r1
 8005eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	e133      	b.n	8006120 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	0151      	lsls	r1, r2, #5
 8005eca:	69fa      	ldr	r2, [r7, #28]
 8005ecc:	440a      	add	r2, r1
 8005ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ed6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	791b      	ldrb	r3, [r3, #4]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d015      	beq.n	8005f0c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 811b 	beq.w	8006120 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	f003 030f 	and.w	r3, r3, #15
 8005efa:	2101      	movs	r1, #1
 8005efc:	fa01 f303 	lsl.w	r3, r1, r3
 8005f00:	69f9      	ldr	r1, [r7, #28]
 8005f02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f06:	4313      	orrs	r3, r2
 8005f08:	634b      	str	r3, [r1, #52]	; 0x34
 8005f0a:	e109      	b.n	8006120 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d110      	bne.n	8005f3e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	0151      	lsls	r1, r2, #5
 8005f2e:	69fa      	ldr	r2, [r7, #28]
 8005f30:	440a      	add	r2, r1
 8005f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f3a:	6013      	str	r3, [r2, #0]
 8005f3c:	e00f      	b.n	8005f5e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	0151      	lsls	r1, r2, #5
 8005f50:	69fa      	ldr	r2, [r7, #28]
 8005f52:	440a      	add	r2, r1
 8005f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f5c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	6919      	ldr	r1, [r3, #16]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	781a      	ldrb	r2, [r3, #0]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	b298      	uxth	r0, r3
 8005f6c:	79fb      	ldrb	r3, [r7, #7]
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	4603      	mov	r3, r0
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f000 fade 	bl	8006534 <USB_WritePacket>
 8005f78:	e0d2      	b.n	8006120 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	0151      	lsls	r1, r2, #5
 8005f8c:	69fa      	ldr	r2, [r7, #28]
 8005f8e:	440a      	add	r2, r1
 8005f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f94:	0cdb      	lsrs	r3, r3, #19
 8005f96:	04db      	lsls	r3, r3, #19
 8005f98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	0151      	lsls	r1, r2, #5
 8005fac:	69fa      	ldr	r2, [r7, #28]
 8005fae:	440a      	add	r2, r1
 8005fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fbc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d126      	bne.n	8006014 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd2:	691a      	ldr	r2, [r3, #16]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fdc:	69b9      	ldr	r1, [r7, #24]
 8005fde:	0148      	lsls	r0, r1, #5
 8005fe0:	69f9      	ldr	r1, [r7, #28]
 8005fe2:	4401      	add	r1, r0
 8005fe4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	0151      	lsls	r1, r2, #5
 8005ffe:	69fa      	ldr	r2, [r7, #28]
 8006000:	440a      	add	r2, r1
 8006002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006006:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800600a:	6113      	str	r3, [r2, #16]
 800600c:	e03a      	b.n	8006084 <USB_EPStartXfer+0x3e4>
 800600e:	bf00      	nop
 8006010:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	699a      	ldr	r2, [r3, #24]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	4413      	add	r3, r2
 800601e:	1e5a      	subs	r2, r3, #1
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	fbb2 f3f3 	udiv	r3, r2, r3
 8006028:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	8afa      	ldrh	r2, [r7, #22]
 8006030:	fb03 f202 	mul.w	r2, r3, r2
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006044:	691a      	ldr	r2, [r3, #16]
 8006046:	8afb      	ldrh	r3, [r7, #22]
 8006048:	04d9      	lsls	r1, r3, #19
 800604a:	4b38      	ldr	r3, [pc, #224]	; (800612c <USB_EPStartXfer+0x48c>)
 800604c:	400b      	ands	r3, r1
 800604e:	69b9      	ldr	r1, [r7, #24]
 8006050:	0148      	lsls	r0, r1, #5
 8006052:	69f9      	ldr	r1, [r7, #28]
 8006054:	4401      	add	r1, r0
 8006056:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800605a:	4313      	orrs	r3, r2
 800605c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	4413      	add	r3, r2
 8006066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606a:	691a      	ldr	r2, [r3, #16]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006074:	69b9      	ldr	r1, [r7, #24]
 8006076:	0148      	lsls	r0, r1, #5
 8006078:	69f9      	ldr	r1, [r7, #28]
 800607a:	4401      	add	r1, r0
 800607c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006080:	4313      	orrs	r3, r2
 8006082:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006084:	79fb      	ldrb	r3, [r7, #7]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d10d      	bne.n	80060a6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d009      	beq.n	80060a6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	6919      	ldr	r1, [r3, #16]
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a2:	460a      	mov	r2, r1
 80060a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	791b      	ldrb	r3, [r3, #4]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d128      	bne.n	8006100 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d110      	bne.n	80060e0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	0151      	lsls	r1, r2, #5
 80060d0:	69fa      	ldr	r2, [r7, #28]
 80060d2:	440a      	add	r2, r1
 80060d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	e00f      	b.n	8006100 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	0151      	lsls	r1, r2, #5
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	440a      	add	r2, r1
 80060f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	0151      	lsls	r1, r2, #5
 8006112:	69fa      	ldr	r2, [r7, #28]
 8006114:	440a      	add	r2, r1
 8006116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800611a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800611e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3720      	adds	r7, #32
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	1ff80000 	.word	0x1ff80000

08006130 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	4613      	mov	r3, r2
 800613c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	785b      	ldrb	r3, [r3, #1]
 800614c:	2b01      	cmp	r3, #1
 800614e:	f040 80ce 	bne.w	80062ee <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d132      	bne.n	80061c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	0151      	lsls	r1, r2, #5
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	440a      	add	r2, r1
 8006170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006174:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006178:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800617c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	0151      	lsls	r1, r2, #5
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	440a      	add	r2, r1
 8006194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006198:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800619c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	0151      	lsls	r1, r2, #5
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	440a      	add	r2, r1
 80061b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b8:	0cdb      	lsrs	r3, r3, #19
 80061ba:	04db      	lsls	r3, r3, #19
 80061bc:	6113      	str	r3, [r2, #16]
 80061be:	e04e      	b.n	800625e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	0151      	lsls	r1, r2, #5
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	440a      	add	r2, r1
 80061d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061da:	0cdb      	lsrs	r3, r3, #19
 80061dc:	04db      	lsls	r3, r3, #19
 80061de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	0151      	lsls	r1, r2, #5
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	440a      	add	r2, r1
 80061f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006202:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	699a      	ldr	r2, [r3, #24]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	429a      	cmp	r2, r3
 800620e:	d903      	bls.n	8006218 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	0151      	lsls	r1, r2, #5
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	440a      	add	r2, r1
 800622e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006232:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006236:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006244:	691a      	ldr	r2, [r3, #16]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800624e:	6939      	ldr	r1, [r7, #16]
 8006250:	0148      	lsls	r0, r1, #5
 8006252:	6979      	ldr	r1, [r7, #20]
 8006254:	4401      	add	r1, r0
 8006256:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800625a:	4313      	orrs	r3, r2
 800625c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800625e:	79fb      	ldrb	r3, [r7, #7]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d11e      	bne.n	80062a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d009      	beq.n	8006280 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006278:	461a      	mov	r2, r3
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	0151      	lsls	r1, r2, #5
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	440a      	add	r2, r1
 8006296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800629a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	e097      	b.n	80063d2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	0151      	lsls	r1, r2, #5
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	440a      	add	r2, r1
 80062b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 8083 	beq.w	80063d2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	f003 030f 	and.w	r3, r3, #15
 80062dc:	2101      	movs	r1, #1
 80062de:	fa01 f303 	lsl.w	r3, r1, r3
 80062e2:	6979      	ldr	r1, [r7, #20]
 80062e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062e8:	4313      	orrs	r3, r2
 80062ea:	634b      	str	r3, [r1, #52]	; 0x34
 80062ec:	e071      	b.n	80063d2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	0151      	lsls	r1, r2, #5
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	440a      	add	r2, r1
 8006304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006308:	0cdb      	lsrs	r3, r3, #19
 800630a:	04db      	lsls	r3, r3, #19
 800630c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	4413      	add	r3, r2
 8006316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	0151      	lsls	r1, r2, #5
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	440a      	add	r2, r1
 8006324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006328:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800632c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006330:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	68da      	ldr	r2, [r3, #12]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	0151      	lsls	r1, r2, #5
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	440a      	add	r2, r1
 8006360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006364:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006368:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	4413      	add	r3, r2
 8006372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006376:	691a      	ldr	r2, [r3, #16]
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006380:	6939      	ldr	r1, [r7, #16]
 8006382:	0148      	lsls	r0, r1, #5
 8006384:	6979      	ldr	r1, [r7, #20]
 8006386:	4401      	add	r1, r0
 8006388:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800638c:	4313      	orrs	r3, r2
 800638e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006390:	79fb      	ldrb	r3, [r7, #7]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d10d      	bne.n	80063b2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d009      	beq.n	80063b2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	6919      	ldr	r1, [r3, #16]
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ae:	460a      	mov	r2, r1
 80063b0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	0151      	lsls	r1, r2, #5
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	440a      	add	r2, r1
 80063c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	371c      	adds	r7, #28
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	785b      	ldrb	r3, [r3, #1]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d14a      	bne.n	8006494 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006416:	f040 8086 	bne.w	8006526 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	4413      	add	r3, r2
 8006424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	7812      	ldrb	r2, [r2, #0]
 800642e:	0151      	lsls	r1, r2, #5
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	440a      	add	r2, r1
 8006434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006438:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800643c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	7812      	ldrb	r2, [r2, #0]
 8006452:	0151      	lsls	r1, r2, #5
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	440a      	add	r2, r1
 8006458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800645c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006460:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3301      	adds	r3, #1
 8006466:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f242 7210 	movw	r2, #10000	; 0x2710
 800646e:	4293      	cmp	r3, r2
 8006470:	d902      	bls.n	8006478 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	75fb      	strb	r3, [r7, #23]
          break;
 8006476:	e056      	b.n	8006526 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	4413      	add	r3, r2
 8006482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800648c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006490:	d0e7      	beq.n	8006462 <USB_EPStopXfer+0x82>
 8006492:	e048      	b.n	8006526 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	4413      	add	r3, r2
 800649e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064ac:	d13b      	bne.n	8006526 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	7812      	ldrb	r2, [r2, #0]
 80064c2:	0151      	lsls	r1, r2, #5
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	440a      	add	r2, r1
 80064c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	7812      	ldrb	r2, [r2, #0]
 80064e6:	0151      	lsls	r1, r2, #5
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	440a      	add	r2, r1
 80064ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3301      	adds	r3, #1
 80064fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8006502:	4293      	cmp	r3, r2
 8006504:	d902      	bls.n	800650c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	75fb      	strb	r3, [r7, #23]
          break;
 800650a:	e00c      	b.n	8006526 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	4413      	add	r3, r2
 8006516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006520:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006524:	d0e7      	beq.n	80064f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006526:	7dfb      	ldrb	r3, [r7, #23]
}
 8006528:	4618      	mov	r0, r3
 800652a:	371c      	adds	r7, #28
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006534:	b480      	push	{r7}
 8006536:	b089      	sub	sp, #36	; 0x24
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	4611      	mov	r1, r2
 8006540:	461a      	mov	r2, r3
 8006542:	460b      	mov	r3, r1
 8006544:	71fb      	strb	r3, [r7, #7]
 8006546:	4613      	mov	r3, r2
 8006548:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006552:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006556:	2b00      	cmp	r3, #0
 8006558:	d123      	bne.n	80065a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800655a:	88bb      	ldrh	r3, [r7, #4]
 800655c:	3303      	adds	r3, #3
 800655e:	089b      	lsrs	r3, r3, #2
 8006560:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006562:	2300      	movs	r3, #0
 8006564:	61bb      	str	r3, [r7, #24]
 8006566:	e018      	b.n	800659a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006568:	79fb      	ldrb	r3, [r7, #7]
 800656a:	031a      	lsls	r2, r3, #12
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	4413      	add	r3, r2
 8006570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006574:	461a      	mov	r2, r3
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	3301      	adds	r3, #1
 8006580:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	3301      	adds	r3, #1
 8006586:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	3301      	adds	r3, #1
 800658c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	3301      	adds	r3, #1
 8006592:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	3301      	adds	r3, #1
 8006598:	61bb      	str	r3, [r7, #24]
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d3e2      	bcc.n	8006568 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3724      	adds	r7, #36	; 0x24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b08b      	sub	sp, #44	; 0x2c
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	4613      	mov	r3, r2
 80065bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80065c6:	88fb      	ldrh	r3, [r7, #6]
 80065c8:	089b      	lsrs	r3, r3, #2
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80065ce:	88fb      	ldrh	r3, [r7, #6]
 80065d0:	f003 0303 	and.w	r3, r3, #3
 80065d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80065d6:	2300      	movs	r3, #0
 80065d8:	623b      	str	r3, [r7, #32]
 80065da:	e014      	b.n	8006606 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	3301      	adds	r3, #1
 80065ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	3301      	adds	r3, #1
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	3301      	adds	r3, #1
 80065f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	3301      	adds	r3, #1
 80065fe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	3301      	adds	r3, #1
 8006604:	623b      	str	r3, [r7, #32]
 8006606:	6a3a      	ldr	r2, [r7, #32]
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	429a      	cmp	r2, r3
 800660c:	d3e6      	bcc.n	80065dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800660e:	8bfb      	ldrh	r3, [r7, #30]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d01e      	beq.n	8006652 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006614:	2300      	movs	r3, #0
 8006616:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800661e:	461a      	mov	r2, r3
 8006620:	f107 0310 	add.w	r3, r7, #16
 8006624:	6812      	ldr	r2, [r2, #0]
 8006626:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	b2db      	uxtb	r3, r3
 800662e:	00db      	lsls	r3, r3, #3
 8006630:	fa22 f303 	lsr.w	r3, r2, r3
 8006634:	b2da      	uxtb	r2, r3
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	701a      	strb	r2, [r3, #0]
      i++;
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	3301      	adds	r3, #1
 800663e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	3301      	adds	r3, #1
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006646:	8bfb      	ldrh	r3, [r7, #30]
 8006648:	3b01      	subs	r3, #1
 800664a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800664c:	8bfb      	ldrh	r3, [r7, #30]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1ea      	bne.n	8006628 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006654:	4618      	mov	r0, r3
 8006656:	372c      	adds	r7, #44	; 0x2c
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	785b      	ldrb	r3, [r3, #1]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d12c      	bne.n	80066d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	db12      	blt.n	80066b4 <USB_EPSetStall+0x54>
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00f      	beq.n	80066b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4413      	add	r3, r2
 800669c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	0151      	lsls	r1, r2, #5
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	440a      	add	r2, r1
 80066aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	0151      	lsls	r1, r2, #5
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	440a      	add	r2, r1
 80066ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	e02b      	b.n	800672e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	db12      	blt.n	800670e <USB_EPSetStall+0xae>
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00f      	beq.n	800670e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	0151      	lsls	r1, r2, #5
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	440a      	add	r2, r1
 8006704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006708:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800670c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	4413      	add	r3, r2
 8006716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	0151      	lsls	r1, r2, #5
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	440a      	add	r2, r1
 8006724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006728:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800672c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	785b      	ldrb	r3, [r3, #1]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d128      	bne.n	80067aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	0151      	lsls	r1, r2, #5
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	440a      	add	r2, r1
 800676e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006772:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006776:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	791b      	ldrb	r3, [r3, #4]
 800677c:	2b03      	cmp	r3, #3
 800677e:	d003      	beq.n	8006788 <USB_EPClearStall+0x4c>
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	791b      	ldrb	r3, [r3, #4]
 8006784:	2b02      	cmp	r3, #2
 8006786:	d138      	bne.n	80067fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	0151      	lsls	r1, r2, #5
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	440a      	add	r2, r1
 800679e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067a6:	6013      	str	r3, [r2, #0]
 80067a8:	e027      	b.n	80067fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	0151      	lsls	r1, r2, #5
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	440a      	add	r2, r1
 80067c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	791b      	ldrb	r3, [r3, #4]
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d003      	beq.n	80067da <USB_EPClearStall+0x9e>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	791b      	ldrb	r3, [r3, #4]
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d10f      	bne.n	80067fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	0151      	lsls	r1, r2, #5
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	440a      	add	r2, r1
 80067f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006826:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800682a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	78fb      	ldrb	r3, [r7, #3]
 8006836:	011b      	lsls	r3, r3, #4
 8006838:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800683c:	68f9      	ldr	r1, [r7, #12]
 800683e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006842:	4313      	orrs	r3, r2
 8006844:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800686e:	f023 0303 	bic.w	r3, r3, #3
 8006872:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006882:	f023 0302 	bic.w	r3, r3, #2
 8006886:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006896:	b480      	push	{r7}
 8006898:	b085      	sub	sp, #20
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068b0:	f023 0303 	bic.w	r3, r3, #3
 80068b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068c4:	f043 0302 	orr.w	r3, r3, #2
 80068c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	4013      	ands	r3, r2
 80068ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068f0:	68fb      	ldr	r3, [r7, #12]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068fe:	b480      	push	{r7}
 8006900:	b085      	sub	sp, #20
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	4013      	ands	r3, r2
 8006920:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	0c1b      	lsrs	r3, r3, #16
}
 8006926:	4618      	mov	r0, r3
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr

08006932 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006932:	b480      	push	{r7}
 8006934:	b085      	sub	sp, #20
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800694e:	69db      	ldr	r3, [r3, #28]
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	4013      	ands	r3, r2
 8006954:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	b29b      	uxth	r3, r3
}
 800695a:	4618      	mov	r0, r3
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006966:	b480      	push	{r7}
 8006968:	b085      	sub	sp, #20
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	460b      	mov	r3, r1
 8006970:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006976:	78fb      	ldrb	r3, [r7, #3]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	4413      	add	r3, r2
 800697e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	4013      	ands	r3, r2
 8006992:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006994:	68bb      	ldr	r3, [r7, #8]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b087      	sub	sp, #28
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	460b      	mov	r3, r1
 80069ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80069c6:	78fb      	ldrb	r3, [r7, #3]
 80069c8:	f003 030f 	and.w	r3, r3, #15
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	fa22 f303 	lsr.w	r3, r2, r3
 80069d2:	01db      	lsls	r3, r3, #7
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	4313      	orrs	r3, r2
 80069da:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80069dc:	78fb      	ldrb	r3, [r7, #3]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	4013      	ands	r3, r2
 80069ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069f0:	68bb      	ldr	r3, [r7, #8]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	371c      	adds	r7, #28
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	f003 0301 	and.w	r3, r3, #1
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b085      	sub	sp, #20
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a34:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006a38:	f023 0307 	bic.w	r3, r3, #7
 8006a3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b087      	sub	sp, #28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	607a      	str	r2, [r7, #4]
 8006a6c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	333c      	adds	r3, #60	; 0x3c
 8006a76:	3304      	adds	r3, #4
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	4a26      	ldr	r2, [pc, #152]	; (8006b18 <USB_EP0_OutStart+0xb8>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d90a      	bls.n	8006a9a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a94:	d101      	bne.n	8006a9a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	e037      	b.n	8006b0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ab4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ab8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ac8:	f043 0318 	orr.w	r3, r3, #24
 8006acc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006adc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006ae0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006ae2:	7afb      	ldrb	r3, [r7, #11]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d10f      	bne.n	8006b08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aee:	461a      	mov	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b02:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006b06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	371c      	adds	r7, #28
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	4f54300a 	.word	0x4f54300a

08006b1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	4a13      	ldr	r2, [pc, #76]	; (8006b80 <USB_CoreReset+0x64>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d901      	bls.n	8006b3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e01b      	b.n	8006b72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	daf2      	bge.n	8006b28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	f043 0201 	orr.w	r2, r3, #1
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	3301      	adds	r3, #1
 8006b56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	4a09      	ldr	r2, [pc, #36]	; (8006b80 <USB_CoreReset+0x64>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d901      	bls.n	8006b64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e006      	b.n	8006b72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d0f0      	beq.n	8006b52 <USB_CoreReset+0x36>

  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	00030d40 	.word	0x00030d40

08006b84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b90:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006b94:	f002 fca2 	bl	80094dc <USBD_static_malloc>
 8006b98:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d109      	bne.n	8006bb4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	32b0      	adds	r2, #176	; 0xb0
 8006baa:	2100      	movs	r1, #0
 8006bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	e0d4      	b.n	8006d5e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006bb4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006bb8:	2100      	movs	r1, #0
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f002 fdd7 	bl	800976e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	32b0      	adds	r2, #176	; 0xb0
 8006bca:	68f9      	ldr	r1, [r7, #12]
 8006bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	32b0      	adds	r2, #176	; 0xb0
 8006bda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	7c1b      	ldrb	r3, [r3, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d138      	bne.n	8006c5e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006bec:	4b5e      	ldr	r3, [pc, #376]	; (8006d68 <USBD_CDC_Init+0x1e4>)
 8006bee:	7819      	ldrb	r1, [r3, #0]
 8006bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bf4:	2202      	movs	r2, #2
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f002 fb4d 	bl	8009296 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006bfc:	4b5a      	ldr	r3, [pc, #360]	; (8006d68 <USBD_CDC_Init+0x1e4>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	f003 020f 	and.w	r2, r3, #15
 8006c04:	6879      	ldr	r1, [r7, #4]
 8006c06:	4613      	mov	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	440b      	add	r3, r1
 8006c10:	3324      	adds	r3, #36	; 0x24
 8006c12:	2201      	movs	r2, #1
 8006c14:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c16:	4b55      	ldr	r3, [pc, #340]	; (8006d6c <USBD_CDC_Init+0x1e8>)
 8006c18:	7819      	ldrb	r1, [r3, #0]
 8006c1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c1e:	2202      	movs	r2, #2
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f002 fb38 	bl	8009296 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c26:	4b51      	ldr	r3, [pc, #324]	; (8006d6c <USBD_CDC_Init+0x1e8>)
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	f003 020f 	and.w	r2, r3, #15
 8006c2e:	6879      	ldr	r1, [r7, #4]
 8006c30:	4613      	mov	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	440b      	add	r3, r1
 8006c3a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c3e:	2201      	movs	r2, #1
 8006c40:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c42:	4b4b      	ldr	r3, [pc, #300]	; (8006d70 <USBD_CDC_Init+0x1ec>)
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	f003 020f 	and.w	r2, r3, #15
 8006c4a:	6879      	ldr	r1, [r7, #4]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	440b      	add	r3, r1
 8006c56:	3326      	adds	r3, #38	; 0x26
 8006c58:	2210      	movs	r2, #16
 8006c5a:	801a      	strh	r2, [r3, #0]
 8006c5c:	e035      	b.n	8006cca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c5e:	4b42      	ldr	r3, [pc, #264]	; (8006d68 <USBD_CDC_Init+0x1e4>)
 8006c60:	7819      	ldrb	r1, [r3, #0]
 8006c62:	2340      	movs	r3, #64	; 0x40
 8006c64:	2202      	movs	r2, #2
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f002 fb15 	bl	8009296 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c6c:	4b3e      	ldr	r3, [pc, #248]	; (8006d68 <USBD_CDC_Init+0x1e4>)
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	f003 020f 	and.w	r2, r3, #15
 8006c74:	6879      	ldr	r1, [r7, #4]
 8006c76:	4613      	mov	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	440b      	add	r3, r1
 8006c80:	3324      	adds	r3, #36	; 0x24
 8006c82:	2201      	movs	r2, #1
 8006c84:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c86:	4b39      	ldr	r3, [pc, #228]	; (8006d6c <USBD_CDC_Init+0x1e8>)
 8006c88:	7819      	ldrb	r1, [r3, #0]
 8006c8a:	2340      	movs	r3, #64	; 0x40
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f002 fb01 	bl	8009296 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c94:	4b35      	ldr	r3, [pc, #212]	; (8006d6c <USBD_CDC_Init+0x1e8>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	f003 020f 	and.w	r2, r3, #15
 8006c9c:	6879      	ldr	r1, [r7, #4]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	440b      	add	r3, r1
 8006ca8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006cac:	2201      	movs	r2, #1
 8006cae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006cb0:	4b2f      	ldr	r3, [pc, #188]	; (8006d70 <USBD_CDC_Init+0x1ec>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	f003 020f 	and.w	r2, r3, #15
 8006cb8:	6879      	ldr	r1, [r7, #4]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	440b      	add	r3, r1
 8006cc4:	3326      	adds	r3, #38	; 0x26
 8006cc6:	2210      	movs	r2, #16
 8006cc8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006cca:	4b29      	ldr	r3, [pc, #164]	; (8006d70 <USBD_CDC_Init+0x1ec>)
 8006ccc:	7819      	ldrb	r1, [r3, #0]
 8006cce:	2308      	movs	r3, #8
 8006cd0:	2203      	movs	r2, #3
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f002 fadf 	bl	8009296 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006cd8:	4b25      	ldr	r3, [pc, #148]	; (8006d70 <USBD_CDC_Init+0x1ec>)
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	f003 020f 	and.w	r2, r3, #15
 8006ce0:	6879      	ldr	r1, [r7, #4]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	440b      	add	r3, r1
 8006cec:	3324      	adds	r3, #36	; 0x24
 8006cee:	2201      	movs	r2, #1
 8006cf0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	33b0      	adds	r3, #176	; 0xb0
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006d28:	2302      	movs	r3, #2
 8006d2a:	e018      	b.n	8006d5e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	7c1b      	ldrb	r3, [r3, #16]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10a      	bne.n	8006d4a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d34:	4b0d      	ldr	r3, [pc, #52]	; (8006d6c <USBD_CDC_Init+0x1e8>)
 8006d36:	7819      	ldrb	r1, [r3, #0]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f002 fb96 	bl	8009474 <USBD_LL_PrepareReceive>
 8006d48:	e008      	b.n	8006d5c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d4a:	4b08      	ldr	r3, [pc, #32]	; (8006d6c <USBD_CDC_Init+0x1e8>)
 8006d4c:	7819      	ldrb	r1, [r3, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d54:	2340      	movs	r3, #64	; 0x40
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f002 fb8c 	bl	8009474 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	20000097 	.word	0x20000097
 8006d6c:	20000098 	.word	0x20000098
 8006d70:	20000099 	.word	0x20000099

08006d74 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006d80:	4b3a      	ldr	r3, [pc, #232]	; (8006e6c <USBD_CDC_DeInit+0xf8>)
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f002 faab 	bl	80092e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006d8c:	4b37      	ldr	r3, [pc, #220]	; (8006e6c <USBD_CDC_DeInit+0xf8>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	f003 020f 	and.w	r2, r3, #15
 8006d94:	6879      	ldr	r1, [r7, #4]
 8006d96:	4613      	mov	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	440b      	add	r3, r1
 8006da0:	3324      	adds	r3, #36	; 0x24
 8006da2:	2200      	movs	r2, #0
 8006da4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006da6:	4b32      	ldr	r3, [pc, #200]	; (8006e70 <USBD_CDC_DeInit+0xfc>)
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f002 fa98 	bl	80092e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006db2:	4b2f      	ldr	r3, [pc, #188]	; (8006e70 <USBD_CDC_DeInit+0xfc>)
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	f003 020f 	and.w	r2, r3, #15
 8006dba:	6879      	ldr	r1, [r7, #4]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4413      	add	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	440b      	add	r3, r1
 8006dc6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006dca:	2200      	movs	r2, #0
 8006dcc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006dce:	4b29      	ldr	r3, [pc, #164]	; (8006e74 <USBD_CDC_DeInit+0x100>)
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f002 fa84 	bl	80092e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006dda:	4b26      	ldr	r3, [pc, #152]	; (8006e74 <USBD_CDC_DeInit+0x100>)
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	f003 020f 	and.w	r2, r3, #15
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	4613      	mov	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	440b      	add	r3, r1
 8006dee:	3324      	adds	r3, #36	; 0x24
 8006df0:	2200      	movs	r2, #0
 8006df2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006df4:	4b1f      	ldr	r3, [pc, #124]	; (8006e74 <USBD_CDC_DeInit+0x100>)
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	f003 020f 	and.w	r2, r3, #15
 8006dfc:	6879      	ldr	r1, [r7, #4]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	440b      	add	r3, r1
 8006e08:	3326      	adds	r3, #38	; 0x26
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	32b0      	adds	r2, #176	; 0xb0
 8006e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d01f      	beq.n	8006e60 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	33b0      	adds	r3, #176	; 0xb0
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	32b0      	adds	r2, #176	; 0xb0
 8006e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f002 fb58 	bl	80094f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	32b0      	adds	r2, #176	; 0xb0
 8006e52:	2100      	movs	r1, #0
 8006e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	20000097 	.word	0x20000097
 8006e70:	20000098 	.word	0x20000098
 8006e74:	20000099 	.word	0x20000099

08006e78 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	32b0      	adds	r2, #176	; 0xb0
 8006e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e90:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006e96:	2300      	movs	r3, #0
 8006e98:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e0bf      	b.n	8007028 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d050      	beq.n	8006f56 <USBD_CDC_Setup+0xde>
 8006eb4:	2b20      	cmp	r3, #32
 8006eb6:	f040 80af 	bne.w	8007018 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	88db      	ldrh	r3, [r3, #6]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d03a      	beq.n	8006f38 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	b25b      	sxtb	r3, r3
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	da1b      	bge.n	8006f04 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	33b0      	adds	r3, #176	; 0xb0
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006ee2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	88d2      	ldrh	r2, [r2, #6]
 8006ee8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	88db      	ldrh	r3, [r3, #6]
 8006eee:	2b07      	cmp	r3, #7
 8006ef0:	bf28      	it	cs
 8006ef2:	2307      	movcs	r3, #7
 8006ef4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	89fa      	ldrh	r2, [r7, #14]
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 fd89 	bl	8008a14 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006f02:	e090      	b.n	8007026 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	785a      	ldrb	r2, [r3, #1]
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	88db      	ldrh	r3, [r3, #6]
 8006f12:	2b3f      	cmp	r3, #63	; 0x3f
 8006f14:	d803      	bhi.n	8006f1e <USBD_CDC_Setup+0xa6>
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	88db      	ldrh	r3, [r3, #6]
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	e000      	b.n	8006f20 <USBD_CDC_Setup+0xa8>
 8006f1e:	2240      	movs	r2, #64	; 0x40
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006f26:	6939      	ldr	r1, [r7, #16]
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006f2e:	461a      	mov	r2, r3
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f001 fd9b 	bl	8008a6c <USBD_CtlPrepareRx>
      break;
 8006f36:	e076      	b.n	8007026 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	33b0      	adds	r3, #176	; 0xb0
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	7850      	ldrb	r0, [r2, #1]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	4798      	blx	r3
      break;
 8006f54:	e067      	b.n	8007026 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	785b      	ldrb	r3, [r3, #1]
 8006f5a:	2b0b      	cmp	r3, #11
 8006f5c:	d851      	bhi.n	8007002 <USBD_CDC_Setup+0x18a>
 8006f5e:	a201      	add	r2, pc, #4	; (adr r2, 8006f64 <USBD_CDC_Setup+0xec>)
 8006f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f64:	08006f95 	.word	0x08006f95
 8006f68:	08007011 	.word	0x08007011
 8006f6c:	08007003 	.word	0x08007003
 8006f70:	08007003 	.word	0x08007003
 8006f74:	08007003 	.word	0x08007003
 8006f78:	08007003 	.word	0x08007003
 8006f7c:	08007003 	.word	0x08007003
 8006f80:	08007003 	.word	0x08007003
 8006f84:	08007003 	.word	0x08007003
 8006f88:	08007003 	.word	0x08007003
 8006f8c:	08006fbf 	.word	0x08006fbf
 8006f90:	08006fe9 	.word	0x08006fe9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d107      	bne.n	8006fb0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006fa0:	f107 030a 	add.w	r3, r7, #10
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f001 fd33 	bl	8008a14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fae:	e032      	b.n	8007016 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f001 fcbd 	bl	8008932 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	75fb      	strb	r3, [r7, #23]
          break;
 8006fbc:	e02b      	b.n	8007016 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d107      	bne.n	8006fda <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006fca:	f107 030d 	add.w	r3, r7, #13
 8006fce:	2201      	movs	r2, #1
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f001 fd1e 	bl	8008a14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fd8:	e01d      	b.n	8007016 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f001 fca8 	bl	8008932 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	75fb      	strb	r3, [r7, #23]
          break;
 8006fe6:	e016      	b.n	8007016 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	d00f      	beq.n	8007014 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f001 fc9b 	bl	8008932 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007000:	e008      	b.n	8007014 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f001 fc94 	bl	8008932 <USBD_CtlError>
          ret = USBD_FAIL;
 800700a:	2303      	movs	r3, #3
 800700c:	75fb      	strb	r3, [r7, #23]
          break;
 800700e:	e002      	b.n	8007016 <USBD_CDC_Setup+0x19e>
          break;
 8007010:	bf00      	nop
 8007012:	e008      	b.n	8007026 <USBD_CDC_Setup+0x1ae>
          break;
 8007014:	bf00      	nop
      }
      break;
 8007016:	e006      	b.n	8007026 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f001 fc89 	bl	8008932 <USBD_CtlError>
      ret = USBD_FAIL;
 8007020:	2303      	movs	r3, #3
 8007022:	75fb      	strb	r3, [r7, #23]
      break;
 8007024:	bf00      	nop
  }

  return (uint8_t)ret;
 8007026:	7dfb      	ldrb	r3, [r7, #23]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3718      	adds	r7, #24
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	460b      	mov	r3, r1
 800703a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007042:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	32b0      	adds	r2, #176	; 0xb0
 800704e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007056:	2303      	movs	r3, #3
 8007058:	e065      	b.n	8007126 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	32b0      	adds	r2, #176	; 0xb0
 8007064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007068:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800706a:	78fb      	ldrb	r3, [r7, #3]
 800706c:	f003 020f 	and.w	r2, r3, #15
 8007070:	6879      	ldr	r1, [r7, #4]
 8007072:	4613      	mov	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	440b      	add	r3, r1
 800707c:	3318      	adds	r3, #24
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d02f      	beq.n	80070e4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007084:	78fb      	ldrb	r3, [r7, #3]
 8007086:	f003 020f 	and.w	r2, r3, #15
 800708a:	6879      	ldr	r1, [r7, #4]
 800708c:	4613      	mov	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	440b      	add	r3, r1
 8007096:	3318      	adds	r3, #24
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	78fb      	ldrb	r3, [r7, #3]
 800709c:	f003 010f 	and.w	r1, r3, #15
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	460b      	mov	r3, r1
 80070a4:	00db      	lsls	r3, r3, #3
 80070a6:	440b      	add	r3, r1
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4403      	add	r3, r0
 80070ac:	3348      	adds	r3, #72	; 0x48
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80070b4:	fb01 f303 	mul.w	r3, r1, r3
 80070b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d112      	bne.n	80070e4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80070be:	78fb      	ldrb	r3, [r7, #3]
 80070c0:	f003 020f 	and.w	r2, r3, #15
 80070c4:	6879      	ldr	r1, [r7, #4]
 80070c6:	4613      	mov	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	440b      	add	r3, r1
 80070d0:	3318      	adds	r3, #24
 80070d2:	2200      	movs	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80070d6:	78f9      	ldrb	r1, [r7, #3]
 80070d8:	2300      	movs	r3, #0
 80070da:	2200      	movs	r2, #0
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f002 f9a8 	bl	8009432 <USBD_LL_Transmit>
 80070e2:	e01f      	b.n	8007124 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	33b0      	adds	r3, #176	; 0xb0
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4413      	add	r3, r2
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d010      	beq.n	8007124 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	33b0      	adds	r3, #176	; 0xb0
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007120:	78fa      	ldrb	r2, [r7, #3]
 8007122:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b084      	sub	sp, #16
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	460b      	mov	r3, r1
 8007138:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	32b0      	adds	r2, #176	; 0xb0
 8007144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007148:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	32b0      	adds	r2, #176	; 0xb0
 8007154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800715c:	2303      	movs	r3, #3
 800715e:	e01a      	b.n	8007196 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007160:	78fb      	ldrb	r3, [r7, #3]
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f002 f9a6 	bl	80094b6 <USBD_LL_GetRxDataSize>
 800716a:	4602      	mov	r2, r0
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	33b0      	adds	r3, #176	; 0xb0
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007190:	4611      	mov	r1, r2
 8007192:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	32b0      	adds	r2, #176	; 0xb0
 80071b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80071bc:	2303      	movs	r3, #3
 80071be:	e025      	b.n	800720c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	33b0      	adds	r3, #176	; 0xb0
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d01a      	beq.n	800720a <USBD_CDC_EP0_RxReady+0x6c>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80071da:	2bff      	cmp	r3, #255	; 0xff
 80071dc:	d015      	beq.n	800720a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	33b0      	adds	r3, #176	; 0xb0
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80071f6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80071fe:	b292      	uxth	r2, r2
 8007200:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	22ff      	movs	r2, #255	; 0xff
 8007206:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800721c:	2182      	movs	r1, #130	; 0x82
 800721e:	4818      	ldr	r0, [pc, #96]	; (8007280 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007220:	f000 fd4f 	bl	8007cc2 <USBD_GetEpDesc>
 8007224:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007226:	2101      	movs	r1, #1
 8007228:	4815      	ldr	r0, [pc, #84]	; (8007280 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800722a:	f000 fd4a 	bl	8007cc2 <USBD_GetEpDesc>
 800722e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007230:	2181      	movs	r1, #129	; 0x81
 8007232:	4813      	ldr	r0, [pc, #76]	; (8007280 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007234:	f000 fd45 	bl	8007cc2 <USBD_GetEpDesc>
 8007238:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d002      	beq.n	8007246 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	2210      	movs	r2, #16
 8007244:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d006      	beq.n	800725a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	2200      	movs	r2, #0
 8007250:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007254:	711a      	strb	r2, [r3, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d006      	beq.n	800726e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007268:	711a      	strb	r2, [r3, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2243      	movs	r2, #67	; 0x43
 8007272:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007274:	4b02      	ldr	r3, [pc, #8]	; (8007280 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007276:	4618      	mov	r0, r3
 8007278:	3718      	adds	r7, #24
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	20000054 	.word	0x20000054

08007284 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800728c:	2182      	movs	r1, #130	; 0x82
 800728e:	4818      	ldr	r0, [pc, #96]	; (80072f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007290:	f000 fd17 	bl	8007cc2 <USBD_GetEpDesc>
 8007294:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007296:	2101      	movs	r1, #1
 8007298:	4815      	ldr	r0, [pc, #84]	; (80072f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800729a:	f000 fd12 	bl	8007cc2 <USBD_GetEpDesc>
 800729e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072a0:	2181      	movs	r1, #129	; 0x81
 80072a2:	4813      	ldr	r0, [pc, #76]	; (80072f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072a4:	f000 fd0d 	bl	8007cc2 <USBD_GetEpDesc>
 80072a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	2210      	movs	r2, #16
 80072b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d006      	beq.n	80072ca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	2200      	movs	r2, #0
 80072c0:	711a      	strb	r2, [r3, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f042 0202 	orr.w	r2, r2, #2
 80072c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d006      	beq.n	80072de <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	711a      	strb	r2, [r3, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f042 0202 	orr.w	r2, r2, #2
 80072dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2243      	movs	r2, #67	; 0x43
 80072e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072e4:	4b02      	ldr	r3, [pc, #8]	; (80072f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	20000054 	.word	0x20000054

080072f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80072fc:	2182      	movs	r1, #130	; 0x82
 80072fe:	4818      	ldr	r0, [pc, #96]	; (8007360 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007300:	f000 fcdf 	bl	8007cc2 <USBD_GetEpDesc>
 8007304:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007306:	2101      	movs	r1, #1
 8007308:	4815      	ldr	r0, [pc, #84]	; (8007360 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800730a:	f000 fcda 	bl	8007cc2 <USBD_GetEpDesc>
 800730e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007310:	2181      	movs	r1, #129	; 0x81
 8007312:	4813      	ldr	r0, [pc, #76]	; (8007360 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007314:	f000 fcd5 	bl	8007cc2 <USBD_GetEpDesc>
 8007318:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2210      	movs	r2, #16
 8007324:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d006      	beq.n	800733a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	2200      	movs	r2, #0
 8007330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007334:	711a      	strb	r2, [r3, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d006      	beq.n	800734e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007348:	711a      	strb	r2, [r3, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2243      	movs	r2, #67	; 0x43
 8007352:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007354:	4b02      	ldr	r3, [pc, #8]	; (8007360 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007356:	4618      	mov	r0, r3
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20000054 	.word	0x20000054

08007364 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	220a      	movs	r2, #10
 8007370:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007372:	4b03      	ldr	r3, [pc, #12]	; (8007380 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007374:	4618      	mov	r0, r3
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	20000010 	.word	0x20000010

08007384 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007394:	2303      	movs	r3, #3
 8007396:	e009      	b.n	80073ac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	33b0      	adds	r3, #176	; 0xb0
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	32b0      	adds	r2, #176	; 0xb0
 80073ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d101      	bne.n	80073de <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80073da:	2303      	movs	r3, #3
 80073dc:	e008      	b.n	80073f0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	371c      	adds	r7, #28
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	32b0      	adds	r2, #176	; 0xb0
 8007410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007414:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800741c:	2303      	movs	r3, #3
 800741e:	e004      	b.n	800742a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
	...

08007438 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	32b0      	adds	r2, #176	; 0xb0
 800744a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800744e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007450:	2301      	movs	r3, #1
 8007452:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	32b0      	adds	r2, #176	; 0xb0
 800745e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007466:	2303      	movs	r3, #3
 8007468:	e025      	b.n	80074b6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007470:	2b00      	cmp	r3, #0
 8007472:	d11f      	bne.n	80074b4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2201      	movs	r2, #1
 8007478:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800747c:	4b10      	ldr	r3, [pc, #64]	; (80074c0 <USBD_CDC_TransmitPacket+0x88>)
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	f003 020f 	and.w	r2, r3, #15
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	4613      	mov	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4403      	add	r3, r0
 8007496:	3318      	adds	r3, #24
 8007498:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800749a:	4b09      	ldr	r3, [pc, #36]	; (80074c0 <USBD_CDC_TransmitPacket+0x88>)
 800749c:	7819      	ldrb	r1, [r3, #0]
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f001 ffc1 	bl	8009432 <USBD_LL_Transmit>

    ret = USBD_OK;
 80074b0:	2300      	movs	r3, #0
 80074b2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	20000097 	.word	0x20000097

080074c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	32b0      	adds	r2, #176	; 0xb0
 80074d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074da:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	32b0      	adds	r2, #176	; 0xb0
 80074e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e018      	b.n	8007524 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	7c1b      	ldrb	r3, [r3, #16]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10a      	bne.n	8007510 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074fa:	4b0c      	ldr	r3, [pc, #48]	; (800752c <USBD_CDC_ReceivePacket+0x68>)
 80074fc:	7819      	ldrb	r1, [r3, #0]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f001 ffb3 	bl	8009474 <USBD_LL_PrepareReceive>
 800750e:	e008      	b.n	8007522 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007510:	4b06      	ldr	r3, [pc, #24]	; (800752c <USBD_CDC_ReceivePacket+0x68>)
 8007512:	7819      	ldrb	r1, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800751a:	2340      	movs	r3, #64	; 0x40
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f001 ffa9 	bl	8009474 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	20000098 	.word	0x20000098

08007530 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b086      	sub	sp, #24
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	4613      	mov	r3, r2
 800753c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007544:	2303      	movs	r3, #3
 8007546:	e01f      	b.n	8007588 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d003      	beq.n	800756e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	79fa      	ldrb	r2, [r7, #7]
 800757a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f001 fe23 	bl	80091c8 <USBD_LL_Init>
 8007582:	4603      	mov	r3, r0
 8007584:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007586:	7dfb      	ldrb	r3, [r7, #23]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3718      	adds	r7, #24
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800759a:	2300      	movs	r3, #0
 800759c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d101      	bne.n	80075a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e025      	b.n	80075f4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	32ae      	adds	r2, #174	; 0xae
 80075ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00f      	beq.n	80075e4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	32ae      	adds	r2, #174	; 0xae
 80075ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d4:	f107 020e 	add.w	r2, r7, #14
 80075d8:	4610      	mov	r0, r2
 80075da:	4798      	blx	r3
 80075dc:	4602      	mov	r2, r0
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80075f2:	2300      	movs	r3, #0
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f001 fe2b 	bl	8009260 <USBD_LL_Start>
 800760a:	4603      	mov	r3, r0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800761c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800761e:	4618      	mov	r0, r3
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b084      	sub	sp, #16
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	460b      	mov	r3, r1
 8007634:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007636:	2300      	movs	r3, #0
 8007638:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007640:	2b00      	cmp	r3, #0
 8007642:	d009      	beq.n	8007658 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	78fa      	ldrb	r2, [r7, #3]
 800764e:	4611      	mov	r1, r2
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	4798      	blx	r3
 8007654:	4603      	mov	r3, r0
 8007656:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007658:	7bfb      	ldrb	r3, [r7, #15]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	460b      	mov	r3, r1
 800766c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	78fa      	ldrb	r2, [r7, #3]
 800767c:	4611      	mov	r1, r2
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	4798      	blx	r3
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007688:	2303      	movs	r3, #3
 800768a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800768c:	7bfb      	ldrb	r3, [r7, #15]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b084      	sub	sp, #16
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076a6:	6839      	ldr	r1, [r7, #0]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f001 f908 	bl	80088be <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80076bc:	461a      	mov	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80076ca:	f003 031f 	and.w	r3, r3, #31
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d01a      	beq.n	8007708 <USBD_LL_SetupStage+0x72>
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d822      	bhi.n	800771c <USBD_LL_SetupStage+0x86>
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d002      	beq.n	80076e0 <USBD_LL_SetupStage+0x4a>
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d00a      	beq.n	80076f4 <USBD_LL_SetupStage+0x5e>
 80076de:	e01d      	b.n	800771c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fb5f 	bl	8007dac <USBD_StdDevReq>
 80076ee:	4603      	mov	r3, r0
 80076f0:	73fb      	strb	r3, [r7, #15]
      break;
 80076f2:	e020      	b.n	8007736 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076fa:	4619      	mov	r1, r3
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fbc7 	bl	8007e90 <USBD_StdItfReq>
 8007702:	4603      	mov	r3, r0
 8007704:	73fb      	strb	r3, [r7, #15]
      break;
 8007706:	e016      	b.n	8007736 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fc29 	bl	8007f68 <USBD_StdEPReq>
 8007716:	4603      	mov	r3, r0
 8007718:	73fb      	strb	r3, [r7, #15]
      break;
 800771a:	e00c      	b.n	8007736 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007722:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007726:	b2db      	uxtb	r3, r3
 8007728:	4619      	mov	r1, r3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f001 fdf8 	bl	8009320 <USBD_LL_StallEP>
 8007730:	4603      	mov	r3, r0
 8007732:	73fb      	strb	r3, [r7, #15]
      break;
 8007734:	bf00      	nop
  }

  return ret;
 8007736:	7bfb      	ldrb	r3, [r7, #15]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	460b      	mov	r3, r1
 800774a:	607a      	str	r2, [r7, #4]
 800774c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007752:	7afb      	ldrb	r3, [r7, #11]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d16e      	bne.n	8007836 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800775e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007766:	2b03      	cmp	r3, #3
 8007768:	f040 8098 	bne.w	800789c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	429a      	cmp	r2, r3
 8007776:	d913      	bls.n	80077a0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	689a      	ldr	r2, [r3, #8]
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	1ad2      	subs	r2, r2, r3
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	68da      	ldr	r2, [r3, #12]
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	4293      	cmp	r3, r2
 8007790:	bf28      	it	cs
 8007792:	4613      	movcs	r3, r2
 8007794:	461a      	mov	r2, r3
 8007796:	6879      	ldr	r1, [r7, #4]
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f001 f984 	bl	8008aa6 <USBD_CtlContinueRx>
 800779e:	e07d      	b.n	800789c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80077a6:	f003 031f 	and.w	r3, r3, #31
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d014      	beq.n	80077d8 <USBD_LL_DataOutStage+0x98>
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d81d      	bhi.n	80077ee <USBD_LL_DataOutStage+0xae>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d002      	beq.n	80077bc <USBD_LL_DataOutStage+0x7c>
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d003      	beq.n	80077c2 <USBD_LL_DataOutStage+0x82>
 80077ba:	e018      	b.n	80077ee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	75bb      	strb	r3, [r7, #22]
            break;
 80077c0:	e018      	b.n	80077f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	4619      	mov	r1, r3
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 fa5e 	bl	8007c8e <USBD_CoreFindIF>
 80077d2:	4603      	mov	r3, r0
 80077d4:	75bb      	strb	r3, [r7, #22]
            break;
 80077d6:	e00d      	b.n	80077f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	4619      	mov	r1, r3
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f000 fa60 	bl	8007ca8 <USBD_CoreFindEP>
 80077e8:	4603      	mov	r3, r0
 80077ea:	75bb      	strb	r3, [r7, #22]
            break;
 80077ec:	e002      	b.n	80077f4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	75bb      	strb	r3, [r7, #22]
            break;
 80077f2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80077f4:	7dbb      	ldrb	r3, [r7, #22]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d119      	bne.n	800782e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b03      	cmp	r3, #3
 8007804:	d113      	bne.n	800782e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007806:	7dba      	ldrb	r2, [r7, #22]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	32ae      	adds	r2, #174	; 0xae
 800780c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00b      	beq.n	800782e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007816:	7dba      	ldrb	r2, [r7, #22]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800781e:	7dba      	ldrb	r2, [r7, #22]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	32ae      	adds	r2, #174	; 0xae
 8007824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f001 f94a 	bl	8008ac8 <USBD_CtlSendStatus>
 8007834:	e032      	b.n	800789c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007836:	7afb      	ldrb	r3, [r7, #11]
 8007838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800783c:	b2db      	uxtb	r3, r3
 800783e:	4619      	mov	r1, r3
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f000 fa31 	bl	8007ca8 <USBD_CoreFindEP>
 8007846:	4603      	mov	r3, r0
 8007848:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800784a:	7dbb      	ldrb	r3, [r7, #22]
 800784c:	2bff      	cmp	r3, #255	; 0xff
 800784e:	d025      	beq.n	800789c <USBD_LL_DataOutStage+0x15c>
 8007850:	7dbb      	ldrb	r3, [r7, #22]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d122      	bne.n	800789c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b03      	cmp	r3, #3
 8007860:	d117      	bne.n	8007892 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007862:	7dba      	ldrb	r2, [r7, #22]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	32ae      	adds	r2, #174	; 0xae
 8007868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00f      	beq.n	8007892 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007872:	7dba      	ldrb	r2, [r7, #22]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800787a:	7dba      	ldrb	r2, [r7, #22]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	32ae      	adds	r2, #174	; 0xae
 8007880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	7afa      	ldrb	r2, [r7, #11]
 8007888:	4611      	mov	r1, r2
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	4798      	blx	r3
 800788e:	4603      	mov	r3, r0
 8007890:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007892:	7dfb      	ldrb	r3, [r7, #23]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007898:	7dfb      	ldrb	r3, [r7, #23]
 800789a:	e000      	b.n	800789e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3718      	adds	r7, #24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b086      	sub	sp, #24
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	60f8      	str	r0, [r7, #12]
 80078ae:	460b      	mov	r3, r1
 80078b0:	607a      	str	r2, [r7, #4]
 80078b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80078b4:	7afb      	ldrb	r3, [r7, #11]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d16f      	bne.n	800799a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	3314      	adds	r3, #20
 80078be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d15a      	bne.n	8007980 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	689a      	ldr	r2, [r3, #8]
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d914      	bls.n	8007900 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	689a      	ldr	r2, [r3, #8]
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	1ad2      	subs	r2, r2, r3
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	461a      	mov	r2, r3
 80078ea:	6879      	ldr	r1, [r7, #4]
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f001 f8ac 	bl	8008a4a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078f2:	2300      	movs	r3, #0
 80078f4:	2200      	movs	r2, #0
 80078f6:	2100      	movs	r1, #0
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f001 fdbb 	bl	8009474 <USBD_LL_PrepareReceive>
 80078fe:	e03f      	b.n	8007980 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	68da      	ldr	r2, [r3, #12]
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	429a      	cmp	r2, r3
 800790a:	d11c      	bne.n	8007946 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	685a      	ldr	r2, [r3, #4]
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007914:	429a      	cmp	r2, r3
 8007916:	d316      	bcc.n	8007946 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007922:	429a      	cmp	r2, r3
 8007924:	d20f      	bcs.n	8007946 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007926:	2200      	movs	r2, #0
 8007928:	2100      	movs	r1, #0
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f001 f88d 	bl	8008a4a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007938:	2300      	movs	r3, #0
 800793a:	2200      	movs	r2, #0
 800793c:	2100      	movs	r1, #0
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f001 fd98 	bl	8009474 <USBD_LL_PrepareReceive>
 8007944:	e01c      	b.n	8007980 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b03      	cmp	r3, #3
 8007950:	d10f      	bne.n	8007972 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d009      	beq.n	8007972 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007972:	2180      	movs	r1, #128	; 0x80
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f001 fcd3 	bl	8009320 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f001 f8b7 	bl	8008aee <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d03a      	beq.n	8007a00 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f7ff fe42 	bl	8007614 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007998:	e032      	b.n	8007a00 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800799a:	7afb      	ldrb	r3, [r7, #11]
 800799c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	4619      	mov	r1, r3
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 f97f 	bl	8007ca8 <USBD_CoreFindEP>
 80079aa:	4603      	mov	r3, r0
 80079ac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079ae:	7dfb      	ldrb	r3, [r7, #23]
 80079b0:	2bff      	cmp	r3, #255	; 0xff
 80079b2:	d025      	beq.n	8007a00 <USBD_LL_DataInStage+0x15a>
 80079b4:	7dfb      	ldrb	r3, [r7, #23]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d122      	bne.n	8007a00 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b03      	cmp	r3, #3
 80079c4:	d11c      	bne.n	8007a00 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80079c6:	7dfa      	ldrb	r2, [r7, #23]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	32ae      	adds	r2, #174	; 0xae
 80079cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d014      	beq.n	8007a00 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80079d6:	7dfa      	ldrb	r2, [r7, #23]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80079de:	7dfa      	ldrb	r2, [r7, #23]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	32ae      	adds	r2, #174	; 0xae
 80079e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	7afa      	ldrb	r2, [r7, #11]
 80079ec:	4611      	mov	r1, r2
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	4798      	blx	r3
 80079f2:	4603      	mov	r3, r0
 80079f4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80079f6:	7dbb      	ldrb	r3, [r7, #22]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80079fc:	7dbb      	ldrb	r3, [r7, #22]
 80079fe:	e000      	b.n	8007a02 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3718      	adds	r7, #24
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b084      	sub	sp, #16
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d014      	beq.n	8007a70 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00e      	beq.n	8007a70 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	6852      	ldr	r2, [r2, #4]
 8007a5e:	b2d2      	uxtb	r2, r2
 8007a60:	4611      	mov	r1, r2
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	4798      	blx	r3
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a70:	2340      	movs	r3, #64	; 0x40
 8007a72:	2200      	movs	r2, #0
 8007a74:	2100      	movs	r1, #0
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 fc0d 	bl	8009296 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2240      	movs	r2, #64	; 0x40
 8007a88:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a8c:	2340      	movs	r3, #64	; 0x40
 8007a8e:	2200      	movs	r2, #0
 8007a90:	2180      	movs	r1, #128	; 0x80
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f001 fbff 	bl	8009296 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2240      	movs	r2, #64	; 0x40
 8007aa2:	621a      	str	r2, [r3, #32]

  return ret;
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b083      	sub	sp, #12
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	78fa      	ldrb	r2, [r7, #3]
 8007abe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b083      	sub	sp, #12
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2204      	movs	r2, #4
 8007ae8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b083      	sub	sp, #12
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	d106      	bne.n	8007b1c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007b14:	b2da      	uxtb	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d110      	bne.n	8007b60 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00b      	beq.n	8007b60 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b4e:	69db      	ldr	r3, [r3, #28]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d005      	beq.n	8007b60 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5a:	69db      	ldr	r3, [r3, #28]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b082      	sub	sp, #8
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	460b      	mov	r3, r1
 8007b74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	32ae      	adds	r2, #174	; 0xae
 8007b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d101      	bne.n	8007b8c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e01c      	b.n	8007bc6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b03      	cmp	r3, #3
 8007b96:	d115      	bne.n	8007bc4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	32ae      	adds	r2, #174	; 0xae
 8007ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ba6:	6a1b      	ldr	r3, [r3, #32]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00b      	beq.n	8007bc4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	32ae      	adds	r2, #174	; 0xae
 8007bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bba:	6a1b      	ldr	r3, [r3, #32]
 8007bbc:	78fa      	ldrb	r2, [r7, #3]
 8007bbe:	4611      	mov	r1, r2
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b082      	sub	sp, #8
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	32ae      	adds	r2, #174	; 0xae
 8007be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d101      	bne.n	8007bf0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007bec:	2303      	movs	r3, #3
 8007bee:	e01c      	b.n	8007c2a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	2b03      	cmp	r3, #3
 8007bfa:	d115      	bne.n	8007c28 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	32ae      	adds	r2, #174	; 0xae
 8007c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00b      	beq.n	8007c28 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	32ae      	adds	r2, #174	; 0xae
 8007c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c20:	78fa      	ldrb	r2, [r7, #3]
 8007c22:	4611      	mov	r1, r2
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007c32:	b480      	push	{r7}
 8007c34:	b083      	sub	sp, #12
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007c50:	2300      	movs	r3, #0
 8007c52:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00e      	beq.n	8007c84 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	6852      	ldr	r2, [r2, #4]
 8007c72:	b2d2      	uxtb	r2, r2
 8007c74:	4611      	mov	r1, r2
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4798      	blx	r3
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007c80:	2303      	movs	r3, #3
 8007c82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b083      	sub	sp, #12
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	460b      	mov	r3, r1
 8007c98:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c9a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007cb4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b086      	sub	sp, #24
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	460b      	mov	r3, r1
 8007ccc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	885b      	ldrh	r3, [r3, #2]
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d920      	bls.n	8007d2c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007cf2:	e013      	b.n	8007d1c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007cf4:	f107 030a 	add.w	r3, r7, #10
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	6978      	ldr	r0, [r7, #20]
 8007cfc:	f000 f81b 	bl	8007d36 <USBD_GetNextDesc>
 8007d00:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	785b      	ldrb	r3, [r3, #1]
 8007d06:	2b05      	cmp	r3, #5
 8007d08:	d108      	bne.n	8007d1c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	789b      	ldrb	r3, [r3, #2]
 8007d12:	78fa      	ldrb	r2, [r7, #3]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d008      	beq.n	8007d2a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	885b      	ldrh	r3, [r3, #2]
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	897b      	ldrh	r3, [r7, #10]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d8e5      	bhi.n	8007cf4 <USBD_GetEpDesc+0x32>
 8007d28:	e000      	b.n	8007d2c <USBD_GetEpDesc+0x6a>
          break;
 8007d2a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007d2c:	693b      	ldr	r3, [r7, #16]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b085      	sub	sp, #20
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	881a      	ldrh	r2, [r3, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	4413      	add	r3, r2
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4413      	add	r3, r2
 8007d60:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d62:	68fb      	ldr	r3, [r7, #12]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	3301      	adds	r3, #1
 8007d86:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d8e:	8a3b      	ldrh	r3, [r7, #16]
 8007d90:	021b      	lsls	r3, r3, #8
 8007d92:	b21a      	sxth	r2, r3
 8007d94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	b21b      	sxth	r3, r3
 8007d9c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007d9e:	89fb      	ldrh	r3, [r7, #14]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	371c      	adds	r7, #28
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dc2:	2b40      	cmp	r3, #64	; 0x40
 8007dc4:	d005      	beq.n	8007dd2 <USBD_StdDevReq+0x26>
 8007dc6:	2b40      	cmp	r3, #64	; 0x40
 8007dc8:	d857      	bhi.n	8007e7a <USBD_StdDevReq+0xce>
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00f      	beq.n	8007dee <USBD_StdDevReq+0x42>
 8007dce:	2b20      	cmp	r3, #32
 8007dd0:	d153      	bne.n	8007e7a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	32ae      	adds	r2, #174	; 0xae
 8007ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	6839      	ldr	r1, [r7, #0]
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	4798      	blx	r3
 8007de8:	4603      	mov	r3, r0
 8007dea:	73fb      	strb	r3, [r7, #15]
      break;
 8007dec:	e04a      	b.n	8007e84 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	785b      	ldrb	r3, [r3, #1]
 8007df2:	2b09      	cmp	r3, #9
 8007df4:	d83b      	bhi.n	8007e6e <USBD_StdDevReq+0xc2>
 8007df6:	a201      	add	r2, pc, #4	; (adr r2, 8007dfc <USBD_StdDevReq+0x50>)
 8007df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfc:	08007e51 	.word	0x08007e51
 8007e00:	08007e65 	.word	0x08007e65
 8007e04:	08007e6f 	.word	0x08007e6f
 8007e08:	08007e5b 	.word	0x08007e5b
 8007e0c:	08007e6f 	.word	0x08007e6f
 8007e10:	08007e2f 	.word	0x08007e2f
 8007e14:	08007e25 	.word	0x08007e25
 8007e18:	08007e6f 	.word	0x08007e6f
 8007e1c:	08007e47 	.word	0x08007e47
 8007e20:	08007e39 	.word	0x08007e39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fa3c 	bl	80082a4 <USBD_GetDescriptor>
          break;
 8007e2c:	e024      	b.n	8007e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fba1 	bl	8008578 <USBD_SetAddress>
          break;
 8007e36:	e01f      	b.n	8007e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fbe0 	bl	8008600 <USBD_SetConfig>
 8007e40:	4603      	mov	r3, r0
 8007e42:	73fb      	strb	r3, [r7, #15]
          break;
 8007e44:	e018      	b.n	8007e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fc83 	bl	8008754 <USBD_GetConfig>
          break;
 8007e4e:	e013      	b.n	8007e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fcb4 	bl	80087c0 <USBD_GetStatus>
          break;
 8007e58:	e00e      	b.n	8007e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e5a:	6839      	ldr	r1, [r7, #0]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fce3 	bl	8008828 <USBD_SetFeature>
          break;
 8007e62:	e009      	b.n	8007e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e64:	6839      	ldr	r1, [r7, #0]
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fd07 	bl	800887a <USBD_ClrFeature>
          break;
 8007e6c:	e004      	b.n	8007e78 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fd5e 	bl	8008932 <USBD_CtlError>
          break;
 8007e76:	bf00      	nop
      }
      break;
 8007e78:	e004      	b.n	8007e84 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007e7a:	6839      	ldr	r1, [r7, #0]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fd58 	bl	8008932 <USBD_CtlError>
      break;
 8007e82:	bf00      	nop
  }

  return ret;
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop

08007e90 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ea6:	2b40      	cmp	r3, #64	; 0x40
 8007ea8:	d005      	beq.n	8007eb6 <USBD_StdItfReq+0x26>
 8007eaa:	2b40      	cmp	r3, #64	; 0x40
 8007eac:	d852      	bhi.n	8007f54 <USBD_StdItfReq+0xc4>
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <USBD_StdItfReq+0x26>
 8007eb2:	2b20      	cmp	r3, #32
 8007eb4:	d14e      	bne.n	8007f54 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d840      	bhi.n	8007f46 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	889b      	ldrh	r3, [r3, #4]
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d836      	bhi.n	8007f3c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	889b      	ldrh	r3, [r3, #4]
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7ff fed9 	bl	8007c8e <USBD_CoreFindIF>
 8007edc:	4603      	mov	r3, r0
 8007ede:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
 8007ee2:	2bff      	cmp	r3, #255	; 0xff
 8007ee4:	d01d      	beq.n	8007f22 <USBD_StdItfReq+0x92>
 8007ee6:	7bbb      	ldrb	r3, [r7, #14]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d11a      	bne.n	8007f22 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007eec:	7bba      	ldrb	r2, [r7, #14]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	32ae      	adds	r2, #174	; 0xae
 8007ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00f      	beq.n	8007f1c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007efc:	7bba      	ldrb	r2, [r7, #14]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007f04:	7bba      	ldrb	r2, [r7, #14]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	32ae      	adds	r2, #174	; 0xae
 8007f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	4798      	blx	r3
 8007f16:	4603      	mov	r3, r0
 8007f18:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007f1a:	e004      	b.n	8007f26 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007f20:	e001      	b.n	8007f26 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007f22:	2303      	movs	r3, #3
 8007f24:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	88db      	ldrh	r3, [r3, #6]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d110      	bne.n	8007f50 <USBD_StdItfReq+0xc0>
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10d      	bne.n	8007f50 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fdc7 	bl	8008ac8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f3a:	e009      	b.n	8007f50 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007f3c:	6839      	ldr	r1, [r7, #0]
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fcf7 	bl	8008932 <USBD_CtlError>
          break;
 8007f44:	e004      	b.n	8007f50 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fcf2 	bl	8008932 <USBD_CtlError>
          break;
 8007f4e:	e000      	b.n	8007f52 <USBD_StdItfReq+0xc2>
          break;
 8007f50:	bf00      	nop
      }
      break;
 8007f52:	e004      	b.n	8007f5e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fceb 	bl	8008932 <USBD_CtlError>
      break;
 8007f5c:	bf00      	nop
  }

  return ret;
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	889b      	ldrh	r3, [r3, #4]
 8007f7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f84:	2b40      	cmp	r3, #64	; 0x40
 8007f86:	d007      	beq.n	8007f98 <USBD_StdEPReq+0x30>
 8007f88:	2b40      	cmp	r3, #64	; 0x40
 8007f8a:	f200 817f 	bhi.w	800828c <USBD_StdEPReq+0x324>
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d02a      	beq.n	8007fe8 <USBD_StdEPReq+0x80>
 8007f92:	2b20      	cmp	r3, #32
 8007f94:	f040 817a 	bne.w	800828c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f98:	7bbb      	ldrb	r3, [r7, #14]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff fe83 	bl	8007ca8 <USBD_CoreFindEP>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fa6:	7b7b      	ldrb	r3, [r7, #13]
 8007fa8:	2bff      	cmp	r3, #255	; 0xff
 8007faa:	f000 8174 	beq.w	8008296 <USBD_StdEPReq+0x32e>
 8007fae:	7b7b      	ldrb	r3, [r7, #13]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f040 8170 	bne.w	8008296 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007fb6:	7b7a      	ldrb	r2, [r7, #13]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007fbe:	7b7a      	ldrb	r2, [r7, #13]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	32ae      	adds	r2, #174	; 0xae
 8007fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f000 8163 	beq.w	8008296 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007fd0:	7b7a      	ldrb	r2, [r7, #13]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	32ae      	adds	r2, #174	; 0xae
 8007fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	4798      	blx	r3
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007fe6:	e156      	b.n	8008296 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	785b      	ldrb	r3, [r3, #1]
 8007fec:	2b03      	cmp	r3, #3
 8007fee:	d008      	beq.n	8008002 <USBD_StdEPReq+0x9a>
 8007ff0:	2b03      	cmp	r3, #3
 8007ff2:	f300 8145 	bgt.w	8008280 <USBD_StdEPReq+0x318>
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 809b 	beq.w	8008132 <USBD_StdEPReq+0x1ca>
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d03c      	beq.n	800807a <USBD_StdEPReq+0x112>
 8008000:	e13e      	b.n	8008280 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b02      	cmp	r3, #2
 800800c:	d002      	beq.n	8008014 <USBD_StdEPReq+0xac>
 800800e:	2b03      	cmp	r3, #3
 8008010:	d016      	beq.n	8008040 <USBD_StdEPReq+0xd8>
 8008012:	e02c      	b.n	800806e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008014:	7bbb      	ldrb	r3, [r7, #14]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00d      	beq.n	8008036 <USBD_StdEPReq+0xce>
 800801a:	7bbb      	ldrb	r3, [r7, #14]
 800801c:	2b80      	cmp	r3, #128	; 0x80
 800801e:	d00a      	beq.n	8008036 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008020:	7bbb      	ldrb	r3, [r7, #14]
 8008022:	4619      	mov	r1, r3
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f001 f97b 	bl	8009320 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800802a:	2180      	movs	r1, #128	; 0x80
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f001 f977 	bl	8009320 <USBD_LL_StallEP>
 8008032:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008034:	e020      	b.n	8008078 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008036:	6839      	ldr	r1, [r7, #0]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fc7a 	bl	8008932 <USBD_CtlError>
              break;
 800803e:	e01b      	b.n	8008078 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	885b      	ldrh	r3, [r3, #2]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10e      	bne.n	8008066 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008048:	7bbb      	ldrb	r3, [r7, #14]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00b      	beq.n	8008066 <USBD_StdEPReq+0xfe>
 800804e:	7bbb      	ldrb	r3, [r7, #14]
 8008050:	2b80      	cmp	r3, #128	; 0x80
 8008052:	d008      	beq.n	8008066 <USBD_StdEPReq+0xfe>
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	88db      	ldrh	r3, [r3, #6]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d104      	bne.n	8008066 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	4619      	mov	r1, r3
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f001 f95d 	bl	8009320 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fd2e 	bl	8008ac8 <USBD_CtlSendStatus>

              break;
 800806c:	e004      	b.n	8008078 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fc5e 	bl	8008932 <USBD_CtlError>
              break;
 8008076:	bf00      	nop
          }
          break;
 8008078:	e107      	b.n	800828a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b02      	cmp	r3, #2
 8008084:	d002      	beq.n	800808c <USBD_StdEPReq+0x124>
 8008086:	2b03      	cmp	r3, #3
 8008088:	d016      	beq.n	80080b8 <USBD_StdEPReq+0x150>
 800808a:	e04b      	b.n	8008124 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800808c:	7bbb      	ldrb	r3, [r7, #14]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00d      	beq.n	80080ae <USBD_StdEPReq+0x146>
 8008092:	7bbb      	ldrb	r3, [r7, #14]
 8008094:	2b80      	cmp	r3, #128	; 0x80
 8008096:	d00a      	beq.n	80080ae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008098:	7bbb      	ldrb	r3, [r7, #14]
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f001 f93f 	bl	8009320 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80080a2:	2180      	movs	r1, #128	; 0x80
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 f93b 	bl	8009320 <USBD_LL_StallEP>
 80080aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080ac:	e040      	b.n	8008130 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fc3e 	bl	8008932 <USBD_CtlError>
              break;
 80080b6:	e03b      	b.n	8008130 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	885b      	ldrh	r3, [r3, #2]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d136      	bne.n	800812e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
 80080c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d004      	beq.n	80080d4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80080ca:	7bbb      	ldrb	r3, [r7, #14]
 80080cc:	4619      	mov	r1, r3
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f001 f945 	bl	800935e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fcf7 	bl	8008ac8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80080da:	7bbb      	ldrb	r3, [r7, #14]
 80080dc:	4619      	mov	r1, r3
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f7ff fde2 	bl	8007ca8 <USBD_CoreFindEP>
 80080e4:	4603      	mov	r3, r0
 80080e6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080e8:	7b7b      	ldrb	r3, [r7, #13]
 80080ea:	2bff      	cmp	r3, #255	; 0xff
 80080ec:	d01f      	beq.n	800812e <USBD_StdEPReq+0x1c6>
 80080ee:	7b7b      	ldrb	r3, [r7, #13]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d11c      	bne.n	800812e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80080f4:	7b7a      	ldrb	r2, [r7, #13]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80080fc:	7b7a      	ldrb	r2, [r7, #13]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	32ae      	adds	r2, #174	; 0xae
 8008102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d010      	beq.n	800812e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800810c:	7b7a      	ldrb	r2, [r7, #13]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	32ae      	adds	r2, #174	; 0xae
 8008112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	4798      	blx	r3
 800811e:	4603      	mov	r3, r0
 8008120:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008122:	e004      	b.n	800812e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fc03 	bl	8008932 <USBD_CtlError>
              break;
 800812c:	e000      	b.n	8008130 <USBD_StdEPReq+0x1c8>
              break;
 800812e:	bf00      	nop
          }
          break;
 8008130:	e0ab      	b.n	800828a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b02      	cmp	r3, #2
 800813c:	d002      	beq.n	8008144 <USBD_StdEPReq+0x1dc>
 800813e:	2b03      	cmp	r3, #3
 8008140:	d032      	beq.n	80081a8 <USBD_StdEPReq+0x240>
 8008142:	e097      	b.n	8008274 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008144:	7bbb      	ldrb	r3, [r7, #14]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d007      	beq.n	800815a <USBD_StdEPReq+0x1f2>
 800814a:	7bbb      	ldrb	r3, [r7, #14]
 800814c:	2b80      	cmp	r3, #128	; 0x80
 800814e:	d004      	beq.n	800815a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008150:	6839      	ldr	r1, [r7, #0]
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fbed 	bl	8008932 <USBD_CtlError>
                break;
 8008158:	e091      	b.n	800827e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800815a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800815e:	2b00      	cmp	r3, #0
 8008160:	da0b      	bge.n	800817a <USBD_StdEPReq+0x212>
 8008162:	7bbb      	ldrb	r3, [r7, #14]
 8008164:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008168:	4613      	mov	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	3310      	adds	r3, #16
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	4413      	add	r3, r2
 8008176:	3304      	adds	r3, #4
 8008178:	e00b      	b.n	8008192 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800817a:	7bbb      	ldrb	r3, [r7, #14]
 800817c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008180:	4613      	mov	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4413      	add	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	4413      	add	r3, r2
 8008190:	3304      	adds	r3, #4
 8008192:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2200      	movs	r2, #0
 8008198:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2202      	movs	r2, #2
 800819e:	4619      	mov	r1, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fc37 	bl	8008a14 <USBD_CtlSendData>
              break;
 80081a6:	e06a      	b.n	800827e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80081a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	da11      	bge.n	80081d4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081b0:	7bbb      	ldrb	r3, [r7, #14]
 80081b2:	f003 020f 	and.w	r2, r3, #15
 80081b6:	6879      	ldr	r1, [r7, #4]
 80081b8:	4613      	mov	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4413      	add	r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	440b      	add	r3, r1
 80081c2:	3324      	adds	r3, #36	; 0x24
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d117      	bne.n	80081fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fbb0 	bl	8008932 <USBD_CtlError>
                  break;
 80081d2:	e054      	b.n	800827e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081d4:	7bbb      	ldrb	r3, [r7, #14]
 80081d6:	f003 020f 	and.w	r2, r3, #15
 80081da:	6879      	ldr	r1, [r7, #4]
 80081dc:	4613      	mov	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	440b      	add	r3, r1
 80081e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80081ea:	881b      	ldrh	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d104      	bne.n	80081fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 fb9d 	bl	8008932 <USBD_CtlError>
                  break;
 80081f8:	e041      	b.n	800827e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	da0b      	bge.n	800821a <USBD_StdEPReq+0x2b2>
 8008202:	7bbb      	ldrb	r3, [r7, #14]
 8008204:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008208:	4613      	mov	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4413      	add	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	3310      	adds	r3, #16
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	4413      	add	r3, r2
 8008216:	3304      	adds	r3, #4
 8008218:	e00b      	b.n	8008232 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800821a:	7bbb      	ldrb	r3, [r7, #14]
 800821c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008220:	4613      	mov	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	4413      	add	r3, r2
 8008230:	3304      	adds	r3, #4
 8008232:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008234:	7bbb      	ldrb	r3, [r7, #14]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d002      	beq.n	8008240 <USBD_StdEPReq+0x2d8>
 800823a:	7bbb      	ldrb	r3, [r7, #14]
 800823c:	2b80      	cmp	r3, #128	; 0x80
 800823e:	d103      	bne.n	8008248 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	2200      	movs	r2, #0
 8008244:	601a      	str	r2, [r3, #0]
 8008246:	e00e      	b.n	8008266 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008248:	7bbb      	ldrb	r3, [r7, #14]
 800824a:	4619      	mov	r1, r3
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f001 f8a5 	bl	800939c <USBD_LL_IsStallEP>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d003      	beq.n	8008260 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	2201      	movs	r2, #1
 800825c:	601a      	str	r2, [r3, #0]
 800825e:	e002      	b.n	8008266 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	2200      	movs	r2, #0
 8008264:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	2202      	movs	r2, #2
 800826a:	4619      	mov	r1, r3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fbd1 	bl	8008a14 <USBD_CtlSendData>
              break;
 8008272:	e004      	b.n	800827e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fb5b 	bl	8008932 <USBD_CtlError>
              break;
 800827c:	bf00      	nop
          }
          break;
 800827e:	e004      	b.n	800828a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fb55 	bl	8008932 <USBD_CtlError>
          break;
 8008288:	bf00      	nop
      }
      break;
 800828a:	e005      	b.n	8008298 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fb4f 	bl	8008932 <USBD_CtlError>
      break;
 8008294:	e000      	b.n	8008298 <USBD_StdEPReq+0x330>
      break;
 8008296:	bf00      	nop
  }

  return ret;
 8008298:	7bfb      	ldrb	r3, [r7, #15]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
	...

080082a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082ae:	2300      	movs	r3, #0
 80082b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80082b2:	2300      	movs	r3, #0
 80082b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80082b6:	2300      	movs	r3, #0
 80082b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	885b      	ldrh	r3, [r3, #2]
 80082be:	0a1b      	lsrs	r3, r3, #8
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	3b01      	subs	r3, #1
 80082c4:	2b06      	cmp	r3, #6
 80082c6:	f200 8128 	bhi.w	800851a <USBD_GetDescriptor+0x276>
 80082ca:	a201      	add	r2, pc, #4	; (adr r2, 80082d0 <USBD_GetDescriptor+0x2c>)
 80082cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d0:	080082ed 	.word	0x080082ed
 80082d4:	08008305 	.word	0x08008305
 80082d8:	08008345 	.word	0x08008345
 80082dc:	0800851b 	.word	0x0800851b
 80082e0:	0800851b 	.word	0x0800851b
 80082e4:	080084bb 	.word	0x080084bb
 80082e8:	080084e7 	.word	0x080084e7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	7c12      	ldrb	r2, [r2, #16]
 80082f8:	f107 0108 	add.w	r1, r7, #8
 80082fc:	4610      	mov	r0, r2
 80082fe:	4798      	blx	r3
 8008300:	60f8      	str	r0, [r7, #12]
      break;
 8008302:	e112      	b.n	800852a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	7c1b      	ldrb	r3, [r3, #16]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10d      	bne.n	8008328 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008314:	f107 0208 	add.w	r2, r7, #8
 8008318:	4610      	mov	r0, r2
 800831a:	4798      	blx	r3
 800831c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3301      	adds	r3, #1
 8008322:	2202      	movs	r2, #2
 8008324:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008326:	e100      	b.n	800852a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800832e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008330:	f107 0208 	add.w	r2, r7, #8
 8008334:	4610      	mov	r0, r2
 8008336:	4798      	blx	r3
 8008338:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	3301      	adds	r3, #1
 800833e:	2202      	movs	r2, #2
 8008340:	701a      	strb	r2, [r3, #0]
      break;
 8008342:	e0f2      	b.n	800852a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	885b      	ldrh	r3, [r3, #2]
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b05      	cmp	r3, #5
 800834c:	f200 80ac 	bhi.w	80084a8 <USBD_GetDescriptor+0x204>
 8008350:	a201      	add	r2, pc, #4	; (adr r2, 8008358 <USBD_GetDescriptor+0xb4>)
 8008352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008356:	bf00      	nop
 8008358:	08008371 	.word	0x08008371
 800835c:	080083a5 	.word	0x080083a5
 8008360:	080083d9 	.word	0x080083d9
 8008364:	0800840d 	.word	0x0800840d
 8008368:	08008441 	.word	0x08008441
 800836c:	08008475 	.word	0x08008475
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00b      	beq.n	8008394 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	7c12      	ldrb	r2, [r2, #16]
 8008388:	f107 0108 	add.w	r1, r7, #8
 800838c:	4610      	mov	r0, r2
 800838e:	4798      	blx	r3
 8008390:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008392:	e091      	b.n	80084b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 facb 	bl	8008932 <USBD_CtlError>
            err++;
 800839c:	7afb      	ldrb	r3, [r7, #11]
 800839e:	3301      	adds	r3, #1
 80083a0:	72fb      	strb	r3, [r7, #11]
          break;
 80083a2:	e089      	b.n	80084b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00b      	beq.n	80083c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	7c12      	ldrb	r2, [r2, #16]
 80083bc:	f107 0108 	add.w	r1, r7, #8
 80083c0:	4610      	mov	r0, r2
 80083c2:	4798      	blx	r3
 80083c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083c6:	e077      	b.n	80084b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fab1 	bl	8008932 <USBD_CtlError>
            err++;
 80083d0:	7afb      	ldrb	r3, [r7, #11]
 80083d2:	3301      	adds	r3, #1
 80083d4:	72fb      	strb	r3, [r7, #11]
          break;
 80083d6:	e06f      	b.n	80084b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00b      	beq.n	80083fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	7c12      	ldrb	r2, [r2, #16]
 80083f0:	f107 0108 	add.w	r1, r7, #8
 80083f4:	4610      	mov	r0, r2
 80083f6:	4798      	blx	r3
 80083f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083fa:	e05d      	b.n	80084b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fa97 	bl	8008932 <USBD_CtlError>
            err++;
 8008404:	7afb      	ldrb	r3, [r7, #11]
 8008406:	3301      	adds	r3, #1
 8008408:	72fb      	strb	r3, [r7, #11]
          break;
 800840a:	e055      	b.n	80084b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00b      	beq.n	8008430 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	7c12      	ldrb	r2, [r2, #16]
 8008424:	f107 0108 	add.w	r1, r7, #8
 8008428:	4610      	mov	r0, r2
 800842a:	4798      	blx	r3
 800842c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800842e:	e043      	b.n	80084b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fa7d 	bl	8008932 <USBD_CtlError>
            err++;
 8008438:	7afb      	ldrb	r3, [r7, #11]
 800843a:	3301      	adds	r3, #1
 800843c:	72fb      	strb	r3, [r7, #11]
          break;
 800843e:	e03b      	b.n	80084b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008446:	695b      	ldr	r3, [r3, #20]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00b      	beq.n	8008464 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008452:	695b      	ldr	r3, [r3, #20]
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	7c12      	ldrb	r2, [r2, #16]
 8008458:	f107 0108 	add.w	r1, r7, #8
 800845c:	4610      	mov	r0, r2
 800845e:	4798      	blx	r3
 8008460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008462:	e029      	b.n	80084b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008464:	6839      	ldr	r1, [r7, #0]
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fa63 	bl	8008932 <USBD_CtlError>
            err++;
 800846c:	7afb      	ldrb	r3, [r7, #11]
 800846e:	3301      	adds	r3, #1
 8008470:	72fb      	strb	r3, [r7, #11]
          break;
 8008472:	e021      	b.n	80084b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00b      	beq.n	8008498 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	7c12      	ldrb	r2, [r2, #16]
 800848c:	f107 0108 	add.w	r1, r7, #8
 8008490:	4610      	mov	r0, r2
 8008492:	4798      	blx	r3
 8008494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008496:	e00f      	b.n	80084b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fa49 	bl	8008932 <USBD_CtlError>
            err++;
 80084a0:	7afb      	ldrb	r3, [r7, #11]
 80084a2:	3301      	adds	r3, #1
 80084a4:	72fb      	strb	r3, [r7, #11]
          break;
 80084a6:	e007      	b.n	80084b8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fa41 	bl	8008932 <USBD_CtlError>
          err++;
 80084b0:	7afb      	ldrb	r3, [r7, #11]
 80084b2:	3301      	adds	r3, #1
 80084b4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80084b6:	bf00      	nop
      }
      break;
 80084b8:	e037      	b.n	800852a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	7c1b      	ldrb	r3, [r3, #16]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d109      	bne.n	80084d6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ca:	f107 0208 	add.w	r2, r7, #8
 80084ce:	4610      	mov	r0, r2
 80084d0:	4798      	blx	r3
 80084d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084d4:	e029      	b.n	800852a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fa2a 	bl	8008932 <USBD_CtlError>
        err++;
 80084de:	7afb      	ldrb	r3, [r7, #11]
 80084e0:	3301      	adds	r3, #1
 80084e2:	72fb      	strb	r3, [r7, #11]
      break;
 80084e4:	e021      	b.n	800852a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	7c1b      	ldrb	r3, [r3, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d10d      	bne.n	800850a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f6:	f107 0208 	add.w	r2, r7, #8
 80084fa:	4610      	mov	r0, r2
 80084fc:	4798      	blx	r3
 80084fe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	3301      	adds	r3, #1
 8008504:	2207      	movs	r2, #7
 8008506:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008508:	e00f      	b.n	800852a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fa10 	bl	8008932 <USBD_CtlError>
        err++;
 8008512:	7afb      	ldrb	r3, [r7, #11]
 8008514:	3301      	adds	r3, #1
 8008516:	72fb      	strb	r3, [r7, #11]
      break;
 8008518:	e007      	b.n	800852a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800851a:	6839      	ldr	r1, [r7, #0]
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 fa08 	bl	8008932 <USBD_CtlError>
      err++;
 8008522:	7afb      	ldrb	r3, [r7, #11]
 8008524:	3301      	adds	r3, #1
 8008526:	72fb      	strb	r3, [r7, #11]
      break;
 8008528:	bf00      	nop
  }

  if (err != 0U)
 800852a:	7afb      	ldrb	r3, [r7, #11]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d11e      	bne.n	800856e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	88db      	ldrh	r3, [r3, #6]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d016      	beq.n	8008566 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008538:	893b      	ldrh	r3, [r7, #8]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00e      	beq.n	800855c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	88da      	ldrh	r2, [r3, #6]
 8008542:	893b      	ldrh	r3, [r7, #8]
 8008544:	4293      	cmp	r3, r2
 8008546:	bf28      	it	cs
 8008548:	4613      	movcs	r3, r2
 800854a:	b29b      	uxth	r3, r3
 800854c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800854e:	893b      	ldrh	r3, [r7, #8]
 8008550:	461a      	mov	r2, r3
 8008552:	68f9      	ldr	r1, [r7, #12]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 fa5d 	bl	8008a14 <USBD_CtlSendData>
 800855a:	e009      	b.n	8008570 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800855c:	6839      	ldr	r1, [r7, #0]
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f9e7 	bl	8008932 <USBD_CtlError>
 8008564:	e004      	b.n	8008570 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 faae 	bl	8008ac8 <USBD_CtlSendStatus>
 800856c:	e000      	b.n	8008570 <USBD_GetDescriptor+0x2cc>
    return;
 800856e:	bf00      	nop
  }
}
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop

08008578 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	889b      	ldrh	r3, [r3, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d131      	bne.n	80085ee <USBD_SetAddress+0x76>
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	88db      	ldrh	r3, [r3, #6]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d12d      	bne.n	80085ee <USBD_SetAddress+0x76>
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	885b      	ldrh	r3, [r3, #2]
 8008596:	2b7f      	cmp	r3, #127	; 0x7f
 8008598:	d829      	bhi.n	80085ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	885b      	ldrh	r3, [r3, #2]
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b03      	cmp	r3, #3
 80085b0:	d104      	bne.n	80085bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80085b2:	6839      	ldr	r1, [r7, #0]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f9bc 	bl	8008932 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ba:	e01d      	b.n	80085f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	7bfa      	ldrb	r2, [r7, #15]
 80085c0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
 80085c6:	4619      	mov	r1, r3
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 ff13 	bl	80093f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fa7a 	bl	8008ac8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80085d4:	7bfb      	ldrb	r3, [r7, #15]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d004      	beq.n	80085e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2202      	movs	r2, #2
 80085de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085e2:	e009      	b.n	80085f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ec:	e004      	b.n	80085f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f99e 	bl	8008932 <USBD_CtlError>
  }
}
 80085f6:	bf00      	nop
 80085f8:	bf00      	nop
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800860a:	2300      	movs	r3, #0
 800860c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	885b      	ldrh	r3, [r3, #2]
 8008612:	b2da      	uxtb	r2, r3
 8008614:	4b4e      	ldr	r3, [pc, #312]	; (8008750 <USBD_SetConfig+0x150>)
 8008616:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008618:	4b4d      	ldr	r3, [pc, #308]	; (8008750 <USBD_SetConfig+0x150>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d905      	bls.n	800862c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f985 	bl	8008932 <USBD_CtlError>
    return USBD_FAIL;
 8008628:	2303      	movs	r3, #3
 800862a:	e08c      	b.n	8008746 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008632:	b2db      	uxtb	r3, r3
 8008634:	2b02      	cmp	r3, #2
 8008636:	d002      	beq.n	800863e <USBD_SetConfig+0x3e>
 8008638:	2b03      	cmp	r3, #3
 800863a:	d029      	beq.n	8008690 <USBD_SetConfig+0x90>
 800863c:	e075      	b.n	800872a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800863e:	4b44      	ldr	r3, [pc, #272]	; (8008750 <USBD_SetConfig+0x150>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d020      	beq.n	8008688 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008646:	4b42      	ldr	r3, [pc, #264]	; (8008750 <USBD_SetConfig+0x150>)
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	461a      	mov	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008650:	4b3f      	ldr	r3, [pc, #252]	; (8008750 <USBD_SetConfig+0x150>)
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	4619      	mov	r1, r3
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7fe ffe7 	bl	800762a <USBD_SetClassConfig>
 800865c:	4603      	mov	r3, r0
 800865e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008660:	7bfb      	ldrb	r3, [r7, #15]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d008      	beq.n	8008678 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 f962 	bl	8008932 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2202      	movs	r2, #2
 8008672:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008676:	e065      	b.n	8008744 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fa25 	bl	8008ac8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2203      	movs	r2, #3
 8008682:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008686:	e05d      	b.n	8008744 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 fa1d 	bl	8008ac8 <USBD_CtlSendStatus>
      break;
 800868e:	e059      	b.n	8008744 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008690:	4b2f      	ldr	r3, [pc, #188]	; (8008750 <USBD_SetConfig+0x150>)
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d112      	bne.n	80086be <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2202      	movs	r2, #2
 800869c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80086a0:	4b2b      	ldr	r3, [pc, #172]	; (8008750 <USBD_SetConfig+0x150>)
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	461a      	mov	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086aa:	4b29      	ldr	r3, [pc, #164]	; (8008750 <USBD_SetConfig+0x150>)
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	4619      	mov	r1, r3
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7fe ffd6 	bl	8007662 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fa06 	bl	8008ac8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80086bc:	e042      	b.n	8008744 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80086be:	4b24      	ldr	r3, [pc, #144]	; (8008750 <USBD_SetConfig+0x150>)
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	461a      	mov	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d02a      	beq.n	8008722 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f7fe ffc4 	bl	8007662 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80086da:	4b1d      	ldr	r3, [pc, #116]	; (8008750 <USBD_SetConfig+0x150>)
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	461a      	mov	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80086e4:	4b1a      	ldr	r3, [pc, #104]	; (8008750 <USBD_SetConfig+0x150>)
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	4619      	mov	r1, r3
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7fe ff9d 	bl	800762a <USBD_SetClassConfig>
 80086f0:	4603      	mov	r3, r0
 80086f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80086f4:	7bfb      	ldrb	r3, [r7, #15]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00f      	beq.n	800871a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80086fa:	6839      	ldr	r1, [r7, #0]
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f918 	bl	8008932 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	b2db      	uxtb	r3, r3
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7fe ffa9 	bl	8007662 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2202      	movs	r2, #2
 8008714:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008718:	e014      	b.n	8008744 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f9d4 	bl	8008ac8 <USBD_CtlSendStatus>
      break;
 8008720:	e010      	b.n	8008744 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f9d0 	bl	8008ac8 <USBD_CtlSendStatus>
      break;
 8008728:	e00c      	b.n	8008744 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800872a:	6839      	ldr	r1, [r7, #0]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f900 	bl	8008932 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008732:	4b07      	ldr	r3, [pc, #28]	; (8008750 <USBD_SetConfig+0x150>)
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	4619      	mov	r1, r3
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f7fe ff92 	bl	8007662 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800873e:	2303      	movs	r3, #3
 8008740:	73fb      	strb	r3, [r7, #15]
      break;
 8008742:	bf00      	nop
  }

  return ret;
 8008744:	7bfb      	ldrb	r3, [r7, #15]
}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	200002cc 	.word	0x200002cc

08008754 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	88db      	ldrh	r3, [r3, #6]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d004      	beq.n	8008770 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008766:	6839      	ldr	r1, [r7, #0]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 f8e2 	bl	8008932 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800876e:	e023      	b.n	80087b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008776:	b2db      	uxtb	r3, r3
 8008778:	2b02      	cmp	r3, #2
 800877a:	dc02      	bgt.n	8008782 <USBD_GetConfig+0x2e>
 800877c:	2b00      	cmp	r3, #0
 800877e:	dc03      	bgt.n	8008788 <USBD_GetConfig+0x34>
 8008780:	e015      	b.n	80087ae <USBD_GetConfig+0x5a>
 8008782:	2b03      	cmp	r3, #3
 8008784:	d00b      	beq.n	800879e <USBD_GetConfig+0x4a>
 8008786:	e012      	b.n	80087ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	3308      	adds	r3, #8
 8008792:	2201      	movs	r2, #1
 8008794:	4619      	mov	r1, r3
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f93c 	bl	8008a14 <USBD_CtlSendData>
        break;
 800879c:	e00c      	b.n	80087b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	3304      	adds	r3, #4
 80087a2:	2201      	movs	r2, #1
 80087a4:	4619      	mov	r1, r3
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f934 	bl	8008a14 <USBD_CtlSendData>
        break;
 80087ac:	e004      	b.n	80087b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f8be 	bl	8008932 <USBD_CtlError>
        break;
 80087b6:	bf00      	nop
}
 80087b8:	bf00      	nop
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	3b01      	subs	r3, #1
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d81e      	bhi.n	8008816 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	88db      	ldrh	r3, [r3, #6]
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d004      	beq.n	80087ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f8a5 	bl	8008932 <USBD_CtlError>
        break;
 80087e8:	e01a      	b.n	8008820 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2201      	movs	r2, #1
 80087ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d005      	beq.n	8008806 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	f043 0202 	orr.w	r2, r3, #2
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	330c      	adds	r3, #12
 800880a:	2202      	movs	r2, #2
 800880c:	4619      	mov	r1, r3
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f900 	bl	8008a14 <USBD_CtlSendData>
      break;
 8008814:	e004      	b.n	8008820 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008816:	6839      	ldr	r1, [r7, #0]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 f88a 	bl	8008932 <USBD_CtlError>
      break;
 800881e:	bf00      	nop
  }
}
 8008820:	bf00      	nop
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	885b      	ldrh	r3, [r3, #2]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d107      	bne.n	800884a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f940 	bl	8008ac8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008848:	e013      	b.n	8008872 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	885b      	ldrh	r3, [r3, #2]
 800884e:	2b02      	cmp	r3, #2
 8008850:	d10b      	bne.n	800886a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	889b      	ldrh	r3, [r3, #4]
 8008856:	0a1b      	lsrs	r3, r3, #8
 8008858:	b29b      	uxth	r3, r3
 800885a:	b2da      	uxtb	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f930 	bl	8008ac8 <USBD_CtlSendStatus>
}
 8008868:	e003      	b.n	8008872 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800886a:	6839      	ldr	r1, [r7, #0]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f860 	bl	8008932 <USBD_CtlError>
}
 8008872:	bf00      	nop
 8008874:	3708      	adds	r7, #8
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b082      	sub	sp, #8
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800888a:	b2db      	uxtb	r3, r3
 800888c:	3b01      	subs	r3, #1
 800888e:	2b02      	cmp	r3, #2
 8008890:	d80b      	bhi.n	80088aa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	885b      	ldrh	r3, [r3, #2]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d10c      	bne.n	80088b4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f910 	bl	8008ac8 <USBD_CtlSendStatus>
      }
      break;
 80088a8:	e004      	b.n	80088b4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f840 	bl	8008932 <USBD_CtlError>
      break;
 80088b2:	e000      	b.n	80088b6 <USBD_ClrFeature+0x3c>
      break;
 80088b4:	bf00      	nop
  }
}
 80088b6:	bf00      	nop
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b084      	sub	sp, #16
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	781a      	ldrb	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	3301      	adds	r3, #1
 80088d8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	781a      	ldrb	r2, [r3, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	3301      	adds	r3, #1
 80088e6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f7ff fa41 	bl	8007d70 <SWAPBYTE>
 80088ee:	4603      	mov	r3, r0
 80088f0:	461a      	mov	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	3301      	adds	r3, #1
 80088fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	3301      	adds	r3, #1
 8008900:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f7ff fa34 	bl	8007d70 <SWAPBYTE>
 8008908:	4603      	mov	r3, r0
 800890a:	461a      	mov	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	3301      	adds	r3, #1
 8008914:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	3301      	adds	r3, #1
 800891a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f7ff fa27 	bl	8007d70 <SWAPBYTE>
 8008922:	4603      	mov	r3, r0
 8008924:	461a      	mov	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	80da      	strh	r2, [r3, #6]
}
 800892a:	bf00      	nop
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b082      	sub	sp, #8
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800893c:	2180      	movs	r1, #128	; 0x80
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fcee 	bl	8009320 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008944:	2100      	movs	r1, #0
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fcea 	bl	8009320 <USBD_LL_StallEP>
}
 800894c:	bf00      	nop
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b086      	sub	sp, #24
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008960:	2300      	movs	r3, #0
 8008962:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d036      	beq.n	80089d8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800896e:	6938      	ldr	r0, [r7, #16]
 8008970:	f000 f836 	bl	80089e0 <USBD_GetLen>
 8008974:	4603      	mov	r3, r0
 8008976:	3301      	adds	r3, #1
 8008978:	b29b      	uxth	r3, r3
 800897a:	005b      	lsls	r3, r3, #1
 800897c:	b29a      	uxth	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008982:	7dfb      	ldrb	r3, [r7, #23]
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	4413      	add	r3, r2
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	7812      	ldrb	r2, [r2, #0]
 800898c:	701a      	strb	r2, [r3, #0]
  idx++;
 800898e:	7dfb      	ldrb	r3, [r7, #23]
 8008990:	3301      	adds	r3, #1
 8008992:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008994:	7dfb      	ldrb	r3, [r7, #23]
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	4413      	add	r3, r2
 800899a:	2203      	movs	r2, #3
 800899c:	701a      	strb	r2, [r3, #0]
  idx++;
 800899e:	7dfb      	ldrb	r3, [r7, #23]
 80089a0:	3301      	adds	r3, #1
 80089a2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80089a4:	e013      	b.n	80089ce <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80089a6:	7dfb      	ldrb	r3, [r7, #23]
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	4413      	add	r3, r2
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	7812      	ldrb	r2, [r2, #0]
 80089b0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	3301      	adds	r3, #1
 80089b6:	613b      	str	r3, [r7, #16]
    idx++;
 80089b8:	7dfb      	ldrb	r3, [r7, #23]
 80089ba:	3301      	adds	r3, #1
 80089bc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80089be:	7dfb      	ldrb	r3, [r7, #23]
 80089c0:	68ba      	ldr	r2, [r7, #8]
 80089c2:	4413      	add	r3, r2
 80089c4:	2200      	movs	r2, #0
 80089c6:	701a      	strb	r2, [r3, #0]
    idx++;
 80089c8:	7dfb      	ldrb	r3, [r7, #23]
 80089ca:	3301      	adds	r3, #1
 80089cc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1e7      	bne.n	80089a6 <USBD_GetString+0x52>
 80089d6:	e000      	b.n	80089da <USBD_GetString+0x86>
    return;
 80089d8:	bf00      	nop
  }
}
 80089da:	3718      	adds	r7, #24
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80089e8:	2300      	movs	r3, #0
 80089ea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80089f0:	e005      	b.n	80089fe <USBD_GetLen+0x1e>
  {
    len++;
 80089f2:	7bfb      	ldrb	r3, [r7, #15]
 80089f4:	3301      	adds	r3, #1
 80089f6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	3301      	adds	r3, #1
 80089fc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1f5      	bne.n	80089f2 <USBD_GetLen+0x12>
  }

  return len;
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3714      	adds	r7, #20
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2202      	movs	r2, #2
 8008a24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	68ba      	ldr	r2, [r7, #8]
 8008a38:	2100      	movs	r1, #0
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f000 fcf9 	bl	8009432 <USBD_LL_Transmit>

  return USBD_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b084      	sub	sp, #16
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	60f8      	str	r0, [r7, #12]
 8008a52:	60b9      	str	r1, [r7, #8]
 8008a54:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	68ba      	ldr	r2, [r7, #8]
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f000 fce8 	bl	8009432 <USBD_LL_Transmit>

  return USBD_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2203      	movs	r2, #3
 8008a7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	2100      	movs	r1, #0
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f000 fcec 	bl	8009474 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	60f8      	str	r0, [r7, #12]
 8008aae:	60b9      	str	r1, [r7, #8]
 8008ab0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f000 fcdb 	bl	8009474 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2204      	movs	r2, #4
 8008ad4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ad8:	2300      	movs	r3, #0
 8008ada:	2200      	movs	r2, #0
 8008adc:	2100      	movs	r1, #0
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fca7 	bl	8009432 <USBD_LL_Transmit>

  return USBD_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b082      	sub	sp, #8
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2205      	movs	r2, #5
 8008afa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008afe:	2300      	movs	r3, #0
 8008b00:	2200      	movs	r2, #0
 8008b02:	2100      	movs	r1, #0
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fcb5 	bl	8009474 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	4912      	ldr	r1, [pc, #72]	; (8008b64 <MX_USB_DEVICE_Init+0x50>)
 8008b1c:	4812      	ldr	r0, [pc, #72]	; (8008b68 <MX_USB_DEVICE_Init+0x54>)
 8008b1e:	f7fe fd07 	bl	8007530 <USBD_Init>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d001      	beq.n	8008b2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008b28:	f7f7 ffe8 	bl	8000afc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008b2c:	490f      	ldr	r1, [pc, #60]	; (8008b6c <MX_USB_DEVICE_Init+0x58>)
 8008b2e:	480e      	ldr	r0, [pc, #56]	; (8008b68 <MX_USB_DEVICE_Init+0x54>)
 8008b30:	f7fe fd2e 	bl	8007590 <USBD_RegisterClass>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008b3a:	f7f7 ffdf 	bl	8000afc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008b3e:	490c      	ldr	r1, [pc, #48]	; (8008b70 <MX_USB_DEVICE_Init+0x5c>)
 8008b40:	4809      	ldr	r0, [pc, #36]	; (8008b68 <MX_USB_DEVICE_Init+0x54>)
 8008b42:	f7fe fc1f 	bl	8007384 <USBD_CDC_RegisterInterface>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d001      	beq.n	8008b50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008b4c:	f7f7 ffd6 	bl	8000afc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008b50:	4805      	ldr	r0, [pc, #20]	; (8008b68 <MX_USB_DEVICE_Init+0x54>)
 8008b52:	f7fe fd53 	bl	80075fc <USBD_Start>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008b5c:	f7f7 ffce 	bl	8000afc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b60:	bf00      	nop
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	200000b0 	.word	0x200000b0
 8008b68:	200002d0 	.word	0x200002d0
 8008b6c:	2000001c 	.word	0x2000001c
 8008b70:	2000009c 	.word	0x2000009c

08008b74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b78:	2200      	movs	r2, #0
 8008b7a:	4905      	ldr	r1, [pc, #20]	; (8008b90 <CDC_Init_FS+0x1c>)
 8008b7c:	4805      	ldr	r0, [pc, #20]	; (8008b94 <CDC_Init_FS+0x20>)
 8008b7e:	f7fe fc1b 	bl	80073b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b82:	4905      	ldr	r1, [pc, #20]	; (8008b98 <CDC_Init_FS+0x24>)
 8008b84:	4803      	ldr	r0, [pc, #12]	; (8008b94 <CDC_Init_FS+0x20>)
 8008b86:	f7fe fc39 	bl	80073fc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	20000dac 	.word	0x20000dac
 8008b94:	200002d0 	.word	0x200002d0
 8008b98:	200005ac 	.word	0x200005ac

08008b9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008ba0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	6039      	str	r1, [r7, #0]
 8008bb6:	71fb      	strb	r3, [r7, #7]
 8008bb8:	4613      	mov	r3, r2
 8008bba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008bbc:	79fb      	ldrb	r3, [r7, #7]
 8008bbe:	2b23      	cmp	r3, #35	; 0x23
 8008bc0:	d84a      	bhi.n	8008c58 <CDC_Control_FS+0xac>
 8008bc2:	a201      	add	r2, pc, #4	; (adr r2, 8008bc8 <CDC_Control_FS+0x1c>)
 8008bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc8:	08008c59 	.word	0x08008c59
 8008bcc:	08008c59 	.word	0x08008c59
 8008bd0:	08008c59 	.word	0x08008c59
 8008bd4:	08008c59 	.word	0x08008c59
 8008bd8:	08008c59 	.word	0x08008c59
 8008bdc:	08008c59 	.word	0x08008c59
 8008be0:	08008c59 	.word	0x08008c59
 8008be4:	08008c59 	.word	0x08008c59
 8008be8:	08008c59 	.word	0x08008c59
 8008bec:	08008c59 	.word	0x08008c59
 8008bf0:	08008c59 	.word	0x08008c59
 8008bf4:	08008c59 	.word	0x08008c59
 8008bf8:	08008c59 	.word	0x08008c59
 8008bfc:	08008c59 	.word	0x08008c59
 8008c00:	08008c59 	.word	0x08008c59
 8008c04:	08008c59 	.word	0x08008c59
 8008c08:	08008c59 	.word	0x08008c59
 8008c0c:	08008c59 	.word	0x08008c59
 8008c10:	08008c59 	.word	0x08008c59
 8008c14:	08008c59 	.word	0x08008c59
 8008c18:	08008c59 	.word	0x08008c59
 8008c1c:	08008c59 	.word	0x08008c59
 8008c20:	08008c59 	.word	0x08008c59
 8008c24:	08008c59 	.word	0x08008c59
 8008c28:	08008c59 	.word	0x08008c59
 8008c2c:	08008c59 	.word	0x08008c59
 8008c30:	08008c59 	.word	0x08008c59
 8008c34:	08008c59 	.word	0x08008c59
 8008c38:	08008c59 	.word	0x08008c59
 8008c3c:	08008c59 	.word	0x08008c59
 8008c40:	08008c59 	.word	0x08008c59
 8008c44:	08008c59 	.word	0x08008c59
 8008c48:	08008c59 	.word	0x08008c59
 8008c4c:	08008c59 	.word	0x08008c59
 8008c50:	08008c59 	.word	0x08008c59
 8008c54:	08008c59 	.word	0x08008c59
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008c58:	bf00      	nop
  }

  return (USBD_OK);
 8008c5a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008c72:	6879      	ldr	r1, [r7, #4]
 8008c74:	4805      	ldr	r0, [pc, #20]	; (8008c8c <CDC_Receive_FS+0x24>)
 8008c76:	f7fe fbc1 	bl	80073fc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008c7a:	4804      	ldr	r0, [pc, #16]	; (8008c8c <CDC_Receive_FS+0x24>)
 8008c7c:	f7fe fc22 	bl	80074c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008c80:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	200002d0 	.word	0x200002d0

08008c90 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008ca0:	4b0d      	ldr	r3, [pc, #52]	; (8008cd8 <CDC_Transmit_FS+0x48>)
 8008ca2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ca6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e00b      	b.n	8008cce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008cb6:	887b      	ldrh	r3, [r7, #2]
 8008cb8:	461a      	mov	r2, r3
 8008cba:	6879      	ldr	r1, [r7, #4]
 8008cbc:	4806      	ldr	r0, [pc, #24]	; (8008cd8 <CDC_Transmit_FS+0x48>)
 8008cbe:	f7fe fb7b 	bl	80073b8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008cc2:	4805      	ldr	r0, [pc, #20]	; (8008cd8 <CDC_Transmit_FS+0x48>)
 8008cc4:	f7fe fbb8 	bl	8007438 <USBD_CDC_TransmitPacket>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	200002d0 	.word	0x200002d0

08008cdc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b087      	sub	sp, #28
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008cea:	2300      	movs	r3, #0
 8008cec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008cee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	371c      	adds	r7, #28
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
	...

08008d00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	4603      	mov	r3, r0
 8008d08:	6039      	str	r1, [r7, #0]
 8008d0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	2212      	movs	r2, #18
 8008d10:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008d12:	4b03      	ldr	r3, [pc, #12]	; (8008d20 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	200000cc 	.word	0x200000cc

08008d24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	6039      	str	r1, [r7, #0]
 8008d2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	2204      	movs	r2, #4
 8008d34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d36:	4b03      	ldr	r3, [pc, #12]	; (8008d44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr
 8008d44:	200000e0 	.word	0x200000e0

08008d48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	4603      	mov	r3, r0
 8008d50:	6039      	str	r1, [r7, #0]
 8008d52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d54:	79fb      	ldrb	r3, [r7, #7]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d105      	bne.n	8008d66 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d5a:	683a      	ldr	r2, [r7, #0]
 8008d5c:	4907      	ldr	r1, [pc, #28]	; (8008d7c <USBD_FS_ProductStrDescriptor+0x34>)
 8008d5e:	4808      	ldr	r0, [pc, #32]	; (8008d80 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d60:	f7ff fdf8 	bl	8008954 <USBD_GetString>
 8008d64:	e004      	b.n	8008d70 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d66:	683a      	ldr	r2, [r7, #0]
 8008d68:	4904      	ldr	r1, [pc, #16]	; (8008d7c <USBD_FS_ProductStrDescriptor+0x34>)
 8008d6a:	4805      	ldr	r0, [pc, #20]	; (8008d80 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d6c:	f7ff fdf2 	bl	8008954 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d70:	4b02      	ldr	r3, [pc, #8]	; (8008d7c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	200015ac 	.word	0x200015ac
 8008d80:	0800a4cc 	.word	0x0800a4cc

08008d84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	6039      	str	r1, [r7, #0]
 8008d8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d90:	683a      	ldr	r2, [r7, #0]
 8008d92:	4904      	ldr	r1, [pc, #16]	; (8008da4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d94:	4804      	ldr	r0, [pc, #16]	; (8008da8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d96:	f7ff fddd 	bl	8008954 <USBD_GetString>
  return USBD_StrDesc;
 8008d9a:	4b02      	ldr	r3, [pc, #8]	; (8008da4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	200015ac 	.word	0x200015ac
 8008da8:	0800a4e4 	.word	0x0800a4e4

08008dac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	4603      	mov	r3, r0
 8008db4:	6039      	str	r1, [r7, #0]
 8008db6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	221a      	movs	r2, #26
 8008dbc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008dbe:	f000 f843 	bl	8008e48 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008dc2:	4b02      	ldr	r3, [pc, #8]	; (8008dcc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	200000e4 	.word	0x200000e4

08008dd0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	6039      	str	r1, [r7, #0]
 8008dda:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ddc:	79fb      	ldrb	r3, [r7, #7]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d105      	bne.n	8008dee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008de2:	683a      	ldr	r2, [r7, #0]
 8008de4:	4907      	ldr	r1, [pc, #28]	; (8008e04 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008de6:	4808      	ldr	r0, [pc, #32]	; (8008e08 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008de8:	f7ff fdb4 	bl	8008954 <USBD_GetString>
 8008dec:	e004      	b.n	8008df8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	4904      	ldr	r1, [pc, #16]	; (8008e04 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008df2:	4805      	ldr	r0, [pc, #20]	; (8008e08 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008df4:	f7ff fdae 	bl	8008954 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008df8:	4b02      	ldr	r3, [pc, #8]	; (8008e04 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	200015ac 	.word	0x200015ac
 8008e08:	0800a4f8 	.word	0x0800a4f8

08008e0c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	4603      	mov	r3, r0
 8008e14:	6039      	str	r1, [r7, #0]
 8008e16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e18:	79fb      	ldrb	r3, [r7, #7]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d105      	bne.n	8008e2a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	4907      	ldr	r1, [pc, #28]	; (8008e40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e22:	4808      	ldr	r0, [pc, #32]	; (8008e44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e24:	f7ff fd96 	bl	8008954 <USBD_GetString>
 8008e28:	e004      	b.n	8008e34 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e2a:	683a      	ldr	r2, [r7, #0]
 8008e2c:	4904      	ldr	r1, [pc, #16]	; (8008e40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e2e:	4805      	ldr	r0, [pc, #20]	; (8008e44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e30:	f7ff fd90 	bl	8008954 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e34:	4b02      	ldr	r3, [pc, #8]	; (8008e40 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	200015ac 	.word	0x200015ac
 8008e44:	0800a504 	.word	0x0800a504

08008e48 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e4e:	4b0f      	ldr	r3, [pc, #60]	; (8008e8c <Get_SerialNum+0x44>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e54:	4b0e      	ldr	r3, [pc, #56]	; (8008e90 <Get_SerialNum+0x48>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008e5a:	4b0e      	ldr	r3, [pc, #56]	; (8008e94 <Get_SerialNum+0x4c>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4413      	add	r3, r2
 8008e66:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d009      	beq.n	8008e82 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008e6e:	2208      	movs	r2, #8
 8008e70:	4909      	ldr	r1, [pc, #36]	; (8008e98 <Get_SerialNum+0x50>)
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f000 f814 	bl	8008ea0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e78:	2204      	movs	r2, #4
 8008e7a:	4908      	ldr	r1, [pc, #32]	; (8008e9c <Get_SerialNum+0x54>)
 8008e7c:	68b8      	ldr	r0, [r7, #8]
 8008e7e:	f000 f80f 	bl	8008ea0 <IntToUnicode>
  }
}
 8008e82:	bf00      	nop
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	1fff7a10 	.word	0x1fff7a10
 8008e90:	1fff7a14 	.word	0x1fff7a14
 8008e94:	1fff7a18 	.word	0x1fff7a18
 8008e98:	200000e6 	.word	0x200000e6
 8008e9c:	200000f6 	.word	0x200000f6

08008ea0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b087      	sub	sp, #28
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	75fb      	strb	r3, [r7, #23]
 8008eb6:	e027      	b.n	8008f08 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	0f1b      	lsrs	r3, r3, #28
 8008ebc:	2b09      	cmp	r3, #9
 8008ebe:	d80b      	bhi.n	8008ed8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	0f1b      	lsrs	r3, r3, #28
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
 8008ec8:	005b      	lsls	r3, r3, #1
 8008eca:	4619      	mov	r1, r3
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	440b      	add	r3, r1
 8008ed0:	3230      	adds	r2, #48	; 0x30
 8008ed2:	b2d2      	uxtb	r2, r2
 8008ed4:	701a      	strb	r2, [r3, #0]
 8008ed6:	e00a      	b.n	8008eee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	0f1b      	lsrs	r3, r3, #28
 8008edc:	b2da      	uxtb	r2, r3
 8008ede:	7dfb      	ldrb	r3, [r7, #23]
 8008ee0:	005b      	lsls	r3, r3, #1
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	440b      	add	r3, r1
 8008ee8:	3237      	adds	r2, #55	; 0x37
 8008eea:	b2d2      	uxtb	r2, r2
 8008eec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	011b      	lsls	r3, r3, #4
 8008ef2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ef4:	7dfb      	ldrb	r3, [r7, #23]
 8008ef6:	005b      	lsls	r3, r3, #1
 8008ef8:	3301      	adds	r3, #1
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	4413      	add	r3, r2
 8008efe:	2200      	movs	r2, #0
 8008f00:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f02:	7dfb      	ldrb	r3, [r7, #23]
 8008f04:	3301      	adds	r3, #1
 8008f06:	75fb      	strb	r3, [r7, #23]
 8008f08:	7dfa      	ldrb	r2, [r7, #23]
 8008f0a:	79fb      	ldrb	r3, [r7, #7]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d3d3      	bcc.n	8008eb8 <IntToUnicode+0x18>
  }
}
 8008f10:	bf00      	nop
 8008f12:	bf00      	nop
 8008f14:	371c      	adds	r7, #28
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
	...

08008f20 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b08a      	sub	sp, #40	; 0x28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f28:	f107 0314 	add.w	r3, r7, #20
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	601a      	str	r2, [r3, #0]
 8008f30:	605a      	str	r2, [r3, #4]
 8008f32:	609a      	str	r2, [r3, #8]
 8008f34:	60da      	str	r2, [r3, #12]
 8008f36:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f40:	d147      	bne.n	8008fd2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f42:	2300      	movs	r3, #0
 8008f44:	613b      	str	r3, [r7, #16]
 8008f46:	4b25      	ldr	r3, [pc, #148]	; (8008fdc <HAL_PCD_MspInit+0xbc>)
 8008f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4a:	4a24      	ldr	r2, [pc, #144]	; (8008fdc <HAL_PCD_MspInit+0xbc>)
 8008f4c:	f043 0301 	orr.w	r3, r3, #1
 8008f50:	6313      	str	r3, [r2, #48]	; 0x30
 8008f52:	4b22      	ldr	r3, [pc, #136]	; (8008fdc <HAL_PCD_MspInit+0xbc>)
 8008f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f56:	f003 0301 	and.w	r3, r3, #1
 8008f5a:	613b      	str	r3, [r7, #16]
 8008f5c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f64:	2300      	movs	r3, #0
 8008f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008f6c:	f107 0314 	add.w	r3, r7, #20
 8008f70:	4619      	mov	r1, r3
 8008f72:	481b      	ldr	r0, [pc, #108]	; (8008fe0 <HAL_PCD_MspInit+0xc0>)
 8008f74:	f7f8 fca0 	bl	80018b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008f78:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f7e:	2302      	movs	r3, #2
 8008f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f82:	2300      	movs	r3, #0
 8008f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f86:	2300      	movs	r3, #0
 8008f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f8a:	230a      	movs	r3, #10
 8008f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f8e:	f107 0314 	add.w	r3, r7, #20
 8008f92:	4619      	mov	r1, r3
 8008f94:	4812      	ldr	r0, [pc, #72]	; (8008fe0 <HAL_PCD_MspInit+0xc0>)
 8008f96:	f7f8 fc8f 	bl	80018b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f9a:	4b10      	ldr	r3, [pc, #64]	; (8008fdc <HAL_PCD_MspInit+0xbc>)
 8008f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f9e:	4a0f      	ldr	r2, [pc, #60]	; (8008fdc <HAL_PCD_MspInit+0xbc>)
 8008fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fa4:	6353      	str	r3, [r2, #52]	; 0x34
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	60fb      	str	r3, [r7, #12]
 8008faa:	4b0c      	ldr	r3, [pc, #48]	; (8008fdc <HAL_PCD_MspInit+0xbc>)
 8008fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fae:	4a0b      	ldr	r2, [pc, #44]	; (8008fdc <HAL_PCD_MspInit+0xbc>)
 8008fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8008fb6:	4b09      	ldr	r3, [pc, #36]	; (8008fdc <HAL_PCD_MspInit+0xbc>)
 8008fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fbe:	60fb      	str	r3, [r7, #12]
 8008fc0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	2043      	movs	r0, #67	; 0x43
 8008fc8:	f7f8 fc3f 	bl	800184a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008fcc:	2043      	movs	r0, #67	; 0x43
 8008fce:	f7f8 fc58 	bl	8001882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008fd2:	bf00      	nop
 8008fd4:	3728      	adds	r7, #40	; 0x28
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	40023800 	.word	0x40023800
 8008fe0:	40020000 	.word	0x40020000

08008fe4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	4610      	mov	r0, r2
 8008ffc:	f7fe fb4b 	bl	8007696 <USBD_LL_SetupStage>
}
 8009000:	bf00      	nop
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	460b      	mov	r3, r1
 8009012:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800901a:	78fa      	ldrb	r2, [r7, #3]
 800901c:	6879      	ldr	r1, [r7, #4]
 800901e:	4613      	mov	r3, r2
 8009020:	00db      	lsls	r3, r3, #3
 8009022:	4413      	add	r3, r2
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	440b      	add	r3, r1
 8009028:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	78fb      	ldrb	r3, [r7, #3]
 8009030:	4619      	mov	r1, r3
 8009032:	f7fe fb85 	bl	8007740 <USBD_LL_DataOutStage>
}
 8009036:	bf00      	nop
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b082      	sub	sp, #8
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
 8009046:	460b      	mov	r3, r1
 8009048:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009050:	78fa      	ldrb	r2, [r7, #3]
 8009052:	6879      	ldr	r1, [r7, #4]
 8009054:	4613      	mov	r3, r2
 8009056:	00db      	lsls	r3, r3, #3
 8009058:	4413      	add	r3, r2
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	440b      	add	r3, r1
 800905e:	334c      	adds	r3, #76	; 0x4c
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	78fb      	ldrb	r3, [r7, #3]
 8009064:	4619      	mov	r1, r3
 8009066:	f7fe fc1e 	bl	80078a6 <USBD_LL_DataInStage>
}
 800906a:	bf00      	nop
 800906c:	3708      	adds	r7, #8
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b082      	sub	sp, #8
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009080:	4618      	mov	r0, r3
 8009082:	f7fe fd52 	bl	8007b2a <USBD_LL_SOF>
}
 8009086:	bf00      	nop
 8009088:	3708      	adds	r7, #8
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b084      	sub	sp, #16
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009096:	2301      	movs	r3, #1
 8009098:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d102      	bne.n	80090a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80090a2:	2300      	movs	r3, #0
 80090a4:	73fb      	strb	r3, [r7, #15]
 80090a6:	e008      	b.n	80090ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d102      	bne.n	80090b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80090b0:	2301      	movs	r3, #1
 80090b2:	73fb      	strb	r3, [r7, #15]
 80090b4:	e001      	b.n	80090ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80090b6:	f7f7 fd21 	bl	8000afc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090c0:	7bfa      	ldrb	r2, [r7, #15]
 80090c2:	4611      	mov	r1, r2
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7fe fcf2 	bl	8007aae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fe fc9a 	bl	8007a0a <USBD_LL_Reset>
}
 80090d6:	bf00      	nop
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
	...

080090e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe fced 	bl	8007ace <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	6812      	ldr	r2, [r2, #0]
 8009102:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009106:	f043 0301 	orr.w	r3, r3, #1
 800910a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6a1b      	ldr	r3, [r3, #32]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d005      	beq.n	8009120 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009114:	4b04      	ldr	r3, [pc, #16]	; (8009128 <HAL_PCD_SuspendCallback+0x48>)
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	4a03      	ldr	r2, [pc, #12]	; (8009128 <HAL_PCD_SuspendCallback+0x48>)
 800911a:	f043 0306 	orr.w	r3, r3, #6
 800911e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009120:	bf00      	nop
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	e000ed00 	.word	0xe000ed00

0800912c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800913a:	4618      	mov	r0, r3
 800913c:	f7fe fcdd 	bl	8007afa <USBD_LL_Resume>
}
 8009140:	bf00      	nop
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	460b      	mov	r3, r1
 8009152:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800915a:	78fa      	ldrb	r2, [r7, #3]
 800915c:	4611      	mov	r1, r2
 800915e:	4618      	mov	r0, r3
 8009160:	f7fe fd35 	bl	8007bce <USBD_LL_IsoOUTIncomplete>
}
 8009164:	bf00      	nop
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	460b      	mov	r3, r1
 8009176:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800917e:	78fa      	ldrb	r2, [r7, #3]
 8009180:	4611      	mov	r1, r2
 8009182:	4618      	mov	r0, r3
 8009184:	f7fe fcf1 	bl	8007b6a <USBD_LL_IsoINIncomplete>
}
 8009188:	bf00      	nop
 800918a:	3708      	adds	r7, #8
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fe fd47 	bl	8007c32 <USBD_LL_DevConnected>
}
 80091a4:	bf00      	nop
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fe fd44 	bl	8007c48 <USBD_LL_DevDisconnected>
}
 80091c0:	bf00      	nop
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d13c      	bne.n	8009252 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80091d8:	4a20      	ldr	r2, [pc, #128]	; (800925c <USBD_LL_Init+0x94>)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a1e      	ldr	r2, [pc, #120]	; (800925c <USBD_LL_Init+0x94>)
 80091e4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80091e8:	4b1c      	ldr	r3, [pc, #112]	; (800925c <USBD_LL_Init+0x94>)
 80091ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80091ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80091f0:	4b1a      	ldr	r3, [pc, #104]	; (800925c <USBD_LL_Init+0x94>)
 80091f2:	2204      	movs	r2, #4
 80091f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80091f6:	4b19      	ldr	r3, [pc, #100]	; (800925c <USBD_LL_Init+0x94>)
 80091f8:	2202      	movs	r2, #2
 80091fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80091fc:	4b17      	ldr	r3, [pc, #92]	; (800925c <USBD_LL_Init+0x94>)
 80091fe:	2200      	movs	r2, #0
 8009200:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009202:	4b16      	ldr	r3, [pc, #88]	; (800925c <USBD_LL_Init+0x94>)
 8009204:	2202      	movs	r2, #2
 8009206:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009208:	4b14      	ldr	r3, [pc, #80]	; (800925c <USBD_LL_Init+0x94>)
 800920a:	2200      	movs	r2, #0
 800920c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800920e:	4b13      	ldr	r3, [pc, #76]	; (800925c <USBD_LL_Init+0x94>)
 8009210:	2200      	movs	r2, #0
 8009212:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009214:	4b11      	ldr	r3, [pc, #68]	; (800925c <USBD_LL_Init+0x94>)
 8009216:	2200      	movs	r2, #0
 8009218:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800921a:	4b10      	ldr	r3, [pc, #64]	; (800925c <USBD_LL_Init+0x94>)
 800921c:	2201      	movs	r2, #1
 800921e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009220:	4b0e      	ldr	r3, [pc, #56]	; (800925c <USBD_LL_Init+0x94>)
 8009222:	2200      	movs	r2, #0
 8009224:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009226:	480d      	ldr	r0, [pc, #52]	; (800925c <USBD_LL_Init+0x94>)
 8009228:	f7f9 fb12 	bl	8002850 <HAL_PCD_Init>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d001      	beq.n	8009236 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009232:	f7f7 fc63 	bl	8000afc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009236:	2180      	movs	r1, #128	; 0x80
 8009238:	4808      	ldr	r0, [pc, #32]	; (800925c <USBD_LL_Init+0x94>)
 800923a:	f7fa fd6a 	bl	8003d12 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800923e:	2240      	movs	r2, #64	; 0x40
 8009240:	2100      	movs	r1, #0
 8009242:	4806      	ldr	r0, [pc, #24]	; (800925c <USBD_LL_Init+0x94>)
 8009244:	f7fa fd1e 	bl	8003c84 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009248:	2280      	movs	r2, #128	; 0x80
 800924a:	2101      	movs	r1, #1
 800924c:	4803      	ldr	r0, [pc, #12]	; (800925c <USBD_LL_Init+0x94>)
 800924e:	f7fa fd19 	bl	8003c84 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	200017ac 	.word	0x200017ac

08009260 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009268:	2300      	movs	r3, #0
 800926a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800926c:	2300      	movs	r3, #0
 800926e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009276:	4618      	mov	r0, r3
 8009278:	f7f9 fc07 	bl	8002a8a <HAL_PCD_Start>
 800927c:	4603      	mov	r3, r0
 800927e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009280:	7bfb      	ldrb	r3, [r7, #15]
 8009282:	4618      	mov	r0, r3
 8009284:	f000 f942 	bl	800950c <USBD_Get_USB_Status>
 8009288:	4603      	mov	r3, r0
 800928a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800928c:	7bbb      	ldrb	r3, [r7, #14]
}
 800928e:	4618      	mov	r0, r3
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b084      	sub	sp, #16
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
 800929e:	4608      	mov	r0, r1
 80092a0:	4611      	mov	r1, r2
 80092a2:	461a      	mov	r2, r3
 80092a4:	4603      	mov	r3, r0
 80092a6:	70fb      	strb	r3, [r7, #3]
 80092a8:	460b      	mov	r3, r1
 80092aa:	70bb      	strb	r3, [r7, #2]
 80092ac:	4613      	mov	r3, r2
 80092ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80092be:	78bb      	ldrb	r3, [r7, #2]
 80092c0:	883a      	ldrh	r2, [r7, #0]
 80092c2:	78f9      	ldrb	r1, [r7, #3]
 80092c4:	f7fa f8d8 	bl	8003478 <HAL_PCD_EP_Open>
 80092c8:	4603      	mov	r3, r0
 80092ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
 80092ce:	4618      	mov	r0, r3
 80092d0:	f000 f91c 	bl	800950c <USBD_Get_USB_Status>
 80092d4:	4603      	mov	r3, r0
 80092d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b084      	sub	sp, #16
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	460b      	mov	r3, r1
 80092ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092fc:	78fa      	ldrb	r2, [r7, #3]
 80092fe:	4611      	mov	r1, r2
 8009300:	4618      	mov	r0, r3
 8009302:	f7fa f921 	bl	8003548 <HAL_PCD_EP_Close>
 8009306:	4603      	mov	r3, r0
 8009308:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800930a:	7bfb      	ldrb	r3, [r7, #15]
 800930c:	4618      	mov	r0, r3
 800930e:	f000 f8fd 	bl	800950c <USBD_Get_USB_Status>
 8009312:	4603      	mov	r3, r0
 8009314:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009316:	7bbb      	ldrb	r3, [r7, #14]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009330:	2300      	movs	r3, #0
 8009332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800933a:	78fa      	ldrb	r2, [r7, #3]
 800933c:	4611      	mov	r1, r2
 800933e:	4618      	mov	r0, r3
 8009340:	f7fa f9f9 	bl	8003736 <HAL_PCD_EP_SetStall>
 8009344:	4603      	mov	r3, r0
 8009346:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009348:	7bfb      	ldrb	r3, [r7, #15]
 800934a:	4618      	mov	r0, r3
 800934c:	f000 f8de 	bl	800950c <USBD_Get_USB_Status>
 8009350:	4603      	mov	r3, r0
 8009352:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009354:	7bbb      	ldrb	r3, [r7, #14]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b084      	sub	sp, #16
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	460b      	mov	r3, r1
 8009368:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800936e:	2300      	movs	r3, #0
 8009370:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009378:	78fa      	ldrb	r2, [r7, #3]
 800937a:	4611      	mov	r1, r2
 800937c:	4618      	mov	r0, r3
 800937e:	f7fa fa3e 	bl	80037fe <HAL_PCD_EP_ClrStall>
 8009382:	4603      	mov	r3, r0
 8009384:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009386:	7bfb      	ldrb	r3, [r7, #15]
 8009388:	4618      	mov	r0, r3
 800938a:	f000 f8bf 	bl	800950c <USBD_Get_USB_Status>
 800938e:	4603      	mov	r3, r0
 8009390:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009392:	7bbb      	ldrb	r3, [r7, #14]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800939c:	b480      	push	{r7}
 800939e:	b085      	sub	sp, #20
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80093b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	da0b      	bge.n	80093d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80093b8:	78fb      	ldrb	r3, [r7, #3]
 80093ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093be:	68f9      	ldr	r1, [r7, #12]
 80093c0:	4613      	mov	r3, r2
 80093c2:	00db      	lsls	r3, r3, #3
 80093c4:	4413      	add	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	440b      	add	r3, r1
 80093ca:	333e      	adds	r3, #62	; 0x3e
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	e00b      	b.n	80093e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80093d0:	78fb      	ldrb	r3, [r7, #3]
 80093d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093d6:	68f9      	ldr	r1, [r7, #12]
 80093d8:	4613      	mov	r3, r2
 80093da:	00db      	lsls	r3, r3, #3
 80093dc:	4413      	add	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	440b      	add	r3, r1
 80093e2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80093e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3714      	adds	r7, #20
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	460b      	mov	r3, r1
 80093fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800940e:	78fa      	ldrb	r2, [r7, #3]
 8009410:	4611      	mov	r1, r2
 8009412:	4618      	mov	r0, r3
 8009414:	f7fa f80b 	bl	800342e <HAL_PCD_SetAddress>
 8009418:	4603      	mov	r3, r0
 800941a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800941c:	7bfb      	ldrb	r3, [r7, #15]
 800941e:	4618      	mov	r0, r3
 8009420:	f000 f874 	bl	800950c <USBD_Get_USB_Status>
 8009424:	4603      	mov	r3, r0
 8009426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009428:	7bbb      	ldrb	r3, [r7, #14]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b086      	sub	sp, #24
 8009436:	af00      	add	r7, sp, #0
 8009438:	60f8      	str	r0, [r7, #12]
 800943a:	607a      	str	r2, [r7, #4]
 800943c:	603b      	str	r3, [r7, #0]
 800943e:	460b      	mov	r3, r1
 8009440:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009450:	7af9      	ldrb	r1, [r7, #11]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	f7fa f924 	bl	80036a2 <HAL_PCD_EP_Transmit>
 800945a:	4603      	mov	r3, r0
 800945c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800945e:	7dfb      	ldrb	r3, [r7, #23]
 8009460:	4618      	mov	r0, r3
 8009462:	f000 f853 	bl	800950c <USBD_Get_USB_Status>
 8009466:	4603      	mov	r3, r0
 8009468:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800946a:	7dbb      	ldrb	r3, [r7, #22]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3718      	adds	r7, #24
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	607a      	str	r2, [r7, #4]
 800947e:	603b      	str	r3, [r7, #0]
 8009480:	460b      	mov	r3, r1
 8009482:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009484:	2300      	movs	r3, #0
 8009486:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009488:	2300      	movs	r3, #0
 800948a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009492:	7af9      	ldrb	r1, [r7, #11]
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	f7fa f8a0 	bl	80035dc <HAL_PCD_EP_Receive>
 800949c:	4603      	mov	r3, r0
 800949e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094a0:	7dfb      	ldrb	r3, [r7, #23]
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 f832 	bl	800950c <USBD_Get_USB_Status>
 80094a8:	4603      	mov	r3, r0
 80094aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80094ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3718      	adds	r7, #24
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b082      	sub	sp, #8
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	460b      	mov	r3, r1
 80094c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094c8:	78fa      	ldrb	r2, [r7, #3]
 80094ca:	4611      	mov	r1, r2
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7fa f8d0 	bl	8003672 <HAL_PCD_EP_GetRxCount>
 80094d2:	4603      	mov	r3, r0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3708      	adds	r7, #8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80094e4:	4b03      	ldr	r3, [pc, #12]	; (80094f4 <USBD_static_malloc+0x18>)
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	20001cb8 	.word	0x20001cb8

080094f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]

}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	4603      	mov	r3, r0
 8009514:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800951a:	79fb      	ldrb	r3, [r7, #7]
 800951c:	2b03      	cmp	r3, #3
 800951e:	d817      	bhi.n	8009550 <USBD_Get_USB_Status+0x44>
 8009520:	a201      	add	r2, pc, #4	; (adr r2, 8009528 <USBD_Get_USB_Status+0x1c>)
 8009522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009526:	bf00      	nop
 8009528:	08009539 	.word	0x08009539
 800952c:	0800953f 	.word	0x0800953f
 8009530:	08009545 	.word	0x08009545
 8009534:	0800954b 	.word	0x0800954b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	73fb      	strb	r3, [r7, #15]
    break;
 800953c:	e00b      	b.n	8009556 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800953e:	2303      	movs	r3, #3
 8009540:	73fb      	strb	r3, [r7, #15]
    break;
 8009542:	e008      	b.n	8009556 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009544:	2301      	movs	r3, #1
 8009546:	73fb      	strb	r3, [r7, #15]
    break;
 8009548:	e005      	b.n	8009556 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800954a:	2303      	movs	r3, #3
 800954c:	73fb      	strb	r3, [r7, #15]
    break;
 800954e:	e002      	b.n	8009556 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009550:	2303      	movs	r3, #3
 8009552:	73fb      	strb	r3, [r7, #15]
    break;
 8009554:	bf00      	nop
  }
  return usb_status;
 8009556:	7bfb      	ldrb	r3, [r7, #15]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3714      	adds	r7, #20
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <std>:
 8009564:	2300      	movs	r3, #0
 8009566:	b510      	push	{r4, lr}
 8009568:	4604      	mov	r4, r0
 800956a:	e9c0 3300 	strd	r3, r3, [r0]
 800956e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009572:	6083      	str	r3, [r0, #8]
 8009574:	8181      	strh	r1, [r0, #12]
 8009576:	6643      	str	r3, [r0, #100]	; 0x64
 8009578:	81c2      	strh	r2, [r0, #14]
 800957a:	6183      	str	r3, [r0, #24]
 800957c:	4619      	mov	r1, r3
 800957e:	2208      	movs	r2, #8
 8009580:	305c      	adds	r0, #92	; 0x5c
 8009582:	f000 f8f4 	bl	800976e <memset>
 8009586:	4b05      	ldr	r3, [pc, #20]	; (800959c <std+0x38>)
 8009588:	6263      	str	r3, [r4, #36]	; 0x24
 800958a:	4b05      	ldr	r3, [pc, #20]	; (80095a0 <std+0x3c>)
 800958c:	62a3      	str	r3, [r4, #40]	; 0x28
 800958e:	4b05      	ldr	r3, [pc, #20]	; (80095a4 <std+0x40>)
 8009590:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009592:	4b05      	ldr	r3, [pc, #20]	; (80095a8 <std+0x44>)
 8009594:	6224      	str	r4, [r4, #32]
 8009596:	6323      	str	r3, [r4, #48]	; 0x30
 8009598:	bd10      	pop	{r4, pc}
 800959a:	bf00      	nop
 800959c:	080096e9 	.word	0x080096e9
 80095a0:	0800970b 	.word	0x0800970b
 80095a4:	08009743 	.word	0x08009743
 80095a8:	08009767 	.word	0x08009767

080095ac <stdio_exit_handler>:
 80095ac:	4a02      	ldr	r2, [pc, #8]	; (80095b8 <stdio_exit_handler+0xc>)
 80095ae:	4903      	ldr	r1, [pc, #12]	; (80095bc <stdio_exit_handler+0x10>)
 80095b0:	4803      	ldr	r0, [pc, #12]	; (80095c0 <stdio_exit_handler+0x14>)
 80095b2:	f000 b869 	b.w	8009688 <_fwalk_sglue>
 80095b6:	bf00      	nop
 80095b8:	20000100 	.word	0x20000100
 80095bc:	0800a109 	.word	0x0800a109
 80095c0:	2000010c 	.word	0x2000010c

080095c4 <cleanup_stdio>:
 80095c4:	6841      	ldr	r1, [r0, #4]
 80095c6:	4b0c      	ldr	r3, [pc, #48]	; (80095f8 <cleanup_stdio+0x34>)
 80095c8:	4299      	cmp	r1, r3
 80095ca:	b510      	push	{r4, lr}
 80095cc:	4604      	mov	r4, r0
 80095ce:	d001      	beq.n	80095d4 <cleanup_stdio+0x10>
 80095d0:	f000 fd9a 	bl	800a108 <_fflush_r>
 80095d4:	68a1      	ldr	r1, [r4, #8]
 80095d6:	4b09      	ldr	r3, [pc, #36]	; (80095fc <cleanup_stdio+0x38>)
 80095d8:	4299      	cmp	r1, r3
 80095da:	d002      	beq.n	80095e2 <cleanup_stdio+0x1e>
 80095dc:	4620      	mov	r0, r4
 80095de:	f000 fd93 	bl	800a108 <_fflush_r>
 80095e2:	68e1      	ldr	r1, [r4, #12]
 80095e4:	4b06      	ldr	r3, [pc, #24]	; (8009600 <cleanup_stdio+0x3c>)
 80095e6:	4299      	cmp	r1, r3
 80095e8:	d004      	beq.n	80095f4 <cleanup_stdio+0x30>
 80095ea:	4620      	mov	r0, r4
 80095ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095f0:	f000 bd8a 	b.w	800a108 <_fflush_r>
 80095f4:	bd10      	pop	{r4, pc}
 80095f6:	bf00      	nop
 80095f8:	20001ed8 	.word	0x20001ed8
 80095fc:	20001f40 	.word	0x20001f40
 8009600:	20001fa8 	.word	0x20001fa8

08009604 <global_stdio_init.part.0>:
 8009604:	b510      	push	{r4, lr}
 8009606:	4b0b      	ldr	r3, [pc, #44]	; (8009634 <global_stdio_init.part.0+0x30>)
 8009608:	4c0b      	ldr	r4, [pc, #44]	; (8009638 <global_stdio_init.part.0+0x34>)
 800960a:	4a0c      	ldr	r2, [pc, #48]	; (800963c <global_stdio_init.part.0+0x38>)
 800960c:	601a      	str	r2, [r3, #0]
 800960e:	4620      	mov	r0, r4
 8009610:	2200      	movs	r2, #0
 8009612:	2104      	movs	r1, #4
 8009614:	f7ff ffa6 	bl	8009564 <std>
 8009618:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800961c:	2201      	movs	r2, #1
 800961e:	2109      	movs	r1, #9
 8009620:	f7ff ffa0 	bl	8009564 <std>
 8009624:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009628:	2202      	movs	r2, #2
 800962a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800962e:	2112      	movs	r1, #18
 8009630:	f7ff bf98 	b.w	8009564 <std>
 8009634:	20002010 	.word	0x20002010
 8009638:	20001ed8 	.word	0x20001ed8
 800963c:	080095ad 	.word	0x080095ad

08009640 <__sfp_lock_acquire>:
 8009640:	4801      	ldr	r0, [pc, #4]	; (8009648 <__sfp_lock_acquire+0x8>)
 8009642:	f000 b90d 	b.w	8009860 <__retarget_lock_acquire_recursive>
 8009646:	bf00      	nop
 8009648:	20002019 	.word	0x20002019

0800964c <__sfp_lock_release>:
 800964c:	4801      	ldr	r0, [pc, #4]	; (8009654 <__sfp_lock_release+0x8>)
 800964e:	f000 b908 	b.w	8009862 <__retarget_lock_release_recursive>
 8009652:	bf00      	nop
 8009654:	20002019 	.word	0x20002019

08009658 <__sinit>:
 8009658:	b510      	push	{r4, lr}
 800965a:	4604      	mov	r4, r0
 800965c:	f7ff fff0 	bl	8009640 <__sfp_lock_acquire>
 8009660:	6a23      	ldr	r3, [r4, #32]
 8009662:	b11b      	cbz	r3, 800966c <__sinit+0x14>
 8009664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009668:	f7ff bff0 	b.w	800964c <__sfp_lock_release>
 800966c:	4b04      	ldr	r3, [pc, #16]	; (8009680 <__sinit+0x28>)
 800966e:	6223      	str	r3, [r4, #32]
 8009670:	4b04      	ldr	r3, [pc, #16]	; (8009684 <__sinit+0x2c>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1f5      	bne.n	8009664 <__sinit+0xc>
 8009678:	f7ff ffc4 	bl	8009604 <global_stdio_init.part.0>
 800967c:	e7f2      	b.n	8009664 <__sinit+0xc>
 800967e:	bf00      	nop
 8009680:	080095c5 	.word	0x080095c5
 8009684:	20002010 	.word	0x20002010

08009688 <_fwalk_sglue>:
 8009688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800968c:	4607      	mov	r7, r0
 800968e:	4688      	mov	r8, r1
 8009690:	4614      	mov	r4, r2
 8009692:	2600      	movs	r6, #0
 8009694:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009698:	f1b9 0901 	subs.w	r9, r9, #1
 800969c:	d505      	bpl.n	80096aa <_fwalk_sglue+0x22>
 800969e:	6824      	ldr	r4, [r4, #0]
 80096a0:	2c00      	cmp	r4, #0
 80096a2:	d1f7      	bne.n	8009694 <_fwalk_sglue+0xc>
 80096a4:	4630      	mov	r0, r6
 80096a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096aa:	89ab      	ldrh	r3, [r5, #12]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d907      	bls.n	80096c0 <_fwalk_sglue+0x38>
 80096b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096b4:	3301      	adds	r3, #1
 80096b6:	d003      	beq.n	80096c0 <_fwalk_sglue+0x38>
 80096b8:	4629      	mov	r1, r5
 80096ba:	4638      	mov	r0, r7
 80096bc:	47c0      	blx	r8
 80096be:	4306      	orrs	r6, r0
 80096c0:	3568      	adds	r5, #104	; 0x68
 80096c2:	e7e9      	b.n	8009698 <_fwalk_sglue+0x10>

080096c4 <iprintf>:
 80096c4:	b40f      	push	{r0, r1, r2, r3}
 80096c6:	b507      	push	{r0, r1, r2, lr}
 80096c8:	4906      	ldr	r1, [pc, #24]	; (80096e4 <iprintf+0x20>)
 80096ca:	ab04      	add	r3, sp, #16
 80096cc:	6808      	ldr	r0, [r1, #0]
 80096ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80096d2:	6881      	ldr	r1, [r0, #8]
 80096d4:	9301      	str	r3, [sp, #4]
 80096d6:	f000 f9e7 	bl	8009aa8 <_vfiprintf_r>
 80096da:	b003      	add	sp, #12
 80096dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80096e0:	b004      	add	sp, #16
 80096e2:	4770      	bx	lr
 80096e4:	20000158 	.word	0x20000158

080096e8 <__sread>:
 80096e8:	b510      	push	{r4, lr}
 80096ea:	460c      	mov	r4, r1
 80096ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f0:	f000 f868 	bl	80097c4 <_read_r>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	bfab      	itete	ge
 80096f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80096fa:	89a3      	ldrhlt	r3, [r4, #12]
 80096fc:	181b      	addge	r3, r3, r0
 80096fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009702:	bfac      	ite	ge
 8009704:	6563      	strge	r3, [r4, #84]	; 0x54
 8009706:	81a3      	strhlt	r3, [r4, #12]
 8009708:	bd10      	pop	{r4, pc}

0800970a <__swrite>:
 800970a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800970e:	461f      	mov	r7, r3
 8009710:	898b      	ldrh	r3, [r1, #12]
 8009712:	05db      	lsls	r3, r3, #23
 8009714:	4605      	mov	r5, r0
 8009716:	460c      	mov	r4, r1
 8009718:	4616      	mov	r6, r2
 800971a:	d505      	bpl.n	8009728 <__swrite+0x1e>
 800971c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009720:	2302      	movs	r3, #2
 8009722:	2200      	movs	r2, #0
 8009724:	f000 f83c 	bl	80097a0 <_lseek_r>
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800972e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009732:	81a3      	strh	r3, [r4, #12]
 8009734:	4632      	mov	r2, r6
 8009736:	463b      	mov	r3, r7
 8009738:	4628      	mov	r0, r5
 800973a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800973e:	f000 b853 	b.w	80097e8 <_write_r>

08009742 <__sseek>:
 8009742:	b510      	push	{r4, lr}
 8009744:	460c      	mov	r4, r1
 8009746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800974a:	f000 f829 	bl	80097a0 <_lseek_r>
 800974e:	1c43      	adds	r3, r0, #1
 8009750:	89a3      	ldrh	r3, [r4, #12]
 8009752:	bf15      	itete	ne
 8009754:	6560      	strne	r0, [r4, #84]	; 0x54
 8009756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800975a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800975e:	81a3      	strheq	r3, [r4, #12]
 8009760:	bf18      	it	ne
 8009762:	81a3      	strhne	r3, [r4, #12]
 8009764:	bd10      	pop	{r4, pc}

08009766 <__sclose>:
 8009766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800976a:	f000 b809 	b.w	8009780 <_close_r>

0800976e <memset>:
 800976e:	4402      	add	r2, r0
 8009770:	4603      	mov	r3, r0
 8009772:	4293      	cmp	r3, r2
 8009774:	d100      	bne.n	8009778 <memset+0xa>
 8009776:	4770      	bx	lr
 8009778:	f803 1b01 	strb.w	r1, [r3], #1
 800977c:	e7f9      	b.n	8009772 <memset+0x4>
	...

08009780 <_close_r>:
 8009780:	b538      	push	{r3, r4, r5, lr}
 8009782:	4d06      	ldr	r5, [pc, #24]	; (800979c <_close_r+0x1c>)
 8009784:	2300      	movs	r3, #0
 8009786:	4604      	mov	r4, r0
 8009788:	4608      	mov	r0, r1
 800978a:	602b      	str	r3, [r5, #0]
 800978c:	f7f7 fccf 	bl	800112e <_close>
 8009790:	1c43      	adds	r3, r0, #1
 8009792:	d102      	bne.n	800979a <_close_r+0x1a>
 8009794:	682b      	ldr	r3, [r5, #0]
 8009796:	b103      	cbz	r3, 800979a <_close_r+0x1a>
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	bd38      	pop	{r3, r4, r5, pc}
 800979c:	20002014 	.word	0x20002014

080097a0 <_lseek_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	4d07      	ldr	r5, [pc, #28]	; (80097c0 <_lseek_r+0x20>)
 80097a4:	4604      	mov	r4, r0
 80097a6:	4608      	mov	r0, r1
 80097a8:	4611      	mov	r1, r2
 80097aa:	2200      	movs	r2, #0
 80097ac:	602a      	str	r2, [r5, #0]
 80097ae:	461a      	mov	r2, r3
 80097b0:	f7f7 fce4 	bl	800117c <_lseek>
 80097b4:	1c43      	adds	r3, r0, #1
 80097b6:	d102      	bne.n	80097be <_lseek_r+0x1e>
 80097b8:	682b      	ldr	r3, [r5, #0]
 80097ba:	b103      	cbz	r3, 80097be <_lseek_r+0x1e>
 80097bc:	6023      	str	r3, [r4, #0]
 80097be:	bd38      	pop	{r3, r4, r5, pc}
 80097c0:	20002014 	.word	0x20002014

080097c4 <_read_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	4d07      	ldr	r5, [pc, #28]	; (80097e4 <_read_r+0x20>)
 80097c8:	4604      	mov	r4, r0
 80097ca:	4608      	mov	r0, r1
 80097cc:	4611      	mov	r1, r2
 80097ce:	2200      	movs	r2, #0
 80097d0:	602a      	str	r2, [r5, #0]
 80097d2:	461a      	mov	r2, r3
 80097d4:	f7f7 fc8e 	bl	80010f4 <_read>
 80097d8:	1c43      	adds	r3, r0, #1
 80097da:	d102      	bne.n	80097e2 <_read_r+0x1e>
 80097dc:	682b      	ldr	r3, [r5, #0]
 80097de:	b103      	cbz	r3, 80097e2 <_read_r+0x1e>
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	bd38      	pop	{r3, r4, r5, pc}
 80097e4:	20002014 	.word	0x20002014

080097e8 <_write_r>:
 80097e8:	b538      	push	{r3, r4, r5, lr}
 80097ea:	4d07      	ldr	r5, [pc, #28]	; (8009808 <_write_r+0x20>)
 80097ec:	4604      	mov	r4, r0
 80097ee:	4608      	mov	r0, r1
 80097f0:	4611      	mov	r1, r2
 80097f2:	2200      	movs	r2, #0
 80097f4:	602a      	str	r2, [r5, #0]
 80097f6:	461a      	mov	r2, r3
 80097f8:	f7f6 ff26 	bl	8000648 <_write>
 80097fc:	1c43      	adds	r3, r0, #1
 80097fe:	d102      	bne.n	8009806 <_write_r+0x1e>
 8009800:	682b      	ldr	r3, [r5, #0]
 8009802:	b103      	cbz	r3, 8009806 <_write_r+0x1e>
 8009804:	6023      	str	r3, [r4, #0]
 8009806:	bd38      	pop	{r3, r4, r5, pc}
 8009808:	20002014 	.word	0x20002014

0800980c <__errno>:
 800980c:	4b01      	ldr	r3, [pc, #4]	; (8009814 <__errno+0x8>)
 800980e:	6818      	ldr	r0, [r3, #0]
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	20000158 	.word	0x20000158

08009818 <__libc_init_array>:
 8009818:	b570      	push	{r4, r5, r6, lr}
 800981a:	4d0d      	ldr	r5, [pc, #52]	; (8009850 <__libc_init_array+0x38>)
 800981c:	4c0d      	ldr	r4, [pc, #52]	; (8009854 <__libc_init_array+0x3c>)
 800981e:	1b64      	subs	r4, r4, r5
 8009820:	10a4      	asrs	r4, r4, #2
 8009822:	2600      	movs	r6, #0
 8009824:	42a6      	cmp	r6, r4
 8009826:	d109      	bne.n	800983c <__libc_init_array+0x24>
 8009828:	4d0b      	ldr	r5, [pc, #44]	; (8009858 <__libc_init_array+0x40>)
 800982a:	4c0c      	ldr	r4, [pc, #48]	; (800985c <__libc_init_array+0x44>)
 800982c:	f000 fdbe 	bl	800a3ac <_init>
 8009830:	1b64      	subs	r4, r4, r5
 8009832:	10a4      	asrs	r4, r4, #2
 8009834:	2600      	movs	r6, #0
 8009836:	42a6      	cmp	r6, r4
 8009838:	d105      	bne.n	8009846 <__libc_init_array+0x2e>
 800983a:	bd70      	pop	{r4, r5, r6, pc}
 800983c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009840:	4798      	blx	r3
 8009842:	3601      	adds	r6, #1
 8009844:	e7ee      	b.n	8009824 <__libc_init_array+0xc>
 8009846:	f855 3b04 	ldr.w	r3, [r5], #4
 800984a:	4798      	blx	r3
 800984c:	3601      	adds	r6, #1
 800984e:	e7f2      	b.n	8009836 <__libc_init_array+0x1e>
 8009850:	0800a568 	.word	0x0800a568
 8009854:	0800a568 	.word	0x0800a568
 8009858:	0800a568 	.word	0x0800a568
 800985c:	0800a56c 	.word	0x0800a56c

08009860 <__retarget_lock_acquire_recursive>:
 8009860:	4770      	bx	lr

08009862 <__retarget_lock_release_recursive>:
 8009862:	4770      	bx	lr

08009864 <_free_r>:
 8009864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009866:	2900      	cmp	r1, #0
 8009868:	d044      	beq.n	80098f4 <_free_r+0x90>
 800986a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800986e:	9001      	str	r0, [sp, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	f1a1 0404 	sub.w	r4, r1, #4
 8009876:	bfb8      	it	lt
 8009878:	18e4      	addlt	r4, r4, r3
 800987a:	f000 f8df 	bl	8009a3c <__malloc_lock>
 800987e:	4a1e      	ldr	r2, [pc, #120]	; (80098f8 <_free_r+0x94>)
 8009880:	9801      	ldr	r0, [sp, #4]
 8009882:	6813      	ldr	r3, [r2, #0]
 8009884:	b933      	cbnz	r3, 8009894 <_free_r+0x30>
 8009886:	6063      	str	r3, [r4, #4]
 8009888:	6014      	str	r4, [r2, #0]
 800988a:	b003      	add	sp, #12
 800988c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009890:	f000 b8da 	b.w	8009a48 <__malloc_unlock>
 8009894:	42a3      	cmp	r3, r4
 8009896:	d908      	bls.n	80098aa <_free_r+0x46>
 8009898:	6825      	ldr	r5, [r4, #0]
 800989a:	1961      	adds	r1, r4, r5
 800989c:	428b      	cmp	r3, r1
 800989e:	bf01      	itttt	eq
 80098a0:	6819      	ldreq	r1, [r3, #0]
 80098a2:	685b      	ldreq	r3, [r3, #4]
 80098a4:	1949      	addeq	r1, r1, r5
 80098a6:	6021      	streq	r1, [r4, #0]
 80098a8:	e7ed      	b.n	8009886 <_free_r+0x22>
 80098aa:	461a      	mov	r2, r3
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	b10b      	cbz	r3, 80098b4 <_free_r+0x50>
 80098b0:	42a3      	cmp	r3, r4
 80098b2:	d9fa      	bls.n	80098aa <_free_r+0x46>
 80098b4:	6811      	ldr	r1, [r2, #0]
 80098b6:	1855      	adds	r5, r2, r1
 80098b8:	42a5      	cmp	r5, r4
 80098ba:	d10b      	bne.n	80098d4 <_free_r+0x70>
 80098bc:	6824      	ldr	r4, [r4, #0]
 80098be:	4421      	add	r1, r4
 80098c0:	1854      	adds	r4, r2, r1
 80098c2:	42a3      	cmp	r3, r4
 80098c4:	6011      	str	r1, [r2, #0]
 80098c6:	d1e0      	bne.n	800988a <_free_r+0x26>
 80098c8:	681c      	ldr	r4, [r3, #0]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	6053      	str	r3, [r2, #4]
 80098ce:	440c      	add	r4, r1
 80098d0:	6014      	str	r4, [r2, #0]
 80098d2:	e7da      	b.n	800988a <_free_r+0x26>
 80098d4:	d902      	bls.n	80098dc <_free_r+0x78>
 80098d6:	230c      	movs	r3, #12
 80098d8:	6003      	str	r3, [r0, #0]
 80098da:	e7d6      	b.n	800988a <_free_r+0x26>
 80098dc:	6825      	ldr	r5, [r4, #0]
 80098de:	1961      	adds	r1, r4, r5
 80098e0:	428b      	cmp	r3, r1
 80098e2:	bf04      	itt	eq
 80098e4:	6819      	ldreq	r1, [r3, #0]
 80098e6:	685b      	ldreq	r3, [r3, #4]
 80098e8:	6063      	str	r3, [r4, #4]
 80098ea:	bf04      	itt	eq
 80098ec:	1949      	addeq	r1, r1, r5
 80098ee:	6021      	streq	r1, [r4, #0]
 80098f0:	6054      	str	r4, [r2, #4]
 80098f2:	e7ca      	b.n	800988a <_free_r+0x26>
 80098f4:	b003      	add	sp, #12
 80098f6:	bd30      	pop	{r4, r5, pc}
 80098f8:	2000201c 	.word	0x2000201c

080098fc <sbrk_aligned>:
 80098fc:	b570      	push	{r4, r5, r6, lr}
 80098fe:	4e0e      	ldr	r6, [pc, #56]	; (8009938 <sbrk_aligned+0x3c>)
 8009900:	460c      	mov	r4, r1
 8009902:	6831      	ldr	r1, [r6, #0]
 8009904:	4605      	mov	r5, r0
 8009906:	b911      	cbnz	r1, 800990e <sbrk_aligned+0x12>
 8009908:	f000 fcbc 	bl	800a284 <_sbrk_r>
 800990c:	6030      	str	r0, [r6, #0]
 800990e:	4621      	mov	r1, r4
 8009910:	4628      	mov	r0, r5
 8009912:	f000 fcb7 	bl	800a284 <_sbrk_r>
 8009916:	1c43      	adds	r3, r0, #1
 8009918:	d00a      	beq.n	8009930 <sbrk_aligned+0x34>
 800991a:	1cc4      	adds	r4, r0, #3
 800991c:	f024 0403 	bic.w	r4, r4, #3
 8009920:	42a0      	cmp	r0, r4
 8009922:	d007      	beq.n	8009934 <sbrk_aligned+0x38>
 8009924:	1a21      	subs	r1, r4, r0
 8009926:	4628      	mov	r0, r5
 8009928:	f000 fcac 	bl	800a284 <_sbrk_r>
 800992c:	3001      	adds	r0, #1
 800992e:	d101      	bne.n	8009934 <sbrk_aligned+0x38>
 8009930:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009934:	4620      	mov	r0, r4
 8009936:	bd70      	pop	{r4, r5, r6, pc}
 8009938:	20002020 	.word	0x20002020

0800993c <_malloc_r>:
 800993c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009940:	1ccd      	adds	r5, r1, #3
 8009942:	f025 0503 	bic.w	r5, r5, #3
 8009946:	3508      	adds	r5, #8
 8009948:	2d0c      	cmp	r5, #12
 800994a:	bf38      	it	cc
 800994c:	250c      	movcc	r5, #12
 800994e:	2d00      	cmp	r5, #0
 8009950:	4607      	mov	r7, r0
 8009952:	db01      	blt.n	8009958 <_malloc_r+0x1c>
 8009954:	42a9      	cmp	r1, r5
 8009956:	d905      	bls.n	8009964 <_malloc_r+0x28>
 8009958:	230c      	movs	r3, #12
 800995a:	603b      	str	r3, [r7, #0]
 800995c:	2600      	movs	r6, #0
 800995e:	4630      	mov	r0, r6
 8009960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009964:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009a38 <_malloc_r+0xfc>
 8009968:	f000 f868 	bl	8009a3c <__malloc_lock>
 800996c:	f8d8 3000 	ldr.w	r3, [r8]
 8009970:	461c      	mov	r4, r3
 8009972:	bb5c      	cbnz	r4, 80099cc <_malloc_r+0x90>
 8009974:	4629      	mov	r1, r5
 8009976:	4638      	mov	r0, r7
 8009978:	f7ff ffc0 	bl	80098fc <sbrk_aligned>
 800997c:	1c43      	adds	r3, r0, #1
 800997e:	4604      	mov	r4, r0
 8009980:	d155      	bne.n	8009a2e <_malloc_r+0xf2>
 8009982:	f8d8 4000 	ldr.w	r4, [r8]
 8009986:	4626      	mov	r6, r4
 8009988:	2e00      	cmp	r6, #0
 800998a:	d145      	bne.n	8009a18 <_malloc_r+0xdc>
 800998c:	2c00      	cmp	r4, #0
 800998e:	d048      	beq.n	8009a22 <_malloc_r+0xe6>
 8009990:	6823      	ldr	r3, [r4, #0]
 8009992:	4631      	mov	r1, r6
 8009994:	4638      	mov	r0, r7
 8009996:	eb04 0903 	add.w	r9, r4, r3
 800999a:	f000 fc73 	bl	800a284 <_sbrk_r>
 800999e:	4581      	cmp	r9, r0
 80099a0:	d13f      	bne.n	8009a22 <_malloc_r+0xe6>
 80099a2:	6821      	ldr	r1, [r4, #0]
 80099a4:	1a6d      	subs	r5, r5, r1
 80099a6:	4629      	mov	r1, r5
 80099a8:	4638      	mov	r0, r7
 80099aa:	f7ff ffa7 	bl	80098fc <sbrk_aligned>
 80099ae:	3001      	adds	r0, #1
 80099b0:	d037      	beq.n	8009a22 <_malloc_r+0xe6>
 80099b2:	6823      	ldr	r3, [r4, #0]
 80099b4:	442b      	add	r3, r5
 80099b6:	6023      	str	r3, [r4, #0]
 80099b8:	f8d8 3000 	ldr.w	r3, [r8]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d038      	beq.n	8009a32 <_malloc_r+0xf6>
 80099c0:	685a      	ldr	r2, [r3, #4]
 80099c2:	42a2      	cmp	r2, r4
 80099c4:	d12b      	bne.n	8009a1e <_malloc_r+0xe2>
 80099c6:	2200      	movs	r2, #0
 80099c8:	605a      	str	r2, [r3, #4]
 80099ca:	e00f      	b.n	80099ec <_malloc_r+0xb0>
 80099cc:	6822      	ldr	r2, [r4, #0]
 80099ce:	1b52      	subs	r2, r2, r5
 80099d0:	d41f      	bmi.n	8009a12 <_malloc_r+0xd6>
 80099d2:	2a0b      	cmp	r2, #11
 80099d4:	d917      	bls.n	8009a06 <_malloc_r+0xca>
 80099d6:	1961      	adds	r1, r4, r5
 80099d8:	42a3      	cmp	r3, r4
 80099da:	6025      	str	r5, [r4, #0]
 80099dc:	bf18      	it	ne
 80099de:	6059      	strne	r1, [r3, #4]
 80099e0:	6863      	ldr	r3, [r4, #4]
 80099e2:	bf08      	it	eq
 80099e4:	f8c8 1000 	streq.w	r1, [r8]
 80099e8:	5162      	str	r2, [r4, r5]
 80099ea:	604b      	str	r3, [r1, #4]
 80099ec:	4638      	mov	r0, r7
 80099ee:	f104 060b 	add.w	r6, r4, #11
 80099f2:	f000 f829 	bl	8009a48 <__malloc_unlock>
 80099f6:	f026 0607 	bic.w	r6, r6, #7
 80099fa:	1d23      	adds	r3, r4, #4
 80099fc:	1af2      	subs	r2, r6, r3
 80099fe:	d0ae      	beq.n	800995e <_malloc_r+0x22>
 8009a00:	1b9b      	subs	r3, r3, r6
 8009a02:	50a3      	str	r3, [r4, r2]
 8009a04:	e7ab      	b.n	800995e <_malloc_r+0x22>
 8009a06:	42a3      	cmp	r3, r4
 8009a08:	6862      	ldr	r2, [r4, #4]
 8009a0a:	d1dd      	bne.n	80099c8 <_malloc_r+0x8c>
 8009a0c:	f8c8 2000 	str.w	r2, [r8]
 8009a10:	e7ec      	b.n	80099ec <_malloc_r+0xb0>
 8009a12:	4623      	mov	r3, r4
 8009a14:	6864      	ldr	r4, [r4, #4]
 8009a16:	e7ac      	b.n	8009972 <_malloc_r+0x36>
 8009a18:	4634      	mov	r4, r6
 8009a1a:	6876      	ldr	r6, [r6, #4]
 8009a1c:	e7b4      	b.n	8009988 <_malloc_r+0x4c>
 8009a1e:	4613      	mov	r3, r2
 8009a20:	e7cc      	b.n	80099bc <_malloc_r+0x80>
 8009a22:	230c      	movs	r3, #12
 8009a24:	603b      	str	r3, [r7, #0]
 8009a26:	4638      	mov	r0, r7
 8009a28:	f000 f80e 	bl	8009a48 <__malloc_unlock>
 8009a2c:	e797      	b.n	800995e <_malloc_r+0x22>
 8009a2e:	6025      	str	r5, [r4, #0]
 8009a30:	e7dc      	b.n	80099ec <_malloc_r+0xb0>
 8009a32:	605b      	str	r3, [r3, #4]
 8009a34:	deff      	udf	#255	; 0xff
 8009a36:	bf00      	nop
 8009a38:	2000201c 	.word	0x2000201c

08009a3c <__malloc_lock>:
 8009a3c:	4801      	ldr	r0, [pc, #4]	; (8009a44 <__malloc_lock+0x8>)
 8009a3e:	f7ff bf0f 	b.w	8009860 <__retarget_lock_acquire_recursive>
 8009a42:	bf00      	nop
 8009a44:	20002018 	.word	0x20002018

08009a48 <__malloc_unlock>:
 8009a48:	4801      	ldr	r0, [pc, #4]	; (8009a50 <__malloc_unlock+0x8>)
 8009a4a:	f7ff bf0a 	b.w	8009862 <__retarget_lock_release_recursive>
 8009a4e:	bf00      	nop
 8009a50:	20002018 	.word	0x20002018

08009a54 <__sfputc_r>:
 8009a54:	6893      	ldr	r3, [r2, #8]
 8009a56:	3b01      	subs	r3, #1
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	b410      	push	{r4}
 8009a5c:	6093      	str	r3, [r2, #8]
 8009a5e:	da08      	bge.n	8009a72 <__sfputc_r+0x1e>
 8009a60:	6994      	ldr	r4, [r2, #24]
 8009a62:	42a3      	cmp	r3, r4
 8009a64:	db01      	blt.n	8009a6a <__sfputc_r+0x16>
 8009a66:	290a      	cmp	r1, #10
 8009a68:	d103      	bne.n	8009a72 <__sfputc_r+0x1e>
 8009a6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a6e:	f000 bb73 	b.w	800a158 <__swbuf_r>
 8009a72:	6813      	ldr	r3, [r2, #0]
 8009a74:	1c58      	adds	r0, r3, #1
 8009a76:	6010      	str	r0, [r2, #0]
 8009a78:	7019      	strb	r1, [r3, #0]
 8009a7a:	4608      	mov	r0, r1
 8009a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a80:	4770      	bx	lr

08009a82 <__sfputs_r>:
 8009a82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a84:	4606      	mov	r6, r0
 8009a86:	460f      	mov	r7, r1
 8009a88:	4614      	mov	r4, r2
 8009a8a:	18d5      	adds	r5, r2, r3
 8009a8c:	42ac      	cmp	r4, r5
 8009a8e:	d101      	bne.n	8009a94 <__sfputs_r+0x12>
 8009a90:	2000      	movs	r0, #0
 8009a92:	e007      	b.n	8009aa4 <__sfputs_r+0x22>
 8009a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a98:	463a      	mov	r2, r7
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	f7ff ffda 	bl	8009a54 <__sfputc_r>
 8009aa0:	1c43      	adds	r3, r0, #1
 8009aa2:	d1f3      	bne.n	8009a8c <__sfputs_r+0xa>
 8009aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009aa8 <_vfiprintf_r>:
 8009aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aac:	460d      	mov	r5, r1
 8009aae:	b09d      	sub	sp, #116	; 0x74
 8009ab0:	4614      	mov	r4, r2
 8009ab2:	4698      	mov	r8, r3
 8009ab4:	4606      	mov	r6, r0
 8009ab6:	b118      	cbz	r0, 8009ac0 <_vfiprintf_r+0x18>
 8009ab8:	6a03      	ldr	r3, [r0, #32]
 8009aba:	b90b      	cbnz	r3, 8009ac0 <_vfiprintf_r+0x18>
 8009abc:	f7ff fdcc 	bl	8009658 <__sinit>
 8009ac0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ac2:	07d9      	lsls	r1, r3, #31
 8009ac4:	d405      	bmi.n	8009ad2 <_vfiprintf_r+0x2a>
 8009ac6:	89ab      	ldrh	r3, [r5, #12]
 8009ac8:	059a      	lsls	r2, r3, #22
 8009aca:	d402      	bmi.n	8009ad2 <_vfiprintf_r+0x2a>
 8009acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ace:	f7ff fec7 	bl	8009860 <__retarget_lock_acquire_recursive>
 8009ad2:	89ab      	ldrh	r3, [r5, #12]
 8009ad4:	071b      	lsls	r3, r3, #28
 8009ad6:	d501      	bpl.n	8009adc <_vfiprintf_r+0x34>
 8009ad8:	692b      	ldr	r3, [r5, #16]
 8009ada:	b99b      	cbnz	r3, 8009b04 <_vfiprintf_r+0x5c>
 8009adc:	4629      	mov	r1, r5
 8009ade:	4630      	mov	r0, r6
 8009ae0:	f000 fb78 	bl	800a1d4 <__swsetup_r>
 8009ae4:	b170      	cbz	r0, 8009b04 <_vfiprintf_r+0x5c>
 8009ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ae8:	07dc      	lsls	r4, r3, #31
 8009aea:	d504      	bpl.n	8009af6 <_vfiprintf_r+0x4e>
 8009aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009af0:	b01d      	add	sp, #116	; 0x74
 8009af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af6:	89ab      	ldrh	r3, [r5, #12]
 8009af8:	0598      	lsls	r0, r3, #22
 8009afa:	d4f7      	bmi.n	8009aec <_vfiprintf_r+0x44>
 8009afc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009afe:	f7ff feb0 	bl	8009862 <__retarget_lock_release_recursive>
 8009b02:	e7f3      	b.n	8009aec <_vfiprintf_r+0x44>
 8009b04:	2300      	movs	r3, #0
 8009b06:	9309      	str	r3, [sp, #36]	; 0x24
 8009b08:	2320      	movs	r3, #32
 8009b0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b12:	2330      	movs	r3, #48	; 0x30
 8009b14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009cc8 <_vfiprintf_r+0x220>
 8009b18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b1c:	f04f 0901 	mov.w	r9, #1
 8009b20:	4623      	mov	r3, r4
 8009b22:	469a      	mov	sl, r3
 8009b24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b28:	b10a      	cbz	r2, 8009b2e <_vfiprintf_r+0x86>
 8009b2a:	2a25      	cmp	r2, #37	; 0x25
 8009b2c:	d1f9      	bne.n	8009b22 <_vfiprintf_r+0x7a>
 8009b2e:	ebba 0b04 	subs.w	fp, sl, r4
 8009b32:	d00b      	beq.n	8009b4c <_vfiprintf_r+0xa4>
 8009b34:	465b      	mov	r3, fp
 8009b36:	4622      	mov	r2, r4
 8009b38:	4629      	mov	r1, r5
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	f7ff ffa1 	bl	8009a82 <__sfputs_r>
 8009b40:	3001      	adds	r0, #1
 8009b42:	f000 80a9 	beq.w	8009c98 <_vfiprintf_r+0x1f0>
 8009b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b48:	445a      	add	r2, fp
 8009b4a:	9209      	str	r2, [sp, #36]	; 0x24
 8009b4c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f000 80a1 	beq.w	8009c98 <_vfiprintf_r+0x1f0>
 8009b56:	2300      	movs	r3, #0
 8009b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b60:	f10a 0a01 	add.w	sl, sl, #1
 8009b64:	9304      	str	r3, [sp, #16]
 8009b66:	9307      	str	r3, [sp, #28]
 8009b68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b6c:	931a      	str	r3, [sp, #104]	; 0x68
 8009b6e:	4654      	mov	r4, sl
 8009b70:	2205      	movs	r2, #5
 8009b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b76:	4854      	ldr	r0, [pc, #336]	; (8009cc8 <_vfiprintf_r+0x220>)
 8009b78:	f7f6 fb2a 	bl	80001d0 <memchr>
 8009b7c:	9a04      	ldr	r2, [sp, #16]
 8009b7e:	b9d8      	cbnz	r0, 8009bb8 <_vfiprintf_r+0x110>
 8009b80:	06d1      	lsls	r1, r2, #27
 8009b82:	bf44      	itt	mi
 8009b84:	2320      	movmi	r3, #32
 8009b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b8a:	0713      	lsls	r3, r2, #28
 8009b8c:	bf44      	itt	mi
 8009b8e:	232b      	movmi	r3, #43	; 0x2b
 8009b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b94:	f89a 3000 	ldrb.w	r3, [sl]
 8009b98:	2b2a      	cmp	r3, #42	; 0x2a
 8009b9a:	d015      	beq.n	8009bc8 <_vfiprintf_r+0x120>
 8009b9c:	9a07      	ldr	r2, [sp, #28]
 8009b9e:	4654      	mov	r4, sl
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	f04f 0c0a 	mov.w	ip, #10
 8009ba6:	4621      	mov	r1, r4
 8009ba8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bac:	3b30      	subs	r3, #48	; 0x30
 8009bae:	2b09      	cmp	r3, #9
 8009bb0:	d94d      	bls.n	8009c4e <_vfiprintf_r+0x1a6>
 8009bb2:	b1b0      	cbz	r0, 8009be2 <_vfiprintf_r+0x13a>
 8009bb4:	9207      	str	r2, [sp, #28]
 8009bb6:	e014      	b.n	8009be2 <_vfiprintf_r+0x13a>
 8009bb8:	eba0 0308 	sub.w	r3, r0, r8
 8009bbc:	fa09 f303 	lsl.w	r3, r9, r3
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	9304      	str	r3, [sp, #16]
 8009bc4:	46a2      	mov	sl, r4
 8009bc6:	e7d2      	b.n	8009b6e <_vfiprintf_r+0xc6>
 8009bc8:	9b03      	ldr	r3, [sp, #12]
 8009bca:	1d19      	adds	r1, r3, #4
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	9103      	str	r1, [sp, #12]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	bfbb      	ittet	lt
 8009bd4:	425b      	neglt	r3, r3
 8009bd6:	f042 0202 	orrlt.w	r2, r2, #2
 8009bda:	9307      	strge	r3, [sp, #28]
 8009bdc:	9307      	strlt	r3, [sp, #28]
 8009bde:	bfb8      	it	lt
 8009be0:	9204      	strlt	r2, [sp, #16]
 8009be2:	7823      	ldrb	r3, [r4, #0]
 8009be4:	2b2e      	cmp	r3, #46	; 0x2e
 8009be6:	d10c      	bne.n	8009c02 <_vfiprintf_r+0x15a>
 8009be8:	7863      	ldrb	r3, [r4, #1]
 8009bea:	2b2a      	cmp	r3, #42	; 0x2a
 8009bec:	d134      	bne.n	8009c58 <_vfiprintf_r+0x1b0>
 8009bee:	9b03      	ldr	r3, [sp, #12]
 8009bf0:	1d1a      	adds	r2, r3, #4
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	9203      	str	r2, [sp, #12]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	bfb8      	it	lt
 8009bfa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009bfe:	3402      	adds	r4, #2
 8009c00:	9305      	str	r3, [sp, #20]
 8009c02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009cd8 <_vfiprintf_r+0x230>
 8009c06:	7821      	ldrb	r1, [r4, #0]
 8009c08:	2203      	movs	r2, #3
 8009c0a:	4650      	mov	r0, sl
 8009c0c:	f7f6 fae0 	bl	80001d0 <memchr>
 8009c10:	b138      	cbz	r0, 8009c22 <_vfiprintf_r+0x17a>
 8009c12:	9b04      	ldr	r3, [sp, #16]
 8009c14:	eba0 000a 	sub.w	r0, r0, sl
 8009c18:	2240      	movs	r2, #64	; 0x40
 8009c1a:	4082      	lsls	r2, r0
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	3401      	adds	r4, #1
 8009c20:	9304      	str	r3, [sp, #16]
 8009c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c26:	4829      	ldr	r0, [pc, #164]	; (8009ccc <_vfiprintf_r+0x224>)
 8009c28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c2c:	2206      	movs	r2, #6
 8009c2e:	f7f6 facf 	bl	80001d0 <memchr>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d03f      	beq.n	8009cb6 <_vfiprintf_r+0x20e>
 8009c36:	4b26      	ldr	r3, [pc, #152]	; (8009cd0 <_vfiprintf_r+0x228>)
 8009c38:	bb1b      	cbnz	r3, 8009c82 <_vfiprintf_r+0x1da>
 8009c3a:	9b03      	ldr	r3, [sp, #12]
 8009c3c:	3307      	adds	r3, #7
 8009c3e:	f023 0307 	bic.w	r3, r3, #7
 8009c42:	3308      	adds	r3, #8
 8009c44:	9303      	str	r3, [sp, #12]
 8009c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c48:	443b      	add	r3, r7
 8009c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c4c:	e768      	b.n	8009b20 <_vfiprintf_r+0x78>
 8009c4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c52:	460c      	mov	r4, r1
 8009c54:	2001      	movs	r0, #1
 8009c56:	e7a6      	b.n	8009ba6 <_vfiprintf_r+0xfe>
 8009c58:	2300      	movs	r3, #0
 8009c5a:	3401      	adds	r4, #1
 8009c5c:	9305      	str	r3, [sp, #20]
 8009c5e:	4619      	mov	r1, r3
 8009c60:	f04f 0c0a 	mov.w	ip, #10
 8009c64:	4620      	mov	r0, r4
 8009c66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c6a:	3a30      	subs	r2, #48	; 0x30
 8009c6c:	2a09      	cmp	r2, #9
 8009c6e:	d903      	bls.n	8009c78 <_vfiprintf_r+0x1d0>
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d0c6      	beq.n	8009c02 <_vfiprintf_r+0x15a>
 8009c74:	9105      	str	r1, [sp, #20]
 8009c76:	e7c4      	b.n	8009c02 <_vfiprintf_r+0x15a>
 8009c78:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c7c:	4604      	mov	r4, r0
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e7f0      	b.n	8009c64 <_vfiprintf_r+0x1bc>
 8009c82:	ab03      	add	r3, sp, #12
 8009c84:	9300      	str	r3, [sp, #0]
 8009c86:	462a      	mov	r2, r5
 8009c88:	4b12      	ldr	r3, [pc, #72]	; (8009cd4 <_vfiprintf_r+0x22c>)
 8009c8a:	a904      	add	r1, sp, #16
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	f3af 8000 	nop.w
 8009c92:	4607      	mov	r7, r0
 8009c94:	1c78      	adds	r0, r7, #1
 8009c96:	d1d6      	bne.n	8009c46 <_vfiprintf_r+0x19e>
 8009c98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c9a:	07d9      	lsls	r1, r3, #31
 8009c9c:	d405      	bmi.n	8009caa <_vfiprintf_r+0x202>
 8009c9e:	89ab      	ldrh	r3, [r5, #12]
 8009ca0:	059a      	lsls	r2, r3, #22
 8009ca2:	d402      	bmi.n	8009caa <_vfiprintf_r+0x202>
 8009ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ca6:	f7ff fddc 	bl	8009862 <__retarget_lock_release_recursive>
 8009caa:	89ab      	ldrh	r3, [r5, #12]
 8009cac:	065b      	lsls	r3, r3, #25
 8009cae:	f53f af1d 	bmi.w	8009aec <_vfiprintf_r+0x44>
 8009cb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cb4:	e71c      	b.n	8009af0 <_vfiprintf_r+0x48>
 8009cb6:	ab03      	add	r3, sp, #12
 8009cb8:	9300      	str	r3, [sp, #0]
 8009cba:	462a      	mov	r2, r5
 8009cbc:	4b05      	ldr	r3, [pc, #20]	; (8009cd4 <_vfiprintf_r+0x22c>)
 8009cbe:	a904      	add	r1, sp, #16
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	f000 f879 	bl	8009db8 <_printf_i>
 8009cc6:	e7e4      	b.n	8009c92 <_vfiprintf_r+0x1ea>
 8009cc8:	0800a52c 	.word	0x0800a52c
 8009ccc:	0800a536 	.word	0x0800a536
 8009cd0:	00000000 	.word	0x00000000
 8009cd4:	08009a83 	.word	0x08009a83
 8009cd8:	0800a532 	.word	0x0800a532

08009cdc <_printf_common>:
 8009cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce0:	4616      	mov	r6, r2
 8009ce2:	4699      	mov	r9, r3
 8009ce4:	688a      	ldr	r2, [r1, #8]
 8009ce6:	690b      	ldr	r3, [r1, #16]
 8009ce8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009cec:	4293      	cmp	r3, r2
 8009cee:	bfb8      	it	lt
 8009cf0:	4613      	movlt	r3, r2
 8009cf2:	6033      	str	r3, [r6, #0]
 8009cf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009cf8:	4607      	mov	r7, r0
 8009cfa:	460c      	mov	r4, r1
 8009cfc:	b10a      	cbz	r2, 8009d02 <_printf_common+0x26>
 8009cfe:	3301      	adds	r3, #1
 8009d00:	6033      	str	r3, [r6, #0]
 8009d02:	6823      	ldr	r3, [r4, #0]
 8009d04:	0699      	lsls	r1, r3, #26
 8009d06:	bf42      	ittt	mi
 8009d08:	6833      	ldrmi	r3, [r6, #0]
 8009d0a:	3302      	addmi	r3, #2
 8009d0c:	6033      	strmi	r3, [r6, #0]
 8009d0e:	6825      	ldr	r5, [r4, #0]
 8009d10:	f015 0506 	ands.w	r5, r5, #6
 8009d14:	d106      	bne.n	8009d24 <_printf_common+0x48>
 8009d16:	f104 0a19 	add.w	sl, r4, #25
 8009d1a:	68e3      	ldr	r3, [r4, #12]
 8009d1c:	6832      	ldr	r2, [r6, #0]
 8009d1e:	1a9b      	subs	r3, r3, r2
 8009d20:	42ab      	cmp	r3, r5
 8009d22:	dc26      	bgt.n	8009d72 <_printf_common+0x96>
 8009d24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d28:	1e13      	subs	r3, r2, #0
 8009d2a:	6822      	ldr	r2, [r4, #0]
 8009d2c:	bf18      	it	ne
 8009d2e:	2301      	movne	r3, #1
 8009d30:	0692      	lsls	r2, r2, #26
 8009d32:	d42b      	bmi.n	8009d8c <_printf_common+0xb0>
 8009d34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d38:	4649      	mov	r1, r9
 8009d3a:	4638      	mov	r0, r7
 8009d3c:	47c0      	blx	r8
 8009d3e:	3001      	adds	r0, #1
 8009d40:	d01e      	beq.n	8009d80 <_printf_common+0xa4>
 8009d42:	6823      	ldr	r3, [r4, #0]
 8009d44:	6922      	ldr	r2, [r4, #16]
 8009d46:	f003 0306 	and.w	r3, r3, #6
 8009d4a:	2b04      	cmp	r3, #4
 8009d4c:	bf02      	ittt	eq
 8009d4e:	68e5      	ldreq	r5, [r4, #12]
 8009d50:	6833      	ldreq	r3, [r6, #0]
 8009d52:	1aed      	subeq	r5, r5, r3
 8009d54:	68a3      	ldr	r3, [r4, #8]
 8009d56:	bf0c      	ite	eq
 8009d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d5c:	2500      	movne	r5, #0
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	bfc4      	itt	gt
 8009d62:	1a9b      	subgt	r3, r3, r2
 8009d64:	18ed      	addgt	r5, r5, r3
 8009d66:	2600      	movs	r6, #0
 8009d68:	341a      	adds	r4, #26
 8009d6a:	42b5      	cmp	r5, r6
 8009d6c:	d11a      	bne.n	8009da4 <_printf_common+0xc8>
 8009d6e:	2000      	movs	r0, #0
 8009d70:	e008      	b.n	8009d84 <_printf_common+0xa8>
 8009d72:	2301      	movs	r3, #1
 8009d74:	4652      	mov	r2, sl
 8009d76:	4649      	mov	r1, r9
 8009d78:	4638      	mov	r0, r7
 8009d7a:	47c0      	blx	r8
 8009d7c:	3001      	adds	r0, #1
 8009d7e:	d103      	bne.n	8009d88 <_printf_common+0xac>
 8009d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d88:	3501      	adds	r5, #1
 8009d8a:	e7c6      	b.n	8009d1a <_printf_common+0x3e>
 8009d8c:	18e1      	adds	r1, r4, r3
 8009d8e:	1c5a      	adds	r2, r3, #1
 8009d90:	2030      	movs	r0, #48	; 0x30
 8009d92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d96:	4422      	add	r2, r4
 8009d98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009da0:	3302      	adds	r3, #2
 8009da2:	e7c7      	b.n	8009d34 <_printf_common+0x58>
 8009da4:	2301      	movs	r3, #1
 8009da6:	4622      	mov	r2, r4
 8009da8:	4649      	mov	r1, r9
 8009daa:	4638      	mov	r0, r7
 8009dac:	47c0      	blx	r8
 8009dae:	3001      	adds	r0, #1
 8009db0:	d0e6      	beq.n	8009d80 <_printf_common+0xa4>
 8009db2:	3601      	adds	r6, #1
 8009db4:	e7d9      	b.n	8009d6a <_printf_common+0x8e>
	...

08009db8 <_printf_i>:
 8009db8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dbc:	7e0f      	ldrb	r7, [r1, #24]
 8009dbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009dc0:	2f78      	cmp	r7, #120	; 0x78
 8009dc2:	4691      	mov	r9, r2
 8009dc4:	4680      	mov	r8, r0
 8009dc6:	460c      	mov	r4, r1
 8009dc8:	469a      	mov	sl, r3
 8009dca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009dce:	d807      	bhi.n	8009de0 <_printf_i+0x28>
 8009dd0:	2f62      	cmp	r7, #98	; 0x62
 8009dd2:	d80a      	bhi.n	8009dea <_printf_i+0x32>
 8009dd4:	2f00      	cmp	r7, #0
 8009dd6:	f000 80d4 	beq.w	8009f82 <_printf_i+0x1ca>
 8009dda:	2f58      	cmp	r7, #88	; 0x58
 8009ddc:	f000 80c0 	beq.w	8009f60 <_printf_i+0x1a8>
 8009de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009de4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009de8:	e03a      	b.n	8009e60 <_printf_i+0xa8>
 8009dea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009dee:	2b15      	cmp	r3, #21
 8009df0:	d8f6      	bhi.n	8009de0 <_printf_i+0x28>
 8009df2:	a101      	add	r1, pc, #4	; (adr r1, 8009df8 <_printf_i+0x40>)
 8009df4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009df8:	08009e51 	.word	0x08009e51
 8009dfc:	08009e65 	.word	0x08009e65
 8009e00:	08009de1 	.word	0x08009de1
 8009e04:	08009de1 	.word	0x08009de1
 8009e08:	08009de1 	.word	0x08009de1
 8009e0c:	08009de1 	.word	0x08009de1
 8009e10:	08009e65 	.word	0x08009e65
 8009e14:	08009de1 	.word	0x08009de1
 8009e18:	08009de1 	.word	0x08009de1
 8009e1c:	08009de1 	.word	0x08009de1
 8009e20:	08009de1 	.word	0x08009de1
 8009e24:	08009f69 	.word	0x08009f69
 8009e28:	08009e91 	.word	0x08009e91
 8009e2c:	08009f23 	.word	0x08009f23
 8009e30:	08009de1 	.word	0x08009de1
 8009e34:	08009de1 	.word	0x08009de1
 8009e38:	08009f8b 	.word	0x08009f8b
 8009e3c:	08009de1 	.word	0x08009de1
 8009e40:	08009e91 	.word	0x08009e91
 8009e44:	08009de1 	.word	0x08009de1
 8009e48:	08009de1 	.word	0x08009de1
 8009e4c:	08009f2b 	.word	0x08009f2b
 8009e50:	682b      	ldr	r3, [r5, #0]
 8009e52:	1d1a      	adds	r2, r3, #4
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	602a      	str	r2, [r5, #0]
 8009e58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e60:	2301      	movs	r3, #1
 8009e62:	e09f      	b.n	8009fa4 <_printf_i+0x1ec>
 8009e64:	6820      	ldr	r0, [r4, #0]
 8009e66:	682b      	ldr	r3, [r5, #0]
 8009e68:	0607      	lsls	r7, r0, #24
 8009e6a:	f103 0104 	add.w	r1, r3, #4
 8009e6e:	6029      	str	r1, [r5, #0]
 8009e70:	d501      	bpl.n	8009e76 <_printf_i+0xbe>
 8009e72:	681e      	ldr	r6, [r3, #0]
 8009e74:	e003      	b.n	8009e7e <_printf_i+0xc6>
 8009e76:	0646      	lsls	r6, r0, #25
 8009e78:	d5fb      	bpl.n	8009e72 <_printf_i+0xba>
 8009e7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009e7e:	2e00      	cmp	r6, #0
 8009e80:	da03      	bge.n	8009e8a <_printf_i+0xd2>
 8009e82:	232d      	movs	r3, #45	; 0x2d
 8009e84:	4276      	negs	r6, r6
 8009e86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e8a:	485a      	ldr	r0, [pc, #360]	; (8009ff4 <_printf_i+0x23c>)
 8009e8c:	230a      	movs	r3, #10
 8009e8e:	e012      	b.n	8009eb6 <_printf_i+0xfe>
 8009e90:	682b      	ldr	r3, [r5, #0]
 8009e92:	6820      	ldr	r0, [r4, #0]
 8009e94:	1d19      	adds	r1, r3, #4
 8009e96:	6029      	str	r1, [r5, #0]
 8009e98:	0605      	lsls	r5, r0, #24
 8009e9a:	d501      	bpl.n	8009ea0 <_printf_i+0xe8>
 8009e9c:	681e      	ldr	r6, [r3, #0]
 8009e9e:	e002      	b.n	8009ea6 <_printf_i+0xee>
 8009ea0:	0641      	lsls	r1, r0, #25
 8009ea2:	d5fb      	bpl.n	8009e9c <_printf_i+0xe4>
 8009ea4:	881e      	ldrh	r6, [r3, #0]
 8009ea6:	4853      	ldr	r0, [pc, #332]	; (8009ff4 <_printf_i+0x23c>)
 8009ea8:	2f6f      	cmp	r7, #111	; 0x6f
 8009eaa:	bf0c      	ite	eq
 8009eac:	2308      	moveq	r3, #8
 8009eae:	230a      	movne	r3, #10
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009eb6:	6865      	ldr	r5, [r4, #4]
 8009eb8:	60a5      	str	r5, [r4, #8]
 8009eba:	2d00      	cmp	r5, #0
 8009ebc:	bfa2      	ittt	ge
 8009ebe:	6821      	ldrge	r1, [r4, #0]
 8009ec0:	f021 0104 	bicge.w	r1, r1, #4
 8009ec4:	6021      	strge	r1, [r4, #0]
 8009ec6:	b90e      	cbnz	r6, 8009ecc <_printf_i+0x114>
 8009ec8:	2d00      	cmp	r5, #0
 8009eca:	d04b      	beq.n	8009f64 <_printf_i+0x1ac>
 8009ecc:	4615      	mov	r5, r2
 8009ece:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ed2:	fb03 6711 	mls	r7, r3, r1, r6
 8009ed6:	5dc7      	ldrb	r7, [r0, r7]
 8009ed8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009edc:	4637      	mov	r7, r6
 8009ede:	42bb      	cmp	r3, r7
 8009ee0:	460e      	mov	r6, r1
 8009ee2:	d9f4      	bls.n	8009ece <_printf_i+0x116>
 8009ee4:	2b08      	cmp	r3, #8
 8009ee6:	d10b      	bne.n	8009f00 <_printf_i+0x148>
 8009ee8:	6823      	ldr	r3, [r4, #0]
 8009eea:	07de      	lsls	r6, r3, #31
 8009eec:	d508      	bpl.n	8009f00 <_printf_i+0x148>
 8009eee:	6923      	ldr	r3, [r4, #16]
 8009ef0:	6861      	ldr	r1, [r4, #4]
 8009ef2:	4299      	cmp	r1, r3
 8009ef4:	bfde      	ittt	le
 8009ef6:	2330      	movle	r3, #48	; 0x30
 8009ef8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009efc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009f00:	1b52      	subs	r2, r2, r5
 8009f02:	6122      	str	r2, [r4, #16]
 8009f04:	f8cd a000 	str.w	sl, [sp]
 8009f08:	464b      	mov	r3, r9
 8009f0a:	aa03      	add	r2, sp, #12
 8009f0c:	4621      	mov	r1, r4
 8009f0e:	4640      	mov	r0, r8
 8009f10:	f7ff fee4 	bl	8009cdc <_printf_common>
 8009f14:	3001      	adds	r0, #1
 8009f16:	d14a      	bne.n	8009fae <_printf_i+0x1f6>
 8009f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f1c:	b004      	add	sp, #16
 8009f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f22:	6823      	ldr	r3, [r4, #0]
 8009f24:	f043 0320 	orr.w	r3, r3, #32
 8009f28:	6023      	str	r3, [r4, #0]
 8009f2a:	4833      	ldr	r0, [pc, #204]	; (8009ff8 <_printf_i+0x240>)
 8009f2c:	2778      	movs	r7, #120	; 0x78
 8009f2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f32:	6823      	ldr	r3, [r4, #0]
 8009f34:	6829      	ldr	r1, [r5, #0]
 8009f36:	061f      	lsls	r7, r3, #24
 8009f38:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f3c:	d402      	bmi.n	8009f44 <_printf_i+0x18c>
 8009f3e:	065f      	lsls	r7, r3, #25
 8009f40:	bf48      	it	mi
 8009f42:	b2b6      	uxthmi	r6, r6
 8009f44:	07df      	lsls	r7, r3, #31
 8009f46:	bf48      	it	mi
 8009f48:	f043 0320 	orrmi.w	r3, r3, #32
 8009f4c:	6029      	str	r1, [r5, #0]
 8009f4e:	bf48      	it	mi
 8009f50:	6023      	strmi	r3, [r4, #0]
 8009f52:	b91e      	cbnz	r6, 8009f5c <_printf_i+0x1a4>
 8009f54:	6823      	ldr	r3, [r4, #0]
 8009f56:	f023 0320 	bic.w	r3, r3, #32
 8009f5a:	6023      	str	r3, [r4, #0]
 8009f5c:	2310      	movs	r3, #16
 8009f5e:	e7a7      	b.n	8009eb0 <_printf_i+0xf8>
 8009f60:	4824      	ldr	r0, [pc, #144]	; (8009ff4 <_printf_i+0x23c>)
 8009f62:	e7e4      	b.n	8009f2e <_printf_i+0x176>
 8009f64:	4615      	mov	r5, r2
 8009f66:	e7bd      	b.n	8009ee4 <_printf_i+0x12c>
 8009f68:	682b      	ldr	r3, [r5, #0]
 8009f6a:	6826      	ldr	r6, [r4, #0]
 8009f6c:	6961      	ldr	r1, [r4, #20]
 8009f6e:	1d18      	adds	r0, r3, #4
 8009f70:	6028      	str	r0, [r5, #0]
 8009f72:	0635      	lsls	r5, r6, #24
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	d501      	bpl.n	8009f7c <_printf_i+0x1c4>
 8009f78:	6019      	str	r1, [r3, #0]
 8009f7a:	e002      	b.n	8009f82 <_printf_i+0x1ca>
 8009f7c:	0670      	lsls	r0, r6, #25
 8009f7e:	d5fb      	bpl.n	8009f78 <_printf_i+0x1c0>
 8009f80:	8019      	strh	r1, [r3, #0]
 8009f82:	2300      	movs	r3, #0
 8009f84:	6123      	str	r3, [r4, #16]
 8009f86:	4615      	mov	r5, r2
 8009f88:	e7bc      	b.n	8009f04 <_printf_i+0x14c>
 8009f8a:	682b      	ldr	r3, [r5, #0]
 8009f8c:	1d1a      	adds	r2, r3, #4
 8009f8e:	602a      	str	r2, [r5, #0]
 8009f90:	681d      	ldr	r5, [r3, #0]
 8009f92:	6862      	ldr	r2, [r4, #4]
 8009f94:	2100      	movs	r1, #0
 8009f96:	4628      	mov	r0, r5
 8009f98:	f7f6 f91a 	bl	80001d0 <memchr>
 8009f9c:	b108      	cbz	r0, 8009fa2 <_printf_i+0x1ea>
 8009f9e:	1b40      	subs	r0, r0, r5
 8009fa0:	6060      	str	r0, [r4, #4]
 8009fa2:	6863      	ldr	r3, [r4, #4]
 8009fa4:	6123      	str	r3, [r4, #16]
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fac:	e7aa      	b.n	8009f04 <_printf_i+0x14c>
 8009fae:	6923      	ldr	r3, [r4, #16]
 8009fb0:	462a      	mov	r2, r5
 8009fb2:	4649      	mov	r1, r9
 8009fb4:	4640      	mov	r0, r8
 8009fb6:	47d0      	blx	sl
 8009fb8:	3001      	adds	r0, #1
 8009fba:	d0ad      	beq.n	8009f18 <_printf_i+0x160>
 8009fbc:	6823      	ldr	r3, [r4, #0]
 8009fbe:	079b      	lsls	r3, r3, #30
 8009fc0:	d413      	bmi.n	8009fea <_printf_i+0x232>
 8009fc2:	68e0      	ldr	r0, [r4, #12]
 8009fc4:	9b03      	ldr	r3, [sp, #12]
 8009fc6:	4298      	cmp	r0, r3
 8009fc8:	bfb8      	it	lt
 8009fca:	4618      	movlt	r0, r3
 8009fcc:	e7a6      	b.n	8009f1c <_printf_i+0x164>
 8009fce:	2301      	movs	r3, #1
 8009fd0:	4632      	mov	r2, r6
 8009fd2:	4649      	mov	r1, r9
 8009fd4:	4640      	mov	r0, r8
 8009fd6:	47d0      	blx	sl
 8009fd8:	3001      	adds	r0, #1
 8009fda:	d09d      	beq.n	8009f18 <_printf_i+0x160>
 8009fdc:	3501      	adds	r5, #1
 8009fde:	68e3      	ldr	r3, [r4, #12]
 8009fe0:	9903      	ldr	r1, [sp, #12]
 8009fe2:	1a5b      	subs	r3, r3, r1
 8009fe4:	42ab      	cmp	r3, r5
 8009fe6:	dcf2      	bgt.n	8009fce <_printf_i+0x216>
 8009fe8:	e7eb      	b.n	8009fc2 <_printf_i+0x20a>
 8009fea:	2500      	movs	r5, #0
 8009fec:	f104 0619 	add.w	r6, r4, #25
 8009ff0:	e7f5      	b.n	8009fde <_printf_i+0x226>
 8009ff2:	bf00      	nop
 8009ff4:	0800a53d 	.word	0x0800a53d
 8009ff8:	0800a54e 	.word	0x0800a54e

08009ffc <__sflush_r>:
 8009ffc:	898a      	ldrh	r2, [r1, #12]
 8009ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a002:	4605      	mov	r5, r0
 800a004:	0710      	lsls	r0, r2, #28
 800a006:	460c      	mov	r4, r1
 800a008:	d458      	bmi.n	800a0bc <__sflush_r+0xc0>
 800a00a:	684b      	ldr	r3, [r1, #4]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	dc05      	bgt.n	800a01c <__sflush_r+0x20>
 800a010:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a012:	2b00      	cmp	r3, #0
 800a014:	dc02      	bgt.n	800a01c <__sflush_r+0x20>
 800a016:	2000      	movs	r0, #0
 800a018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a01c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a01e:	2e00      	cmp	r6, #0
 800a020:	d0f9      	beq.n	800a016 <__sflush_r+0x1a>
 800a022:	2300      	movs	r3, #0
 800a024:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a028:	682f      	ldr	r7, [r5, #0]
 800a02a:	6a21      	ldr	r1, [r4, #32]
 800a02c:	602b      	str	r3, [r5, #0]
 800a02e:	d032      	beq.n	800a096 <__sflush_r+0x9a>
 800a030:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a032:	89a3      	ldrh	r3, [r4, #12]
 800a034:	075a      	lsls	r2, r3, #29
 800a036:	d505      	bpl.n	800a044 <__sflush_r+0x48>
 800a038:	6863      	ldr	r3, [r4, #4]
 800a03a:	1ac0      	subs	r0, r0, r3
 800a03c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a03e:	b10b      	cbz	r3, 800a044 <__sflush_r+0x48>
 800a040:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a042:	1ac0      	subs	r0, r0, r3
 800a044:	2300      	movs	r3, #0
 800a046:	4602      	mov	r2, r0
 800a048:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a04a:	6a21      	ldr	r1, [r4, #32]
 800a04c:	4628      	mov	r0, r5
 800a04e:	47b0      	blx	r6
 800a050:	1c43      	adds	r3, r0, #1
 800a052:	89a3      	ldrh	r3, [r4, #12]
 800a054:	d106      	bne.n	800a064 <__sflush_r+0x68>
 800a056:	6829      	ldr	r1, [r5, #0]
 800a058:	291d      	cmp	r1, #29
 800a05a:	d82b      	bhi.n	800a0b4 <__sflush_r+0xb8>
 800a05c:	4a29      	ldr	r2, [pc, #164]	; (800a104 <__sflush_r+0x108>)
 800a05e:	410a      	asrs	r2, r1
 800a060:	07d6      	lsls	r6, r2, #31
 800a062:	d427      	bmi.n	800a0b4 <__sflush_r+0xb8>
 800a064:	2200      	movs	r2, #0
 800a066:	6062      	str	r2, [r4, #4]
 800a068:	04d9      	lsls	r1, r3, #19
 800a06a:	6922      	ldr	r2, [r4, #16]
 800a06c:	6022      	str	r2, [r4, #0]
 800a06e:	d504      	bpl.n	800a07a <__sflush_r+0x7e>
 800a070:	1c42      	adds	r2, r0, #1
 800a072:	d101      	bne.n	800a078 <__sflush_r+0x7c>
 800a074:	682b      	ldr	r3, [r5, #0]
 800a076:	b903      	cbnz	r3, 800a07a <__sflush_r+0x7e>
 800a078:	6560      	str	r0, [r4, #84]	; 0x54
 800a07a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a07c:	602f      	str	r7, [r5, #0]
 800a07e:	2900      	cmp	r1, #0
 800a080:	d0c9      	beq.n	800a016 <__sflush_r+0x1a>
 800a082:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a086:	4299      	cmp	r1, r3
 800a088:	d002      	beq.n	800a090 <__sflush_r+0x94>
 800a08a:	4628      	mov	r0, r5
 800a08c:	f7ff fbea 	bl	8009864 <_free_r>
 800a090:	2000      	movs	r0, #0
 800a092:	6360      	str	r0, [r4, #52]	; 0x34
 800a094:	e7c0      	b.n	800a018 <__sflush_r+0x1c>
 800a096:	2301      	movs	r3, #1
 800a098:	4628      	mov	r0, r5
 800a09a:	47b0      	blx	r6
 800a09c:	1c41      	adds	r1, r0, #1
 800a09e:	d1c8      	bne.n	800a032 <__sflush_r+0x36>
 800a0a0:	682b      	ldr	r3, [r5, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d0c5      	beq.n	800a032 <__sflush_r+0x36>
 800a0a6:	2b1d      	cmp	r3, #29
 800a0a8:	d001      	beq.n	800a0ae <__sflush_r+0xb2>
 800a0aa:	2b16      	cmp	r3, #22
 800a0ac:	d101      	bne.n	800a0b2 <__sflush_r+0xb6>
 800a0ae:	602f      	str	r7, [r5, #0]
 800a0b0:	e7b1      	b.n	800a016 <__sflush_r+0x1a>
 800a0b2:	89a3      	ldrh	r3, [r4, #12]
 800a0b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0b8:	81a3      	strh	r3, [r4, #12]
 800a0ba:	e7ad      	b.n	800a018 <__sflush_r+0x1c>
 800a0bc:	690f      	ldr	r7, [r1, #16]
 800a0be:	2f00      	cmp	r7, #0
 800a0c0:	d0a9      	beq.n	800a016 <__sflush_r+0x1a>
 800a0c2:	0793      	lsls	r3, r2, #30
 800a0c4:	680e      	ldr	r6, [r1, #0]
 800a0c6:	bf08      	it	eq
 800a0c8:	694b      	ldreq	r3, [r1, #20]
 800a0ca:	600f      	str	r7, [r1, #0]
 800a0cc:	bf18      	it	ne
 800a0ce:	2300      	movne	r3, #0
 800a0d0:	eba6 0807 	sub.w	r8, r6, r7
 800a0d4:	608b      	str	r3, [r1, #8]
 800a0d6:	f1b8 0f00 	cmp.w	r8, #0
 800a0da:	dd9c      	ble.n	800a016 <__sflush_r+0x1a>
 800a0dc:	6a21      	ldr	r1, [r4, #32]
 800a0de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0e0:	4643      	mov	r3, r8
 800a0e2:	463a      	mov	r2, r7
 800a0e4:	4628      	mov	r0, r5
 800a0e6:	47b0      	blx	r6
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	dc06      	bgt.n	800a0fa <__sflush_r+0xfe>
 800a0ec:	89a3      	ldrh	r3, [r4, #12]
 800a0ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0f2:	81a3      	strh	r3, [r4, #12]
 800a0f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0f8:	e78e      	b.n	800a018 <__sflush_r+0x1c>
 800a0fa:	4407      	add	r7, r0
 800a0fc:	eba8 0800 	sub.w	r8, r8, r0
 800a100:	e7e9      	b.n	800a0d6 <__sflush_r+0xda>
 800a102:	bf00      	nop
 800a104:	dfbffffe 	.word	0xdfbffffe

0800a108 <_fflush_r>:
 800a108:	b538      	push	{r3, r4, r5, lr}
 800a10a:	690b      	ldr	r3, [r1, #16]
 800a10c:	4605      	mov	r5, r0
 800a10e:	460c      	mov	r4, r1
 800a110:	b913      	cbnz	r3, 800a118 <_fflush_r+0x10>
 800a112:	2500      	movs	r5, #0
 800a114:	4628      	mov	r0, r5
 800a116:	bd38      	pop	{r3, r4, r5, pc}
 800a118:	b118      	cbz	r0, 800a122 <_fflush_r+0x1a>
 800a11a:	6a03      	ldr	r3, [r0, #32]
 800a11c:	b90b      	cbnz	r3, 800a122 <_fflush_r+0x1a>
 800a11e:	f7ff fa9b 	bl	8009658 <__sinit>
 800a122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d0f3      	beq.n	800a112 <_fflush_r+0xa>
 800a12a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a12c:	07d0      	lsls	r0, r2, #31
 800a12e:	d404      	bmi.n	800a13a <_fflush_r+0x32>
 800a130:	0599      	lsls	r1, r3, #22
 800a132:	d402      	bmi.n	800a13a <_fflush_r+0x32>
 800a134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a136:	f7ff fb93 	bl	8009860 <__retarget_lock_acquire_recursive>
 800a13a:	4628      	mov	r0, r5
 800a13c:	4621      	mov	r1, r4
 800a13e:	f7ff ff5d 	bl	8009ffc <__sflush_r>
 800a142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a144:	07da      	lsls	r2, r3, #31
 800a146:	4605      	mov	r5, r0
 800a148:	d4e4      	bmi.n	800a114 <_fflush_r+0xc>
 800a14a:	89a3      	ldrh	r3, [r4, #12]
 800a14c:	059b      	lsls	r3, r3, #22
 800a14e:	d4e1      	bmi.n	800a114 <_fflush_r+0xc>
 800a150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a152:	f7ff fb86 	bl	8009862 <__retarget_lock_release_recursive>
 800a156:	e7dd      	b.n	800a114 <_fflush_r+0xc>

0800a158 <__swbuf_r>:
 800a158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a15a:	460e      	mov	r6, r1
 800a15c:	4614      	mov	r4, r2
 800a15e:	4605      	mov	r5, r0
 800a160:	b118      	cbz	r0, 800a16a <__swbuf_r+0x12>
 800a162:	6a03      	ldr	r3, [r0, #32]
 800a164:	b90b      	cbnz	r3, 800a16a <__swbuf_r+0x12>
 800a166:	f7ff fa77 	bl	8009658 <__sinit>
 800a16a:	69a3      	ldr	r3, [r4, #24]
 800a16c:	60a3      	str	r3, [r4, #8]
 800a16e:	89a3      	ldrh	r3, [r4, #12]
 800a170:	071a      	lsls	r2, r3, #28
 800a172:	d525      	bpl.n	800a1c0 <__swbuf_r+0x68>
 800a174:	6923      	ldr	r3, [r4, #16]
 800a176:	b31b      	cbz	r3, 800a1c0 <__swbuf_r+0x68>
 800a178:	6823      	ldr	r3, [r4, #0]
 800a17a:	6922      	ldr	r2, [r4, #16]
 800a17c:	1a98      	subs	r0, r3, r2
 800a17e:	6963      	ldr	r3, [r4, #20]
 800a180:	b2f6      	uxtb	r6, r6
 800a182:	4283      	cmp	r3, r0
 800a184:	4637      	mov	r7, r6
 800a186:	dc04      	bgt.n	800a192 <__swbuf_r+0x3a>
 800a188:	4621      	mov	r1, r4
 800a18a:	4628      	mov	r0, r5
 800a18c:	f7ff ffbc 	bl	800a108 <_fflush_r>
 800a190:	b9e0      	cbnz	r0, 800a1cc <__swbuf_r+0x74>
 800a192:	68a3      	ldr	r3, [r4, #8]
 800a194:	3b01      	subs	r3, #1
 800a196:	60a3      	str	r3, [r4, #8]
 800a198:	6823      	ldr	r3, [r4, #0]
 800a19a:	1c5a      	adds	r2, r3, #1
 800a19c:	6022      	str	r2, [r4, #0]
 800a19e:	701e      	strb	r6, [r3, #0]
 800a1a0:	6962      	ldr	r2, [r4, #20]
 800a1a2:	1c43      	adds	r3, r0, #1
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d004      	beq.n	800a1b2 <__swbuf_r+0x5a>
 800a1a8:	89a3      	ldrh	r3, [r4, #12]
 800a1aa:	07db      	lsls	r3, r3, #31
 800a1ac:	d506      	bpl.n	800a1bc <__swbuf_r+0x64>
 800a1ae:	2e0a      	cmp	r6, #10
 800a1b0:	d104      	bne.n	800a1bc <__swbuf_r+0x64>
 800a1b2:	4621      	mov	r1, r4
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	f7ff ffa7 	bl	800a108 <_fflush_r>
 800a1ba:	b938      	cbnz	r0, 800a1cc <__swbuf_r+0x74>
 800a1bc:	4638      	mov	r0, r7
 800a1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1c0:	4621      	mov	r1, r4
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	f000 f806 	bl	800a1d4 <__swsetup_r>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	d0d5      	beq.n	800a178 <__swbuf_r+0x20>
 800a1cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a1d0:	e7f4      	b.n	800a1bc <__swbuf_r+0x64>
	...

0800a1d4 <__swsetup_r>:
 800a1d4:	b538      	push	{r3, r4, r5, lr}
 800a1d6:	4b2a      	ldr	r3, [pc, #168]	; (800a280 <__swsetup_r+0xac>)
 800a1d8:	4605      	mov	r5, r0
 800a1da:	6818      	ldr	r0, [r3, #0]
 800a1dc:	460c      	mov	r4, r1
 800a1de:	b118      	cbz	r0, 800a1e8 <__swsetup_r+0x14>
 800a1e0:	6a03      	ldr	r3, [r0, #32]
 800a1e2:	b90b      	cbnz	r3, 800a1e8 <__swsetup_r+0x14>
 800a1e4:	f7ff fa38 	bl	8009658 <__sinit>
 800a1e8:	89a3      	ldrh	r3, [r4, #12]
 800a1ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1ee:	0718      	lsls	r0, r3, #28
 800a1f0:	d422      	bmi.n	800a238 <__swsetup_r+0x64>
 800a1f2:	06d9      	lsls	r1, r3, #27
 800a1f4:	d407      	bmi.n	800a206 <__swsetup_r+0x32>
 800a1f6:	2309      	movs	r3, #9
 800a1f8:	602b      	str	r3, [r5, #0]
 800a1fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a1fe:	81a3      	strh	r3, [r4, #12]
 800a200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a204:	e034      	b.n	800a270 <__swsetup_r+0x9c>
 800a206:	0758      	lsls	r0, r3, #29
 800a208:	d512      	bpl.n	800a230 <__swsetup_r+0x5c>
 800a20a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a20c:	b141      	cbz	r1, 800a220 <__swsetup_r+0x4c>
 800a20e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a212:	4299      	cmp	r1, r3
 800a214:	d002      	beq.n	800a21c <__swsetup_r+0x48>
 800a216:	4628      	mov	r0, r5
 800a218:	f7ff fb24 	bl	8009864 <_free_r>
 800a21c:	2300      	movs	r3, #0
 800a21e:	6363      	str	r3, [r4, #52]	; 0x34
 800a220:	89a3      	ldrh	r3, [r4, #12]
 800a222:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a226:	81a3      	strh	r3, [r4, #12]
 800a228:	2300      	movs	r3, #0
 800a22a:	6063      	str	r3, [r4, #4]
 800a22c:	6923      	ldr	r3, [r4, #16]
 800a22e:	6023      	str	r3, [r4, #0]
 800a230:	89a3      	ldrh	r3, [r4, #12]
 800a232:	f043 0308 	orr.w	r3, r3, #8
 800a236:	81a3      	strh	r3, [r4, #12]
 800a238:	6923      	ldr	r3, [r4, #16]
 800a23a:	b94b      	cbnz	r3, 800a250 <__swsetup_r+0x7c>
 800a23c:	89a3      	ldrh	r3, [r4, #12]
 800a23e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a246:	d003      	beq.n	800a250 <__swsetup_r+0x7c>
 800a248:	4621      	mov	r1, r4
 800a24a:	4628      	mov	r0, r5
 800a24c:	f000 f850 	bl	800a2f0 <__smakebuf_r>
 800a250:	89a0      	ldrh	r0, [r4, #12]
 800a252:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a256:	f010 0301 	ands.w	r3, r0, #1
 800a25a:	d00a      	beq.n	800a272 <__swsetup_r+0x9e>
 800a25c:	2300      	movs	r3, #0
 800a25e:	60a3      	str	r3, [r4, #8]
 800a260:	6963      	ldr	r3, [r4, #20]
 800a262:	425b      	negs	r3, r3
 800a264:	61a3      	str	r3, [r4, #24]
 800a266:	6923      	ldr	r3, [r4, #16]
 800a268:	b943      	cbnz	r3, 800a27c <__swsetup_r+0xa8>
 800a26a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a26e:	d1c4      	bne.n	800a1fa <__swsetup_r+0x26>
 800a270:	bd38      	pop	{r3, r4, r5, pc}
 800a272:	0781      	lsls	r1, r0, #30
 800a274:	bf58      	it	pl
 800a276:	6963      	ldrpl	r3, [r4, #20]
 800a278:	60a3      	str	r3, [r4, #8]
 800a27a:	e7f4      	b.n	800a266 <__swsetup_r+0x92>
 800a27c:	2000      	movs	r0, #0
 800a27e:	e7f7      	b.n	800a270 <__swsetup_r+0x9c>
 800a280:	20000158 	.word	0x20000158

0800a284 <_sbrk_r>:
 800a284:	b538      	push	{r3, r4, r5, lr}
 800a286:	4d06      	ldr	r5, [pc, #24]	; (800a2a0 <_sbrk_r+0x1c>)
 800a288:	2300      	movs	r3, #0
 800a28a:	4604      	mov	r4, r0
 800a28c:	4608      	mov	r0, r1
 800a28e:	602b      	str	r3, [r5, #0]
 800a290:	f7f6 ff82 	bl	8001198 <_sbrk>
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	d102      	bne.n	800a29e <_sbrk_r+0x1a>
 800a298:	682b      	ldr	r3, [r5, #0]
 800a29a:	b103      	cbz	r3, 800a29e <_sbrk_r+0x1a>
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	bd38      	pop	{r3, r4, r5, pc}
 800a2a0:	20002014 	.word	0x20002014

0800a2a4 <__swhatbuf_r>:
 800a2a4:	b570      	push	{r4, r5, r6, lr}
 800a2a6:	460c      	mov	r4, r1
 800a2a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2ac:	2900      	cmp	r1, #0
 800a2ae:	b096      	sub	sp, #88	; 0x58
 800a2b0:	4615      	mov	r5, r2
 800a2b2:	461e      	mov	r6, r3
 800a2b4:	da0d      	bge.n	800a2d2 <__swhatbuf_r+0x2e>
 800a2b6:	89a3      	ldrh	r3, [r4, #12]
 800a2b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a2bc:	f04f 0100 	mov.w	r1, #0
 800a2c0:	bf0c      	ite	eq
 800a2c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a2c6:	2340      	movne	r3, #64	; 0x40
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	6031      	str	r1, [r6, #0]
 800a2cc:	602b      	str	r3, [r5, #0]
 800a2ce:	b016      	add	sp, #88	; 0x58
 800a2d0:	bd70      	pop	{r4, r5, r6, pc}
 800a2d2:	466a      	mov	r2, sp
 800a2d4:	f000 f848 	bl	800a368 <_fstat_r>
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	dbec      	blt.n	800a2b6 <__swhatbuf_r+0x12>
 800a2dc:	9901      	ldr	r1, [sp, #4]
 800a2de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a2e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a2e6:	4259      	negs	r1, r3
 800a2e8:	4159      	adcs	r1, r3
 800a2ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2ee:	e7eb      	b.n	800a2c8 <__swhatbuf_r+0x24>

0800a2f0 <__smakebuf_r>:
 800a2f0:	898b      	ldrh	r3, [r1, #12]
 800a2f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2f4:	079d      	lsls	r5, r3, #30
 800a2f6:	4606      	mov	r6, r0
 800a2f8:	460c      	mov	r4, r1
 800a2fa:	d507      	bpl.n	800a30c <__smakebuf_r+0x1c>
 800a2fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a300:	6023      	str	r3, [r4, #0]
 800a302:	6123      	str	r3, [r4, #16]
 800a304:	2301      	movs	r3, #1
 800a306:	6163      	str	r3, [r4, #20]
 800a308:	b002      	add	sp, #8
 800a30a:	bd70      	pop	{r4, r5, r6, pc}
 800a30c:	ab01      	add	r3, sp, #4
 800a30e:	466a      	mov	r2, sp
 800a310:	f7ff ffc8 	bl	800a2a4 <__swhatbuf_r>
 800a314:	9900      	ldr	r1, [sp, #0]
 800a316:	4605      	mov	r5, r0
 800a318:	4630      	mov	r0, r6
 800a31a:	f7ff fb0f 	bl	800993c <_malloc_r>
 800a31e:	b948      	cbnz	r0, 800a334 <__smakebuf_r+0x44>
 800a320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a324:	059a      	lsls	r2, r3, #22
 800a326:	d4ef      	bmi.n	800a308 <__smakebuf_r+0x18>
 800a328:	f023 0303 	bic.w	r3, r3, #3
 800a32c:	f043 0302 	orr.w	r3, r3, #2
 800a330:	81a3      	strh	r3, [r4, #12]
 800a332:	e7e3      	b.n	800a2fc <__smakebuf_r+0xc>
 800a334:	89a3      	ldrh	r3, [r4, #12]
 800a336:	6020      	str	r0, [r4, #0]
 800a338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a33c:	81a3      	strh	r3, [r4, #12]
 800a33e:	9b00      	ldr	r3, [sp, #0]
 800a340:	6163      	str	r3, [r4, #20]
 800a342:	9b01      	ldr	r3, [sp, #4]
 800a344:	6120      	str	r0, [r4, #16]
 800a346:	b15b      	cbz	r3, 800a360 <__smakebuf_r+0x70>
 800a348:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a34c:	4630      	mov	r0, r6
 800a34e:	f000 f81d 	bl	800a38c <_isatty_r>
 800a352:	b128      	cbz	r0, 800a360 <__smakebuf_r+0x70>
 800a354:	89a3      	ldrh	r3, [r4, #12]
 800a356:	f023 0303 	bic.w	r3, r3, #3
 800a35a:	f043 0301 	orr.w	r3, r3, #1
 800a35e:	81a3      	strh	r3, [r4, #12]
 800a360:	89a3      	ldrh	r3, [r4, #12]
 800a362:	431d      	orrs	r5, r3
 800a364:	81a5      	strh	r5, [r4, #12]
 800a366:	e7cf      	b.n	800a308 <__smakebuf_r+0x18>

0800a368 <_fstat_r>:
 800a368:	b538      	push	{r3, r4, r5, lr}
 800a36a:	4d07      	ldr	r5, [pc, #28]	; (800a388 <_fstat_r+0x20>)
 800a36c:	2300      	movs	r3, #0
 800a36e:	4604      	mov	r4, r0
 800a370:	4608      	mov	r0, r1
 800a372:	4611      	mov	r1, r2
 800a374:	602b      	str	r3, [r5, #0]
 800a376:	f7f6 fee6 	bl	8001146 <_fstat>
 800a37a:	1c43      	adds	r3, r0, #1
 800a37c:	d102      	bne.n	800a384 <_fstat_r+0x1c>
 800a37e:	682b      	ldr	r3, [r5, #0]
 800a380:	b103      	cbz	r3, 800a384 <_fstat_r+0x1c>
 800a382:	6023      	str	r3, [r4, #0]
 800a384:	bd38      	pop	{r3, r4, r5, pc}
 800a386:	bf00      	nop
 800a388:	20002014 	.word	0x20002014

0800a38c <_isatty_r>:
 800a38c:	b538      	push	{r3, r4, r5, lr}
 800a38e:	4d06      	ldr	r5, [pc, #24]	; (800a3a8 <_isatty_r+0x1c>)
 800a390:	2300      	movs	r3, #0
 800a392:	4604      	mov	r4, r0
 800a394:	4608      	mov	r0, r1
 800a396:	602b      	str	r3, [r5, #0]
 800a398:	f7f6 fee5 	bl	8001166 <_isatty>
 800a39c:	1c43      	adds	r3, r0, #1
 800a39e:	d102      	bne.n	800a3a6 <_isatty_r+0x1a>
 800a3a0:	682b      	ldr	r3, [r5, #0]
 800a3a2:	b103      	cbz	r3, 800a3a6 <_isatty_r+0x1a>
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	bd38      	pop	{r3, r4, r5, pc}
 800a3a8:	20002014 	.word	0x20002014

0800a3ac <_init>:
 800a3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ae:	bf00      	nop
 800a3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3b2:	bc08      	pop	{r3}
 800a3b4:	469e      	mov	lr, r3
 800a3b6:	4770      	bx	lr

0800a3b8 <_fini>:
 800a3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ba:	bf00      	nop
 800a3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3be:	bc08      	pop	{r3}
 800a3c0:	469e      	mov	lr, r3
 800a3c2:	4770      	bx	lr
