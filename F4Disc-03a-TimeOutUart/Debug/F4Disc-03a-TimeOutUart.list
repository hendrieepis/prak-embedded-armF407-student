
F4Disc-03a-TimeOutUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009598  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08009728  08009728  00019728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800982c  0800982c  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  0800982c  0800982c  0001982c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009834  08009834  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009834  08009834  00019834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009838  08009838  00019838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  0800983c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020158  2**0
                  CONTENTS
 10 .bss          00001e74  20000158  20000158  00020158  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001fcc  20001fcc  00020158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015211  00000000  00000000  000201cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d85  00000000  00000000  000353dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001328  00000000  00000000  00039168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e7a  00000000  00000000  0003a490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025b06  00000000  00000000  0003b30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a2ce  00000000  00000000  00060e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc5f1  00000000  00000000  0007b0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000552c  00000000  00000000  001476d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0014cbfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000158 	.word	0x20000158
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009710 	.word	0x08009710

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000015c 	.word	0x2000015c
 80001cc:	08009710 	.word	0x08009710

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <checkBoard>:
 */

#include "checkboard.h"
#include "main.h"
#include "stdio.h"
void checkBoard(void){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
	  HAL_Delay(5000);
 8000572:	f241 3088 	movw	r0, #5000	; 0x1388
 8000576:	f000 fe9d 	bl	80012b4 <HAL_Delay>
	  printf("Cek BarLED, buzzer, USER LED \n\r");
 800057a:	482c      	ldr	r0, [pc, #176]	; (800062c <checkBoard+0xc0>)
 800057c:	f008 fa54 	bl	8008a28 <iprintf>
	  HAL_Delay(1000);
 8000580:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000584:	f000 fe96 	bl	80012b4 <HAL_Delay>
	  for (uint8_t cnt=0;cnt<8;cnt++){
 8000588:	2300      	movs	r3, #0
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	e044      	b.n	8000618 <checkBoard+0xac>

		  HAL_GPIO_TogglePin(BAR0_GPIO_Port, BAR0_Pin);
 800058e:	2140      	movs	r1, #64	; 0x40
 8000590:	4827      	ldr	r0, [pc, #156]	; (8000630 <checkBoard+0xc4>)
 8000592:	f001 f992 	bl	80018ba <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR1_GPIO_Port, BAR1_Pin);
 8000596:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059a:	4826      	ldr	r0, [pc, #152]	; (8000634 <checkBoard+0xc8>)
 800059c:	f001 f98d 	bl	80018ba <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR2_GPIO_Port, BAR2_Pin);
 80005a0:	2110      	movs	r1, #16
 80005a2:	4823      	ldr	r0, [pc, #140]	; (8000630 <checkBoard+0xc4>)
 80005a4:	f001 f989 	bl	80018ba <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR3_GPIO_Port, BAR3_Pin);
 80005a8:	2120      	movs	r1, #32
 80005aa:	4821      	ldr	r0, [pc, #132]	; (8000630 <checkBoard+0xc4>)
 80005ac:	f001 f985 	bl	80018ba <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR4_GPIO_Port, BAR4_Pin);
 80005b0:	2104      	movs	r1, #4
 80005b2:	481f      	ldr	r0, [pc, #124]	; (8000630 <checkBoard+0xc4>)
 80005b4:	f001 f981 	bl	80018ba <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR5_GPIO_Port, BAR5_Pin);
 80005b8:	2110      	movs	r1, #16
 80005ba:	481f      	ldr	r0, [pc, #124]	; (8000638 <checkBoard+0xcc>)
 80005bc:	f001 f97d 	bl	80018ba <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR6_GPIO_Port, BAR6_Pin);
 80005c0:	2120      	movs	r1, #32
 80005c2:	481d      	ldr	r0, [pc, #116]	; (8000638 <checkBoard+0xcc>)
 80005c4:	f001 f979 	bl	80018ba <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR7_GPIO_Port, BAR7_Pin);
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	481c      	ldr	r0, [pc, #112]	; (800063c <checkBoard+0xd0>)
 80005cc:	f001 f975 	bl	80018ba <HAL_GPIO_TogglePin>

		  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80005d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d4:	4817      	ldr	r0, [pc, #92]	; (8000634 <checkBoard+0xc8>)
 80005d6:	f001 f970 	bl	80018ba <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80005da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005de:	4817      	ldr	r0, [pc, #92]	; (800063c <checkBoard+0xd0>)
 80005e0:	f001 f96b 	bl	80018ba <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80005e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e8:	4814      	ldr	r0, [pc, #80]	; (800063c <checkBoard+0xd0>)
 80005ea:	f001 f966 	bl	80018ba <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 80005ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f2:	4812      	ldr	r0, [pc, #72]	; (800063c <checkBoard+0xd0>)
 80005f4:	f001 f961 	bl	80018ba <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 80005f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005fc:	480f      	ldr	r0, [pc, #60]	; (800063c <checkBoard+0xd0>)
 80005fe:	f001 f95c 	bl	80018ba <HAL_GPIO_TogglePin>
		  printf("count: %d \n\r",cnt);
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	4619      	mov	r1, r3
 8000606:	480e      	ldr	r0, [pc, #56]	; (8000640 <checkBoard+0xd4>)
 8000608:	f008 fa0e 	bl	8008a28 <iprintf>
		  HAL_Delay(100);
 800060c:	2064      	movs	r0, #100	; 0x64
 800060e:	f000 fe51 	bl	80012b4 <HAL_Delay>
	  for (uint8_t cnt=0;cnt<8;cnt++){
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	3301      	adds	r3, #1
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	2b07      	cmp	r3, #7
 800061c:	d9b7      	bls.n	800058e <checkBoard+0x22>
	  }

	  printf("Cek Button \n\r");
 800061e:	4809      	ldr	r0, [pc, #36]	; (8000644 <checkBoard+0xd8>)
 8000620:	f008 fa02 	bl	8008a28 <iprintf>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	08009728 	.word	0x08009728
 8000630:	40021000 	.word	0x40021000
 8000634:	40020800 	.word	0x40020800
 8000638:	40020400 	.word	0x40020400
 800063c:	40020c00 	.word	0x40020c00
 8000640:	08009748 	.word	0x08009748
 8000644:	08009758 	.word	0x08009758

08000648 <counterShow>:
#include "counter.h"
#include "stdint.h"
#include "main.h"
uint16_t count;

uint16_t counterShow(void){
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BAR0_GPIO_Port,BAR0_Pin,count & (1<<0));
 800064c:	4b2e      	ldr	r3, [pc, #184]	; (8000708 <counterShow+0xc0>)
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	461a      	mov	r2, r3
 800065a:	2140      	movs	r1, #64	; 0x40
 800065c:	482b      	ldr	r0, [pc, #172]	; (800070c <counterShow+0xc4>)
 800065e:	f001 f913 	bl	8001888 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR1_GPIO_Port,BAR1_Pin,count & (1<<1));
 8000662:	4b29      	ldr	r3, [pc, #164]	; (8000708 <counterShow+0xc0>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	f003 0302 	and.w	r3, r3, #2
 800066c:	b2db      	uxtb	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000674:	4826      	ldr	r0, [pc, #152]	; (8000710 <counterShow+0xc8>)
 8000676:	f001 f907 	bl	8001888 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR2_GPIO_Port,BAR2_Pin,count & (1<<2));
 800067a:	4b23      	ldr	r3, [pc, #140]	; (8000708 <counterShow+0xc0>)
 800067c:	881b      	ldrh	r3, [r3, #0]
 800067e:	b2db      	uxtb	r3, r3
 8000680:	f003 0304 	and.w	r3, r3, #4
 8000684:	b2db      	uxtb	r3, r3
 8000686:	461a      	mov	r2, r3
 8000688:	2110      	movs	r1, #16
 800068a:	4820      	ldr	r0, [pc, #128]	; (800070c <counterShow+0xc4>)
 800068c:	f001 f8fc 	bl	8001888 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR3_GPIO_Port,BAR3_Pin,count & (1<<3));
 8000690:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <counterShow+0xc0>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	b2db      	uxtb	r3, r3
 8000696:	f003 0308 	and.w	r3, r3, #8
 800069a:	b2db      	uxtb	r3, r3
 800069c:	461a      	mov	r2, r3
 800069e:	2120      	movs	r1, #32
 80006a0:	481a      	ldr	r0, [pc, #104]	; (800070c <counterShow+0xc4>)
 80006a2:	f001 f8f1 	bl	8001888 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR4_GPIO_Port,BAR4_Pin,count & (1<<4));
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <counterShow+0xc0>)
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	f003 0310 	and.w	r3, r3, #16
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	461a      	mov	r2, r3
 80006b4:	2104      	movs	r1, #4
 80006b6:	4815      	ldr	r0, [pc, #84]	; (800070c <counterShow+0xc4>)
 80006b8:	f001 f8e6 	bl	8001888 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR5_GPIO_Port,BAR5_Pin,count & (1<<5));
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <counterShow+0xc0>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	f003 0320 	and.w	r3, r3, #32
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	461a      	mov	r2, r3
 80006ca:	2110      	movs	r1, #16
 80006cc:	4811      	ldr	r0, [pc, #68]	; (8000714 <counterShow+0xcc>)
 80006ce:	f001 f8db 	bl	8001888 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR6_GPIO_Port,BAR6_Pin,count & (1<<6));
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <counterShow+0xc0>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	461a      	mov	r2, r3
 80006e0:	2120      	movs	r1, #32
 80006e2:	480c      	ldr	r0, [pc, #48]	; (8000714 <counterShow+0xcc>)
 80006e4:	f001 f8d0 	bl	8001888 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR7_GPIO_Port,BAR7_Pin,count & (1<<7));
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <counterShow+0xc0>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	461a      	mov	r2, r3
 80006f6:	2180      	movs	r1, #128	; 0x80
 80006f8:	4807      	ldr	r0, [pc, #28]	; (8000718 <counterShow+0xd0>)
 80006fa:	f001 f8c5 	bl	8001888 <HAL_GPIO_WritePin>
	return count;
 80006fe:	4b02      	ldr	r3, [pc, #8]	; (8000708 <counterShow+0xc0>)
 8000700:	881b      	ldrh	r3, [r3, #0]
}
 8000702:	4618      	mov	r0, r3
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000174 	.word	0x20000174
 800070c:	40021000 	.word	0x40021000
 8000710:	40020800 	.word	0x40020800
 8000714:	40020400 	.word	0x40020400
 8000718:	40020c00 	.word	0x40020c00

0800071c <CounterUpdate>:
void CounterUpdate(void){
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
	++count;
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <CounterUpdate+0x1c>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	b29a      	uxth	r2, r3
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <CounterUpdate+0x1c>)
 800072a:	801a      	strh	r2, [r3, #0]
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	20000174 	.word	0x20000174

0800073c <CounterZero>:

void CounterZero(void){
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	count=0;
 8000740:	4b03      	ldr	r3, [pc, #12]	; (8000750 <CounterZero+0x14>)
 8000742:	2200      	movs	r2, #0
 8000744:	801a      	strh	r2, [r3, #0]
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	20000174 	.word	0x20000174

08000754 <_write>:
I2S_HandleTypeDef hi2s3;
SPI_HandleTypeDef hspi1;

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*) ptr, len); return len;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	b29b      	uxth	r3, r3
 8000764:	4619      	mov	r1, r3
 8000766:	68b8      	ldr	r0, [r7, #8]
 8000768:	f007 fc44 	bl	8007ff4 <CDC_Transmit_FS>
 800076c:	687b      	ldr	r3, [r7, #4]
}
 800076e:	4618      	mov	r0, r3
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	; 0x50
 800077c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	2230      	movs	r2, #48	; 0x30
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f008 f9a3 	bl	8008ad2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	4b28      	ldr	r3, [pc, #160]	; (8000844 <SystemClock_Config+0xcc>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	4a27      	ldr	r2, [pc, #156]	; (8000844 <SystemClock_Config+0xcc>)
 80007a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007aa:	6413      	str	r3, [r2, #64]	; 0x40
 80007ac:	4b25      	ldr	r3, [pc, #148]	; (8000844 <SystemClock_Config+0xcc>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <SystemClock_Config+0xd0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a21      	ldr	r2, [pc, #132]	; (8000848 <SystemClock_Config+0xd0>)
 80007c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <SystemClock_Config+0xd0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d4:	2301      	movs	r3, #1
 80007d6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	2302      	movs	r3, #2
 80007e0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80007e8:	2308      	movs	r3, #8
 80007ea:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80007ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007f0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80007f6:	2307      	movs	r3, #7
 80007f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fa:	f107 0320 	add.w	r3, r7, #32
 80007fe:	4618      	mov	r0, r3
 8000800:	f003 f8d8 	bl	80039b4 <HAL_RCC_OscConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x96>
	{
		Error_Handler();
 800080a:	f000 f9fd 	bl	8000c08 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080e:	230f      	movs	r3, #15
 8000810:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	2302      	movs	r3, #2
 8000814:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800081a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800081e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000824:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	2105      	movs	r1, #5
 800082c:	4618      	mov	r0, r3
 800082e:	f003 fb39 	bl	8003ea4 <HAL_RCC_ClockConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8000838:	f000 f9e6 	bl	8000c08 <Error_Handler>
	}
}
 800083c:	bf00      	nop
 800083e:	3750      	adds	r7, #80	; 0x50
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40007000 	.word	0x40007000

0800084c <MX_I2C1_Init>:

void MX_I2C1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_I2C1_Init+0x50>)
 8000852:	4a13      	ldr	r2, [pc, #76]	; (80008a0 <MX_I2C1_Init+0x54>)
 8000854:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_I2C1_Init+0x50>)
 8000858:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <MX_I2C1_Init+0x58>)
 800085a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_I2C1_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_I2C1_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_I2C1_Init+0x50>)
 800086a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800086e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <MX_I2C1_Init+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_I2C1_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_I2C1_Init+0x50>)
 800088a:	f001 f831 	bl	80018f0 <HAL_I2C_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8000894:	f000 f9b8 	bl	8000c08 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000178 	.word	0x20000178
 80008a0:	40005400 	.word	0x40005400
 80008a4:	000186a0 	.word	0x000186a0

080008a8 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
void MX_I2S3_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <MX_I2S3_Init+0x54>)
 80008ae:	4a14      	ldr	r2, [pc, #80]	; (8000900 <MX_I2S3_Init+0x58>)
 80008b0:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_I2S3_Init+0x54>)
 80008b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b8:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_I2S3_Init+0x54>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_I2S3_Init+0x54>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <MX_I2S3_Init+0x54>)
 80008c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008cc:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_I2S3_Init+0x54>)
 80008d0:	4a0c      	ldr	r2, [pc, #48]	; (8000904 <MX_I2S3_Init+0x5c>)
 80008d2:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_I2S3_Init+0x54>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_I2S3_Init+0x54>)
 80008dc:	2200      	movs	r2, #0
 80008de:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_I2S3_Init+0x54>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_I2S3_Init+0x54>)
 80008e8:	f001 f946 	bl	8001b78 <HAL_I2S_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_I2S3_Init+0x4e>
	{
		Error_Handler();
 80008f2:	f000 f989 	bl	8000c08 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200001cc 	.word	0x200001cc
 8000900:	40003c00 	.word	0x40003c00
 8000904:	00017700 	.word	0x00017700

08000908 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_SPI1_Init+0x64>)
 800090e:	4a18      	ldr	r2, [pc, #96]	; (8000970 <MX_SPI1_Init+0x68>)
 8000910:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_SPI1_Init+0x64>)
 8000914:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000918:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_SPI1_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_SPI1_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_SPI1_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_SPI1_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_SPI1_Init+0x64>)
 8000934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000938:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_SPI1_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_SPI1_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_SPI1_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <MX_SPI1_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_SPI1_Init+0x64>)
 8000954:	220a      	movs	r2, #10
 8000956:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_SPI1_Init+0x64>)
 800095a:	f003 fdef 	bl	800453c <HAL_SPI_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8000964:	f000 f950 	bl	8000c08 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000214 	.word	0x20000214
 8000970:	40013000 	.word	0x40013000

08000974 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	; 0x30
 8000978:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
 800098e:	4b98      	ldr	r3, [pc, #608]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a97      	ldr	r2, [pc, #604]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 8000994:	f043 0310 	orr.w	r3, r3, #16
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b95      	ldr	r3, [pc, #596]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0310 	and.w	r3, r3, #16
 80009a2:	61bb      	str	r3, [r7, #24]
 80009a4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	4b91      	ldr	r3, [pc, #580]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a90      	ldr	r2, [pc, #576]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b8e      	ldr	r3, [pc, #568]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b8a      	ldr	r3, [pc, #552]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a89      	ldr	r2, [pc, #548]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b87      	ldr	r3, [pc, #540]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b83      	ldr	r3, [pc, #524]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a82      	ldr	r2, [pc, #520]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b80      	ldr	r3, [pc, #512]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	4b7c      	ldr	r3, [pc, #496]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a7b      	ldr	r2, [pc, #492]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b79      	ldr	r3, [pc, #484]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b75      	ldr	r3, [pc, #468]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a74      	ldr	r2, [pc, #464]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 8000a20:	f043 0308 	orr.w	r3, r3, #8
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b72      	ldr	r3, [pc, #456]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, BAR4_Pin|CS_I2C_SPI_Pin|BAR2_Pin|BAR3_Pin
 8000a32:	2200      	movs	r2, #0
 8000a34:	217c      	movs	r1, #124	; 0x7c
 8000a36:	486f      	ldr	r0, [pc, #444]	; (8000bf4 <MX_GPIO_Init+0x280>)
 8000a38:	f000 ff26 	bl	8001888 <HAL_GPIO_WritePin>
			|BAR0_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, BAR1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8000a42:	486d      	ldr	r0, [pc, #436]	; (8000bf8 <MX_GPIO_Init+0x284>)
 8000a44:	f000 ff20 	bl	8001888 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	486a      	ldr	r0, [pc, #424]	; (8000bf8 <MX_GPIO_Init+0x284>)
 8000a4e:	f000 ff1b 	bl	8001888 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a52:	2200      	movs	r2, #0
 8000a54:	f24f 0190 	movw	r1, #61584	; 0xf090
 8000a58:	4868      	ldr	r0, [pc, #416]	; (8000bfc <MX_GPIO_Init+0x288>)
 8000a5a:	f000 ff15 	bl	8001888 <HAL_GPIO_WritePin>
			|Audio_RST_Pin|BAR7_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, BAR5_Pin|BAR6_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2130      	movs	r1, #48	; 0x30
 8000a62:	4867      	ldr	r0, [pc, #412]	; (8000c00 <MX_GPIO_Init+0x28c>)
 8000a64:	f000 ff10 	bl	8001888 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : BAR4_Pin CS_I2C_SPI_Pin BAR2_Pin BAR3_Pin
                           BAR0_Pin */
	GPIO_InitStruct.Pin = BAR4_Pin|CS_I2C_SPI_Pin|BAR2_Pin|BAR3_Pin
 8000a68:	237c      	movs	r3, #124	; 0x7c
 8000a6a:	61fb      	str	r3, [r7, #28]
			|BAR0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	485d      	ldr	r0, [pc, #372]	; (8000bf4 <MX_GPIO_Init+0x280>)
 8000a80:	f000 fd4e 	bl	8001520 <HAL_GPIO_Init>

	/*Configure GPIO pins : BAR1_Pin OTG_FS_PowerSwitchOn_Pin BUZZER_Pin */
	GPIO_InitStruct.Pin = BAR1_Pin|OTG_FS_PowerSwitchOn_Pin|BUZZER_Pin;
 8000a84:	f642 0301 	movw	r3, #10241	; 0x2801
 8000a88:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4856      	ldr	r0, [pc, #344]	; (8000bf8 <MX_GPIO_Init+0x284>)
 8000a9e:	f000 fd3f 	bl	8001520 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000aa2:	2308      	movs	r3, #8
 8000aa4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ab2:	2305      	movs	r3, #5
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	484e      	ldr	r0, [pc, #312]	; (8000bf8 <MX_GPIO_Init+0x284>)
 8000abe:	f000 fd2f 	bl	8001520 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ac6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000aca:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	484b      	ldr	r0, [pc, #300]	; (8000c04 <MX_GPIO_Init+0x290>)
 8000ad8:	f000 fd22 	bl	8001520 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_UP_Pin BTN_RIGHT_Pin */
	GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_RIGHT_Pin;
 8000adc:	2330      	movs	r3, #48	; 0x30
 8000ade:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	4842      	ldr	r0, [pc, #264]	; (8000bf8 <MX_GPIO_Init+0x284>)
 8000af0:	f000 fd16 	bl	8001520 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_DN_Pin BTN_LEFT_Pin SW3_Pin SW4_Pin */
	GPIO_InitStruct.Pin = BTN_DN_Pin|BTN_LEFT_Pin|SW3_Pin|SW4_Pin;
 8000af4:	f641 0303 	movw	r3, #6147	; 0x1803
 8000af8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	483d      	ldr	r0, [pc, #244]	; (8000c00 <MX_GPIO_Init+0x28c>)
 8000b0a:	f000 fd09 	bl	8001520 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4837      	ldr	r0, [pc, #220]	; (8000c00 <MX_GPIO_Init+0x28c>)
 8000b22:	f000 fcfd 	bl	8001520 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_OK_Pin BTN_CANCEL_Pin */
	GPIO_InitStruct.Pin = BTN_OK_Pin|BTN_CANCEL_Pin;
 8000b26:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000b2a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	482e      	ldr	r0, [pc, #184]	; (8000bf4 <MX_GPIO_Init+0x280>)
 8000b3c:	f000 fcf0 	bl	8001520 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b44:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b52:	2305      	movs	r3, #5
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4828      	ldr	r0, [pc, #160]	; (8000c00 <MX_GPIO_Init+0x28c>)
 8000b5e:	f000 fcdf 	bl	8001520 <HAL_GPIO_Init>

	/*Configure GPIO pins : SW2_Pin SW1_Pin */
	GPIO_InitStruct.Pin = SW2_Pin|SW1_Pin;
 8000b62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b66:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4619      	mov	r1, r3
 8000b76:	4821      	ldr	r0, [pc, #132]	; (8000bfc <MX_GPIO_Init+0x288>)
 8000b78:	f000 fcd2 	bl	8001520 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin BAR7_Pin */
	GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b7c:	f24f 0390 	movw	r3, #61584	; 0xf090
 8000b80:	61fb      	str	r3, [r7, #28]
			|Audio_RST_Pin|BAR7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	4819      	ldr	r0, [pc, #100]	; (8000bfc <MX_GPIO_Init+0x288>)
 8000b96:	f000 fcc3 	bl	8001520 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b9a:	2320      	movs	r3, #32
 8000b9c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4619      	mov	r1, r3
 8000bac:	4813      	ldr	r0, [pc, #76]	; (8000bfc <MX_GPIO_Init+0x288>)
 8000bae:	f000 fcb7 	bl	8001520 <HAL_GPIO_Init>

	/*Configure GPIO pins : BAR5_Pin BAR6_Pin */
	GPIO_InitStruct.Pin = BAR5_Pin|BAR6_Pin;
 8000bb2:	2330      	movs	r3, #48	; 0x30
 8000bb4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <MX_GPIO_Init+0x28c>)
 8000bca:	f000 fca9 	bl	8001520 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bd2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bd6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <MX_GPIO_Init+0x280>)
 8000be4:	f000 fc9c 	bl	8001520 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000be8:	bf00      	nop
 8000bea:	3730      	adds	r7, #48	; 0x30
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40020800 	.word	0x40020800
 8000bfc:	40020c00 	.word	0x40020c00
 8000c00:	40020400 	.word	0x40020400
 8000c04:	40020000 	.word	0x40020000

08000c08 <Error_Handler>:

void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c10:	e7fe      	b.n	8000c10 <Error_Handler+0x8>
	...

08000c14 <main>:
#include "sensor.h"
#include "hardwareinit.h"
#include "checkboard.h"

int main(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	HAL_Init();
 8000c18:	f000 fada 	bl	80011d0 <HAL_Init>
	SystemClock_Config();
 8000c1c:	f7ff fdac 	bl	8000778 <SystemClock_Config>

	MX_GPIO_Init();
 8000c20:	f7ff fea8 	bl	8000974 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000c24:	f7ff fe12 	bl	800084c <MX_I2C1_Init>
	MX_I2S3_Init();
 8000c28:	f7ff fe3e 	bl	80008a8 <MX_I2S3_Init>
	MX_SPI1_Init();
 8000c2c:	f7ff fe6c 	bl	8000908 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8000c30:	f007 f922 	bl	8007e78 <MX_USB_DEVICE_Init>
    checkBoard();
 8000c34:	f7ff fc9a 	bl	800056c <checkBoard>
	while (1)
	{

        if(sensorDetected()){
 8000c38:	f000 f81e 	bl	8000c78 <sensorDetected>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d008      	beq.n	8000c54 <main+0x40>
        	CounterUpdate();
 8000c42:	f7ff fd6b 	bl	800071c <CounterUpdate>
        	printf("nilai counter: %d \n\r",counterShow());
 8000c46:	f7ff fcff 	bl	8000648 <counterShow>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4809      	ldr	r0, [pc, #36]	; (8000c74 <main+0x60>)
 8000c50:	f007 feea 	bl	8008a28 <iprintf>
        }

        if(resetDetected()){
 8000c54:	f000 f864 	bl	8000d20 <resetDetected>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d0ec      	beq.n	8000c38 <main+0x24>
        	CounterZero();
 8000c5e:	f7ff fd6d 	bl	800073c <CounterZero>
        	printf("nilai counter: %d \n\r",counterShow());
 8000c62:	f7ff fcf1 	bl	8000648 <counterShow>
 8000c66:	4603      	mov	r3, r0
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4802      	ldr	r0, [pc, #8]	; (8000c74 <main+0x60>)
 8000c6c:	f007 fedc 	bl	8008a28 <iprintf>
        if(sensorDetected()){
 8000c70:	e7e2      	b.n	8000c38 <main+0x24>
 8000c72:	bf00      	nop
 8000c74:	08009768 	.word	0x08009768

08000c78 <sensorDetected>:
//		}
//	}
//	return FlagDetect;
//}

uint8_t sensorDetected(void){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
	uint32_t  Timeout_loop=0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
	uint32_t  Timeout_value=0x7FFFFF;
 8000c82:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <sensorDetected+0x98>)
 8000c84:	607b      	str	r3, [r7, #4]
	uint8_t FlagDetect=0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	72fb      	strb	r3, [r7, #11]
	if(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)==GPIO_PIN_RESET) {
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	4821      	ldr	r0, [pc, #132]	; (8000d14 <sensorDetected+0x9c>)
 8000c8e:	f000 fde3 	bl	8001858 <HAL_GPIO_ReadPin>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d135      	bne.n	8000d04 <sensorDetected+0x8c>
		HAL_Delay(20);
 8000c98:	2014      	movs	r0, #20
 8000c9a:	f000 fb0b 	bl	80012b4 <HAL_Delay>
		if(!HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)) {
 8000c9e:	2102      	movs	r1, #2
 8000ca0:	481c      	ldr	r0, [pc, #112]	; (8000d14 <sensorDetected+0x9c>)
 8000ca2:	f000 fdd9 	bl	8001858 <HAL_GPIO_ReadPin>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d12b      	bne.n	8000d04 <sensorDetected+0x8c>
			while((!HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin))&& (Timeout_loop++<=Timeout_value));
 8000cac:	bf00      	nop
 8000cae:	2102      	movs	r1, #2
 8000cb0:	4818      	ldr	r0, [pc, #96]	; (8000d14 <sensorDetected+0x9c>)
 8000cb2:	f000 fdd1 	bl	8001858 <HAL_GPIO_ReadPin>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d105      	bne.n	8000cc8 <sensorDetected+0x50>
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	60fa      	str	r2, [r7, #12]
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d2f2      	bcs.n	8000cae <sensorDetected+0x36>
			if (Timeout_loop>=Timeout_value)
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d317      	bcc.n	8000d00 <sensorDetected+0x88>
			{
				HAL_GPIO_WritePin(BUZZER_GPIO_Port,BUZZER_Pin,GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cd6:	4810      	ldr	r0, [pc, #64]	; (8000d18 <sensorDetected+0xa0>)
 8000cd8:	f000 fdd6 	bl	8001888 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8000cdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ce0:	f000 fae8 	bl	80012b4 <HAL_Delay>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port,BUZZER_Pin,GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cea:	480b      	ldr	r0, [pc, #44]	; (8000d18 <sensorDetected+0xa0>)
 8000cec:	f000 fdcc 	bl	8001888 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8000cf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf4:	f000 fade 	bl	80012b4 <HAL_Delay>
				printf("Err:001-btn error \n\r");
 8000cf8:	4808      	ldr	r0, [pc, #32]	; (8000d1c <sensorDetected+0xa4>)
 8000cfa:	f007 fe95 	bl	8008a28 <iprintf>
 8000cfe:	e001      	b.n	8000d04 <sensorDetected+0x8c>
			} else
			{
				//				  CLR(buzzer);
				FlagDetect=1;
 8000d00:	2301      	movs	r3, #1
 8000d02:	72fb      	strb	r3, [r7, #11]
			}
		}
	}
	return FlagDetect;
 8000d04:	7afb      	ldrb	r3, [r7, #11]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	007fffff 	.word	0x007fffff
 8000d14:	40020400 	.word	0x40020400
 8000d18:	40020800 	.word	0x40020800
 8000d1c:	08009780 	.word	0x08009780

08000d20 <resetDetected>:

uint8_t resetDetected(void){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
	uint8_t FlagDetect=0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port,BTN_RIGHT_Pin)== GPIO_PIN_RESET) {
 8000d2a:	2120      	movs	r1, #32
 8000d2c:	480f      	ldr	r0, [pc, #60]	; (8000d6c <resetDetected+0x4c>)
 8000d2e:	f000 fd93 	bl	8001858 <HAL_GPIO_ReadPin>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d113      	bne.n	8000d60 <resetDetected+0x40>
		HAL_Delay(20);
 8000d38:	2014      	movs	r0, #20
 8000d3a:	f000 fabb 	bl	80012b4 <HAL_Delay>
		if(HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port,BTN_RIGHT_Pin)== GPIO_PIN_RESET) {
 8000d3e:	2120      	movs	r1, #32
 8000d40:	480a      	ldr	r0, [pc, #40]	; (8000d6c <resetDetected+0x4c>)
 8000d42:	f000 fd89 	bl	8001858 <HAL_GPIO_ReadPin>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d109      	bne.n	8000d60 <resetDetected+0x40>
			while(HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port,BTN_RIGHT_Pin)== GPIO_PIN_RESET);
 8000d4c:	bf00      	nop
 8000d4e:	2120      	movs	r1, #32
 8000d50:	4806      	ldr	r0, [pc, #24]	; (8000d6c <resetDetected+0x4c>)
 8000d52:	f000 fd81 	bl	8001858 <HAL_GPIO_ReadPin>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d0f8      	beq.n	8000d4e <resetDetected+0x2e>
			FlagDetect=1;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	71fb      	strb	r3, [r7, #7]
		}
	}
	return FlagDetect;
 8000d60:	79fb      	ldrb	r3, [r7, #7]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40020800 	.word	0x40020800

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	4a0f      	ldr	r2, [pc, #60]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d84:	6453      	str	r3, [r2, #68]	; 0x44
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	603b      	str	r3, [r7, #0]
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da0:	6413      	str	r3, [r2, #64]	; 0x40
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_MspInit+0x4c>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dae:	2007      	movs	r0, #7
 8000db0:	f000 fb74 	bl	800149c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40023800 	.word	0x40023800

08000dc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a19      	ldr	r2, [pc, #100]	; (8000e44 <HAL_I2C_MspInit+0x84>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d12c      	bne.n	8000e3c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <HAL_I2C_MspInit+0x88>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a17      	ldr	r2, [pc, #92]	; (8000e48 <HAL_I2C_MspInit+0x88>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <HAL_I2C_MspInit+0x88>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000dfe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e04:	2312      	movs	r3, #18
 8000e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e10:	2304      	movs	r3, #4
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480c      	ldr	r0, [pc, #48]	; (8000e4c <HAL_I2C_MspInit+0x8c>)
 8000e1c:	f000 fb80 	bl	8001520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_I2C_MspInit+0x88>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <HAL_I2C_MspInit+0x88>)
 8000e2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <HAL_I2C_MspInit+0x88>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e3c:	bf00      	nop
 8000e3e:	3728      	adds	r7, #40	; 0x28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40005400 	.word	0x40005400
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020400 	.word	0x40020400

08000e50 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08e      	sub	sp, #56	; 0x38
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a31      	ldr	r2, [pc, #196]	; (8000f40 <HAL_I2S_MspInit+0xf0>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d15a      	bne.n	8000f36 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e80:	2301      	movs	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e84:	23c0      	movs	r3, #192	; 0xc0
 8000e86:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4618      	mov	r0, r3
 8000e92:	f003 fa13 	bl	80042bc <HAL_RCCEx_PeriphCLKConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e9c:	f7ff feb4 	bl	8000c08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <HAL_I2S_MspInit+0xf4>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	4a26      	ldr	r2, [pc, #152]	; (8000f44 <HAL_I2S_MspInit+0xf4>)
 8000eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eae:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb0:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <HAL_I2S_MspInit+0xf4>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	4b20      	ldr	r3, [pc, #128]	; (8000f44 <HAL_I2S_MspInit+0xf4>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec4:	4a1f      	ldr	r2, [pc, #124]	; (8000f44 <HAL_I2S_MspInit+0xf4>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6313      	str	r3, [r2, #48]	; 0x30
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <HAL_I2S_MspInit+0xf4>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <HAL_I2S_MspInit+0xf4>)
 8000ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee0:	4a18      	ldr	r2, [pc, #96]	; (8000f44 <HAL_I2S_MspInit+0xf4>)
 8000ee2:	f043 0304 	orr.w	r3, r3, #4
 8000ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <HAL_I2S_MspInit+0xf4>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ef4:	2310      	movs	r3, #16
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2300      	movs	r3, #0
 8000f02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f04:	2306      	movs	r3, #6
 8000f06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	480e      	ldr	r0, [pc, #56]	; (8000f48 <HAL_I2S_MspInit+0xf8>)
 8000f10:	f000 fb06 	bl	8001520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f14:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f26:	2306      	movs	r3, #6
 8000f28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4806      	ldr	r0, [pc, #24]	; (8000f4c <HAL_I2S_MspInit+0xfc>)
 8000f32:	f000 faf5 	bl	8001520 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f36:	bf00      	nop
 8000f38:	3738      	adds	r7, #56	; 0x38
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40003c00 	.word	0x40003c00
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020000 	.word	0x40020000
 8000f4c:	40020800 	.word	0x40020800

08000f50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a19      	ldr	r2, [pc, #100]	; (8000fd4 <HAL_SPI_MspInit+0x84>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d12b      	bne.n	8000fca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_SPI_MspInit+0x88>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <HAL_SPI_MspInit+0x88>)
 8000f7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f80:	6453      	str	r3, [r2, #68]	; 0x44
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_SPI_MspInit+0x88>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_SPI_MspInit+0x88>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <HAL_SPI_MspInit+0x88>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_SPI_MspInit+0x88>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000faa:	23e0      	movs	r3, #224	; 0xe0
 8000fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fba:	2305      	movs	r3, #5
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <HAL_SPI_MspInit+0x8c>)
 8000fc6:	f000 faab 	bl	8001520 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	; 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40013000 	.word	0x40013000
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020000 	.word	0x40020000

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <NMI_Handler+0x4>

08000fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <BusFault_Handler+0x4>

08000ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <UsageFault_Handler+0x4>

08000ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800102c:	f000 f922 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <OTG_FS_IRQHandler+0x10>)
 800103a:	f001 fb8d 	bl	8002758 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20001754 	.word	0x20001754

08001048 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	e00a      	b.n	8001070 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800105a:	f3af 8000 	nop.w
 800105e:	4601      	mov	r1, r0
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	60ba      	str	r2, [r7, #8]
 8001066:	b2ca      	uxtb	r2, r1
 8001068:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3301      	adds	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	dbf0      	blt.n	800105a <_read+0x12>
  }

  return len;
 8001078:	687b      	ldr	r3, [r7, #4]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800108e:	4618      	mov	r0, r3
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010aa:	605a      	str	r2, [r3, #4]
  return 0;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <_isatty>:

int _isatty(int file)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f4:	4a14      	ldr	r2, [pc, #80]	; (8001148 <_sbrk+0x5c>)
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <_sbrk+0x60>)
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d102      	bne.n	800110e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <_sbrk+0x64>)
 800110a:	4a12      	ldr	r2, [pc, #72]	; (8001154 <_sbrk+0x68>)
 800110c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	429a      	cmp	r2, r3
 800111a:	d207      	bcs.n	800112c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800111c:	f007 fd28 	bl	8008b70 <__errno>
 8001120:	4603      	mov	r3, r0
 8001122:	220c      	movs	r2, #12
 8001124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800112a:	e009      	b.n	8001140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001132:	4b07      	ldr	r3, [pc, #28]	; (8001150 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	4a05      	ldr	r2, [pc, #20]	; (8001150 <_sbrk+0x64>)
 800113c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113e:	68fb      	ldr	r3, [r7, #12]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20020000 	.word	0x20020000
 800114c:	00000400 	.word	0x00000400
 8001150:	2000026c 	.word	0x2000026c
 8001154:	20001fd0 	.word	0x20001fd0

08001158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <SystemInit+0x20>)
 800115e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001162:	4a05      	ldr	r2, [pc, #20]	; (8001178 <SystemInit+0x20>)
 8001164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800117c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001180:	480d      	ldr	r0, [pc, #52]	; (80011b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001182:	490e      	ldr	r1, [pc, #56]	; (80011bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001184:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001188:	e002      	b.n	8001190 <LoopCopyDataInit>

0800118a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800118c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118e:	3304      	adds	r3, #4

08001190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001194:	d3f9      	bcc.n	800118a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001196:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001198:	4c0b      	ldr	r4, [pc, #44]	; (80011c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800119c:	e001      	b.n	80011a2 <LoopFillZerobss>

0800119e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a0:	3204      	adds	r2, #4

080011a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a4:	d3fb      	bcc.n	800119e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011a6:	f7ff ffd7 	bl	8001158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011aa:	f007 fce7 	bl	8008b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ae:	f7ff fd31 	bl	8000c14 <main>
  bx  lr    
 80011b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011bc:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 80011c0:	0800983c 	.word	0x0800983c
  ldr r2, =_sbss
 80011c4:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80011c8:	20001fcc 	.word	0x20001fcc

080011cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011cc:	e7fe      	b.n	80011cc <ADC_IRQHandler>
	...

080011d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_Init+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <HAL_Init+0x40>)
 80011da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_Init+0x40>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <HAL_Init+0x40>)
 80011e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_Init+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a07      	ldr	r2, [pc, #28]	; (8001210 <HAL_Init+0x40>)
 80011f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f8:	2003      	movs	r0, #3
 80011fa:	f000 f94f 	bl	800149c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fe:	2000      	movs	r0, #0
 8001200:	f000 f808 	bl	8001214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001204:	f7ff fdb4 	bl	8000d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023c00 	.word	0x40023c00

08001214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_InitTick+0x54>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_InitTick+0x58>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	fbb3 f3f1 	udiv	r3, r3, r1
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f967 	bl	8001506 <HAL_SYSTICK_Config>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e00e      	b.n	8001260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d80a      	bhi.n	800125e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001250:	f000 f92f 	bl	80014b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001254:	4a06      	ldr	r2, [pc, #24]	; (8001270 <HAL_InitTick+0x5c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000000 	.word	0x20000000
 800126c:	20000008 	.word	0x20000008
 8001270:	20000004 	.word	0x20000004

08001274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_IncTick+0x20>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_IncTick+0x24>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a04      	ldr	r2, [pc, #16]	; (8001298 <HAL_IncTick+0x24>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000008 	.word	0x20000008
 8001298:	20000270 	.word	0x20000270

0800129c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <HAL_GetTick+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000270 	.word	0x20000270

080012b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012bc:	f7ff ffee 	bl	800129c <HAL_GetTick>
 80012c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012cc:	d005      	beq.n	80012da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_Delay+0x44>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4413      	add	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012da:	bf00      	nop
 80012dc:	f7ff ffde 	bl	800129c <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d8f7      	bhi.n	80012dc <HAL_Delay+0x28>
  {
  }
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000008 	.word	0x20000008

080012fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001318:	4013      	ands	r3, r2
 800131a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800132c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132e:	4a04      	ldr	r2, [pc, #16]	; (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	60d3      	str	r3, [r2, #12]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <__NVIC_GetPriorityGrouping+0x18>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	f003 0307 	and.w	r3, r3, #7
}
 8001352:	4618      	mov	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	2b00      	cmp	r3, #0
 8001370:	db0b      	blt.n	800138a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	f003 021f 	and.w	r2, r3, #31
 8001378:	4907      	ldr	r1, [pc, #28]	; (8001398 <__NVIC_EnableIRQ+0x38>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	2001      	movs	r0, #1
 8001382:	fa00 f202 	lsl.w	r2, r0, r2
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000e100 	.word	0xe000e100

0800139c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	6039      	str	r1, [r7, #0]
 80013a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db0a      	blt.n	80013c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	490c      	ldr	r1, [pc, #48]	; (80013e8 <__NVIC_SetPriority+0x4c>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	0112      	lsls	r2, r2, #4
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	440b      	add	r3, r1
 80013c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c4:	e00a      	b.n	80013dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4908      	ldr	r1, [pc, #32]	; (80013ec <__NVIC_SetPriority+0x50>)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	3b04      	subs	r3, #4
 80013d4:	0112      	lsls	r2, r2, #4
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	440b      	add	r3, r1
 80013da:	761a      	strb	r2, [r3, #24]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000e100 	.word	0xe000e100
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	; 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f1c3 0307 	rsb	r3, r3, #7
 800140a:	2b04      	cmp	r3, #4
 800140c:	bf28      	it	cs
 800140e:	2304      	movcs	r3, #4
 8001410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3304      	adds	r3, #4
 8001416:	2b06      	cmp	r3, #6
 8001418:	d902      	bls.n	8001420 <NVIC_EncodePriority+0x30>
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3b03      	subs	r3, #3
 800141e:	e000      	b.n	8001422 <NVIC_EncodePriority+0x32>
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43da      	mvns	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	401a      	ands	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001438:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	43d9      	mvns	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	4313      	orrs	r3, r2
         );
}
 800144a:	4618      	mov	r0, r3
 800144c:	3724      	adds	r7, #36	; 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001468:	d301      	bcc.n	800146e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146a:	2301      	movs	r3, #1
 800146c:	e00f      	b.n	800148e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <SysTick_Config+0x40>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001476:	210f      	movs	r1, #15
 8001478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800147c:	f7ff ff8e 	bl	800139c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <SysTick_Config+0x40>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001486:	4b04      	ldr	r3, [pc, #16]	; (8001498 <SysTick_Config+0x40>)
 8001488:	2207      	movs	r2, #7
 800148a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	e000e010 	.word	0xe000e010

0800149c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff29 	bl	80012fc <__NVIC_SetPriorityGrouping>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c4:	f7ff ff3e 	bl	8001344 <__NVIC_GetPriorityGrouping>
 80014c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	6978      	ldr	r0, [r7, #20]
 80014d0:	f7ff ff8e 	bl	80013f0 <NVIC_EncodePriority>
 80014d4:	4602      	mov	r2, r0
 80014d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff5d 	bl	800139c <__NVIC_SetPriority>
}
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff31 	bl	8001360 <__NVIC_EnableIRQ>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ffa2 	bl	8001458 <SysTick_Config>
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001520:	b480      	push	{r7}
 8001522:	b089      	sub	sp, #36	; 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
 800153a:	e16b      	b.n	8001814 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800153c:	2201      	movs	r2, #1
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	429a      	cmp	r2, r3
 8001556:	f040 815a 	bne.w	800180e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	2b01      	cmp	r3, #1
 8001564:	d005      	beq.n	8001572 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800156e:	2b02      	cmp	r3, #2
 8001570:	d130      	bne.n	80015d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	2203      	movs	r2, #3
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	68da      	ldr	r2, [r3, #12]
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015a8:	2201      	movs	r2, #1
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	091b      	lsrs	r3, r3, #4
 80015be:	f003 0201 	and.w	r2, r3, #1
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	2b03      	cmp	r3, #3
 80015de:	d017      	beq.n	8001610 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	2203      	movs	r2, #3
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d123      	bne.n	8001664 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	08da      	lsrs	r2, r3, #3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3208      	adds	r2, #8
 8001624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	220f      	movs	r2, #15
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	691a      	ldr	r2, [r3, #16]
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	08da      	lsrs	r2, r3, #3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3208      	adds	r2, #8
 800165e:	69b9      	ldr	r1, [r7, #24]
 8001660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	2203      	movs	r2, #3
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0203 	and.w	r2, r3, #3
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 80b4 	beq.w	800180e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b60      	ldr	r3, [pc, #384]	; (800182c <HAL_GPIO_Init+0x30c>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	4a5f      	ldr	r2, [pc, #380]	; (800182c <HAL_GPIO_Init+0x30c>)
 80016b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b4:	6453      	str	r3, [r2, #68]	; 0x44
 80016b6:	4b5d      	ldr	r3, [pc, #372]	; (800182c <HAL_GPIO_Init+0x30c>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016c2:	4a5b      	ldr	r2, [pc, #364]	; (8001830 <HAL_GPIO_Init+0x310>)
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	089b      	lsrs	r3, r3, #2
 80016c8:	3302      	adds	r3, #2
 80016ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	220f      	movs	r2, #15
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a52      	ldr	r2, [pc, #328]	; (8001834 <HAL_GPIO_Init+0x314>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d02b      	beq.n	8001746 <HAL_GPIO_Init+0x226>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a51      	ldr	r2, [pc, #324]	; (8001838 <HAL_GPIO_Init+0x318>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d025      	beq.n	8001742 <HAL_GPIO_Init+0x222>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a50      	ldr	r2, [pc, #320]	; (800183c <HAL_GPIO_Init+0x31c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d01f      	beq.n	800173e <HAL_GPIO_Init+0x21e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4f      	ldr	r2, [pc, #316]	; (8001840 <HAL_GPIO_Init+0x320>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d019      	beq.n	800173a <HAL_GPIO_Init+0x21a>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4e      	ldr	r2, [pc, #312]	; (8001844 <HAL_GPIO_Init+0x324>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d013      	beq.n	8001736 <HAL_GPIO_Init+0x216>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a4d      	ldr	r2, [pc, #308]	; (8001848 <HAL_GPIO_Init+0x328>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d00d      	beq.n	8001732 <HAL_GPIO_Init+0x212>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4c      	ldr	r2, [pc, #304]	; (800184c <HAL_GPIO_Init+0x32c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d007      	beq.n	800172e <HAL_GPIO_Init+0x20e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4b      	ldr	r2, [pc, #300]	; (8001850 <HAL_GPIO_Init+0x330>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d101      	bne.n	800172a <HAL_GPIO_Init+0x20a>
 8001726:	2307      	movs	r3, #7
 8001728:	e00e      	b.n	8001748 <HAL_GPIO_Init+0x228>
 800172a:	2308      	movs	r3, #8
 800172c:	e00c      	b.n	8001748 <HAL_GPIO_Init+0x228>
 800172e:	2306      	movs	r3, #6
 8001730:	e00a      	b.n	8001748 <HAL_GPIO_Init+0x228>
 8001732:	2305      	movs	r3, #5
 8001734:	e008      	b.n	8001748 <HAL_GPIO_Init+0x228>
 8001736:	2304      	movs	r3, #4
 8001738:	e006      	b.n	8001748 <HAL_GPIO_Init+0x228>
 800173a:	2303      	movs	r3, #3
 800173c:	e004      	b.n	8001748 <HAL_GPIO_Init+0x228>
 800173e:	2302      	movs	r3, #2
 8001740:	e002      	b.n	8001748 <HAL_GPIO_Init+0x228>
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <HAL_GPIO_Init+0x228>
 8001746:	2300      	movs	r3, #0
 8001748:	69fa      	ldr	r2, [r7, #28]
 800174a:	f002 0203 	and.w	r2, r2, #3
 800174e:	0092      	lsls	r2, r2, #2
 8001750:	4093      	lsls	r3, r2
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001758:	4935      	ldr	r1, [pc, #212]	; (8001830 <HAL_GPIO_Init+0x310>)
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	089b      	lsrs	r3, r3, #2
 800175e:	3302      	adds	r3, #2
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001766:	4b3b      	ldr	r3, [pc, #236]	; (8001854 <HAL_GPIO_Init+0x334>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800178a:	4a32      	ldr	r2, [pc, #200]	; (8001854 <HAL_GPIO_Init+0x334>)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001790:	4b30      	ldr	r3, [pc, #192]	; (8001854 <HAL_GPIO_Init+0x334>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017b4:	4a27      	ldr	r2, [pc, #156]	; (8001854 <HAL_GPIO_Init+0x334>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017ba:	4b26      	ldr	r3, [pc, #152]	; (8001854 <HAL_GPIO_Init+0x334>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017de:	4a1d      	ldr	r2, [pc, #116]	; (8001854 <HAL_GPIO_Init+0x334>)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e4:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <HAL_GPIO_Init+0x334>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001808:	4a12      	ldr	r2, [pc, #72]	; (8001854 <HAL_GPIO_Init+0x334>)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3301      	adds	r3, #1
 8001812:	61fb      	str	r3, [r7, #28]
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	2b0f      	cmp	r3, #15
 8001818:	f67f ae90 	bls.w	800153c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	40013800 	.word	0x40013800
 8001834:	40020000 	.word	0x40020000
 8001838:	40020400 	.word	0x40020400
 800183c:	40020800 	.word	0x40020800
 8001840:	40020c00 	.word	0x40020c00
 8001844:	40021000 	.word	0x40021000
 8001848:	40021400 	.word	0x40021400
 800184c:	40021800 	.word	0x40021800
 8001850:	40021c00 	.word	0x40021c00
 8001854:	40013c00 	.word	0x40013c00

08001858 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691a      	ldr	r2, [r3, #16]
 8001868:	887b      	ldrh	r3, [r7, #2]
 800186a:	4013      	ands	r3, r2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d002      	beq.n	8001876 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
 8001874:	e001      	b.n	800187a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800187a:	7bfb      	ldrb	r3, [r7, #15]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	807b      	strh	r3, [r7, #2]
 8001894:	4613      	mov	r3, r2
 8001896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001898:	787b      	ldrb	r3, [r7, #1]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800189e:	887a      	ldrh	r2, [r7, #2]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018a4:	e003      	b.n	80018ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	041a      	lsls	r2, r3, #16
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	619a      	str	r2, [r3, #24]
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b085      	sub	sp, #20
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	460b      	mov	r3, r1
 80018c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018cc:	887a      	ldrh	r2, [r7, #2]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4013      	ands	r3, r2
 80018d2:	041a      	lsls	r2, r3, #16
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	887b      	ldrh	r3, [r7, #2]
 80018da:	400b      	ands	r3, r1
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	619a      	str	r2, [r3, #24]
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e12b      	b.n	8001b5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d106      	bne.n	800191c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff fa52 	bl	8000dc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2224      	movs	r2, #36	; 0x24
 8001920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0201 	bic.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001942:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001952:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001954:	f002 fc9e 	bl	8004294 <HAL_RCC_GetPCLK1Freq>
 8001958:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4a81      	ldr	r2, [pc, #516]	; (8001b64 <HAL_I2C_Init+0x274>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d807      	bhi.n	8001974 <HAL_I2C_Init+0x84>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4a80      	ldr	r2, [pc, #512]	; (8001b68 <HAL_I2C_Init+0x278>)
 8001968:	4293      	cmp	r3, r2
 800196a:	bf94      	ite	ls
 800196c:	2301      	movls	r3, #1
 800196e:	2300      	movhi	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	e006      	b.n	8001982 <HAL_I2C_Init+0x92>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4a7d      	ldr	r2, [pc, #500]	; (8001b6c <HAL_I2C_Init+0x27c>)
 8001978:	4293      	cmp	r3, r2
 800197a:	bf94      	ite	ls
 800197c:	2301      	movls	r3, #1
 800197e:	2300      	movhi	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e0e7      	b.n	8001b5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4a78      	ldr	r2, [pc, #480]	; (8001b70 <HAL_I2C_Init+0x280>)
 800198e:	fba2 2303 	umull	r2, r3, r2, r3
 8001992:	0c9b      	lsrs	r3, r3, #18
 8001994:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	4a6a      	ldr	r2, [pc, #424]	; (8001b64 <HAL_I2C_Init+0x274>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d802      	bhi.n	80019c4 <HAL_I2C_Init+0xd4>
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	3301      	adds	r3, #1
 80019c2:	e009      	b.n	80019d8 <HAL_I2C_Init+0xe8>
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019ca:	fb02 f303 	mul.w	r3, r2, r3
 80019ce:	4a69      	ldr	r2, [pc, #420]	; (8001b74 <HAL_I2C_Init+0x284>)
 80019d0:	fba2 2303 	umull	r2, r3, r2, r3
 80019d4:	099b      	lsrs	r3, r3, #6
 80019d6:	3301      	adds	r3, #1
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	430b      	orrs	r3, r1
 80019de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	495c      	ldr	r1, [pc, #368]	; (8001b64 <HAL_I2C_Init+0x274>)
 80019f4:	428b      	cmp	r3, r1
 80019f6:	d819      	bhi.n	8001a2c <HAL_I2C_Init+0x13c>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1e59      	subs	r1, r3, #1
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a06:	1c59      	adds	r1, r3, #1
 8001a08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a0c:	400b      	ands	r3, r1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00a      	beq.n	8001a28 <HAL_I2C_Init+0x138>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1e59      	subs	r1, r3, #1
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a20:	3301      	adds	r3, #1
 8001a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a26:	e051      	b.n	8001acc <HAL_I2C_Init+0x1dc>
 8001a28:	2304      	movs	r3, #4
 8001a2a:	e04f      	b.n	8001acc <HAL_I2C_Init+0x1dc>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d111      	bne.n	8001a58 <HAL_I2C_Init+0x168>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	1e58      	subs	r0, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6859      	ldr	r1, [r3, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	440b      	add	r3, r1
 8001a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a46:	3301      	adds	r3, #1
 8001a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bf0c      	ite	eq
 8001a50:	2301      	moveq	r3, #1
 8001a52:	2300      	movne	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	e012      	b.n	8001a7e <HAL_I2C_Init+0x18e>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1e58      	subs	r0, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6859      	ldr	r1, [r3, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	0099      	lsls	r1, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a6e:	3301      	adds	r3, #1
 8001a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	bf0c      	ite	eq
 8001a78:	2301      	moveq	r3, #1
 8001a7a:	2300      	movne	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_I2C_Init+0x196>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e022      	b.n	8001acc <HAL_I2C_Init+0x1dc>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10e      	bne.n	8001aac <HAL_I2C_Init+0x1bc>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1e58      	subs	r0, r3, #1
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6859      	ldr	r1, [r3, #4]
 8001a96:	460b      	mov	r3, r1
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	440b      	add	r3, r1
 8001a9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aaa:	e00f      	b.n	8001acc <HAL_I2C_Init+0x1dc>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1e58      	subs	r0, r3, #1
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6859      	ldr	r1, [r3, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	0099      	lsls	r1, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	6809      	ldr	r1, [r1, #0]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69da      	ldr	r2, [r3, #28]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001afa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6911      	ldr	r1, [r2, #16]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68d2      	ldr	r2, [r2, #12]
 8001b06:	4311      	orrs	r1, r2
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	695a      	ldr	r2, [r3, #20]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0201 	orr.w	r2, r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2220      	movs	r2, #32
 8001b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	000186a0 	.word	0x000186a0
 8001b68:	001e847f 	.word	0x001e847f
 8001b6c:	003d08ff 	.word	0x003d08ff
 8001b70:	431bde83 	.word	0x431bde83
 8001b74:	10624dd3 	.word	0x10624dd3

08001b78 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e128      	b.n	8001ddc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d109      	bne.n	8001baa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a90      	ldr	r2, [pc, #576]	; (8001de4 <HAL_I2S_Init+0x26c>)
 8001ba2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff f953 	bl	8000e50 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2202      	movs	r2, #2
 8001bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001bc0:	f023 030f 	bic.w	r3, r3, #15
 8001bc4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d060      	beq.n	8001c98 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d102      	bne.n	8001be4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001bde:	2310      	movs	r3, #16
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	e001      	b.n	8001be8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001be4:	2320      	movs	r3, #32
 8001be6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b20      	cmp	r3, #32
 8001bee:	d802      	bhi.n	8001bf6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	f002 fc42 	bl	8004480 <HAL_RCCEx_GetPeriphCLKFreq>
 8001bfc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c06:	d125      	bne.n	8001c54 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d010      	beq.n	8001c32 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	461a      	mov	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2c:	3305      	adds	r3, #5
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	e01f      	b.n	8001c72 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	461a      	mov	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4e:	3305      	adds	r3, #5
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	e00e      	b.n	8001c72 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	461a      	mov	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6e:	3305      	adds	r3, #5
 8001c70:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4a5c      	ldr	r2, [pc, #368]	; (8001de8 <HAL_I2S_Init+0x270>)
 8001c76:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7a:	08db      	lsrs	r3, r3, #3
 8001c7c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	085b      	lsrs	r3, r3, #1
 8001c8e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	61bb      	str	r3, [r7, #24]
 8001c96:	e003      	b.n	8001ca0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d902      	bls.n	8001cac <HAL_I2S_Init+0x134>
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	2bff      	cmp	r3, #255	; 0xff
 8001caa:	d907      	bls.n	8001cbc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb0:	f043 0210 	orr.w	r2, r3, #16
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e08f      	b.n	8001ddc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	ea42 0103 	orr.w	r1, r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001cda:	f023 030f 	bic.w	r3, r3, #15
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6851      	ldr	r1, [r2, #4]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6892      	ldr	r2, [r2, #8]
 8001ce6:	4311      	orrs	r1, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	68d2      	ldr	r2, [r2, #12]
 8001cec:	4311      	orrs	r1, r2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6992      	ldr	r2, [r2, #24]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cfe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d161      	bne.n	8001dcc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a38      	ldr	r2, [pc, #224]	; (8001dec <HAL_I2S_Init+0x274>)
 8001d0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a37      	ldr	r2, [pc, #220]	; (8001df0 <HAL_I2S_Init+0x278>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d101      	bne.n	8001d1c <HAL_I2S_Init+0x1a4>
 8001d18:	4b36      	ldr	r3, [pc, #216]	; (8001df4 <HAL_I2S_Init+0x27c>)
 8001d1a:	e001      	b.n	8001d20 <HAL_I2S_Init+0x1a8>
 8001d1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	4932      	ldr	r1, [pc, #200]	; (8001df0 <HAL_I2S_Init+0x278>)
 8001d28:	428a      	cmp	r2, r1
 8001d2a:	d101      	bne.n	8001d30 <HAL_I2S_Init+0x1b8>
 8001d2c:	4a31      	ldr	r2, [pc, #196]	; (8001df4 <HAL_I2S_Init+0x27c>)
 8001d2e:	e001      	b.n	8001d34 <HAL_I2S_Init+0x1bc>
 8001d30:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001d34:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001d38:	f023 030f 	bic.w	r3, r3, #15
 8001d3c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a2b      	ldr	r2, [pc, #172]	; (8001df0 <HAL_I2S_Init+0x278>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d101      	bne.n	8001d4c <HAL_I2S_Init+0x1d4>
 8001d48:	4b2a      	ldr	r3, [pc, #168]	; (8001df4 <HAL_I2S_Init+0x27c>)
 8001d4a:	e001      	b.n	8001d50 <HAL_I2S_Init+0x1d8>
 8001d4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d50:	2202      	movs	r2, #2
 8001d52:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a25      	ldr	r2, [pc, #148]	; (8001df0 <HAL_I2S_Init+0x278>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d101      	bne.n	8001d62 <HAL_I2S_Init+0x1ea>
 8001d5e:	4b25      	ldr	r3, [pc, #148]	; (8001df4 <HAL_I2S_Init+0x27c>)
 8001d60:	e001      	b.n	8001d66 <HAL_I2S_Init+0x1ee>
 8001d62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d72:	d003      	beq.n	8001d7c <HAL_I2S_Init+0x204>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d103      	bne.n	8001d84 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	e001      	b.n	8001d88 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001d84:	2300      	movs	r3, #0
 8001d86:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d92:	4313      	orrs	r3, r2
 8001d94:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001da6:	4313      	orrs	r3, r2
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	897b      	ldrh	r3, [r7, #10]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001db4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a0d      	ldr	r2, [pc, #52]	; (8001df0 <HAL_I2S_Init+0x278>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d101      	bne.n	8001dc4 <HAL_I2S_Init+0x24c>
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <HAL_I2S_Init+0x27c>)
 8001dc2:	e001      	b.n	8001dc8 <HAL_I2S_Init+0x250>
 8001dc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dc8:	897a      	ldrh	r2, [r7, #10]
 8001dca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	08001eef 	.word	0x08001eef
 8001de8:	cccccccd 	.word	0xcccccccd
 8001dec:	08002005 	.word	0x08002005
 8001df0:	40003800 	.word	0x40003800
 8001df4:	40003400 	.word	0x40003400

08001df8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	881a      	ldrh	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	1c9a      	adds	r2, r3, #2
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10e      	bne.n	8001e88 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e78:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff ffb8 	bl	8001df8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	b292      	uxth	r2, r2
 8001ea4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	1c9a      	adds	r2, r3, #2
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10e      	bne.n	8001ee6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ed6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ff93 	bl	8001e0c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d13a      	bne.n	8001f80 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d109      	bne.n	8001f28 <I2S_IRQHandler+0x3a>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1e:	2b40      	cmp	r3, #64	; 0x40
 8001f20:	d102      	bne.n	8001f28 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ffb4 	bl	8001e90 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2e:	2b40      	cmp	r3, #64	; 0x40
 8001f30:	d126      	bne.n	8001f80 <I2S_IRQHandler+0x92>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b20      	cmp	r3, #32
 8001f3e:	d11f      	bne.n	8001f80 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f4e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f50:	2300      	movs	r3, #0
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	f043 0202 	orr.w	r2, r3, #2
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ff50 	bl	8001e20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d136      	bne.n	8001ffa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d109      	bne.n	8001faa <I2S_IRQHandler+0xbc>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa0:	2b80      	cmp	r3, #128	; 0x80
 8001fa2:	d102      	bne.n	8001faa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ff45 	bl	8001e34 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d122      	bne.n	8001ffa <I2S_IRQHandler+0x10c>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b20      	cmp	r3, #32
 8001fc0:	d11b      	bne.n	8001ffa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fd0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fec:	f043 0204 	orr.w	r2, r3, #4
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff ff13 	bl	8001e20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a92      	ldr	r2, [pc, #584]	; (8002264 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d101      	bne.n	8002022 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800201e:	4b92      	ldr	r3, [pc, #584]	; (8002268 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002020:	e001      	b.n	8002026 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002022:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a8b      	ldr	r2, [pc, #556]	; (8002264 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d101      	bne.n	8002040 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800203c:	4b8a      	ldr	r3, [pc, #552]	; (8002268 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800203e:	e001      	b.n	8002044 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002040:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002050:	d004      	beq.n	800205c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	f040 8099 	bne.w	800218e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b02      	cmp	r3, #2
 8002064:	d107      	bne.n	8002076 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f925 	bl	80022c0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b01      	cmp	r3, #1
 800207e:	d107      	bne.n	8002090 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f9c8 	bl	8002420 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002096:	2b40      	cmp	r3, #64	; 0x40
 8002098:	d13a      	bne.n	8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f003 0320 	and.w	r3, r3, #32
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d035      	beq.n	8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a6e      	ldr	r2, [pc, #440]	; (8002264 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d101      	bne.n	80020b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80020ae:	4b6e      	ldr	r3, [pc, #440]	; (8002268 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020b0:	e001      	b.n	80020b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80020b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4969      	ldr	r1, [pc, #420]	; (8002264 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020be:	428b      	cmp	r3, r1
 80020c0:	d101      	bne.n	80020c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80020c2:	4b69      	ldr	r3, [pc, #420]	; (8002268 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020c4:	e001      	b.n	80020ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80020c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020ce:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020de:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	f043 0202 	orr.w	r2, r3, #2
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff fe88 	bl	8001e20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b08      	cmp	r3, #8
 8002118:	f040 80c3 	bne.w	80022a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 80bd 	beq.w	80022a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002136:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a49      	ldr	r2, [pc, #292]	; (8002264 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d101      	bne.n	8002146 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002142:	4b49      	ldr	r3, [pc, #292]	; (8002268 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002144:	e001      	b.n	800214a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002146:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4944      	ldr	r1, [pc, #272]	; (8002264 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002152:	428b      	cmp	r3, r1
 8002154:	d101      	bne.n	800215a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002156:	4b44      	ldr	r3, [pc, #272]	; (8002268 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002158:	e001      	b.n	800215e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800215a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800215e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002162:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002164:	2300      	movs	r3, #0
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f043 0204 	orr.w	r2, r3, #4
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff fe4a 	bl	8001e20 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800218c:	e089      	b.n	80022a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b02      	cmp	r3, #2
 8002196:	d107      	bne.n	80021a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f8be 	bl	8002324 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d107      	bne.n	80021c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f8fd 	bl	80023bc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c8:	2b40      	cmp	r3, #64	; 0x40
 80021ca:	d12f      	bne.n	800222c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f003 0320 	and.w	r3, r3, #32
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d02a      	beq.n	800222c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021e4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a1e      	ldr	r2, [pc, #120]	; (8002264 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d101      	bne.n	80021f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80021f0:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021f2:	e001      	b.n	80021f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80021f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4919      	ldr	r1, [pc, #100]	; (8002264 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002200:	428b      	cmp	r3, r1
 8002202:	d101      	bne.n	8002208 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002204:	4b18      	ldr	r3, [pc, #96]	; (8002268 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002206:	e001      	b.n	800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002208:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800220c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002210:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	f043 0202 	orr.w	r2, r3, #2
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff fdfa 	bl	8001e20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b08      	cmp	r3, #8
 8002234:	d136      	bne.n	80022a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b00      	cmp	r3, #0
 800223e:	d031      	beq.n	80022a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a07      	ldr	r2, [pc, #28]	; (8002264 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d101      	bne.n	800224e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800224a:	4b07      	ldr	r3, [pc, #28]	; (8002268 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800224c:	e001      	b.n	8002252 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800224e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4902      	ldr	r1, [pc, #8]	; (8002264 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800225a:	428b      	cmp	r3, r1
 800225c:	d106      	bne.n	800226c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800225e:	4b02      	ldr	r3, [pc, #8]	; (8002268 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002260:	e006      	b.n	8002270 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002262:	bf00      	nop
 8002264:	40003800 	.word	0x40003800
 8002268:	40003400 	.word	0x40003400
 800226c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002270:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002274:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002284:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	f043 0204 	orr.w	r2, r3, #4
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff fdc0 	bl	8001e20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022a0:	e000      	b.n	80022a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80022a2:	bf00      	nop
}
 80022a4:	bf00      	nop
 80022a6:	3720      	adds	r7, #32
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	1c99      	adds	r1, r3, #2
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6251      	str	r1, [r2, #36]	; 0x24
 80022d2:	881a      	ldrh	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022de:	b29b      	uxth	r3, r3
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d113      	bne.n	800231a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002300:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002306:	b29b      	uxth	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d106      	bne.n	800231a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ffc9 	bl	80022ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	1c99      	adds	r1, r3, #2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6251      	str	r1, [r2, #36]	; 0x24
 8002336:	8819      	ldrh	r1, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a1d      	ldr	r2, [pc, #116]	; (80023b4 <I2SEx_TxISR_I2SExt+0x90>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d101      	bne.n	8002346 <I2SEx_TxISR_I2SExt+0x22>
 8002342:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <I2SEx_TxISR_I2SExt+0x94>)
 8002344:	e001      	b.n	800234a <I2SEx_TxISR_I2SExt+0x26>
 8002346:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800234a:	460a      	mov	r2, r1
 800234c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002352:	b29b      	uxth	r3, r3
 8002354:	3b01      	subs	r3, #1
 8002356:	b29a      	uxth	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002360:	b29b      	uxth	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d121      	bne.n	80023aa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a12      	ldr	r2, [pc, #72]	; (80023b4 <I2SEx_TxISR_I2SExt+0x90>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d101      	bne.n	8002374 <I2SEx_TxISR_I2SExt+0x50>
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <I2SEx_TxISR_I2SExt+0x94>)
 8002372:	e001      	b.n	8002378 <I2SEx_TxISR_I2SExt+0x54>
 8002374:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	490d      	ldr	r1, [pc, #52]	; (80023b4 <I2SEx_TxISR_I2SExt+0x90>)
 8002380:	428b      	cmp	r3, r1
 8002382:	d101      	bne.n	8002388 <I2SEx_TxISR_I2SExt+0x64>
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <I2SEx_TxISR_I2SExt+0x94>)
 8002386:	e001      	b.n	800238c <I2SEx_TxISR_I2SExt+0x68>
 8002388:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800238c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002390:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002396:	b29b      	uxth	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d106      	bne.n	80023aa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff ff81 	bl	80022ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40003800 	.word	0x40003800
 80023b8:	40003400 	.word	0x40003400

080023bc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68d8      	ldr	r0, [r3, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ce:	1c99      	adds	r1, r3, #2
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80023d4:	b282      	uxth	r2, r0
 80023d6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d113      	bne.n	8002418 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023fe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002404:	b29b      	uxth	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ff4a 	bl	80022ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a20      	ldr	r2, [pc, #128]	; (80024b0 <I2SEx_RxISR_I2SExt+0x90>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d101      	bne.n	8002436 <I2SEx_RxISR_I2SExt+0x16>
 8002432:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <I2SEx_RxISR_I2SExt+0x94>)
 8002434:	e001      	b.n	800243a <I2SEx_RxISR_I2SExt+0x1a>
 8002436:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800243a:	68d8      	ldr	r0, [r3, #12]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002440:	1c99      	adds	r1, r3, #2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002446:	b282      	uxth	r2, r0
 8002448:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800244e:	b29b      	uxth	r3, r3
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800245c:	b29b      	uxth	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d121      	bne.n	80024a6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <I2SEx_RxISR_I2SExt+0x90>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d101      	bne.n	8002470 <I2SEx_RxISR_I2SExt+0x50>
 800246c:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <I2SEx_RxISR_I2SExt+0x94>)
 800246e:	e001      	b.n	8002474 <I2SEx_RxISR_I2SExt+0x54>
 8002470:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	490d      	ldr	r1, [pc, #52]	; (80024b0 <I2SEx_RxISR_I2SExt+0x90>)
 800247c:	428b      	cmp	r3, r1
 800247e:	d101      	bne.n	8002484 <I2SEx_RxISR_I2SExt+0x64>
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <I2SEx_RxISR_I2SExt+0x94>)
 8002482:	e001      	b.n	8002488 <I2SEx_RxISR_I2SExt+0x68>
 8002484:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002488:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800248c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002492:	b29b      	uxth	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d106      	bne.n	80024a6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ff03 	bl	80022ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40003800 	.word	0x40003800
 80024b4:	40003400 	.word	0x40003400

080024b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ba:	b08f      	sub	sp, #60	; 0x3c
 80024bc:	af0a      	add	r7, sp, #40	; 0x28
 80024be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e10f      	b.n	80026ea <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d106      	bne.n	80024ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f005 fecd 	bl	8008284 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2203      	movs	r2, #3
 80024ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d102      	bne.n	8002504 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f002 f9b4 	bl	8004876 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	603b      	str	r3, [r7, #0]
 8002514:	687e      	ldr	r6, [r7, #4]
 8002516:	466d      	mov	r5, sp
 8002518:	f106 0410 	add.w	r4, r6, #16
 800251c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800251e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002522:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002524:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002528:	e885 0003 	stmia.w	r5, {r0, r1}
 800252c:	1d33      	adds	r3, r6, #4
 800252e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002530:	6838      	ldr	r0, [r7, #0]
 8002532:	f002 f88c 	bl	800464e <USB_CoreInit>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0d0      	b.n	80026ea <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f002 f9a2 	bl	8004898 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002554:	2300      	movs	r3, #0
 8002556:	73fb      	strb	r3, [r7, #15]
 8002558:	e04a      	b.n	80025f0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800255a:	7bfa      	ldrb	r2, [r7, #15]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4413      	add	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	333d      	adds	r3, #61	; 0x3d
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	333c      	adds	r3, #60	; 0x3c
 800257e:	7bfa      	ldrb	r2, [r7, #15]
 8002580:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	b298      	uxth	r0, r3
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4413      	add	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	3344      	adds	r3, #68	; 0x44
 8002596:	4602      	mov	r2, r0
 8002598:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800259a:	7bfa      	ldrb	r2, [r7, #15]
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4413      	add	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	440b      	add	r3, r1
 80025a8:	3340      	adds	r3, #64	; 0x40
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025ae:	7bfa      	ldrb	r2, [r7, #15]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4413      	add	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	3348      	adds	r3, #72	; 0x48
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025c2:	7bfa      	ldrb	r2, [r7, #15]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	334c      	adds	r3, #76	; 0x4c
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025d6:	7bfa      	ldrb	r2, [r7, #15]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	3354      	adds	r3, #84	; 0x54
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	3301      	adds	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
 80025f0:	7bfa      	ldrb	r2, [r7, #15]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d3af      	bcc.n	800255a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	73fb      	strb	r3, [r7, #15]
 80025fe:	e044      	b.n	800268a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002600:	7bfa      	ldrb	r2, [r7, #15]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002616:	7bfa      	ldrb	r2, [r7, #15]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4413      	add	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002628:	7bfa      	ldrb	r2, [r7, #15]
 800262a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800262c:	7bfa      	ldrb	r2, [r7, #15]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4413      	add	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800263e:	2200      	movs	r2, #0
 8002640:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002642:	7bfa      	ldrb	r2, [r7, #15]
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4413      	add	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002658:	7bfa      	ldrb	r2, [r7, #15]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4413      	add	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800266e:	7bfa      	ldrb	r2, [r7, #15]
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4413      	add	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	440b      	add	r3, r1
 800267c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	3301      	adds	r3, #1
 8002688:	73fb      	strb	r3, [r7, #15]
 800268a:	7bfa      	ldrb	r2, [r7, #15]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	429a      	cmp	r2, r3
 8002692:	d3b5      	bcc.n	8002600 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	687e      	ldr	r6, [r7, #4]
 800269c:	466d      	mov	r5, sp
 800269e:	f106 0410 	add.w	r4, r6, #16
 80026a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80026b2:	1d33      	adds	r3, r6, #4
 80026b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026b6:	6838      	ldr	r0, [r7, #0]
 80026b8:	f002 f93a 	bl	8004930 <USB_DevInit>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d005      	beq.n	80026ce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2202      	movs	r2, #2
 80026c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e00d      	b.n	80026ea <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f003 fa89 	bl	8005bfa <USB_DevDisconnect>

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <HAL_PCD_Start+0x1c>
 800270a:	2302      	movs	r3, #2
 800270c:	e020      	b.n	8002750 <HAL_PCD_Start+0x5e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271a:	2b01      	cmp	r3, #1
 800271c:	d109      	bne.n	8002732 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002722:	2b01      	cmp	r3, #1
 8002724:	d005      	beq.n	8002732 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f002 f88c 	bl	8004854 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f003 fa39 	bl	8005bb8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002758:	b590      	push	{r4, r7, lr}
 800275a:	b08d      	sub	sp, #52	; 0x34
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f003 faf7 	bl	8005d62 <USB_GetMode>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	f040 848a 	bne.w	8003090 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f003 fa5b 	bl	8005c3c <USB_ReadInterrupts>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 8480 	beq.w	800308e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	0a1b      	lsrs	r3, r3, #8
 8002798:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f003 fa48 	bl	8005c3c <USB_ReadInterrupts>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d107      	bne.n	80027c6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695a      	ldr	r2, [r3, #20]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f002 0202 	and.w	r2, r2, #2
 80027c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f003 fa36 	bl	8005c3c <USB_ReadInterrupts>
 80027d0:	4603      	mov	r3, r0
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2b10      	cmp	r3, #16
 80027d8:	d161      	bne.n	800289e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	699a      	ldr	r2, [r3, #24]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0210 	bic.w	r2, r2, #16
 80027e8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	f003 020f 	and.w	r2, r3, #15
 80027f6:	4613      	mov	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	4413      	add	r3, r2
 8002806:	3304      	adds	r3, #4
 8002808:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	0c5b      	lsrs	r3, r3, #17
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	2b02      	cmp	r3, #2
 8002814:	d124      	bne.n	8002860 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d035      	beq.n	800288e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800282c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002830:	b29b      	uxth	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	6a38      	ldr	r0, [r7, #32]
 8002836:	f003 f86d 	bl	8005914 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	691a      	ldr	r2, [r3, #16]
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002846:	441a      	add	r2, r3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	6a1a      	ldr	r2, [r3, #32]
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	091b      	lsrs	r3, r3, #4
 8002854:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002858:	441a      	add	r2, r3
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	621a      	str	r2, [r3, #32]
 800285e:	e016      	b.n	800288e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	0c5b      	lsrs	r3, r3, #17
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	2b06      	cmp	r3, #6
 800286a:	d110      	bne.n	800288e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002872:	2208      	movs	r2, #8
 8002874:	4619      	mov	r1, r3
 8002876:	6a38      	ldr	r0, [r7, #32]
 8002878:	f003 f84c 	bl	8005914 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	6a1a      	ldr	r2, [r3, #32]
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002888:	441a      	add	r2, r3
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	699a      	ldr	r2, [r3, #24]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0210 	orr.w	r2, r2, #16
 800289c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f003 f9ca 	bl	8005c3c <USB_ReadInterrupts>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80028b2:	f040 80a7 	bne.w	8002a04 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f003 f9cf 	bl	8005c62 <USB_ReadDevAllOutEpInterrupt>
 80028c4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80028c6:	e099      	b.n	80029fc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80028c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 808e 	beq.w	80029f0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f003 f9f3 	bl	8005cca <USB_ReadDevOutEPInterrupt>
 80028e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00c      	beq.n	800290a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	015a      	lsls	r2, r3, #5
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	4413      	add	r3, r2
 80028f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028fc:	461a      	mov	r2, r3
 80028fe:	2301      	movs	r3, #1
 8002900:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002902:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 fec3 	bl	8003690 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00c      	beq.n	800292e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	4413      	add	r3, r2
 800291c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002920:	461a      	mov	r2, r3
 8002922:	2308      	movs	r3, #8
 8002924:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002926:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 ff99 	bl	8003860 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	4413      	add	r3, r2
 8002940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002944:	461a      	mov	r2, r3
 8002946:	2310      	movs	r3, #16
 8002948:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d030      	beq.n	80029b6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295c:	2b80      	cmp	r3, #128	; 0x80
 800295e:	d109      	bne.n	8002974 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800296e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002972:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	4413      	add	r3, r2
 8002986:	3304      	adds	r3, #4
 8002988:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	78db      	ldrb	r3, [r3, #3]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d108      	bne.n	80029a4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2200      	movs	r2, #0
 8002996:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	b2db      	uxtb	r3, r3
 800299c:	4619      	mov	r1, r3
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f005 fd84 	bl	80084ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	015a      	lsls	r2, r3, #5
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029b0:	461a      	mov	r2, r3
 80029b2:	2302      	movs	r3, #2
 80029b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	f003 0320 	and.w	r3, r3, #32
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	015a      	lsls	r2, r3, #5
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029cc:	461a      	mov	r2, r3
 80029ce:	2320      	movs	r3, #32
 80029d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d009      	beq.n	80029f0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029e8:	461a      	mov	r2, r3
 80029ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029ee:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	3301      	adds	r3, #1
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80029f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f8:	085b      	lsrs	r3, r3, #1
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80029fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f47f af62 	bne.w	80028c8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f003 f917 	bl	8005c3c <USB_ReadInterrupts>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a18:	f040 80db 	bne.w	8002bd2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f003 f938 	bl	8005c96 <USB_ReadDevAllInEpInterrupt>
 8002a26:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002a2c:	e0cd      	b.n	8002bca <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 80c2 	beq.w	8002bbe <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f003 f95e 	bl	8005d06 <USB_ReadDevInEPInterrupt>
 8002a4a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d057      	beq.n	8002b06 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	f003 030f 	and.w	r3, r3, #15
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	69f9      	ldr	r1, [r7, #28]
 8002a72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a76:	4013      	ands	r3, r2
 8002a78:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	015a      	lsls	r2, r3, #5
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a86:	461a      	mov	r2, r3
 8002a88:	2301      	movs	r3, #1
 8002a8a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d132      	bne.n	8002afa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a98:	4613      	mov	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	334c      	adds	r3, #76	; 0x4c
 8002aa4:	6819      	ldr	r1, [r3, #0]
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4403      	add	r3, r0
 8002ab4:	3348      	adds	r3, #72	; 0x48
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4419      	add	r1, r3
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002abe:	4613      	mov	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4403      	add	r3, r0
 8002ac8:	334c      	adds	r3, #76	; 0x4c
 8002aca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d113      	bne.n	8002afa <HAL_PCD_IRQHandler+0x3a2>
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	3354      	adds	r3, #84	; 0x54
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d108      	bne.n	8002afa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002af2:	461a      	mov	r2, r3
 8002af4:	2101      	movs	r1, #1
 8002af6:	f003 f965 	bl	8005dc4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	4619      	mov	r1, r3
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f005 fc4e 	bl	80083a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2308      	movs	r3, #8
 8002b20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f003 0310 	and.w	r3, r3, #16
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d008      	beq.n	8002b3e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b38:	461a      	mov	r2, r3
 8002b3a:	2310      	movs	r3, #16
 8002b3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b54:	461a      	mov	r2, r3
 8002b56:	2340      	movs	r3, #64	; 0x40
 8002b58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d023      	beq.n	8002bac <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b66:	6a38      	ldr	r0, [r7, #32]
 8002b68:	f002 f846 	bl	8004bf8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6e:	4613      	mov	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4413      	add	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	3338      	adds	r3, #56	; 0x38
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	78db      	ldrb	r3, [r3, #3]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d108      	bne.n	8002b9a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	4619      	mov	r1, r3
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f005 fc9b 	bl	80084d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	015a      	lsls	r2, r3, #5
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	2302      	movs	r3, #2
 8002baa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002bb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 fcdb 	bl	8003574 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc6:	085b      	lsrs	r3, r3, #1
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f47f af2e 	bne.w	8002a2e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f003 f830 	bl	8005c3c <USB_ReadInterrupts>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002be2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002be6:	d122      	bne.n	8002c2e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bf6:	f023 0301 	bic.w	r3, r3, #1
 8002bfa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d108      	bne.n	8002c18 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c0e:	2100      	movs	r1, #0
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fec3 	bl	800399c <HAL_PCDEx_LPM_Callback>
 8002c16:	e002      	b.n	8002c1e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f005 fc39 	bl	8008490 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002c2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f003 f802 	bl	8005c3c <USB_ReadInterrupts>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c42:	d112      	bne.n	8002c6a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d102      	bne.n	8002c5a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f005 fbf5 	bl	8008444 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695a      	ldr	r2, [r3, #20]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002c68:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f002 ffe4 	bl	8005c3c <USB_ReadInterrupts>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7e:	f040 80b7 	bne.w	8002df0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	69fa      	ldr	r2, [r7, #28]
 8002c8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c90:	f023 0301 	bic.w	r3, r3, #1
 8002c94:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2110      	movs	r1, #16
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f001 ffab 	bl	8004bf8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca6:	e046      	b.n	8002d36 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002cba:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ccc:	0151      	lsls	r1, r2, #5
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	440a      	add	r2, r1
 8002cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002cd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cda:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ce8:	461a      	mov	r2, r3
 8002cea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002cee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d00:	0151      	lsls	r1, r2, #5
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	440a      	add	r2, r1
 8002d06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d0e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d12:	015a      	lsls	r2, r3, #5
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	4413      	add	r3, r2
 8002d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d20:	0151      	lsls	r1, r2, #5
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	440a      	add	r2, r1
 8002d26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d2e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d32:	3301      	adds	r3, #1
 8002d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d3b3      	bcc.n	8002ca8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d4e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002d52:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d016      	beq.n	8002d8a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d66:	69fa      	ldr	r2, [r7, #28]
 8002d68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d6c:	f043 030b 	orr.w	r3, r3, #11
 8002d70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7c:	69fa      	ldr	r2, [r7, #28]
 8002d7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d82:	f043 030b 	orr.w	r3, r3, #11
 8002d86:	6453      	str	r3, [r2, #68]	; 0x44
 8002d88:	e015      	b.n	8002db6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	69fa      	ldr	r2, [r7, #28]
 8002d94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d9c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002da0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	69fa      	ldr	r2, [r7, #28]
 8002dac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002db0:	f043 030b 	orr.w	r3, r3, #11
 8002db4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	69fa      	ldr	r2, [r7, #28]
 8002dc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dc4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002dc8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f002 fff2 	bl	8005dc4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002dee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f002 ff21 	bl	8005c3c <USB_ReadInterrupts>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e04:	d124      	bne.n	8002e50 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f002 ffb7 	bl	8005d7e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f001 ff6c 	bl	8004cf2 <USB_GetDevSpeed>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681c      	ldr	r4, [r3, #0]
 8002e26:	f001 fa29 	bl	800427c <HAL_RCC_GetHCLKFreq>
 8002e2a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	461a      	mov	r2, r3
 8002e34:	4620      	mov	r0, r4
 8002e36:	f001 fc6b 	bl	8004710 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f005 fad9 	bl	80083f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002e4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f002 fef1 	bl	8005c3c <USB_ReadInterrupts>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d10a      	bne.n	8002e7a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f005 fab6 	bl	80083d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f002 0208 	and.w	r2, r2, #8
 8002e78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f002 fedc 	bl	8005c3c <USB_ReadInterrupts>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8a:	2b80      	cmp	r3, #128	; 0x80
 8002e8c:	d122      	bne.n	8002ed4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e9e:	e014      	b.n	8002eca <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d105      	bne.n	8002ec4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fb27 	bl	8003512 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d3e5      	bcc.n	8002ea0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f002 feaf 	bl	8005c3c <USB_ReadInterrupts>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ee8:	d13b      	bne.n	8002f62 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eea:	2301      	movs	r3, #1
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
 8002eee:	e02b      	b.n	8002f48 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	3340      	adds	r3, #64	; 0x40
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d115      	bne.n	8002f42 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002f16:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	da12      	bge.n	8002f42 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	333f      	adds	r3, #63	; 0x3f
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 fae8 	bl	8003512 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	3301      	adds	r3, #1
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d3ce      	bcc.n	8002ef0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695a      	ldr	r2, [r3, #20]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002f60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f002 fe68 	bl	8005c3c <USB_ReadInterrupts>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f76:	d155      	bne.n	8003024 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f78:	2301      	movs	r3, #1
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7c:	e045      	b.n	800300a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f92:	4613      	mov	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d12e      	bne.n	8003004 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002fa6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	da2b      	bge.n	8003004 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002fb8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d121      	bne.n	8003004 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10a      	bne.n	8003004 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	69fa      	ldr	r2, [r7, #28]
 8002ff8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ffc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003000:	6053      	str	r3, [r2, #4]
            break;
 8003002:	e007      	b.n	8003014 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	3301      	adds	r3, #1
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003010:	429a      	cmp	r2, r3
 8003012:	d3b4      	bcc.n	8002f7e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695a      	ldr	r2, [r3, #20]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003022:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f002 fe07 	bl	8005c3c <USB_ReadInterrupts>
 800302e:	4603      	mov	r3, r0
 8003030:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003038:	d10a      	bne.n	8003050 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f005 fa5a 	bl	80084f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800304e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f002 fdf1 	bl	8005c3c <USB_ReadInterrupts>
 800305a:	4603      	mov	r3, r0
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b04      	cmp	r3, #4
 8003062:	d115      	bne.n	8003090 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f005 fa4a 	bl	8008510 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6859      	ldr	r1, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	430a      	orrs	r2, r1
 800308a:	605a      	str	r2, [r3, #4]
 800308c:	e000      	b.n	8003090 <HAL_PCD_IRQHandler+0x938>
      return;
 800308e:	bf00      	nop
    }
  }
}
 8003090:	3734      	adds	r7, #52	; 0x34
 8003092:	46bd      	mov	sp, r7
 8003094:	bd90      	pop	{r4, r7, pc}

08003096 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	460b      	mov	r3, r1
 80030a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_PCD_SetAddress+0x1a>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e013      	b.n	80030d8 <HAL_PCD_SetAddress+0x42>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f002 fd4f 	bl	8005b6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	4608      	mov	r0, r1
 80030ea:	4611      	mov	r1, r2
 80030ec:	461a      	mov	r2, r3
 80030ee:	4603      	mov	r3, r0
 80030f0:	70fb      	strb	r3, [r7, #3]
 80030f2:	460b      	mov	r3, r1
 80030f4:	803b      	strh	r3, [r7, #0]
 80030f6:	4613      	mov	r3, r2
 80030f8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003102:	2b00      	cmp	r3, #0
 8003104:	da0f      	bge.n	8003126 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003106:	78fb      	ldrb	r3, [r7, #3]
 8003108:	f003 020f 	and.w	r2, r3, #15
 800310c:	4613      	mov	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	3338      	adds	r3, #56	; 0x38
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	4413      	add	r3, r2
 800311a:	3304      	adds	r3, #4
 800311c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	705a      	strb	r2, [r3, #1]
 8003124:	e00f      	b.n	8003146 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003126:	78fb      	ldrb	r3, [r7, #3]
 8003128:	f003 020f 	and.w	r2, r3, #15
 800312c:	4613      	mov	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	4413      	add	r3, r2
 800313c:	3304      	adds	r3, #4
 800313e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003146:	78fb      	ldrb	r3, [r7, #3]
 8003148:	f003 030f 	and.w	r3, r3, #15
 800314c:	b2da      	uxtb	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003152:	883a      	ldrh	r2, [r7, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	78ba      	ldrb	r2, [r7, #2]
 800315c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	785b      	ldrb	r3, [r3, #1]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d004      	beq.n	8003170 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003170:	78bb      	ldrb	r3, [r7, #2]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d102      	bne.n	800317c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <HAL_PCD_EP_Open+0xaa>
 8003186:	2302      	movs	r3, #2
 8003188:	e00e      	b.n	80031a8 <HAL_PCD_EP_Open+0xc8>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68f9      	ldr	r1, [r7, #12]
 8003198:	4618      	mov	r0, r3
 800319a:	f001 fdcf 	bl	8004d3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80031a6:	7afb      	ldrb	r3, [r7, #11]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	da0f      	bge.n	80031e4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	f003 020f 	and.w	r2, r3, #15
 80031ca:	4613      	mov	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4413      	add	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	3338      	adds	r3, #56	; 0x38
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	4413      	add	r3, r2
 80031d8:	3304      	adds	r3, #4
 80031da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	705a      	strb	r2, [r3, #1]
 80031e2:	e00f      	b.n	8003204 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	f003 020f 	and.w	r2, r3, #15
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	4413      	add	r3, r2
 80031fa:	3304      	adds	r3, #4
 80031fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	b2da      	uxtb	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_PCD_EP_Close+0x6e>
 800321a:	2302      	movs	r3, #2
 800321c:	e00e      	b.n	800323c <HAL_PCD_EP_Close+0x8c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68f9      	ldr	r1, [r7, #12]
 800322c:	4618      	mov	r0, r3
 800322e:	f001 fe0d 	bl	8004e4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	603b      	str	r3, [r7, #0]
 8003250:	460b      	mov	r3, r1
 8003252:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003254:	7afb      	ldrb	r3, [r7, #11]
 8003256:	f003 020f 	and.w	r2, r3, #15
 800325a:	4613      	mov	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4413      	add	r3, r2
 800326a:	3304      	adds	r3, #4
 800326c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2200      	movs	r2, #0
 800327e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2200      	movs	r2, #0
 8003284:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003286:	7afb      	ldrb	r3, [r7, #11]
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	b2da      	uxtb	r2, r3
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d102      	bne.n	80032a0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032a0:	7afb      	ldrb	r3, [r7, #11]
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	461a      	mov	r2, r3
 80032b6:	6979      	ldr	r1, [r7, #20]
 80032b8:	f002 f8ec 	bl	8005494 <USB_EP0StartXfer>
 80032bc:	e008      	b.n	80032d0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	461a      	mov	r2, r3
 80032ca:	6979      	ldr	r1, [r7, #20]
 80032cc:	f001 fe9a 	bl	8005004 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	460b      	mov	r3, r1
 80032e4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032e6:	78fb      	ldrb	r3, [r7, #3]
 80032e8:	f003 020f 	and.w	r2, r3, #15
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80032fc:	681b      	ldr	r3, [r3, #0]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b086      	sub	sp, #24
 800330e:	af00      	add	r7, sp, #0
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	603b      	str	r3, [r7, #0]
 8003316:	460b      	mov	r3, r1
 8003318:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800331a:	7afb      	ldrb	r3, [r7, #11]
 800331c:	f003 020f 	and.w	r2, r3, #15
 8003320:	4613      	mov	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	3338      	adds	r3, #56	; 0x38
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4413      	add	r3, r2
 800332e:	3304      	adds	r3, #4
 8003330:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2200      	movs	r2, #0
 8003342:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2201      	movs	r2, #1
 8003348:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800334a:	7afb      	ldrb	r3, [r7, #11]
 800334c:	f003 030f 	and.w	r3, r3, #15
 8003350:	b2da      	uxtb	r2, r3
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d102      	bne.n	8003364 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003364:	7afb      	ldrb	r3, [r7, #11]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	2b00      	cmp	r3, #0
 800336c:	d109      	bne.n	8003382 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6818      	ldr	r0, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	461a      	mov	r2, r3
 800337a:	6979      	ldr	r1, [r7, #20]
 800337c:	f002 f88a 	bl	8005494 <USB_EP0StartXfer>
 8003380:	e008      	b.n	8003394 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6818      	ldr	r0, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	b2db      	uxtb	r3, r3
 800338c:	461a      	mov	r2, r3
 800338e:	6979      	ldr	r1, [r7, #20]
 8003390:	f001 fe38 	bl	8005004 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b084      	sub	sp, #16
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	460b      	mov	r3, r1
 80033a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033aa:	78fb      	ldrb	r3, [r7, #3]
 80033ac:	f003 020f 	and.w	r2, r3, #15
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d901      	bls.n	80033bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e050      	b.n	800345e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	da0f      	bge.n	80033e4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	f003 020f 	and.w	r2, r3, #15
 80033ca:	4613      	mov	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	3338      	adds	r3, #56	; 0x38
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	4413      	add	r3, r2
 80033d8:	3304      	adds	r3, #4
 80033da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2201      	movs	r2, #1
 80033e0:	705a      	strb	r2, [r3, #1]
 80033e2:	e00d      	b.n	8003400 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	4613      	mov	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	4413      	add	r3, r2
 80033f6:	3304      	adds	r3, #4
 80033f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2201      	movs	r2, #1
 8003404:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003406:	78fb      	ldrb	r3, [r7, #3]
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	b2da      	uxtb	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_PCD_EP_SetStall+0x82>
 800341c:	2302      	movs	r3, #2
 800341e:	e01e      	b.n	800345e <HAL_PCD_EP_SetStall+0xc0>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68f9      	ldr	r1, [r7, #12]
 800342e:	4618      	mov	r0, r3
 8003430:	f002 fac8 	bl	80059c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10a      	bne.n	8003454 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	b2d9      	uxtb	r1, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800344e:	461a      	mov	r2, r3
 8003450:	f002 fcb8 	bl	8005dc4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b084      	sub	sp, #16
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	460b      	mov	r3, r1
 8003470:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003472:	78fb      	ldrb	r3, [r7, #3]
 8003474:	f003 020f 	and.w	r2, r3, #15
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	429a      	cmp	r2, r3
 800347e:	d901      	bls.n	8003484 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e042      	b.n	800350a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003484:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003488:	2b00      	cmp	r3, #0
 800348a:	da0f      	bge.n	80034ac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800348c:	78fb      	ldrb	r3, [r7, #3]
 800348e:	f003 020f 	and.w	r2, r3, #15
 8003492:	4613      	mov	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	3338      	adds	r3, #56	; 0x38
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	4413      	add	r3, r2
 80034a0:	3304      	adds	r3, #4
 80034a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	705a      	strb	r2, [r3, #1]
 80034aa:	e00f      	b.n	80034cc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	f003 020f 	and.w	r2, r3, #15
 80034b2:	4613      	mov	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	4413      	add	r3, r2
 80034c2:	3304      	adds	r3, #4
 80034c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034d2:	78fb      	ldrb	r3, [r7, #3]
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <HAL_PCD_EP_ClrStall+0x86>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e00e      	b.n	800350a <HAL_PCD_EP_ClrStall+0xa4>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68f9      	ldr	r1, [r7, #12]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f002 fad0 	bl	8005aa0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	460b      	mov	r3, r1
 800351c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800351e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003522:	2b00      	cmp	r3, #0
 8003524:	da0c      	bge.n	8003540 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003526:	78fb      	ldrb	r3, [r7, #3]
 8003528:	f003 020f 	and.w	r2, r3, #15
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	3338      	adds	r3, #56	; 0x38
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	3304      	adds	r3, #4
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	e00c      	b.n	800355a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	f003 020f 	and.w	r2, r3, #15
 8003546:	4613      	mov	r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	4413      	add	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	4413      	add	r3, r2
 8003556:	3304      	adds	r3, #4
 8003558:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68f9      	ldr	r1, [r7, #12]
 8003560:	4618      	mov	r0, r3
 8003562:	f002 f8ef 	bl	8005744 <USB_EPStopXfer>
 8003566:	4603      	mov	r3, r0
 8003568:	72fb      	strb	r3, [r7, #11]

  return ret;
 800356a:	7afb      	ldrb	r3, [r7, #11]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08a      	sub	sp, #40	; 0x28
 8003578:	af02      	add	r7, sp, #8
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	4613      	mov	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	3338      	adds	r3, #56	; 0x38
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	4413      	add	r3, r2
 8003598:	3304      	adds	r3, #4
 800359a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a1a      	ldr	r2, [r3, #32]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d901      	bls.n	80035ac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e06c      	b.n	8003686 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	699a      	ldr	r2, [r3, #24]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d902      	bls.n	80035c8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	3303      	adds	r3, #3
 80035cc:	089b      	lsrs	r3, r3, #2
 80035ce:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035d0:	e02b      	b.n	800362a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	69fa      	ldr	r2, [r7, #28]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d902      	bls.n	80035ee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	3303      	adds	r3, #3
 80035f2:	089b      	lsrs	r3, r3, #2
 80035f4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6919      	ldr	r1, [r3, #16]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003606:	b2db      	uxtb	r3, r3
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	4603      	mov	r3, r0
 800360c:	6978      	ldr	r0, [r7, #20]
 800360e:	f002 f943 	bl	8005898 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	441a      	add	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a1a      	ldr	r2, [r3, #32]
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	441a      	add	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4413      	add	r3, r2
 8003632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	429a      	cmp	r2, r3
 800363e:	d809      	bhi.n	8003654 <PCD_WriteEmptyTxFifo+0xe0>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a1a      	ldr	r2, [r3, #32]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003648:	429a      	cmp	r2, r3
 800364a:	d203      	bcs.n	8003654 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1be      	bne.n	80035d2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	699a      	ldr	r2, [r3, #24]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	429a      	cmp	r2, r3
 800365e:	d811      	bhi.n	8003684 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	2201      	movs	r2, #1
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	43db      	mvns	r3, r3
 800367a:	6939      	ldr	r1, [r7, #16]
 800367c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003680:	4013      	ands	r3, r2
 8003682:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3720      	adds	r7, #32
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	333c      	adds	r3, #60	; 0x3c
 80036a8:	3304      	adds	r3, #4
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d17b      	bne.n	80037be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d015      	beq.n	80036fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	4a61      	ldr	r2, [pc, #388]	; (8003858 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	f240 80b9 	bls.w	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80b3 	beq.w	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f2:	461a      	mov	r2, r3
 80036f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036f8:	6093      	str	r3, [r2, #8]
 80036fa:	e0a7      	b.n	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d009      	beq.n	800371a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	4413      	add	r3, r2
 800370e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003712:	461a      	mov	r2, r3
 8003714:	2320      	movs	r3, #32
 8003716:	6093      	str	r3, [r2, #8]
 8003718:	e098      	b.n	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003720:	2b00      	cmp	r3, #0
 8003722:	f040 8093 	bne.w	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	4a4b      	ldr	r2, [pc, #300]	; (8003858 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d90f      	bls.n	800374e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	4413      	add	r3, r2
 8003740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003744:	461a      	mov	r2, r3
 8003746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800374a:	6093      	str	r3, [r2, #8]
 800374c:	e07e      	b.n	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	4413      	add	r3, r2
 8003760:	3304      	adds	r3, #4
 8003762:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	69da      	ldr	r2, [r3, #28]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	0159      	lsls	r1, r3, #5
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	440b      	add	r3, r1
 8003770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377a:	1ad2      	subs	r2, r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d114      	bne.n	80037b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d109      	bne.n	80037a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003798:	461a      	mov	r2, r3
 800379a:	2101      	movs	r1, #1
 800379c:	f002 fb12 	bl	8005dc4 <USB_EP0_OutStart>
 80037a0:	e006      	b.n	80037b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	441a      	add	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	4619      	mov	r1, r3
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f004 fdd8 	bl	800836c <HAL_PCD_DataOutStageCallback>
 80037bc:	e046      	b.n	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	4a26      	ldr	r2, [pc, #152]	; (800385c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d124      	bne.n	8003810 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037dc:	461a      	mov	r2, r3
 80037de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037e2:	6093      	str	r3, [r2, #8]
 80037e4:	e032      	b.n	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037fc:	461a      	mov	r2, r3
 80037fe:	2320      	movs	r3, #32
 8003800:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	4619      	mov	r1, r3
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f004 fdaf 	bl	800836c <HAL_PCD_DataOutStageCallback>
 800380e:	e01d      	b.n	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d114      	bne.n	8003840 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	4613      	mov	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d108      	bne.n	8003840 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003838:	461a      	mov	r2, r3
 800383a:	2100      	movs	r1, #0
 800383c:	f002 fac2 	bl	8005dc4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	4619      	mov	r1, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f004 fd90 	bl	800836c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	4f54300a 	.word	0x4f54300a
 800385c:	4f54310a 	.word	0x4f54310a

08003860 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	333c      	adds	r3, #60	; 0x3c
 8003878:	3304      	adds	r3, #4
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4413      	add	r3, r2
 8003886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4a15      	ldr	r2, [pc, #84]	; (80038e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d90e      	bls.n	80038b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800389c:	2b00      	cmp	r3, #0
 800389e:	d009      	beq.n	80038b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ac:	461a      	mov	r2, r3
 80038ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f004 fd47 	bl	8008348 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4a0a      	ldr	r2, [pc, #40]	; (80038e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d90c      	bls.n	80038dc <PCD_EP_OutSetupPacket_int+0x7c>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d108      	bne.n	80038dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038d4:	461a      	mov	r2, r3
 80038d6:	2101      	movs	r1, #1
 80038d8:	f002 fa74 	bl	8005dc4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	4f54300a 	.word	0x4f54300a

080038ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	70fb      	strb	r3, [r7, #3]
 80038f8:	4613      	mov	r3, r2
 80038fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d107      	bne.n	800391a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800390a:	883b      	ldrh	r3, [r7, #0]
 800390c:	0419      	lsls	r1, r3, #16
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	430a      	orrs	r2, r1
 8003916:	629a      	str	r2, [r3, #40]	; 0x28
 8003918:	e028      	b.n	800396c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003920:	0c1b      	lsrs	r3, r3, #16
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	4413      	add	r3, r2
 8003926:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003928:	2300      	movs	r3, #0
 800392a:	73fb      	strb	r3, [r7, #15]
 800392c:	e00d      	b.n	800394a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	7bfb      	ldrb	r3, [r7, #15]
 8003934:	3340      	adds	r3, #64	; 0x40
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	0c1b      	lsrs	r3, r3, #16
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	4413      	add	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	3301      	adds	r3, #1
 8003948:	73fb      	strb	r3, [r7, #15]
 800394a:	7bfa      	ldrb	r2, [r7, #15]
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	3b01      	subs	r3, #1
 8003950:	429a      	cmp	r2, r3
 8003952:	d3ec      	bcc.n	800392e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003954:	883b      	ldrh	r3, [r7, #0]
 8003956:	0418      	lsls	r0, r3, #16
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6819      	ldr	r1, [r3, #0]
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	3b01      	subs	r3, #1
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	4302      	orrs	r2, r0
 8003964:	3340      	adds	r3, #64	; 0x40
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	460b      	mov	r3, r1
 8003984:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	887a      	ldrh	r2, [r7, #2]
 800398c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e267      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d075      	beq.n	8003abe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039d2:	4b88      	ldr	r3, [pc, #544]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 030c 	and.w	r3, r3, #12
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d00c      	beq.n	80039f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039de:	4b85      	ldr	r3, [pc, #532]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d112      	bne.n	8003a10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ea:	4b82      	ldr	r3, [pc, #520]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039f6:	d10b      	bne.n	8003a10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f8:	4b7e      	ldr	r3, [pc, #504]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d05b      	beq.n	8003abc <HAL_RCC_OscConfig+0x108>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d157      	bne.n	8003abc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e242      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a18:	d106      	bne.n	8003a28 <HAL_RCC_OscConfig+0x74>
 8003a1a:	4b76      	ldr	r3, [pc, #472]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a75      	ldr	r2, [pc, #468]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	e01d      	b.n	8003a64 <HAL_RCC_OscConfig+0xb0>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCC_OscConfig+0x98>
 8003a32:	4b70      	ldr	r3, [pc, #448]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a6f      	ldr	r2, [pc, #444]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	4b6d      	ldr	r3, [pc, #436]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a6c      	ldr	r2, [pc, #432]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	e00b      	b.n	8003a64 <HAL_RCC_OscConfig+0xb0>
 8003a4c:	4b69      	ldr	r3, [pc, #420]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a68      	ldr	r2, [pc, #416]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	4b66      	ldr	r3, [pc, #408]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a65      	ldr	r2, [pc, #404]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d013      	beq.n	8003a94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6c:	f7fd fc16 	bl	800129c <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a74:	f7fd fc12 	bl	800129c <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b64      	cmp	r3, #100	; 0x64
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e207      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a86:	4b5b      	ldr	r3, [pc, #364]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0xc0>
 8003a92:	e014      	b.n	8003abe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a94:	f7fd fc02 	bl	800129c <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a9c:	f7fd fbfe 	bl	800129c <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b64      	cmp	r3, #100	; 0x64
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e1f3      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aae:	4b51      	ldr	r3, [pc, #324]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0xe8>
 8003aba:	e000      	b.n	8003abe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d063      	beq.n	8003b92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aca:	4b4a      	ldr	r3, [pc, #296]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00b      	beq.n	8003aee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ad6:	4b47      	ldr	r3, [pc, #284]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d11c      	bne.n	8003b1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ae2:	4b44      	ldr	r3, [pc, #272]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d116      	bne.n	8003b1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aee:	4b41      	ldr	r3, [pc, #260]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <HAL_RCC_OscConfig+0x152>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d001      	beq.n	8003b06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e1c7      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b06:	4b3b      	ldr	r3, [pc, #236]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	4937      	ldr	r1, [pc, #220]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1a:	e03a      	b.n	8003b92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d020      	beq.n	8003b66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b24:	4b34      	ldr	r3, [pc, #208]	; (8003bf8 <HAL_RCC_OscConfig+0x244>)
 8003b26:	2201      	movs	r2, #1
 8003b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2a:	f7fd fbb7 	bl	800129c <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b32:	f7fd fbb3 	bl	800129c <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e1a8      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b44:	4b2b      	ldr	r3, [pc, #172]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b50:	4b28      	ldr	r3, [pc, #160]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	4925      	ldr	r1, [pc, #148]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	600b      	str	r3, [r1, #0]
 8003b64:	e015      	b.n	8003b92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b66:	4b24      	ldr	r3, [pc, #144]	; (8003bf8 <HAL_RCC_OscConfig+0x244>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6c:	f7fd fb96 	bl	800129c <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b74:	f7fd fb92 	bl	800129c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e187      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b86:	4b1b      	ldr	r3, [pc, #108]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f0      	bne.n	8003b74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d036      	beq.n	8003c0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d016      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ba6:	4b15      	ldr	r3, [pc, #84]	; (8003bfc <HAL_RCC_OscConfig+0x248>)
 8003ba8:	2201      	movs	r2, #1
 8003baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bac:	f7fd fb76 	bl	800129c <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb4:	f7fd fb72 	bl	800129c <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e167      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x200>
 8003bd2:	e01b      	b.n	8003c0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd4:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <HAL_RCC_OscConfig+0x248>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bda:	f7fd fb5f 	bl	800129c <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be0:	e00e      	b.n	8003c00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be2:	f7fd fb5b 	bl	800129c <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d907      	bls.n	8003c00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e150      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	42470000 	.word	0x42470000
 8003bfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c00:	4b88      	ldr	r3, [pc, #544]	; (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1ea      	bne.n	8003be2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8097 	beq.w	8003d48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c1e:	4b81      	ldr	r3, [pc, #516]	; (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10f      	bne.n	8003c4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60bb      	str	r3, [r7, #8]
 8003c2e:	4b7d      	ldr	r3, [pc, #500]	; (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	4a7c      	ldr	r2, [pc, #496]	; (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c38:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3a:	4b7a      	ldr	r3, [pc, #488]	; (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c42:	60bb      	str	r3, [r7, #8]
 8003c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c46:	2301      	movs	r3, #1
 8003c48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4a:	4b77      	ldr	r3, [pc, #476]	; (8003e28 <HAL_RCC_OscConfig+0x474>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d118      	bne.n	8003c88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c56:	4b74      	ldr	r3, [pc, #464]	; (8003e28 <HAL_RCC_OscConfig+0x474>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a73      	ldr	r2, [pc, #460]	; (8003e28 <HAL_RCC_OscConfig+0x474>)
 8003c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c62:	f7fd fb1b 	bl	800129c <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6a:	f7fd fb17 	bl	800129c <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e10c      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7c:	4b6a      	ldr	r3, [pc, #424]	; (8003e28 <HAL_RCC_OscConfig+0x474>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0f0      	beq.n	8003c6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d106      	bne.n	8003c9e <HAL_RCC_OscConfig+0x2ea>
 8003c90:	4b64      	ldr	r3, [pc, #400]	; (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c94:	4a63      	ldr	r2, [pc, #396]	; (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9c:	e01c      	b.n	8003cd8 <HAL_RCC_OscConfig+0x324>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b05      	cmp	r3, #5
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x30c>
 8003ca6:	4b5f      	ldr	r3, [pc, #380]	; (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003caa:	4a5e      	ldr	r2, [pc, #376]	; (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003cac:	f043 0304 	orr.w	r3, r3, #4
 8003cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb2:	4b5c      	ldr	r3, [pc, #368]	; (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb6:	4a5b      	ldr	r2, [pc, #364]	; (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003cb8:	f043 0301 	orr.w	r3, r3, #1
 8003cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cbe:	e00b      	b.n	8003cd8 <HAL_RCC_OscConfig+0x324>
 8003cc0:	4b58      	ldr	r3, [pc, #352]	; (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc4:	4a57      	ldr	r2, [pc, #348]	; (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	6713      	str	r3, [r2, #112]	; 0x70
 8003ccc:	4b55      	ldr	r3, [pc, #340]	; (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd0:	4a54      	ldr	r2, [pc, #336]	; (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003cd2:	f023 0304 	bic.w	r3, r3, #4
 8003cd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d015      	beq.n	8003d0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce0:	f7fd fadc 	bl	800129c <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce6:	e00a      	b.n	8003cfe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ce8:	f7fd fad8 	bl	800129c <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e0cb      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfe:	4b49      	ldr	r3, [pc, #292]	; (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0ee      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x334>
 8003d0a:	e014      	b.n	8003d36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d0c:	f7fd fac6 	bl	800129c <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d12:	e00a      	b.n	8003d2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d14:	f7fd fac2 	bl	800129c <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e0b5      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d2a:	4b3e      	ldr	r3, [pc, #248]	; (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1ee      	bne.n	8003d14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d36:	7dfb      	ldrb	r3, [r7, #23]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d105      	bne.n	8003d48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d3c:	4b39      	ldr	r3, [pc, #228]	; (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d40:	4a38      	ldr	r2, [pc, #224]	; (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80a1 	beq.w	8003e94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d52:	4b34      	ldr	r3, [pc, #208]	; (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 030c 	and.w	r3, r3, #12
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d05c      	beq.n	8003e18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d141      	bne.n	8003dea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d66:	4b31      	ldr	r3, [pc, #196]	; (8003e2c <HAL_RCC_OscConfig+0x478>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6c:	f7fd fa96 	bl	800129c <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d74:	f7fd fa92 	bl	800129c <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e087      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d86:	4b27      	ldr	r3, [pc, #156]	; (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69da      	ldr	r2, [r3, #28]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	019b      	lsls	r3, r3, #6
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da8:	085b      	lsrs	r3, r3, #1
 8003daa:	3b01      	subs	r3, #1
 8003dac:	041b      	lsls	r3, r3, #16
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	061b      	lsls	r3, r3, #24
 8003db6:	491b      	ldr	r1, [pc, #108]	; (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dbc:	4b1b      	ldr	r3, [pc, #108]	; (8003e2c <HAL_RCC_OscConfig+0x478>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc2:	f7fd fa6b 	bl	800129c <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dca:	f7fd fa67 	bl	800129c <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e05c      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ddc:	4b11      	ldr	r3, [pc, #68]	; (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0f0      	beq.n	8003dca <HAL_RCC_OscConfig+0x416>
 8003de8:	e054      	b.n	8003e94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dea:	4b10      	ldr	r3, [pc, #64]	; (8003e2c <HAL_RCC_OscConfig+0x478>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df0:	f7fd fa54 	bl	800129c <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003df8:	f7fd fa50 	bl	800129c <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e045      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0a:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x444>
 8003e16:	e03d      	b.n	8003e94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d107      	bne.n	8003e30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e038      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
 8003e24:	40023800 	.word	0x40023800
 8003e28:	40007000 	.word	0x40007000
 8003e2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e30:	4b1b      	ldr	r3, [pc, #108]	; (8003ea0 <HAL_RCC_OscConfig+0x4ec>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d028      	beq.n	8003e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d121      	bne.n	8003e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d11a      	bne.n	8003e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e60:	4013      	ands	r3, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d111      	bne.n	8003e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e76:	085b      	lsrs	r3, r3, #1
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d107      	bne.n	8003e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800

08003ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e0cc      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb8:	4b68      	ldr	r3, [pc, #416]	; (800405c <HAL_RCC_ClockConfig+0x1b8>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d90c      	bls.n	8003ee0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec6:	4b65      	ldr	r3, [pc, #404]	; (800405c <HAL_RCC_ClockConfig+0x1b8>)
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ece:	4b63      	ldr	r3, [pc, #396]	; (800405c <HAL_RCC_ClockConfig+0x1b8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0b8      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d020      	beq.n	8003f2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ef8:	4b59      	ldr	r3, [pc, #356]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	4a58      	ldr	r2, [pc, #352]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f10:	4b53      	ldr	r3, [pc, #332]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4a52      	ldr	r2, [pc, #328]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f1c:	4b50      	ldr	r3, [pc, #320]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	494d      	ldr	r1, [pc, #308]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d044      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d107      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f42:	4b47      	ldr	r3, [pc, #284]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d119      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e07f      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d003      	beq.n	8003f62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f5e:	2b03      	cmp	r3, #3
 8003f60:	d107      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f62:	4b3f      	ldr	r3, [pc, #252]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d109      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e06f      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f72:	4b3b      	ldr	r3, [pc, #236]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e067      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f82:	4b37      	ldr	r3, [pc, #220]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f023 0203 	bic.w	r2, r3, #3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	4934      	ldr	r1, [pc, #208]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f94:	f7fd f982 	bl	800129c <HAL_GetTick>
 8003f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9a:	e00a      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f9c:	f7fd f97e 	bl	800129c <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e04f      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb2:	4b2b      	ldr	r3, [pc, #172]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 020c 	and.w	r2, r3, #12
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d1eb      	bne.n	8003f9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc4:	4b25      	ldr	r3, [pc, #148]	; (800405c <HAL_RCC_ClockConfig+0x1b8>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d20c      	bcs.n	8003fec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd2:	4b22      	ldr	r3, [pc, #136]	; (800405c <HAL_RCC_ClockConfig+0x1b8>)
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fda:	4b20      	ldr	r3, [pc, #128]	; (800405c <HAL_RCC_ClockConfig+0x1b8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e032      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff8:	4b19      	ldr	r3, [pc, #100]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4916      	ldr	r1, [pc, #88]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	4313      	orrs	r3, r2
 8004008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d009      	beq.n	800402a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004016:	4b12      	ldr	r3, [pc, #72]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	490e      	ldr	r1, [pc, #56]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	4313      	orrs	r3, r2
 8004028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800402a:	f000 f821 	bl	8004070 <HAL_RCC_GetSysClockFreq>
 800402e:	4602      	mov	r2, r0
 8004030:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	490a      	ldr	r1, [pc, #40]	; (8004064 <HAL_RCC_ClockConfig+0x1c0>)
 800403c:	5ccb      	ldrb	r3, [r1, r3]
 800403e:	fa22 f303 	lsr.w	r3, r2, r3
 8004042:	4a09      	ldr	r2, [pc, #36]	; (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8004044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004046:	4b09      	ldr	r3, [pc, #36]	; (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f7fd f8e2 	bl	8001214 <HAL_InitTick>

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40023c00 	.word	0x40023c00
 8004060:	40023800 	.word	0x40023800
 8004064:	080097e0 	.word	0x080097e0
 8004068:	20000000 	.word	0x20000000
 800406c:	20000004 	.word	0x20000004

08004070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004074:	b094      	sub	sp, #80	; 0x50
 8004076:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	647b      	str	r3, [r7, #68]	; 0x44
 800407c:	2300      	movs	r3, #0
 800407e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004080:	2300      	movs	r3, #0
 8004082:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004088:	4b79      	ldr	r3, [pc, #484]	; (8004270 <HAL_RCC_GetSysClockFreq+0x200>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 030c 	and.w	r3, r3, #12
 8004090:	2b08      	cmp	r3, #8
 8004092:	d00d      	beq.n	80040b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004094:	2b08      	cmp	r3, #8
 8004096:	f200 80e1 	bhi.w	800425c <HAL_RCC_GetSysClockFreq+0x1ec>
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <HAL_RCC_GetSysClockFreq+0x34>
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d003      	beq.n	80040aa <HAL_RCC_GetSysClockFreq+0x3a>
 80040a2:	e0db      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040a4:	4b73      	ldr	r3, [pc, #460]	; (8004274 <HAL_RCC_GetSysClockFreq+0x204>)
 80040a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80040a8:	e0db      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040aa:	4b73      	ldr	r3, [pc, #460]	; (8004278 <HAL_RCC_GetSysClockFreq+0x208>)
 80040ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040ae:	e0d8      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040b0:	4b6f      	ldr	r3, [pc, #444]	; (8004270 <HAL_RCC_GetSysClockFreq+0x200>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040ba:	4b6d      	ldr	r3, [pc, #436]	; (8004270 <HAL_RCC_GetSysClockFreq+0x200>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d063      	beq.n	800418e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040c6:	4b6a      	ldr	r3, [pc, #424]	; (8004270 <HAL_RCC_GetSysClockFreq+0x200>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	099b      	lsrs	r3, r3, #6
 80040cc:	2200      	movs	r2, #0
 80040ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80040d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d8:	633b      	str	r3, [r7, #48]	; 0x30
 80040da:	2300      	movs	r3, #0
 80040dc:	637b      	str	r3, [r7, #52]	; 0x34
 80040de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040e2:	4622      	mov	r2, r4
 80040e4:	462b      	mov	r3, r5
 80040e6:	f04f 0000 	mov.w	r0, #0
 80040ea:	f04f 0100 	mov.w	r1, #0
 80040ee:	0159      	lsls	r1, r3, #5
 80040f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040f4:	0150      	lsls	r0, r2, #5
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4621      	mov	r1, r4
 80040fc:	1a51      	subs	r1, r2, r1
 80040fe:	6139      	str	r1, [r7, #16]
 8004100:	4629      	mov	r1, r5
 8004102:	eb63 0301 	sbc.w	r3, r3, r1
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004114:	4659      	mov	r1, fp
 8004116:	018b      	lsls	r3, r1, #6
 8004118:	4651      	mov	r1, sl
 800411a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800411e:	4651      	mov	r1, sl
 8004120:	018a      	lsls	r2, r1, #6
 8004122:	4651      	mov	r1, sl
 8004124:	ebb2 0801 	subs.w	r8, r2, r1
 8004128:	4659      	mov	r1, fp
 800412a:	eb63 0901 	sbc.w	r9, r3, r1
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	f04f 0300 	mov.w	r3, #0
 8004136:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800413a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800413e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004142:	4690      	mov	r8, r2
 8004144:	4699      	mov	r9, r3
 8004146:	4623      	mov	r3, r4
 8004148:	eb18 0303 	adds.w	r3, r8, r3
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	462b      	mov	r3, r5
 8004150:	eb49 0303 	adc.w	r3, r9, r3
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004162:	4629      	mov	r1, r5
 8004164:	024b      	lsls	r3, r1, #9
 8004166:	4621      	mov	r1, r4
 8004168:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800416c:	4621      	mov	r1, r4
 800416e:	024a      	lsls	r2, r1, #9
 8004170:	4610      	mov	r0, r2
 8004172:	4619      	mov	r1, r3
 8004174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004176:	2200      	movs	r2, #0
 8004178:	62bb      	str	r3, [r7, #40]	; 0x28
 800417a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800417c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004180:	f7fc f876 	bl	8000270 <__aeabi_uldivmod>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4613      	mov	r3, r2
 800418a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800418c:	e058      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800418e:	4b38      	ldr	r3, [pc, #224]	; (8004270 <HAL_RCC_GetSysClockFreq+0x200>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	099b      	lsrs	r3, r3, #6
 8004194:	2200      	movs	r2, #0
 8004196:	4618      	mov	r0, r3
 8004198:	4611      	mov	r1, r2
 800419a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800419e:	623b      	str	r3, [r7, #32]
 80041a0:	2300      	movs	r3, #0
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24
 80041a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041a8:	4642      	mov	r2, r8
 80041aa:	464b      	mov	r3, r9
 80041ac:	f04f 0000 	mov.w	r0, #0
 80041b0:	f04f 0100 	mov.w	r1, #0
 80041b4:	0159      	lsls	r1, r3, #5
 80041b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041ba:	0150      	lsls	r0, r2, #5
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4641      	mov	r1, r8
 80041c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80041c6:	4649      	mov	r1, r9
 80041c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041e0:	ebb2 040a 	subs.w	r4, r2, sl
 80041e4:	eb63 050b 	sbc.w	r5, r3, fp
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	00eb      	lsls	r3, r5, #3
 80041f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041f6:	00e2      	lsls	r2, r4, #3
 80041f8:	4614      	mov	r4, r2
 80041fa:	461d      	mov	r5, r3
 80041fc:	4643      	mov	r3, r8
 80041fe:	18e3      	adds	r3, r4, r3
 8004200:	603b      	str	r3, [r7, #0]
 8004202:	464b      	mov	r3, r9
 8004204:	eb45 0303 	adc.w	r3, r5, r3
 8004208:	607b      	str	r3, [r7, #4]
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	f04f 0300 	mov.w	r3, #0
 8004212:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004216:	4629      	mov	r1, r5
 8004218:	028b      	lsls	r3, r1, #10
 800421a:	4621      	mov	r1, r4
 800421c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004220:	4621      	mov	r1, r4
 8004222:	028a      	lsls	r2, r1, #10
 8004224:	4610      	mov	r0, r2
 8004226:	4619      	mov	r1, r3
 8004228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800422a:	2200      	movs	r2, #0
 800422c:	61bb      	str	r3, [r7, #24]
 800422e:	61fa      	str	r2, [r7, #28]
 8004230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004234:	f7fc f81c 	bl	8000270 <__aeabi_uldivmod>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4613      	mov	r3, r2
 800423e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <HAL_RCC_GetSysClockFreq+0x200>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	0c1b      	lsrs	r3, r3, #16
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	3301      	adds	r3, #1
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004250:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004254:	fbb2 f3f3 	udiv	r3, r2, r3
 8004258:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800425a:	e002      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800425c:	4b05      	ldr	r3, [pc, #20]	; (8004274 <HAL_RCC_GetSysClockFreq+0x204>)
 800425e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004264:	4618      	mov	r0, r3
 8004266:	3750      	adds	r7, #80	; 0x50
 8004268:	46bd      	mov	sp, r7
 800426a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800426e:	bf00      	nop
 8004270:	40023800 	.word	0x40023800
 8004274:	00f42400 	.word	0x00f42400
 8004278:	007a1200 	.word	0x007a1200

0800427c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004280:	4b03      	ldr	r3, [pc, #12]	; (8004290 <HAL_RCC_GetHCLKFreq+0x14>)
 8004282:	681b      	ldr	r3, [r3, #0]
}
 8004284:	4618      	mov	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	20000000 	.word	0x20000000

08004294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004298:	f7ff fff0 	bl	800427c <HAL_RCC_GetHCLKFreq>
 800429c:	4602      	mov	r2, r0
 800429e:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	0a9b      	lsrs	r3, r3, #10
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	4903      	ldr	r1, [pc, #12]	; (80042b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042aa:	5ccb      	ldrb	r3, [r1, r3]
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40023800 	.word	0x40023800
 80042b8:	080097f0 	.word	0x080097f0

080042bc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d105      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d035      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042e4:	4b62      	ldr	r3, [pc, #392]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042ea:	f7fc ffd7 	bl	800129c <HAL_GetTick>
 80042ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042f0:	e008      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042f2:	f7fc ffd3 	bl	800129c <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e0b0      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004304:	4b5b      	ldr	r3, [pc, #364]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1f0      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	019a      	lsls	r2, r3, #6
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	071b      	lsls	r3, r3, #28
 800431c:	4955      	ldr	r1, [pc, #340]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800431e:	4313      	orrs	r3, r2
 8004320:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004324:	4b52      	ldr	r3, [pc, #328]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004326:	2201      	movs	r2, #1
 8004328:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800432a:	f7fc ffb7 	bl	800129c <HAL_GetTick>
 800432e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004330:	e008      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004332:	f7fc ffb3 	bl	800129c <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e090      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004344:	4b4b      	ldr	r3, [pc, #300]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0f0      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 8083 	beq.w	8004464 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	4b44      	ldr	r3, [pc, #272]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	4a43      	ldr	r2, [pc, #268]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800436c:	6413      	str	r3, [r2, #64]	; 0x40
 800436e:	4b41      	ldr	r3, [pc, #260]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800437a:	4b3f      	ldr	r3, [pc, #252]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a3e      	ldr	r2, [pc, #248]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004384:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004386:	f7fc ff89 	bl	800129c <HAL_GetTick>
 800438a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800438c:	e008      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800438e:	f7fc ff85 	bl	800129c <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e062      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043a0:	4b35      	ldr	r3, [pc, #212]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0f0      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043ac:	4b31      	ldr	r3, [pc, #196]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d02f      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d028      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043ca:	4b2a      	ldr	r3, [pc, #168]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043d4:	4b29      	ldr	r3, [pc, #164]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043d6:	2201      	movs	r2, #1
 80043d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043da:	4b28      	ldr	r3, [pc, #160]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80043e0:	4a24      	ldr	r2, [pc, #144]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043e6:	4b23      	ldr	r3, [pc, #140]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d114      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80043f2:	f7fc ff53 	bl	800129c <HAL_GetTick>
 80043f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f8:	e00a      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043fa:	f7fc ff4f 	bl	800129c <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	f241 3288 	movw	r2, #5000	; 0x1388
 8004408:	4293      	cmp	r3, r2
 800440a:	d901      	bls.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e02a      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004410:	4b18      	ldr	r3, [pc, #96]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0ee      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004424:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004428:	d10d      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800442a:	4b12      	ldr	r3, [pc, #72]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800443a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800443e:	490d      	ldr	r1, [pc, #52]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004440:	4313      	orrs	r3, r2
 8004442:	608b      	str	r3, [r1, #8]
 8004444:	e005      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004446:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	4a0a      	ldr	r2, [pc, #40]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800444c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004450:	6093      	str	r3, [r2, #8]
 8004452:	4b08      	ldr	r3, [pc, #32]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004454:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800445e:	4905      	ldr	r1, [pc, #20]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004460:	4313      	orrs	r3, r2
 8004462:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	42470068 	.word	0x42470068
 8004474:	40023800 	.word	0x40023800
 8004478:	40007000 	.word	0x40007000
 800447c:	42470e40 	.word	0x42470e40

08004480 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d13e      	bne.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800449e:	4b23      	ldr	r3, [pc, #140]	; (800452c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d005      	beq.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d12f      	bne.n	8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044b4:	4b1e      	ldr	r3, [pc, #120]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044b6:	617b      	str	r3, [r7, #20]
          break;
 80044b8:	e02f      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044ba:	4b1c      	ldr	r3, [pc, #112]	; (800452c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044c6:	d108      	bne.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044c8:	4b18      	ldr	r3, [pc, #96]	; (800452c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044d0:	4a18      	ldr	r2, [pc, #96]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80044d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	e007      	b.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044da:	4b14      	ldr	r3, [pc, #80]	; (800452c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044e2:	4a15      	ldr	r2, [pc, #84]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80044e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80044ea:	4b10      	ldr	r3, [pc, #64]	; (800452c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044f0:	099b      	lsrs	r3, r3, #6
 80044f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	fb02 f303 	mul.w	r3, r2, r3
 80044fc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80044fe:	4b0b      	ldr	r3, [pc, #44]	; (800452c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004504:	0f1b      	lsrs	r3, r3, #28
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	617b      	str	r3, [r7, #20]
          break;
 8004512:	e002      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	617b      	str	r3, [r7, #20]
          break;
 8004518:	bf00      	nop
        }
      }
      break;
 800451a:	bf00      	nop
    }
  }
  return frequency;
 800451c:	697b      	ldr	r3, [r7, #20]
}
 800451e:	4618      	mov	r0, r3
 8004520:	371c      	adds	r7, #28
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40023800 	.word	0x40023800
 8004530:	00bb8000 	.word	0x00bb8000
 8004534:	007a1200 	.word	0x007a1200
 8004538:	00f42400 	.word	0x00f42400

0800453c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e07b      	b.n	8004646 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	2b00      	cmp	r3, #0
 8004554:	d108      	bne.n	8004568 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800455e:	d009      	beq.n	8004574 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	61da      	str	r2, [r3, #28]
 8004566:	e005      	b.n	8004574 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fc fcde 	bl	8000f50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f8:	ea42 0103 	orr.w	r1, r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	0c1b      	lsrs	r3, r3, #16
 8004612:	f003 0104 	and.w	r1, r3, #4
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	f003 0210 	and.w	r2, r3, #16
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69da      	ldr	r2, [r3, #28]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004634:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800464e:	b084      	sub	sp, #16
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	f107 001c 	add.w	r0, r7, #28
 800465c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004662:	2b01      	cmp	r3, #1
 8004664:	d122      	bne.n	80046ac <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800467a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800468e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004690:	2b01      	cmp	r3, #1
 8004692:	d105      	bne.n	80046a0 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f001 fbed 	bl	8005e80 <USB_CoreReset>
 80046a6:	4603      	mov	r3, r0
 80046a8:	73fb      	strb	r3, [r7, #15]
 80046aa:	e01a      	b.n	80046e2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f001 fbe1 	bl	8005e80 <USB_CoreReset>
 80046be:	4603      	mov	r3, r0
 80046c0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80046c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d106      	bne.n	80046d6 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	639a      	str	r2, [r3, #56]	; 0x38
 80046d4:	e005      	b.n	80046e2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80046e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d10b      	bne.n	8004700 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f043 0206 	orr.w	r2, r3, #6
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f043 0220 	orr.w	r2, r3, #32
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004700:	7bfb      	ldrb	r3, [r7, #15]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800470c:	b004      	add	sp, #16
 800470e:	4770      	bx	lr

08004710 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	4613      	mov	r3, r2
 800471c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800471e:	79fb      	ldrb	r3, [r7, #7]
 8004720:	2b02      	cmp	r3, #2
 8004722:	d165      	bne.n	80047f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4a41      	ldr	r2, [pc, #260]	; (800482c <USB_SetTurnaroundTime+0x11c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d906      	bls.n	800473a <USB_SetTurnaroundTime+0x2a>
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4a40      	ldr	r2, [pc, #256]	; (8004830 <USB_SetTurnaroundTime+0x120>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d202      	bcs.n	800473a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004734:	230f      	movs	r3, #15
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	e062      	b.n	8004800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4a3c      	ldr	r2, [pc, #240]	; (8004830 <USB_SetTurnaroundTime+0x120>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d306      	bcc.n	8004750 <USB_SetTurnaroundTime+0x40>
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	4a3b      	ldr	r2, [pc, #236]	; (8004834 <USB_SetTurnaroundTime+0x124>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d202      	bcs.n	8004750 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800474a:	230e      	movs	r3, #14
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	e057      	b.n	8004800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4a38      	ldr	r2, [pc, #224]	; (8004834 <USB_SetTurnaroundTime+0x124>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d306      	bcc.n	8004766 <USB_SetTurnaroundTime+0x56>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	4a37      	ldr	r2, [pc, #220]	; (8004838 <USB_SetTurnaroundTime+0x128>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d202      	bcs.n	8004766 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004760:	230d      	movs	r3, #13
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	e04c      	b.n	8004800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	4a33      	ldr	r2, [pc, #204]	; (8004838 <USB_SetTurnaroundTime+0x128>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d306      	bcc.n	800477c <USB_SetTurnaroundTime+0x6c>
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4a32      	ldr	r2, [pc, #200]	; (800483c <USB_SetTurnaroundTime+0x12c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d802      	bhi.n	800477c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004776:	230c      	movs	r3, #12
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	e041      	b.n	8004800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4a2f      	ldr	r2, [pc, #188]	; (800483c <USB_SetTurnaroundTime+0x12c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d906      	bls.n	8004792 <USB_SetTurnaroundTime+0x82>
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4a2e      	ldr	r2, [pc, #184]	; (8004840 <USB_SetTurnaroundTime+0x130>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d802      	bhi.n	8004792 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800478c:	230b      	movs	r3, #11
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	e036      	b.n	8004800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	4a2a      	ldr	r2, [pc, #168]	; (8004840 <USB_SetTurnaroundTime+0x130>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d906      	bls.n	80047a8 <USB_SetTurnaroundTime+0x98>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	4a29      	ldr	r2, [pc, #164]	; (8004844 <USB_SetTurnaroundTime+0x134>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d802      	bhi.n	80047a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80047a2:	230a      	movs	r3, #10
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	e02b      	b.n	8004800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4a26      	ldr	r2, [pc, #152]	; (8004844 <USB_SetTurnaroundTime+0x134>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d906      	bls.n	80047be <USB_SetTurnaroundTime+0xae>
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4a25      	ldr	r2, [pc, #148]	; (8004848 <USB_SetTurnaroundTime+0x138>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d202      	bcs.n	80047be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80047b8:	2309      	movs	r3, #9
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	e020      	b.n	8004800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	4a21      	ldr	r2, [pc, #132]	; (8004848 <USB_SetTurnaroundTime+0x138>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d306      	bcc.n	80047d4 <USB_SetTurnaroundTime+0xc4>
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	4a20      	ldr	r2, [pc, #128]	; (800484c <USB_SetTurnaroundTime+0x13c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d802      	bhi.n	80047d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80047ce:	2308      	movs	r3, #8
 80047d0:	617b      	str	r3, [r7, #20]
 80047d2:	e015      	b.n	8004800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4a1d      	ldr	r2, [pc, #116]	; (800484c <USB_SetTurnaroundTime+0x13c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d906      	bls.n	80047ea <USB_SetTurnaroundTime+0xda>
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	4a1c      	ldr	r2, [pc, #112]	; (8004850 <USB_SetTurnaroundTime+0x140>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d202      	bcs.n	80047ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80047e4:	2307      	movs	r3, #7
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	e00a      	b.n	8004800 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80047ea:	2306      	movs	r3, #6
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	e007      	b.n	8004800 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d102      	bne.n	80047fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80047f6:	2309      	movs	r3, #9
 80047f8:	617b      	str	r3, [r7, #20]
 80047fa:	e001      	b.n	8004800 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80047fc:	2309      	movs	r3, #9
 80047fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	029b      	lsls	r3, r3, #10
 8004814:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004818:	431a      	orrs	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	371c      	adds	r7, #28
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	00d8acbf 	.word	0x00d8acbf
 8004830:	00e4e1c0 	.word	0x00e4e1c0
 8004834:	00f42400 	.word	0x00f42400
 8004838:	01067380 	.word	0x01067380
 800483c:	011a499f 	.word	0x011a499f
 8004840:	01312cff 	.word	0x01312cff
 8004844:	014ca43f 	.word	0x014ca43f
 8004848:	016e3600 	.word	0x016e3600
 800484c:	01a6ab1f 	.word	0x01a6ab1f
 8004850:	01e84800 	.word	0x01e84800

08004854 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f043 0201 	orr.w	r2, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f023 0201 	bic.w	r2, r3, #1
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d115      	bne.n	80048e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048c6:	2001      	movs	r0, #1
 80048c8:	f7fc fcf4 	bl	80012b4 <HAL_Delay>
      ms++;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3301      	adds	r3, #1
 80048d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f001 fa45 	bl	8005d62 <USB_GetMode>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d01e      	beq.n	800491c <USB_SetCurrentMode+0x84>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2b31      	cmp	r3, #49	; 0x31
 80048e2:	d9f0      	bls.n	80048c6 <USB_SetCurrentMode+0x2e>
 80048e4:	e01a      	b.n	800491c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048e6:	78fb      	ldrb	r3, [r7, #3]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d115      	bne.n	8004918 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048f8:	2001      	movs	r0, #1
 80048fa:	f7fc fcdb 	bl	80012b4 <HAL_Delay>
      ms++;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3301      	adds	r3, #1
 8004902:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f001 fa2c 	bl	8005d62 <USB_GetMode>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <USB_SetCurrentMode+0x84>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b31      	cmp	r3, #49	; 0x31
 8004914:	d9f0      	bls.n	80048f8 <USB_SetCurrentMode+0x60>
 8004916:	e001      	b.n	800491c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e005      	b.n	8004928 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b32      	cmp	r3, #50	; 0x32
 8004920:	d101      	bne.n	8004926 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004930:	b084      	sub	sp, #16
 8004932:	b580      	push	{r7, lr}
 8004934:	b086      	sub	sp, #24
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
 800493a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800493e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800494a:	2300      	movs	r3, #0
 800494c:	613b      	str	r3, [r7, #16]
 800494e:	e009      	b.n	8004964 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	3340      	adds	r3, #64	; 0x40
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	2200      	movs	r2, #0
 800495c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	3301      	adds	r3, #1
 8004962:	613b      	str	r3, [r7, #16]
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	2b0e      	cmp	r3, #14
 8004968:	d9f2      	bls.n	8004950 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800496a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800496c:	2b00      	cmp	r3, #0
 800496e:	d11c      	bne.n	80049aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800497e:	f043 0302 	orr.w	r3, r3, #2
 8004982:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004988:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	639a      	str	r2, [r3, #56]	; 0x38
 80049a8:	e00b      	b.n	80049c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049c8:	461a      	mov	r2, r3
 80049ca:	2300      	movs	r3, #0
 80049cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d4:	4619      	mov	r1, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049dc:	461a      	mov	r2, r3
 80049de:	680b      	ldr	r3, [r1, #0]
 80049e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d10c      	bne.n	8004a02 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d104      	bne.n	80049f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049ee:	2100      	movs	r1, #0
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f965 	bl	8004cc0 <USB_SetDevSpeed>
 80049f6:	e008      	b.n	8004a0a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049f8:	2101      	movs	r1, #1
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f960 	bl	8004cc0 <USB_SetDevSpeed>
 8004a00:	e003      	b.n	8004a0a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a02:	2103      	movs	r1, #3
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f95b 	bl	8004cc0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a0a:	2110      	movs	r1, #16
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f8f3 	bl	8004bf8 <USB_FlushTxFifo>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f91f 	bl	8004c60 <USB_FlushRxFifo>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a32:	461a      	mov	r2, r3
 8004a34:	2300      	movs	r3, #0
 8004a36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3e:	461a      	mov	r2, r3
 8004a40:	2300      	movs	r3, #0
 8004a42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a50:	2300      	movs	r3, #0
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	e043      	b.n	8004ade <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a6c:	d118      	bne.n	8004aa0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10a      	bne.n	8004a8a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a80:	461a      	mov	r2, r3
 8004a82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	e013      	b.n	8004ab2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a96:	461a      	mov	r2, r3
 8004a98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	e008      	b.n	8004ab2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aac:	461a      	mov	r2, r3
 8004aae:	2300      	movs	r3, #0
 8004ab0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abe:	461a      	mov	r2, r3
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ad6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	3301      	adds	r3, #1
 8004adc:	613b      	str	r3, [r7, #16]
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d3b7      	bcc.n	8004a56 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	e043      	b.n	8004b74 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004afe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b02:	d118      	bne.n	8004b36 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10a      	bne.n	8004b20 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	015a      	lsls	r2, r3, #5
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b16:	461a      	mov	r2, r3
 8004b18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	e013      	b.n	8004b48 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	e008      	b.n	8004b48 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b42:	461a      	mov	r2, r3
 8004b44:	2300      	movs	r3, #0
 8004b46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b54:	461a      	mov	r2, r3
 8004b56:	2300      	movs	r3, #0
 8004b58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b66:	461a      	mov	r2, r3
 8004b68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	3301      	adds	r3, #1
 8004b72:	613b      	str	r3, [r7, #16]
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d3b7      	bcc.n	8004aec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d105      	bne.n	8004bb0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	f043 0210 	orr.w	r2, r3, #16
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699a      	ldr	r2, [r3, #24]
 8004bb4:	4b0f      	ldr	r3, [pc, #60]	; (8004bf4 <USB_DevInit+0x2c4>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d005      	beq.n	8004bce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	f043 0208 	orr.w	r2, r3, #8
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d107      	bne.n	8004be4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bdc:	f043 0304 	orr.w	r3, r3, #4
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bf0:	b004      	add	sp, #16
 8004bf2:	4770      	bx	lr
 8004bf4:	803c3800 	.word	0x803c3800

08004bf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4a13      	ldr	r2, [pc, #76]	; (8004c5c <USB_FlushTxFifo+0x64>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d901      	bls.n	8004c18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e01b      	b.n	8004c50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	daf2      	bge.n	8004c06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	019b      	lsls	r3, r3, #6
 8004c28:	f043 0220 	orr.w	r2, r3, #32
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3301      	adds	r3, #1
 8004c34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4a08      	ldr	r2, [pc, #32]	; (8004c5c <USB_FlushTxFifo+0x64>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d901      	bls.n	8004c42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e006      	b.n	8004c50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f003 0320 	and.w	r3, r3, #32
 8004c4a:	2b20      	cmp	r3, #32
 8004c4c:	d0f0      	beq.n	8004c30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	00030d40 	.word	0x00030d40

08004c60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4a11      	ldr	r2, [pc, #68]	; (8004cbc <USB_FlushRxFifo+0x5c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d901      	bls.n	8004c7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e018      	b.n	8004cb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	daf2      	bge.n	8004c6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2210      	movs	r2, #16
 8004c8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	3301      	adds	r3, #1
 8004c94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4a08      	ldr	r2, [pc, #32]	; (8004cbc <USB_FlushRxFifo+0x5c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d901      	bls.n	8004ca2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e006      	b.n	8004cb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0310 	and.w	r3, r3, #16
 8004caa:	2b10      	cmp	r3, #16
 8004cac:	d0f0      	beq.n	8004c90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	00030d40 	.word	0x00030d40

08004cc0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	78fb      	ldrb	r3, [r7, #3]
 8004cda:	68f9      	ldr	r1, [r7, #12]
 8004cdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b087      	sub	sp, #28
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 0306 	and.w	r3, r3, #6
 8004d0a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d102      	bne.n	8004d18 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004d12:	2300      	movs	r3, #0
 8004d14:	75fb      	strb	r3, [r7, #23]
 8004d16:	e00a      	b.n	8004d2e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d002      	beq.n	8004d24 <USB_GetDevSpeed+0x32>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b06      	cmp	r3, #6
 8004d22:	d102      	bne.n	8004d2a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004d24:	2302      	movs	r3, #2
 8004d26:	75fb      	strb	r3, [r7, #23]
 8004d28:	e001      	b.n	8004d2e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004d2a:	230f      	movs	r3, #15
 8004d2c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	371c      	adds	r7, #28
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	785b      	ldrb	r3, [r3, #1]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d13a      	bne.n	8004dce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d5e:	69da      	ldr	r2, [r3, #28]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	f003 030f 	and.w	r3, r3, #15
 8004d68:	2101      	movs	r1, #1
 8004d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	68f9      	ldr	r1, [r7, #12]
 8004d72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d76:	4313      	orrs	r3, r2
 8004d78:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d155      	bne.n	8004e3c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	791b      	ldrb	r3, [r3, #4]
 8004daa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004dac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	059b      	lsls	r3, r3, #22
 8004db2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004db4:	4313      	orrs	r3, r2
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	0151      	lsls	r1, r2, #5
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	440a      	add	r2, r1
 8004dbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	e036      	b.n	8004e3c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd4:	69da      	ldr	r2, [r3, #28]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	f003 030f 	and.w	r3, r3, #15
 8004dde:	2101      	movs	r1, #1
 8004de0:	fa01 f303 	lsl.w	r3, r1, r3
 8004de4:	041b      	lsls	r3, r3, #16
 8004de6:	68f9      	ldr	r1, [r7, #12]
 8004de8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dec:	4313      	orrs	r3, r2
 8004dee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d11a      	bne.n	8004e3c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	791b      	ldrb	r3, [r3, #4]
 8004e20:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e22:	430b      	orrs	r3, r1
 8004e24:	4313      	orrs	r3, r2
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	0151      	lsls	r1, r2, #5
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	440a      	add	r2, r1
 8004e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e3a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
	...

08004e4c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	785b      	ldrb	r3, [r3, #1]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d161      	bne.n	8004f2c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e7e:	d11f      	bne.n	8004ec0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	0151      	lsls	r1, r2, #5
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	440a      	add	r2, r1
 8004e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e9e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	0151      	lsls	r1, r2, #5
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	440a      	add	r2, r1
 8004eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ebe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	f003 030f 	and.w	r3, r3, #15
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	43db      	mvns	r3, r3
 8004eda:	68f9      	ldr	r1, [r7, #12]
 8004edc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eea:	69da      	ldr	r2, [r3, #28]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	43db      	mvns	r3, r3
 8004efe:	68f9      	ldr	r1, [r7, #12]
 8004f00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f04:	4013      	ands	r3, r2
 8004f06:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	0159      	lsls	r1, r3, #5
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	440b      	add	r3, r1
 8004f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f22:	4619      	mov	r1, r3
 8004f24:	4b35      	ldr	r3, [pc, #212]	; (8004ffc <USB_DeactivateEndpoint+0x1b0>)
 8004f26:	4013      	ands	r3, r2
 8004f28:	600b      	str	r3, [r1, #0]
 8004f2a:	e060      	b.n	8004fee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f42:	d11f      	bne.n	8004f84 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	0151      	lsls	r1, r2, #5
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	440a      	add	r2, r1
 8004f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f62:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	0151      	lsls	r1, r2, #5
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	440a      	add	r2, r1
 8004f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	f003 030f 	and.w	r3, r3, #15
 8004f94:	2101      	movs	r1, #1
 8004f96:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9a:	041b      	lsls	r3, r3, #16
 8004f9c:	43db      	mvns	r3, r3
 8004f9e:	68f9      	ldr	r1, [r7, #12]
 8004fa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fae:	69da      	ldr	r2, [r3, #28]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	f003 030f 	and.w	r3, r3, #15
 8004fb8:	2101      	movs	r1, #1
 8004fba:	fa01 f303 	lsl.w	r3, r1, r3
 8004fbe:	041b      	lsls	r3, r3, #16
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	68f9      	ldr	r1, [r7, #12]
 8004fc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fc8:	4013      	ands	r3, r2
 8004fca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	0159      	lsls	r1, r3, #5
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	440b      	add	r3, r1
 8004fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4b05      	ldr	r3, [pc, #20]	; (8005000 <USB_DeactivateEndpoint+0x1b4>)
 8004fea:	4013      	ands	r3, r2
 8004fec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	ec337800 	.word	0xec337800
 8005000:	eff37800 	.word	0xeff37800

08005004 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08a      	sub	sp, #40	; 0x28
 8005008:	af02      	add	r7, sp, #8
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	785b      	ldrb	r3, [r3, #1]
 8005020:	2b01      	cmp	r3, #1
 8005022:	f040 815c 	bne.w	80052de <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d132      	bne.n	8005094 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	0151      	lsls	r1, r2, #5
 8005040:	69fa      	ldr	r2, [r7, #28]
 8005042:	440a      	add	r2, r1
 8005044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005048:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800504c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005050:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	4413      	add	r3, r2
 800505a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	0151      	lsls	r1, r2, #5
 8005064:	69fa      	ldr	r2, [r7, #28]
 8005066:	440a      	add	r2, r1
 8005068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800506c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005070:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	0151      	lsls	r1, r2, #5
 8005084:	69fa      	ldr	r2, [r7, #28]
 8005086:	440a      	add	r2, r1
 8005088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800508c:	0cdb      	lsrs	r3, r3, #19
 800508e:	04db      	lsls	r3, r3, #19
 8005090:	6113      	str	r3, [r2, #16]
 8005092:	e074      	b.n	800517e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	0151      	lsls	r1, r2, #5
 80050a6:	69fa      	ldr	r2, [r7, #28]
 80050a8:	440a      	add	r2, r1
 80050aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ae:	0cdb      	lsrs	r3, r3, #19
 80050b0:	04db      	lsls	r3, r3, #19
 80050b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	0151      	lsls	r1, r2, #5
 80050c6:	69fa      	ldr	r2, [r7, #28]
 80050c8:	440a      	add	r2, r1
 80050ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	6999      	ldr	r1, [r3, #24]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	440b      	add	r3, r1
 80050f0:	1e59      	subs	r1, r3, #1
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80050fa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80050fc:	4b9d      	ldr	r3, [pc, #628]	; (8005374 <USB_EPStartXfer+0x370>)
 80050fe:	400b      	ands	r3, r1
 8005100:	69b9      	ldr	r1, [r7, #24]
 8005102:	0148      	lsls	r0, r1, #5
 8005104:	69f9      	ldr	r1, [r7, #28]
 8005106:	4401      	add	r1, r0
 8005108:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800510c:	4313      	orrs	r3, r2
 800510e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511c:	691a      	ldr	r2, [r3, #16]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005126:	69b9      	ldr	r1, [r7, #24]
 8005128:	0148      	lsls	r0, r1, #5
 800512a:	69f9      	ldr	r1, [r7, #28]
 800512c:	4401      	add	r1, r0
 800512e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005132:	4313      	orrs	r3, r2
 8005134:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	791b      	ldrb	r3, [r3, #4]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d11f      	bne.n	800517e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	0151      	lsls	r1, r2, #5
 8005150:	69fa      	ldr	r2, [r7, #28]
 8005152:	440a      	add	r2, r1
 8005154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005158:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800515c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	0151      	lsls	r1, r2, #5
 8005170:	69fa      	ldr	r2, [r7, #28]
 8005172:	440a      	add	r2, r1
 8005174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005178:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800517c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d14b      	bne.n	800521c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d009      	beq.n	80051a0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005198:	461a      	mov	r2, r3
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	791b      	ldrb	r3, [r3, #4]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d128      	bne.n	80051fa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d110      	bne.n	80051da <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	0151      	lsls	r1, r2, #5
 80051ca:	69fa      	ldr	r2, [r7, #28]
 80051cc:	440a      	add	r2, r1
 80051ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051d6:	6013      	str	r3, [r2, #0]
 80051d8:	e00f      	b.n	80051fa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	0151      	lsls	r1, r2, #5
 80051ec:	69fa      	ldr	r2, [r7, #28]
 80051ee:	440a      	add	r2, r1
 80051f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	0151      	lsls	r1, r2, #5
 800520c:	69fa      	ldr	r2, [r7, #28]
 800520e:	440a      	add	r2, r1
 8005210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005214:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	e133      	b.n	8005484 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	0151      	lsls	r1, r2, #5
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	440a      	add	r2, r1
 8005232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005236:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800523a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	791b      	ldrb	r3, [r3, #4]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d015      	beq.n	8005270 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 811b 	beq.w	8005484 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	2101      	movs	r1, #1
 8005260:	fa01 f303 	lsl.w	r3, r1, r3
 8005264:	69f9      	ldr	r1, [r7, #28]
 8005266:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800526a:	4313      	orrs	r3, r2
 800526c:	634b      	str	r3, [r1, #52]	; 0x34
 800526e:	e109      	b.n	8005484 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527c:	2b00      	cmp	r3, #0
 800527e:	d110      	bne.n	80052a2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	0151      	lsls	r1, r2, #5
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	440a      	add	r2, r1
 8005296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800529a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800529e:	6013      	str	r3, [r2, #0]
 80052a0:	e00f      	b.n	80052c2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	0151      	lsls	r1, r2, #5
 80052b4:	69fa      	ldr	r2, [r7, #28]
 80052b6:	440a      	add	r2, r1
 80052b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	6919      	ldr	r1, [r3, #16]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	781a      	ldrb	r2, [r3, #0]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	b298      	uxth	r0, r3
 80052d0:	79fb      	ldrb	r3, [r7, #7]
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	4603      	mov	r3, r0
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 fade 	bl	8005898 <USB_WritePacket>
 80052dc:	e0d2      	b.n	8005484 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	0151      	lsls	r1, r2, #5
 80052f0:	69fa      	ldr	r2, [r7, #28]
 80052f2:	440a      	add	r2, r1
 80052f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052f8:	0cdb      	lsrs	r3, r3, #19
 80052fa:	04db      	lsls	r3, r3, #19
 80052fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	0151      	lsls	r1, r2, #5
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	440a      	add	r2, r1
 8005314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005318:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800531c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005320:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d126      	bne.n	8005378 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005336:	691a      	ldr	r2, [r3, #16]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005340:	69b9      	ldr	r1, [r7, #24]
 8005342:	0148      	lsls	r0, r1, #5
 8005344:	69f9      	ldr	r1, [r7, #28]
 8005346:	4401      	add	r1, r0
 8005348:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800534c:	4313      	orrs	r3, r2
 800534e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	0151      	lsls	r1, r2, #5
 8005362:	69fa      	ldr	r2, [r7, #28]
 8005364:	440a      	add	r2, r1
 8005366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800536a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800536e:	6113      	str	r3, [r2, #16]
 8005370:	e03a      	b.n	80053e8 <USB_EPStartXfer+0x3e4>
 8005372:	bf00      	nop
 8005374:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	699a      	ldr	r2, [r3, #24]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	4413      	add	r3, r2
 8005382:	1e5a      	subs	r2, r3, #1
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	fbb2 f3f3 	udiv	r3, r2, r3
 800538c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	8afa      	ldrh	r2, [r7, #22]
 8005394:	fb03 f202 	mul.w	r2, r3, r2
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a8:	691a      	ldr	r2, [r3, #16]
 80053aa:	8afb      	ldrh	r3, [r7, #22]
 80053ac:	04d9      	lsls	r1, r3, #19
 80053ae:	4b38      	ldr	r3, [pc, #224]	; (8005490 <USB_EPStartXfer+0x48c>)
 80053b0:	400b      	ands	r3, r1
 80053b2:	69b9      	ldr	r1, [r7, #24]
 80053b4:	0148      	lsls	r0, r1, #5
 80053b6:	69f9      	ldr	r1, [r7, #28]
 80053b8:	4401      	add	r1, r0
 80053ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053be:	4313      	orrs	r3, r2
 80053c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ce:	691a      	ldr	r2, [r3, #16]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053d8:	69b9      	ldr	r1, [r7, #24]
 80053da:	0148      	lsls	r0, r1, #5
 80053dc:	69f9      	ldr	r1, [r7, #28]
 80053de:	4401      	add	r1, r0
 80053e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053e4:	4313      	orrs	r3, r2
 80053e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053e8:	79fb      	ldrb	r3, [r7, #7]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d10d      	bne.n	800540a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d009      	beq.n	800540a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	6919      	ldr	r1, [r3, #16]
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	4413      	add	r3, r2
 8005402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005406:	460a      	mov	r2, r1
 8005408:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	791b      	ldrb	r3, [r3, #4]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d128      	bne.n	8005464 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541e:	2b00      	cmp	r3, #0
 8005420:	d110      	bne.n	8005444 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	4413      	add	r3, r2
 800542a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	0151      	lsls	r1, r2, #5
 8005434:	69fa      	ldr	r2, [r7, #28]
 8005436:	440a      	add	r2, r1
 8005438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800543c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	e00f      	b.n	8005464 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69ba      	ldr	r2, [r7, #24]
 8005454:	0151      	lsls	r1, r2, #5
 8005456:	69fa      	ldr	r2, [r7, #28]
 8005458:	440a      	add	r2, r1
 800545a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800545e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005462:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	0151      	lsls	r1, r2, #5
 8005476:	69fa      	ldr	r2, [r7, #28]
 8005478:	440a      	add	r2, r1
 800547a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800547e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005482:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3720      	adds	r7, #32
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	1ff80000 	.word	0x1ff80000

08005494 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005494:	b480      	push	{r7}
 8005496:	b087      	sub	sp, #28
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	4613      	mov	r3, r2
 80054a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	785b      	ldrb	r3, [r3, #1]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	f040 80ce 	bne.w	8005652 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d132      	bne.n	8005524 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	0151      	lsls	r1, r2, #5
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	440a      	add	r2, r1
 80054d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	0151      	lsls	r1, r2, #5
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	440a      	add	r2, r1
 80054f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005500:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	0151      	lsls	r1, r2, #5
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	440a      	add	r2, r1
 8005518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800551c:	0cdb      	lsrs	r3, r3, #19
 800551e:	04db      	lsls	r3, r3, #19
 8005520:	6113      	str	r3, [r2, #16]
 8005522:	e04e      	b.n	80055c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	440a      	add	r2, r1
 800553a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800553e:	0cdb      	lsrs	r3, r3, #19
 8005540:	04db      	lsls	r3, r3, #19
 8005542:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	0151      	lsls	r1, r2, #5
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	440a      	add	r2, r1
 800555a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800555e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005562:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005566:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	699a      	ldr	r2, [r3, #24]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	429a      	cmp	r2, r3
 8005572:	d903      	bls.n	800557c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	0151      	lsls	r1, r2, #5
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	440a      	add	r2, r1
 8005592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005596:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800559a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a8:	691a      	ldr	r2, [r3, #16]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055b2:	6939      	ldr	r1, [r7, #16]
 80055b4:	0148      	lsls	r0, r1, #5
 80055b6:	6979      	ldr	r1, [r7, #20]
 80055b8:	4401      	add	r1, r0
 80055ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80055be:	4313      	orrs	r3, r2
 80055c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d11e      	bne.n	8005606 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d009      	beq.n	80055e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055dc:	461a      	mov	r2, r3
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	0151      	lsls	r1, r2, #5
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	440a      	add	r2, r1
 80055fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005602:	6013      	str	r3, [r2, #0]
 8005604:	e097      	b.n	8005736 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	4413      	add	r3, r2
 800560e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	0151      	lsls	r1, r2, #5
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	440a      	add	r2, r1
 800561c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005620:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005624:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 8083 	beq.w	8005736 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	f003 030f 	and.w	r3, r3, #15
 8005640:	2101      	movs	r1, #1
 8005642:	fa01 f303 	lsl.w	r3, r1, r3
 8005646:	6979      	ldr	r1, [r7, #20]
 8005648:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800564c:	4313      	orrs	r3, r2
 800564e:	634b      	str	r3, [r1, #52]	; 0x34
 8005650:	e071      	b.n	8005736 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	0151      	lsls	r1, r2, #5
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	440a      	add	r2, r1
 8005668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800566c:	0cdb      	lsrs	r3, r3, #19
 800566e:	04db      	lsls	r3, r3, #19
 8005670:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	0151      	lsls	r1, r2, #5
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	440a      	add	r2, r1
 8005688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800568c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005690:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005694:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	68da      	ldr	r2, [r3, #12]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	0151      	lsls	r1, r2, #5
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	440a      	add	r2, r1
 80056c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056da:	691a      	ldr	r2, [r3, #16]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e4:	6939      	ldr	r1, [r7, #16]
 80056e6:	0148      	lsls	r0, r1, #5
 80056e8:	6979      	ldr	r1, [r7, #20]
 80056ea:	4401      	add	r1, r0
 80056ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056f0:	4313      	orrs	r3, r2
 80056f2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80056f4:	79fb      	ldrb	r3, [r7, #7]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d10d      	bne.n	8005716 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d009      	beq.n	8005716 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	6919      	ldr	r1, [r3, #16]
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005712:	460a      	mov	r2, r1
 8005714:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	0151      	lsls	r1, r2, #5
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	440a      	add	r2, r1
 800572c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005730:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005734:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	371c      	adds	r7, #28
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	785b      	ldrb	r3, [r3, #1]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d14a      	bne.n	80057f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005776:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800577a:	f040 8086 	bne.w	800588a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	7812      	ldrb	r2, [r2, #0]
 8005792:	0151      	lsls	r1, r2, #5
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	440a      	add	r2, r1
 8005798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800579c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	7812      	ldrb	r2, [r2, #0]
 80057b6:	0151      	lsls	r1, r2, #5
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	440a      	add	r2, r1
 80057bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3301      	adds	r3, #1
 80057ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d902      	bls.n	80057dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	75fb      	strb	r3, [r7, #23]
          break;
 80057da:	e056      	b.n	800588a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057f4:	d0e7      	beq.n	80057c6 <USB_EPStopXfer+0x82>
 80057f6:	e048      	b.n	800588a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800580c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005810:	d13b      	bne.n	800588a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	7812      	ldrb	r2, [r2, #0]
 8005826:	0151      	lsls	r1, r2, #5
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	440a      	add	r2, r1
 800582c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005830:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005834:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	7812      	ldrb	r2, [r2, #0]
 800584a:	0151      	lsls	r1, r2, #5
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	440a      	add	r2, r1
 8005850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005854:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005858:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3301      	adds	r3, #1
 800585e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f242 7210 	movw	r2, #10000	; 0x2710
 8005866:	4293      	cmp	r3, r2
 8005868:	d902      	bls.n	8005870 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	75fb      	strb	r3, [r7, #23]
          break;
 800586e:	e00c      	b.n	800588a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005884:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005888:	d0e7      	beq.n	800585a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800588a:	7dfb      	ldrb	r3, [r7, #23]
}
 800588c:	4618      	mov	r0, r3
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005898:	b480      	push	{r7}
 800589a:	b089      	sub	sp, #36	; 0x24
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	4611      	mov	r1, r2
 80058a4:	461a      	mov	r2, r3
 80058a6:	460b      	mov	r3, r1
 80058a8:	71fb      	strb	r3, [r7, #7]
 80058aa:	4613      	mov	r3, r2
 80058ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80058b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d123      	bne.n	8005906 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80058be:	88bb      	ldrh	r3, [r7, #4]
 80058c0:	3303      	adds	r3, #3
 80058c2:	089b      	lsrs	r3, r3, #2
 80058c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80058c6:	2300      	movs	r3, #0
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	e018      	b.n	80058fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	031a      	lsls	r2, r3, #12
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058d8:	461a      	mov	r2, r3
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	3301      	adds	r3, #1
 80058e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	3301      	adds	r3, #1
 80058ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	3301      	adds	r3, #1
 80058f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	3301      	adds	r3, #1
 80058f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	3301      	adds	r3, #1
 80058fc:	61bb      	str	r3, [r7, #24]
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	429a      	cmp	r2, r3
 8005904:	d3e2      	bcc.n	80058cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3724      	adds	r7, #36	; 0x24
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005914:	b480      	push	{r7}
 8005916:	b08b      	sub	sp, #44	; 0x2c
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	4613      	mov	r3, r2
 8005920:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800592a:	88fb      	ldrh	r3, [r7, #6]
 800592c:	089b      	lsrs	r3, r3, #2
 800592e:	b29b      	uxth	r3, r3
 8005930:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005932:	88fb      	ldrh	r3, [r7, #6]
 8005934:	f003 0303 	and.w	r3, r3, #3
 8005938:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800593a:	2300      	movs	r3, #0
 800593c:	623b      	str	r3, [r7, #32]
 800593e:	e014      	b.n	800596a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	601a      	str	r2, [r3, #0]
    pDest++;
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	3301      	adds	r3, #1
 8005950:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	3301      	adds	r3, #1
 8005956:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	3301      	adds	r3, #1
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	3301      	adds	r3, #1
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	3301      	adds	r3, #1
 8005968:	623b      	str	r3, [r7, #32]
 800596a:	6a3a      	ldr	r2, [r7, #32]
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	429a      	cmp	r2, r3
 8005970:	d3e6      	bcc.n	8005940 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005972:	8bfb      	ldrh	r3, [r7, #30]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d01e      	beq.n	80059b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005982:	461a      	mov	r2, r3
 8005984:	f107 0310 	add.w	r3, r7, #16
 8005988:	6812      	ldr	r2, [r2, #0]
 800598a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	fa22 f303 	lsr.w	r3, r2, r3
 8005998:	b2da      	uxtb	r2, r3
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	701a      	strb	r2, [r3, #0]
      i++;
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	3301      	adds	r3, #1
 80059a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	3301      	adds	r3, #1
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80059aa:	8bfb      	ldrh	r3, [r7, #30]
 80059ac:	3b01      	subs	r3, #1
 80059ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80059b0:	8bfb      	ldrh	r3, [r7, #30]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1ea      	bne.n	800598c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	372c      	adds	r7, #44	; 0x2c
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	785b      	ldrb	r3, [r3, #1]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d12c      	bne.n	8005a3a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	db12      	blt.n	8005a18 <USB_EPSetStall+0x54>
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00f      	beq.n	8005a18 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	0151      	lsls	r1, r2, #5
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	440a      	add	r2, r1
 8005a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a16:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	0151      	lsls	r1, r2, #5
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	440a      	add	r2, r1
 8005a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a36:	6013      	str	r3, [r2, #0]
 8005a38:	e02b      	b.n	8005a92 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	db12      	blt.n	8005a72 <USB_EPSetStall+0xae>
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00f      	beq.n	8005a72 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	0151      	lsls	r1, r2, #5
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	440a      	add	r2, r1
 8005a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a70:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	0151      	lsls	r1, r2, #5
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	440a      	add	r2, r1
 8005a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	785b      	ldrb	r3, [r3, #1]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d128      	bne.n	8005b0e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	0151      	lsls	r1, r2, #5
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	440a      	add	r2, r1
 8005ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ad6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ada:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	791b      	ldrb	r3, [r3, #4]
 8005ae0:	2b03      	cmp	r3, #3
 8005ae2:	d003      	beq.n	8005aec <USB_EPClearStall+0x4c>
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	791b      	ldrb	r3, [r3, #4]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d138      	bne.n	8005b5e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	0151      	lsls	r1, r2, #5
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	440a      	add	r2, r1
 8005b02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	e027      	b.n	8005b5e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	0151      	lsls	r1, r2, #5
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	440a      	add	r2, r1
 8005b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	791b      	ldrb	r3, [r3, #4]
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d003      	beq.n	8005b3e <USB_EPClearStall+0x9e>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	791b      	ldrb	r3, [r3, #4]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d10f      	bne.n	8005b5e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	0151      	lsls	r1, r2, #5
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	440a      	add	r2, r1
 8005b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b5c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	460b      	mov	r3, r1
 8005b76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b8e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005ba0:	68f9      	ldr	r1, [r7, #12]
 8005ba2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005bd2:	f023 0303 	bic.w	r3, r3, #3
 8005bd6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005be6:	f023 0302 	bic.w	r3, r3, #2
 8005bea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c14:	f023 0303 	bic.w	r3, r3, #3
 8005c18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c28:	f043 0302 	orr.w	r3, r3, #2
 8005c2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4013      	ands	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c54:	68fb      	ldr	r3, [r7, #12]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b085      	sub	sp, #20
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	4013      	ands	r3, r2
 8005c84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	0c1b      	lsrs	r3, r3, #16
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b085      	sub	sp, #20
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	b29b      	uxth	r3, r3
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b085      	sub	sp, #20
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005cda:	78fb      	ldrb	r3, [r7, #3]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cf8:	68bb      	ldr	r3, [r7, #8]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b087      	sub	sp, #28
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d28:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005d2a:	78fb      	ldrb	r3, [r7, #3]
 8005d2c:	f003 030f 	and.w	r3, r3, #15
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	fa22 f303 	lsr.w	r3, r2, r3
 8005d36:	01db      	lsls	r3, r3, #7
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005d40:	78fb      	ldrb	r3, [r7, #3]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	4013      	ands	r3, r2
 8005d52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d54:	68bb      	ldr	r3, [r7, #8]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	371c      	adds	r7, #28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b085      	sub	sp, #20
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005d9c:	f023 0307 	bic.w	r3, r3, #7
 8005da0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005db4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	333c      	adds	r3, #60	; 0x3c
 8005dda:	3304      	adds	r3, #4
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	4a26      	ldr	r2, [pc, #152]	; (8005e7c <USB_EP0_OutStart+0xb8>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d90a      	bls.n	8005dfe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005df4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005df8:	d101      	bne.n	8005dfe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	e037      	b.n	8005e6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e04:	461a      	mov	r2, r3
 8005e06:	2300      	movs	r3, #0
 8005e08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e2c:	f043 0318 	orr.w	r3, r3, #24
 8005e30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e40:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005e44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005e46:	7afb      	ldrb	r3, [r7, #11]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d10f      	bne.n	8005e6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e52:	461a      	mov	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e66:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005e6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	371c      	adds	r7, #28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	4f54300a 	.word	0x4f54300a

08005e80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4a13      	ldr	r2, [pc, #76]	; (8005ee4 <USB_CoreReset+0x64>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d901      	bls.n	8005e9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e01b      	b.n	8005ed6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	daf2      	bge.n	8005e8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f043 0201 	orr.w	r2, r3, #1
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4a09      	ldr	r2, [pc, #36]	; (8005ee4 <USB_CoreReset+0x64>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d901      	bls.n	8005ec8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e006      	b.n	8005ed6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d0f0      	beq.n	8005eb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	00030d40 	.word	0x00030d40

08005ee8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005ef4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005ef8:	f002 fca2 	bl	8008840 <USBD_static_malloc>
 8005efc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d109      	bne.n	8005f18 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	32b0      	adds	r2, #176	; 0xb0
 8005f0e:	2100      	movs	r1, #0
 8005f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005f14:	2302      	movs	r3, #2
 8005f16:	e0d4      	b.n	80060c2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005f18:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f002 fdd7 	bl	8008ad2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	32b0      	adds	r2, #176	; 0xb0
 8005f2e:	68f9      	ldr	r1, [r7, #12]
 8005f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	32b0      	adds	r2, #176	; 0xb0
 8005f3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	7c1b      	ldrb	r3, [r3, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d138      	bne.n	8005fc2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f50:	4b5e      	ldr	r3, [pc, #376]	; (80060cc <USBD_CDC_Init+0x1e4>)
 8005f52:	7819      	ldrb	r1, [r3, #0]
 8005f54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f58:	2202      	movs	r2, #2
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f002 fb4d 	bl	80085fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f60:	4b5a      	ldr	r3, [pc, #360]	; (80060cc <USBD_CDC_Init+0x1e4>)
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	f003 020f 	and.w	r2, r3, #15
 8005f68:	6879      	ldr	r1, [r7, #4]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	440b      	add	r3, r1
 8005f74:	3324      	adds	r3, #36	; 0x24
 8005f76:	2201      	movs	r2, #1
 8005f78:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005f7a:	4b55      	ldr	r3, [pc, #340]	; (80060d0 <USBD_CDC_Init+0x1e8>)
 8005f7c:	7819      	ldrb	r1, [r3, #0]
 8005f7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f82:	2202      	movs	r2, #2
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f002 fb38 	bl	80085fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f8a:	4b51      	ldr	r3, [pc, #324]	; (80060d0 <USBD_CDC_Init+0x1e8>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	f003 020f 	and.w	r2, r3, #15
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	440b      	add	r3, r1
 8005f9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005fa6:	4b4b      	ldr	r3, [pc, #300]	; (80060d4 <USBD_CDC_Init+0x1ec>)
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	f003 020f 	and.w	r2, r3, #15
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	440b      	add	r3, r1
 8005fba:	3326      	adds	r3, #38	; 0x26
 8005fbc:	2210      	movs	r2, #16
 8005fbe:	801a      	strh	r2, [r3, #0]
 8005fc0:	e035      	b.n	800602e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005fc2:	4b42      	ldr	r3, [pc, #264]	; (80060cc <USBD_CDC_Init+0x1e4>)
 8005fc4:	7819      	ldrb	r1, [r3, #0]
 8005fc6:	2340      	movs	r3, #64	; 0x40
 8005fc8:	2202      	movs	r2, #2
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f002 fb15 	bl	80085fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005fd0:	4b3e      	ldr	r3, [pc, #248]	; (80060cc <USBD_CDC_Init+0x1e4>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	f003 020f 	and.w	r2, r3, #15
 8005fd8:	6879      	ldr	r1, [r7, #4]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	440b      	add	r3, r1
 8005fe4:	3324      	adds	r3, #36	; 0x24
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005fea:	4b39      	ldr	r3, [pc, #228]	; (80060d0 <USBD_CDC_Init+0x1e8>)
 8005fec:	7819      	ldrb	r1, [r3, #0]
 8005fee:	2340      	movs	r3, #64	; 0x40
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f002 fb01 	bl	80085fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005ff8:	4b35      	ldr	r3, [pc, #212]	; (80060d0 <USBD_CDC_Init+0x1e8>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	f003 020f 	and.w	r2, r3, #15
 8006000:	6879      	ldr	r1, [r7, #4]
 8006002:	4613      	mov	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	440b      	add	r3, r1
 800600c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006010:	2201      	movs	r2, #1
 8006012:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006014:	4b2f      	ldr	r3, [pc, #188]	; (80060d4 <USBD_CDC_Init+0x1ec>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	f003 020f 	and.w	r2, r3, #15
 800601c:	6879      	ldr	r1, [r7, #4]
 800601e:	4613      	mov	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	440b      	add	r3, r1
 8006028:	3326      	adds	r3, #38	; 0x26
 800602a:	2210      	movs	r2, #16
 800602c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800602e:	4b29      	ldr	r3, [pc, #164]	; (80060d4 <USBD_CDC_Init+0x1ec>)
 8006030:	7819      	ldrb	r1, [r3, #0]
 8006032:	2308      	movs	r3, #8
 8006034:	2203      	movs	r2, #3
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f002 fadf 	bl	80085fa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800603c:	4b25      	ldr	r3, [pc, #148]	; (80060d4 <USBD_CDC_Init+0x1ec>)
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	f003 020f 	and.w	r2, r3, #15
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	4613      	mov	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	440b      	add	r3, r1
 8006050:	3324      	adds	r3, #36	; 0x24
 8006052:	2201      	movs	r2, #1
 8006054:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	33b0      	adds	r3, #176	; 0xb0
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800608c:	2302      	movs	r3, #2
 800608e:	e018      	b.n	80060c2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	7c1b      	ldrb	r3, [r3, #16]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10a      	bne.n	80060ae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006098:	4b0d      	ldr	r3, [pc, #52]	; (80060d0 <USBD_CDC_Init+0x1e8>)
 800609a:	7819      	ldrb	r1, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f002 fb96 	bl	80087d8 <USBD_LL_PrepareReceive>
 80060ac:	e008      	b.n	80060c0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80060ae:	4b08      	ldr	r3, [pc, #32]	; (80060d0 <USBD_CDC_Init+0x1e8>)
 80060b0:	7819      	ldrb	r1, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060b8:	2340      	movs	r3, #64	; 0x40
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f002 fb8c 	bl	80087d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	20000093 	.word	0x20000093
 80060d0:	20000094 	.word	0x20000094
 80060d4:	20000095 	.word	0x20000095

080060d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	460b      	mov	r3, r1
 80060e2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80060e4:	4b3a      	ldr	r3, [pc, #232]	; (80061d0 <USBD_CDC_DeInit+0xf8>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	4619      	mov	r1, r3
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f002 faab 	bl	8008646 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80060f0:	4b37      	ldr	r3, [pc, #220]	; (80061d0 <USBD_CDC_DeInit+0xf8>)
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	f003 020f 	and.w	r2, r3, #15
 80060f8:	6879      	ldr	r1, [r7, #4]
 80060fa:	4613      	mov	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	440b      	add	r3, r1
 8006104:	3324      	adds	r3, #36	; 0x24
 8006106:	2200      	movs	r2, #0
 8006108:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800610a:	4b32      	ldr	r3, [pc, #200]	; (80061d4 <USBD_CDC_DeInit+0xfc>)
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	4619      	mov	r1, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f002 fa98 	bl	8008646 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006116:	4b2f      	ldr	r3, [pc, #188]	; (80061d4 <USBD_CDC_DeInit+0xfc>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	f003 020f 	and.w	r2, r3, #15
 800611e:	6879      	ldr	r1, [r7, #4]
 8006120:	4613      	mov	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	440b      	add	r3, r1
 800612a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800612e:	2200      	movs	r2, #0
 8006130:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006132:	4b29      	ldr	r3, [pc, #164]	; (80061d8 <USBD_CDC_DeInit+0x100>)
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	4619      	mov	r1, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f002 fa84 	bl	8008646 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800613e:	4b26      	ldr	r3, [pc, #152]	; (80061d8 <USBD_CDC_DeInit+0x100>)
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	f003 020f 	and.w	r2, r3, #15
 8006146:	6879      	ldr	r1, [r7, #4]
 8006148:	4613      	mov	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	440b      	add	r3, r1
 8006152:	3324      	adds	r3, #36	; 0x24
 8006154:	2200      	movs	r2, #0
 8006156:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006158:	4b1f      	ldr	r3, [pc, #124]	; (80061d8 <USBD_CDC_DeInit+0x100>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	f003 020f 	and.w	r2, r3, #15
 8006160:	6879      	ldr	r1, [r7, #4]
 8006162:	4613      	mov	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	440b      	add	r3, r1
 800616c:	3326      	adds	r3, #38	; 0x26
 800616e:	2200      	movs	r2, #0
 8006170:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	32b0      	adds	r2, #176	; 0xb0
 800617c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d01f      	beq.n	80061c4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	33b0      	adds	r3, #176	; 0xb0
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	32b0      	adds	r2, #176	; 0xb0
 80061a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f002 fb58 	bl	800885c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	32b0      	adds	r2, #176	; 0xb0
 80061b6:	2100      	movs	r1, #0
 80061b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	20000093 	.word	0x20000093
 80061d4:	20000094 	.word	0x20000094
 80061d8:	20000095 	.word	0x20000095

080061dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	32b0      	adds	r2, #176	; 0xb0
 80061f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006208:	2303      	movs	r3, #3
 800620a:	e0bf      	b.n	800638c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006214:	2b00      	cmp	r3, #0
 8006216:	d050      	beq.n	80062ba <USBD_CDC_Setup+0xde>
 8006218:	2b20      	cmp	r3, #32
 800621a:	f040 80af 	bne.w	800637c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	88db      	ldrh	r3, [r3, #6]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d03a      	beq.n	800629c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	b25b      	sxtb	r3, r3
 800622c:	2b00      	cmp	r3, #0
 800622e:	da1b      	bge.n	8006268 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	33b0      	adds	r3, #176	; 0xb0
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006246:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	88d2      	ldrh	r2, [r2, #6]
 800624c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	88db      	ldrh	r3, [r3, #6]
 8006252:	2b07      	cmp	r3, #7
 8006254:	bf28      	it	cs
 8006256:	2307      	movcs	r3, #7
 8006258:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	89fa      	ldrh	r2, [r7, #14]
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f001 fd89 	bl	8007d78 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006266:	e090      	b.n	800638a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	785a      	ldrb	r2, [r3, #1]
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	88db      	ldrh	r3, [r3, #6]
 8006276:	2b3f      	cmp	r3, #63	; 0x3f
 8006278:	d803      	bhi.n	8006282 <USBD_CDC_Setup+0xa6>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	88db      	ldrh	r3, [r3, #6]
 800627e:	b2da      	uxtb	r2, r3
 8006280:	e000      	b.n	8006284 <USBD_CDC_Setup+0xa8>
 8006282:	2240      	movs	r2, #64	; 0x40
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800628a:	6939      	ldr	r1, [r7, #16]
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006292:	461a      	mov	r2, r3
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f001 fd9b 	bl	8007dd0 <USBD_CtlPrepareRx>
      break;
 800629a:	e076      	b.n	800638a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	33b0      	adds	r3, #176	; 0xb0
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	7850      	ldrb	r0, [r2, #1]
 80062b2:	2200      	movs	r2, #0
 80062b4:	6839      	ldr	r1, [r7, #0]
 80062b6:	4798      	blx	r3
      break;
 80062b8:	e067      	b.n	800638a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	785b      	ldrb	r3, [r3, #1]
 80062be:	2b0b      	cmp	r3, #11
 80062c0:	d851      	bhi.n	8006366 <USBD_CDC_Setup+0x18a>
 80062c2:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <USBD_CDC_Setup+0xec>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	080062f9 	.word	0x080062f9
 80062cc:	08006375 	.word	0x08006375
 80062d0:	08006367 	.word	0x08006367
 80062d4:	08006367 	.word	0x08006367
 80062d8:	08006367 	.word	0x08006367
 80062dc:	08006367 	.word	0x08006367
 80062e0:	08006367 	.word	0x08006367
 80062e4:	08006367 	.word	0x08006367
 80062e8:	08006367 	.word	0x08006367
 80062ec:	08006367 	.word	0x08006367
 80062f0:	08006323 	.word	0x08006323
 80062f4:	0800634d 	.word	0x0800634d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b03      	cmp	r3, #3
 8006302:	d107      	bne.n	8006314 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006304:	f107 030a 	add.w	r3, r7, #10
 8006308:	2202      	movs	r2, #2
 800630a:	4619      	mov	r1, r3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f001 fd33 	bl	8007d78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006312:	e032      	b.n	800637a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006314:	6839      	ldr	r1, [r7, #0]
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f001 fcbd 	bl	8007c96 <USBD_CtlError>
            ret = USBD_FAIL;
 800631c:	2303      	movs	r3, #3
 800631e:	75fb      	strb	r3, [r7, #23]
          break;
 8006320:	e02b      	b.n	800637a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b03      	cmp	r3, #3
 800632c:	d107      	bne.n	800633e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800632e:	f107 030d 	add.w	r3, r7, #13
 8006332:	2201      	movs	r2, #1
 8006334:	4619      	mov	r1, r3
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f001 fd1e 	bl	8007d78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800633c:	e01d      	b.n	800637a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f001 fca8 	bl	8007c96 <USBD_CtlError>
            ret = USBD_FAIL;
 8006346:	2303      	movs	r3, #3
 8006348:	75fb      	strb	r3, [r7, #23]
          break;
 800634a:	e016      	b.n	800637a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b03      	cmp	r3, #3
 8006356:	d00f      	beq.n	8006378 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006358:	6839      	ldr	r1, [r7, #0]
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f001 fc9b 	bl	8007c96 <USBD_CtlError>
            ret = USBD_FAIL;
 8006360:	2303      	movs	r3, #3
 8006362:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006364:	e008      	b.n	8006378 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006366:	6839      	ldr	r1, [r7, #0]
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f001 fc94 	bl	8007c96 <USBD_CtlError>
          ret = USBD_FAIL;
 800636e:	2303      	movs	r3, #3
 8006370:	75fb      	strb	r3, [r7, #23]
          break;
 8006372:	e002      	b.n	800637a <USBD_CDC_Setup+0x19e>
          break;
 8006374:	bf00      	nop
 8006376:	e008      	b.n	800638a <USBD_CDC_Setup+0x1ae>
          break;
 8006378:	bf00      	nop
      }
      break;
 800637a:	e006      	b.n	800638a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800637c:	6839      	ldr	r1, [r7, #0]
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f001 fc89 	bl	8007c96 <USBD_CtlError>
      ret = USBD_FAIL;
 8006384:	2303      	movs	r3, #3
 8006386:	75fb      	strb	r3, [r7, #23]
      break;
 8006388:	bf00      	nop
  }

  return (uint8_t)ret;
 800638a:	7dfb      	ldrb	r3, [r7, #23]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80063a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	32b0      	adds	r2, #176	; 0xb0
 80063b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e065      	b.n	800648a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	32b0      	adds	r2, #176	; 0xb0
 80063c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80063ce:	78fb      	ldrb	r3, [r7, #3]
 80063d0:	f003 020f 	and.w	r2, r3, #15
 80063d4:	6879      	ldr	r1, [r7, #4]
 80063d6:	4613      	mov	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	440b      	add	r3, r1
 80063e0:	3318      	adds	r3, #24
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d02f      	beq.n	8006448 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80063e8:	78fb      	ldrb	r3, [r7, #3]
 80063ea:	f003 020f 	and.w	r2, r3, #15
 80063ee:	6879      	ldr	r1, [r7, #4]
 80063f0:	4613      	mov	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	440b      	add	r3, r1
 80063fa:	3318      	adds	r3, #24
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	78fb      	ldrb	r3, [r7, #3]
 8006400:	f003 010f 	and.w	r1, r3, #15
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	460b      	mov	r3, r1
 8006408:	00db      	lsls	r3, r3, #3
 800640a:	440b      	add	r3, r1
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4403      	add	r3, r0
 8006410:	3348      	adds	r3, #72	; 0x48
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	fbb2 f1f3 	udiv	r1, r2, r3
 8006418:	fb01 f303 	mul.w	r3, r1, r3
 800641c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800641e:	2b00      	cmp	r3, #0
 8006420:	d112      	bne.n	8006448 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006422:	78fb      	ldrb	r3, [r7, #3]
 8006424:	f003 020f 	and.w	r2, r3, #15
 8006428:	6879      	ldr	r1, [r7, #4]
 800642a:	4613      	mov	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	440b      	add	r3, r1
 8006434:	3318      	adds	r3, #24
 8006436:	2200      	movs	r2, #0
 8006438:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800643a:	78f9      	ldrb	r1, [r7, #3]
 800643c:	2300      	movs	r3, #0
 800643e:	2200      	movs	r2, #0
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f002 f9a8 	bl	8008796 <USBD_LL_Transmit>
 8006446:	e01f      	b.n	8006488 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2200      	movs	r2, #0
 800644c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	33b0      	adds	r3, #176	; 0xb0
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d010      	beq.n	8006488 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	33b0      	adds	r3, #176	; 0xb0
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006484:	78fa      	ldrb	r2, [r7, #3]
 8006486:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	460b      	mov	r3, r1
 800649c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	32b0      	adds	r2, #176	; 0xb0
 80064a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	32b0      	adds	r2, #176	; 0xb0
 80064b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e01a      	b.n	80064fa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80064c4:	78fb      	ldrb	r3, [r7, #3]
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f002 f9a6 	bl	800881a <USBD_LL_GetRxDataSize>
 80064ce:	4602      	mov	r2, r0
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	33b0      	adds	r3, #176	; 0xb0
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4413      	add	r3, r2
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80064f4:	4611      	mov	r1, r2
 80064f6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b084      	sub	sp, #16
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	32b0      	adds	r2, #176	; 0xb0
 8006514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006518:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006520:	2303      	movs	r3, #3
 8006522:	e025      	b.n	8006570 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	33b0      	adds	r3, #176	; 0xb0
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d01a      	beq.n	800656e <USBD_CDC_EP0_RxReady+0x6c>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800653e:	2bff      	cmp	r3, #255	; 0xff
 8006540:	d015      	beq.n	800656e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	33b0      	adds	r3, #176	; 0xb0
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800655a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006562:	b292      	uxth	r2, r2
 8006564:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	22ff      	movs	r2, #255	; 0xff
 800656a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006580:	2182      	movs	r1, #130	; 0x82
 8006582:	4818      	ldr	r0, [pc, #96]	; (80065e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006584:	f000 fd4f 	bl	8007026 <USBD_GetEpDesc>
 8006588:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800658a:	2101      	movs	r1, #1
 800658c:	4815      	ldr	r0, [pc, #84]	; (80065e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800658e:	f000 fd4a 	bl	8007026 <USBD_GetEpDesc>
 8006592:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006594:	2181      	movs	r1, #129	; 0x81
 8006596:	4813      	ldr	r0, [pc, #76]	; (80065e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006598:	f000 fd45 	bl	8007026 <USBD_GetEpDesc>
 800659c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d002      	beq.n	80065aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	2210      	movs	r2, #16
 80065a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d006      	beq.n	80065be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065b8:	711a      	strb	r2, [r3, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d006      	beq.n	80065d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065cc:	711a      	strb	r2, [r3, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2243      	movs	r2, #67	; 0x43
 80065d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80065d8:	4b02      	ldr	r3, [pc, #8]	; (80065e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	20000050 	.word	0x20000050

080065e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80065f0:	2182      	movs	r1, #130	; 0x82
 80065f2:	4818      	ldr	r0, [pc, #96]	; (8006654 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065f4:	f000 fd17 	bl	8007026 <USBD_GetEpDesc>
 80065f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80065fa:	2101      	movs	r1, #1
 80065fc:	4815      	ldr	r0, [pc, #84]	; (8006654 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065fe:	f000 fd12 	bl	8007026 <USBD_GetEpDesc>
 8006602:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006604:	2181      	movs	r1, #129	; 0x81
 8006606:	4813      	ldr	r0, [pc, #76]	; (8006654 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006608:	f000 fd0d 	bl	8007026 <USBD_GetEpDesc>
 800660c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d002      	beq.n	800661a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	2210      	movs	r2, #16
 8006618:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d006      	beq.n	800662e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	2200      	movs	r2, #0
 8006624:	711a      	strb	r2, [r3, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f042 0202 	orr.w	r2, r2, #2
 800662c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d006      	beq.n	8006642 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	711a      	strb	r2, [r3, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f042 0202 	orr.w	r2, r2, #2
 8006640:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2243      	movs	r2, #67	; 0x43
 8006646:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006648:	4b02      	ldr	r3, [pc, #8]	; (8006654 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800664a:	4618      	mov	r0, r3
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20000050 	.word	0x20000050

08006658 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006660:	2182      	movs	r1, #130	; 0x82
 8006662:	4818      	ldr	r0, [pc, #96]	; (80066c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006664:	f000 fcdf 	bl	8007026 <USBD_GetEpDesc>
 8006668:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800666a:	2101      	movs	r1, #1
 800666c:	4815      	ldr	r0, [pc, #84]	; (80066c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800666e:	f000 fcda 	bl	8007026 <USBD_GetEpDesc>
 8006672:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006674:	2181      	movs	r1, #129	; 0x81
 8006676:	4813      	ldr	r0, [pc, #76]	; (80066c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006678:	f000 fcd5 	bl	8007026 <USBD_GetEpDesc>
 800667c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d002      	beq.n	800668a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	2210      	movs	r2, #16
 8006688:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d006      	beq.n	800669e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	2200      	movs	r2, #0
 8006694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006698:	711a      	strb	r2, [r3, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d006      	beq.n	80066b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066ac:	711a      	strb	r2, [r3, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2243      	movs	r2, #67	; 0x43
 80066b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80066b8:	4b02      	ldr	r3, [pc, #8]	; (80066c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20000050 	.word	0x20000050

080066c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	220a      	movs	r2, #10
 80066d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80066d6:	4b03      	ldr	r3, [pc, #12]	; (80066e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80066d8:	4618      	mov	r0, r3
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	2000000c 	.word	0x2000000c

080066e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e009      	b.n	8006710 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	33b0      	adds	r3, #176	; 0xb0
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	32b0      	adds	r2, #176	; 0xb0
 8006732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006736:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800673e:	2303      	movs	r3, #3
 8006740:	e008      	b.n	8006754 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	371c      	adds	r7, #28
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	32b0      	adds	r2, #176	; 0xb0
 8006774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006778:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006780:	2303      	movs	r3, #3
 8006782:	e004      	b.n	800678e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
	...

0800679c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	32b0      	adds	r2, #176	; 0xb0
 80067ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80067b4:	2301      	movs	r3, #1
 80067b6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	32b0      	adds	r2, #176	; 0xb0
 80067c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e025      	b.n	800681a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d11f      	bne.n	8006818 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2201      	movs	r2, #1
 80067dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80067e0:	4b10      	ldr	r3, [pc, #64]	; (8006824 <USBD_CDC_TransmitPacket+0x88>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	f003 020f 	and.w	r2, r3, #15
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	4613      	mov	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4403      	add	r3, r0
 80067fa:	3318      	adds	r3, #24
 80067fc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80067fe:	4b09      	ldr	r3, [pc, #36]	; (8006824 <USBD_CDC_TransmitPacket+0x88>)
 8006800:	7819      	ldrb	r1, [r3, #0]
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f001 ffc1 	bl	8008796 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006814:	2300      	movs	r3, #0
 8006816:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006818:	7bfb      	ldrb	r3, [r7, #15]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	20000093 	.word	0x20000093

08006828 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	32b0      	adds	r2, #176	; 0xb0
 800683a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800683e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	32b0      	adds	r2, #176	; 0xb0
 800684a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006852:	2303      	movs	r3, #3
 8006854:	e018      	b.n	8006888 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	7c1b      	ldrb	r3, [r3, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10a      	bne.n	8006874 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800685e:	4b0c      	ldr	r3, [pc, #48]	; (8006890 <USBD_CDC_ReceivePacket+0x68>)
 8006860:	7819      	ldrb	r1, [r3, #0]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f001 ffb3 	bl	80087d8 <USBD_LL_PrepareReceive>
 8006872:	e008      	b.n	8006886 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006874:	4b06      	ldr	r3, [pc, #24]	; (8006890 <USBD_CDC_ReceivePacket+0x68>)
 8006876:	7819      	ldrb	r1, [r3, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800687e:	2340      	movs	r3, #64	; 0x40
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f001 ffa9 	bl	80087d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	20000094 	.word	0x20000094

08006894 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	4613      	mov	r3, r2
 80068a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e01f      	b.n	80068ec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	79fa      	ldrb	r2, [r7, #7]
 80068de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f001 fe23 	bl	800852c <USBD_LL_Init>
 80068e6:	4603      	mov	r3, r0
 80068e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80068ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068fe:	2300      	movs	r3, #0
 8006900:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006908:	2303      	movs	r3, #3
 800690a:	e025      	b.n	8006958 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	32ae      	adds	r2, #174	; 0xae
 800691e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00f      	beq.n	8006948 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	32ae      	adds	r2, #174	; 0xae
 8006932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006938:	f107 020e 	add.w	r2, r7, #14
 800693c:	4610      	mov	r0, r2
 800693e:	4798      	blx	r3
 8006940:	4602      	mov	r2, r0
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800694e:	1c5a      	adds	r2, r3, #1
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f001 fe2b 	bl	80085c4 <USBD_LL_Start>
 800696e:	4603      	mov	r3, r0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006980:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006982:	4618      	mov	r0, r3
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b084      	sub	sp, #16
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	460b      	mov	r3, r1
 8006998:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d009      	beq.n	80069bc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	78fa      	ldrb	r2, [r7, #3]
 80069b2:	4611      	mov	r1, r2
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	4798      	blx	r3
 80069b8:	4603      	mov	r3, r0
 80069ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b084      	sub	sp, #16
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
 80069ce:	460b      	mov	r3, r1
 80069d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80069d2:	2300      	movs	r3, #0
 80069d4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	78fa      	ldrb	r2, [r7, #3]
 80069e0:	4611      	mov	r1, r2
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	4798      	blx	r3
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80069ec:	2303      	movs	r3, #3
 80069ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b084      	sub	sp, #16
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
 8006a02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f001 f908 	bl	8007c22 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006a20:	461a      	mov	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a2e:	f003 031f 	and.w	r3, r3, #31
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d01a      	beq.n	8006a6c <USBD_LL_SetupStage+0x72>
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d822      	bhi.n	8006a80 <USBD_LL_SetupStage+0x86>
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <USBD_LL_SetupStage+0x4a>
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d00a      	beq.n	8006a58 <USBD_LL_SetupStage+0x5e>
 8006a42:	e01d      	b.n	8006a80 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fb5f 	bl	8007110 <USBD_StdDevReq>
 8006a52:	4603      	mov	r3, r0
 8006a54:	73fb      	strb	r3, [r7, #15]
      break;
 8006a56:	e020      	b.n	8006a9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fbc7 	bl	80071f4 <USBD_StdItfReq>
 8006a66:	4603      	mov	r3, r0
 8006a68:	73fb      	strb	r3, [r7, #15]
      break;
 8006a6a:	e016      	b.n	8006a9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a72:	4619      	mov	r1, r3
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fc29 	bl	80072cc <USBD_StdEPReq>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a7e:	e00c      	b.n	8006a9a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f001 fdf8 	bl	8008684 <USBD_LL_StallEP>
 8006a94:	4603      	mov	r3, r0
 8006a96:	73fb      	strb	r3, [r7, #15]
      break;
 8006a98:	bf00      	nop
  }

  return ret;
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	460b      	mov	r3, r1
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006ab6:	7afb      	ldrb	r3, [r7, #11]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d16e      	bne.n	8006b9a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006ac2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	f040 8098 	bne.w	8006c00 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d913      	bls.n	8006b04 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	689a      	ldr	r2, [r3, #8]
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	1ad2      	subs	r2, r2, r3
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	68da      	ldr	r2, [r3, #12]
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	4293      	cmp	r3, r2
 8006af4:	bf28      	it	cs
 8006af6:	4613      	movcs	r3, r2
 8006af8:	461a      	mov	r2, r3
 8006afa:	6879      	ldr	r1, [r7, #4]
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f001 f984 	bl	8007e0a <USBD_CtlContinueRx>
 8006b02:	e07d      	b.n	8006c00 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b0a:	f003 031f 	and.w	r3, r3, #31
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d014      	beq.n	8006b3c <USBD_LL_DataOutStage+0x98>
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d81d      	bhi.n	8006b52 <USBD_LL_DataOutStage+0xae>
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <USBD_LL_DataOutStage+0x7c>
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d003      	beq.n	8006b26 <USBD_LL_DataOutStage+0x82>
 8006b1e:	e018      	b.n	8006b52 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	75bb      	strb	r3, [r7, #22]
            break;
 8006b24:	e018      	b.n	8006b58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	4619      	mov	r1, r3
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 fa5e 	bl	8006ff2 <USBD_CoreFindIF>
 8006b36:	4603      	mov	r3, r0
 8006b38:	75bb      	strb	r3, [r7, #22]
            break;
 8006b3a:	e00d      	b.n	8006b58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	4619      	mov	r1, r3
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f000 fa60 	bl	800700c <USBD_CoreFindEP>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	75bb      	strb	r3, [r7, #22]
            break;
 8006b50:	e002      	b.n	8006b58 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	75bb      	strb	r3, [r7, #22]
            break;
 8006b56:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006b58:	7dbb      	ldrb	r3, [r7, #22]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d119      	bne.n	8006b92 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b03      	cmp	r3, #3
 8006b68:	d113      	bne.n	8006b92 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006b6a:	7dba      	ldrb	r2, [r7, #22]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	32ae      	adds	r2, #174	; 0xae
 8006b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00b      	beq.n	8006b92 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006b7a:	7dba      	ldrb	r2, [r7, #22]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006b82:	7dba      	ldrb	r2, [r7, #22]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	32ae      	adds	r2, #174	; 0xae
 8006b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f001 f94a 	bl	8007e2c <USBD_CtlSendStatus>
 8006b98:	e032      	b.n	8006c00 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006b9a:	7afb      	ldrb	r3, [r7, #11]
 8006b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f000 fa31 	bl	800700c <USBD_CoreFindEP>
 8006baa:	4603      	mov	r3, r0
 8006bac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bae:	7dbb      	ldrb	r3, [r7, #22]
 8006bb0:	2bff      	cmp	r3, #255	; 0xff
 8006bb2:	d025      	beq.n	8006c00 <USBD_LL_DataOutStage+0x15c>
 8006bb4:	7dbb      	ldrb	r3, [r7, #22]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d122      	bne.n	8006c00 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d117      	bne.n	8006bf6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006bc6:	7dba      	ldrb	r2, [r7, #22]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	32ae      	adds	r2, #174	; 0xae
 8006bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00f      	beq.n	8006bf6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006bd6:	7dba      	ldrb	r2, [r7, #22]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006bde:	7dba      	ldrb	r2, [r7, #22]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	32ae      	adds	r2, #174	; 0xae
 8006be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	7afa      	ldrb	r2, [r7, #11]
 8006bec:	4611      	mov	r1, r2
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	4798      	blx	r3
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006bf6:	7dfb      	ldrb	r3, [r7, #23]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006bfc:	7dfb      	ldrb	r3, [r7, #23]
 8006bfe:	e000      	b.n	8006c02 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b086      	sub	sp, #24
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	60f8      	str	r0, [r7, #12]
 8006c12:	460b      	mov	r3, r1
 8006c14:	607a      	str	r2, [r7, #4]
 8006c16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006c18:	7afb      	ldrb	r3, [r7, #11]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d16f      	bne.n	8006cfe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3314      	adds	r3, #20
 8006c22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d15a      	bne.n	8006ce4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	689a      	ldr	r2, [r3, #8]
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d914      	bls.n	8006c64 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	689a      	ldr	r2, [r3, #8]
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	1ad2      	subs	r2, r2, r3
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	6879      	ldr	r1, [r7, #4]
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f001 f8ac 	bl	8007dae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c56:	2300      	movs	r3, #0
 8006c58:	2200      	movs	r2, #0
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f001 fdbb 	bl	80087d8 <USBD_LL_PrepareReceive>
 8006c62:	e03f      	b.n	8006ce4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	68da      	ldr	r2, [r3, #12]
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d11c      	bne.n	8006caa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d316      	bcc.n	8006caa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d20f      	bcs.n	8006caa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f001 f88d 	bl	8007dae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f001 fd98 	bl	80087d8 <USBD_LL_PrepareReceive>
 8006ca8:	e01c      	b.n	8006ce4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d10f      	bne.n	8006cd6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d009      	beq.n	8006cd6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cd6:	2180      	movs	r1, #128	; 0x80
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f001 fcd3 	bl	8008684 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f001 f8b7 	bl	8007e52 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d03a      	beq.n	8006d64 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f7ff fe42 	bl	8006978 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006cfc:	e032      	b.n	8006d64 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006cfe:	7afb      	ldrb	r3, [r7, #11]
 8006d00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	4619      	mov	r1, r3
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 f97f 	bl	800700c <USBD_CoreFindEP>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d12:	7dfb      	ldrb	r3, [r7, #23]
 8006d14:	2bff      	cmp	r3, #255	; 0xff
 8006d16:	d025      	beq.n	8006d64 <USBD_LL_DataInStage+0x15a>
 8006d18:	7dfb      	ldrb	r3, [r7, #23]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d122      	bne.n	8006d64 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b03      	cmp	r3, #3
 8006d28:	d11c      	bne.n	8006d64 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006d2a:	7dfa      	ldrb	r2, [r7, #23]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	32ae      	adds	r2, #174	; 0xae
 8006d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d014      	beq.n	8006d64 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006d3a:	7dfa      	ldrb	r2, [r7, #23]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006d42:	7dfa      	ldrb	r2, [r7, #23]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	32ae      	adds	r2, #174	; 0xae
 8006d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	7afa      	ldrb	r2, [r7, #11]
 8006d50:	4611      	mov	r1, r2
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	4798      	blx	r3
 8006d56:	4603      	mov	r3, r0
 8006d58:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006d5a:	7dbb      	ldrb	r3, [r7, #22]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d001      	beq.n	8006d64 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006d60:	7dbb      	ldrb	r3, [r7, #22]
 8006d62:	e000      	b.n	8006d66 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3718      	adds	r7, #24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b084      	sub	sp, #16
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d014      	beq.n	8006dd4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00e      	beq.n	8006dd4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	6852      	ldr	r2, [r2, #4]
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	4611      	mov	r1, r2
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	4798      	blx	r3
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dd4:	2340      	movs	r3, #64	; 0x40
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	2100      	movs	r1, #0
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 fc0d 	bl	80085fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2240      	movs	r2, #64	; 0x40
 8006dec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006df0:	2340      	movs	r3, #64	; 0x40
 8006df2:	2200      	movs	r2, #0
 8006df4:	2180      	movs	r1, #128	; 0x80
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f001 fbff 	bl	80085fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2240      	movs	r2, #64	; 0x40
 8006e06:	621a      	str	r2, [r3, #32]

  return ret;
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b083      	sub	sp, #12
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	78fa      	ldrb	r2, [r7, #3]
 8006e22:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b083      	sub	sp, #12
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2204      	movs	r2, #4
 8006e4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b083      	sub	sp, #12
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	d106      	bne.n	8006e80 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d110      	bne.n	8006ec4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00b      	beq.n	8006ec4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d005      	beq.n	8006ec4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b082      	sub	sp, #8
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	32ae      	adds	r2, #174	; 0xae
 8006ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d101      	bne.n	8006ef0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e01c      	b.n	8006f2a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2b03      	cmp	r3, #3
 8006efa:	d115      	bne.n	8006f28 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	32ae      	adds	r2, #174	; 0xae
 8006f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00b      	beq.n	8006f28 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	32ae      	adds	r2, #174	; 0xae
 8006f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f1e:	6a1b      	ldr	r3, [r3, #32]
 8006f20:	78fa      	ldrb	r2, [r7, #3]
 8006f22:	4611      	mov	r1, r2
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b082      	sub	sp, #8
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	32ae      	adds	r2, #174	; 0xae
 8006f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e01c      	b.n	8006f8e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b03      	cmp	r3, #3
 8006f5e:	d115      	bne.n	8006f8c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	32ae      	adds	r2, #174	; 0xae
 8006f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00b      	beq.n	8006f8c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	32ae      	adds	r2, #174	; 0xae
 8006f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f84:	78fa      	ldrb	r2, [r7, #3]
 8006f86:	4611      	mov	r1, r2
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b083      	sub	sp, #12
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00e      	beq.n	8006fe8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	6852      	ldr	r2, [r2, #4]
 8006fd6:	b2d2      	uxtb	r2, r2
 8006fd8:	4611      	mov	r1, r2
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	4798      	blx	r3
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b083      	sub	sp, #12
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ffe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007000:	4618      	mov	r0, r3
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	460b      	mov	r3, r1
 8007016:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007018:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800701a:	4618      	mov	r0, r3
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b086      	sub	sp, #24
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
 800702e:	460b      	mov	r3, r1
 8007030:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800703a:	2300      	movs	r3, #0
 800703c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	885b      	ldrh	r3, [r3, #2]
 8007042:	b29a      	uxth	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	b29b      	uxth	r3, r3
 800704a:	429a      	cmp	r2, r3
 800704c:	d920      	bls.n	8007090 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	b29b      	uxth	r3, r3
 8007054:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007056:	e013      	b.n	8007080 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007058:	f107 030a 	add.w	r3, r7, #10
 800705c:	4619      	mov	r1, r3
 800705e:	6978      	ldr	r0, [r7, #20]
 8007060:	f000 f81b 	bl	800709a <USBD_GetNextDesc>
 8007064:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	785b      	ldrb	r3, [r3, #1]
 800706a:	2b05      	cmp	r3, #5
 800706c:	d108      	bne.n	8007080 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	789b      	ldrb	r3, [r3, #2]
 8007076:	78fa      	ldrb	r2, [r7, #3]
 8007078:	429a      	cmp	r2, r3
 800707a:	d008      	beq.n	800708e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800707c:	2300      	movs	r3, #0
 800707e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	885b      	ldrh	r3, [r3, #2]
 8007084:	b29a      	uxth	r2, r3
 8007086:	897b      	ldrh	r3, [r7, #10]
 8007088:	429a      	cmp	r2, r3
 800708a:	d8e5      	bhi.n	8007058 <USBD_GetEpDesc+0x32>
 800708c:	e000      	b.n	8007090 <USBD_GetEpDesc+0x6a>
          break;
 800708e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007090:	693b      	ldr	r3, [r7, #16]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3718      	adds	r7, #24
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800709a:	b480      	push	{r7}
 800709c:	b085      	sub	sp, #20
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	881a      	ldrh	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	4413      	add	r3, r2
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4413      	add	r3, r2
 80070c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80070c6:	68fb      	ldr	r3, [r7, #12]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b087      	sub	sp, #28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	3301      	adds	r3, #1
 80070ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80070f2:	8a3b      	ldrh	r3, [r7, #16]
 80070f4:	021b      	lsls	r3, r3, #8
 80070f6:	b21a      	sxth	r2, r3
 80070f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	b21b      	sxth	r3, r3
 8007100:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007102:	89fb      	ldrh	r3, [r7, #14]
}
 8007104:	4618      	mov	r0, r3
 8007106:	371c      	adds	r7, #28
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007126:	2b40      	cmp	r3, #64	; 0x40
 8007128:	d005      	beq.n	8007136 <USBD_StdDevReq+0x26>
 800712a:	2b40      	cmp	r3, #64	; 0x40
 800712c:	d857      	bhi.n	80071de <USBD_StdDevReq+0xce>
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00f      	beq.n	8007152 <USBD_StdDevReq+0x42>
 8007132:	2b20      	cmp	r3, #32
 8007134:	d153      	bne.n	80071de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	32ae      	adds	r2, #174	; 0xae
 8007140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	4798      	blx	r3
 800714c:	4603      	mov	r3, r0
 800714e:	73fb      	strb	r3, [r7, #15]
      break;
 8007150:	e04a      	b.n	80071e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	785b      	ldrb	r3, [r3, #1]
 8007156:	2b09      	cmp	r3, #9
 8007158:	d83b      	bhi.n	80071d2 <USBD_StdDevReq+0xc2>
 800715a:	a201      	add	r2, pc, #4	; (adr r2, 8007160 <USBD_StdDevReq+0x50>)
 800715c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007160:	080071b5 	.word	0x080071b5
 8007164:	080071c9 	.word	0x080071c9
 8007168:	080071d3 	.word	0x080071d3
 800716c:	080071bf 	.word	0x080071bf
 8007170:	080071d3 	.word	0x080071d3
 8007174:	08007193 	.word	0x08007193
 8007178:	08007189 	.word	0x08007189
 800717c:	080071d3 	.word	0x080071d3
 8007180:	080071ab 	.word	0x080071ab
 8007184:	0800719d 	.word	0x0800719d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007188:	6839      	ldr	r1, [r7, #0]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fa3c 	bl	8007608 <USBD_GetDescriptor>
          break;
 8007190:	e024      	b.n	80071dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fba1 	bl	80078dc <USBD_SetAddress>
          break;
 800719a:	e01f      	b.n	80071dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800719c:	6839      	ldr	r1, [r7, #0]
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fbe0 	bl	8007964 <USBD_SetConfig>
 80071a4:	4603      	mov	r3, r0
 80071a6:	73fb      	strb	r3, [r7, #15]
          break;
 80071a8:	e018      	b.n	80071dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fc83 	bl	8007ab8 <USBD_GetConfig>
          break;
 80071b2:	e013      	b.n	80071dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fcb4 	bl	8007b24 <USBD_GetStatus>
          break;
 80071bc:	e00e      	b.n	80071dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fce3 	bl	8007b8c <USBD_SetFeature>
          break;
 80071c6:	e009      	b.n	80071dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fd07 	bl	8007bde <USBD_ClrFeature>
          break;
 80071d0:	e004      	b.n	80071dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fd5e 	bl	8007c96 <USBD_CtlError>
          break;
 80071da:	bf00      	nop
      }
      break;
 80071dc:	e004      	b.n	80071e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fd58 	bl	8007c96 <USBD_CtlError>
      break;
 80071e6:	bf00      	nop
  }

  return ret;
 80071e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop

080071f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071fe:	2300      	movs	r3, #0
 8007200:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800720a:	2b40      	cmp	r3, #64	; 0x40
 800720c:	d005      	beq.n	800721a <USBD_StdItfReq+0x26>
 800720e:	2b40      	cmp	r3, #64	; 0x40
 8007210:	d852      	bhi.n	80072b8 <USBD_StdItfReq+0xc4>
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <USBD_StdItfReq+0x26>
 8007216:	2b20      	cmp	r3, #32
 8007218:	d14e      	bne.n	80072b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007220:	b2db      	uxtb	r3, r3
 8007222:	3b01      	subs	r3, #1
 8007224:	2b02      	cmp	r3, #2
 8007226:	d840      	bhi.n	80072aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	889b      	ldrh	r3, [r3, #4]
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b01      	cmp	r3, #1
 8007230:	d836      	bhi.n	80072a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	889b      	ldrh	r3, [r3, #4]
 8007236:	b2db      	uxtb	r3, r3
 8007238:	4619      	mov	r1, r3
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f7ff fed9 	bl	8006ff2 <USBD_CoreFindIF>
 8007240:	4603      	mov	r3, r0
 8007242:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007244:	7bbb      	ldrb	r3, [r7, #14]
 8007246:	2bff      	cmp	r3, #255	; 0xff
 8007248:	d01d      	beq.n	8007286 <USBD_StdItfReq+0x92>
 800724a:	7bbb      	ldrb	r3, [r7, #14]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d11a      	bne.n	8007286 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007250:	7bba      	ldrb	r2, [r7, #14]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	32ae      	adds	r2, #174	; 0xae
 8007256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00f      	beq.n	8007280 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007260:	7bba      	ldrb	r2, [r7, #14]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007268:	7bba      	ldrb	r2, [r7, #14]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	32ae      	adds	r2, #174	; 0xae
 800726e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	4798      	blx	r3
 800727a:	4603      	mov	r3, r0
 800727c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800727e:	e004      	b.n	800728a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007280:	2303      	movs	r3, #3
 8007282:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007284:	e001      	b.n	800728a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007286:	2303      	movs	r3, #3
 8007288:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	88db      	ldrh	r3, [r3, #6]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d110      	bne.n	80072b4 <USBD_StdItfReq+0xc0>
 8007292:	7bfb      	ldrb	r3, [r7, #15]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10d      	bne.n	80072b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fdc7 	bl	8007e2c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800729e:	e009      	b.n	80072b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fcf7 	bl	8007c96 <USBD_CtlError>
          break;
 80072a8:	e004      	b.n	80072b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fcf2 	bl	8007c96 <USBD_CtlError>
          break;
 80072b2:	e000      	b.n	80072b6 <USBD_StdItfReq+0xc2>
          break;
 80072b4:	bf00      	nop
      }
      break;
 80072b6:	e004      	b.n	80072c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fceb 	bl	8007c96 <USBD_CtlError>
      break;
 80072c0:	bf00      	nop
  }

  return ret;
 80072c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	889b      	ldrh	r3, [r3, #4]
 80072de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072e8:	2b40      	cmp	r3, #64	; 0x40
 80072ea:	d007      	beq.n	80072fc <USBD_StdEPReq+0x30>
 80072ec:	2b40      	cmp	r3, #64	; 0x40
 80072ee:	f200 817f 	bhi.w	80075f0 <USBD_StdEPReq+0x324>
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d02a      	beq.n	800734c <USBD_StdEPReq+0x80>
 80072f6:	2b20      	cmp	r3, #32
 80072f8:	f040 817a 	bne.w	80075f0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80072fc:	7bbb      	ldrb	r3, [r7, #14]
 80072fe:	4619      	mov	r1, r3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7ff fe83 	bl	800700c <USBD_CoreFindEP>
 8007306:	4603      	mov	r3, r0
 8007308:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800730a:	7b7b      	ldrb	r3, [r7, #13]
 800730c:	2bff      	cmp	r3, #255	; 0xff
 800730e:	f000 8174 	beq.w	80075fa <USBD_StdEPReq+0x32e>
 8007312:	7b7b      	ldrb	r3, [r7, #13]
 8007314:	2b00      	cmp	r3, #0
 8007316:	f040 8170 	bne.w	80075fa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800731a:	7b7a      	ldrb	r2, [r7, #13]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007322:	7b7a      	ldrb	r2, [r7, #13]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	32ae      	adds	r2, #174	; 0xae
 8007328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 8163 	beq.w	80075fa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007334:	7b7a      	ldrb	r2, [r7, #13]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	32ae      	adds	r2, #174	; 0xae
 800733a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	6839      	ldr	r1, [r7, #0]
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	4798      	blx	r3
 8007346:	4603      	mov	r3, r0
 8007348:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800734a:	e156      	b.n	80075fa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	785b      	ldrb	r3, [r3, #1]
 8007350:	2b03      	cmp	r3, #3
 8007352:	d008      	beq.n	8007366 <USBD_StdEPReq+0x9a>
 8007354:	2b03      	cmp	r3, #3
 8007356:	f300 8145 	bgt.w	80075e4 <USBD_StdEPReq+0x318>
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 809b 	beq.w	8007496 <USBD_StdEPReq+0x1ca>
 8007360:	2b01      	cmp	r3, #1
 8007362:	d03c      	beq.n	80073de <USBD_StdEPReq+0x112>
 8007364:	e13e      	b.n	80075e4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b02      	cmp	r3, #2
 8007370:	d002      	beq.n	8007378 <USBD_StdEPReq+0xac>
 8007372:	2b03      	cmp	r3, #3
 8007374:	d016      	beq.n	80073a4 <USBD_StdEPReq+0xd8>
 8007376:	e02c      	b.n	80073d2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007378:	7bbb      	ldrb	r3, [r7, #14]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00d      	beq.n	800739a <USBD_StdEPReq+0xce>
 800737e:	7bbb      	ldrb	r3, [r7, #14]
 8007380:	2b80      	cmp	r3, #128	; 0x80
 8007382:	d00a      	beq.n	800739a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007384:	7bbb      	ldrb	r3, [r7, #14]
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f001 f97b 	bl	8008684 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800738e:	2180      	movs	r1, #128	; 0x80
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f001 f977 	bl	8008684 <USBD_LL_StallEP>
 8007396:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007398:	e020      	b.n	80073dc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800739a:	6839      	ldr	r1, [r7, #0]
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fc7a 	bl	8007c96 <USBD_CtlError>
              break;
 80073a2:	e01b      	b.n	80073dc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	885b      	ldrh	r3, [r3, #2]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10e      	bne.n	80073ca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073ac:	7bbb      	ldrb	r3, [r7, #14]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00b      	beq.n	80073ca <USBD_StdEPReq+0xfe>
 80073b2:	7bbb      	ldrb	r3, [r7, #14]
 80073b4:	2b80      	cmp	r3, #128	; 0x80
 80073b6:	d008      	beq.n	80073ca <USBD_StdEPReq+0xfe>
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	88db      	ldrh	r3, [r3, #6]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d104      	bne.n	80073ca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80073c0:	7bbb      	ldrb	r3, [r7, #14]
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f001 f95d 	bl	8008684 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fd2e 	bl	8007e2c <USBD_CtlSendStatus>

              break;
 80073d0:	e004      	b.n	80073dc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80073d2:	6839      	ldr	r1, [r7, #0]
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fc5e 	bl	8007c96 <USBD_CtlError>
              break;
 80073da:	bf00      	nop
          }
          break;
 80073dc:	e107      	b.n	80075ee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d002      	beq.n	80073f0 <USBD_StdEPReq+0x124>
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	d016      	beq.n	800741c <USBD_StdEPReq+0x150>
 80073ee:	e04b      	b.n	8007488 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073f0:	7bbb      	ldrb	r3, [r7, #14]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00d      	beq.n	8007412 <USBD_StdEPReq+0x146>
 80073f6:	7bbb      	ldrb	r3, [r7, #14]
 80073f8:	2b80      	cmp	r3, #128	; 0x80
 80073fa:	d00a      	beq.n	8007412 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073fc:	7bbb      	ldrb	r3, [r7, #14]
 80073fe:	4619      	mov	r1, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f001 f93f 	bl	8008684 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007406:	2180      	movs	r1, #128	; 0x80
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f001 f93b 	bl	8008684 <USBD_LL_StallEP>
 800740e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007410:	e040      	b.n	8007494 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007412:	6839      	ldr	r1, [r7, #0]
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fc3e 	bl	8007c96 <USBD_CtlError>
              break;
 800741a:	e03b      	b.n	8007494 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	885b      	ldrh	r3, [r3, #2]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d136      	bne.n	8007492 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800742a:	2b00      	cmp	r3, #0
 800742c:	d004      	beq.n	8007438 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800742e:	7bbb      	ldrb	r3, [r7, #14]
 8007430:	4619      	mov	r1, r3
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f001 f945 	bl	80086c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fcf7 	bl	8007e2c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	4619      	mov	r1, r3
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7ff fde2 	bl	800700c <USBD_CoreFindEP>
 8007448:	4603      	mov	r3, r0
 800744a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800744c:	7b7b      	ldrb	r3, [r7, #13]
 800744e:	2bff      	cmp	r3, #255	; 0xff
 8007450:	d01f      	beq.n	8007492 <USBD_StdEPReq+0x1c6>
 8007452:	7b7b      	ldrb	r3, [r7, #13]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d11c      	bne.n	8007492 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007458:	7b7a      	ldrb	r2, [r7, #13]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007460:	7b7a      	ldrb	r2, [r7, #13]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	32ae      	adds	r2, #174	; 0xae
 8007466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d010      	beq.n	8007492 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007470:	7b7a      	ldrb	r2, [r7, #13]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	32ae      	adds	r2, #174	; 0xae
 8007476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	6839      	ldr	r1, [r7, #0]
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	4798      	blx	r3
 8007482:	4603      	mov	r3, r0
 8007484:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007486:	e004      	b.n	8007492 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007488:	6839      	ldr	r1, [r7, #0]
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fc03 	bl	8007c96 <USBD_CtlError>
              break;
 8007490:	e000      	b.n	8007494 <USBD_StdEPReq+0x1c8>
              break;
 8007492:	bf00      	nop
          }
          break;
 8007494:	e0ab      	b.n	80075ee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d002      	beq.n	80074a8 <USBD_StdEPReq+0x1dc>
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d032      	beq.n	800750c <USBD_StdEPReq+0x240>
 80074a6:	e097      	b.n	80075d8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d007      	beq.n	80074be <USBD_StdEPReq+0x1f2>
 80074ae:	7bbb      	ldrb	r3, [r7, #14]
 80074b0:	2b80      	cmp	r3, #128	; 0x80
 80074b2:	d004      	beq.n	80074be <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80074b4:	6839      	ldr	r1, [r7, #0]
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fbed 	bl	8007c96 <USBD_CtlError>
                break;
 80074bc:	e091      	b.n	80075e2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	da0b      	bge.n	80074de <USBD_StdEPReq+0x212>
 80074c6:	7bbb      	ldrb	r3, [r7, #14]
 80074c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074cc:	4613      	mov	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	3310      	adds	r3, #16
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	4413      	add	r3, r2
 80074da:	3304      	adds	r3, #4
 80074dc:	e00b      	b.n	80074f6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074de:	7bbb      	ldrb	r3, [r7, #14]
 80074e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074e4:	4613      	mov	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	4413      	add	r3, r2
 80074f4:	3304      	adds	r3, #4
 80074f6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2200      	movs	r2, #0
 80074fc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2202      	movs	r2, #2
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fc37 	bl	8007d78 <USBD_CtlSendData>
              break;
 800750a:	e06a      	b.n	80075e2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800750c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007510:	2b00      	cmp	r3, #0
 8007512:	da11      	bge.n	8007538 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007514:	7bbb      	ldrb	r3, [r7, #14]
 8007516:	f003 020f 	and.w	r2, r3, #15
 800751a:	6879      	ldr	r1, [r7, #4]
 800751c:	4613      	mov	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	440b      	add	r3, r1
 8007526:	3324      	adds	r3, #36	; 0x24
 8007528:	881b      	ldrh	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d117      	bne.n	800755e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800752e:	6839      	ldr	r1, [r7, #0]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fbb0 	bl	8007c96 <USBD_CtlError>
                  break;
 8007536:	e054      	b.n	80075e2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007538:	7bbb      	ldrb	r3, [r7, #14]
 800753a:	f003 020f 	and.w	r2, r3, #15
 800753e:	6879      	ldr	r1, [r7, #4]
 8007540:	4613      	mov	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	440b      	add	r3, r1
 800754a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d104      	bne.n	800755e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fb9d 	bl	8007c96 <USBD_CtlError>
                  break;
 800755c:	e041      	b.n	80075e2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800755e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007562:	2b00      	cmp	r3, #0
 8007564:	da0b      	bge.n	800757e <USBD_StdEPReq+0x2b2>
 8007566:	7bbb      	ldrb	r3, [r7, #14]
 8007568:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800756c:	4613      	mov	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	3310      	adds	r3, #16
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	4413      	add	r3, r2
 800757a:	3304      	adds	r3, #4
 800757c:	e00b      	b.n	8007596 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800757e:	7bbb      	ldrb	r3, [r7, #14]
 8007580:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007584:	4613      	mov	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	4413      	add	r3, r2
 8007594:	3304      	adds	r3, #4
 8007596:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007598:	7bbb      	ldrb	r3, [r7, #14]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d002      	beq.n	80075a4 <USBD_StdEPReq+0x2d8>
 800759e:	7bbb      	ldrb	r3, [r7, #14]
 80075a0:	2b80      	cmp	r3, #128	; 0x80
 80075a2:	d103      	bne.n	80075ac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	2200      	movs	r2, #0
 80075a8:	601a      	str	r2, [r3, #0]
 80075aa:	e00e      	b.n	80075ca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80075ac:	7bbb      	ldrb	r3, [r7, #14]
 80075ae:	4619      	mov	r1, r3
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f001 f8a5 	bl	8008700 <USBD_LL_IsStallEP>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d003      	beq.n	80075c4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2201      	movs	r2, #1
 80075c0:	601a      	str	r2, [r3, #0]
 80075c2:	e002      	b.n	80075ca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	2200      	movs	r2, #0
 80075c8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	2202      	movs	r2, #2
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fbd1 	bl	8007d78 <USBD_CtlSendData>
              break;
 80075d6:	e004      	b.n	80075e2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fb5b 	bl	8007c96 <USBD_CtlError>
              break;
 80075e0:	bf00      	nop
          }
          break;
 80075e2:	e004      	b.n	80075ee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fb55 	bl	8007c96 <USBD_CtlError>
          break;
 80075ec:	bf00      	nop
      }
      break;
 80075ee:	e005      	b.n	80075fc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fb4f 	bl	8007c96 <USBD_CtlError>
      break;
 80075f8:	e000      	b.n	80075fc <USBD_StdEPReq+0x330>
      break;
 80075fa:	bf00      	nop
  }

  return ret;
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
	...

08007608 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007612:	2300      	movs	r3, #0
 8007614:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007616:	2300      	movs	r3, #0
 8007618:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800761a:	2300      	movs	r3, #0
 800761c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	885b      	ldrh	r3, [r3, #2]
 8007622:	0a1b      	lsrs	r3, r3, #8
 8007624:	b29b      	uxth	r3, r3
 8007626:	3b01      	subs	r3, #1
 8007628:	2b06      	cmp	r3, #6
 800762a:	f200 8128 	bhi.w	800787e <USBD_GetDescriptor+0x276>
 800762e:	a201      	add	r2, pc, #4	; (adr r2, 8007634 <USBD_GetDescriptor+0x2c>)
 8007630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007634:	08007651 	.word	0x08007651
 8007638:	08007669 	.word	0x08007669
 800763c:	080076a9 	.word	0x080076a9
 8007640:	0800787f 	.word	0x0800787f
 8007644:	0800787f 	.word	0x0800787f
 8007648:	0800781f 	.word	0x0800781f
 800764c:	0800784b 	.word	0x0800784b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	7c12      	ldrb	r2, [r2, #16]
 800765c:	f107 0108 	add.w	r1, r7, #8
 8007660:	4610      	mov	r0, r2
 8007662:	4798      	blx	r3
 8007664:	60f8      	str	r0, [r7, #12]
      break;
 8007666:	e112      	b.n	800788e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	7c1b      	ldrb	r3, [r3, #16]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10d      	bne.n	800768c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007678:	f107 0208 	add.w	r2, r7, #8
 800767c:	4610      	mov	r0, r2
 800767e:	4798      	blx	r3
 8007680:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3301      	adds	r3, #1
 8007686:	2202      	movs	r2, #2
 8007688:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800768a:	e100      	b.n	800788e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007694:	f107 0208 	add.w	r2, r7, #8
 8007698:	4610      	mov	r0, r2
 800769a:	4798      	blx	r3
 800769c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	3301      	adds	r3, #1
 80076a2:	2202      	movs	r2, #2
 80076a4:	701a      	strb	r2, [r3, #0]
      break;
 80076a6:	e0f2      	b.n	800788e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	885b      	ldrh	r3, [r3, #2]
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b05      	cmp	r3, #5
 80076b0:	f200 80ac 	bhi.w	800780c <USBD_GetDescriptor+0x204>
 80076b4:	a201      	add	r2, pc, #4	; (adr r2, 80076bc <USBD_GetDescriptor+0xb4>)
 80076b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ba:	bf00      	nop
 80076bc:	080076d5 	.word	0x080076d5
 80076c0:	08007709 	.word	0x08007709
 80076c4:	0800773d 	.word	0x0800773d
 80076c8:	08007771 	.word	0x08007771
 80076cc:	080077a5 	.word	0x080077a5
 80076d0:	080077d9 	.word	0x080077d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00b      	beq.n	80076f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	7c12      	ldrb	r2, [r2, #16]
 80076ec:	f107 0108 	add.w	r1, r7, #8
 80076f0:	4610      	mov	r0, r2
 80076f2:	4798      	blx	r3
 80076f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076f6:	e091      	b.n	800781c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 facb 	bl	8007c96 <USBD_CtlError>
            err++;
 8007700:	7afb      	ldrb	r3, [r7, #11]
 8007702:	3301      	adds	r3, #1
 8007704:	72fb      	strb	r3, [r7, #11]
          break;
 8007706:	e089      	b.n	800781c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00b      	beq.n	800772c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	7c12      	ldrb	r2, [r2, #16]
 8007720:	f107 0108 	add.w	r1, r7, #8
 8007724:	4610      	mov	r0, r2
 8007726:	4798      	blx	r3
 8007728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800772a:	e077      	b.n	800781c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fab1 	bl	8007c96 <USBD_CtlError>
            err++;
 8007734:	7afb      	ldrb	r3, [r7, #11]
 8007736:	3301      	adds	r3, #1
 8007738:	72fb      	strb	r3, [r7, #11]
          break;
 800773a:	e06f      	b.n	800781c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00b      	beq.n	8007760 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	7c12      	ldrb	r2, [r2, #16]
 8007754:	f107 0108 	add.w	r1, r7, #8
 8007758:	4610      	mov	r0, r2
 800775a:	4798      	blx	r3
 800775c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800775e:	e05d      	b.n	800781c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fa97 	bl	8007c96 <USBD_CtlError>
            err++;
 8007768:	7afb      	ldrb	r3, [r7, #11]
 800776a:	3301      	adds	r3, #1
 800776c:	72fb      	strb	r3, [r7, #11]
          break;
 800776e:	e055      	b.n	800781c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00b      	beq.n	8007794 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	7c12      	ldrb	r2, [r2, #16]
 8007788:	f107 0108 	add.w	r1, r7, #8
 800778c:	4610      	mov	r0, r2
 800778e:	4798      	blx	r3
 8007790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007792:	e043      	b.n	800781c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fa7d 	bl	8007c96 <USBD_CtlError>
            err++;
 800779c:	7afb      	ldrb	r3, [r7, #11]
 800779e:	3301      	adds	r3, #1
 80077a0:	72fb      	strb	r3, [r7, #11]
          break;
 80077a2:	e03b      	b.n	800781c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00b      	beq.n	80077c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077b6:	695b      	ldr	r3, [r3, #20]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	7c12      	ldrb	r2, [r2, #16]
 80077bc:	f107 0108 	add.w	r1, r7, #8
 80077c0:	4610      	mov	r0, r2
 80077c2:	4798      	blx	r3
 80077c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077c6:	e029      	b.n	800781c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fa63 	bl	8007c96 <USBD_CtlError>
            err++;
 80077d0:	7afb      	ldrb	r3, [r7, #11]
 80077d2:	3301      	adds	r3, #1
 80077d4:	72fb      	strb	r3, [r7, #11]
          break;
 80077d6:	e021      	b.n	800781c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00b      	beq.n	80077fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	7c12      	ldrb	r2, [r2, #16]
 80077f0:	f107 0108 	add.w	r1, r7, #8
 80077f4:	4610      	mov	r0, r2
 80077f6:	4798      	blx	r3
 80077f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077fa:	e00f      	b.n	800781c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fa49 	bl	8007c96 <USBD_CtlError>
            err++;
 8007804:	7afb      	ldrb	r3, [r7, #11]
 8007806:	3301      	adds	r3, #1
 8007808:	72fb      	strb	r3, [r7, #11]
          break;
 800780a:	e007      	b.n	800781c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fa41 	bl	8007c96 <USBD_CtlError>
          err++;
 8007814:	7afb      	ldrb	r3, [r7, #11]
 8007816:	3301      	adds	r3, #1
 8007818:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800781a:	bf00      	nop
      }
      break;
 800781c:	e037      	b.n	800788e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	7c1b      	ldrb	r3, [r3, #16]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d109      	bne.n	800783a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800782c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800782e:	f107 0208 	add.w	r2, r7, #8
 8007832:	4610      	mov	r0, r2
 8007834:	4798      	blx	r3
 8007836:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007838:	e029      	b.n	800788e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fa2a 	bl	8007c96 <USBD_CtlError>
        err++;
 8007842:	7afb      	ldrb	r3, [r7, #11]
 8007844:	3301      	adds	r3, #1
 8007846:	72fb      	strb	r3, [r7, #11]
      break;
 8007848:	e021      	b.n	800788e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	7c1b      	ldrb	r3, [r3, #16]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10d      	bne.n	800786e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785a:	f107 0208 	add.w	r2, r7, #8
 800785e:	4610      	mov	r0, r2
 8007860:	4798      	blx	r3
 8007862:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	3301      	adds	r3, #1
 8007868:	2207      	movs	r2, #7
 800786a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800786c:	e00f      	b.n	800788e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fa10 	bl	8007c96 <USBD_CtlError>
        err++;
 8007876:	7afb      	ldrb	r3, [r7, #11]
 8007878:	3301      	adds	r3, #1
 800787a:	72fb      	strb	r3, [r7, #11]
      break;
 800787c:	e007      	b.n	800788e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fa08 	bl	8007c96 <USBD_CtlError>
      err++;
 8007886:	7afb      	ldrb	r3, [r7, #11]
 8007888:	3301      	adds	r3, #1
 800788a:	72fb      	strb	r3, [r7, #11]
      break;
 800788c:	bf00      	nop
  }

  if (err != 0U)
 800788e:	7afb      	ldrb	r3, [r7, #11]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d11e      	bne.n	80078d2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	88db      	ldrh	r3, [r3, #6]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d016      	beq.n	80078ca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800789c:	893b      	ldrh	r3, [r7, #8]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00e      	beq.n	80078c0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	88da      	ldrh	r2, [r3, #6]
 80078a6:	893b      	ldrh	r3, [r7, #8]
 80078a8:	4293      	cmp	r3, r2
 80078aa:	bf28      	it	cs
 80078ac:	4613      	movcs	r3, r2
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078b2:	893b      	ldrh	r3, [r7, #8]
 80078b4:	461a      	mov	r2, r3
 80078b6:	68f9      	ldr	r1, [r7, #12]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fa5d 	bl	8007d78 <USBD_CtlSendData>
 80078be:	e009      	b.n	80078d4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f9e7 	bl	8007c96 <USBD_CtlError>
 80078c8:	e004      	b.n	80078d4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 faae 	bl	8007e2c <USBD_CtlSendStatus>
 80078d0:	e000      	b.n	80078d4 <USBD_GetDescriptor+0x2cc>
    return;
 80078d2:	bf00      	nop
  }
}
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop

080078dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	889b      	ldrh	r3, [r3, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d131      	bne.n	8007952 <USBD_SetAddress+0x76>
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	88db      	ldrh	r3, [r3, #6]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d12d      	bne.n	8007952 <USBD_SetAddress+0x76>
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	885b      	ldrh	r3, [r3, #2]
 80078fa:	2b7f      	cmp	r3, #127	; 0x7f
 80078fc:	d829      	bhi.n	8007952 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	885b      	ldrh	r3, [r3, #2]
 8007902:	b2db      	uxtb	r3, r3
 8007904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007908:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b03      	cmp	r3, #3
 8007914:	d104      	bne.n	8007920 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f9bc 	bl	8007c96 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800791e:	e01d      	b.n	800795c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	7bfa      	ldrb	r2, [r7, #15]
 8007924:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007928:	7bfb      	ldrb	r3, [r7, #15]
 800792a:	4619      	mov	r1, r3
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 ff13 	bl	8008758 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fa7a 	bl	8007e2c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007938:	7bfb      	ldrb	r3, [r7, #15]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d004      	beq.n	8007948 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2202      	movs	r2, #2
 8007942:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007946:	e009      	b.n	800795c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007950:	e004      	b.n	800795c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f99e 	bl	8007c96 <USBD_CtlError>
  }
}
 800795a:	bf00      	nop
 800795c:	bf00      	nop
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	885b      	ldrh	r3, [r3, #2]
 8007976:	b2da      	uxtb	r2, r3
 8007978:	4b4e      	ldr	r3, [pc, #312]	; (8007ab4 <USBD_SetConfig+0x150>)
 800797a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800797c:	4b4d      	ldr	r3, [pc, #308]	; (8007ab4 <USBD_SetConfig+0x150>)
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d905      	bls.n	8007990 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007984:	6839      	ldr	r1, [r7, #0]
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f985 	bl	8007c96 <USBD_CtlError>
    return USBD_FAIL;
 800798c:	2303      	movs	r3, #3
 800798e:	e08c      	b.n	8007aaa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007996:	b2db      	uxtb	r3, r3
 8007998:	2b02      	cmp	r3, #2
 800799a:	d002      	beq.n	80079a2 <USBD_SetConfig+0x3e>
 800799c:	2b03      	cmp	r3, #3
 800799e:	d029      	beq.n	80079f4 <USBD_SetConfig+0x90>
 80079a0:	e075      	b.n	8007a8e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80079a2:	4b44      	ldr	r3, [pc, #272]	; (8007ab4 <USBD_SetConfig+0x150>)
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d020      	beq.n	80079ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80079aa:	4b42      	ldr	r3, [pc, #264]	; (8007ab4 <USBD_SetConfig+0x150>)
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	461a      	mov	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079b4:	4b3f      	ldr	r3, [pc, #252]	; (8007ab4 <USBD_SetConfig+0x150>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	4619      	mov	r1, r3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7fe ffe7 	bl	800698e <USBD_SetClassConfig>
 80079c0:	4603      	mov	r3, r0
 80079c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d008      	beq.n	80079dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80079ca:	6839      	ldr	r1, [r7, #0]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 f962 	bl	8007c96 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2202      	movs	r2, #2
 80079d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80079da:	e065      	b.n	8007aa8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fa25 	bl	8007e2c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2203      	movs	r2, #3
 80079e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80079ea:	e05d      	b.n	8007aa8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fa1d 	bl	8007e2c <USBD_CtlSendStatus>
      break;
 80079f2:	e059      	b.n	8007aa8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80079f4:	4b2f      	ldr	r3, [pc, #188]	; (8007ab4 <USBD_SetConfig+0x150>)
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d112      	bne.n	8007a22 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2202      	movs	r2, #2
 8007a00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007a04:	4b2b      	ldr	r3, [pc, #172]	; (8007ab4 <USBD_SetConfig+0x150>)
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a0e:	4b29      	ldr	r3, [pc, #164]	; (8007ab4 <USBD_SetConfig+0x150>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7fe ffd6 	bl	80069c6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fa06 	bl	8007e2c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a20:	e042      	b.n	8007aa8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007a22:	4b24      	ldr	r3, [pc, #144]	; (8007ab4 <USBD_SetConfig+0x150>)
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d02a      	beq.n	8007a86 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	4619      	mov	r1, r3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f7fe ffc4 	bl	80069c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a3e:	4b1d      	ldr	r3, [pc, #116]	; (8007ab4 <USBD_SetConfig+0x150>)
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	461a      	mov	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a48:	4b1a      	ldr	r3, [pc, #104]	; (8007ab4 <USBD_SetConfig+0x150>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7fe ff9d 	bl	800698e <USBD_SetClassConfig>
 8007a54:	4603      	mov	r3, r0
 8007a56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00f      	beq.n	8007a7e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007a5e:	6839      	ldr	r1, [r7, #0]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f918 	bl	8007c96 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f7fe ffa9 	bl	80069c6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2202      	movs	r2, #2
 8007a78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a7c:	e014      	b.n	8007aa8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f9d4 	bl	8007e2c <USBD_CtlSendStatus>
      break;
 8007a84:	e010      	b.n	8007aa8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f9d0 	bl	8007e2c <USBD_CtlSendStatus>
      break;
 8007a8c:	e00c      	b.n	8007aa8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f900 	bl	8007c96 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a96:	4b07      	ldr	r3, [pc, #28]	; (8007ab4 <USBD_SetConfig+0x150>)
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7fe ff92 	bl	80069c6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa6:	bf00      	nop
  }

  return ret;
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20000274 	.word	0x20000274

08007ab8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	88db      	ldrh	r3, [r3, #6]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d004      	beq.n	8007ad4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f8e2 	bl	8007c96 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007ad2:	e023      	b.n	8007b1c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	dc02      	bgt.n	8007ae6 <USBD_GetConfig+0x2e>
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	dc03      	bgt.n	8007aec <USBD_GetConfig+0x34>
 8007ae4:	e015      	b.n	8007b12 <USBD_GetConfig+0x5a>
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d00b      	beq.n	8007b02 <USBD_GetConfig+0x4a>
 8007aea:	e012      	b.n	8007b12 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	3308      	adds	r3, #8
 8007af6:	2201      	movs	r2, #1
 8007af8:	4619      	mov	r1, r3
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f93c 	bl	8007d78 <USBD_CtlSendData>
        break;
 8007b00:	e00c      	b.n	8007b1c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	3304      	adds	r3, #4
 8007b06:	2201      	movs	r2, #1
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f934 	bl	8007d78 <USBD_CtlSendData>
        break;
 8007b10:	e004      	b.n	8007b1c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007b12:	6839      	ldr	r1, [r7, #0]
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f8be 	bl	8007c96 <USBD_CtlError>
        break;
 8007b1a:	bf00      	nop
}
 8007b1c:	bf00      	nop
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	3b01      	subs	r3, #1
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d81e      	bhi.n	8007b7a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	88db      	ldrh	r3, [r3, #6]
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d004      	beq.n	8007b4e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b44:	6839      	ldr	r1, [r7, #0]
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f8a5 	bl	8007c96 <USBD_CtlError>
        break;
 8007b4c:	e01a      	b.n	8007b84 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d005      	beq.n	8007b6a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	f043 0202 	orr.w	r2, r3, #2
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	330c      	adds	r3, #12
 8007b6e:	2202      	movs	r2, #2
 8007b70:	4619      	mov	r1, r3
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f900 	bl	8007d78 <USBD_CtlSendData>
      break;
 8007b78:	e004      	b.n	8007b84 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f88a 	bl	8007c96 <USBD_CtlError>
      break;
 8007b82:	bf00      	nop
  }
}
 8007b84:	bf00      	nop
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	885b      	ldrh	r3, [r3, #2]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d107      	bne.n	8007bae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f940 	bl	8007e2c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007bac:	e013      	b.n	8007bd6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	885b      	ldrh	r3, [r3, #2]
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d10b      	bne.n	8007bce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	889b      	ldrh	r3, [r3, #4]
 8007bba:	0a1b      	lsrs	r3, r3, #8
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	b2da      	uxtb	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f930 	bl	8007e2c <USBD_CtlSendStatus>
}
 8007bcc:	e003      	b.n	8007bd6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f860 	bl	8007c96 <USBD_CtlError>
}
 8007bd6:	bf00      	nop
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b082      	sub	sp, #8
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
 8007be6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d80b      	bhi.n	8007c0e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	885b      	ldrh	r3, [r3, #2]
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d10c      	bne.n	8007c18 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f910 	bl	8007e2c <USBD_CtlSendStatus>
      }
      break;
 8007c0c:	e004      	b.n	8007c18 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f840 	bl	8007c96 <USBD_CtlError>
      break;
 8007c16:	e000      	b.n	8007c1a <USBD_ClrFeature+0x3c>
      break;
 8007c18:	bf00      	nop
  }
}
 8007c1a:	bf00      	nop
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	781a      	ldrb	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	781a      	ldrb	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f7ff fa41 	bl	80070d4 <SWAPBYTE>
 8007c52:	4603      	mov	r3, r0
 8007c54:	461a      	mov	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	3301      	adds	r3, #1
 8007c64:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f7ff fa34 	bl	80070d4 <SWAPBYTE>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	461a      	mov	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3301      	adds	r3, #1
 8007c78:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f7ff fa27 	bl	80070d4 <SWAPBYTE>
 8007c86:	4603      	mov	r3, r0
 8007c88:	461a      	mov	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	80da      	strh	r2, [r3, #6]
}
 8007c8e:	bf00      	nop
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b082      	sub	sp, #8
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
 8007c9e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ca0:	2180      	movs	r1, #128	; 0x80
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fcee 	bl	8008684 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007ca8:	2100      	movs	r1, #0
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fcea 	bl	8008684 <USBD_LL_StallEP>
}
 8007cb0:	bf00      	nop
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d036      	beq.n	8007d3c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007cd2:	6938      	ldr	r0, [r7, #16]
 8007cd4:	f000 f836 	bl	8007d44 <USBD_GetLen>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	3301      	adds	r3, #1
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	005b      	lsls	r3, r3, #1
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	4413      	add	r3, r2
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	7812      	ldrb	r2, [r2, #0]
 8007cf0:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cf2:	7dfb      	ldrb	r3, [r7, #23]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007cf8:	7dfb      	ldrb	r3, [r7, #23]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	2203      	movs	r2, #3
 8007d00:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d02:	7dfb      	ldrb	r3, [r7, #23]
 8007d04:	3301      	adds	r3, #1
 8007d06:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007d08:	e013      	b.n	8007d32 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007d0a:	7dfb      	ldrb	r3, [r7, #23]
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	4413      	add	r3, r2
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	7812      	ldrb	r2, [r2, #0]
 8007d14:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	613b      	str	r3, [r7, #16]
    idx++;
 8007d1c:	7dfb      	ldrb	r3, [r7, #23]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	4413      	add	r3, r2
 8007d28:	2200      	movs	r2, #0
 8007d2a:	701a      	strb	r2, [r3, #0]
    idx++;
 8007d2c:	7dfb      	ldrb	r3, [r7, #23]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1e7      	bne.n	8007d0a <USBD_GetString+0x52>
 8007d3a:	e000      	b.n	8007d3e <USBD_GetString+0x86>
    return;
 8007d3c:	bf00      	nop
  }
}
 8007d3e:	3718      	adds	r7, #24
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007d54:	e005      	b.n	8007d62 <USBD_GetLen+0x1e>
  {
    len++;
 8007d56:	7bfb      	ldrb	r3, [r7, #15]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1f5      	bne.n	8007d56 <USBD_GetLen+0x12>
  }

  return len;
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3714      	adds	r7, #20
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2202      	movs	r2, #2
 8007d88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f000 fcf9 	bl	8008796 <USBD_LL_Transmit>

  return USBD_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b084      	sub	sp, #16
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	60f8      	str	r0, [r7, #12]
 8007db6:	60b9      	str	r1, [r7, #8]
 8007db8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 fce8 	bl	8008796 <USBD_LL_Transmit>

  return USBD_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2203      	movs	r2, #3
 8007de0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	2100      	movs	r1, #0
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f000 fcec 	bl	80087d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b084      	sub	sp, #16
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	60f8      	str	r0, [r7, #12]
 8007e12:	60b9      	str	r1, [r7, #8]
 8007e14:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f000 fcdb 	bl	80087d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2204      	movs	r2, #4
 8007e38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	2200      	movs	r2, #0
 8007e40:	2100      	movs	r1, #0
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fca7 	bl	8008796 <USBD_LL_Transmit>

  return USBD_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b082      	sub	sp, #8
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2205      	movs	r2, #5
 8007e5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e62:	2300      	movs	r3, #0
 8007e64:	2200      	movs	r2, #0
 8007e66:	2100      	movs	r1, #0
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fcb5 	bl	80087d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	4912      	ldr	r1, [pc, #72]	; (8007ec8 <MX_USB_DEVICE_Init+0x50>)
 8007e80:	4812      	ldr	r0, [pc, #72]	; (8007ecc <MX_USB_DEVICE_Init+0x54>)
 8007e82:	f7fe fd07 	bl	8006894 <USBD_Init>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d001      	beq.n	8007e90 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e8c:	f7f8 febc 	bl	8000c08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e90:	490f      	ldr	r1, [pc, #60]	; (8007ed0 <MX_USB_DEVICE_Init+0x58>)
 8007e92:	480e      	ldr	r0, [pc, #56]	; (8007ecc <MX_USB_DEVICE_Init+0x54>)
 8007e94:	f7fe fd2e 	bl	80068f4 <USBD_RegisterClass>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d001      	beq.n	8007ea2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e9e:	f7f8 feb3 	bl	8000c08 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007ea2:	490c      	ldr	r1, [pc, #48]	; (8007ed4 <MX_USB_DEVICE_Init+0x5c>)
 8007ea4:	4809      	ldr	r0, [pc, #36]	; (8007ecc <MX_USB_DEVICE_Init+0x54>)
 8007ea6:	f7fe fc1f 	bl	80066e8 <USBD_CDC_RegisterInterface>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d001      	beq.n	8007eb4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007eb0:	f7f8 feaa 	bl	8000c08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007eb4:	4805      	ldr	r0, [pc, #20]	; (8007ecc <MX_USB_DEVICE_Init+0x54>)
 8007eb6:	f7fe fd53 	bl	8006960 <USBD_Start>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007ec0:	f7f8 fea2 	bl	8000c08 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ec4:	bf00      	nop
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	200000ac 	.word	0x200000ac
 8007ecc:	20000278 	.word	0x20000278
 8007ed0:	20000018 	.word	0x20000018
 8007ed4:	20000098 	.word	0x20000098

08007ed8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007edc:	2200      	movs	r2, #0
 8007ede:	4905      	ldr	r1, [pc, #20]	; (8007ef4 <CDC_Init_FS+0x1c>)
 8007ee0:	4805      	ldr	r0, [pc, #20]	; (8007ef8 <CDC_Init_FS+0x20>)
 8007ee2:	f7fe fc1b 	bl	800671c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007ee6:	4905      	ldr	r1, [pc, #20]	; (8007efc <CDC_Init_FS+0x24>)
 8007ee8:	4803      	ldr	r0, [pc, #12]	; (8007ef8 <CDC_Init_FS+0x20>)
 8007eea:	f7fe fc39 	bl	8006760 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007eee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	20000d54 	.word	0x20000d54
 8007ef8:	20000278 	.word	0x20000278
 8007efc:	20000554 	.word	0x20000554

08007f00 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007f00:	b480      	push	{r7}
 8007f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007f04:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	4603      	mov	r3, r0
 8007f18:	6039      	str	r1, [r7, #0]
 8007f1a:	71fb      	strb	r3, [r7, #7]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007f20:	79fb      	ldrb	r3, [r7, #7]
 8007f22:	2b23      	cmp	r3, #35	; 0x23
 8007f24:	d84a      	bhi.n	8007fbc <CDC_Control_FS+0xac>
 8007f26:	a201      	add	r2, pc, #4	; (adr r2, 8007f2c <CDC_Control_FS+0x1c>)
 8007f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2c:	08007fbd 	.word	0x08007fbd
 8007f30:	08007fbd 	.word	0x08007fbd
 8007f34:	08007fbd 	.word	0x08007fbd
 8007f38:	08007fbd 	.word	0x08007fbd
 8007f3c:	08007fbd 	.word	0x08007fbd
 8007f40:	08007fbd 	.word	0x08007fbd
 8007f44:	08007fbd 	.word	0x08007fbd
 8007f48:	08007fbd 	.word	0x08007fbd
 8007f4c:	08007fbd 	.word	0x08007fbd
 8007f50:	08007fbd 	.word	0x08007fbd
 8007f54:	08007fbd 	.word	0x08007fbd
 8007f58:	08007fbd 	.word	0x08007fbd
 8007f5c:	08007fbd 	.word	0x08007fbd
 8007f60:	08007fbd 	.word	0x08007fbd
 8007f64:	08007fbd 	.word	0x08007fbd
 8007f68:	08007fbd 	.word	0x08007fbd
 8007f6c:	08007fbd 	.word	0x08007fbd
 8007f70:	08007fbd 	.word	0x08007fbd
 8007f74:	08007fbd 	.word	0x08007fbd
 8007f78:	08007fbd 	.word	0x08007fbd
 8007f7c:	08007fbd 	.word	0x08007fbd
 8007f80:	08007fbd 	.word	0x08007fbd
 8007f84:	08007fbd 	.word	0x08007fbd
 8007f88:	08007fbd 	.word	0x08007fbd
 8007f8c:	08007fbd 	.word	0x08007fbd
 8007f90:	08007fbd 	.word	0x08007fbd
 8007f94:	08007fbd 	.word	0x08007fbd
 8007f98:	08007fbd 	.word	0x08007fbd
 8007f9c:	08007fbd 	.word	0x08007fbd
 8007fa0:	08007fbd 	.word	0x08007fbd
 8007fa4:	08007fbd 	.word	0x08007fbd
 8007fa8:	08007fbd 	.word	0x08007fbd
 8007fac:	08007fbd 	.word	0x08007fbd
 8007fb0:	08007fbd 	.word	0x08007fbd
 8007fb4:	08007fbd 	.word	0x08007fbd
 8007fb8:	08007fbd 	.word	0x08007fbd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007fbc:	bf00      	nop
  }

  return (USBD_OK);
 8007fbe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	4805      	ldr	r0, [pc, #20]	; (8007ff0 <CDC_Receive_FS+0x24>)
 8007fda:	f7fe fbc1 	bl	8006760 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007fde:	4804      	ldr	r0, [pc, #16]	; (8007ff0 <CDC_Receive_FS+0x24>)
 8007fe0:	f7fe fc22 	bl	8006828 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007fe4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	20000278 	.word	0x20000278

08007ff4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008000:	2300      	movs	r3, #0
 8008002:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008004:	4b0d      	ldr	r3, [pc, #52]	; (800803c <CDC_Transmit_FS+0x48>)
 8008006:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800800a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008016:	2301      	movs	r3, #1
 8008018:	e00b      	b.n	8008032 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800801a:	887b      	ldrh	r3, [r7, #2]
 800801c:	461a      	mov	r2, r3
 800801e:	6879      	ldr	r1, [r7, #4]
 8008020:	4806      	ldr	r0, [pc, #24]	; (800803c <CDC_Transmit_FS+0x48>)
 8008022:	f7fe fb7b 	bl	800671c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008026:	4805      	ldr	r0, [pc, #20]	; (800803c <CDC_Transmit_FS+0x48>)
 8008028:	f7fe fbb8 	bl	800679c <USBD_CDC_TransmitPacket>
 800802c:	4603      	mov	r3, r0
 800802e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008030:	7bfb      	ldrb	r3, [r7, #15]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	20000278 	.word	0x20000278

08008040 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008040:	b480      	push	{r7}
 8008042:	b087      	sub	sp, #28
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	4613      	mov	r3, r2
 800804c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008052:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008056:	4618      	mov	r0, r3
 8008058:	371c      	adds	r7, #28
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
	...

08008064 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	4603      	mov	r3, r0
 800806c:	6039      	str	r1, [r7, #0]
 800806e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2212      	movs	r2, #18
 8008074:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008076:	4b03      	ldr	r3, [pc, #12]	; (8008084 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008078:	4618      	mov	r0, r3
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr
 8008084:	200000c8 	.word	0x200000c8

08008088 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	4603      	mov	r3, r0
 8008090:	6039      	str	r1, [r7, #0]
 8008092:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	2204      	movs	r2, #4
 8008098:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800809a:	4b03      	ldr	r3, [pc, #12]	; (80080a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800809c:	4618      	mov	r0, r3
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	200000dc 	.word	0x200000dc

080080ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	4603      	mov	r3, r0
 80080b4:	6039      	str	r1, [r7, #0]
 80080b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080b8:	79fb      	ldrb	r3, [r7, #7]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d105      	bne.n	80080ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080be:	683a      	ldr	r2, [r7, #0]
 80080c0:	4907      	ldr	r1, [pc, #28]	; (80080e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80080c2:	4808      	ldr	r0, [pc, #32]	; (80080e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80080c4:	f7ff fdf8 	bl	8007cb8 <USBD_GetString>
 80080c8:	e004      	b.n	80080d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080ca:	683a      	ldr	r2, [r7, #0]
 80080cc:	4904      	ldr	r1, [pc, #16]	; (80080e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80080ce:	4805      	ldr	r0, [pc, #20]	; (80080e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80080d0:	f7ff fdf2 	bl	8007cb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080d4:	4b02      	ldr	r3, [pc, #8]	; (80080e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	20001554 	.word	0x20001554
 80080e4:	08009798 	.word	0x08009798

080080e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	4603      	mov	r3, r0
 80080f0:	6039      	str	r1, [r7, #0]
 80080f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80080f4:	683a      	ldr	r2, [r7, #0]
 80080f6:	4904      	ldr	r1, [pc, #16]	; (8008108 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80080f8:	4804      	ldr	r0, [pc, #16]	; (800810c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80080fa:	f7ff fddd 	bl	8007cb8 <USBD_GetString>
  return USBD_StrDesc;
 80080fe:	4b02      	ldr	r3, [pc, #8]	; (8008108 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008100:	4618      	mov	r0, r3
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	20001554 	.word	0x20001554
 800810c:	080097b0 	.word	0x080097b0

08008110 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	4603      	mov	r3, r0
 8008118:	6039      	str	r1, [r7, #0]
 800811a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	221a      	movs	r2, #26
 8008120:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008122:	f000 f843 	bl	80081ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008126:	4b02      	ldr	r3, [pc, #8]	; (8008130 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008128:	4618      	mov	r0, r3
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	200000e0 	.word	0x200000e0

08008134 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	4603      	mov	r3, r0
 800813c:	6039      	str	r1, [r7, #0]
 800813e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008140:	79fb      	ldrb	r3, [r7, #7]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d105      	bne.n	8008152 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	4907      	ldr	r1, [pc, #28]	; (8008168 <USBD_FS_ConfigStrDescriptor+0x34>)
 800814a:	4808      	ldr	r0, [pc, #32]	; (800816c <USBD_FS_ConfigStrDescriptor+0x38>)
 800814c:	f7ff fdb4 	bl	8007cb8 <USBD_GetString>
 8008150:	e004      	b.n	800815c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	4904      	ldr	r1, [pc, #16]	; (8008168 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008156:	4805      	ldr	r0, [pc, #20]	; (800816c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008158:	f7ff fdae 	bl	8007cb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800815c:	4b02      	ldr	r3, [pc, #8]	; (8008168 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800815e:	4618      	mov	r0, r3
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	20001554 	.word	0x20001554
 800816c:	080097c4 	.word	0x080097c4

08008170 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	4603      	mov	r3, r0
 8008178:	6039      	str	r1, [r7, #0]
 800817a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800817c:	79fb      	ldrb	r3, [r7, #7]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d105      	bne.n	800818e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	4907      	ldr	r1, [pc, #28]	; (80081a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008186:	4808      	ldr	r0, [pc, #32]	; (80081a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008188:	f7ff fd96 	bl	8007cb8 <USBD_GetString>
 800818c:	e004      	b.n	8008198 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	4904      	ldr	r1, [pc, #16]	; (80081a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008192:	4805      	ldr	r0, [pc, #20]	; (80081a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008194:	f7ff fd90 	bl	8007cb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008198:	4b02      	ldr	r3, [pc, #8]	; (80081a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800819a:	4618      	mov	r0, r3
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	20001554 	.word	0x20001554
 80081a8:	080097d0 	.word	0x080097d0

080081ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80081b2:	4b0f      	ldr	r3, [pc, #60]	; (80081f0 <Get_SerialNum+0x44>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80081b8:	4b0e      	ldr	r3, [pc, #56]	; (80081f4 <Get_SerialNum+0x48>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80081be:	4b0e      	ldr	r3, [pc, #56]	; (80081f8 <Get_SerialNum+0x4c>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4413      	add	r3, r2
 80081ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d009      	beq.n	80081e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80081d2:	2208      	movs	r2, #8
 80081d4:	4909      	ldr	r1, [pc, #36]	; (80081fc <Get_SerialNum+0x50>)
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f000 f814 	bl	8008204 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80081dc:	2204      	movs	r2, #4
 80081de:	4908      	ldr	r1, [pc, #32]	; (8008200 <Get_SerialNum+0x54>)
 80081e0:	68b8      	ldr	r0, [r7, #8]
 80081e2:	f000 f80f 	bl	8008204 <IntToUnicode>
  }
}
 80081e6:	bf00      	nop
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	1fff7a10 	.word	0x1fff7a10
 80081f4:	1fff7a14 	.word	0x1fff7a14
 80081f8:	1fff7a18 	.word	0x1fff7a18
 80081fc:	200000e2 	.word	0x200000e2
 8008200:	200000f2 	.word	0x200000f2

08008204 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008204:	b480      	push	{r7}
 8008206:	b087      	sub	sp, #28
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	4613      	mov	r3, r2
 8008210:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008212:	2300      	movs	r3, #0
 8008214:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008216:	2300      	movs	r3, #0
 8008218:	75fb      	strb	r3, [r7, #23]
 800821a:	e027      	b.n	800826c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	0f1b      	lsrs	r3, r3, #28
 8008220:	2b09      	cmp	r3, #9
 8008222:	d80b      	bhi.n	800823c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	0f1b      	lsrs	r3, r3, #28
 8008228:	b2da      	uxtb	r2, r3
 800822a:	7dfb      	ldrb	r3, [r7, #23]
 800822c:	005b      	lsls	r3, r3, #1
 800822e:	4619      	mov	r1, r3
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	440b      	add	r3, r1
 8008234:	3230      	adds	r2, #48	; 0x30
 8008236:	b2d2      	uxtb	r2, r2
 8008238:	701a      	strb	r2, [r3, #0]
 800823a:	e00a      	b.n	8008252 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	0f1b      	lsrs	r3, r3, #28
 8008240:	b2da      	uxtb	r2, r3
 8008242:	7dfb      	ldrb	r3, [r7, #23]
 8008244:	005b      	lsls	r3, r3, #1
 8008246:	4619      	mov	r1, r3
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	440b      	add	r3, r1
 800824c:	3237      	adds	r2, #55	; 0x37
 800824e:	b2d2      	uxtb	r2, r2
 8008250:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	011b      	lsls	r3, r3, #4
 8008256:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008258:	7dfb      	ldrb	r3, [r7, #23]
 800825a:	005b      	lsls	r3, r3, #1
 800825c:	3301      	adds	r3, #1
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	4413      	add	r3, r2
 8008262:	2200      	movs	r2, #0
 8008264:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008266:	7dfb      	ldrb	r3, [r7, #23]
 8008268:	3301      	adds	r3, #1
 800826a:	75fb      	strb	r3, [r7, #23]
 800826c:	7dfa      	ldrb	r2, [r7, #23]
 800826e:	79fb      	ldrb	r3, [r7, #7]
 8008270:	429a      	cmp	r2, r3
 8008272:	d3d3      	bcc.n	800821c <IntToUnicode+0x18>
  }
}
 8008274:	bf00      	nop
 8008276:	bf00      	nop
 8008278:	371c      	adds	r7, #28
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
	...

08008284 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b08a      	sub	sp, #40	; 0x28
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800828c:	f107 0314 	add.w	r3, r7, #20
 8008290:	2200      	movs	r2, #0
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	605a      	str	r2, [r3, #4]
 8008296:	609a      	str	r2, [r3, #8]
 8008298:	60da      	str	r2, [r3, #12]
 800829a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082a4:	d147      	bne.n	8008336 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082a6:	2300      	movs	r3, #0
 80082a8:	613b      	str	r3, [r7, #16]
 80082aa:	4b25      	ldr	r3, [pc, #148]	; (8008340 <HAL_PCD_MspInit+0xbc>)
 80082ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ae:	4a24      	ldr	r2, [pc, #144]	; (8008340 <HAL_PCD_MspInit+0xbc>)
 80082b0:	f043 0301 	orr.w	r3, r3, #1
 80082b4:	6313      	str	r3, [r2, #48]	; 0x30
 80082b6:	4b22      	ldr	r3, [pc, #136]	; (8008340 <HAL_PCD_MspInit+0xbc>)
 80082b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	613b      	str	r3, [r7, #16]
 80082c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80082c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082c8:	2300      	movs	r3, #0
 80082ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082cc:	2300      	movs	r3, #0
 80082ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80082d0:	f107 0314 	add.w	r3, r7, #20
 80082d4:	4619      	mov	r1, r3
 80082d6:	481b      	ldr	r0, [pc, #108]	; (8008344 <HAL_PCD_MspInit+0xc0>)
 80082d8:	f7f9 f922 	bl	8001520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80082dc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80082e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082e2:	2302      	movs	r3, #2
 80082e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082e6:	2300      	movs	r3, #0
 80082e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082ea:	2300      	movs	r3, #0
 80082ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80082ee:	230a      	movs	r3, #10
 80082f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082f2:	f107 0314 	add.w	r3, r7, #20
 80082f6:	4619      	mov	r1, r3
 80082f8:	4812      	ldr	r0, [pc, #72]	; (8008344 <HAL_PCD_MspInit+0xc0>)
 80082fa:	f7f9 f911 	bl	8001520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80082fe:	4b10      	ldr	r3, [pc, #64]	; (8008340 <HAL_PCD_MspInit+0xbc>)
 8008300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008302:	4a0f      	ldr	r2, [pc, #60]	; (8008340 <HAL_PCD_MspInit+0xbc>)
 8008304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008308:	6353      	str	r3, [r2, #52]	; 0x34
 800830a:	2300      	movs	r3, #0
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	4b0c      	ldr	r3, [pc, #48]	; (8008340 <HAL_PCD_MspInit+0xbc>)
 8008310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008312:	4a0b      	ldr	r2, [pc, #44]	; (8008340 <HAL_PCD_MspInit+0xbc>)
 8008314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008318:	6453      	str	r3, [r2, #68]	; 0x44
 800831a:	4b09      	ldr	r3, [pc, #36]	; (8008340 <HAL_PCD_MspInit+0xbc>)
 800831c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800831e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008326:	2200      	movs	r2, #0
 8008328:	2100      	movs	r1, #0
 800832a:	2043      	movs	r0, #67	; 0x43
 800832c:	f7f9 f8c1 	bl	80014b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008330:	2043      	movs	r0, #67	; 0x43
 8008332:	f7f9 f8da 	bl	80014ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008336:	bf00      	nop
 8008338:	3728      	adds	r7, #40	; 0x28
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	40023800 	.word	0x40023800
 8008344:	40020000 	.word	0x40020000

08008348 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800835c:	4619      	mov	r1, r3
 800835e:	4610      	mov	r0, r2
 8008360:	f7fe fb4b 	bl	80069fa <USBD_LL_SetupStage>
}
 8008364:	bf00      	nop
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800837e:	78fa      	ldrb	r2, [r7, #3]
 8008380:	6879      	ldr	r1, [r7, #4]
 8008382:	4613      	mov	r3, r2
 8008384:	00db      	lsls	r3, r3, #3
 8008386:	4413      	add	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	440b      	add	r3, r1
 800838c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	78fb      	ldrb	r3, [r7, #3]
 8008394:	4619      	mov	r1, r3
 8008396:	f7fe fb85 	bl	8006aa4 <USBD_LL_DataOutStage>
}
 800839a:	bf00      	nop
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b082      	sub	sp, #8
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	460b      	mov	r3, r1
 80083ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80083b4:	78fa      	ldrb	r2, [r7, #3]
 80083b6:	6879      	ldr	r1, [r7, #4]
 80083b8:	4613      	mov	r3, r2
 80083ba:	00db      	lsls	r3, r3, #3
 80083bc:	4413      	add	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	440b      	add	r3, r1
 80083c2:	334c      	adds	r3, #76	; 0x4c
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	78fb      	ldrb	r3, [r7, #3]
 80083c8:	4619      	mov	r1, r3
 80083ca:	f7fe fc1e 	bl	8006c0a <USBD_LL_DataInStage>
}
 80083ce:	bf00      	nop
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b082      	sub	sp, #8
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7fe fd52 	bl	8006e8e <USBD_LL_SOF>
}
 80083ea:	bf00      	nop
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b084      	sub	sp, #16
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80083fa:	2301      	movs	r3, #1
 80083fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d102      	bne.n	800840c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008406:	2300      	movs	r3, #0
 8008408:	73fb      	strb	r3, [r7, #15]
 800840a:	e008      	b.n	800841e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	2b02      	cmp	r3, #2
 8008412:	d102      	bne.n	800841a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008414:	2301      	movs	r3, #1
 8008416:	73fb      	strb	r3, [r7, #15]
 8008418:	e001      	b.n	800841e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800841a:	f7f8 fbf5 	bl	8000c08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008424:	7bfa      	ldrb	r2, [r7, #15]
 8008426:	4611      	mov	r1, r2
 8008428:	4618      	mov	r0, r3
 800842a:	f7fe fcf2 	bl	8006e12 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008434:	4618      	mov	r0, r3
 8008436:	f7fe fc9a 	bl	8006d6e <USBD_LL_Reset>
}
 800843a:	bf00      	nop
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
	...

08008444 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008452:	4618      	mov	r0, r3
 8008454:	f7fe fced 	bl	8006e32 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	6812      	ldr	r2, [r2, #0]
 8008466:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800846a:	f043 0301 	orr.w	r3, r3, #1
 800846e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a1b      	ldr	r3, [r3, #32]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d005      	beq.n	8008484 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008478:	4b04      	ldr	r3, [pc, #16]	; (800848c <HAL_PCD_SuspendCallback+0x48>)
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	4a03      	ldr	r2, [pc, #12]	; (800848c <HAL_PCD_SuspendCallback+0x48>)
 800847e:	f043 0306 	orr.w	r3, r3, #6
 8008482:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008484:	bf00      	nop
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	e000ed00 	.word	0xe000ed00

08008490 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fe fcdd 	bl	8006e5e <USBD_LL_Resume>
}
 80084a4:	bf00      	nop
 80084a6:	3708      	adds	r7, #8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	460b      	mov	r3, r1
 80084b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084be:	78fa      	ldrb	r2, [r7, #3]
 80084c0:	4611      	mov	r1, r2
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fe fd35 	bl	8006f32 <USBD_LL_IsoOUTIncomplete>
}
 80084c8:	bf00      	nop
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	460b      	mov	r3, r1
 80084da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084e2:	78fa      	ldrb	r2, [r7, #3]
 80084e4:	4611      	mov	r1, r2
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fe fcf1 	bl	8006ece <USBD_LL_IsoINIncomplete>
}
 80084ec:	bf00      	nop
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008502:	4618      	mov	r0, r3
 8008504:	f7fe fd47 	bl	8006f96 <USBD_LL_DevConnected>
}
 8008508:	bf00      	nop
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800851e:	4618      	mov	r0, r3
 8008520:	f7fe fd44 	bl	8006fac <USBD_LL_DevDisconnected>
}
 8008524:	bf00      	nop
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d13c      	bne.n	80085b6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800853c:	4a20      	ldr	r2, [pc, #128]	; (80085c0 <USBD_LL_Init+0x94>)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a1e      	ldr	r2, [pc, #120]	; (80085c0 <USBD_LL_Init+0x94>)
 8008548:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800854c:	4b1c      	ldr	r3, [pc, #112]	; (80085c0 <USBD_LL_Init+0x94>)
 800854e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008552:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008554:	4b1a      	ldr	r3, [pc, #104]	; (80085c0 <USBD_LL_Init+0x94>)
 8008556:	2204      	movs	r2, #4
 8008558:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800855a:	4b19      	ldr	r3, [pc, #100]	; (80085c0 <USBD_LL_Init+0x94>)
 800855c:	2202      	movs	r2, #2
 800855e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008560:	4b17      	ldr	r3, [pc, #92]	; (80085c0 <USBD_LL_Init+0x94>)
 8008562:	2200      	movs	r2, #0
 8008564:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008566:	4b16      	ldr	r3, [pc, #88]	; (80085c0 <USBD_LL_Init+0x94>)
 8008568:	2202      	movs	r2, #2
 800856a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800856c:	4b14      	ldr	r3, [pc, #80]	; (80085c0 <USBD_LL_Init+0x94>)
 800856e:	2200      	movs	r2, #0
 8008570:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008572:	4b13      	ldr	r3, [pc, #76]	; (80085c0 <USBD_LL_Init+0x94>)
 8008574:	2200      	movs	r2, #0
 8008576:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008578:	4b11      	ldr	r3, [pc, #68]	; (80085c0 <USBD_LL_Init+0x94>)
 800857a:	2200      	movs	r2, #0
 800857c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800857e:	4b10      	ldr	r3, [pc, #64]	; (80085c0 <USBD_LL_Init+0x94>)
 8008580:	2201      	movs	r2, #1
 8008582:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008584:	4b0e      	ldr	r3, [pc, #56]	; (80085c0 <USBD_LL_Init+0x94>)
 8008586:	2200      	movs	r2, #0
 8008588:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800858a:	480d      	ldr	r0, [pc, #52]	; (80085c0 <USBD_LL_Init+0x94>)
 800858c:	f7f9 ff94 	bl	80024b8 <HAL_PCD_Init>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d001      	beq.n	800859a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008596:	f7f8 fb37 	bl	8000c08 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800859a:	2180      	movs	r1, #128	; 0x80
 800859c:	4808      	ldr	r0, [pc, #32]	; (80085c0 <USBD_LL_Init+0x94>)
 800859e:	f7fb f9ec 	bl	800397a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80085a2:	2240      	movs	r2, #64	; 0x40
 80085a4:	2100      	movs	r1, #0
 80085a6:	4806      	ldr	r0, [pc, #24]	; (80085c0 <USBD_LL_Init+0x94>)
 80085a8:	f7fb f9a0 	bl	80038ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80085ac:	2280      	movs	r2, #128	; 0x80
 80085ae:	2101      	movs	r1, #1
 80085b0:	4803      	ldr	r0, [pc, #12]	; (80085c0 <USBD_LL_Init+0x94>)
 80085b2:	f7fb f99b 	bl	80038ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	20001754 	.word	0x20001754

080085c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085d0:	2300      	movs	r3, #0
 80085d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fa f889 	bl	80026f2 <HAL_PCD_Start>
 80085e0:	4603      	mov	r3, r0
 80085e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085e4:	7bfb      	ldrb	r3, [r7, #15]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f000 f942 	bl	8008870 <USBD_Get_USB_Status>
 80085ec:	4603      	mov	r3, r0
 80085ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b084      	sub	sp, #16
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	4608      	mov	r0, r1
 8008604:	4611      	mov	r1, r2
 8008606:	461a      	mov	r2, r3
 8008608:	4603      	mov	r3, r0
 800860a:	70fb      	strb	r3, [r7, #3]
 800860c:	460b      	mov	r3, r1
 800860e:	70bb      	strb	r3, [r7, #2]
 8008610:	4613      	mov	r3, r2
 8008612:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008622:	78bb      	ldrb	r3, [r7, #2]
 8008624:	883a      	ldrh	r2, [r7, #0]
 8008626:	78f9      	ldrb	r1, [r7, #3]
 8008628:	f7fa fd5a 	bl	80030e0 <HAL_PCD_EP_Open>
 800862c:	4603      	mov	r3, r0
 800862e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008630:	7bfb      	ldrb	r3, [r7, #15]
 8008632:	4618      	mov	r0, r3
 8008634:	f000 f91c 	bl	8008870 <USBD_Get_USB_Status>
 8008638:	4603      	mov	r3, r0
 800863a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800863c:	7bbb      	ldrb	r3, [r7, #14]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b084      	sub	sp, #16
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	460b      	mov	r3, r1
 8008650:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008656:	2300      	movs	r3, #0
 8008658:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008660:	78fa      	ldrb	r2, [r7, #3]
 8008662:	4611      	mov	r1, r2
 8008664:	4618      	mov	r0, r3
 8008666:	f7fa fda3 	bl	80031b0 <HAL_PCD_EP_Close>
 800866a:	4603      	mov	r3, r0
 800866c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	4618      	mov	r0, r3
 8008672:	f000 f8fd 	bl	8008870 <USBD_Get_USB_Status>
 8008676:	4603      	mov	r3, r0
 8008678:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800867a:	7bbb      	ldrb	r3, [r7, #14]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	460b      	mov	r3, r1
 800868e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008690:	2300      	movs	r3, #0
 8008692:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800869e:	78fa      	ldrb	r2, [r7, #3]
 80086a0:	4611      	mov	r1, r2
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fa fe7b 	bl	800339e <HAL_PCD_EP_SetStall>
 80086a8:	4603      	mov	r3, r0
 80086aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
 80086ae:	4618      	mov	r0, r3
 80086b0:	f000 f8de 	bl	8008870 <USBD_Get_USB_Status>
 80086b4:	4603      	mov	r3, r0
 80086b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b084      	sub	sp, #16
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	460b      	mov	r3, r1
 80086cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ce:	2300      	movs	r3, #0
 80086d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086dc:	78fa      	ldrb	r2, [r7, #3]
 80086de:	4611      	mov	r1, r2
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7fa fec0 	bl	8003466 <HAL_PCD_EP_ClrStall>
 80086e6:	4603      	mov	r3, r0
 80086e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086ea:	7bfb      	ldrb	r3, [r7, #15]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f000 f8bf 	bl	8008870 <USBD_Get_USB_Status>
 80086f2:	4603      	mov	r3, r0
 80086f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	460b      	mov	r3, r1
 800870a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008712:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008714:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008718:	2b00      	cmp	r3, #0
 800871a:	da0b      	bge.n	8008734 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800871c:	78fb      	ldrb	r3, [r7, #3]
 800871e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008722:	68f9      	ldr	r1, [r7, #12]
 8008724:	4613      	mov	r3, r2
 8008726:	00db      	lsls	r3, r3, #3
 8008728:	4413      	add	r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	440b      	add	r3, r1
 800872e:	333e      	adds	r3, #62	; 0x3e
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	e00b      	b.n	800874c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008734:	78fb      	ldrb	r3, [r7, #3]
 8008736:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800873a:	68f9      	ldr	r1, [r7, #12]
 800873c:	4613      	mov	r3, r2
 800873e:	00db      	lsls	r3, r3, #3
 8008740:	4413      	add	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	440b      	add	r3, r1
 8008746:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800874a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800874c:	4618      	mov	r0, r3
 800874e:	3714      	adds	r7, #20
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	460b      	mov	r3, r1
 8008762:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008772:	78fa      	ldrb	r2, [r7, #3]
 8008774:	4611      	mov	r1, r2
 8008776:	4618      	mov	r0, r3
 8008778:	f7fa fc8d 	bl	8003096 <HAL_PCD_SetAddress>
 800877c:	4603      	mov	r3, r0
 800877e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008780:	7bfb      	ldrb	r3, [r7, #15]
 8008782:	4618      	mov	r0, r3
 8008784:	f000 f874 	bl	8008870 <USBD_Get_USB_Status>
 8008788:	4603      	mov	r3, r0
 800878a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800878c:	7bbb      	ldrb	r3, [r7, #14]
}
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b086      	sub	sp, #24
 800879a:	af00      	add	r7, sp, #0
 800879c:	60f8      	str	r0, [r7, #12]
 800879e:	607a      	str	r2, [r7, #4]
 80087a0:	603b      	str	r3, [r7, #0]
 80087a2:	460b      	mov	r3, r1
 80087a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80087b4:	7af9      	ldrb	r1, [r7, #11]
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	f7fa fda6 	bl	800330a <HAL_PCD_EP_Transmit>
 80087be:	4603      	mov	r3, r0
 80087c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087c2:	7dfb      	ldrb	r3, [r7, #23]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 f853 	bl	8008870 <USBD_Get_USB_Status>
 80087ca:	4603      	mov	r3, r0
 80087cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b086      	sub	sp, #24
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	607a      	str	r2, [r7, #4]
 80087e2:	603b      	str	r3, [r7, #0]
 80087e4:	460b      	mov	r3, r1
 80087e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087e8:	2300      	movs	r3, #0
 80087ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80087f6:	7af9      	ldrb	r1, [r7, #11]
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	f7fa fd22 	bl	8003244 <HAL_PCD_EP_Receive>
 8008800:	4603      	mov	r3, r0
 8008802:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008804:	7dfb      	ldrb	r3, [r7, #23]
 8008806:	4618      	mov	r0, r3
 8008808:	f000 f832 	bl	8008870 <USBD_Get_USB_Status>
 800880c:	4603      	mov	r3, r0
 800880e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008810:	7dbb      	ldrb	r3, [r7, #22]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3718      	adds	r7, #24
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b082      	sub	sp, #8
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	460b      	mov	r3, r1
 8008824:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800882c:	78fa      	ldrb	r2, [r7, #3]
 800882e:	4611      	mov	r1, r2
 8008830:	4618      	mov	r0, r3
 8008832:	f7fa fd52 	bl	80032da <HAL_PCD_EP_GetRxCount>
 8008836:	4603      	mov	r3, r0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3708      	adds	r7, #8
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008848:	4b03      	ldr	r3, [pc, #12]	; (8008858 <USBD_static_malloc+0x18>)
}
 800884a:	4618      	mov	r0, r3
 800884c:	370c      	adds	r7, #12
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	20001c60 	.word	0x20001c60

0800885c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]

}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	4603      	mov	r3, r0
 8008878:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800887a:	2300      	movs	r3, #0
 800887c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800887e:	79fb      	ldrb	r3, [r7, #7]
 8008880:	2b03      	cmp	r3, #3
 8008882:	d817      	bhi.n	80088b4 <USBD_Get_USB_Status+0x44>
 8008884:	a201      	add	r2, pc, #4	; (adr r2, 800888c <USBD_Get_USB_Status+0x1c>)
 8008886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888a:	bf00      	nop
 800888c:	0800889d 	.word	0x0800889d
 8008890:	080088a3 	.word	0x080088a3
 8008894:	080088a9 	.word	0x080088a9
 8008898:	080088af 	.word	0x080088af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800889c:	2300      	movs	r3, #0
 800889e:	73fb      	strb	r3, [r7, #15]
    break;
 80088a0:	e00b      	b.n	80088ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80088a2:	2303      	movs	r3, #3
 80088a4:	73fb      	strb	r3, [r7, #15]
    break;
 80088a6:	e008      	b.n	80088ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80088a8:	2301      	movs	r3, #1
 80088aa:	73fb      	strb	r3, [r7, #15]
    break;
 80088ac:	e005      	b.n	80088ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80088ae:	2303      	movs	r3, #3
 80088b0:	73fb      	strb	r3, [r7, #15]
    break;
 80088b2:	e002      	b.n	80088ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80088b4:	2303      	movs	r3, #3
 80088b6:	73fb      	strb	r3, [r7, #15]
    break;
 80088b8:	bf00      	nop
  }
  return usb_status;
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3714      	adds	r7, #20
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <std>:
 80088c8:	2300      	movs	r3, #0
 80088ca:	b510      	push	{r4, lr}
 80088cc:	4604      	mov	r4, r0
 80088ce:	e9c0 3300 	strd	r3, r3, [r0]
 80088d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088d6:	6083      	str	r3, [r0, #8]
 80088d8:	8181      	strh	r1, [r0, #12]
 80088da:	6643      	str	r3, [r0, #100]	; 0x64
 80088dc:	81c2      	strh	r2, [r0, #14]
 80088de:	6183      	str	r3, [r0, #24]
 80088e0:	4619      	mov	r1, r3
 80088e2:	2208      	movs	r2, #8
 80088e4:	305c      	adds	r0, #92	; 0x5c
 80088e6:	f000 f8f4 	bl	8008ad2 <memset>
 80088ea:	4b05      	ldr	r3, [pc, #20]	; (8008900 <std+0x38>)
 80088ec:	6263      	str	r3, [r4, #36]	; 0x24
 80088ee:	4b05      	ldr	r3, [pc, #20]	; (8008904 <std+0x3c>)
 80088f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80088f2:	4b05      	ldr	r3, [pc, #20]	; (8008908 <std+0x40>)
 80088f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088f6:	4b05      	ldr	r3, [pc, #20]	; (800890c <std+0x44>)
 80088f8:	6224      	str	r4, [r4, #32]
 80088fa:	6323      	str	r3, [r4, #48]	; 0x30
 80088fc:	bd10      	pop	{r4, pc}
 80088fe:	bf00      	nop
 8008900:	08008a4d 	.word	0x08008a4d
 8008904:	08008a6f 	.word	0x08008a6f
 8008908:	08008aa7 	.word	0x08008aa7
 800890c:	08008acb 	.word	0x08008acb

08008910 <stdio_exit_handler>:
 8008910:	4a02      	ldr	r2, [pc, #8]	; (800891c <stdio_exit_handler+0xc>)
 8008912:	4903      	ldr	r1, [pc, #12]	; (8008920 <stdio_exit_handler+0x10>)
 8008914:	4803      	ldr	r0, [pc, #12]	; (8008924 <stdio_exit_handler+0x14>)
 8008916:	f000 b869 	b.w	80089ec <_fwalk_sglue>
 800891a:	bf00      	nop
 800891c:	200000fc 	.word	0x200000fc
 8008920:	0800946d 	.word	0x0800946d
 8008924:	20000108 	.word	0x20000108

08008928 <cleanup_stdio>:
 8008928:	6841      	ldr	r1, [r0, #4]
 800892a:	4b0c      	ldr	r3, [pc, #48]	; (800895c <cleanup_stdio+0x34>)
 800892c:	4299      	cmp	r1, r3
 800892e:	b510      	push	{r4, lr}
 8008930:	4604      	mov	r4, r0
 8008932:	d001      	beq.n	8008938 <cleanup_stdio+0x10>
 8008934:	f000 fd9a 	bl	800946c <_fflush_r>
 8008938:	68a1      	ldr	r1, [r4, #8]
 800893a:	4b09      	ldr	r3, [pc, #36]	; (8008960 <cleanup_stdio+0x38>)
 800893c:	4299      	cmp	r1, r3
 800893e:	d002      	beq.n	8008946 <cleanup_stdio+0x1e>
 8008940:	4620      	mov	r0, r4
 8008942:	f000 fd93 	bl	800946c <_fflush_r>
 8008946:	68e1      	ldr	r1, [r4, #12]
 8008948:	4b06      	ldr	r3, [pc, #24]	; (8008964 <cleanup_stdio+0x3c>)
 800894a:	4299      	cmp	r1, r3
 800894c:	d004      	beq.n	8008958 <cleanup_stdio+0x30>
 800894e:	4620      	mov	r0, r4
 8008950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008954:	f000 bd8a 	b.w	800946c <_fflush_r>
 8008958:	bd10      	pop	{r4, pc}
 800895a:	bf00      	nop
 800895c:	20001e80 	.word	0x20001e80
 8008960:	20001ee8 	.word	0x20001ee8
 8008964:	20001f50 	.word	0x20001f50

08008968 <global_stdio_init.part.0>:
 8008968:	b510      	push	{r4, lr}
 800896a:	4b0b      	ldr	r3, [pc, #44]	; (8008998 <global_stdio_init.part.0+0x30>)
 800896c:	4c0b      	ldr	r4, [pc, #44]	; (800899c <global_stdio_init.part.0+0x34>)
 800896e:	4a0c      	ldr	r2, [pc, #48]	; (80089a0 <global_stdio_init.part.0+0x38>)
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	4620      	mov	r0, r4
 8008974:	2200      	movs	r2, #0
 8008976:	2104      	movs	r1, #4
 8008978:	f7ff ffa6 	bl	80088c8 <std>
 800897c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008980:	2201      	movs	r2, #1
 8008982:	2109      	movs	r1, #9
 8008984:	f7ff ffa0 	bl	80088c8 <std>
 8008988:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800898c:	2202      	movs	r2, #2
 800898e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008992:	2112      	movs	r1, #18
 8008994:	f7ff bf98 	b.w	80088c8 <std>
 8008998:	20001fb8 	.word	0x20001fb8
 800899c:	20001e80 	.word	0x20001e80
 80089a0:	08008911 	.word	0x08008911

080089a4 <__sfp_lock_acquire>:
 80089a4:	4801      	ldr	r0, [pc, #4]	; (80089ac <__sfp_lock_acquire+0x8>)
 80089a6:	f000 b90d 	b.w	8008bc4 <__retarget_lock_acquire_recursive>
 80089aa:	bf00      	nop
 80089ac:	20001fc1 	.word	0x20001fc1

080089b0 <__sfp_lock_release>:
 80089b0:	4801      	ldr	r0, [pc, #4]	; (80089b8 <__sfp_lock_release+0x8>)
 80089b2:	f000 b908 	b.w	8008bc6 <__retarget_lock_release_recursive>
 80089b6:	bf00      	nop
 80089b8:	20001fc1 	.word	0x20001fc1

080089bc <__sinit>:
 80089bc:	b510      	push	{r4, lr}
 80089be:	4604      	mov	r4, r0
 80089c0:	f7ff fff0 	bl	80089a4 <__sfp_lock_acquire>
 80089c4:	6a23      	ldr	r3, [r4, #32]
 80089c6:	b11b      	cbz	r3, 80089d0 <__sinit+0x14>
 80089c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089cc:	f7ff bff0 	b.w	80089b0 <__sfp_lock_release>
 80089d0:	4b04      	ldr	r3, [pc, #16]	; (80089e4 <__sinit+0x28>)
 80089d2:	6223      	str	r3, [r4, #32]
 80089d4:	4b04      	ldr	r3, [pc, #16]	; (80089e8 <__sinit+0x2c>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1f5      	bne.n	80089c8 <__sinit+0xc>
 80089dc:	f7ff ffc4 	bl	8008968 <global_stdio_init.part.0>
 80089e0:	e7f2      	b.n	80089c8 <__sinit+0xc>
 80089e2:	bf00      	nop
 80089e4:	08008929 	.word	0x08008929
 80089e8:	20001fb8 	.word	0x20001fb8

080089ec <_fwalk_sglue>:
 80089ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089f0:	4607      	mov	r7, r0
 80089f2:	4688      	mov	r8, r1
 80089f4:	4614      	mov	r4, r2
 80089f6:	2600      	movs	r6, #0
 80089f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089fc:	f1b9 0901 	subs.w	r9, r9, #1
 8008a00:	d505      	bpl.n	8008a0e <_fwalk_sglue+0x22>
 8008a02:	6824      	ldr	r4, [r4, #0]
 8008a04:	2c00      	cmp	r4, #0
 8008a06:	d1f7      	bne.n	80089f8 <_fwalk_sglue+0xc>
 8008a08:	4630      	mov	r0, r6
 8008a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a0e:	89ab      	ldrh	r3, [r5, #12]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d907      	bls.n	8008a24 <_fwalk_sglue+0x38>
 8008a14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	d003      	beq.n	8008a24 <_fwalk_sglue+0x38>
 8008a1c:	4629      	mov	r1, r5
 8008a1e:	4638      	mov	r0, r7
 8008a20:	47c0      	blx	r8
 8008a22:	4306      	orrs	r6, r0
 8008a24:	3568      	adds	r5, #104	; 0x68
 8008a26:	e7e9      	b.n	80089fc <_fwalk_sglue+0x10>

08008a28 <iprintf>:
 8008a28:	b40f      	push	{r0, r1, r2, r3}
 8008a2a:	b507      	push	{r0, r1, r2, lr}
 8008a2c:	4906      	ldr	r1, [pc, #24]	; (8008a48 <iprintf+0x20>)
 8008a2e:	ab04      	add	r3, sp, #16
 8008a30:	6808      	ldr	r0, [r1, #0]
 8008a32:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a36:	6881      	ldr	r1, [r0, #8]
 8008a38:	9301      	str	r3, [sp, #4]
 8008a3a:	f000 f9e7 	bl	8008e0c <_vfiprintf_r>
 8008a3e:	b003      	add	sp, #12
 8008a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a44:	b004      	add	sp, #16
 8008a46:	4770      	bx	lr
 8008a48:	20000154 	.word	0x20000154

08008a4c <__sread>:
 8008a4c:	b510      	push	{r4, lr}
 8008a4e:	460c      	mov	r4, r1
 8008a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a54:	f000 f868 	bl	8008b28 <_read_r>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	bfab      	itete	ge
 8008a5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a5e:	89a3      	ldrhlt	r3, [r4, #12]
 8008a60:	181b      	addge	r3, r3, r0
 8008a62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a66:	bfac      	ite	ge
 8008a68:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a6a:	81a3      	strhlt	r3, [r4, #12]
 8008a6c:	bd10      	pop	{r4, pc}

08008a6e <__swrite>:
 8008a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a72:	461f      	mov	r7, r3
 8008a74:	898b      	ldrh	r3, [r1, #12]
 8008a76:	05db      	lsls	r3, r3, #23
 8008a78:	4605      	mov	r5, r0
 8008a7a:	460c      	mov	r4, r1
 8008a7c:	4616      	mov	r6, r2
 8008a7e:	d505      	bpl.n	8008a8c <__swrite+0x1e>
 8008a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a84:	2302      	movs	r3, #2
 8008a86:	2200      	movs	r2, #0
 8008a88:	f000 f83c 	bl	8008b04 <_lseek_r>
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a96:	81a3      	strh	r3, [r4, #12]
 8008a98:	4632      	mov	r2, r6
 8008a9a:	463b      	mov	r3, r7
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa2:	f000 b853 	b.w	8008b4c <_write_r>

08008aa6 <__sseek>:
 8008aa6:	b510      	push	{r4, lr}
 8008aa8:	460c      	mov	r4, r1
 8008aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aae:	f000 f829 	bl	8008b04 <_lseek_r>
 8008ab2:	1c43      	adds	r3, r0, #1
 8008ab4:	89a3      	ldrh	r3, [r4, #12]
 8008ab6:	bf15      	itete	ne
 8008ab8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008aba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008abe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ac2:	81a3      	strheq	r3, [r4, #12]
 8008ac4:	bf18      	it	ne
 8008ac6:	81a3      	strhne	r3, [r4, #12]
 8008ac8:	bd10      	pop	{r4, pc}

08008aca <__sclose>:
 8008aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ace:	f000 b809 	b.w	8008ae4 <_close_r>

08008ad2 <memset>:
 8008ad2:	4402      	add	r2, r0
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d100      	bne.n	8008adc <memset+0xa>
 8008ada:	4770      	bx	lr
 8008adc:	f803 1b01 	strb.w	r1, [r3], #1
 8008ae0:	e7f9      	b.n	8008ad6 <memset+0x4>
	...

08008ae4 <_close_r>:
 8008ae4:	b538      	push	{r3, r4, r5, lr}
 8008ae6:	4d06      	ldr	r5, [pc, #24]	; (8008b00 <_close_r+0x1c>)
 8008ae8:	2300      	movs	r3, #0
 8008aea:	4604      	mov	r4, r0
 8008aec:	4608      	mov	r0, r1
 8008aee:	602b      	str	r3, [r5, #0]
 8008af0:	f7f8 fac7 	bl	8001082 <_close>
 8008af4:	1c43      	adds	r3, r0, #1
 8008af6:	d102      	bne.n	8008afe <_close_r+0x1a>
 8008af8:	682b      	ldr	r3, [r5, #0]
 8008afa:	b103      	cbz	r3, 8008afe <_close_r+0x1a>
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	bd38      	pop	{r3, r4, r5, pc}
 8008b00:	20001fbc 	.word	0x20001fbc

08008b04 <_lseek_r>:
 8008b04:	b538      	push	{r3, r4, r5, lr}
 8008b06:	4d07      	ldr	r5, [pc, #28]	; (8008b24 <_lseek_r+0x20>)
 8008b08:	4604      	mov	r4, r0
 8008b0a:	4608      	mov	r0, r1
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	2200      	movs	r2, #0
 8008b10:	602a      	str	r2, [r5, #0]
 8008b12:	461a      	mov	r2, r3
 8008b14:	f7f8 fadc 	bl	80010d0 <_lseek>
 8008b18:	1c43      	adds	r3, r0, #1
 8008b1a:	d102      	bne.n	8008b22 <_lseek_r+0x1e>
 8008b1c:	682b      	ldr	r3, [r5, #0]
 8008b1e:	b103      	cbz	r3, 8008b22 <_lseek_r+0x1e>
 8008b20:	6023      	str	r3, [r4, #0]
 8008b22:	bd38      	pop	{r3, r4, r5, pc}
 8008b24:	20001fbc 	.word	0x20001fbc

08008b28 <_read_r>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	4d07      	ldr	r5, [pc, #28]	; (8008b48 <_read_r+0x20>)
 8008b2c:	4604      	mov	r4, r0
 8008b2e:	4608      	mov	r0, r1
 8008b30:	4611      	mov	r1, r2
 8008b32:	2200      	movs	r2, #0
 8008b34:	602a      	str	r2, [r5, #0]
 8008b36:	461a      	mov	r2, r3
 8008b38:	f7f8 fa86 	bl	8001048 <_read>
 8008b3c:	1c43      	adds	r3, r0, #1
 8008b3e:	d102      	bne.n	8008b46 <_read_r+0x1e>
 8008b40:	682b      	ldr	r3, [r5, #0]
 8008b42:	b103      	cbz	r3, 8008b46 <_read_r+0x1e>
 8008b44:	6023      	str	r3, [r4, #0]
 8008b46:	bd38      	pop	{r3, r4, r5, pc}
 8008b48:	20001fbc 	.word	0x20001fbc

08008b4c <_write_r>:
 8008b4c:	b538      	push	{r3, r4, r5, lr}
 8008b4e:	4d07      	ldr	r5, [pc, #28]	; (8008b6c <_write_r+0x20>)
 8008b50:	4604      	mov	r4, r0
 8008b52:	4608      	mov	r0, r1
 8008b54:	4611      	mov	r1, r2
 8008b56:	2200      	movs	r2, #0
 8008b58:	602a      	str	r2, [r5, #0]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	f7f7 fdfa 	bl	8000754 <_write>
 8008b60:	1c43      	adds	r3, r0, #1
 8008b62:	d102      	bne.n	8008b6a <_write_r+0x1e>
 8008b64:	682b      	ldr	r3, [r5, #0]
 8008b66:	b103      	cbz	r3, 8008b6a <_write_r+0x1e>
 8008b68:	6023      	str	r3, [r4, #0]
 8008b6a:	bd38      	pop	{r3, r4, r5, pc}
 8008b6c:	20001fbc 	.word	0x20001fbc

08008b70 <__errno>:
 8008b70:	4b01      	ldr	r3, [pc, #4]	; (8008b78 <__errno+0x8>)
 8008b72:	6818      	ldr	r0, [r3, #0]
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	20000154 	.word	0x20000154

08008b7c <__libc_init_array>:
 8008b7c:	b570      	push	{r4, r5, r6, lr}
 8008b7e:	4d0d      	ldr	r5, [pc, #52]	; (8008bb4 <__libc_init_array+0x38>)
 8008b80:	4c0d      	ldr	r4, [pc, #52]	; (8008bb8 <__libc_init_array+0x3c>)
 8008b82:	1b64      	subs	r4, r4, r5
 8008b84:	10a4      	asrs	r4, r4, #2
 8008b86:	2600      	movs	r6, #0
 8008b88:	42a6      	cmp	r6, r4
 8008b8a:	d109      	bne.n	8008ba0 <__libc_init_array+0x24>
 8008b8c:	4d0b      	ldr	r5, [pc, #44]	; (8008bbc <__libc_init_array+0x40>)
 8008b8e:	4c0c      	ldr	r4, [pc, #48]	; (8008bc0 <__libc_init_array+0x44>)
 8008b90:	f000 fdbe 	bl	8009710 <_init>
 8008b94:	1b64      	subs	r4, r4, r5
 8008b96:	10a4      	asrs	r4, r4, #2
 8008b98:	2600      	movs	r6, #0
 8008b9a:	42a6      	cmp	r6, r4
 8008b9c:	d105      	bne.n	8008baa <__libc_init_array+0x2e>
 8008b9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ba4:	4798      	blx	r3
 8008ba6:	3601      	adds	r6, #1
 8008ba8:	e7ee      	b.n	8008b88 <__libc_init_array+0xc>
 8008baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bae:	4798      	blx	r3
 8008bb0:	3601      	adds	r6, #1
 8008bb2:	e7f2      	b.n	8008b9a <__libc_init_array+0x1e>
 8008bb4:	08009834 	.word	0x08009834
 8008bb8:	08009834 	.word	0x08009834
 8008bbc:	08009834 	.word	0x08009834
 8008bc0:	08009838 	.word	0x08009838

08008bc4 <__retarget_lock_acquire_recursive>:
 8008bc4:	4770      	bx	lr

08008bc6 <__retarget_lock_release_recursive>:
 8008bc6:	4770      	bx	lr

08008bc8 <_free_r>:
 8008bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bca:	2900      	cmp	r1, #0
 8008bcc:	d044      	beq.n	8008c58 <_free_r+0x90>
 8008bce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bd2:	9001      	str	r0, [sp, #4]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f1a1 0404 	sub.w	r4, r1, #4
 8008bda:	bfb8      	it	lt
 8008bdc:	18e4      	addlt	r4, r4, r3
 8008bde:	f000 f8df 	bl	8008da0 <__malloc_lock>
 8008be2:	4a1e      	ldr	r2, [pc, #120]	; (8008c5c <_free_r+0x94>)
 8008be4:	9801      	ldr	r0, [sp, #4]
 8008be6:	6813      	ldr	r3, [r2, #0]
 8008be8:	b933      	cbnz	r3, 8008bf8 <_free_r+0x30>
 8008bea:	6063      	str	r3, [r4, #4]
 8008bec:	6014      	str	r4, [r2, #0]
 8008bee:	b003      	add	sp, #12
 8008bf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bf4:	f000 b8da 	b.w	8008dac <__malloc_unlock>
 8008bf8:	42a3      	cmp	r3, r4
 8008bfa:	d908      	bls.n	8008c0e <_free_r+0x46>
 8008bfc:	6825      	ldr	r5, [r4, #0]
 8008bfe:	1961      	adds	r1, r4, r5
 8008c00:	428b      	cmp	r3, r1
 8008c02:	bf01      	itttt	eq
 8008c04:	6819      	ldreq	r1, [r3, #0]
 8008c06:	685b      	ldreq	r3, [r3, #4]
 8008c08:	1949      	addeq	r1, r1, r5
 8008c0a:	6021      	streq	r1, [r4, #0]
 8008c0c:	e7ed      	b.n	8008bea <_free_r+0x22>
 8008c0e:	461a      	mov	r2, r3
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	b10b      	cbz	r3, 8008c18 <_free_r+0x50>
 8008c14:	42a3      	cmp	r3, r4
 8008c16:	d9fa      	bls.n	8008c0e <_free_r+0x46>
 8008c18:	6811      	ldr	r1, [r2, #0]
 8008c1a:	1855      	adds	r5, r2, r1
 8008c1c:	42a5      	cmp	r5, r4
 8008c1e:	d10b      	bne.n	8008c38 <_free_r+0x70>
 8008c20:	6824      	ldr	r4, [r4, #0]
 8008c22:	4421      	add	r1, r4
 8008c24:	1854      	adds	r4, r2, r1
 8008c26:	42a3      	cmp	r3, r4
 8008c28:	6011      	str	r1, [r2, #0]
 8008c2a:	d1e0      	bne.n	8008bee <_free_r+0x26>
 8008c2c:	681c      	ldr	r4, [r3, #0]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	6053      	str	r3, [r2, #4]
 8008c32:	440c      	add	r4, r1
 8008c34:	6014      	str	r4, [r2, #0]
 8008c36:	e7da      	b.n	8008bee <_free_r+0x26>
 8008c38:	d902      	bls.n	8008c40 <_free_r+0x78>
 8008c3a:	230c      	movs	r3, #12
 8008c3c:	6003      	str	r3, [r0, #0]
 8008c3e:	e7d6      	b.n	8008bee <_free_r+0x26>
 8008c40:	6825      	ldr	r5, [r4, #0]
 8008c42:	1961      	adds	r1, r4, r5
 8008c44:	428b      	cmp	r3, r1
 8008c46:	bf04      	itt	eq
 8008c48:	6819      	ldreq	r1, [r3, #0]
 8008c4a:	685b      	ldreq	r3, [r3, #4]
 8008c4c:	6063      	str	r3, [r4, #4]
 8008c4e:	bf04      	itt	eq
 8008c50:	1949      	addeq	r1, r1, r5
 8008c52:	6021      	streq	r1, [r4, #0]
 8008c54:	6054      	str	r4, [r2, #4]
 8008c56:	e7ca      	b.n	8008bee <_free_r+0x26>
 8008c58:	b003      	add	sp, #12
 8008c5a:	bd30      	pop	{r4, r5, pc}
 8008c5c:	20001fc4 	.word	0x20001fc4

08008c60 <sbrk_aligned>:
 8008c60:	b570      	push	{r4, r5, r6, lr}
 8008c62:	4e0e      	ldr	r6, [pc, #56]	; (8008c9c <sbrk_aligned+0x3c>)
 8008c64:	460c      	mov	r4, r1
 8008c66:	6831      	ldr	r1, [r6, #0]
 8008c68:	4605      	mov	r5, r0
 8008c6a:	b911      	cbnz	r1, 8008c72 <sbrk_aligned+0x12>
 8008c6c:	f000 fcbc 	bl	80095e8 <_sbrk_r>
 8008c70:	6030      	str	r0, [r6, #0]
 8008c72:	4621      	mov	r1, r4
 8008c74:	4628      	mov	r0, r5
 8008c76:	f000 fcb7 	bl	80095e8 <_sbrk_r>
 8008c7a:	1c43      	adds	r3, r0, #1
 8008c7c:	d00a      	beq.n	8008c94 <sbrk_aligned+0x34>
 8008c7e:	1cc4      	adds	r4, r0, #3
 8008c80:	f024 0403 	bic.w	r4, r4, #3
 8008c84:	42a0      	cmp	r0, r4
 8008c86:	d007      	beq.n	8008c98 <sbrk_aligned+0x38>
 8008c88:	1a21      	subs	r1, r4, r0
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	f000 fcac 	bl	80095e8 <_sbrk_r>
 8008c90:	3001      	adds	r0, #1
 8008c92:	d101      	bne.n	8008c98 <sbrk_aligned+0x38>
 8008c94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008c98:	4620      	mov	r0, r4
 8008c9a:	bd70      	pop	{r4, r5, r6, pc}
 8008c9c:	20001fc8 	.word	0x20001fc8

08008ca0 <_malloc_r>:
 8008ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ca4:	1ccd      	adds	r5, r1, #3
 8008ca6:	f025 0503 	bic.w	r5, r5, #3
 8008caa:	3508      	adds	r5, #8
 8008cac:	2d0c      	cmp	r5, #12
 8008cae:	bf38      	it	cc
 8008cb0:	250c      	movcc	r5, #12
 8008cb2:	2d00      	cmp	r5, #0
 8008cb4:	4607      	mov	r7, r0
 8008cb6:	db01      	blt.n	8008cbc <_malloc_r+0x1c>
 8008cb8:	42a9      	cmp	r1, r5
 8008cba:	d905      	bls.n	8008cc8 <_malloc_r+0x28>
 8008cbc:	230c      	movs	r3, #12
 8008cbe:	603b      	str	r3, [r7, #0]
 8008cc0:	2600      	movs	r6, #0
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008d9c <_malloc_r+0xfc>
 8008ccc:	f000 f868 	bl	8008da0 <__malloc_lock>
 8008cd0:	f8d8 3000 	ldr.w	r3, [r8]
 8008cd4:	461c      	mov	r4, r3
 8008cd6:	bb5c      	cbnz	r4, 8008d30 <_malloc_r+0x90>
 8008cd8:	4629      	mov	r1, r5
 8008cda:	4638      	mov	r0, r7
 8008cdc:	f7ff ffc0 	bl	8008c60 <sbrk_aligned>
 8008ce0:	1c43      	adds	r3, r0, #1
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	d155      	bne.n	8008d92 <_malloc_r+0xf2>
 8008ce6:	f8d8 4000 	ldr.w	r4, [r8]
 8008cea:	4626      	mov	r6, r4
 8008cec:	2e00      	cmp	r6, #0
 8008cee:	d145      	bne.n	8008d7c <_malloc_r+0xdc>
 8008cf0:	2c00      	cmp	r4, #0
 8008cf2:	d048      	beq.n	8008d86 <_malloc_r+0xe6>
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	4631      	mov	r1, r6
 8008cf8:	4638      	mov	r0, r7
 8008cfa:	eb04 0903 	add.w	r9, r4, r3
 8008cfe:	f000 fc73 	bl	80095e8 <_sbrk_r>
 8008d02:	4581      	cmp	r9, r0
 8008d04:	d13f      	bne.n	8008d86 <_malloc_r+0xe6>
 8008d06:	6821      	ldr	r1, [r4, #0]
 8008d08:	1a6d      	subs	r5, r5, r1
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	4638      	mov	r0, r7
 8008d0e:	f7ff ffa7 	bl	8008c60 <sbrk_aligned>
 8008d12:	3001      	adds	r0, #1
 8008d14:	d037      	beq.n	8008d86 <_malloc_r+0xe6>
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	442b      	add	r3, r5
 8008d1a:	6023      	str	r3, [r4, #0]
 8008d1c:	f8d8 3000 	ldr.w	r3, [r8]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d038      	beq.n	8008d96 <_malloc_r+0xf6>
 8008d24:	685a      	ldr	r2, [r3, #4]
 8008d26:	42a2      	cmp	r2, r4
 8008d28:	d12b      	bne.n	8008d82 <_malloc_r+0xe2>
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	605a      	str	r2, [r3, #4]
 8008d2e:	e00f      	b.n	8008d50 <_malloc_r+0xb0>
 8008d30:	6822      	ldr	r2, [r4, #0]
 8008d32:	1b52      	subs	r2, r2, r5
 8008d34:	d41f      	bmi.n	8008d76 <_malloc_r+0xd6>
 8008d36:	2a0b      	cmp	r2, #11
 8008d38:	d917      	bls.n	8008d6a <_malloc_r+0xca>
 8008d3a:	1961      	adds	r1, r4, r5
 8008d3c:	42a3      	cmp	r3, r4
 8008d3e:	6025      	str	r5, [r4, #0]
 8008d40:	bf18      	it	ne
 8008d42:	6059      	strne	r1, [r3, #4]
 8008d44:	6863      	ldr	r3, [r4, #4]
 8008d46:	bf08      	it	eq
 8008d48:	f8c8 1000 	streq.w	r1, [r8]
 8008d4c:	5162      	str	r2, [r4, r5]
 8008d4e:	604b      	str	r3, [r1, #4]
 8008d50:	4638      	mov	r0, r7
 8008d52:	f104 060b 	add.w	r6, r4, #11
 8008d56:	f000 f829 	bl	8008dac <__malloc_unlock>
 8008d5a:	f026 0607 	bic.w	r6, r6, #7
 8008d5e:	1d23      	adds	r3, r4, #4
 8008d60:	1af2      	subs	r2, r6, r3
 8008d62:	d0ae      	beq.n	8008cc2 <_malloc_r+0x22>
 8008d64:	1b9b      	subs	r3, r3, r6
 8008d66:	50a3      	str	r3, [r4, r2]
 8008d68:	e7ab      	b.n	8008cc2 <_malloc_r+0x22>
 8008d6a:	42a3      	cmp	r3, r4
 8008d6c:	6862      	ldr	r2, [r4, #4]
 8008d6e:	d1dd      	bne.n	8008d2c <_malloc_r+0x8c>
 8008d70:	f8c8 2000 	str.w	r2, [r8]
 8008d74:	e7ec      	b.n	8008d50 <_malloc_r+0xb0>
 8008d76:	4623      	mov	r3, r4
 8008d78:	6864      	ldr	r4, [r4, #4]
 8008d7a:	e7ac      	b.n	8008cd6 <_malloc_r+0x36>
 8008d7c:	4634      	mov	r4, r6
 8008d7e:	6876      	ldr	r6, [r6, #4]
 8008d80:	e7b4      	b.n	8008cec <_malloc_r+0x4c>
 8008d82:	4613      	mov	r3, r2
 8008d84:	e7cc      	b.n	8008d20 <_malloc_r+0x80>
 8008d86:	230c      	movs	r3, #12
 8008d88:	603b      	str	r3, [r7, #0]
 8008d8a:	4638      	mov	r0, r7
 8008d8c:	f000 f80e 	bl	8008dac <__malloc_unlock>
 8008d90:	e797      	b.n	8008cc2 <_malloc_r+0x22>
 8008d92:	6025      	str	r5, [r4, #0]
 8008d94:	e7dc      	b.n	8008d50 <_malloc_r+0xb0>
 8008d96:	605b      	str	r3, [r3, #4]
 8008d98:	deff      	udf	#255	; 0xff
 8008d9a:	bf00      	nop
 8008d9c:	20001fc4 	.word	0x20001fc4

08008da0 <__malloc_lock>:
 8008da0:	4801      	ldr	r0, [pc, #4]	; (8008da8 <__malloc_lock+0x8>)
 8008da2:	f7ff bf0f 	b.w	8008bc4 <__retarget_lock_acquire_recursive>
 8008da6:	bf00      	nop
 8008da8:	20001fc0 	.word	0x20001fc0

08008dac <__malloc_unlock>:
 8008dac:	4801      	ldr	r0, [pc, #4]	; (8008db4 <__malloc_unlock+0x8>)
 8008dae:	f7ff bf0a 	b.w	8008bc6 <__retarget_lock_release_recursive>
 8008db2:	bf00      	nop
 8008db4:	20001fc0 	.word	0x20001fc0

08008db8 <__sfputc_r>:
 8008db8:	6893      	ldr	r3, [r2, #8]
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	b410      	push	{r4}
 8008dc0:	6093      	str	r3, [r2, #8]
 8008dc2:	da08      	bge.n	8008dd6 <__sfputc_r+0x1e>
 8008dc4:	6994      	ldr	r4, [r2, #24]
 8008dc6:	42a3      	cmp	r3, r4
 8008dc8:	db01      	blt.n	8008dce <__sfputc_r+0x16>
 8008dca:	290a      	cmp	r1, #10
 8008dcc:	d103      	bne.n	8008dd6 <__sfputc_r+0x1e>
 8008dce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dd2:	f000 bb73 	b.w	80094bc <__swbuf_r>
 8008dd6:	6813      	ldr	r3, [r2, #0]
 8008dd8:	1c58      	adds	r0, r3, #1
 8008dda:	6010      	str	r0, [r2, #0]
 8008ddc:	7019      	strb	r1, [r3, #0]
 8008dde:	4608      	mov	r0, r1
 8008de0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <__sfputs_r>:
 8008de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de8:	4606      	mov	r6, r0
 8008dea:	460f      	mov	r7, r1
 8008dec:	4614      	mov	r4, r2
 8008dee:	18d5      	adds	r5, r2, r3
 8008df0:	42ac      	cmp	r4, r5
 8008df2:	d101      	bne.n	8008df8 <__sfputs_r+0x12>
 8008df4:	2000      	movs	r0, #0
 8008df6:	e007      	b.n	8008e08 <__sfputs_r+0x22>
 8008df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dfc:	463a      	mov	r2, r7
 8008dfe:	4630      	mov	r0, r6
 8008e00:	f7ff ffda 	bl	8008db8 <__sfputc_r>
 8008e04:	1c43      	adds	r3, r0, #1
 8008e06:	d1f3      	bne.n	8008df0 <__sfputs_r+0xa>
 8008e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e0c <_vfiprintf_r>:
 8008e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e10:	460d      	mov	r5, r1
 8008e12:	b09d      	sub	sp, #116	; 0x74
 8008e14:	4614      	mov	r4, r2
 8008e16:	4698      	mov	r8, r3
 8008e18:	4606      	mov	r6, r0
 8008e1a:	b118      	cbz	r0, 8008e24 <_vfiprintf_r+0x18>
 8008e1c:	6a03      	ldr	r3, [r0, #32]
 8008e1e:	b90b      	cbnz	r3, 8008e24 <_vfiprintf_r+0x18>
 8008e20:	f7ff fdcc 	bl	80089bc <__sinit>
 8008e24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e26:	07d9      	lsls	r1, r3, #31
 8008e28:	d405      	bmi.n	8008e36 <_vfiprintf_r+0x2a>
 8008e2a:	89ab      	ldrh	r3, [r5, #12]
 8008e2c:	059a      	lsls	r2, r3, #22
 8008e2e:	d402      	bmi.n	8008e36 <_vfiprintf_r+0x2a>
 8008e30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e32:	f7ff fec7 	bl	8008bc4 <__retarget_lock_acquire_recursive>
 8008e36:	89ab      	ldrh	r3, [r5, #12]
 8008e38:	071b      	lsls	r3, r3, #28
 8008e3a:	d501      	bpl.n	8008e40 <_vfiprintf_r+0x34>
 8008e3c:	692b      	ldr	r3, [r5, #16]
 8008e3e:	b99b      	cbnz	r3, 8008e68 <_vfiprintf_r+0x5c>
 8008e40:	4629      	mov	r1, r5
 8008e42:	4630      	mov	r0, r6
 8008e44:	f000 fb78 	bl	8009538 <__swsetup_r>
 8008e48:	b170      	cbz	r0, 8008e68 <_vfiprintf_r+0x5c>
 8008e4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e4c:	07dc      	lsls	r4, r3, #31
 8008e4e:	d504      	bpl.n	8008e5a <_vfiprintf_r+0x4e>
 8008e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e54:	b01d      	add	sp, #116	; 0x74
 8008e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e5a:	89ab      	ldrh	r3, [r5, #12]
 8008e5c:	0598      	lsls	r0, r3, #22
 8008e5e:	d4f7      	bmi.n	8008e50 <_vfiprintf_r+0x44>
 8008e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e62:	f7ff feb0 	bl	8008bc6 <__retarget_lock_release_recursive>
 8008e66:	e7f3      	b.n	8008e50 <_vfiprintf_r+0x44>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e6c:	2320      	movs	r3, #32
 8008e6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e72:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e76:	2330      	movs	r3, #48	; 0x30
 8008e78:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800902c <_vfiprintf_r+0x220>
 8008e7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e80:	f04f 0901 	mov.w	r9, #1
 8008e84:	4623      	mov	r3, r4
 8008e86:	469a      	mov	sl, r3
 8008e88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e8c:	b10a      	cbz	r2, 8008e92 <_vfiprintf_r+0x86>
 8008e8e:	2a25      	cmp	r2, #37	; 0x25
 8008e90:	d1f9      	bne.n	8008e86 <_vfiprintf_r+0x7a>
 8008e92:	ebba 0b04 	subs.w	fp, sl, r4
 8008e96:	d00b      	beq.n	8008eb0 <_vfiprintf_r+0xa4>
 8008e98:	465b      	mov	r3, fp
 8008e9a:	4622      	mov	r2, r4
 8008e9c:	4629      	mov	r1, r5
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	f7ff ffa1 	bl	8008de6 <__sfputs_r>
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	f000 80a9 	beq.w	8008ffc <_vfiprintf_r+0x1f0>
 8008eaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eac:	445a      	add	r2, fp
 8008eae:	9209      	str	r2, [sp, #36]	; 0x24
 8008eb0:	f89a 3000 	ldrb.w	r3, [sl]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	f000 80a1 	beq.w	8008ffc <_vfiprintf_r+0x1f0>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ec0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ec4:	f10a 0a01 	add.w	sl, sl, #1
 8008ec8:	9304      	str	r3, [sp, #16]
 8008eca:	9307      	str	r3, [sp, #28]
 8008ecc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ed0:	931a      	str	r3, [sp, #104]	; 0x68
 8008ed2:	4654      	mov	r4, sl
 8008ed4:	2205      	movs	r2, #5
 8008ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eda:	4854      	ldr	r0, [pc, #336]	; (800902c <_vfiprintf_r+0x220>)
 8008edc:	f7f7 f978 	bl	80001d0 <memchr>
 8008ee0:	9a04      	ldr	r2, [sp, #16]
 8008ee2:	b9d8      	cbnz	r0, 8008f1c <_vfiprintf_r+0x110>
 8008ee4:	06d1      	lsls	r1, r2, #27
 8008ee6:	bf44      	itt	mi
 8008ee8:	2320      	movmi	r3, #32
 8008eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eee:	0713      	lsls	r3, r2, #28
 8008ef0:	bf44      	itt	mi
 8008ef2:	232b      	movmi	r3, #43	; 0x2b
 8008ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8008efc:	2b2a      	cmp	r3, #42	; 0x2a
 8008efe:	d015      	beq.n	8008f2c <_vfiprintf_r+0x120>
 8008f00:	9a07      	ldr	r2, [sp, #28]
 8008f02:	4654      	mov	r4, sl
 8008f04:	2000      	movs	r0, #0
 8008f06:	f04f 0c0a 	mov.w	ip, #10
 8008f0a:	4621      	mov	r1, r4
 8008f0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f10:	3b30      	subs	r3, #48	; 0x30
 8008f12:	2b09      	cmp	r3, #9
 8008f14:	d94d      	bls.n	8008fb2 <_vfiprintf_r+0x1a6>
 8008f16:	b1b0      	cbz	r0, 8008f46 <_vfiprintf_r+0x13a>
 8008f18:	9207      	str	r2, [sp, #28]
 8008f1a:	e014      	b.n	8008f46 <_vfiprintf_r+0x13a>
 8008f1c:	eba0 0308 	sub.w	r3, r0, r8
 8008f20:	fa09 f303 	lsl.w	r3, r9, r3
 8008f24:	4313      	orrs	r3, r2
 8008f26:	9304      	str	r3, [sp, #16]
 8008f28:	46a2      	mov	sl, r4
 8008f2a:	e7d2      	b.n	8008ed2 <_vfiprintf_r+0xc6>
 8008f2c:	9b03      	ldr	r3, [sp, #12]
 8008f2e:	1d19      	adds	r1, r3, #4
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	9103      	str	r1, [sp, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	bfbb      	ittet	lt
 8008f38:	425b      	neglt	r3, r3
 8008f3a:	f042 0202 	orrlt.w	r2, r2, #2
 8008f3e:	9307      	strge	r3, [sp, #28]
 8008f40:	9307      	strlt	r3, [sp, #28]
 8008f42:	bfb8      	it	lt
 8008f44:	9204      	strlt	r2, [sp, #16]
 8008f46:	7823      	ldrb	r3, [r4, #0]
 8008f48:	2b2e      	cmp	r3, #46	; 0x2e
 8008f4a:	d10c      	bne.n	8008f66 <_vfiprintf_r+0x15a>
 8008f4c:	7863      	ldrb	r3, [r4, #1]
 8008f4e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f50:	d134      	bne.n	8008fbc <_vfiprintf_r+0x1b0>
 8008f52:	9b03      	ldr	r3, [sp, #12]
 8008f54:	1d1a      	adds	r2, r3, #4
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	9203      	str	r2, [sp, #12]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	bfb8      	it	lt
 8008f5e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008f62:	3402      	adds	r4, #2
 8008f64:	9305      	str	r3, [sp, #20]
 8008f66:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800903c <_vfiprintf_r+0x230>
 8008f6a:	7821      	ldrb	r1, [r4, #0]
 8008f6c:	2203      	movs	r2, #3
 8008f6e:	4650      	mov	r0, sl
 8008f70:	f7f7 f92e 	bl	80001d0 <memchr>
 8008f74:	b138      	cbz	r0, 8008f86 <_vfiprintf_r+0x17a>
 8008f76:	9b04      	ldr	r3, [sp, #16]
 8008f78:	eba0 000a 	sub.w	r0, r0, sl
 8008f7c:	2240      	movs	r2, #64	; 0x40
 8008f7e:	4082      	lsls	r2, r0
 8008f80:	4313      	orrs	r3, r2
 8008f82:	3401      	adds	r4, #1
 8008f84:	9304      	str	r3, [sp, #16]
 8008f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f8a:	4829      	ldr	r0, [pc, #164]	; (8009030 <_vfiprintf_r+0x224>)
 8008f8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f90:	2206      	movs	r2, #6
 8008f92:	f7f7 f91d 	bl	80001d0 <memchr>
 8008f96:	2800      	cmp	r0, #0
 8008f98:	d03f      	beq.n	800901a <_vfiprintf_r+0x20e>
 8008f9a:	4b26      	ldr	r3, [pc, #152]	; (8009034 <_vfiprintf_r+0x228>)
 8008f9c:	bb1b      	cbnz	r3, 8008fe6 <_vfiprintf_r+0x1da>
 8008f9e:	9b03      	ldr	r3, [sp, #12]
 8008fa0:	3307      	adds	r3, #7
 8008fa2:	f023 0307 	bic.w	r3, r3, #7
 8008fa6:	3308      	adds	r3, #8
 8008fa8:	9303      	str	r3, [sp, #12]
 8008faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fac:	443b      	add	r3, r7
 8008fae:	9309      	str	r3, [sp, #36]	; 0x24
 8008fb0:	e768      	b.n	8008e84 <_vfiprintf_r+0x78>
 8008fb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	2001      	movs	r0, #1
 8008fba:	e7a6      	b.n	8008f0a <_vfiprintf_r+0xfe>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	3401      	adds	r4, #1
 8008fc0:	9305      	str	r3, [sp, #20]
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	f04f 0c0a 	mov.w	ip, #10
 8008fc8:	4620      	mov	r0, r4
 8008fca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fce:	3a30      	subs	r2, #48	; 0x30
 8008fd0:	2a09      	cmp	r2, #9
 8008fd2:	d903      	bls.n	8008fdc <_vfiprintf_r+0x1d0>
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d0c6      	beq.n	8008f66 <_vfiprintf_r+0x15a>
 8008fd8:	9105      	str	r1, [sp, #20]
 8008fda:	e7c4      	b.n	8008f66 <_vfiprintf_r+0x15a>
 8008fdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e7f0      	b.n	8008fc8 <_vfiprintf_r+0x1bc>
 8008fe6:	ab03      	add	r3, sp, #12
 8008fe8:	9300      	str	r3, [sp, #0]
 8008fea:	462a      	mov	r2, r5
 8008fec:	4b12      	ldr	r3, [pc, #72]	; (8009038 <_vfiprintf_r+0x22c>)
 8008fee:	a904      	add	r1, sp, #16
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	f3af 8000 	nop.w
 8008ff6:	4607      	mov	r7, r0
 8008ff8:	1c78      	adds	r0, r7, #1
 8008ffa:	d1d6      	bne.n	8008faa <_vfiprintf_r+0x19e>
 8008ffc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ffe:	07d9      	lsls	r1, r3, #31
 8009000:	d405      	bmi.n	800900e <_vfiprintf_r+0x202>
 8009002:	89ab      	ldrh	r3, [r5, #12]
 8009004:	059a      	lsls	r2, r3, #22
 8009006:	d402      	bmi.n	800900e <_vfiprintf_r+0x202>
 8009008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800900a:	f7ff fddc 	bl	8008bc6 <__retarget_lock_release_recursive>
 800900e:	89ab      	ldrh	r3, [r5, #12]
 8009010:	065b      	lsls	r3, r3, #25
 8009012:	f53f af1d 	bmi.w	8008e50 <_vfiprintf_r+0x44>
 8009016:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009018:	e71c      	b.n	8008e54 <_vfiprintf_r+0x48>
 800901a:	ab03      	add	r3, sp, #12
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	462a      	mov	r2, r5
 8009020:	4b05      	ldr	r3, [pc, #20]	; (8009038 <_vfiprintf_r+0x22c>)
 8009022:	a904      	add	r1, sp, #16
 8009024:	4630      	mov	r0, r6
 8009026:	f000 f879 	bl	800911c <_printf_i>
 800902a:	e7e4      	b.n	8008ff6 <_vfiprintf_r+0x1ea>
 800902c:	080097f8 	.word	0x080097f8
 8009030:	08009802 	.word	0x08009802
 8009034:	00000000 	.word	0x00000000
 8009038:	08008de7 	.word	0x08008de7
 800903c:	080097fe 	.word	0x080097fe

08009040 <_printf_common>:
 8009040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009044:	4616      	mov	r6, r2
 8009046:	4699      	mov	r9, r3
 8009048:	688a      	ldr	r2, [r1, #8]
 800904a:	690b      	ldr	r3, [r1, #16]
 800904c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009050:	4293      	cmp	r3, r2
 8009052:	bfb8      	it	lt
 8009054:	4613      	movlt	r3, r2
 8009056:	6033      	str	r3, [r6, #0]
 8009058:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800905c:	4607      	mov	r7, r0
 800905e:	460c      	mov	r4, r1
 8009060:	b10a      	cbz	r2, 8009066 <_printf_common+0x26>
 8009062:	3301      	adds	r3, #1
 8009064:	6033      	str	r3, [r6, #0]
 8009066:	6823      	ldr	r3, [r4, #0]
 8009068:	0699      	lsls	r1, r3, #26
 800906a:	bf42      	ittt	mi
 800906c:	6833      	ldrmi	r3, [r6, #0]
 800906e:	3302      	addmi	r3, #2
 8009070:	6033      	strmi	r3, [r6, #0]
 8009072:	6825      	ldr	r5, [r4, #0]
 8009074:	f015 0506 	ands.w	r5, r5, #6
 8009078:	d106      	bne.n	8009088 <_printf_common+0x48>
 800907a:	f104 0a19 	add.w	sl, r4, #25
 800907e:	68e3      	ldr	r3, [r4, #12]
 8009080:	6832      	ldr	r2, [r6, #0]
 8009082:	1a9b      	subs	r3, r3, r2
 8009084:	42ab      	cmp	r3, r5
 8009086:	dc26      	bgt.n	80090d6 <_printf_common+0x96>
 8009088:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800908c:	1e13      	subs	r3, r2, #0
 800908e:	6822      	ldr	r2, [r4, #0]
 8009090:	bf18      	it	ne
 8009092:	2301      	movne	r3, #1
 8009094:	0692      	lsls	r2, r2, #26
 8009096:	d42b      	bmi.n	80090f0 <_printf_common+0xb0>
 8009098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800909c:	4649      	mov	r1, r9
 800909e:	4638      	mov	r0, r7
 80090a0:	47c0      	blx	r8
 80090a2:	3001      	adds	r0, #1
 80090a4:	d01e      	beq.n	80090e4 <_printf_common+0xa4>
 80090a6:	6823      	ldr	r3, [r4, #0]
 80090a8:	6922      	ldr	r2, [r4, #16]
 80090aa:	f003 0306 	and.w	r3, r3, #6
 80090ae:	2b04      	cmp	r3, #4
 80090b0:	bf02      	ittt	eq
 80090b2:	68e5      	ldreq	r5, [r4, #12]
 80090b4:	6833      	ldreq	r3, [r6, #0]
 80090b6:	1aed      	subeq	r5, r5, r3
 80090b8:	68a3      	ldr	r3, [r4, #8]
 80090ba:	bf0c      	ite	eq
 80090bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090c0:	2500      	movne	r5, #0
 80090c2:	4293      	cmp	r3, r2
 80090c4:	bfc4      	itt	gt
 80090c6:	1a9b      	subgt	r3, r3, r2
 80090c8:	18ed      	addgt	r5, r5, r3
 80090ca:	2600      	movs	r6, #0
 80090cc:	341a      	adds	r4, #26
 80090ce:	42b5      	cmp	r5, r6
 80090d0:	d11a      	bne.n	8009108 <_printf_common+0xc8>
 80090d2:	2000      	movs	r0, #0
 80090d4:	e008      	b.n	80090e8 <_printf_common+0xa8>
 80090d6:	2301      	movs	r3, #1
 80090d8:	4652      	mov	r2, sl
 80090da:	4649      	mov	r1, r9
 80090dc:	4638      	mov	r0, r7
 80090de:	47c0      	blx	r8
 80090e0:	3001      	adds	r0, #1
 80090e2:	d103      	bne.n	80090ec <_printf_common+0xac>
 80090e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ec:	3501      	adds	r5, #1
 80090ee:	e7c6      	b.n	800907e <_printf_common+0x3e>
 80090f0:	18e1      	adds	r1, r4, r3
 80090f2:	1c5a      	adds	r2, r3, #1
 80090f4:	2030      	movs	r0, #48	; 0x30
 80090f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090fa:	4422      	add	r2, r4
 80090fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009100:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009104:	3302      	adds	r3, #2
 8009106:	e7c7      	b.n	8009098 <_printf_common+0x58>
 8009108:	2301      	movs	r3, #1
 800910a:	4622      	mov	r2, r4
 800910c:	4649      	mov	r1, r9
 800910e:	4638      	mov	r0, r7
 8009110:	47c0      	blx	r8
 8009112:	3001      	adds	r0, #1
 8009114:	d0e6      	beq.n	80090e4 <_printf_common+0xa4>
 8009116:	3601      	adds	r6, #1
 8009118:	e7d9      	b.n	80090ce <_printf_common+0x8e>
	...

0800911c <_printf_i>:
 800911c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009120:	7e0f      	ldrb	r7, [r1, #24]
 8009122:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009124:	2f78      	cmp	r7, #120	; 0x78
 8009126:	4691      	mov	r9, r2
 8009128:	4680      	mov	r8, r0
 800912a:	460c      	mov	r4, r1
 800912c:	469a      	mov	sl, r3
 800912e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009132:	d807      	bhi.n	8009144 <_printf_i+0x28>
 8009134:	2f62      	cmp	r7, #98	; 0x62
 8009136:	d80a      	bhi.n	800914e <_printf_i+0x32>
 8009138:	2f00      	cmp	r7, #0
 800913a:	f000 80d4 	beq.w	80092e6 <_printf_i+0x1ca>
 800913e:	2f58      	cmp	r7, #88	; 0x58
 8009140:	f000 80c0 	beq.w	80092c4 <_printf_i+0x1a8>
 8009144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800914c:	e03a      	b.n	80091c4 <_printf_i+0xa8>
 800914e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009152:	2b15      	cmp	r3, #21
 8009154:	d8f6      	bhi.n	8009144 <_printf_i+0x28>
 8009156:	a101      	add	r1, pc, #4	; (adr r1, 800915c <_printf_i+0x40>)
 8009158:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800915c:	080091b5 	.word	0x080091b5
 8009160:	080091c9 	.word	0x080091c9
 8009164:	08009145 	.word	0x08009145
 8009168:	08009145 	.word	0x08009145
 800916c:	08009145 	.word	0x08009145
 8009170:	08009145 	.word	0x08009145
 8009174:	080091c9 	.word	0x080091c9
 8009178:	08009145 	.word	0x08009145
 800917c:	08009145 	.word	0x08009145
 8009180:	08009145 	.word	0x08009145
 8009184:	08009145 	.word	0x08009145
 8009188:	080092cd 	.word	0x080092cd
 800918c:	080091f5 	.word	0x080091f5
 8009190:	08009287 	.word	0x08009287
 8009194:	08009145 	.word	0x08009145
 8009198:	08009145 	.word	0x08009145
 800919c:	080092ef 	.word	0x080092ef
 80091a0:	08009145 	.word	0x08009145
 80091a4:	080091f5 	.word	0x080091f5
 80091a8:	08009145 	.word	0x08009145
 80091ac:	08009145 	.word	0x08009145
 80091b0:	0800928f 	.word	0x0800928f
 80091b4:	682b      	ldr	r3, [r5, #0]
 80091b6:	1d1a      	adds	r2, r3, #4
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	602a      	str	r2, [r5, #0]
 80091bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091c4:	2301      	movs	r3, #1
 80091c6:	e09f      	b.n	8009308 <_printf_i+0x1ec>
 80091c8:	6820      	ldr	r0, [r4, #0]
 80091ca:	682b      	ldr	r3, [r5, #0]
 80091cc:	0607      	lsls	r7, r0, #24
 80091ce:	f103 0104 	add.w	r1, r3, #4
 80091d2:	6029      	str	r1, [r5, #0]
 80091d4:	d501      	bpl.n	80091da <_printf_i+0xbe>
 80091d6:	681e      	ldr	r6, [r3, #0]
 80091d8:	e003      	b.n	80091e2 <_printf_i+0xc6>
 80091da:	0646      	lsls	r6, r0, #25
 80091dc:	d5fb      	bpl.n	80091d6 <_printf_i+0xba>
 80091de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80091e2:	2e00      	cmp	r6, #0
 80091e4:	da03      	bge.n	80091ee <_printf_i+0xd2>
 80091e6:	232d      	movs	r3, #45	; 0x2d
 80091e8:	4276      	negs	r6, r6
 80091ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091ee:	485a      	ldr	r0, [pc, #360]	; (8009358 <_printf_i+0x23c>)
 80091f0:	230a      	movs	r3, #10
 80091f2:	e012      	b.n	800921a <_printf_i+0xfe>
 80091f4:	682b      	ldr	r3, [r5, #0]
 80091f6:	6820      	ldr	r0, [r4, #0]
 80091f8:	1d19      	adds	r1, r3, #4
 80091fa:	6029      	str	r1, [r5, #0]
 80091fc:	0605      	lsls	r5, r0, #24
 80091fe:	d501      	bpl.n	8009204 <_printf_i+0xe8>
 8009200:	681e      	ldr	r6, [r3, #0]
 8009202:	e002      	b.n	800920a <_printf_i+0xee>
 8009204:	0641      	lsls	r1, r0, #25
 8009206:	d5fb      	bpl.n	8009200 <_printf_i+0xe4>
 8009208:	881e      	ldrh	r6, [r3, #0]
 800920a:	4853      	ldr	r0, [pc, #332]	; (8009358 <_printf_i+0x23c>)
 800920c:	2f6f      	cmp	r7, #111	; 0x6f
 800920e:	bf0c      	ite	eq
 8009210:	2308      	moveq	r3, #8
 8009212:	230a      	movne	r3, #10
 8009214:	2100      	movs	r1, #0
 8009216:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800921a:	6865      	ldr	r5, [r4, #4]
 800921c:	60a5      	str	r5, [r4, #8]
 800921e:	2d00      	cmp	r5, #0
 8009220:	bfa2      	ittt	ge
 8009222:	6821      	ldrge	r1, [r4, #0]
 8009224:	f021 0104 	bicge.w	r1, r1, #4
 8009228:	6021      	strge	r1, [r4, #0]
 800922a:	b90e      	cbnz	r6, 8009230 <_printf_i+0x114>
 800922c:	2d00      	cmp	r5, #0
 800922e:	d04b      	beq.n	80092c8 <_printf_i+0x1ac>
 8009230:	4615      	mov	r5, r2
 8009232:	fbb6 f1f3 	udiv	r1, r6, r3
 8009236:	fb03 6711 	mls	r7, r3, r1, r6
 800923a:	5dc7      	ldrb	r7, [r0, r7]
 800923c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009240:	4637      	mov	r7, r6
 8009242:	42bb      	cmp	r3, r7
 8009244:	460e      	mov	r6, r1
 8009246:	d9f4      	bls.n	8009232 <_printf_i+0x116>
 8009248:	2b08      	cmp	r3, #8
 800924a:	d10b      	bne.n	8009264 <_printf_i+0x148>
 800924c:	6823      	ldr	r3, [r4, #0]
 800924e:	07de      	lsls	r6, r3, #31
 8009250:	d508      	bpl.n	8009264 <_printf_i+0x148>
 8009252:	6923      	ldr	r3, [r4, #16]
 8009254:	6861      	ldr	r1, [r4, #4]
 8009256:	4299      	cmp	r1, r3
 8009258:	bfde      	ittt	le
 800925a:	2330      	movle	r3, #48	; 0x30
 800925c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009260:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009264:	1b52      	subs	r2, r2, r5
 8009266:	6122      	str	r2, [r4, #16]
 8009268:	f8cd a000 	str.w	sl, [sp]
 800926c:	464b      	mov	r3, r9
 800926e:	aa03      	add	r2, sp, #12
 8009270:	4621      	mov	r1, r4
 8009272:	4640      	mov	r0, r8
 8009274:	f7ff fee4 	bl	8009040 <_printf_common>
 8009278:	3001      	adds	r0, #1
 800927a:	d14a      	bne.n	8009312 <_printf_i+0x1f6>
 800927c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009280:	b004      	add	sp, #16
 8009282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009286:	6823      	ldr	r3, [r4, #0]
 8009288:	f043 0320 	orr.w	r3, r3, #32
 800928c:	6023      	str	r3, [r4, #0]
 800928e:	4833      	ldr	r0, [pc, #204]	; (800935c <_printf_i+0x240>)
 8009290:	2778      	movs	r7, #120	; 0x78
 8009292:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	6829      	ldr	r1, [r5, #0]
 800929a:	061f      	lsls	r7, r3, #24
 800929c:	f851 6b04 	ldr.w	r6, [r1], #4
 80092a0:	d402      	bmi.n	80092a8 <_printf_i+0x18c>
 80092a2:	065f      	lsls	r7, r3, #25
 80092a4:	bf48      	it	mi
 80092a6:	b2b6      	uxthmi	r6, r6
 80092a8:	07df      	lsls	r7, r3, #31
 80092aa:	bf48      	it	mi
 80092ac:	f043 0320 	orrmi.w	r3, r3, #32
 80092b0:	6029      	str	r1, [r5, #0]
 80092b2:	bf48      	it	mi
 80092b4:	6023      	strmi	r3, [r4, #0]
 80092b6:	b91e      	cbnz	r6, 80092c0 <_printf_i+0x1a4>
 80092b8:	6823      	ldr	r3, [r4, #0]
 80092ba:	f023 0320 	bic.w	r3, r3, #32
 80092be:	6023      	str	r3, [r4, #0]
 80092c0:	2310      	movs	r3, #16
 80092c2:	e7a7      	b.n	8009214 <_printf_i+0xf8>
 80092c4:	4824      	ldr	r0, [pc, #144]	; (8009358 <_printf_i+0x23c>)
 80092c6:	e7e4      	b.n	8009292 <_printf_i+0x176>
 80092c8:	4615      	mov	r5, r2
 80092ca:	e7bd      	b.n	8009248 <_printf_i+0x12c>
 80092cc:	682b      	ldr	r3, [r5, #0]
 80092ce:	6826      	ldr	r6, [r4, #0]
 80092d0:	6961      	ldr	r1, [r4, #20]
 80092d2:	1d18      	adds	r0, r3, #4
 80092d4:	6028      	str	r0, [r5, #0]
 80092d6:	0635      	lsls	r5, r6, #24
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	d501      	bpl.n	80092e0 <_printf_i+0x1c4>
 80092dc:	6019      	str	r1, [r3, #0]
 80092de:	e002      	b.n	80092e6 <_printf_i+0x1ca>
 80092e0:	0670      	lsls	r0, r6, #25
 80092e2:	d5fb      	bpl.n	80092dc <_printf_i+0x1c0>
 80092e4:	8019      	strh	r1, [r3, #0]
 80092e6:	2300      	movs	r3, #0
 80092e8:	6123      	str	r3, [r4, #16]
 80092ea:	4615      	mov	r5, r2
 80092ec:	e7bc      	b.n	8009268 <_printf_i+0x14c>
 80092ee:	682b      	ldr	r3, [r5, #0]
 80092f0:	1d1a      	adds	r2, r3, #4
 80092f2:	602a      	str	r2, [r5, #0]
 80092f4:	681d      	ldr	r5, [r3, #0]
 80092f6:	6862      	ldr	r2, [r4, #4]
 80092f8:	2100      	movs	r1, #0
 80092fa:	4628      	mov	r0, r5
 80092fc:	f7f6 ff68 	bl	80001d0 <memchr>
 8009300:	b108      	cbz	r0, 8009306 <_printf_i+0x1ea>
 8009302:	1b40      	subs	r0, r0, r5
 8009304:	6060      	str	r0, [r4, #4]
 8009306:	6863      	ldr	r3, [r4, #4]
 8009308:	6123      	str	r3, [r4, #16]
 800930a:	2300      	movs	r3, #0
 800930c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009310:	e7aa      	b.n	8009268 <_printf_i+0x14c>
 8009312:	6923      	ldr	r3, [r4, #16]
 8009314:	462a      	mov	r2, r5
 8009316:	4649      	mov	r1, r9
 8009318:	4640      	mov	r0, r8
 800931a:	47d0      	blx	sl
 800931c:	3001      	adds	r0, #1
 800931e:	d0ad      	beq.n	800927c <_printf_i+0x160>
 8009320:	6823      	ldr	r3, [r4, #0]
 8009322:	079b      	lsls	r3, r3, #30
 8009324:	d413      	bmi.n	800934e <_printf_i+0x232>
 8009326:	68e0      	ldr	r0, [r4, #12]
 8009328:	9b03      	ldr	r3, [sp, #12]
 800932a:	4298      	cmp	r0, r3
 800932c:	bfb8      	it	lt
 800932e:	4618      	movlt	r0, r3
 8009330:	e7a6      	b.n	8009280 <_printf_i+0x164>
 8009332:	2301      	movs	r3, #1
 8009334:	4632      	mov	r2, r6
 8009336:	4649      	mov	r1, r9
 8009338:	4640      	mov	r0, r8
 800933a:	47d0      	blx	sl
 800933c:	3001      	adds	r0, #1
 800933e:	d09d      	beq.n	800927c <_printf_i+0x160>
 8009340:	3501      	adds	r5, #1
 8009342:	68e3      	ldr	r3, [r4, #12]
 8009344:	9903      	ldr	r1, [sp, #12]
 8009346:	1a5b      	subs	r3, r3, r1
 8009348:	42ab      	cmp	r3, r5
 800934a:	dcf2      	bgt.n	8009332 <_printf_i+0x216>
 800934c:	e7eb      	b.n	8009326 <_printf_i+0x20a>
 800934e:	2500      	movs	r5, #0
 8009350:	f104 0619 	add.w	r6, r4, #25
 8009354:	e7f5      	b.n	8009342 <_printf_i+0x226>
 8009356:	bf00      	nop
 8009358:	08009809 	.word	0x08009809
 800935c:	0800981a 	.word	0x0800981a

08009360 <__sflush_r>:
 8009360:	898a      	ldrh	r2, [r1, #12]
 8009362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009366:	4605      	mov	r5, r0
 8009368:	0710      	lsls	r0, r2, #28
 800936a:	460c      	mov	r4, r1
 800936c:	d458      	bmi.n	8009420 <__sflush_r+0xc0>
 800936e:	684b      	ldr	r3, [r1, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	dc05      	bgt.n	8009380 <__sflush_r+0x20>
 8009374:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009376:	2b00      	cmp	r3, #0
 8009378:	dc02      	bgt.n	8009380 <__sflush_r+0x20>
 800937a:	2000      	movs	r0, #0
 800937c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009380:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009382:	2e00      	cmp	r6, #0
 8009384:	d0f9      	beq.n	800937a <__sflush_r+0x1a>
 8009386:	2300      	movs	r3, #0
 8009388:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800938c:	682f      	ldr	r7, [r5, #0]
 800938e:	6a21      	ldr	r1, [r4, #32]
 8009390:	602b      	str	r3, [r5, #0]
 8009392:	d032      	beq.n	80093fa <__sflush_r+0x9a>
 8009394:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009396:	89a3      	ldrh	r3, [r4, #12]
 8009398:	075a      	lsls	r2, r3, #29
 800939a:	d505      	bpl.n	80093a8 <__sflush_r+0x48>
 800939c:	6863      	ldr	r3, [r4, #4]
 800939e:	1ac0      	subs	r0, r0, r3
 80093a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093a2:	b10b      	cbz	r3, 80093a8 <__sflush_r+0x48>
 80093a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093a6:	1ac0      	subs	r0, r0, r3
 80093a8:	2300      	movs	r3, #0
 80093aa:	4602      	mov	r2, r0
 80093ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093ae:	6a21      	ldr	r1, [r4, #32]
 80093b0:	4628      	mov	r0, r5
 80093b2:	47b0      	blx	r6
 80093b4:	1c43      	adds	r3, r0, #1
 80093b6:	89a3      	ldrh	r3, [r4, #12]
 80093b8:	d106      	bne.n	80093c8 <__sflush_r+0x68>
 80093ba:	6829      	ldr	r1, [r5, #0]
 80093bc:	291d      	cmp	r1, #29
 80093be:	d82b      	bhi.n	8009418 <__sflush_r+0xb8>
 80093c0:	4a29      	ldr	r2, [pc, #164]	; (8009468 <__sflush_r+0x108>)
 80093c2:	410a      	asrs	r2, r1
 80093c4:	07d6      	lsls	r6, r2, #31
 80093c6:	d427      	bmi.n	8009418 <__sflush_r+0xb8>
 80093c8:	2200      	movs	r2, #0
 80093ca:	6062      	str	r2, [r4, #4]
 80093cc:	04d9      	lsls	r1, r3, #19
 80093ce:	6922      	ldr	r2, [r4, #16]
 80093d0:	6022      	str	r2, [r4, #0]
 80093d2:	d504      	bpl.n	80093de <__sflush_r+0x7e>
 80093d4:	1c42      	adds	r2, r0, #1
 80093d6:	d101      	bne.n	80093dc <__sflush_r+0x7c>
 80093d8:	682b      	ldr	r3, [r5, #0]
 80093da:	b903      	cbnz	r3, 80093de <__sflush_r+0x7e>
 80093dc:	6560      	str	r0, [r4, #84]	; 0x54
 80093de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093e0:	602f      	str	r7, [r5, #0]
 80093e2:	2900      	cmp	r1, #0
 80093e4:	d0c9      	beq.n	800937a <__sflush_r+0x1a>
 80093e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093ea:	4299      	cmp	r1, r3
 80093ec:	d002      	beq.n	80093f4 <__sflush_r+0x94>
 80093ee:	4628      	mov	r0, r5
 80093f0:	f7ff fbea 	bl	8008bc8 <_free_r>
 80093f4:	2000      	movs	r0, #0
 80093f6:	6360      	str	r0, [r4, #52]	; 0x34
 80093f8:	e7c0      	b.n	800937c <__sflush_r+0x1c>
 80093fa:	2301      	movs	r3, #1
 80093fc:	4628      	mov	r0, r5
 80093fe:	47b0      	blx	r6
 8009400:	1c41      	adds	r1, r0, #1
 8009402:	d1c8      	bne.n	8009396 <__sflush_r+0x36>
 8009404:	682b      	ldr	r3, [r5, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d0c5      	beq.n	8009396 <__sflush_r+0x36>
 800940a:	2b1d      	cmp	r3, #29
 800940c:	d001      	beq.n	8009412 <__sflush_r+0xb2>
 800940e:	2b16      	cmp	r3, #22
 8009410:	d101      	bne.n	8009416 <__sflush_r+0xb6>
 8009412:	602f      	str	r7, [r5, #0]
 8009414:	e7b1      	b.n	800937a <__sflush_r+0x1a>
 8009416:	89a3      	ldrh	r3, [r4, #12]
 8009418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800941c:	81a3      	strh	r3, [r4, #12]
 800941e:	e7ad      	b.n	800937c <__sflush_r+0x1c>
 8009420:	690f      	ldr	r7, [r1, #16]
 8009422:	2f00      	cmp	r7, #0
 8009424:	d0a9      	beq.n	800937a <__sflush_r+0x1a>
 8009426:	0793      	lsls	r3, r2, #30
 8009428:	680e      	ldr	r6, [r1, #0]
 800942a:	bf08      	it	eq
 800942c:	694b      	ldreq	r3, [r1, #20]
 800942e:	600f      	str	r7, [r1, #0]
 8009430:	bf18      	it	ne
 8009432:	2300      	movne	r3, #0
 8009434:	eba6 0807 	sub.w	r8, r6, r7
 8009438:	608b      	str	r3, [r1, #8]
 800943a:	f1b8 0f00 	cmp.w	r8, #0
 800943e:	dd9c      	ble.n	800937a <__sflush_r+0x1a>
 8009440:	6a21      	ldr	r1, [r4, #32]
 8009442:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009444:	4643      	mov	r3, r8
 8009446:	463a      	mov	r2, r7
 8009448:	4628      	mov	r0, r5
 800944a:	47b0      	blx	r6
 800944c:	2800      	cmp	r0, #0
 800944e:	dc06      	bgt.n	800945e <__sflush_r+0xfe>
 8009450:	89a3      	ldrh	r3, [r4, #12]
 8009452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009456:	81a3      	strh	r3, [r4, #12]
 8009458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800945c:	e78e      	b.n	800937c <__sflush_r+0x1c>
 800945e:	4407      	add	r7, r0
 8009460:	eba8 0800 	sub.w	r8, r8, r0
 8009464:	e7e9      	b.n	800943a <__sflush_r+0xda>
 8009466:	bf00      	nop
 8009468:	dfbffffe 	.word	0xdfbffffe

0800946c <_fflush_r>:
 800946c:	b538      	push	{r3, r4, r5, lr}
 800946e:	690b      	ldr	r3, [r1, #16]
 8009470:	4605      	mov	r5, r0
 8009472:	460c      	mov	r4, r1
 8009474:	b913      	cbnz	r3, 800947c <_fflush_r+0x10>
 8009476:	2500      	movs	r5, #0
 8009478:	4628      	mov	r0, r5
 800947a:	bd38      	pop	{r3, r4, r5, pc}
 800947c:	b118      	cbz	r0, 8009486 <_fflush_r+0x1a>
 800947e:	6a03      	ldr	r3, [r0, #32]
 8009480:	b90b      	cbnz	r3, 8009486 <_fflush_r+0x1a>
 8009482:	f7ff fa9b 	bl	80089bc <__sinit>
 8009486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d0f3      	beq.n	8009476 <_fflush_r+0xa>
 800948e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009490:	07d0      	lsls	r0, r2, #31
 8009492:	d404      	bmi.n	800949e <_fflush_r+0x32>
 8009494:	0599      	lsls	r1, r3, #22
 8009496:	d402      	bmi.n	800949e <_fflush_r+0x32>
 8009498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800949a:	f7ff fb93 	bl	8008bc4 <__retarget_lock_acquire_recursive>
 800949e:	4628      	mov	r0, r5
 80094a0:	4621      	mov	r1, r4
 80094a2:	f7ff ff5d 	bl	8009360 <__sflush_r>
 80094a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094a8:	07da      	lsls	r2, r3, #31
 80094aa:	4605      	mov	r5, r0
 80094ac:	d4e4      	bmi.n	8009478 <_fflush_r+0xc>
 80094ae:	89a3      	ldrh	r3, [r4, #12]
 80094b0:	059b      	lsls	r3, r3, #22
 80094b2:	d4e1      	bmi.n	8009478 <_fflush_r+0xc>
 80094b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094b6:	f7ff fb86 	bl	8008bc6 <__retarget_lock_release_recursive>
 80094ba:	e7dd      	b.n	8009478 <_fflush_r+0xc>

080094bc <__swbuf_r>:
 80094bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094be:	460e      	mov	r6, r1
 80094c0:	4614      	mov	r4, r2
 80094c2:	4605      	mov	r5, r0
 80094c4:	b118      	cbz	r0, 80094ce <__swbuf_r+0x12>
 80094c6:	6a03      	ldr	r3, [r0, #32]
 80094c8:	b90b      	cbnz	r3, 80094ce <__swbuf_r+0x12>
 80094ca:	f7ff fa77 	bl	80089bc <__sinit>
 80094ce:	69a3      	ldr	r3, [r4, #24]
 80094d0:	60a3      	str	r3, [r4, #8]
 80094d2:	89a3      	ldrh	r3, [r4, #12]
 80094d4:	071a      	lsls	r2, r3, #28
 80094d6:	d525      	bpl.n	8009524 <__swbuf_r+0x68>
 80094d8:	6923      	ldr	r3, [r4, #16]
 80094da:	b31b      	cbz	r3, 8009524 <__swbuf_r+0x68>
 80094dc:	6823      	ldr	r3, [r4, #0]
 80094de:	6922      	ldr	r2, [r4, #16]
 80094e0:	1a98      	subs	r0, r3, r2
 80094e2:	6963      	ldr	r3, [r4, #20]
 80094e4:	b2f6      	uxtb	r6, r6
 80094e6:	4283      	cmp	r3, r0
 80094e8:	4637      	mov	r7, r6
 80094ea:	dc04      	bgt.n	80094f6 <__swbuf_r+0x3a>
 80094ec:	4621      	mov	r1, r4
 80094ee:	4628      	mov	r0, r5
 80094f0:	f7ff ffbc 	bl	800946c <_fflush_r>
 80094f4:	b9e0      	cbnz	r0, 8009530 <__swbuf_r+0x74>
 80094f6:	68a3      	ldr	r3, [r4, #8]
 80094f8:	3b01      	subs	r3, #1
 80094fa:	60a3      	str	r3, [r4, #8]
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	1c5a      	adds	r2, r3, #1
 8009500:	6022      	str	r2, [r4, #0]
 8009502:	701e      	strb	r6, [r3, #0]
 8009504:	6962      	ldr	r2, [r4, #20]
 8009506:	1c43      	adds	r3, r0, #1
 8009508:	429a      	cmp	r2, r3
 800950a:	d004      	beq.n	8009516 <__swbuf_r+0x5a>
 800950c:	89a3      	ldrh	r3, [r4, #12]
 800950e:	07db      	lsls	r3, r3, #31
 8009510:	d506      	bpl.n	8009520 <__swbuf_r+0x64>
 8009512:	2e0a      	cmp	r6, #10
 8009514:	d104      	bne.n	8009520 <__swbuf_r+0x64>
 8009516:	4621      	mov	r1, r4
 8009518:	4628      	mov	r0, r5
 800951a:	f7ff ffa7 	bl	800946c <_fflush_r>
 800951e:	b938      	cbnz	r0, 8009530 <__swbuf_r+0x74>
 8009520:	4638      	mov	r0, r7
 8009522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009524:	4621      	mov	r1, r4
 8009526:	4628      	mov	r0, r5
 8009528:	f000 f806 	bl	8009538 <__swsetup_r>
 800952c:	2800      	cmp	r0, #0
 800952e:	d0d5      	beq.n	80094dc <__swbuf_r+0x20>
 8009530:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009534:	e7f4      	b.n	8009520 <__swbuf_r+0x64>
	...

08009538 <__swsetup_r>:
 8009538:	b538      	push	{r3, r4, r5, lr}
 800953a:	4b2a      	ldr	r3, [pc, #168]	; (80095e4 <__swsetup_r+0xac>)
 800953c:	4605      	mov	r5, r0
 800953e:	6818      	ldr	r0, [r3, #0]
 8009540:	460c      	mov	r4, r1
 8009542:	b118      	cbz	r0, 800954c <__swsetup_r+0x14>
 8009544:	6a03      	ldr	r3, [r0, #32]
 8009546:	b90b      	cbnz	r3, 800954c <__swsetup_r+0x14>
 8009548:	f7ff fa38 	bl	80089bc <__sinit>
 800954c:	89a3      	ldrh	r3, [r4, #12]
 800954e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009552:	0718      	lsls	r0, r3, #28
 8009554:	d422      	bmi.n	800959c <__swsetup_r+0x64>
 8009556:	06d9      	lsls	r1, r3, #27
 8009558:	d407      	bmi.n	800956a <__swsetup_r+0x32>
 800955a:	2309      	movs	r3, #9
 800955c:	602b      	str	r3, [r5, #0]
 800955e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009562:	81a3      	strh	r3, [r4, #12]
 8009564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009568:	e034      	b.n	80095d4 <__swsetup_r+0x9c>
 800956a:	0758      	lsls	r0, r3, #29
 800956c:	d512      	bpl.n	8009594 <__swsetup_r+0x5c>
 800956e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009570:	b141      	cbz	r1, 8009584 <__swsetup_r+0x4c>
 8009572:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009576:	4299      	cmp	r1, r3
 8009578:	d002      	beq.n	8009580 <__swsetup_r+0x48>
 800957a:	4628      	mov	r0, r5
 800957c:	f7ff fb24 	bl	8008bc8 <_free_r>
 8009580:	2300      	movs	r3, #0
 8009582:	6363      	str	r3, [r4, #52]	; 0x34
 8009584:	89a3      	ldrh	r3, [r4, #12]
 8009586:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800958a:	81a3      	strh	r3, [r4, #12]
 800958c:	2300      	movs	r3, #0
 800958e:	6063      	str	r3, [r4, #4]
 8009590:	6923      	ldr	r3, [r4, #16]
 8009592:	6023      	str	r3, [r4, #0]
 8009594:	89a3      	ldrh	r3, [r4, #12]
 8009596:	f043 0308 	orr.w	r3, r3, #8
 800959a:	81a3      	strh	r3, [r4, #12]
 800959c:	6923      	ldr	r3, [r4, #16]
 800959e:	b94b      	cbnz	r3, 80095b4 <__swsetup_r+0x7c>
 80095a0:	89a3      	ldrh	r3, [r4, #12]
 80095a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095aa:	d003      	beq.n	80095b4 <__swsetup_r+0x7c>
 80095ac:	4621      	mov	r1, r4
 80095ae:	4628      	mov	r0, r5
 80095b0:	f000 f850 	bl	8009654 <__smakebuf_r>
 80095b4:	89a0      	ldrh	r0, [r4, #12]
 80095b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095ba:	f010 0301 	ands.w	r3, r0, #1
 80095be:	d00a      	beq.n	80095d6 <__swsetup_r+0x9e>
 80095c0:	2300      	movs	r3, #0
 80095c2:	60a3      	str	r3, [r4, #8]
 80095c4:	6963      	ldr	r3, [r4, #20]
 80095c6:	425b      	negs	r3, r3
 80095c8:	61a3      	str	r3, [r4, #24]
 80095ca:	6923      	ldr	r3, [r4, #16]
 80095cc:	b943      	cbnz	r3, 80095e0 <__swsetup_r+0xa8>
 80095ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095d2:	d1c4      	bne.n	800955e <__swsetup_r+0x26>
 80095d4:	bd38      	pop	{r3, r4, r5, pc}
 80095d6:	0781      	lsls	r1, r0, #30
 80095d8:	bf58      	it	pl
 80095da:	6963      	ldrpl	r3, [r4, #20]
 80095dc:	60a3      	str	r3, [r4, #8]
 80095de:	e7f4      	b.n	80095ca <__swsetup_r+0x92>
 80095e0:	2000      	movs	r0, #0
 80095e2:	e7f7      	b.n	80095d4 <__swsetup_r+0x9c>
 80095e4:	20000154 	.word	0x20000154

080095e8 <_sbrk_r>:
 80095e8:	b538      	push	{r3, r4, r5, lr}
 80095ea:	4d06      	ldr	r5, [pc, #24]	; (8009604 <_sbrk_r+0x1c>)
 80095ec:	2300      	movs	r3, #0
 80095ee:	4604      	mov	r4, r0
 80095f0:	4608      	mov	r0, r1
 80095f2:	602b      	str	r3, [r5, #0]
 80095f4:	f7f7 fd7a 	bl	80010ec <_sbrk>
 80095f8:	1c43      	adds	r3, r0, #1
 80095fa:	d102      	bne.n	8009602 <_sbrk_r+0x1a>
 80095fc:	682b      	ldr	r3, [r5, #0]
 80095fe:	b103      	cbz	r3, 8009602 <_sbrk_r+0x1a>
 8009600:	6023      	str	r3, [r4, #0]
 8009602:	bd38      	pop	{r3, r4, r5, pc}
 8009604:	20001fbc 	.word	0x20001fbc

08009608 <__swhatbuf_r>:
 8009608:	b570      	push	{r4, r5, r6, lr}
 800960a:	460c      	mov	r4, r1
 800960c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009610:	2900      	cmp	r1, #0
 8009612:	b096      	sub	sp, #88	; 0x58
 8009614:	4615      	mov	r5, r2
 8009616:	461e      	mov	r6, r3
 8009618:	da0d      	bge.n	8009636 <__swhatbuf_r+0x2e>
 800961a:	89a3      	ldrh	r3, [r4, #12]
 800961c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009620:	f04f 0100 	mov.w	r1, #0
 8009624:	bf0c      	ite	eq
 8009626:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800962a:	2340      	movne	r3, #64	; 0x40
 800962c:	2000      	movs	r0, #0
 800962e:	6031      	str	r1, [r6, #0]
 8009630:	602b      	str	r3, [r5, #0]
 8009632:	b016      	add	sp, #88	; 0x58
 8009634:	bd70      	pop	{r4, r5, r6, pc}
 8009636:	466a      	mov	r2, sp
 8009638:	f000 f848 	bl	80096cc <_fstat_r>
 800963c:	2800      	cmp	r0, #0
 800963e:	dbec      	blt.n	800961a <__swhatbuf_r+0x12>
 8009640:	9901      	ldr	r1, [sp, #4]
 8009642:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009646:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800964a:	4259      	negs	r1, r3
 800964c:	4159      	adcs	r1, r3
 800964e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009652:	e7eb      	b.n	800962c <__swhatbuf_r+0x24>

08009654 <__smakebuf_r>:
 8009654:	898b      	ldrh	r3, [r1, #12]
 8009656:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009658:	079d      	lsls	r5, r3, #30
 800965a:	4606      	mov	r6, r0
 800965c:	460c      	mov	r4, r1
 800965e:	d507      	bpl.n	8009670 <__smakebuf_r+0x1c>
 8009660:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009664:	6023      	str	r3, [r4, #0]
 8009666:	6123      	str	r3, [r4, #16]
 8009668:	2301      	movs	r3, #1
 800966a:	6163      	str	r3, [r4, #20]
 800966c:	b002      	add	sp, #8
 800966e:	bd70      	pop	{r4, r5, r6, pc}
 8009670:	ab01      	add	r3, sp, #4
 8009672:	466a      	mov	r2, sp
 8009674:	f7ff ffc8 	bl	8009608 <__swhatbuf_r>
 8009678:	9900      	ldr	r1, [sp, #0]
 800967a:	4605      	mov	r5, r0
 800967c:	4630      	mov	r0, r6
 800967e:	f7ff fb0f 	bl	8008ca0 <_malloc_r>
 8009682:	b948      	cbnz	r0, 8009698 <__smakebuf_r+0x44>
 8009684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009688:	059a      	lsls	r2, r3, #22
 800968a:	d4ef      	bmi.n	800966c <__smakebuf_r+0x18>
 800968c:	f023 0303 	bic.w	r3, r3, #3
 8009690:	f043 0302 	orr.w	r3, r3, #2
 8009694:	81a3      	strh	r3, [r4, #12]
 8009696:	e7e3      	b.n	8009660 <__smakebuf_r+0xc>
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	6020      	str	r0, [r4, #0]
 800969c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096a0:	81a3      	strh	r3, [r4, #12]
 80096a2:	9b00      	ldr	r3, [sp, #0]
 80096a4:	6163      	str	r3, [r4, #20]
 80096a6:	9b01      	ldr	r3, [sp, #4]
 80096a8:	6120      	str	r0, [r4, #16]
 80096aa:	b15b      	cbz	r3, 80096c4 <__smakebuf_r+0x70>
 80096ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096b0:	4630      	mov	r0, r6
 80096b2:	f000 f81d 	bl	80096f0 <_isatty_r>
 80096b6:	b128      	cbz	r0, 80096c4 <__smakebuf_r+0x70>
 80096b8:	89a3      	ldrh	r3, [r4, #12]
 80096ba:	f023 0303 	bic.w	r3, r3, #3
 80096be:	f043 0301 	orr.w	r3, r3, #1
 80096c2:	81a3      	strh	r3, [r4, #12]
 80096c4:	89a3      	ldrh	r3, [r4, #12]
 80096c6:	431d      	orrs	r5, r3
 80096c8:	81a5      	strh	r5, [r4, #12]
 80096ca:	e7cf      	b.n	800966c <__smakebuf_r+0x18>

080096cc <_fstat_r>:
 80096cc:	b538      	push	{r3, r4, r5, lr}
 80096ce:	4d07      	ldr	r5, [pc, #28]	; (80096ec <_fstat_r+0x20>)
 80096d0:	2300      	movs	r3, #0
 80096d2:	4604      	mov	r4, r0
 80096d4:	4608      	mov	r0, r1
 80096d6:	4611      	mov	r1, r2
 80096d8:	602b      	str	r3, [r5, #0]
 80096da:	f7f7 fcde 	bl	800109a <_fstat>
 80096de:	1c43      	adds	r3, r0, #1
 80096e0:	d102      	bne.n	80096e8 <_fstat_r+0x1c>
 80096e2:	682b      	ldr	r3, [r5, #0]
 80096e4:	b103      	cbz	r3, 80096e8 <_fstat_r+0x1c>
 80096e6:	6023      	str	r3, [r4, #0]
 80096e8:	bd38      	pop	{r3, r4, r5, pc}
 80096ea:	bf00      	nop
 80096ec:	20001fbc 	.word	0x20001fbc

080096f0 <_isatty_r>:
 80096f0:	b538      	push	{r3, r4, r5, lr}
 80096f2:	4d06      	ldr	r5, [pc, #24]	; (800970c <_isatty_r+0x1c>)
 80096f4:	2300      	movs	r3, #0
 80096f6:	4604      	mov	r4, r0
 80096f8:	4608      	mov	r0, r1
 80096fa:	602b      	str	r3, [r5, #0]
 80096fc:	f7f7 fcdd 	bl	80010ba <_isatty>
 8009700:	1c43      	adds	r3, r0, #1
 8009702:	d102      	bne.n	800970a <_isatty_r+0x1a>
 8009704:	682b      	ldr	r3, [r5, #0]
 8009706:	b103      	cbz	r3, 800970a <_isatty_r+0x1a>
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	bd38      	pop	{r3, r4, r5, pc}
 800970c:	20001fbc 	.word	0x20001fbc

08009710 <_init>:
 8009710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009712:	bf00      	nop
 8009714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009716:	bc08      	pop	{r3}
 8009718:	469e      	mov	lr, r3
 800971a:	4770      	bx	lr

0800971c <_fini>:
 800971c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971e:	bf00      	nop
 8009720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009722:	bc08      	pop	{r3}
 8009724:	469e      	mov	lr, r3
 8009726:	4770      	bx	lr
