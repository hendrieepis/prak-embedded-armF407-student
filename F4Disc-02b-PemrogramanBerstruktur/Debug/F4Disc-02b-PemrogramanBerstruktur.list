
F4Disc-02b-PemrogramanBerstruktur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009540  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080096d0  080096d0  000196d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097bc  080097bc  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  080097bc  080097bc  000197bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097c4  080097c4  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097c4  080097c4  000197c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097c8  080097c8  000197c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  080097cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020158  2**0
                  CONTENTS
 10 .bss          00001e74  20000158  20000158  00020158  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001fcc  20001fcc  00020158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 14 .debug_info   000151b2  00000000  00000000  000201cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d78  00000000  00000000  0003537d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001328  00000000  00000000  000390f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e79  00000000  00000000  0003a420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025a2e  00000000  00000000  0003b299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a171  00000000  00000000  00060cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc5e1  00000000  00000000  0007ae38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000552c  00000000  00000000  0014741c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  0014c948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000158 	.word	0x20000158
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080096b8 	.word	0x080096b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000015c 	.word	0x2000015c
 80001cc:	080096b8 	.word	0x080096b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <checkBoard>:
 */

#include "checkboard.h"
#include "main.h"
#include "stdio.h"
void checkBoard(void){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
	  HAL_Delay(5000);
 8000572:	f241 3088 	movw	r0, #5000	; 0x1388
 8000576:	f000 fe71 	bl	800125c <HAL_Delay>
	  printf("Cek BarLED, buzzer, USER LED \n\r");
 800057a:	482c      	ldr	r0, [pc, #176]	; (800062c <checkBoard+0xc0>)
 800057c:	f008 fa28 	bl	80089d0 <iprintf>
	  HAL_Delay(1000);
 8000580:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000584:	f000 fe6a 	bl	800125c <HAL_Delay>
	  for (uint8_t cnt=0;cnt<8;cnt++){
 8000588:	2300      	movs	r3, #0
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	e044      	b.n	8000618 <checkBoard+0xac>

		  HAL_GPIO_TogglePin(BAR0_GPIO_Port, BAR0_Pin);
 800058e:	2140      	movs	r1, #64	; 0x40
 8000590:	4827      	ldr	r0, [pc, #156]	; (8000630 <checkBoard+0xc4>)
 8000592:	f001 f966 	bl	8001862 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR1_GPIO_Port, BAR1_Pin);
 8000596:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059a:	4826      	ldr	r0, [pc, #152]	; (8000634 <checkBoard+0xc8>)
 800059c:	f001 f961 	bl	8001862 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR2_GPIO_Port, BAR2_Pin);
 80005a0:	2110      	movs	r1, #16
 80005a2:	4823      	ldr	r0, [pc, #140]	; (8000630 <checkBoard+0xc4>)
 80005a4:	f001 f95d 	bl	8001862 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR3_GPIO_Port, BAR3_Pin);
 80005a8:	2120      	movs	r1, #32
 80005aa:	4821      	ldr	r0, [pc, #132]	; (8000630 <checkBoard+0xc4>)
 80005ac:	f001 f959 	bl	8001862 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR4_GPIO_Port, BAR4_Pin);
 80005b0:	2104      	movs	r1, #4
 80005b2:	481f      	ldr	r0, [pc, #124]	; (8000630 <checkBoard+0xc4>)
 80005b4:	f001 f955 	bl	8001862 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR5_GPIO_Port, BAR5_Pin);
 80005b8:	2110      	movs	r1, #16
 80005ba:	481f      	ldr	r0, [pc, #124]	; (8000638 <checkBoard+0xcc>)
 80005bc:	f001 f951 	bl	8001862 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR6_GPIO_Port, BAR6_Pin);
 80005c0:	2120      	movs	r1, #32
 80005c2:	481d      	ldr	r0, [pc, #116]	; (8000638 <checkBoard+0xcc>)
 80005c4:	f001 f94d 	bl	8001862 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR7_GPIO_Port, BAR7_Pin);
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	481c      	ldr	r0, [pc, #112]	; (800063c <checkBoard+0xd0>)
 80005cc:	f001 f949 	bl	8001862 <HAL_GPIO_TogglePin>

		  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80005d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d4:	4817      	ldr	r0, [pc, #92]	; (8000634 <checkBoard+0xc8>)
 80005d6:	f001 f944 	bl	8001862 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80005da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005de:	4817      	ldr	r0, [pc, #92]	; (800063c <checkBoard+0xd0>)
 80005e0:	f001 f93f 	bl	8001862 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80005e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e8:	4814      	ldr	r0, [pc, #80]	; (800063c <checkBoard+0xd0>)
 80005ea:	f001 f93a 	bl	8001862 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 80005ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f2:	4812      	ldr	r0, [pc, #72]	; (800063c <checkBoard+0xd0>)
 80005f4:	f001 f935 	bl	8001862 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 80005f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005fc:	480f      	ldr	r0, [pc, #60]	; (800063c <checkBoard+0xd0>)
 80005fe:	f001 f930 	bl	8001862 <HAL_GPIO_TogglePin>
		  printf("count: %d \n\r",cnt);
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	4619      	mov	r1, r3
 8000606:	480e      	ldr	r0, [pc, #56]	; (8000640 <checkBoard+0xd4>)
 8000608:	f008 f9e2 	bl	80089d0 <iprintf>
		  HAL_Delay(100);
 800060c:	2064      	movs	r0, #100	; 0x64
 800060e:	f000 fe25 	bl	800125c <HAL_Delay>
	  for (uint8_t cnt=0;cnt<8;cnt++){
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	3301      	adds	r3, #1
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	2b07      	cmp	r3, #7
 800061c:	d9b7      	bls.n	800058e <checkBoard+0x22>
	  }

	  printf("Cek Button \n\r");
 800061e:	4809      	ldr	r0, [pc, #36]	; (8000644 <checkBoard+0xd8>)
 8000620:	f008 f9d6 	bl	80089d0 <iprintf>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	080096d0 	.word	0x080096d0
 8000630:	40021000 	.word	0x40021000
 8000634:	40020800 	.word	0x40020800
 8000638:	40020400 	.word	0x40020400
 800063c:	40020c00 	.word	0x40020c00
 8000640:	080096f0 	.word	0x080096f0
 8000644:	08009700 	.word	0x08009700

08000648 <counterShow>:
#include "counter.h"
#include "stdint.h"
#include "main.h"
uint16_t count;

uint16_t counterShow(void){
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BAR0_GPIO_Port,BAR0_Pin,count & (1<<0));
 800064c:	4b2e      	ldr	r3, [pc, #184]	; (8000708 <counterShow+0xc0>)
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	461a      	mov	r2, r3
 800065a:	2140      	movs	r1, #64	; 0x40
 800065c:	482b      	ldr	r0, [pc, #172]	; (800070c <counterShow+0xc4>)
 800065e:	f001 f8e7 	bl	8001830 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR1_GPIO_Port,BAR1_Pin,count & (1<<1));
 8000662:	4b29      	ldr	r3, [pc, #164]	; (8000708 <counterShow+0xc0>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	f003 0302 	and.w	r3, r3, #2
 800066c:	b2db      	uxtb	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000674:	4826      	ldr	r0, [pc, #152]	; (8000710 <counterShow+0xc8>)
 8000676:	f001 f8db 	bl	8001830 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR2_GPIO_Port,BAR2_Pin,count & (1<<2));
 800067a:	4b23      	ldr	r3, [pc, #140]	; (8000708 <counterShow+0xc0>)
 800067c:	881b      	ldrh	r3, [r3, #0]
 800067e:	b2db      	uxtb	r3, r3
 8000680:	f003 0304 	and.w	r3, r3, #4
 8000684:	b2db      	uxtb	r3, r3
 8000686:	461a      	mov	r2, r3
 8000688:	2110      	movs	r1, #16
 800068a:	4820      	ldr	r0, [pc, #128]	; (800070c <counterShow+0xc4>)
 800068c:	f001 f8d0 	bl	8001830 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR3_GPIO_Port,BAR3_Pin,count & (1<<3));
 8000690:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <counterShow+0xc0>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	b2db      	uxtb	r3, r3
 8000696:	f003 0308 	and.w	r3, r3, #8
 800069a:	b2db      	uxtb	r3, r3
 800069c:	461a      	mov	r2, r3
 800069e:	2120      	movs	r1, #32
 80006a0:	481a      	ldr	r0, [pc, #104]	; (800070c <counterShow+0xc4>)
 80006a2:	f001 f8c5 	bl	8001830 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR4_GPIO_Port,BAR4_Pin,count & (1<<4));
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <counterShow+0xc0>)
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	f003 0310 	and.w	r3, r3, #16
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	461a      	mov	r2, r3
 80006b4:	2104      	movs	r1, #4
 80006b6:	4815      	ldr	r0, [pc, #84]	; (800070c <counterShow+0xc4>)
 80006b8:	f001 f8ba 	bl	8001830 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR5_GPIO_Port,BAR5_Pin,count & (1<<5));
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <counterShow+0xc0>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	f003 0320 	and.w	r3, r3, #32
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	461a      	mov	r2, r3
 80006ca:	2110      	movs	r1, #16
 80006cc:	4811      	ldr	r0, [pc, #68]	; (8000714 <counterShow+0xcc>)
 80006ce:	f001 f8af 	bl	8001830 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR6_GPIO_Port,BAR6_Pin,count & (1<<6));
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <counterShow+0xc0>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	461a      	mov	r2, r3
 80006e0:	2120      	movs	r1, #32
 80006e2:	480c      	ldr	r0, [pc, #48]	; (8000714 <counterShow+0xcc>)
 80006e4:	f001 f8a4 	bl	8001830 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR7_GPIO_Port,BAR7_Pin,count & (1<<7));
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <counterShow+0xc0>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	461a      	mov	r2, r3
 80006f6:	2180      	movs	r1, #128	; 0x80
 80006f8:	4807      	ldr	r0, [pc, #28]	; (8000718 <counterShow+0xd0>)
 80006fa:	f001 f899 	bl	8001830 <HAL_GPIO_WritePin>
	return count;
 80006fe:	4b02      	ldr	r3, [pc, #8]	; (8000708 <counterShow+0xc0>)
 8000700:	881b      	ldrh	r3, [r3, #0]
}
 8000702:	4618      	mov	r0, r3
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000174 	.word	0x20000174
 800070c:	40021000 	.word	0x40021000
 8000710:	40020800 	.word	0x40020800
 8000714:	40020400 	.word	0x40020400
 8000718:	40020c00 	.word	0x40020c00

0800071c <CounterUpdate>:
void CounterUpdate(void){
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
	++count;
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <CounterUpdate+0x1c>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	b29a      	uxth	r2, r3
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <CounterUpdate+0x1c>)
 800072a:	801a      	strh	r2, [r3, #0]
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	20000174 	.word	0x20000174

0800073c <CounterZero>:

void CounterZero(void){
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	count=0;
 8000740:	4b03      	ldr	r3, [pc, #12]	; (8000750 <CounterZero+0x14>)
 8000742:	2200      	movs	r2, #0
 8000744:	801a      	strh	r2, [r3, #0]
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	20000174 	.word	0x20000174

08000754 <_write>:
I2S_HandleTypeDef hi2s3;
SPI_HandleTypeDef hspi1;

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*) ptr, len); return len;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	b29b      	uxth	r3, r3
 8000764:	4619      	mov	r1, r3
 8000766:	68b8      	ldr	r0, [r7, #8]
 8000768:	f007 fc18 	bl	8007f9c <CDC_Transmit_FS>
 800076c:	687b      	ldr	r3, [r7, #4]
}
 800076e:	4618      	mov	r0, r3
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	; 0x50
 800077c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	2230      	movs	r2, #48	; 0x30
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f008 f977 	bl	8008a7a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	4b28      	ldr	r3, [pc, #160]	; (8000844 <SystemClock_Config+0xcc>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	4a27      	ldr	r2, [pc, #156]	; (8000844 <SystemClock_Config+0xcc>)
 80007a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007aa:	6413      	str	r3, [r2, #64]	; 0x40
 80007ac:	4b25      	ldr	r3, [pc, #148]	; (8000844 <SystemClock_Config+0xcc>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <SystemClock_Config+0xd0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a21      	ldr	r2, [pc, #132]	; (8000848 <SystemClock_Config+0xd0>)
 80007c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <SystemClock_Config+0xd0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d4:	2301      	movs	r3, #1
 80007d6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	2302      	movs	r3, #2
 80007e0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80007e8:	2308      	movs	r3, #8
 80007ea:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80007ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007f0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80007f6:	2307      	movs	r3, #7
 80007f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fa:	f107 0320 	add.w	r3, r7, #32
 80007fe:	4618      	mov	r0, r3
 8000800:	f003 f8ac 	bl	800395c <HAL_RCC_OscConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x96>
	{
		Error_Handler();
 800080a:	f000 f9fd 	bl	8000c08 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080e:	230f      	movs	r3, #15
 8000810:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	2302      	movs	r3, #2
 8000814:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800081a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800081e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000824:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	2105      	movs	r1, #5
 800082c:	4618      	mov	r0, r3
 800082e:	f003 fb0d 	bl	8003e4c <HAL_RCC_ClockConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8000838:	f000 f9e6 	bl	8000c08 <Error_Handler>
	}
}
 800083c:	bf00      	nop
 800083e:	3750      	adds	r7, #80	; 0x50
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40007000 	.word	0x40007000

0800084c <MX_I2C1_Init>:

void MX_I2C1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_I2C1_Init+0x50>)
 8000852:	4a13      	ldr	r2, [pc, #76]	; (80008a0 <MX_I2C1_Init+0x54>)
 8000854:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_I2C1_Init+0x50>)
 8000858:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <MX_I2C1_Init+0x58>)
 800085a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_I2C1_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_I2C1_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_I2C1_Init+0x50>)
 800086a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800086e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <MX_I2C1_Init+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_I2C1_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_I2C1_Init+0x50>)
 800088a:	f001 f805 	bl	8001898 <HAL_I2C_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8000894:	f000 f9b8 	bl	8000c08 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000178 	.word	0x20000178
 80008a0:	40005400 	.word	0x40005400
 80008a4:	000186a0 	.word	0x000186a0

080008a8 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
void MX_I2S3_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <MX_I2S3_Init+0x54>)
 80008ae:	4a14      	ldr	r2, [pc, #80]	; (8000900 <MX_I2S3_Init+0x58>)
 80008b0:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_I2S3_Init+0x54>)
 80008b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b8:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_I2S3_Init+0x54>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_I2S3_Init+0x54>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <MX_I2S3_Init+0x54>)
 80008c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008cc:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_I2S3_Init+0x54>)
 80008d0:	4a0c      	ldr	r2, [pc, #48]	; (8000904 <MX_I2S3_Init+0x5c>)
 80008d2:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_I2S3_Init+0x54>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_I2S3_Init+0x54>)
 80008dc:	2200      	movs	r2, #0
 80008de:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_I2S3_Init+0x54>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_I2S3_Init+0x54>)
 80008e8:	f001 f91a 	bl	8001b20 <HAL_I2S_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_I2S3_Init+0x4e>
	{
		Error_Handler();
 80008f2:	f000 f989 	bl	8000c08 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200001cc 	.word	0x200001cc
 8000900:	40003c00 	.word	0x40003c00
 8000904:	00017700 	.word	0x00017700

08000908 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_SPI1_Init+0x64>)
 800090e:	4a18      	ldr	r2, [pc, #96]	; (8000970 <MX_SPI1_Init+0x68>)
 8000910:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_SPI1_Init+0x64>)
 8000914:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000918:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_SPI1_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_SPI1_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_SPI1_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_SPI1_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_SPI1_Init+0x64>)
 8000934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000938:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_SPI1_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_SPI1_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_SPI1_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <MX_SPI1_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_SPI1_Init+0x64>)
 8000954:	220a      	movs	r2, #10
 8000956:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_SPI1_Init+0x64>)
 800095a:	f003 fdc3 	bl	80044e4 <HAL_SPI_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8000964:	f000 f950 	bl	8000c08 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000214 	.word	0x20000214
 8000970:	40013000 	.word	0x40013000

08000974 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	; 0x30
 8000978:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
 800098e:	4b98      	ldr	r3, [pc, #608]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a97      	ldr	r2, [pc, #604]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 8000994:	f043 0310 	orr.w	r3, r3, #16
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b95      	ldr	r3, [pc, #596]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0310 	and.w	r3, r3, #16
 80009a2:	61bb      	str	r3, [r7, #24]
 80009a4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	4b91      	ldr	r3, [pc, #580]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a90      	ldr	r2, [pc, #576]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b8e      	ldr	r3, [pc, #568]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b8a      	ldr	r3, [pc, #552]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a89      	ldr	r2, [pc, #548]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b87      	ldr	r3, [pc, #540]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b83      	ldr	r3, [pc, #524]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a82      	ldr	r2, [pc, #520]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b80      	ldr	r3, [pc, #512]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	4b7c      	ldr	r3, [pc, #496]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a7b      	ldr	r2, [pc, #492]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b79      	ldr	r3, [pc, #484]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b75      	ldr	r3, [pc, #468]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a74      	ldr	r2, [pc, #464]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 8000a20:	f043 0308 	orr.w	r3, r3, #8
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b72      	ldr	r3, [pc, #456]	; (8000bf0 <MX_GPIO_Init+0x27c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, BAR4_Pin|CS_I2C_SPI_Pin|BAR2_Pin|BAR3_Pin
 8000a32:	2200      	movs	r2, #0
 8000a34:	217c      	movs	r1, #124	; 0x7c
 8000a36:	486f      	ldr	r0, [pc, #444]	; (8000bf4 <MX_GPIO_Init+0x280>)
 8000a38:	f000 fefa 	bl	8001830 <HAL_GPIO_WritePin>
			|BAR0_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, BAR1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8000a42:	486d      	ldr	r0, [pc, #436]	; (8000bf8 <MX_GPIO_Init+0x284>)
 8000a44:	f000 fef4 	bl	8001830 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	486a      	ldr	r0, [pc, #424]	; (8000bf8 <MX_GPIO_Init+0x284>)
 8000a4e:	f000 feef 	bl	8001830 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a52:	2200      	movs	r2, #0
 8000a54:	f24f 0190 	movw	r1, #61584	; 0xf090
 8000a58:	4868      	ldr	r0, [pc, #416]	; (8000bfc <MX_GPIO_Init+0x288>)
 8000a5a:	f000 fee9 	bl	8001830 <HAL_GPIO_WritePin>
			|Audio_RST_Pin|BAR7_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, BAR5_Pin|BAR6_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2130      	movs	r1, #48	; 0x30
 8000a62:	4867      	ldr	r0, [pc, #412]	; (8000c00 <MX_GPIO_Init+0x28c>)
 8000a64:	f000 fee4 	bl	8001830 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : BAR4_Pin CS_I2C_SPI_Pin BAR2_Pin BAR3_Pin
                           BAR0_Pin */
	GPIO_InitStruct.Pin = BAR4_Pin|CS_I2C_SPI_Pin|BAR2_Pin|BAR3_Pin
 8000a68:	237c      	movs	r3, #124	; 0x7c
 8000a6a:	61fb      	str	r3, [r7, #28]
			|BAR0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	485d      	ldr	r0, [pc, #372]	; (8000bf4 <MX_GPIO_Init+0x280>)
 8000a80:	f000 fd22 	bl	80014c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : BAR1_Pin OTG_FS_PowerSwitchOn_Pin BUZZER_Pin */
	GPIO_InitStruct.Pin = BAR1_Pin|OTG_FS_PowerSwitchOn_Pin|BUZZER_Pin;
 8000a84:	f642 0301 	movw	r3, #10241	; 0x2801
 8000a88:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4856      	ldr	r0, [pc, #344]	; (8000bf8 <MX_GPIO_Init+0x284>)
 8000a9e:	f000 fd13 	bl	80014c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000aa2:	2308      	movs	r3, #8
 8000aa4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ab2:	2305      	movs	r3, #5
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	484e      	ldr	r0, [pc, #312]	; (8000bf8 <MX_GPIO_Init+0x284>)
 8000abe:	f000 fd03 	bl	80014c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ac6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000aca:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	484b      	ldr	r0, [pc, #300]	; (8000c04 <MX_GPIO_Init+0x290>)
 8000ad8:	f000 fcf6 	bl	80014c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_UP_Pin BTN_RIGHT_Pin */
	GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_RIGHT_Pin;
 8000adc:	2330      	movs	r3, #48	; 0x30
 8000ade:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	4842      	ldr	r0, [pc, #264]	; (8000bf8 <MX_GPIO_Init+0x284>)
 8000af0:	f000 fcea 	bl	80014c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_DN_Pin BTN_LEFT_Pin SW3_Pin SW4_Pin */
	GPIO_InitStruct.Pin = BTN_DN_Pin|BTN_LEFT_Pin|SW3_Pin|SW4_Pin;
 8000af4:	f641 0303 	movw	r3, #6147	; 0x1803
 8000af8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	483d      	ldr	r0, [pc, #244]	; (8000c00 <MX_GPIO_Init+0x28c>)
 8000b0a:	f000 fcdd 	bl	80014c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4837      	ldr	r0, [pc, #220]	; (8000c00 <MX_GPIO_Init+0x28c>)
 8000b22:	f000 fcd1 	bl	80014c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_OK_Pin BTN_CANCEL_Pin */
	GPIO_InitStruct.Pin = BTN_OK_Pin|BTN_CANCEL_Pin;
 8000b26:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000b2a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	482e      	ldr	r0, [pc, #184]	; (8000bf4 <MX_GPIO_Init+0x280>)
 8000b3c:	f000 fcc4 	bl	80014c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b44:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b52:	2305      	movs	r3, #5
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4828      	ldr	r0, [pc, #160]	; (8000c00 <MX_GPIO_Init+0x28c>)
 8000b5e:	f000 fcb3 	bl	80014c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : SW2_Pin SW1_Pin */
	GPIO_InitStruct.Pin = SW2_Pin|SW1_Pin;
 8000b62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b66:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4619      	mov	r1, r3
 8000b76:	4821      	ldr	r0, [pc, #132]	; (8000bfc <MX_GPIO_Init+0x288>)
 8000b78:	f000 fca6 	bl	80014c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin BAR7_Pin */
	GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b7c:	f24f 0390 	movw	r3, #61584	; 0xf090
 8000b80:	61fb      	str	r3, [r7, #28]
			|Audio_RST_Pin|BAR7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	4819      	ldr	r0, [pc, #100]	; (8000bfc <MX_GPIO_Init+0x288>)
 8000b96:	f000 fc97 	bl	80014c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b9a:	2320      	movs	r3, #32
 8000b9c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4619      	mov	r1, r3
 8000bac:	4813      	ldr	r0, [pc, #76]	; (8000bfc <MX_GPIO_Init+0x288>)
 8000bae:	f000 fc8b 	bl	80014c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : BAR5_Pin BAR6_Pin */
	GPIO_InitStruct.Pin = BAR5_Pin|BAR6_Pin;
 8000bb2:	2330      	movs	r3, #48	; 0x30
 8000bb4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <MX_GPIO_Init+0x28c>)
 8000bca:	f000 fc7d 	bl	80014c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bd2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bd6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <MX_GPIO_Init+0x280>)
 8000be4:	f000 fc70 	bl	80014c8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000be8:	bf00      	nop
 8000bea:	3730      	adds	r7, #48	; 0x30
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40020800 	.word	0x40020800
 8000bfc:	40020c00 	.word	0x40020c00
 8000c00:	40020400 	.word	0x40020400
 8000c04:	40020000 	.word	0x40020000

08000c08 <Error_Handler>:

void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c10:	e7fe      	b.n	8000c10 <Error_Handler+0x8>
	...

08000c14 <main>:
#include "sensor.h"
#include "hardwareinit.h"
#include "checkboard.h"

int main(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	HAL_Init();
 8000c18:	f000 faae 	bl	8001178 <HAL_Init>
	SystemClock_Config();
 8000c1c:	f7ff fdac 	bl	8000778 <SystemClock_Config>

	MX_GPIO_Init();
 8000c20:	f7ff fea8 	bl	8000974 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000c24:	f7ff fe12 	bl	800084c <MX_I2C1_Init>
	MX_I2S3_Init();
 8000c28:	f7ff fe3e 	bl	80008a8 <MX_I2S3_Init>
	MX_SPI1_Init();
 8000c2c:	f7ff fe6c 	bl	8000908 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8000c30:	f007 f8f6 	bl	8007e20 <MX_USB_DEVICE_Init>
    checkBoard();
 8000c34:	f7ff fc9a 	bl	800056c <checkBoard>
	while (1)
	{

        if(sensorDetected()){
 8000c38:	f000 f81e 	bl	8000c78 <sensorDetected>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d008      	beq.n	8000c54 <main+0x40>
        	CounterUpdate();
 8000c42:	f7ff fd6b 	bl	800071c <CounterUpdate>
        	printf("nilai counter: %d \n\r",counterShow());
 8000c46:	f7ff fcff 	bl	8000648 <counterShow>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4809      	ldr	r0, [pc, #36]	; (8000c74 <main+0x60>)
 8000c50:	f007 febe 	bl	80089d0 <iprintf>
        }

        if(resetDetected()){
 8000c54:	f000 f838 	bl	8000cc8 <resetDetected>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d0ec      	beq.n	8000c38 <main+0x24>
        	CounterZero();
 8000c5e:	f7ff fd6d 	bl	800073c <CounterZero>
        	printf("nilai counter: %d \n\r",counterShow());
 8000c62:	f7ff fcf1 	bl	8000648 <counterShow>
 8000c66:	4603      	mov	r3, r0
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4802      	ldr	r0, [pc, #8]	; (8000c74 <main+0x60>)
 8000c6c:	f007 feb0 	bl	80089d0 <iprintf>
        if(sensorDetected()){
 8000c70:	e7e2      	b.n	8000c38 <main+0x24>
 8000c72:	bf00      	nop
 8000c74:	08009710 	.word	0x08009710

08000c78 <sensorDetected>:
 *      Author: hendri
 */
#include "sensor.h"
#include "main.h"
// sensor.c dan sensor.h
uint8_t sensorDetected(void){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
	uint8_t FlagDetect=0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_RESET) {
 8000c82:	2102      	movs	r1, #2
 8000c84:	480f      	ldr	r0, [pc, #60]	; (8000cc4 <sensorDetected+0x4c>)
 8000c86:	f000 fdbb 	bl	8001800 <HAL_GPIO_ReadPin>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d113      	bne.n	8000cb8 <sensorDetected+0x40>
		HAL_Delay(20);
 8000c90:	2014      	movs	r0, #20
 8000c92:	f000 fae3 	bl	800125c <HAL_Delay>
		if(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_RESET) {
 8000c96:	2102      	movs	r1, #2
 8000c98:	480a      	ldr	r0, [pc, #40]	; (8000cc4 <sensorDetected+0x4c>)
 8000c9a:	f000 fdb1 	bl	8001800 <HAL_GPIO_ReadPin>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d109      	bne.n	8000cb8 <sensorDetected+0x40>
			while(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_RESET);
 8000ca4:	bf00      	nop
 8000ca6:	2102      	movs	r1, #2
 8000ca8:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <sensorDetected+0x4c>)
 8000caa:	f000 fda9 	bl	8001800 <HAL_GPIO_ReadPin>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d0f8      	beq.n	8000ca6 <sensorDetected+0x2e>
			FlagDetect=1;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	71fb      	strb	r3, [r7, #7]
		}
	}
	return FlagDetect;
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40020400 	.word	0x40020400

08000cc8 <resetDetected>:

uint8_t resetDetected(void){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
	uint8_t FlagDetect=0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port,BTN_RIGHT_Pin)== GPIO_PIN_RESET) {
 8000cd2:	2120      	movs	r1, #32
 8000cd4:	480f      	ldr	r0, [pc, #60]	; (8000d14 <resetDetected+0x4c>)
 8000cd6:	f000 fd93 	bl	8001800 <HAL_GPIO_ReadPin>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d113      	bne.n	8000d08 <resetDetected+0x40>
		HAL_Delay(20);
 8000ce0:	2014      	movs	r0, #20
 8000ce2:	f000 fabb 	bl	800125c <HAL_Delay>
		if(HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port,BTN_RIGHT_Pin)== GPIO_PIN_RESET) {
 8000ce6:	2120      	movs	r1, #32
 8000ce8:	480a      	ldr	r0, [pc, #40]	; (8000d14 <resetDetected+0x4c>)
 8000cea:	f000 fd89 	bl	8001800 <HAL_GPIO_ReadPin>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d109      	bne.n	8000d08 <resetDetected+0x40>
			while(HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port,BTN_RIGHT_Pin)== GPIO_PIN_RESET);
 8000cf4:	bf00      	nop
 8000cf6:	2120      	movs	r1, #32
 8000cf8:	4806      	ldr	r0, [pc, #24]	; (8000d14 <resetDetected+0x4c>)
 8000cfa:	f000 fd81 	bl	8001800 <HAL_GPIO_ReadPin>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d0f8      	beq.n	8000cf6 <resetDetected+0x2e>
			FlagDetect=1;
 8000d04:	2301      	movs	r3, #1
 8000d06:	71fb      	strb	r3, [r7, #7]
		}
	}
	return FlagDetect;
 8000d08:	79fb      	ldrb	r3, [r7, #7]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40020800 	.word	0x40020800

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d48:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d56:	2007      	movs	r0, #7
 8000d58:	f000 fb74 	bl	8001444 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40023800 	.word	0x40023800

08000d68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a19      	ldr	r2, [pc, #100]	; (8000dec <HAL_I2C_MspInit+0x84>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d12c      	bne.n	8000de4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <HAL_I2C_MspInit+0x88>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a17      	ldr	r2, [pc, #92]	; (8000df0 <HAL_I2C_MspInit+0x88>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <HAL_I2C_MspInit+0x88>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000da6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dac:	2312      	movs	r3, #18
 8000dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000db8:	2304      	movs	r3, #4
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480c      	ldr	r0, [pc, #48]	; (8000df4 <HAL_I2C_MspInit+0x8c>)
 8000dc4:	f000 fb80 	bl	80014c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_I2C_MspInit+0x88>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <HAL_I2C_MspInit+0x88>)
 8000dd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_I2C_MspInit+0x88>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000de4:	bf00      	nop
 8000de6:	3728      	adds	r7, #40	; 0x28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40005400 	.word	0x40005400
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020400 	.word	0x40020400

08000df8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08e      	sub	sp, #56	; 0x38
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a31      	ldr	r2, [pc, #196]	; (8000ee8 <HAL_I2S_MspInit+0xf0>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d15a      	bne.n	8000ede <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e2c:	23c0      	movs	r3, #192	; 0xc0
 8000e2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f003 fa13 	bl	8004264 <HAL_RCCEx_PeriphCLKConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e44:	f7ff fee0 	bl	8000c08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	4b27      	ldr	r3, [pc, #156]	; (8000eec <HAL_I2S_MspInit+0xf4>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	4a26      	ldr	r2, [pc, #152]	; (8000eec <HAL_I2S_MspInit+0xf4>)
 8000e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e56:	6413      	str	r3, [r2, #64]	; 0x40
 8000e58:	4b24      	ldr	r3, [pc, #144]	; (8000eec <HAL_I2S_MspInit+0xf4>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	4b20      	ldr	r3, [pc, #128]	; (8000eec <HAL_I2S_MspInit+0xf4>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6c:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <HAL_I2S_MspInit+0xf4>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	6313      	str	r3, [r2, #48]	; 0x30
 8000e74:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <HAL_I2S_MspInit+0xf4>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	4b19      	ldr	r3, [pc, #100]	; (8000eec <HAL_I2S_MspInit+0xf4>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	4a18      	ldr	r2, [pc, #96]	; (8000eec <HAL_I2S_MspInit+0xf4>)
 8000e8a:	f043 0304 	orr.w	r3, r3, #4
 8000e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <HAL_I2S_MspInit+0xf4>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e9c:	2310      	movs	r3, #16
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000eac:	2306      	movs	r3, #6
 8000eae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480e      	ldr	r0, [pc, #56]	; (8000ef0 <HAL_I2S_MspInit+0xf8>)
 8000eb8:	f000 fb06 	bl	80014c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ebc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ece:	2306      	movs	r3, #6
 8000ed0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <HAL_I2S_MspInit+0xfc>)
 8000eda:	f000 faf5 	bl	80014c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	3738      	adds	r7, #56	; 0x38
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40003c00 	.word	0x40003c00
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	40020800 	.word	0x40020800

08000ef8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a19      	ldr	r2, [pc, #100]	; (8000f7c <HAL_SPI_MspInit+0x84>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d12b      	bne.n	8000f72 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <HAL_SPI_MspInit+0x88>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <HAL_SPI_MspInit+0x88>)
 8000f24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f28:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_SPI_MspInit+0x88>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_SPI_MspInit+0x88>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a10      	ldr	r2, [pc, #64]	; (8000f80 <HAL_SPI_MspInit+0x88>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_SPI_MspInit+0x88>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f52:	23e0      	movs	r3, #224	; 0xe0
 8000f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f62:	2305      	movs	r3, #5
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4805      	ldr	r0, [pc, #20]	; (8000f84 <HAL_SPI_MspInit+0x8c>)
 8000f6e:	f000 faab 	bl	80014c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f72:	bf00      	nop
 8000f74:	3728      	adds	r7, #40	; 0x28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40013000 	.word	0x40013000
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020000 	.word	0x40020000

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <NMI_Handler+0x4>

08000f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <BusFault_Handler+0x4>

08000fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <UsageFault_Handler+0x4>

08000fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd4:	f000 f922 	bl	800121c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <OTG_FS_IRQHandler+0x10>)
 8000fe2:	f001 fb8d 	bl	8002700 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20001754 	.word	0x20001754

08000ff0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	e00a      	b.n	8001018 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001002:	f3af 8000 	nop.w
 8001006:	4601      	mov	r1, r0
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	60ba      	str	r2, [r7, #8]
 800100e:	b2ca      	uxtb	r2, r1
 8001010:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3301      	adds	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbf0      	blt.n	8001002 <_read+0x12>
  }

  return len;
 8001020:	687b      	ldr	r3, [r7, #4]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <_close>:
  }
  return len;
}

int _close(int file)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001052:	605a      	str	r2, [r3, #4]
  return 0;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <_isatty>:

int _isatty(int file)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800106a:	2301      	movs	r3, #1
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800109c:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <_sbrk+0x5c>)
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <_sbrk+0x60>)
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <_sbrk+0x64>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d102      	bne.n	80010b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <_sbrk+0x64>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	; (80010fc <_sbrk+0x68>)
 80010b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d207      	bcs.n	80010d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c4:	f007 fd28 	bl	8008b18 <__errno>
 80010c8:	4603      	mov	r3, r0
 80010ca:	220c      	movs	r2, #12
 80010cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010d2:	e009      	b.n	80010e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <_sbrk+0x64>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <_sbrk+0x64>)
 80010e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e6:	68fb      	ldr	r3, [r7, #12]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20020000 	.word	0x20020000
 80010f4:	00000400 	.word	0x00000400
 80010f8:	2000026c 	.word	0x2000026c
 80010fc:	20001fd0 	.word	0x20001fd0

08001100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <SystemInit+0x20>)
 8001106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <SystemInit+0x20>)
 800110c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800115c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001128:	480d      	ldr	r0, [pc, #52]	; (8001160 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800112a:	490e      	ldr	r1, [pc, #56]	; (8001164 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800112c:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001130:	e002      	b.n	8001138 <LoopCopyDataInit>

08001132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001136:	3304      	adds	r3, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800113c:	d3f9      	bcc.n	8001132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113e:	4a0b      	ldr	r2, [pc, #44]	; (800116c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001140:	4c0b      	ldr	r4, [pc, #44]	; (8001170 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001144:	e001      	b.n	800114a <LoopFillZerobss>

08001146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001148:	3204      	adds	r2, #4

0800114a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800114c:	d3fb      	bcc.n	8001146 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800114e:	f7ff ffd7 	bl	8001100 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001152:	f007 fce7 	bl	8008b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001156:	f7ff fd5d 	bl	8000c14 <main>
  bx  lr    
 800115a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800115c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001164:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8001168:	080097cc 	.word	0x080097cc
  ldr r2, =_sbss
 800116c:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8001170:	20001fcc 	.word	0x20001fcc

08001174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC_IRQHandler>
	...

08001178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800117c:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <HAL_Init+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <HAL_Init+0x40>)
 8001182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001186:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <HAL_Init+0x40>)
 800118e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001192:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <HAL_Init+0x40>)
 800119a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a0:	2003      	movs	r0, #3
 80011a2:	f000 f94f 	bl	8001444 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a6:	2000      	movs	r0, #0
 80011a8:	f000 f808 	bl	80011bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ac:	f7ff fdb4 	bl	8000d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023c00 	.word	0x40023c00

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0x54>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_InitTick+0x58>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f967 	bl	80014ae <HAL_SYSTICK_Config>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00e      	b.n	8001208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b0f      	cmp	r3, #15
 80011ee:	d80a      	bhi.n	8001206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f0:	2200      	movs	r2, #0
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011f8:	f000 f92f 	bl	800145a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011fc:	4a06      	ldr	r2, [pc, #24]	; (8001218 <HAL_InitTick+0x5c>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	e000      	b.n	8001208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000000 	.word	0x20000000
 8001214:	20000008 	.word	0x20000008
 8001218:	20000004 	.word	0x20000004

0800121c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_IncTick+0x20>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_IncTick+0x24>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4413      	add	r3, r2
 800122c:	4a04      	ldr	r2, [pc, #16]	; (8001240 <HAL_IncTick+0x24>)
 800122e:	6013      	str	r3, [r2, #0]
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000008 	.word	0x20000008
 8001240:	20000270 	.word	0x20000270

08001244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return uwTick;
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <HAL_GetTick+0x14>)
 800124a:	681b      	ldr	r3, [r3, #0]
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000270 	.word	0x20000270

0800125c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001264:	f7ff ffee 	bl	8001244 <HAL_GetTick>
 8001268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001274:	d005      	beq.n	8001282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HAL_Delay+0x44>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001282:	bf00      	nop
 8001284:	f7ff ffde 	bl	8001244 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d8f7      	bhi.n	8001284 <HAL_Delay+0x28>
  {
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000008 	.word	0x20000008

080012a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d6:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60d3      	str	r3, [r2, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <__NVIC_GetPriorityGrouping+0x18>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	f003 0307 	and.w	r3, r3, #7
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	2b00      	cmp	r3, #0
 8001318:	db0b      	blt.n	8001332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f003 021f 	and.w	r2, r3, #31
 8001320:	4907      	ldr	r1, [pc, #28]	; (8001340 <__NVIC_EnableIRQ+0x38>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	095b      	lsrs	r3, r3, #5
 8001328:	2001      	movs	r0, #1
 800132a:	fa00 f202 	lsl.w	r2, r0, r2
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000e100 	.word	0xe000e100

08001344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	2b00      	cmp	r3, #0
 8001356:	db0a      	blt.n	800136e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	490c      	ldr	r1, [pc, #48]	; (8001390 <__NVIC_SetPriority+0x4c>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	0112      	lsls	r2, r2, #4
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	440b      	add	r3, r1
 8001368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800136c:	e00a      	b.n	8001384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4908      	ldr	r1, [pc, #32]	; (8001394 <__NVIC_SetPriority+0x50>)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	3b04      	subs	r3, #4
 800137c:	0112      	lsls	r2, r2, #4
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	440b      	add	r3, r1
 8001382:	761a      	strb	r2, [r3, #24]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f1c3 0307 	rsb	r3, r3, #7
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	bf28      	it	cs
 80013b6:	2304      	movcs	r3, #4
 80013b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3304      	adds	r3, #4
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d902      	bls.n	80013c8 <NVIC_EncodePriority+0x30>
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3b03      	subs	r3, #3
 80013c6:	e000      	b.n	80013ca <NVIC_EncodePriority+0x32>
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	401a      	ands	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	43d9      	mvns	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	4313      	orrs	r3, r2
         );
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3724      	adds	r7, #36	; 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001410:	d301      	bcc.n	8001416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001412:	2301      	movs	r3, #1
 8001414:	e00f      	b.n	8001436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <SysTick_Config+0x40>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141e:	210f      	movs	r1, #15
 8001420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001424:	f7ff ff8e 	bl	8001344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <SysTick_Config+0x40>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <SysTick_Config+0x40>)
 8001430:	2207      	movs	r2, #7
 8001432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	e000e010 	.word	0xe000e010

08001444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff29 	bl	80012a4 <__NVIC_SetPriorityGrouping>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800146c:	f7ff ff3e 	bl	80012ec <__NVIC_GetPriorityGrouping>
 8001470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	68b9      	ldr	r1, [r7, #8]
 8001476:	6978      	ldr	r0, [r7, #20]
 8001478:	f7ff ff8e 	bl	8001398 <NVIC_EncodePriority>
 800147c:	4602      	mov	r2, r0
 800147e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff5d 	bl	8001344 <__NVIC_SetPriority>
}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff31 	bl	8001308 <__NVIC_EnableIRQ>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ffa2 	bl	8001400 <SysTick_Config>
 80014bc:	4603      	mov	r3, r0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
 80014e2:	e16b      	b.n	80017bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014e4:	2201      	movs	r2, #1
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	f040 815a 	bne.w	80017b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	2b01      	cmp	r3, #1
 800150c:	d005      	beq.n	800151a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001516:	2b02      	cmp	r3, #2
 8001518:	d130      	bne.n	800157c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	2203      	movs	r2, #3
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	68da      	ldr	r2, [r3, #12]
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001550:	2201      	movs	r2, #1
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f003 0201 	and.w	r2, r3, #1
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b03      	cmp	r3, #3
 8001586:	d017      	beq.n	80015b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	2203      	movs	r2, #3
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d123      	bne.n	800160c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	08da      	lsrs	r2, r3, #3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3208      	adds	r2, #8
 80015cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	220f      	movs	r2, #15
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	691a      	ldr	r2, [r3, #16]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	08da      	lsrs	r2, r3, #3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3208      	adds	r2, #8
 8001606:	69b9      	ldr	r1, [r7, #24]
 8001608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	2203      	movs	r2, #3
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0203 	and.w	r2, r3, #3
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 80b4 	beq.w	80017b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b60      	ldr	r3, [pc, #384]	; (80017d4 <HAL_GPIO_Init+0x30c>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	4a5f      	ldr	r2, [pc, #380]	; (80017d4 <HAL_GPIO_Init+0x30c>)
 8001658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165c:	6453      	str	r3, [r2, #68]	; 0x44
 800165e:	4b5d      	ldr	r3, [pc, #372]	; (80017d4 <HAL_GPIO_Init+0x30c>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800166a:	4a5b      	ldr	r2, [pc, #364]	; (80017d8 <HAL_GPIO_Init+0x310>)
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	089b      	lsrs	r3, r3, #2
 8001670:	3302      	adds	r3, #2
 8001672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	220f      	movs	r2, #15
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a52      	ldr	r2, [pc, #328]	; (80017dc <HAL_GPIO_Init+0x314>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d02b      	beq.n	80016ee <HAL_GPIO_Init+0x226>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a51      	ldr	r2, [pc, #324]	; (80017e0 <HAL_GPIO_Init+0x318>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d025      	beq.n	80016ea <HAL_GPIO_Init+0x222>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a50      	ldr	r2, [pc, #320]	; (80017e4 <HAL_GPIO_Init+0x31c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d01f      	beq.n	80016e6 <HAL_GPIO_Init+0x21e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4f      	ldr	r2, [pc, #316]	; (80017e8 <HAL_GPIO_Init+0x320>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d019      	beq.n	80016e2 <HAL_GPIO_Init+0x21a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4e      	ldr	r2, [pc, #312]	; (80017ec <HAL_GPIO_Init+0x324>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d013      	beq.n	80016de <HAL_GPIO_Init+0x216>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4d      	ldr	r2, [pc, #308]	; (80017f0 <HAL_GPIO_Init+0x328>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d00d      	beq.n	80016da <HAL_GPIO_Init+0x212>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4c      	ldr	r2, [pc, #304]	; (80017f4 <HAL_GPIO_Init+0x32c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d007      	beq.n	80016d6 <HAL_GPIO_Init+0x20e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4b      	ldr	r2, [pc, #300]	; (80017f8 <HAL_GPIO_Init+0x330>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d101      	bne.n	80016d2 <HAL_GPIO_Init+0x20a>
 80016ce:	2307      	movs	r3, #7
 80016d0:	e00e      	b.n	80016f0 <HAL_GPIO_Init+0x228>
 80016d2:	2308      	movs	r3, #8
 80016d4:	e00c      	b.n	80016f0 <HAL_GPIO_Init+0x228>
 80016d6:	2306      	movs	r3, #6
 80016d8:	e00a      	b.n	80016f0 <HAL_GPIO_Init+0x228>
 80016da:	2305      	movs	r3, #5
 80016dc:	e008      	b.n	80016f0 <HAL_GPIO_Init+0x228>
 80016de:	2304      	movs	r3, #4
 80016e0:	e006      	b.n	80016f0 <HAL_GPIO_Init+0x228>
 80016e2:	2303      	movs	r3, #3
 80016e4:	e004      	b.n	80016f0 <HAL_GPIO_Init+0x228>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e002      	b.n	80016f0 <HAL_GPIO_Init+0x228>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <HAL_GPIO_Init+0x228>
 80016ee:	2300      	movs	r3, #0
 80016f0:	69fa      	ldr	r2, [r7, #28]
 80016f2:	f002 0203 	and.w	r2, r2, #3
 80016f6:	0092      	lsls	r2, r2, #2
 80016f8:	4093      	lsls	r3, r2
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001700:	4935      	ldr	r1, [pc, #212]	; (80017d8 <HAL_GPIO_Init+0x310>)
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	089b      	lsrs	r3, r3, #2
 8001706:	3302      	adds	r3, #2
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800170e:	4b3b      	ldr	r3, [pc, #236]	; (80017fc <HAL_GPIO_Init+0x334>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001732:	4a32      	ldr	r2, [pc, #200]	; (80017fc <HAL_GPIO_Init+0x334>)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001738:	4b30      	ldr	r3, [pc, #192]	; (80017fc <HAL_GPIO_Init+0x334>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800175c:	4a27      	ldr	r2, [pc, #156]	; (80017fc <HAL_GPIO_Init+0x334>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001762:	4b26      	ldr	r3, [pc, #152]	; (80017fc <HAL_GPIO_Init+0x334>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	43db      	mvns	r3, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4013      	ands	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001786:	4a1d      	ldr	r2, [pc, #116]	; (80017fc <HAL_GPIO_Init+0x334>)
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <HAL_GPIO_Init+0x334>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d003      	beq.n	80017b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017b0:	4a12      	ldr	r2, [pc, #72]	; (80017fc <HAL_GPIO_Init+0x334>)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3301      	adds	r3, #1
 80017ba:	61fb      	str	r3, [r7, #28]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	2b0f      	cmp	r3, #15
 80017c0:	f67f ae90 	bls.w	80014e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3724      	adds	r7, #36	; 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40013800 	.word	0x40013800
 80017dc:	40020000 	.word	0x40020000
 80017e0:	40020400 	.word	0x40020400
 80017e4:	40020800 	.word	0x40020800
 80017e8:	40020c00 	.word	0x40020c00
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40021400 	.word	0x40021400
 80017f4:	40021800 	.word	0x40021800
 80017f8:	40021c00 	.word	0x40021c00
 80017fc:	40013c00 	.word	0x40013c00

08001800 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691a      	ldr	r2, [r3, #16]
 8001810:	887b      	ldrh	r3, [r7, #2]
 8001812:	4013      	ands	r3, r2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001818:	2301      	movs	r3, #1
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	e001      	b.n	8001822 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001822:	7bfb      	ldrb	r3, [r7, #15]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]
 800183c:	4613      	mov	r3, r2
 800183e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001840:	787b      	ldrb	r3, [r7, #1]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001846:	887a      	ldrh	r2, [r7, #2]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800184c:	e003      	b.n	8001856 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800184e:	887b      	ldrh	r3, [r7, #2]
 8001850:	041a      	lsls	r2, r3, #16
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	619a      	str	r2, [r3, #24]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001862:	b480      	push	{r7}
 8001864:	b085      	sub	sp, #20
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	460b      	mov	r3, r1
 800186c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001874:	887a      	ldrh	r2, [r7, #2]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4013      	ands	r3, r2
 800187a:	041a      	lsls	r2, r3, #16
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	43d9      	mvns	r1, r3
 8001880:	887b      	ldrh	r3, [r7, #2]
 8001882:	400b      	ands	r3, r1
 8001884:	431a      	orrs	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	619a      	str	r2, [r3, #24]
}
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e12b      	b.n	8001b02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d106      	bne.n	80018c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff fa52 	bl	8000d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2224      	movs	r2, #36	; 0x24
 80018c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0201 	bic.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018fc:	f002 fc9e 	bl	800423c <HAL_RCC_GetPCLK1Freq>
 8001900:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4a81      	ldr	r2, [pc, #516]	; (8001b0c <HAL_I2C_Init+0x274>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d807      	bhi.n	800191c <HAL_I2C_Init+0x84>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4a80      	ldr	r2, [pc, #512]	; (8001b10 <HAL_I2C_Init+0x278>)
 8001910:	4293      	cmp	r3, r2
 8001912:	bf94      	ite	ls
 8001914:	2301      	movls	r3, #1
 8001916:	2300      	movhi	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	e006      	b.n	800192a <HAL_I2C_Init+0x92>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4a7d      	ldr	r2, [pc, #500]	; (8001b14 <HAL_I2C_Init+0x27c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	bf94      	ite	ls
 8001924:	2301      	movls	r3, #1
 8001926:	2300      	movhi	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0e7      	b.n	8001b02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4a78      	ldr	r2, [pc, #480]	; (8001b18 <HAL_I2C_Init+0x280>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	0c9b      	lsrs	r3, r3, #18
 800193c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	430a      	orrs	r2, r1
 8001950:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4a6a      	ldr	r2, [pc, #424]	; (8001b0c <HAL_I2C_Init+0x274>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d802      	bhi.n	800196c <HAL_I2C_Init+0xd4>
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	3301      	adds	r3, #1
 800196a:	e009      	b.n	8001980 <HAL_I2C_Init+0xe8>
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001972:	fb02 f303 	mul.w	r3, r2, r3
 8001976:	4a69      	ldr	r2, [pc, #420]	; (8001b1c <HAL_I2C_Init+0x284>)
 8001978:	fba2 2303 	umull	r2, r3, r2, r3
 800197c:	099b      	lsrs	r3, r3, #6
 800197e:	3301      	adds	r3, #1
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	430b      	orrs	r3, r1
 8001986:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001992:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	495c      	ldr	r1, [pc, #368]	; (8001b0c <HAL_I2C_Init+0x274>)
 800199c:	428b      	cmp	r3, r1
 800199e:	d819      	bhi.n	80019d4 <HAL_I2C_Init+0x13c>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	1e59      	subs	r1, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80019ae:	1c59      	adds	r1, r3, #1
 80019b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019b4:	400b      	ands	r3, r1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00a      	beq.n	80019d0 <HAL_I2C_Init+0x138>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1e59      	subs	r1, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80019c8:	3301      	adds	r3, #1
 80019ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ce:	e051      	b.n	8001a74 <HAL_I2C_Init+0x1dc>
 80019d0:	2304      	movs	r3, #4
 80019d2:	e04f      	b.n	8001a74 <HAL_I2C_Init+0x1dc>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d111      	bne.n	8001a00 <HAL_I2C_Init+0x168>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1e58      	subs	r0, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6859      	ldr	r1, [r3, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	440b      	add	r3, r1
 80019ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ee:	3301      	adds	r3, #1
 80019f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bf0c      	ite	eq
 80019f8:	2301      	moveq	r3, #1
 80019fa:	2300      	movne	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	e012      	b.n	8001a26 <HAL_I2C_Init+0x18e>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1e58      	subs	r0, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6859      	ldr	r1, [r3, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	0099      	lsls	r1, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a16:	3301      	adds	r3, #1
 8001a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	bf0c      	ite	eq
 8001a20:	2301      	moveq	r3, #1
 8001a22:	2300      	movne	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_I2C_Init+0x196>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e022      	b.n	8001a74 <HAL_I2C_Init+0x1dc>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10e      	bne.n	8001a54 <HAL_I2C_Init+0x1bc>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1e58      	subs	r0, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6859      	ldr	r1, [r3, #4]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	440b      	add	r3, r1
 8001a44:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a48:	3301      	adds	r3, #1
 8001a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a52:	e00f      	b.n	8001a74 <HAL_I2C_Init+0x1dc>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1e58      	subs	r0, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6859      	ldr	r1, [r3, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	0099      	lsls	r1, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	6809      	ldr	r1, [r1, #0]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69da      	ldr	r2, [r3, #28]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001aa2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6911      	ldr	r1, [r2, #16]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68d2      	ldr	r2, [r2, #12]
 8001aae:	4311      	orrs	r1, r2
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	430b      	orrs	r3, r1
 8001ab6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2220      	movs	r2, #32
 8001aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	000186a0 	.word	0x000186a0
 8001b10:	001e847f 	.word	0x001e847f
 8001b14:	003d08ff 	.word	0x003d08ff
 8001b18:	431bde83 	.word	0x431bde83
 8001b1c:	10624dd3 	.word	0x10624dd3

08001b20 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e128      	b.n	8001d84 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d109      	bne.n	8001b52 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a90      	ldr	r2, [pc, #576]	; (8001d8c <HAL_I2S_Init+0x26c>)
 8001b4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff f953 	bl	8000df8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2202      	movs	r2, #2
 8001b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001b68:	f023 030f 	bic.w	r3, r3, #15
 8001b6c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2202      	movs	r2, #2
 8001b74:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d060      	beq.n	8001c40 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d102      	bne.n	8001b8c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001b86:	2310      	movs	r3, #16
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	e001      	b.n	8001b90 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001b8c:	2320      	movs	r3, #32
 8001b8e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b20      	cmp	r3, #32
 8001b96:	d802      	bhi.n	8001b9e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	f002 fc42 	bl	8004428 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ba4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bae:	d125      	bne.n	8001bfc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d010      	beq.n	8001bda <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	461a      	mov	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd4:	3305      	adds	r3, #5
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	e01f      	b.n	8001c1a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	461a      	mov	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf6:	3305      	adds	r3, #5
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	e00e      	b.n	8001c1a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	3305      	adds	r3, #5
 8001c18:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	4a5c      	ldr	r2, [pc, #368]	; (8001d90 <HAL_I2S_Init+0x270>)
 8001c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c22:	08db      	lsrs	r3, r3, #3
 8001c24:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	085b      	lsrs	r3, r3, #1
 8001c36:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	021b      	lsls	r3, r3, #8
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	e003      	b.n	8001c48 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001c40:	2302      	movs	r3, #2
 8001c42:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d902      	bls.n	8001c54 <HAL_I2S_Init+0x134>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	2bff      	cmp	r3, #255	; 0xff
 8001c52:	d907      	bls.n	8001c64 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	f043 0210 	orr.w	r2, r3, #16
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e08f      	b.n	8001d84 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	ea42 0103 	orr.w	r1, r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	69fa      	ldr	r2, [r7, #28]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001c82:	f023 030f 	bic.w	r3, r3, #15
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6851      	ldr	r1, [r2, #4]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6892      	ldr	r2, [r2, #8]
 8001c8e:	4311      	orrs	r1, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	68d2      	ldr	r2, [r2, #12]
 8001c94:	4311      	orrs	r1, r2
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6992      	ldr	r2, [r2, #24]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ca6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d161      	bne.n	8001d74 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a38      	ldr	r2, [pc, #224]	; (8001d94 <HAL_I2S_Init+0x274>)
 8001cb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a37      	ldr	r2, [pc, #220]	; (8001d98 <HAL_I2S_Init+0x278>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d101      	bne.n	8001cc4 <HAL_I2S_Init+0x1a4>
 8001cc0:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <HAL_I2S_Init+0x27c>)
 8001cc2:	e001      	b.n	8001cc8 <HAL_I2S_Init+0x1a8>
 8001cc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	4932      	ldr	r1, [pc, #200]	; (8001d98 <HAL_I2S_Init+0x278>)
 8001cd0:	428a      	cmp	r2, r1
 8001cd2:	d101      	bne.n	8001cd8 <HAL_I2S_Init+0x1b8>
 8001cd4:	4a31      	ldr	r2, [pc, #196]	; (8001d9c <HAL_I2S_Init+0x27c>)
 8001cd6:	e001      	b.n	8001cdc <HAL_I2S_Init+0x1bc>
 8001cd8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001cdc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001ce0:	f023 030f 	bic.w	r3, r3, #15
 8001ce4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a2b      	ldr	r2, [pc, #172]	; (8001d98 <HAL_I2S_Init+0x278>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d101      	bne.n	8001cf4 <HAL_I2S_Init+0x1d4>
 8001cf0:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <HAL_I2S_Init+0x27c>)
 8001cf2:	e001      	b.n	8001cf8 <HAL_I2S_Init+0x1d8>
 8001cf4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a25      	ldr	r2, [pc, #148]	; (8001d98 <HAL_I2S_Init+0x278>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d101      	bne.n	8001d0a <HAL_I2S_Init+0x1ea>
 8001d06:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <HAL_I2S_Init+0x27c>)
 8001d08:	e001      	b.n	8001d0e <HAL_I2S_Init+0x1ee>
 8001d0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d1a:	d003      	beq.n	8001d24 <HAL_I2S_Init+0x204>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d103      	bne.n	8001d2c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001d24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	e001      	b.n	8001d30 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d44:	4313      	orrs	r3, r2
 8001d46:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	897b      	ldrh	r3, [r7, #10]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d5c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a0d      	ldr	r2, [pc, #52]	; (8001d98 <HAL_I2S_Init+0x278>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d101      	bne.n	8001d6c <HAL_I2S_Init+0x24c>
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <HAL_I2S_Init+0x27c>)
 8001d6a:	e001      	b.n	8001d70 <HAL_I2S_Init+0x250>
 8001d6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d70:	897a      	ldrh	r2, [r7, #10]
 8001d72:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3720      	adds	r7, #32
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	08001e97 	.word	0x08001e97
 8001d90:	cccccccd 	.word	0xcccccccd
 8001d94:	08001fad 	.word	0x08001fad
 8001d98:	40003800 	.word	0x40003800
 8001d9c:	40003400 	.word	0x40003400

08001da0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	881a      	ldrh	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	1c9a      	adds	r2, r3, #2
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	3b01      	subs	r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10e      	bne.n	8001e30 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e20:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ffb8 	bl	8001da0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4a:	b292      	uxth	r2, r2
 8001e4c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e52:	1c9a      	adds	r2, r3, #2
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10e      	bne.n	8001e8e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e7e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff93 	bl	8001db4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d13a      	bne.n	8001f28 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d109      	bne.n	8001ed0 <I2S_IRQHandler+0x3a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec6:	2b40      	cmp	r3, #64	; 0x40
 8001ec8:	d102      	bne.n	8001ed0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff ffb4 	bl	8001e38 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed6:	2b40      	cmp	r3, #64	; 0x40
 8001ed8:	d126      	bne.n	8001f28 <I2S_IRQHandler+0x92>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0320 	and.w	r3, r3, #32
 8001ee4:	2b20      	cmp	r3, #32
 8001ee6:	d11f      	bne.n	8001f28 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ef6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f043 0202 	orr.w	r2, r3, #2
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ff50 	bl	8001dc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d136      	bne.n	8001fa2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d109      	bne.n	8001f52 <I2S_IRQHandler+0xbc>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f48:	2b80      	cmp	r3, #128	; 0x80
 8001f4a:	d102      	bne.n	8001f52 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff ff45 	bl	8001ddc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d122      	bne.n	8001fa2 <I2S_IRQHandler+0x10c>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	2b20      	cmp	r3, #32
 8001f68:	d11b      	bne.n	8001fa2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f78:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f94:	f043 0204 	orr.w	r2, r3, #4
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ff13 	bl	8001dc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a92      	ldr	r2, [pc, #584]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d101      	bne.n	8001fca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001fc6:	4b92      	ldr	r3, [pc, #584]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fc8:	e001      	b.n	8001fce <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001fca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a8b      	ldr	r2, [pc, #556]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d101      	bne.n	8001fe8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001fe4:	4b8a      	ldr	r3, [pc, #552]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fe6:	e001      	b.n	8001fec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001fe8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ff8:	d004      	beq.n	8002004 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f040 8099 	bne.w	8002136 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b02      	cmp	r3, #2
 800200c:	d107      	bne.n	800201e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f925 	bl	8002268 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b01      	cmp	r3, #1
 8002026:	d107      	bne.n	8002038 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f9c8 	bl	80023c8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203e:	2b40      	cmp	r3, #64	; 0x40
 8002040:	d13a      	bne.n	80020b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	f003 0320 	and.w	r3, r3, #32
 8002048:	2b00      	cmp	r3, #0
 800204a:	d035      	beq.n	80020b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a6e      	ldr	r2, [pc, #440]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d101      	bne.n	800205a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002056:	4b6e      	ldr	r3, [pc, #440]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002058:	e001      	b.n	800205e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800205a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4969      	ldr	r1, [pc, #420]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002066:	428b      	cmp	r3, r1
 8002068:	d101      	bne.n	800206e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800206a:	4b69      	ldr	r3, [pc, #420]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800206c:	e001      	b.n	8002072 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800206e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002072:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002076:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002086:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	f043 0202 	orr.w	r2, r3, #2
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff fe88 	bl	8001dc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b08      	cmp	r3, #8
 80020c0:	f040 80c3 	bne.w	800224a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 80bd 	beq.w	800224a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020de:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a49      	ldr	r2, [pc, #292]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d101      	bne.n	80020ee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80020ea:	4b49      	ldr	r3, [pc, #292]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020ec:	e001      	b.n	80020f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80020ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4944      	ldr	r1, [pc, #272]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020fa:	428b      	cmp	r3, r1
 80020fc:	d101      	bne.n	8002102 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80020fe:	4b44      	ldr	r3, [pc, #272]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002100:	e001      	b.n	8002106 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002102:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002106:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800210a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800210c:	2300      	movs	r3, #0
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f043 0204 	orr.w	r2, r3, #4
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff fe4a 	bl	8001dc8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002134:	e089      	b.n	800224a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b02      	cmp	r3, #2
 800213e:	d107      	bne.n	8002150 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f8be 	bl	80022cc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b01      	cmp	r3, #1
 8002158:	d107      	bne.n	800216a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f8fd 	bl	8002364 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002170:	2b40      	cmp	r3, #64	; 0x40
 8002172:	d12f      	bne.n	80021d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f003 0320 	and.w	r3, r3, #32
 800217a:	2b00      	cmp	r3, #0
 800217c:	d02a      	beq.n	80021d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800218c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a1e      	ldr	r2, [pc, #120]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d101      	bne.n	800219c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002198:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800219a:	e001      	b.n	80021a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800219c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4919      	ldr	r1, [pc, #100]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021a8:	428b      	cmp	r3, r1
 80021aa:	d101      	bne.n	80021b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80021ac:	4b18      	ldr	r3, [pc, #96]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021ae:	e001      	b.n	80021b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80021b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f043 0202 	orr.w	r2, r3, #2
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff fdfa 	bl	8001dc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d136      	bne.n	800224c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	f003 0320 	and.w	r3, r3, #32
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d031      	beq.n	800224c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a07      	ldr	r2, [pc, #28]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d101      	bne.n	80021f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80021f2:	4b07      	ldr	r3, [pc, #28]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021f4:	e001      	b.n	80021fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80021f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4902      	ldr	r1, [pc, #8]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002202:	428b      	cmp	r3, r1
 8002204:	d106      	bne.n	8002214 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002206:	4b02      	ldr	r3, [pc, #8]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002208:	e006      	b.n	8002218 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800220a:	bf00      	nop
 800220c:	40003800 	.word	0x40003800
 8002210:	40003400 	.word	0x40003400
 8002214:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002218:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800221c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800222c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	f043 0204 	orr.w	r2, r3, #4
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff fdc0 	bl	8001dc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002248:	e000      	b.n	800224c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800224a:	bf00      	nop
}
 800224c:	bf00      	nop
 800224e:	3720      	adds	r7, #32
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	1c99      	adds	r1, r3, #2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6251      	str	r1, [r2, #36]	; 0x24
 800227a:	881a      	ldrh	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002286:	b29b      	uxth	r3, r3
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002294:	b29b      	uxth	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d113      	bne.n	80022c2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80022a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d106      	bne.n	80022c2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ffc9 	bl	8002254 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	1c99      	adds	r1, r3, #2
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6251      	str	r1, [r2, #36]	; 0x24
 80022de:	8819      	ldrh	r1, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a1d      	ldr	r2, [pc, #116]	; (800235c <I2SEx_TxISR_I2SExt+0x90>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d101      	bne.n	80022ee <I2SEx_TxISR_I2SExt+0x22>
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <I2SEx_TxISR_I2SExt+0x94>)
 80022ec:	e001      	b.n	80022f2 <I2SEx_TxISR_I2SExt+0x26>
 80022ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022f2:	460a      	mov	r2, r1
 80022f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d121      	bne.n	8002352 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a12      	ldr	r2, [pc, #72]	; (800235c <I2SEx_TxISR_I2SExt+0x90>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d101      	bne.n	800231c <I2SEx_TxISR_I2SExt+0x50>
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <I2SEx_TxISR_I2SExt+0x94>)
 800231a:	e001      	b.n	8002320 <I2SEx_TxISR_I2SExt+0x54>
 800231c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	490d      	ldr	r1, [pc, #52]	; (800235c <I2SEx_TxISR_I2SExt+0x90>)
 8002328:	428b      	cmp	r3, r1
 800232a:	d101      	bne.n	8002330 <I2SEx_TxISR_I2SExt+0x64>
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <I2SEx_TxISR_I2SExt+0x94>)
 800232e:	e001      	b.n	8002334 <I2SEx_TxISR_I2SExt+0x68>
 8002330:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002334:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002338:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800233e:	b29b      	uxth	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d106      	bne.n	8002352 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff ff81 	bl	8002254 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40003800 	.word	0x40003800
 8002360:	40003400 	.word	0x40003400

08002364 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68d8      	ldr	r0, [r3, #12]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	1c99      	adds	r1, r3, #2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800237c:	b282      	uxth	r2, r0
 800237e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002384:	b29b      	uxth	r3, r3
 8002386:	3b01      	subs	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002392:	b29b      	uxth	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d113      	bne.n	80023c0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023a6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ff4a 	bl	8002254 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a20      	ldr	r2, [pc, #128]	; (8002458 <I2SEx_RxISR_I2SExt+0x90>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d101      	bne.n	80023de <I2SEx_RxISR_I2SExt+0x16>
 80023da:	4b20      	ldr	r3, [pc, #128]	; (800245c <I2SEx_RxISR_I2SExt+0x94>)
 80023dc:	e001      	b.n	80023e2 <I2SEx_RxISR_I2SExt+0x1a>
 80023de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023e2:	68d8      	ldr	r0, [r3, #12]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	1c99      	adds	r1, r3, #2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	62d1      	str	r1, [r2, #44]	; 0x2c
 80023ee:	b282      	uxth	r2, r0
 80023f0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002404:	b29b      	uxth	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d121      	bne.n	800244e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a12      	ldr	r2, [pc, #72]	; (8002458 <I2SEx_RxISR_I2SExt+0x90>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d101      	bne.n	8002418 <I2SEx_RxISR_I2SExt+0x50>
 8002414:	4b11      	ldr	r3, [pc, #68]	; (800245c <I2SEx_RxISR_I2SExt+0x94>)
 8002416:	e001      	b.n	800241c <I2SEx_RxISR_I2SExt+0x54>
 8002418:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	490d      	ldr	r1, [pc, #52]	; (8002458 <I2SEx_RxISR_I2SExt+0x90>)
 8002424:	428b      	cmp	r3, r1
 8002426:	d101      	bne.n	800242c <I2SEx_RxISR_I2SExt+0x64>
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <I2SEx_RxISR_I2SExt+0x94>)
 800242a:	e001      	b.n	8002430 <I2SEx_RxISR_I2SExt+0x68>
 800242c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002430:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002434:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243a:	b29b      	uxth	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d106      	bne.n	800244e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff ff03 	bl	8002254 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40003800 	.word	0x40003800
 800245c:	40003400 	.word	0x40003400

08002460 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002462:	b08f      	sub	sp, #60	; 0x3c
 8002464:	af0a      	add	r7, sp, #40	; 0x28
 8002466:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e10f      	b.n	8002692 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d106      	bne.n	8002492 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f005 fecd 	bl	800822c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2203      	movs	r2, #3
 8002496:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d102      	bne.n	80024ac <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f002 f9b4 	bl	800481e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	687e      	ldr	r6, [r7, #4]
 80024be:	466d      	mov	r5, sp
 80024c0:	f106 0410 	add.w	r4, r6, #16
 80024c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80024d4:	1d33      	adds	r3, r6, #4
 80024d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024d8:	6838      	ldr	r0, [r7, #0]
 80024da:	f002 f88c 	bl	80045f6 <USB_CoreInit>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0d0      	b.n	8002692 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2100      	movs	r1, #0
 80024f6:	4618      	mov	r0, r3
 80024f8:	f002 f9a2 	bl	8004840 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	73fb      	strb	r3, [r7, #15]
 8002500:	e04a      	b.n	8002598 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002502:	7bfa      	ldrb	r2, [r7, #15]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	333d      	adds	r3, #61	; 0x3d
 8002512:	2201      	movs	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002516:	7bfa      	ldrb	r2, [r7, #15]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	333c      	adds	r3, #60	; 0x3c
 8002526:	7bfa      	ldrb	r2, [r7, #15]
 8002528:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	b298      	uxth	r0, r3
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4413      	add	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	3344      	adds	r3, #68	; 0x44
 800253e:	4602      	mov	r2, r0
 8002540:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002542:	7bfa      	ldrb	r2, [r7, #15]
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4413      	add	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	3340      	adds	r3, #64	; 0x40
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002556:	7bfa      	ldrb	r2, [r7, #15]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	3348      	adds	r3, #72	; 0x48
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800256a:	7bfa      	ldrb	r2, [r7, #15]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	334c      	adds	r3, #76	; 0x4c
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800257e:	7bfa      	ldrb	r2, [r7, #15]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	3354      	adds	r3, #84	; 0x54
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	3301      	adds	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
 8002598:	7bfa      	ldrb	r2, [r7, #15]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d3af      	bcc.n	8002502 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a2:	2300      	movs	r3, #0
 80025a4:	73fb      	strb	r3, [r7, #15]
 80025a6:	e044      	b.n	8002632 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025be:	7bfa      	ldrb	r2, [r7, #15]
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80025d0:	7bfa      	ldrb	r2, [r7, #15]
 80025d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025d4:	7bfa      	ldrb	r2, [r7, #15]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4413      	add	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025ea:	7bfa      	ldrb	r2, [r7, #15]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002600:	7bfa      	ldrb	r2, [r7, #15]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002616:	7bfa      	ldrb	r2, [r7, #15]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4413      	add	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	3301      	adds	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
 8002632:	7bfa      	ldrb	r2, [r7, #15]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	429a      	cmp	r2, r3
 800263a:	d3b5      	bcc.n	80025a8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	603b      	str	r3, [r7, #0]
 8002642:	687e      	ldr	r6, [r7, #4]
 8002644:	466d      	mov	r5, sp
 8002646:	f106 0410 	add.w	r4, r6, #16
 800264a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800264c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800264e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002652:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002656:	e885 0003 	stmia.w	r5, {r0, r1}
 800265a:	1d33      	adds	r3, r6, #4
 800265c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800265e:	6838      	ldr	r0, [r7, #0]
 8002660:	f002 f93a 	bl	80048d8 <USB_DevInit>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2202      	movs	r2, #2
 800266e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e00d      	b.n	8002692 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f003 fa89 	bl	8005ba2 <USB_DevDisconnect>

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800269a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <HAL_PCD_Start+0x1c>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e020      	b.n	80026f8 <HAL_PCD_Start+0x5e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d109      	bne.n	80026da <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d005      	beq.n	80026da <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f002 f88c 	bl	80047fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f003 fa39 	bl	8005b60 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002700:	b590      	push	{r4, r7, lr}
 8002702:	b08d      	sub	sp, #52	; 0x34
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f003 faf7 	bl	8005d0a <USB_GetMode>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	f040 848a 	bne.w	8003038 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f003 fa5b 	bl	8005be4 <USB_ReadInterrupts>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 8480 	beq.w	8003036 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f003 fa48 	bl	8005be4 <USB_ReadInterrupts>
 8002754:	4603      	mov	r3, r0
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b02      	cmp	r3, #2
 800275c:	d107      	bne.n	800276e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f002 0202 	and.w	r2, r2, #2
 800276c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f003 fa36 	bl	8005be4 <USB_ReadInterrupts>
 8002778:	4603      	mov	r3, r0
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	2b10      	cmp	r3, #16
 8002780:	d161      	bne.n	8002846 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	699a      	ldr	r2, [r3, #24]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0210 	bic.w	r2, r2, #16
 8002790:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	f003 020f 	and.w	r2, r3, #15
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	3304      	adds	r3, #4
 80027b0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	0c5b      	lsrs	r3, r3, #17
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d124      	bne.n	8002808 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d035      	beq.n	8002836 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027d8:	b29b      	uxth	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	6a38      	ldr	r0, [r7, #32]
 80027de:	f003 f86d 	bl	80058bc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	691a      	ldr	r2, [r3, #16]
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	091b      	lsrs	r3, r3, #4
 80027ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027ee:	441a      	add	r2, r3
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	6a1a      	ldr	r2, [r3, #32]
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002800:	441a      	add	r2, r3
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	621a      	str	r2, [r3, #32]
 8002806:	e016      	b.n	8002836 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	0c5b      	lsrs	r3, r3, #17
 800280c:	f003 030f 	and.w	r3, r3, #15
 8002810:	2b06      	cmp	r3, #6
 8002812:	d110      	bne.n	8002836 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800281a:	2208      	movs	r2, #8
 800281c:	4619      	mov	r1, r3
 800281e:	6a38      	ldr	r0, [r7, #32]
 8002820:	f003 f84c 	bl	80058bc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	6a1a      	ldr	r2, [r3, #32]
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002830:	441a      	add	r2, r3
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699a      	ldr	r2, [r3, #24]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0210 	orr.w	r2, r2, #16
 8002844:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f003 f9ca 	bl	8005be4 <USB_ReadInterrupts>
 8002850:	4603      	mov	r3, r0
 8002852:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002856:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800285a:	f040 80a7 	bne.w	80029ac <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f003 f9cf 	bl	8005c0a <USB_ReadDevAllOutEpInterrupt>
 800286c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800286e:	e099      	b.n	80029a4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 808e 	beq.w	8002998 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	4611      	mov	r1, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f003 f9f3 	bl	8005c72 <USB_ReadDevOutEPInterrupt>
 800288c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00c      	beq.n	80028b2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a4:	461a      	mov	r2, r3
 80028a6:	2301      	movs	r3, #1
 80028a8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 fec3 	bl	8003638 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00c      	beq.n	80028d6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c8:	461a      	mov	r2, r3
 80028ca:	2308      	movs	r3, #8
 80028cc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80028ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 ff99 	bl	8003808 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ec:	461a      	mov	r2, r3
 80028ee:	2310      	movs	r3, #16
 80028f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d030      	beq.n	800295e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002904:	2b80      	cmp	r3, #128	; 0x80
 8002906:	d109      	bne.n	800291c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	69fa      	ldr	r2, [r7, #28]
 8002912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800291a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800291c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291e:	4613      	mov	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	3304      	adds	r3, #4
 8002930:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	78db      	ldrb	r3, [r3, #3]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d108      	bne.n	800294c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2200      	movs	r2, #0
 800293e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	b2db      	uxtb	r3, r3
 8002944:	4619      	mov	r1, r3
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f005 fd84 	bl	8008454 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	4413      	add	r3, r2
 8002954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002958:	461a      	mov	r2, r3
 800295a:	2302      	movs	r3, #2
 800295c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f003 0320 	and.w	r3, r3, #32
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	4413      	add	r3, r2
 8002970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002974:	461a      	mov	r2, r3
 8002976:	2320      	movs	r3, #32
 8002978:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d009      	beq.n	8002998 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	4413      	add	r3, r2
 800298c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002990:	461a      	mov	r2, r3
 8002992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002996:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	3301      	adds	r3, #1
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800299e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a0:	085b      	lsrs	r3, r3, #1
 80029a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80029a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f47f af62 	bne.w	8002870 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f003 f917 	bl	8005be4 <USB_ReadInterrupts>
 80029b6:	4603      	mov	r3, r0
 80029b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029c0:	f040 80db 	bne.w	8002b7a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f003 f938 	bl	8005c3e <USB_ReadDevAllInEpInterrupt>
 80029ce:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80029d4:	e0cd      	b.n	8002b72 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80029d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80c2 	beq.w	8002b66 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	4611      	mov	r1, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f003 f95e 	bl	8005cae <USB_ReadDevInEPInterrupt>
 80029f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d057      	beq.n	8002aae <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	f003 030f 	and.w	r3, r3, #15
 8002a04:	2201      	movs	r2, #1
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69f9      	ldr	r1, [r7, #28]
 8002a1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a1e:	4013      	ands	r3, r2
 8002a20:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a2e:	461a      	mov	r2, r3
 8002a30:	2301      	movs	r3, #1
 8002a32:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d132      	bne.n	8002aa2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a40:	4613      	mov	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	334c      	adds	r3, #76	; 0x4c
 8002a4c:	6819      	ldr	r1, [r3, #0]
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a52:	4613      	mov	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4413      	add	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4403      	add	r3, r0
 8002a5c:	3348      	adds	r3, #72	; 0x48
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4419      	add	r1, r3
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a66:	4613      	mov	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4403      	add	r3, r0
 8002a70:	334c      	adds	r3, #76	; 0x4c
 8002a72:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d113      	bne.n	8002aa2 <HAL_PCD_IRQHandler+0x3a2>
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7e:	4613      	mov	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	3354      	adds	r3, #84	; 0x54
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d108      	bne.n	8002aa2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	f003 f965 	bl	8005d6c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f005 fc4e 	bl	800834a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d008      	beq.n	8002aca <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	2308      	movs	r3, #8
 8002ac8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2310      	movs	r3, #16
 8002ae4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d008      	beq.n	8002b02 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002afc:	461a      	mov	r2, r3
 8002afe:	2340      	movs	r3, #64	; 0x40
 8002b00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d023      	beq.n	8002b54 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b0e:	6a38      	ldr	r0, [r7, #32]
 8002b10:	f002 f846 	bl	8004ba0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	3338      	adds	r3, #56	; 0x38
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	4413      	add	r3, r2
 8002b24:	3304      	adds	r3, #4
 8002b26:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	78db      	ldrb	r3, [r3, #3]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d108      	bne.n	8002b42 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2200      	movs	r2, #0
 8002b34:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f005 fc9b 	bl	8008478 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b4e:	461a      	mov	r2, r3
 8002b50:	2302      	movs	r3, #2
 8002b52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 fcdb 	bl	800351c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	3301      	adds	r3, #1
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6e:	085b      	lsrs	r3, r3, #1
 8002b70:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f47f af2e 	bne.w	80029d6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f003 f830 	bl	8005be4 <USB_ReadInterrupts>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b8e:	d122      	bne.n	8002bd6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b9e:	f023 0301 	bic.w	r3, r3, #1
 8002ba2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d108      	bne.n	8002bc0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 fec3 	bl	8003944 <HAL_PCDEx_LPM_Callback>
 8002bbe:	e002      	b.n	8002bc6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f005 fc39 	bl	8008438 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695a      	ldr	r2, [r3, #20]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002bd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f003 f802 	bl	8005be4 <USB_ReadInterrupts>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002be6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bea:	d112      	bne.n	8002c12 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d102      	bne.n	8002c02 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f005 fbf5 	bl	80083ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695a      	ldr	r2, [r3, #20]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002c10:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f002 ffe4 	bl	8005be4 <USB_ReadInterrupts>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c26:	f040 80b7 	bne.w	8002d98 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	69fa      	ldr	r2, [r7, #28]
 8002c34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c38:	f023 0301 	bic.w	r3, r3, #1
 8002c3c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2110      	movs	r1, #16
 8002c44:	4618      	mov	r0, r3
 8002c46:	f001 ffab 	bl	8004ba0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c4e:	e046      	b.n	8002cde <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c62:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c74:	0151      	lsls	r1, r2, #5
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	440a      	add	r2, r1
 8002c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c82:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c90:	461a      	mov	r2, r3
 8002c92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c96:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca8:	0151      	lsls	r1, r2, #5
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	440a      	add	r2, r1
 8002cae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cb6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc8:	0151      	lsls	r1, r2, #5
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	440a      	add	r2, r1
 8002cce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002cd6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cda:	3301      	adds	r3, #1
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d3b3      	bcc.n	8002c50 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	69fa      	ldr	r2, [r7, #28]
 8002cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cf6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002cfa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d016      	beq.n	8002d32 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d14:	f043 030b 	orr.w	r3, r3, #11
 8002d18:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d2a:	f043 030b 	orr.w	r3, r3, #11
 8002d2e:	6453      	str	r3, [r2, #68]	; 0x44
 8002d30:	e015      	b.n	8002d5e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	69fa      	ldr	r2, [r7, #28]
 8002d3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d44:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002d48:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	69fa      	ldr	r2, [r7, #28]
 8002d54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d58:	f043 030b 	orr.w	r3, r3, #11
 8002d5c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	69fa      	ldr	r2, [r7, #28]
 8002d68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d6c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d70:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d82:	461a      	mov	r2, r3
 8002d84:	f002 fff2 	bl	8005d6c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f002 ff21 	bl	8005be4 <USB_ReadInterrupts>
 8002da2:	4603      	mov	r3, r0
 8002da4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dac:	d124      	bne.n	8002df8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f002 ffb7 	bl	8005d26 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 ff6c 	bl	8004c9a <USB_GetDevSpeed>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681c      	ldr	r4, [r3, #0]
 8002dce:	f001 fa29 	bl	8004224 <HAL_RCC_GetHCLKFreq>
 8002dd2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	461a      	mov	r2, r3
 8002ddc:	4620      	mov	r0, r4
 8002dde:	f001 fc6b 	bl	80046b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f005 fad9 	bl	800839a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002df6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f002 fef1 	bl	8005be4 <USB_ReadInterrupts>
 8002e02:	4603      	mov	r3, r0
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d10a      	bne.n	8002e22 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f005 fab6 	bl	800837e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695a      	ldr	r2, [r3, #20]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f002 0208 	and.w	r2, r2, #8
 8002e20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f002 fedc 	bl	8005be4 <USB_ReadInterrupts>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e32:	2b80      	cmp	r3, #128	; 0x80
 8002e34:	d122      	bne.n	8002e7c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e42:	2301      	movs	r3, #1
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
 8002e46:	e014      	b.n	8002e72 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d105      	bne.n	8002e6c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	4619      	mov	r1, r3
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fb27 	bl	80034ba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	3301      	adds	r3, #1
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d3e5      	bcc.n	8002e48 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f002 feaf 	bl	8005be4 <USB_ReadInterrupts>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e90:	d13b      	bne.n	8002f0a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e92:	2301      	movs	r3, #1
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
 8002e96:	e02b      	b.n	8002ef0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3340      	adds	r3, #64	; 0x40
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d115      	bne.n	8002eea <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ebe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	da12      	bge.n	8002eea <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec8:	4613      	mov	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	333f      	adds	r3, #63	; 0x3f
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fae8 	bl	80034ba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	3301      	adds	r3, #1
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d3ce      	bcc.n	8002e98 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695a      	ldr	r2, [r3, #20]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002f08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f002 fe68 	bl	8005be4 <USB_ReadInterrupts>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f1e:	d155      	bne.n	8002fcc <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f20:	2301      	movs	r3, #1
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
 8002f24:	e045      	b.n	8002fb2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d12e      	bne.n	8002fac <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f4e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	da2b      	bge.n	8002fac <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002f60:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d121      	bne.n	8002fac <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10a      	bne.n	8002fac <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	69fa      	ldr	r2, [r7, #28]
 8002fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fa8:	6053      	str	r3, [r2, #4]
            break;
 8002faa:	e007      	b.n	8002fbc <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	3301      	adds	r3, #1
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d3b4      	bcc.n	8002f26 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002fca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f002 fe07 	bl	8005be4 <USB_ReadInterrupts>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe0:	d10a      	bne.n	8002ff8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f005 fa5a 	bl	800849c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ff6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f002 fdf1 	bl	8005be4 <USB_ReadInterrupts>
 8003002:	4603      	mov	r3, r0
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b04      	cmp	r3, #4
 800300a:	d115      	bne.n	8003038 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f005 fa4a 	bl	80084b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6859      	ldr	r1, [r3, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	430a      	orrs	r2, r1
 8003032:	605a      	str	r2, [r3, #4]
 8003034:	e000      	b.n	8003038 <HAL_PCD_IRQHandler+0x938>
      return;
 8003036:	bf00      	nop
    }
  }
}
 8003038:	3734      	adds	r7, #52	; 0x34
 800303a:	46bd      	mov	sp, r7
 800303c:	bd90      	pop	{r4, r7, pc}

0800303e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	460b      	mov	r3, r1
 8003048:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_PCD_SetAddress+0x1a>
 8003054:	2302      	movs	r3, #2
 8003056:	e013      	b.n	8003080 <HAL_PCD_SetAddress+0x42>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	4611      	mov	r1, r2
 8003070:	4618      	mov	r0, r3
 8003072:	f002 fd4f 	bl	8005b14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	4608      	mov	r0, r1
 8003092:	4611      	mov	r1, r2
 8003094:	461a      	mov	r2, r3
 8003096:	4603      	mov	r3, r0
 8003098:	70fb      	strb	r3, [r7, #3]
 800309a:	460b      	mov	r3, r1
 800309c:	803b      	strh	r3, [r7, #0]
 800309e:	4613      	mov	r3, r2
 80030a0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	da0f      	bge.n	80030ce <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ae:	78fb      	ldrb	r3, [r7, #3]
 80030b0:	f003 020f 	and.w	r2, r3, #15
 80030b4:	4613      	mov	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	3338      	adds	r3, #56	; 0x38
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	3304      	adds	r3, #4
 80030c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	705a      	strb	r2, [r3, #1]
 80030cc:	e00f      	b.n	80030ee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	f003 020f 	and.w	r2, r3, #15
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	4413      	add	r3, r2
 80030e4:	3304      	adds	r3, #4
 80030e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030fa:	883a      	ldrh	r2, [r7, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	78ba      	ldrb	r2, [r7, #2]
 8003104:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	785b      	ldrb	r3, [r3, #1]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d004      	beq.n	8003118 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003118:	78bb      	ldrb	r3, [r7, #2]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d102      	bne.n	8003124 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_PCD_EP_Open+0xaa>
 800312e:	2302      	movs	r3, #2
 8003130:	e00e      	b.n	8003150 <HAL_PCD_EP_Open+0xc8>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68f9      	ldr	r1, [r7, #12]
 8003140:	4618      	mov	r0, r3
 8003142:	f001 fdcf 	bl	8004ce4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800314e:	7afb      	ldrb	r3, [r7, #11]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003164:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003168:	2b00      	cmp	r3, #0
 800316a:	da0f      	bge.n	800318c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800316c:	78fb      	ldrb	r3, [r7, #3]
 800316e:	f003 020f 	and.w	r2, r3, #15
 8003172:	4613      	mov	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	3338      	adds	r3, #56	; 0x38
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	4413      	add	r3, r2
 8003180:	3304      	adds	r3, #4
 8003182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2201      	movs	r2, #1
 8003188:	705a      	strb	r2, [r3, #1]
 800318a:	e00f      	b.n	80031ac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	f003 020f 	and.w	r2, r3, #15
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	3304      	adds	r3, #4
 80031a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_PCD_EP_Close+0x6e>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e00e      	b.n	80031e4 <HAL_PCD_EP_Close+0x8c>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68f9      	ldr	r1, [r7, #12]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f001 fe0d 	bl	8004df4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	460b      	mov	r3, r1
 80031fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031fc:	7afb      	ldrb	r3, [r7, #11]
 80031fe:	f003 020f 	and.w	r2, r3, #15
 8003202:	4613      	mov	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4413      	add	r3, r2
 8003212:	3304      	adds	r3, #4
 8003214:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2200      	movs	r2, #0
 8003226:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2200      	movs	r2, #0
 800322c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800322e:	7afb      	ldrb	r3, [r7, #11]
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	b2da      	uxtb	r2, r3
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d102      	bne.n	8003248 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003248:	7afb      	ldrb	r3, [r7, #11]
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	461a      	mov	r2, r3
 800325e:	6979      	ldr	r1, [r7, #20]
 8003260:	f002 f8ec 	bl	800543c <USB_EP0StartXfer>
 8003264:	e008      	b.n	8003278 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	b2db      	uxtb	r3, r3
 8003270:	461a      	mov	r2, r3
 8003272:	6979      	ldr	r1, [r7, #20]
 8003274:	f001 fe9a 	bl	8004fac <USB_EPStartXfer>
  }

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	460b      	mov	r3, r1
 800328c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	f003 020f 	and.w	r2, r3, #15
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80032a4:	681b      	ldr	r3, [r3, #0]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b086      	sub	sp, #24
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	460b      	mov	r3, r1
 80032c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c2:	7afb      	ldrb	r3, [r7, #11]
 80032c4:	f003 020f 	and.w	r2, r3, #15
 80032c8:	4613      	mov	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	3338      	adds	r3, #56	; 0x38
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4413      	add	r3, r2
 80032d6:	3304      	adds	r3, #4
 80032d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2200      	movs	r2, #0
 80032ea:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2201      	movs	r2, #1
 80032f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032f2:	7afb      	ldrb	r3, [r7, #11]
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d102      	bne.n	800330c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800330c:	7afb      	ldrb	r3, [r7, #11]
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	b2db      	uxtb	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	6979      	ldr	r1, [r7, #20]
 8003324:	f002 f88a 	bl	800543c <USB_EP0StartXfer>
 8003328:	e008      	b.n	800333c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	b2db      	uxtb	r3, r3
 8003334:	461a      	mov	r2, r3
 8003336:	6979      	ldr	r1, [r7, #20]
 8003338:	f001 fe38 	bl	8004fac <USB_EPStartXfer>
  }

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	460b      	mov	r3, r1
 8003350:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003352:	78fb      	ldrb	r3, [r7, #3]
 8003354:	f003 020f 	and.w	r2, r3, #15
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	429a      	cmp	r2, r3
 800335e:	d901      	bls.n	8003364 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e050      	b.n	8003406 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003364:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003368:	2b00      	cmp	r3, #0
 800336a:	da0f      	bge.n	800338c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	f003 020f 	and.w	r2, r3, #15
 8003372:	4613      	mov	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	3338      	adds	r3, #56	; 0x38
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	4413      	add	r3, r2
 8003380:	3304      	adds	r3, #4
 8003382:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2201      	movs	r2, #1
 8003388:	705a      	strb	r2, [r3, #1]
 800338a:	e00d      	b.n	80033a8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800338c:	78fa      	ldrb	r2, [r7, #3]
 800338e:	4613      	mov	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4413      	add	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	4413      	add	r3, r2
 800339e:	3304      	adds	r3, #4
 80033a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2201      	movs	r2, #1
 80033ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ae:	78fb      	ldrb	r3, [r7, #3]
 80033b0:	f003 030f 	and.w	r3, r3, #15
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_PCD_EP_SetStall+0x82>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e01e      	b.n	8003406 <HAL_PCD_EP_SetStall+0xc0>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68f9      	ldr	r1, [r7, #12]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f002 fac8 	bl	800596c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10a      	bne.n	80033fc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	b2d9      	uxtb	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033f6:	461a      	mov	r2, r3
 80033f8:	f002 fcb8 	bl	8005d6c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b084      	sub	sp, #16
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	460b      	mov	r3, r1
 8003418:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800341a:	78fb      	ldrb	r3, [r7, #3]
 800341c:	f003 020f 	and.w	r2, r3, #15
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	429a      	cmp	r2, r3
 8003426:	d901      	bls.n	800342c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e042      	b.n	80034b2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800342c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003430:	2b00      	cmp	r3, #0
 8003432:	da0f      	bge.n	8003454 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	f003 020f 	and.w	r2, r3, #15
 800343a:	4613      	mov	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	3338      	adds	r3, #56	; 0x38
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	4413      	add	r3, r2
 8003448:	3304      	adds	r3, #4
 800344a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2201      	movs	r2, #1
 8003450:	705a      	strb	r2, [r3, #1]
 8003452:	e00f      	b.n	8003474 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	f003 020f 	and.w	r2, r3, #15
 800345a:	4613      	mov	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4413      	add	r3, r2
 800346a:	3304      	adds	r3, #4
 800346c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800347a:	78fb      	ldrb	r3, [r7, #3]
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	b2da      	uxtb	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_PCD_EP_ClrStall+0x86>
 8003490:	2302      	movs	r3, #2
 8003492:	e00e      	b.n	80034b2 <HAL_PCD_EP_ClrStall+0xa4>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68f9      	ldr	r1, [r7, #12]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f002 fad0 	bl	8005a48 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b084      	sub	sp, #16
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	460b      	mov	r3, r1
 80034c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80034c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	da0c      	bge.n	80034e8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ce:	78fb      	ldrb	r3, [r7, #3]
 80034d0:	f003 020f 	and.w	r2, r3, #15
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	3338      	adds	r3, #56	; 0x38
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	4413      	add	r3, r2
 80034e2:	3304      	adds	r3, #4
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	e00c      	b.n	8003502 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	f003 020f 	and.w	r2, r3, #15
 80034ee:	4613      	mov	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4413      	add	r3, r2
 80034fe:	3304      	adds	r3, #4
 8003500:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68f9      	ldr	r1, [r7, #12]
 8003508:	4618      	mov	r0, r3
 800350a:	f002 f8ef 	bl	80056ec <USB_EPStopXfer>
 800350e:	4603      	mov	r3, r0
 8003510:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003512:	7afb      	ldrb	r3, [r7, #11]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08a      	sub	sp, #40	; 0x28
 8003520:	af02      	add	r7, sp, #8
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	4613      	mov	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	3338      	adds	r3, #56	; 0x38
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	4413      	add	r3, r2
 8003540:	3304      	adds	r3, #4
 8003542:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a1a      	ldr	r2, [r3, #32]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	429a      	cmp	r2, r3
 800354e:	d901      	bls.n	8003554 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e06c      	b.n	800362e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	699a      	ldr	r2, [r3, #24]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	429a      	cmp	r2, r3
 8003568:	d902      	bls.n	8003570 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	3303      	adds	r3, #3
 8003574:	089b      	lsrs	r3, r3, #2
 8003576:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003578:	e02b      	b.n	80035d2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	69fa      	ldr	r2, [r7, #28]
 800358c:	429a      	cmp	r2, r3
 800358e:	d902      	bls.n	8003596 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	3303      	adds	r3, #3
 800359a:	089b      	lsrs	r3, r3, #2
 800359c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6919      	ldr	r1, [r3, #16]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	4603      	mov	r3, r0
 80035b4:	6978      	ldr	r0, [r7, #20]
 80035b6:	f002 f943 	bl	8005840 <USB_WritePacket>

    ep->xfer_buff  += len;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	691a      	ldr	r2, [r3, #16]
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	441a      	add	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a1a      	ldr	r2, [r3, #32]
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	441a      	add	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d809      	bhi.n	80035fc <PCD_WriteEmptyTxFifo+0xe0>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a1a      	ldr	r2, [r3, #32]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d203      	bcs.n	80035fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1be      	bne.n	800357a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	699a      	ldr	r2, [r3, #24]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	429a      	cmp	r2, r3
 8003606:	d811      	bhi.n	800362c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	2201      	movs	r2, #1
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800361c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	43db      	mvns	r3, r3
 8003622:	6939      	ldr	r1, [r7, #16]
 8003624:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003628:	4013      	ands	r3, r2
 800362a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3720      	adds	r7, #32
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	333c      	adds	r3, #60	; 0x3c
 8003650:	3304      	adds	r3, #4
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	015a      	lsls	r2, r3, #5
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	4413      	add	r3, r2
 800365e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d17b      	bne.n	8003766 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	d015      	beq.n	80036a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	4a61      	ldr	r2, [pc, #388]	; (8003800 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	f240 80b9 	bls.w	80037f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 80b3 	beq.w	80037f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	4413      	add	r3, r2
 8003696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800369a:	461a      	mov	r2, r3
 800369c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036a0:	6093      	str	r3, [r2, #8]
 80036a2:	e0a7      	b.n	80037f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d009      	beq.n	80036c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ba:	461a      	mov	r2, r3
 80036bc:	2320      	movs	r3, #32
 80036be:	6093      	str	r3, [r2, #8]
 80036c0:	e098      	b.n	80037f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f040 8093 	bne.w	80037f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	4a4b      	ldr	r2, [pc, #300]	; (8003800 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d90f      	bls.n	80036f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ec:	461a      	mov	r2, r3
 80036ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036f2:	6093      	str	r3, [r2, #8]
 80036f4:	e07e      	b.n	80037f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	4413      	add	r3, r2
 8003708:	3304      	adds	r3, #4
 800370a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	69da      	ldr	r2, [r3, #28]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	0159      	lsls	r1, r3, #5
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	440b      	add	r3, r1
 8003718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003722:	1ad2      	subs	r2, r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d114      	bne.n	8003758 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d109      	bne.n	800374a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003740:	461a      	mov	r2, r3
 8003742:	2101      	movs	r1, #1
 8003744:	f002 fb12 	bl	8005d6c <USB_EP0_OutStart>
 8003748:	e006      	b.n	8003758 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	441a      	add	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	4619      	mov	r1, r3
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f004 fdd8 	bl	8008314 <HAL_PCD_DataOutStageCallback>
 8003764:	e046      	b.n	80037f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	4a26      	ldr	r2, [pc, #152]	; (8003804 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d124      	bne.n	80037b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	4413      	add	r3, r2
 8003780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003784:	461a      	mov	r2, r3
 8003786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800378a:	6093      	str	r3, [r2, #8]
 800378c:	e032      	b.n	80037f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b00      	cmp	r3, #0
 8003796:	d008      	beq.n	80037aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a4:	461a      	mov	r2, r3
 80037a6:	2320      	movs	r3, #32
 80037a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	4619      	mov	r1, r3
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f004 fdaf 	bl	8008314 <HAL_PCD_DataOutStageCallback>
 80037b6:	e01d      	b.n	80037f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d114      	bne.n	80037e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	4613      	mov	r3, r2
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d108      	bne.n	80037e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037e0:	461a      	mov	r2, r3
 80037e2:	2100      	movs	r1, #0
 80037e4:	f002 fac2 	bl	8005d6c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	4619      	mov	r1, r3
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f004 fd90 	bl	8008314 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	4f54300a 	.word	0x4f54300a
 8003804:	4f54310a 	.word	0x4f54310a

08003808 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	333c      	adds	r3, #60	; 0x3c
 8003820:	3304      	adds	r3, #4
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4413      	add	r3, r2
 800382e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4a15      	ldr	r2, [pc, #84]	; (8003890 <PCD_EP_OutSetupPacket_int+0x88>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d90e      	bls.n	800385c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003844:	2b00      	cmp	r3, #0
 8003846:	d009      	beq.n	800385c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	4413      	add	r3, r2
 8003850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003854:	461a      	mov	r2, r3
 8003856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800385a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f004 fd47 	bl	80082f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4a0a      	ldr	r2, [pc, #40]	; (8003890 <PCD_EP_OutSetupPacket_int+0x88>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d90c      	bls.n	8003884 <PCD_EP_OutSetupPacket_int+0x7c>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d108      	bne.n	8003884 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800387c:	461a      	mov	r2, r3
 800387e:	2101      	movs	r1, #1
 8003880:	f002 fa74 	bl	8005d6c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	4f54300a 	.word	0x4f54300a

08003894 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	70fb      	strb	r3, [r7, #3]
 80038a0:	4613      	mov	r3, r2
 80038a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d107      	bne.n	80038c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038b2:	883b      	ldrh	r3, [r7, #0]
 80038b4:	0419      	lsls	r1, r3, #16
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	430a      	orrs	r2, r1
 80038be:	629a      	str	r2, [r3, #40]	; 0x28
 80038c0:	e028      	b.n	8003914 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c8:	0c1b      	lsrs	r3, r3, #16
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	4413      	add	r3, r2
 80038ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038d0:	2300      	movs	r3, #0
 80038d2:	73fb      	strb	r3, [r7, #15]
 80038d4:	e00d      	b.n	80038f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	7bfb      	ldrb	r3, [r7, #15]
 80038dc:	3340      	adds	r3, #64	; 0x40
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	0c1b      	lsrs	r3, r3, #16
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	4413      	add	r3, r2
 80038ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	3301      	adds	r3, #1
 80038f0:	73fb      	strb	r3, [r7, #15]
 80038f2:	7bfa      	ldrb	r2, [r7, #15]
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d3ec      	bcc.n	80038d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80038fc:	883b      	ldrh	r3, [r7, #0]
 80038fe:	0418      	lsls	r0, r3, #16
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6819      	ldr	r1, [r3, #0]
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	3b01      	subs	r3, #1
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	4302      	orrs	r2, r0
 800390c:	3340      	adds	r3, #64	; 0x40
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	460b      	mov	r3, r1
 800392c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	887a      	ldrh	r2, [r7, #2]
 8003934:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e267      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d075      	beq.n	8003a66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800397a:	4b88      	ldr	r3, [pc, #544]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b04      	cmp	r3, #4
 8003984:	d00c      	beq.n	80039a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003986:	4b85      	ldr	r3, [pc, #532]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800398e:	2b08      	cmp	r3, #8
 8003990:	d112      	bne.n	80039b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003992:	4b82      	ldr	r3, [pc, #520]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800399e:	d10b      	bne.n	80039b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a0:	4b7e      	ldr	r3, [pc, #504]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d05b      	beq.n	8003a64 <HAL_RCC_OscConfig+0x108>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d157      	bne.n	8003a64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e242      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c0:	d106      	bne.n	80039d0 <HAL_RCC_OscConfig+0x74>
 80039c2:	4b76      	ldr	r3, [pc, #472]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a75      	ldr	r2, [pc, #468]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	e01d      	b.n	8003a0c <HAL_RCC_OscConfig+0xb0>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d8:	d10c      	bne.n	80039f4 <HAL_RCC_OscConfig+0x98>
 80039da:	4b70      	ldr	r3, [pc, #448]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a6f      	ldr	r2, [pc, #444]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	4b6d      	ldr	r3, [pc, #436]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a6c      	ldr	r2, [pc, #432]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	e00b      	b.n	8003a0c <HAL_RCC_OscConfig+0xb0>
 80039f4:	4b69      	ldr	r3, [pc, #420]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a68      	ldr	r2, [pc, #416]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	4b66      	ldr	r3, [pc, #408]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a65      	ldr	r2, [pc, #404]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d013      	beq.n	8003a3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a14:	f7fd fc16 	bl	8001244 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a1c:	f7fd fc12 	bl	8001244 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b64      	cmp	r3, #100	; 0x64
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e207      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2e:	4b5b      	ldr	r3, [pc, #364]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0xc0>
 8003a3a:	e014      	b.n	8003a66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3c:	f7fd fc02 	bl	8001244 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a44:	f7fd fbfe 	bl	8001244 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b64      	cmp	r3, #100	; 0x64
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e1f3      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a56:	4b51      	ldr	r3, [pc, #324]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f0      	bne.n	8003a44 <HAL_RCC_OscConfig+0xe8>
 8003a62:	e000      	b.n	8003a66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d063      	beq.n	8003b3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a72:	4b4a      	ldr	r3, [pc, #296]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 030c 	and.w	r3, r3, #12
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00b      	beq.n	8003a96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a7e:	4b47      	ldr	r3, [pc, #284]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d11c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8a:	4b44      	ldr	r3, [pc, #272]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d116      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a96:	4b41      	ldr	r3, [pc, #260]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <HAL_RCC_OscConfig+0x152>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d001      	beq.n	8003aae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e1c7      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aae:	4b3b      	ldr	r3, [pc, #236]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4937      	ldr	r1, [pc, #220]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac2:	e03a      	b.n	8003b3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d020      	beq.n	8003b0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003acc:	4b34      	ldr	r3, [pc, #208]	; (8003ba0 <HAL_RCC_OscConfig+0x244>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad2:	f7fd fbb7 	bl	8001244 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ada:	f7fd fbb3 	bl	8001244 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e1a8      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aec:	4b2b      	ldr	r3, [pc, #172]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0f0      	beq.n	8003ada <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af8:	4b28      	ldr	r3, [pc, #160]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4925      	ldr	r1, [pc, #148]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	600b      	str	r3, [r1, #0]
 8003b0c:	e015      	b.n	8003b3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b0e:	4b24      	ldr	r3, [pc, #144]	; (8003ba0 <HAL_RCC_OscConfig+0x244>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b14:	f7fd fb96 	bl	8001244 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b1c:	f7fd fb92 	bl	8001244 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e187      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b2e:	4b1b      	ldr	r3, [pc, #108]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d036      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d016      	beq.n	8003b7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b4e:	4b15      	ldr	r3, [pc, #84]	; (8003ba4 <HAL_RCC_OscConfig+0x248>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b54:	f7fd fb76 	bl	8001244 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b5c:	f7fd fb72 	bl	8001244 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e167      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b6e:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0x200>
 8003b7a:	e01b      	b.n	8003bb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b7c:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <HAL_RCC_OscConfig+0x248>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b82:	f7fd fb5f 	bl	8001244 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b88:	e00e      	b.n	8003ba8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b8a:	f7fd fb5b 	bl	8001244 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d907      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e150      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	42470000 	.word	0x42470000
 8003ba4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba8:	4b88      	ldr	r3, [pc, #544]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1ea      	bne.n	8003b8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 8097 	beq.w	8003cf0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bc6:	4b81      	ldr	r3, [pc, #516]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10f      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60bb      	str	r3, [r7, #8]
 8003bd6:	4b7d      	ldr	r3, [pc, #500]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	4a7c      	ldr	r2, [pc, #496]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be0:	6413      	str	r3, [r2, #64]	; 0x40
 8003be2:	4b7a      	ldr	r3, [pc, #488]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bea:	60bb      	str	r3, [r7, #8]
 8003bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf2:	4b77      	ldr	r3, [pc, #476]	; (8003dd0 <HAL_RCC_OscConfig+0x474>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d118      	bne.n	8003c30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bfe:	4b74      	ldr	r3, [pc, #464]	; (8003dd0 <HAL_RCC_OscConfig+0x474>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a73      	ldr	r2, [pc, #460]	; (8003dd0 <HAL_RCC_OscConfig+0x474>)
 8003c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c0a:	f7fd fb1b 	bl	8001244 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c12:	f7fd fb17 	bl	8001244 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e10c      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c24:	4b6a      	ldr	r3, [pc, #424]	; (8003dd0 <HAL_RCC_OscConfig+0x474>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0f0      	beq.n	8003c12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d106      	bne.n	8003c46 <HAL_RCC_OscConfig+0x2ea>
 8003c38:	4b64      	ldr	r3, [pc, #400]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3c:	4a63      	ldr	r2, [pc, #396]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c3e:	f043 0301 	orr.w	r3, r3, #1
 8003c42:	6713      	str	r3, [r2, #112]	; 0x70
 8003c44:	e01c      	b.n	8003c80 <HAL_RCC_OscConfig+0x324>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2b05      	cmp	r3, #5
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCC_OscConfig+0x30c>
 8003c4e:	4b5f      	ldr	r3, [pc, #380]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c52:	4a5e      	ldr	r2, [pc, #376]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c54:	f043 0304 	orr.w	r3, r3, #4
 8003c58:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5a:	4b5c      	ldr	r3, [pc, #368]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5e:	4a5b      	ldr	r2, [pc, #364]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	6713      	str	r3, [r2, #112]	; 0x70
 8003c66:	e00b      	b.n	8003c80 <HAL_RCC_OscConfig+0x324>
 8003c68:	4b58      	ldr	r3, [pc, #352]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6c:	4a57      	ldr	r2, [pc, #348]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c6e:	f023 0301 	bic.w	r3, r3, #1
 8003c72:	6713      	str	r3, [r2, #112]	; 0x70
 8003c74:	4b55      	ldr	r3, [pc, #340]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c78:	4a54      	ldr	r2, [pc, #336]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c7a:	f023 0304 	bic.w	r3, r3, #4
 8003c7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d015      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c88:	f7fd fadc 	bl	8001244 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8e:	e00a      	b.n	8003ca6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c90:	f7fd fad8 	bl	8001244 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e0cb      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca6:	4b49      	ldr	r3, [pc, #292]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0ee      	beq.n	8003c90 <HAL_RCC_OscConfig+0x334>
 8003cb2:	e014      	b.n	8003cde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb4:	f7fd fac6 	bl	8001244 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cba:	e00a      	b.n	8003cd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cbc:	f7fd fac2 	bl	8001244 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e0b5      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd2:	4b3e      	ldr	r3, [pc, #248]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1ee      	bne.n	8003cbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cde:	7dfb      	ldrb	r3, [r7, #23]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d105      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce4:	4b39      	ldr	r3, [pc, #228]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	4a38      	ldr	r2, [pc, #224]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 80a1 	beq.w	8003e3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cfa:	4b34      	ldr	r3, [pc, #208]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d05c      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d141      	bne.n	8003d92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0e:	4b31      	ldr	r3, [pc, #196]	; (8003dd4 <HAL_RCC_OscConfig+0x478>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d14:	f7fd fa96 	bl	8001244 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1c:	f7fd fa92 	bl	8001244 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e087      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2e:	4b27      	ldr	r3, [pc, #156]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1f0      	bne.n	8003d1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69da      	ldr	r2, [r3, #28]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	019b      	lsls	r3, r3, #6
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d50:	085b      	lsrs	r3, r3, #1
 8003d52:	3b01      	subs	r3, #1
 8003d54:	041b      	lsls	r3, r3, #16
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	061b      	lsls	r3, r3, #24
 8003d5e:	491b      	ldr	r1, [pc, #108]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d64:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <HAL_RCC_OscConfig+0x478>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6a:	f7fd fa6b 	bl	8001244 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d72:	f7fd fa67 	bl	8001244 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e05c      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d84:	4b11      	ldr	r3, [pc, #68]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x416>
 8003d90:	e054      	b.n	8003e3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d92:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <HAL_RCC_OscConfig+0x478>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d98:	f7fd fa54 	bl	8001244 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da0:	f7fd fa50 	bl	8001244 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e045      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db2:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f0      	bne.n	8003da0 <HAL_RCC_OscConfig+0x444>
 8003dbe:	e03d      	b.n	8003e3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d107      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e038      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	40007000 	.word	0x40007000
 8003dd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dd8:	4b1b      	ldr	r3, [pc, #108]	; (8003e48 <HAL_RCC_OscConfig+0x4ec>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d028      	beq.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d121      	bne.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d11a      	bne.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e08:	4013      	ands	r3, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d111      	bne.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1e:	085b      	lsrs	r3, r3, #1
 8003e20:	3b01      	subs	r3, #1
 8003e22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d107      	bne.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40023800 	.word	0x40023800

08003e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0cc      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e60:	4b68      	ldr	r3, [pc, #416]	; (8004004 <HAL_RCC_ClockConfig+0x1b8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d90c      	bls.n	8003e88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6e:	4b65      	ldr	r3, [pc, #404]	; (8004004 <HAL_RCC_ClockConfig+0x1b8>)
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e76:	4b63      	ldr	r3, [pc, #396]	; (8004004 <HAL_RCC_ClockConfig+0x1b8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0b8      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d020      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ea0:	4b59      	ldr	r3, [pc, #356]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	4a58      	ldr	r2, [pc, #352]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eb8:	4b53      	ldr	r3, [pc, #332]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	4a52      	ldr	r2, [pc, #328]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ec2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec4:	4b50      	ldr	r3, [pc, #320]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	494d      	ldr	r1, [pc, #308]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d044      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d107      	bne.n	8003efa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eea:	4b47      	ldr	r3, [pc, #284]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d119      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e07f      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d003      	beq.n	8003f0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d107      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0a:	4b3f      	ldr	r3, [pc, #252]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e06f      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f1a:	4b3b      	ldr	r3, [pc, #236]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e067      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f2a:	4b37      	ldr	r3, [pc, #220]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f023 0203 	bic.w	r2, r3, #3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	4934      	ldr	r1, [pc, #208]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f3c:	f7fd f982 	bl	8001244 <HAL_GetTick>
 8003f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f42:	e00a      	b.n	8003f5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f44:	f7fd f97e 	bl	8001244 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e04f      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5a:	4b2b      	ldr	r3, [pc, #172]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 020c 	and.w	r2, r3, #12
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d1eb      	bne.n	8003f44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f6c:	4b25      	ldr	r3, [pc, #148]	; (8004004 <HAL_RCC_ClockConfig+0x1b8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d20c      	bcs.n	8003f94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7a:	4b22      	ldr	r3, [pc, #136]	; (8004004 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f82:	4b20      	ldr	r3, [pc, #128]	; (8004004 <HAL_RCC_ClockConfig+0x1b8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e032      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d008      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa0:	4b19      	ldr	r3, [pc, #100]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4916      	ldr	r1, [pc, #88]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d009      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fbe:	4b12      	ldr	r3, [pc, #72]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	490e      	ldr	r1, [pc, #56]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fd2:	f000 f821 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	091b      	lsrs	r3, r3, #4
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	490a      	ldr	r1, [pc, #40]	; (800400c <HAL_RCC_ClockConfig+0x1c0>)
 8003fe4:	5ccb      	ldrb	r3, [r1, r3]
 8003fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fea:	4a09      	ldr	r2, [pc, #36]	; (8004010 <HAL_RCC_ClockConfig+0x1c4>)
 8003fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fee:	4b09      	ldr	r3, [pc, #36]	; (8004014 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fd f8e2 	bl	80011bc <HAL_InitTick>

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40023c00 	.word	0x40023c00
 8004008:	40023800 	.word	0x40023800
 800400c:	08009770 	.word	0x08009770
 8004010:	20000000 	.word	0x20000000
 8004014:	20000004 	.word	0x20000004

08004018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800401c:	b094      	sub	sp, #80	; 0x50
 800401e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	647b      	str	r3, [r7, #68]	; 0x44
 8004024:	2300      	movs	r3, #0
 8004026:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004028:	2300      	movs	r3, #0
 800402a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004030:	4b79      	ldr	r3, [pc, #484]	; (8004218 <HAL_RCC_GetSysClockFreq+0x200>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 030c 	and.w	r3, r3, #12
 8004038:	2b08      	cmp	r3, #8
 800403a:	d00d      	beq.n	8004058 <HAL_RCC_GetSysClockFreq+0x40>
 800403c:	2b08      	cmp	r3, #8
 800403e:	f200 80e1 	bhi.w	8004204 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <HAL_RCC_GetSysClockFreq+0x34>
 8004046:	2b04      	cmp	r3, #4
 8004048:	d003      	beq.n	8004052 <HAL_RCC_GetSysClockFreq+0x3a>
 800404a:	e0db      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800404c:	4b73      	ldr	r3, [pc, #460]	; (800421c <HAL_RCC_GetSysClockFreq+0x204>)
 800404e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004050:	e0db      	b.n	800420a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004052:	4b73      	ldr	r3, [pc, #460]	; (8004220 <HAL_RCC_GetSysClockFreq+0x208>)
 8004054:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004056:	e0d8      	b.n	800420a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004058:	4b6f      	ldr	r3, [pc, #444]	; (8004218 <HAL_RCC_GetSysClockFreq+0x200>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004060:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004062:	4b6d      	ldr	r3, [pc, #436]	; (8004218 <HAL_RCC_GetSysClockFreq+0x200>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d063      	beq.n	8004136 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800406e:	4b6a      	ldr	r3, [pc, #424]	; (8004218 <HAL_RCC_GetSysClockFreq+0x200>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	099b      	lsrs	r3, r3, #6
 8004074:	2200      	movs	r2, #0
 8004076:	63bb      	str	r3, [r7, #56]	; 0x38
 8004078:	63fa      	str	r2, [r7, #60]	; 0x3c
 800407a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004080:	633b      	str	r3, [r7, #48]	; 0x30
 8004082:	2300      	movs	r3, #0
 8004084:	637b      	str	r3, [r7, #52]	; 0x34
 8004086:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800408a:	4622      	mov	r2, r4
 800408c:	462b      	mov	r3, r5
 800408e:	f04f 0000 	mov.w	r0, #0
 8004092:	f04f 0100 	mov.w	r1, #0
 8004096:	0159      	lsls	r1, r3, #5
 8004098:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800409c:	0150      	lsls	r0, r2, #5
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4621      	mov	r1, r4
 80040a4:	1a51      	subs	r1, r2, r1
 80040a6:	6139      	str	r1, [r7, #16]
 80040a8:	4629      	mov	r1, r5
 80040aa:	eb63 0301 	sbc.w	r3, r3, r1
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040bc:	4659      	mov	r1, fp
 80040be:	018b      	lsls	r3, r1, #6
 80040c0:	4651      	mov	r1, sl
 80040c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040c6:	4651      	mov	r1, sl
 80040c8:	018a      	lsls	r2, r1, #6
 80040ca:	4651      	mov	r1, sl
 80040cc:	ebb2 0801 	subs.w	r8, r2, r1
 80040d0:	4659      	mov	r1, fp
 80040d2:	eb63 0901 	sbc.w	r9, r3, r1
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040ea:	4690      	mov	r8, r2
 80040ec:	4699      	mov	r9, r3
 80040ee:	4623      	mov	r3, r4
 80040f0:	eb18 0303 	adds.w	r3, r8, r3
 80040f4:	60bb      	str	r3, [r7, #8]
 80040f6:	462b      	mov	r3, r5
 80040f8:	eb49 0303 	adc.w	r3, r9, r3
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800410a:	4629      	mov	r1, r5
 800410c:	024b      	lsls	r3, r1, #9
 800410e:	4621      	mov	r1, r4
 8004110:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004114:	4621      	mov	r1, r4
 8004116:	024a      	lsls	r2, r1, #9
 8004118:	4610      	mov	r0, r2
 800411a:	4619      	mov	r1, r3
 800411c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800411e:	2200      	movs	r2, #0
 8004120:	62bb      	str	r3, [r7, #40]	; 0x28
 8004122:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004124:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004128:	f7fc f8a2 	bl	8000270 <__aeabi_uldivmod>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4613      	mov	r3, r2
 8004132:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004134:	e058      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004136:	4b38      	ldr	r3, [pc, #224]	; (8004218 <HAL_RCC_GetSysClockFreq+0x200>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	099b      	lsrs	r3, r3, #6
 800413c:	2200      	movs	r2, #0
 800413e:	4618      	mov	r0, r3
 8004140:	4611      	mov	r1, r2
 8004142:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004146:	623b      	str	r3, [r7, #32]
 8004148:	2300      	movs	r3, #0
 800414a:	627b      	str	r3, [r7, #36]	; 0x24
 800414c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004150:	4642      	mov	r2, r8
 8004152:	464b      	mov	r3, r9
 8004154:	f04f 0000 	mov.w	r0, #0
 8004158:	f04f 0100 	mov.w	r1, #0
 800415c:	0159      	lsls	r1, r3, #5
 800415e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004162:	0150      	lsls	r0, r2, #5
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4641      	mov	r1, r8
 800416a:	ebb2 0a01 	subs.w	sl, r2, r1
 800416e:	4649      	mov	r1, r9
 8004170:	eb63 0b01 	sbc.w	fp, r3, r1
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	f04f 0300 	mov.w	r3, #0
 800417c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004180:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004184:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004188:	ebb2 040a 	subs.w	r4, r2, sl
 800418c:	eb63 050b 	sbc.w	r5, r3, fp
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	00eb      	lsls	r3, r5, #3
 800419a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800419e:	00e2      	lsls	r2, r4, #3
 80041a0:	4614      	mov	r4, r2
 80041a2:	461d      	mov	r5, r3
 80041a4:	4643      	mov	r3, r8
 80041a6:	18e3      	adds	r3, r4, r3
 80041a8:	603b      	str	r3, [r7, #0]
 80041aa:	464b      	mov	r3, r9
 80041ac:	eb45 0303 	adc.w	r3, r5, r3
 80041b0:	607b      	str	r3, [r7, #4]
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041be:	4629      	mov	r1, r5
 80041c0:	028b      	lsls	r3, r1, #10
 80041c2:	4621      	mov	r1, r4
 80041c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041c8:	4621      	mov	r1, r4
 80041ca:	028a      	lsls	r2, r1, #10
 80041cc:	4610      	mov	r0, r2
 80041ce:	4619      	mov	r1, r3
 80041d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041d2:	2200      	movs	r2, #0
 80041d4:	61bb      	str	r3, [r7, #24]
 80041d6:	61fa      	str	r2, [r7, #28]
 80041d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041dc:	f7fc f848 	bl	8000270 <__aeabi_uldivmod>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4613      	mov	r3, r2
 80041e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	0c1b      	lsrs	r3, r3, #16
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	3301      	adds	r3, #1
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80041f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004200:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004202:	e002      	b.n	800420a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004204:	4b05      	ldr	r3, [pc, #20]	; (800421c <HAL_RCC_GetSysClockFreq+0x204>)
 8004206:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004208:	bf00      	nop
    }
  }
  return sysclockfreq;
 800420a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800420c:	4618      	mov	r0, r3
 800420e:	3750      	adds	r7, #80	; 0x50
 8004210:	46bd      	mov	sp, r7
 8004212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004216:	bf00      	nop
 8004218:	40023800 	.word	0x40023800
 800421c:	00f42400 	.word	0x00f42400
 8004220:	007a1200 	.word	0x007a1200

08004224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004228:	4b03      	ldr	r3, [pc, #12]	; (8004238 <HAL_RCC_GetHCLKFreq+0x14>)
 800422a:	681b      	ldr	r3, [r3, #0]
}
 800422c:	4618      	mov	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	20000000 	.word	0x20000000

0800423c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004240:	f7ff fff0 	bl	8004224 <HAL_RCC_GetHCLKFreq>
 8004244:	4602      	mov	r2, r0
 8004246:	4b05      	ldr	r3, [pc, #20]	; (800425c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	0a9b      	lsrs	r3, r3, #10
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	4903      	ldr	r1, [pc, #12]	; (8004260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004252:	5ccb      	ldrb	r3, [r1, r3]
 8004254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004258:	4618      	mov	r0, r3
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40023800 	.word	0x40023800
 8004260:	08009780 	.word	0x08009780

08004264 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d105      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004288:	2b00      	cmp	r3, #0
 800428a:	d035      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800428c:	4b62      	ldr	r3, [pc, #392]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004292:	f7fc ffd7 	bl	8001244 <HAL_GetTick>
 8004296:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004298:	e008      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800429a:	f7fc ffd3 	bl	8001244 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d901      	bls.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e0b0      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042ac:	4b5b      	ldr	r3, [pc, #364]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1f0      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	019a      	lsls	r2, r3, #6
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	071b      	lsls	r3, r3, #28
 80042c4:	4955      	ldr	r1, [pc, #340]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042cc:	4b52      	ldr	r3, [pc, #328]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042d2:	f7fc ffb7 	bl	8001244 <HAL_GetTick>
 80042d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042d8:	e008      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042da:	f7fc ffb3 	bl	8001244 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e090      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042ec:	4b4b      	ldr	r3, [pc, #300]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0f0      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 8083 	beq.w	800440c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004306:	2300      	movs	r3, #0
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	4b44      	ldr	r3, [pc, #272]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	4a43      	ldr	r2, [pc, #268]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004314:	6413      	str	r3, [r2, #64]	; 0x40
 8004316:	4b41      	ldr	r3, [pc, #260]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004322:	4b3f      	ldr	r3, [pc, #252]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a3e      	ldr	r2, [pc, #248]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800432c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800432e:	f7fc ff89 	bl	8001244 <HAL_GetTick>
 8004332:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004334:	e008      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004336:	f7fc ff85 	bl	8001244 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e062      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004348:	4b35      	ldr	r3, [pc, #212]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0f0      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004354:	4b31      	ldr	r3, [pc, #196]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800435c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d02f      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	429a      	cmp	r2, r3
 8004370:	d028      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004372:	4b2a      	ldr	r3, [pc, #168]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800437a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800437c:	4b29      	ldr	r3, [pc, #164]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800437e:	2201      	movs	r2, #1
 8004380:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004382:	4b28      	ldr	r3, [pc, #160]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004388:	4a24      	ldr	r2, [pc, #144]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800438e:	4b23      	ldr	r3, [pc, #140]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b01      	cmp	r3, #1
 8004398:	d114      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800439a:	f7fc ff53 	bl	8001244 <HAL_GetTick>
 800439e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a0:	e00a      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043a2:	f7fc ff4f 	bl	8001244 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e02a      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b8:	4b18      	ldr	r3, [pc, #96]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0ee      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043d0:	d10d      	bne.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80043d2:	4b12      	ldr	r3, [pc, #72]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e6:	490d      	ldr	r1, [pc, #52]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	608b      	str	r3, [r1, #8]
 80043ec:	e005      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x196>
 80043ee:	4b0b      	ldr	r3, [pc, #44]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	4a0a      	ldr	r2, [pc, #40]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043f8:	6093      	str	r3, [r2, #8]
 80043fa:	4b08      	ldr	r3, [pc, #32]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004406:	4905      	ldr	r1, [pc, #20]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004408:	4313      	orrs	r3, r2
 800440a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	42470068 	.word	0x42470068
 800441c:	40023800 	.word	0x40023800
 8004420:	40007000 	.word	0x40007000
 8004424:	42470e40 	.word	0x42470e40

08004428 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004428:	b480      	push	{r7}
 800442a:	b087      	sub	sp, #28
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d13e      	bne.n	80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004446:	4b23      	ldr	r3, [pc, #140]	; (80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d005      	beq.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d12f      	bne.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800445c:	4b1e      	ldr	r3, [pc, #120]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800445e:	617b      	str	r3, [r7, #20]
          break;
 8004460:	e02f      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004462:	4b1c      	ldr	r3, [pc, #112]	; (80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800446a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800446e:	d108      	bne.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004470:	4b18      	ldr	r3, [pc, #96]	; (80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004478:	4a18      	ldr	r2, [pc, #96]	; (80044dc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800447a:	fbb2 f3f3 	udiv	r3, r2, r3
 800447e:	613b      	str	r3, [r7, #16]
 8004480:	e007      	b.n	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004482:	4b14      	ldr	r3, [pc, #80]	; (80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800448a:	4a15      	ldr	r2, [pc, #84]	; (80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800448c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004490:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004492:	4b10      	ldr	r3, [pc, #64]	; (80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004498:	099b      	lsrs	r3, r3, #6
 800449a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	fb02 f303 	mul.w	r3, r2, r3
 80044a4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80044a6:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ac:	0f1b      	lsrs	r3, r3, #28
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b8:	617b      	str	r3, [r7, #20]
          break;
 80044ba:	e002      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	617b      	str	r3, [r7, #20]
          break;
 80044c0:	bf00      	nop
        }
      }
      break;
 80044c2:	bf00      	nop
    }
  }
  return frequency;
 80044c4:	697b      	ldr	r3, [r7, #20]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	371c      	adds	r7, #28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	40023800 	.word	0x40023800
 80044d8:	00bb8000 	.word	0x00bb8000
 80044dc:	007a1200 	.word	0x007a1200
 80044e0:	00f42400 	.word	0x00f42400

080044e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e07b      	b.n	80045ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d108      	bne.n	8004510 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004506:	d009      	beq.n	800451c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	61da      	str	r2, [r3, #28]
 800450e:	e005      	b.n	800451c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7fc fcde 	bl	8000ef8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004552:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800458c:	431a      	orrs	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a0:	ea42 0103 	orr.w	r1, r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	0c1b      	lsrs	r3, r3, #16
 80045ba:	f003 0104 	and.w	r1, r3, #4
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	f003 0210 	and.w	r2, r3, #16
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	69da      	ldr	r2, [r3, #28]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045f6:	b084      	sub	sp, #16
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	f107 001c 	add.w	r0, r7, #28
 8004604:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460a:	2b01      	cmp	r3, #1
 800460c:	d122      	bne.n	8004654 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004612:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004638:	2b01      	cmp	r3, #1
 800463a:	d105      	bne.n	8004648 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f001 fbed 	bl	8005e28 <USB_CoreReset>
 800464e:	4603      	mov	r3, r0
 8004650:	73fb      	strb	r3, [r7, #15]
 8004652:	e01a      	b.n	800468a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f001 fbe1 	bl	8005e28 <USB_CoreReset>
 8004666:	4603      	mov	r3, r0
 8004668:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800466a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800466c:	2b00      	cmp	r3, #0
 800466e:	d106      	bne.n	800467e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	639a      	str	r2, [r3, #56]	; 0x38
 800467c:	e005      	b.n	800468a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	2b01      	cmp	r3, #1
 800468e:	d10b      	bne.n	80046a8 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f043 0206 	orr.w	r2, r3, #6
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f043 0220 	orr.w	r2, r3, #32
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046b4:	b004      	add	sp, #16
 80046b6:	4770      	bx	lr

080046b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	4613      	mov	r3, r2
 80046c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d165      	bne.n	8004798 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	4a41      	ldr	r2, [pc, #260]	; (80047d4 <USB_SetTurnaroundTime+0x11c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d906      	bls.n	80046e2 <USB_SetTurnaroundTime+0x2a>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	4a40      	ldr	r2, [pc, #256]	; (80047d8 <USB_SetTurnaroundTime+0x120>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d202      	bcs.n	80046e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80046dc:	230f      	movs	r3, #15
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	e062      	b.n	80047a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	4a3c      	ldr	r2, [pc, #240]	; (80047d8 <USB_SetTurnaroundTime+0x120>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d306      	bcc.n	80046f8 <USB_SetTurnaroundTime+0x40>
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	4a3b      	ldr	r2, [pc, #236]	; (80047dc <USB_SetTurnaroundTime+0x124>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d202      	bcs.n	80046f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80046f2:	230e      	movs	r3, #14
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	e057      	b.n	80047a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4a38      	ldr	r2, [pc, #224]	; (80047dc <USB_SetTurnaroundTime+0x124>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d306      	bcc.n	800470e <USB_SetTurnaroundTime+0x56>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4a37      	ldr	r2, [pc, #220]	; (80047e0 <USB_SetTurnaroundTime+0x128>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d202      	bcs.n	800470e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004708:	230d      	movs	r3, #13
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	e04c      	b.n	80047a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	4a33      	ldr	r2, [pc, #204]	; (80047e0 <USB_SetTurnaroundTime+0x128>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d306      	bcc.n	8004724 <USB_SetTurnaroundTime+0x6c>
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	4a32      	ldr	r2, [pc, #200]	; (80047e4 <USB_SetTurnaroundTime+0x12c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d802      	bhi.n	8004724 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800471e:	230c      	movs	r3, #12
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	e041      	b.n	80047a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4a2f      	ldr	r2, [pc, #188]	; (80047e4 <USB_SetTurnaroundTime+0x12c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d906      	bls.n	800473a <USB_SetTurnaroundTime+0x82>
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4a2e      	ldr	r2, [pc, #184]	; (80047e8 <USB_SetTurnaroundTime+0x130>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d802      	bhi.n	800473a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004734:	230b      	movs	r3, #11
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	e036      	b.n	80047a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4a2a      	ldr	r2, [pc, #168]	; (80047e8 <USB_SetTurnaroundTime+0x130>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d906      	bls.n	8004750 <USB_SetTurnaroundTime+0x98>
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	4a29      	ldr	r2, [pc, #164]	; (80047ec <USB_SetTurnaroundTime+0x134>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d802      	bhi.n	8004750 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800474a:	230a      	movs	r3, #10
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	e02b      	b.n	80047a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4a26      	ldr	r2, [pc, #152]	; (80047ec <USB_SetTurnaroundTime+0x134>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d906      	bls.n	8004766 <USB_SetTurnaroundTime+0xae>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	4a25      	ldr	r2, [pc, #148]	; (80047f0 <USB_SetTurnaroundTime+0x138>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d202      	bcs.n	8004766 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004760:	2309      	movs	r3, #9
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	e020      	b.n	80047a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	4a21      	ldr	r2, [pc, #132]	; (80047f0 <USB_SetTurnaroundTime+0x138>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d306      	bcc.n	800477c <USB_SetTurnaroundTime+0xc4>
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4a20      	ldr	r2, [pc, #128]	; (80047f4 <USB_SetTurnaroundTime+0x13c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d802      	bhi.n	800477c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004776:	2308      	movs	r3, #8
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	e015      	b.n	80047a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4a1d      	ldr	r2, [pc, #116]	; (80047f4 <USB_SetTurnaroundTime+0x13c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d906      	bls.n	8004792 <USB_SetTurnaroundTime+0xda>
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4a1c      	ldr	r2, [pc, #112]	; (80047f8 <USB_SetTurnaroundTime+0x140>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d202      	bcs.n	8004792 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800478c:	2307      	movs	r3, #7
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	e00a      	b.n	80047a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004792:	2306      	movs	r3, #6
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	e007      	b.n	80047a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004798:	79fb      	ldrb	r3, [r7, #7]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d102      	bne.n	80047a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800479e:	2309      	movs	r3, #9
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	e001      	b.n	80047a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80047a4:	2309      	movs	r3, #9
 80047a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	029b      	lsls	r3, r3, #10
 80047bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80047c0:	431a      	orrs	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	371c      	adds	r7, #28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	00d8acbf 	.word	0x00d8acbf
 80047d8:	00e4e1c0 	.word	0x00e4e1c0
 80047dc:	00f42400 	.word	0x00f42400
 80047e0:	01067380 	.word	0x01067380
 80047e4:	011a499f 	.word	0x011a499f
 80047e8:	01312cff 	.word	0x01312cff
 80047ec:	014ca43f 	.word	0x014ca43f
 80047f0:	016e3600 	.word	0x016e3600
 80047f4:	01a6ab1f 	.word	0x01a6ab1f
 80047f8:	01e84800 	.word	0x01e84800

080047fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f043 0201 	orr.w	r2, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f023 0201 	bic.w	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d115      	bne.n	800488e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800486e:	2001      	movs	r0, #1
 8004870:	f7fc fcf4 	bl	800125c <HAL_Delay>
      ms++;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3301      	adds	r3, #1
 8004878:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f001 fa45 	bl	8005d0a <USB_GetMode>
 8004880:	4603      	mov	r3, r0
 8004882:	2b01      	cmp	r3, #1
 8004884:	d01e      	beq.n	80048c4 <USB_SetCurrentMode+0x84>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b31      	cmp	r3, #49	; 0x31
 800488a:	d9f0      	bls.n	800486e <USB_SetCurrentMode+0x2e>
 800488c:	e01a      	b.n	80048c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800488e:	78fb      	ldrb	r3, [r7, #3]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d115      	bne.n	80048c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048a0:	2001      	movs	r0, #1
 80048a2:	f7fc fcdb 	bl	800125c <HAL_Delay>
      ms++;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3301      	adds	r3, #1
 80048aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f001 fa2c 	bl	8005d0a <USB_GetMode>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <USB_SetCurrentMode+0x84>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b31      	cmp	r3, #49	; 0x31
 80048bc:	d9f0      	bls.n	80048a0 <USB_SetCurrentMode+0x60>
 80048be:	e001      	b.n	80048c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e005      	b.n	80048d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b32      	cmp	r3, #50	; 0x32
 80048c8:	d101      	bne.n	80048ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048d8:	b084      	sub	sp, #16
 80048da:	b580      	push	{r7, lr}
 80048dc:	b086      	sub	sp, #24
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80048e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80048f2:	2300      	movs	r3, #0
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	e009      	b.n	800490c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	3340      	adds	r3, #64	; 0x40
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	2200      	movs	r2, #0
 8004904:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	3301      	adds	r3, #1
 800490a:	613b      	str	r3, [r7, #16]
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	2b0e      	cmp	r3, #14
 8004910:	d9f2      	bls.n	80048f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004914:	2b00      	cmp	r3, #0
 8004916:	d11c      	bne.n	8004952 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004926:	f043 0302 	orr.w	r3, r3, #2
 800492a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004930:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004948:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	639a      	str	r2, [r3, #56]	; 0x38
 8004950:	e00b      	b.n	800496a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004956:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004962:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004970:	461a      	mov	r2, r3
 8004972:	2300      	movs	r3, #0
 8004974:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497c:	4619      	mov	r1, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004984:	461a      	mov	r2, r3
 8004986:	680b      	ldr	r3, [r1, #0]
 8004988:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800498a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498c:	2b01      	cmp	r3, #1
 800498e:	d10c      	bne.n	80049aa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004992:	2b00      	cmp	r3, #0
 8004994:	d104      	bne.n	80049a0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004996:	2100      	movs	r1, #0
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f965 	bl	8004c68 <USB_SetDevSpeed>
 800499e:	e008      	b.n	80049b2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049a0:	2101      	movs	r1, #1
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f960 	bl	8004c68 <USB_SetDevSpeed>
 80049a8:	e003      	b.n	80049b2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049aa:	2103      	movs	r1, #3
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f95b 	bl	8004c68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049b2:	2110      	movs	r1, #16
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f8f3 	bl	8004ba0 <USB_FlushTxFifo>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f91f 	bl	8004c08 <USB_FlushRxFifo>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049da:	461a      	mov	r2, r3
 80049dc:	2300      	movs	r3, #0
 80049de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e6:	461a      	mov	r2, r3
 80049e8:	2300      	movs	r3, #0
 80049ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f2:	461a      	mov	r2, r3
 80049f4:	2300      	movs	r3, #0
 80049f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049f8:	2300      	movs	r3, #0
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	e043      	b.n	8004a86 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a14:	d118      	bne.n	8004a48 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10a      	bne.n	8004a32 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a28:	461a      	mov	r2, r3
 8004a2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	e013      	b.n	8004a5a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	e008      	b.n	8004a5a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a54:	461a      	mov	r2, r3
 8004a56:	2300      	movs	r3, #0
 8004a58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a66:	461a      	mov	r2, r3
 8004a68:	2300      	movs	r3, #0
 8004a6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	3301      	adds	r3, #1
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d3b7      	bcc.n	80049fe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a8e:	2300      	movs	r3, #0
 8004a90:	613b      	str	r3, [r7, #16]
 8004a92:	e043      	b.n	8004b1c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aaa:	d118      	bne.n	8004ade <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10a      	bne.n	8004ac8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	e013      	b.n	8004af0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	e008      	b.n	8004af0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aea:	461a      	mov	r2, r3
 8004aec:	2300      	movs	r3, #0
 8004aee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afc:	461a      	mov	r2, r3
 8004afe:	2300      	movs	r3, #0
 8004b00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d3b7      	bcc.n	8004a94 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b36:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b44:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d105      	bne.n	8004b58 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	f043 0210 	orr.w	r2, r3, #16
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699a      	ldr	r2, [r3, #24]
 8004b5c:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <USB_DevInit+0x2c4>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d005      	beq.n	8004b76 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	f043 0208 	orr.w	r2, r3, #8
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d107      	bne.n	8004b8c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b84:	f043 0304 	orr.w	r3, r3, #4
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b98:	b004      	add	sp, #16
 8004b9a:	4770      	bx	lr
 8004b9c:	803c3800 	.word	0x803c3800

08004ba0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4a13      	ldr	r2, [pc, #76]	; (8004c04 <USB_FlushTxFifo+0x64>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d901      	bls.n	8004bc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e01b      	b.n	8004bf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	daf2      	bge.n	8004bae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	019b      	lsls	r3, r3, #6
 8004bd0:	f043 0220 	orr.w	r2, r3, #32
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4a08      	ldr	r2, [pc, #32]	; (8004c04 <USB_FlushTxFifo+0x64>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d901      	bls.n	8004bea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e006      	b.n	8004bf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	d0f0      	beq.n	8004bd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	00030d40 	.word	0x00030d40

08004c08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3301      	adds	r3, #1
 8004c18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4a11      	ldr	r2, [pc, #68]	; (8004c64 <USB_FlushRxFifo+0x5c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d901      	bls.n	8004c26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e018      	b.n	8004c58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	daf2      	bge.n	8004c14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2210      	movs	r2, #16
 8004c36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4a08      	ldr	r2, [pc, #32]	; (8004c64 <USB_FlushRxFifo+0x5c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e006      	b.n	8004c58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f003 0310 	and.w	r3, r3, #16
 8004c52:	2b10      	cmp	r3, #16
 8004c54:	d0f0      	beq.n	8004c38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	00030d40 	.word	0x00030d40

08004c68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	78fb      	ldrb	r3, [r7, #3]
 8004c82:	68f9      	ldr	r1, [r7, #12]
 8004c84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b087      	sub	sp, #28
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 0306 	and.w	r3, r3, #6
 8004cb2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d102      	bne.n	8004cc0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	75fb      	strb	r3, [r7, #23]
 8004cbe:	e00a      	b.n	8004cd6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d002      	beq.n	8004ccc <USB_GetDevSpeed+0x32>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2b06      	cmp	r3, #6
 8004cca:	d102      	bne.n	8004cd2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ccc:	2302      	movs	r3, #2
 8004cce:	75fb      	strb	r3, [r7, #23]
 8004cd0:	e001      	b.n	8004cd6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004cd2:	230f      	movs	r3, #15
 8004cd4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	371c      	adds	r7, #28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	785b      	ldrb	r3, [r3, #1]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d13a      	bne.n	8004d76 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d06:	69da      	ldr	r2, [r3, #28]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	f003 030f 	and.w	r3, r3, #15
 8004d10:	2101      	movs	r1, #1
 8004d12:	fa01 f303 	lsl.w	r3, r1, r3
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	68f9      	ldr	r1, [r7, #12]
 8004d1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d155      	bne.n	8004de4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	791b      	ldrb	r3, [r3, #4]
 8004d52:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d54:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	059b      	lsls	r3, r3, #22
 8004d5a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	0151      	lsls	r1, r2, #5
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	440a      	add	r2, r1
 8004d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	e036      	b.n	8004de4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7c:	69da      	ldr	r2, [r3, #28]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	2101      	movs	r1, #1
 8004d88:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8c:	041b      	lsls	r3, r3, #16
 8004d8e:	68f9      	ldr	r1, [r7, #12]
 8004d90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d94:	4313      	orrs	r3, r2
 8004d96:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d11a      	bne.n	8004de4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	791b      	ldrb	r3, [r3, #4]
 8004dc8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004dca:	430b      	orrs	r3, r1
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	0151      	lsls	r1, r2, #5
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	440a      	add	r2, r1
 8004dd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
	...

08004df4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	785b      	ldrb	r3, [r3, #1]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d161      	bne.n	8004ed4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e26:	d11f      	bne.n	8004e68 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	0151      	lsls	r1, r2, #5
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	440a      	add	r2, r1
 8004e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e46:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	0151      	lsls	r1, r2, #5
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	440a      	add	r2, r1
 8004e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	f003 030f 	and.w	r3, r3, #15
 8004e78:	2101      	movs	r1, #1
 8004e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	43db      	mvns	r3, r3
 8004e82:	68f9      	ldr	r1, [r7, #12]
 8004e84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e88:	4013      	ands	r3, r2
 8004e8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e92:	69da      	ldr	r2, [r3, #28]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	f003 030f 	and.w	r3, r3, #15
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	68f9      	ldr	r1, [r7, #12]
 8004ea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eac:	4013      	ands	r3, r2
 8004eae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	0159      	lsls	r1, r3, #5
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	440b      	add	r3, r1
 8004ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4b35      	ldr	r3, [pc, #212]	; (8004fa4 <USB_DeactivateEndpoint+0x1b0>)
 8004ece:	4013      	ands	r3, r2
 8004ed0:	600b      	str	r3, [r1, #0]
 8004ed2:	e060      	b.n	8004f96 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ee6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eea:	d11f      	bne.n	8004f2c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	0151      	lsls	r1, r2, #5
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	440a      	add	r2, r1
 8004f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f0a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	0151      	lsls	r1, r2, #5
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	440a      	add	r2, r1
 8004f22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	f003 030f 	and.w	r3, r3, #15
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f42:	041b      	lsls	r3, r3, #16
 8004f44:	43db      	mvns	r3, r3
 8004f46:	68f9      	ldr	r1, [r7, #12]
 8004f48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f56:	69da      	ldr	r2, [r3, #28]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	f003 030f 	and.w	r3, r3, #15
 8004f60:	2101      	movs	r1, #1
 8004f62:	fa01 f303 	lsl.w	r3, r1, r3
 8004f66:	041b      	lsls	r3, r3, #16
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	68f9      	ldr	r1, [r7, #12]
 8004f6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f70:	4013      	ands	r3, r2
 8004f72:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	0159      	lsls	r1, r3, #5
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	440b      	add	r3, r1
 8004f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <USB_DeactivateEndpoint+0x1b4>)
 8004f92:	4013      	ands	r3, r2
 8004f94:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	ec337800 	.word	0xec337800
 8004fa8:	eff37800 	.word	0xeff37800

08004fac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b08a      	sub	sp, #40	; 0x28
 8004fb0:	af02      	add	r7, sp, #8
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	785b      	ldrb	r3, [r3, #1]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	f040 815c 	bne.w	8005286 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d132      	bne.n	800503c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	0151      	lsls	r1, r2, #5
 8004fe8:	69fa      	ldr	r2, [r7, #28]
 8004fea:	440a      	add	r2, r1
 8004fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ff4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ff8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	4413      	add	r3, r2
 8005002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	0151      	lsls	r1, r2, #5
 800500c:	69fa      	ldr	r2, [r7, #28]
 800500e:	440a      	add	r2, r1
 8005010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005014:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005018:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	0151      	lsls	r1, r2, #5
 800502c:	69fa      	ldr	r2, [r7, #28]
 800502e:	440a      	add	r2, r1
 8005030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005034:	0cdb      	lsrs	r3, r3, #19
 8005036:	04db      	lsls	r3, r3, #19
 8005038:	6113      	str	r3, [r2, #16]
 800503a:	e074      	b.n	8005126 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	0151      	lsls	r1, r2, #5
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	440a      	add	r2, r1
 8005052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005056:	0cdb      	lsrs	r3, r3, #19
 8005058:	04db      	lsls	r3, r3, #19
 800505a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	0151      	lsls	r1, r2, #5
 800506e:	69fa      	ldr	r2, [r7, #28]
 8005070:	440a      	add	r2, r1
 8005072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005076:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800507a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800507e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	6999      	ldr	r1, [r3, #24]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	440b      	add	r3, r1
 8005098:	1e59      	subs	r1, r3, #1
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	fbb1 f3f3 	udiv	r3, r1, r3
 80050a2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80050a4:	4b9d      	ldr	r3, [pc, #628]	; (800531c <USB_EPStartXfer+0x370>)
 80050a6:	400b      	ands	r3, r1
 80050a8:	69b9      	ldr	r1, [r7, #24]
 80050aa:	0148      	lsls	r0, r1, #5
 80050ac:	69f9      	ldr	r1, [r7, #28]
 80050ae:	4401      	add	r1, r0
 80050b0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050b4:	4313      	orrs	r3, r2
 80050b6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c4:	691a      	ldr	r2, [r3, #16]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ce:	69b9      	ldr	r1, [r7, #24]
 80050d0:	0148      	lsls	r0, r1, #5
 80050d2:	69f9      	ldr	r1, [r7, #28]
 80050d4:	4401      	add	r1, r0
 80050d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050da:	4313      	orrs	r3, r2
 80050dc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	791b      	ldrb	r3, [r3, #4]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d11f      	bne.n	8005126 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	0151      	lsls	r1, r2, #5
 80050f8:	69fa      	ldr	r2, [r7, #28]
 80050fa:	440a      	add	r2, r1
 80050fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005100:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005104:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	0151      	lsls	r1, r2, #5
 8005118:	69fa      	ldr	r2, [r7, #28]
 800511a:	440a      	add	r2, r1
 800511c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005120:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005124:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005126:	79fb      	ldrb	r3, [r7, #7]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d14b      	bne.n	80051c4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d009      	beq.n	8005148 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005140:	461a      	mov	r2, r3
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	791b      	ldrb	r3, [r3, #4]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d128      	bne.n	80051a2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800515c:	2b00      	cmp	r3, #0
 800515e:	d110      	bne.n	8005182 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	0151      	lsls	r1, r2, #5
 8005172:	69fa      	ldr	r2, [r7, #28]
 8005174:	440a      	add	r2, r1
 8005176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800517a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800517e:	6013      	str	r3, [r2, #0]
 8005180:	e00f      	b.n	80051a2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	0151      	lsls	r1, r2, #5
 8005194:	69fa      	ldr	r2, [r7, #28]
 8005196:	440a      	add	r2, r1
 8005198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800519c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	0151      	lsls	r1, r2, #5
 80051b4:	69fa      	ldr	r2, [r7, #28]
 80051b6:	440a      	add	r2, r1
 80051b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	e133      	b.n	800542c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	0151      	lsls	r1, r2, #5
 80051d6:	69fa      	ldr	r2, [r7, #28]
 80051d8:	440a      	add	r2, r1
 80051da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051e2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	791b      	ldrb	r3, [r3, #4]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d015      	beq.n	8005218 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 811b 	beq.w	800542c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	f003 030f 	and.w	r3, r3, #15
 8005206:	2101      	movs	r1, #1
 8005208:	fa01 f303 	lsl.w	r3, r1, r3
 800520c:	69f9      	ldr	r1, [r7, #28]
 800520e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005212:	4313      	orrs	r3, r2
 8005214:	634b      	str	r3, [r1, #52]	; 0x34
 8005216:	e109      	b.n	800542c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005224:	2b00      	cmp	r3, #0
 8005226:	d110      	bne.n	800524a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	0151      	lsls	r1, r2, #5
 800523a:	69fa      	ldr	r2, [r7, #28]
 800523c:	440a      	add	r2, r1
 800523e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005242:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005246:	6013      	str	r3, [r2, #0]
 8005248:	e00f      	b.n	800526a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	0151      	lsls	r1, r2, #5
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	440a      	add	r2, r1
 8005260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005268:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	6919      	ldr	r1, [r3, #16]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	781a      	ldrb	r2, [r3, #0]
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	b298      	uxth	r0, r3
 8005278:	79fb      	ldrb	r3, [r7, #7]
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	4603      	mov	r3, r0
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 fade 	bl	8005840 <USB_WritePacket>
 8005284:	e0d2      	b.n	800542c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	0151      	lsls	r1, r2, #5
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	440a      	add	r2, r1
 800529c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052a0:	0cdb      	lsrs	r3, r3, #19
 80052a2:	04db      	lsls	r3, r3, #19
 80052a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	0151      	lsls	r1, r2, #5
 80052b8:	69fa      	ldr	r2, [r7, #28]
 80052ba:	440a      	add	r2, r1
 80052bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052c8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d126      	bne.n	8005320 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052e8:	69b9      	ldr	r1, [r7, #24]
 80052ea:	0148      	lsls	r0, r1, #5
 80052ec:	69f9      	ldr	r1, [r7, #28]
 80052ee:	4401      	add	r1, r0
 80052f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052f4:	4313      	orrs	r3, r2
 80052f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	0151      	lsls	r1, r2, #5
 800530a:	69fa      	ldr	r2, [r7, #28]
 800530c:	440a      	add	r2, r1
 800530e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005312:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005316:	6113      	str	r3, [r2, #16]
 8005318:	e03a      	b.n	8005390 <USB_EPStartXfer+0x3e4>
 800531a:	bf00      	nop
 800531c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	699a      	ldr	r2, [r3, #24]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	4413      	add	r3, r2
 800532a:	1e5a      	subs	r2, r3, #1
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	fbb2 f3f3 	udiv	r3, r2, r3
 8005334:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	8afa      	ldrh	r2, [r7, #22]
 800533c:	fb03 f202 	mul.w	r2, r3, r2
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005350:	691a      	ldr	r2, [r3, #16]
 8005352:	8afb      	ldrh	r3, [r7, #22]
 8005354:	04d9      	lsls	r1, r3, #19
 8005356:	4b38      	ldr	r3, [pc, #224]	; (8005438 <USB_EPStartXfer+0x48c>)
 8005358:	400b      	ands	r3, r1
 800535a:	69b9      	ldr	r1, [r7, #24]
 800535c:	0148      	lsls	r0, r1, #5
 800535e:	69f9      	ldr	r1, [r7, #28]
 8005360:	4401      	add	r1, r0
 8005362:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005366:	4313      	orrs	r3, r2
 8005368:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005380:	69b9      	ldr	r1, [r7, #24]
 8005382:	0148      	lsls	r0, r1, #5
 8005384:	69f9      	ldr	r1, [r7, #28]
 8005386:	4401      	add	r1, r0
 8005388:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800538c:	4313      	orrs	r3, r2
 800538e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005390:	79fb      	ldrb	r3, [r7, #7]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d10d      	bne.n	80053b2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d009      	beq.n	80053b2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	6919      	ldr	r1, [r3, #16]
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ae:	460a      	mov	r2, r1
 80053b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	791b      	ldrb	r3, [r3, #4]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d128      	bne.n	800540c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d110      	bne.n	80053ec <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	0151      	lsls	r1, r2, #5
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	440a      	add	r2, r1
 80053e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	e00f      	b.n	800540c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	0151      	lsls	r1, r2, #5
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	440a      	add	r2, r1
 8005402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800540a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	0151      	lsls	r1, r2, #5
 800541e:	69fa      	ldr	r2, [r7, #28]
 8005420:	440a      	add	r2, r1
 8005422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005426:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800542a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3720      	adds	r7, #32
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	1ff80000 	.word	0x1ff80000

0800543c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	4613      	mov	r3, r2
 8005448:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	2b01      	cmp	r3, #1
 800545a:	f040 80ce 	bne.w	80055fa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d132      	bne.n	80054cc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	0151      	lsls	r1, r2, #5
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	440a      	add	r2, r1
 800547c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005480:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005484:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005488:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	0151      	lsls	r1, r2, #5
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	440a      	add	r2, r1
 80054a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	0151      	lsls	r1, r2, #5
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	440a      	add	r2, r1
 80054c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c4:	0cdb      	lsrs	r3, r3, #19
 80054c6:	04db      	lsls	r3, r3, #19
 80054c8:	6113      	str	r3, [r2, #16]
 80054ca:	e04e      	b.n	800556a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	0151      	lsls	r1, r2, #5
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	440a      	add	r2, r1
 80054e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e6:	0cdb      	lsrs	r3, r3, #19
 80054e8:	04db      	lsls	r3, r3, #19
 80054ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	0151      	lsls	r1, r2, #5
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	440a      	add	r2, r1
 8005502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005506:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800550a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800550e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	699a      	ldr	r2, [r3, #24]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	429a      	cmp	r2, r3
 800551a:	d903      	bls.n	8005524 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	440a      	add	r2, r1
 800553a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800553e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005542:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005550:	691a      	ldr	r2, [r3, #16]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800555a:	6939      	ldr	r1, [r7, #16]
 800555c:	0148      	lsls	r0, r1, #5
 800555e:	6979      	ldr	r1, [r7, #20]
 8005560:	4401      	add	r1, r0
 8005562:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005566:	4313      	orrs	r3, r2
 8005568:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d11e      	bne.n	80055ae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d009      	beq.n	800558c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005584:	461a      	mov	r2, r3
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	0151      	lsls	r1, r2, #5
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	440a      	add	r2, r1
 80055a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	e097      	b.n	80056de <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	015a      	lsls	r2, r3, #5
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	0151      	lsls	r1, r2, #5
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	440a      	add	r2, r1
 80055c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055cc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 8083 	beq.w	80056de <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	f003 030f 	and.w	r3, r3, #15
 80055e8:	2101      	movs	r1, #1
 80055ea:	fa01 f303 	lsl.w	r3, r1, r3
 80055ee:	6979      	ldr	r1, [r7, #20]
 80055f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055f4:	4313      	orrs	r3, r2
 80055f6:	634b      	str	r3, [r1, #52]	; 0x34
 80055f8:	e071      	b.n	80056de <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	4413      	add	r3, r2
 8005602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	0151      	lsls	r1, r2, #5
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	440a      	add	r2, r1
 8005610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005614:	0cdb      	lsrs	r3, r3, #19
 8005616:	04db      	lsls	r3, r3, #19
 8005618:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	4413      	add	r3, r2
 8005622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	0151      	lsls	r1, r2, #5
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	440a      	add	r2, r1
 8005630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005634:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005638:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800563c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	68da      	ldr	r2, [r3, #12]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	440a      	add	r2, r1
 800566c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005670:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005674:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800568c:	6939      	ldr	r1, [r7, #16]
 800568e:	0148      	lsls	r0, r1, #5
 8005690:	6979      	ldr	r1, [r7, #20]
 8005692:	4401      	add	r1, r0
 8005694:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005698:	4313      	orrs	r3, r2
 800569a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800569c:	79fb      	ldrb	r3, [r7, #7]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d10d      	bne.n	80056be <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d009      	beq.n	80056be <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	6919      	ldr	r1, [r3, #16]
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ba:	460a      	mov	r2, r1
 80056bc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	0151      	lsls	r1, r2, #5
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	440a      	add	r2, r1
 80056d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	371c      	adds	r7, #28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	785b      	ldrb	r3, [r3, #1]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d14a      	bne.n	80057a0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800571e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005722:	f040 8086 	bne.w	8005832 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	7812      	ldrb	r2, [r2, #0]
 800573a:	0151      	lsls	r1, r2, #5
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	440a      	add	r2, r1
 8005740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005744:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005748:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	7812      	ldrb	r2, [r2, #0]
 800575e:	0151      	lsls	r1, r2, #5
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	440a      	add	r2, r1
 8005764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005768:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800576c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	3301      	adds	r3, #1
 8005772:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f242 7210 	movw	r2, #10000	; 0x2710
 800577a:	4293      	cmp	r3, r2
 800577c:	d902      	bls.n	8005784 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	75fb      	strb	r3, [r7, #23]
          break;
 8005782:	e056      	b.n	8005832 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800579c:	d0e7      	beq.n	800576e <USB_EPStopXfer+0x82>
 800579e:	e048      	b.n	8005832 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057b8:	d13b      	bne.n	8005832 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	7812      	ldrb	r2, [r2, #0]
 80057ce:	0151      	lsls	r1, r2, #5
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	440a      	add	r2, r1
 80057d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057dc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	7812      	ldrb	r2, [r2, #0]
 80057f2:	0151      	lsls	r1, r2, #5
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	440a      	add	r2, r1
 80057f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005800:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	3301      	adds	r3, #1
 8005806:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f242 7210 	movw	r2, #10000	; 0x2710
 800580e:	4293      	cmp	r3, r2
 8005810:	d902      	bls.n	8005818 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	75fb      	strb	r3, [r7, #23]
          break;
 8005816:	e00c      	b.n	8005832 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	4413      	add	r3, r2
 8005822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800582c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005830:	d0e7      	beq.n	8005802 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005832:	7dfb      	ldrb	r3, [r7, #23]
}
 8005834:	4618      	mov	r0, r3
 8005836:	371c      	adds	r7, #28
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005840:	b480      	push	{r7}
 8005842:	b089      	sub	sp, #36	; 0x24
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	4611      	mov	r1, r2
 800584c:	461a      	mov	r2, r3
 800584e:	460b      	mov	r3, r1
 8005850:	71fb      	strb	r3, [r7, #7]
 8005852:	4613      	mov	r3, r2
 8005854:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800585e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005862:	2b00      	cmp	r3, #0
 8005864:	d123      	bne.n	80058ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005866:	88bb      	ldrh	r3, [r7, #4]
 8005868:	3303      	adds	r3, #3
 800586a:	089b      	lsrs	r3, r3, #2
 800586c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800586e:	2300      	movs	r3, #0
 8005870:	61bb      	str	r3, [r7, #24]
 8005872:	e018      	b.n	80058a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005874:	79fb      	ldrb	r3, [r7, #7]
 8005876:	031a      	lsls	r2, r3, #12
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	4413      	add	r3, r2
 800587c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005880:	461a      	mov	r2, r3
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	3301      	adds	r3, #1
 800588c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	3301      	adds	r3, #1
 8005892:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	3301      	adds	r3, #1
 8005898:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	3301      	adds	r3, #1
 800589e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	3301      	adds	r3, #1
 80058a4:	61bb      	str	r3, [r7, #24]
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d3e2      	bcc.n	8005874 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3724      	adds	r7, #36	; 0x24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058bc:	b480      	push	{r7}
 80058be:	b08b      	sub	sp, #44	; 0x2c
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	4613      	mov	r3, r2
 80058c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80058d2:	88fb      	ldrh	r3, [r7, #6]
 80058d4:	089b      	lsrs	r3, r3, #2
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80058da:	88fb      	ldrh	r3, [r7, #6]
 80058dc:	f003 0303 	and.w	r3, r3, #3
 80058e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80058e2:	2300      	movs	r3, #0
 80058e4:	623b      	str	r3, [r7, #32]
 80058e6:	e014      	b.n	8005912 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	3301      	adds	r3, #1
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	3301      	adds	r3, #1
 80058fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	3301      	adds	r3, #1
 8005904:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	3301      	adds	r3, #1
 800590a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	3301      	adds	r3, #1
 8005910:	623b      	str	r3, [r7, #32]
 8005912:	6a3a      	ldr	r2, [r7, #32]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	429a      	cmp	r2, r3
 8005918:	d3e6      	bcc.n	80058e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800591a:	8bfb      	ldrh	r3, [r7, #30]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01e      	beq.n	800595e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800592a:	461a      	mov	r2, r3
 800592c:	f107 0310 	add.w	r3, r7, #16
 8005930:	6812      	ldr	r2, [r2, #0]
 8005932:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	b2db      	uxtb	r3, r3
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	fa22 f303 	lsr.w	r3, r2, r3
 8005940:	b2da      	uxtb	r2, r3
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	701a      	strb	r2, [r3, #0]
      i++;
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	3301      	adds	r3, #1
 800594a:	623b      	str	r3, [r7, #32]
      pDest++;
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	3301      	adds	r3, #1
 8005950:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005952:	8bfb      	ldrh	r3, [r7, #30]
 8005954:	3b01      	subs	r3, #1
 8005956:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005958:	8bfb      	ldrh	r3, [r7, #30]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1ea      	bne.n	8005934 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005960:	4618      	mov	r0, r3
 8005962:	372c      	adds	r7, #44	; 0x2c
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	785b      	ldrb	r3, [r3, #1]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d12c      	bne.n	80059e2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	db12      	blt.n	80059c0 <USB_EPSetStall+0x54>
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00f      	beq.n	80059c0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	0151      	lsls	r1, r2, #5
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	440a      	add	r2, r1
 80059b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059be:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	0151      	lsls	r1, r2, #5
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	440a      	add	r2, r1
 80059d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059de:	6013      	str	r3, [r2, #0]
 80059e0:	e02b      	b.n	8005a3a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	db12      	blt.n	8005a1a <USB_EPSetStall+0xae>
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00f      	beq.n	8005a1a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	0151      	lsls	r1, r2, #5
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	440a      	add	r2, r1
 8005a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a18:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	0151      	lsls	r1, r2, #5
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	440a      	add	r2, r1
 8005a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	785b      	ldrb	r3, [r3, #1]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d128      	bne.n	8005ab6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	0151      	lsls	r1, r2, #5
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	440a      	add	r2, r1
 8005a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a82:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	791b      	ldrb	r3, [r3, #4]
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	d003      	beq.n	8005a94 <USB_EPClearStall+0x4c>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	791b      	ldrb	r3, [r3, #4]
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d138      	bne.n	8005b06 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	0151      	lsls	r1, r2, #5
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	440a      	add	r2, r1
 8005aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab2:	6013      	str	r3, [r2, #0]
 8005ab4:	e027      	b.n	8005b06 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	0151      	lsls	r1, r2, #5
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	440a      	add	r2, r1
 8005acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ad0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ad4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	791b      	ldrb	r3, [r3, #4]
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d003      	beq.n	8005ae6 <USB_EPClearStall+0x9e>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	791b      	ldrb	r3, [r3, #4]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d10f      	bne.n	8005b06 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	0151      	lsls	r1, r2, #5
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	440a      	add	r2, r1
 8005afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b04:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b32:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b36:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005b48:	68f9      	ldr	r1, [r7, #12]
 8005b4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b7a:	f023 0303 	bic.w	r3, r3, #3
 8005b7e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b8e:	f023 0302 	bic.w	r3, r3, #2
 8005b92:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b085      	sub	sp, #20
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005bbc:	f023 0303 	bic.w	r3, r3, #3
 8005bc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bd0:	f043 0302 	orr.w	r3, r3, #2
 8005bd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b085      	sub	sp, #20
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	0c1b      	lsrs	r3, r3, #16
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b085      	sub	sp, #20
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5a:	69db      	ldr	r3, [r3, #28]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	4013      	ands	r3, r2
 8005c60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	b29b      	uxth	r3, r3
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b085      	sub	sp, #20
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ca0:	68bb      	ldr	r3, [r7, #8]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b087      	sub	sp, #28
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005cd2:	78fb      	ldrb	r3, [r7, #3]
 8005cd4:	f003 030f 	and.w	r3, r3, #15
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	fa22 f303 	lsr.w	r3, r2, r3
 8005cde:	01db      	lsls	r3, r3, #7
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005ce8:	78fb      	ldrb	r3, [r7, #3]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	371c      	adds	r7, #28
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	f003 0301 	and.w	r3, r3, #1
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b085      	sub	sp, #20
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d40:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005d44:	f023 0307 	bic.w	r3, r3, #7
 8005d48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	460b      	mov	r3, r1
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	333c      	adds	r3, #60	; 0x3c
 8005d82:	3304      	adds	r3, #4
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	4a26      	ldr	r2, [pc, #152]	; (8005e24 <USB_EP0_OutStart+0xb8>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d90a      	bls.n	8005da6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005da0:	d101      	bne.n	8005da6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	e037      	b.n	8005e16 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dac:	461a      	mov	r2, r3
 8005dae:	2300      	movs	r3, #0
 8005db0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd4:	f043 0318 	orr.w	r3, r3, #24
 8005dd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005dec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005dee:	7afb      	ldrb	r3, [r7, #11]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d10f      	bne.n	8005e14 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e0e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005e12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	4f54300a 	.word	0x4f54300a

08005e28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	3301      	adds	r3, #1
 8005e38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4a13      	ldr	r2, [pc, #76]	; (8005e8c <USB_CoreReset+0x64>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d901      	bls.n	8005e46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e01b      	b.n	8005e7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	daf2      	bge.n	8005e34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f043 0201 	orr.w	r2, r3, #1
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3301      	adds	r3, #1
 8005e62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4a09      	ldr	r2, [pc, #36]	; (8005e8c <USB_CoreReset+0x64>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d901      	bls.n	8005e70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e006      	b.n	8005e7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d0f0      	beq.n	8005e5e <USB_CoreReset+0x36>

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	00030d40 	.word	0x00030d40

08005e90 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	460b      	mov	r3, r1
 8005e9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e9c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005ea0:	f002 fca2 	bl	80087e8 <USBD_static_malloc>
 8005ea4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d109      	bne.n	8005ec0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	32b0      	adds	r2, #176	; 0xb0
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	e0d4      	b.n	800606a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005ec0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f002 fdd7 	bl	8008a7a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	32b0      	adds	r2, #176	; 0xb0
 8005ed6:	68f9      	ldr	r1, [r7, #12]
 8005ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	32b0      	adds	r2, #176	; 0xb0
 8005ee6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	7c1b      	ldrb	r3, [r3, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d138      	bne.n	8005f6a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005ef8:	4b5e      	ldr	r3, [pc, #376]	; (8006074 <USBD_CDC_Init+0x1e4>)
 8005efa:	7819      	ldrb	r1, [r3, #0]
 8005efc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f00:	2202      	movs	r2, #2
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f002 fb4d 	bl	80085a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f08:	4b5a      	ldr	r3, [pc, #360]	; (8006074 <USBD_CDC_Init+0x1e4>)
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	f003 020f 	and.w	r2, r3, #15
 8005f10:	6879      	ldr	r1, [r7, #4]
 8005f12:	4613      	mov	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4413      	add	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	440b      	add	r3, r1
 8005f1c:	3324      	adds	r3, #36	; 0x24
 8005f1e:	2201      	movs	r2, #1
 8005f20:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005f22:	4b55      	ldr	r3, [pc, #340]	; (8006078 <USBD_CDC_Init+0x1e8>)
 8005f24:	7819      	ldrb	r1, [r3, #0]
 8005f26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f002 fb38 	bl	80085a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f32:	4b51      	ldr	r3, [pc, #324]	; (8006078 <USBD_CDC_Init+0x1e8>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	f003 020f 	and.w	r2, r3, #15
 8005f3a:	6879      	ldr	r1, [r7, #4]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	440b      	add	r3, r1
 8005f46:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005f4e:	4b4b      	ldr	r3, [pc, #300]	; (800607c <USBD_CDC_Init+0x1ec>)
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	f003 020f 	and.w	r2, r3, #15
 8005f56:	6879      	ldr	r1, [r7, #4]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	440b      	add	r3, r1
 8005f62:	3326      	adds	r3, #38	; 0x26
 8005f64:	2210      	movs	r2, #16
 8005f66:	801a      	strh	r2, [r3, #0]
 8005f68:	e035      	b.n	8005fd6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f6a:	4b42      	ldr	r3, [pc, #264]	; (8006074 <USBD_CDC_Init+0x1e4>)
 8005f6c:	7819      	ldrb	r1, [r3, #0]
 8005f6e:	2340      	movs	r3, #64	; 0x40
 8005f70:	2202      	movs	r2, #2
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f002 fb15 	bl	80085a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f78:	4b3e      	ldr	r3, [pc, #248]	; (8006074 <USBD_CDC_Init+0x1e4>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	f003 020f 	and.w	r2, r3, #15
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	4613      	mov	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	3324      	adds	r3, #36	; 0x24
 8005f8e:	2201      	movs	r2, #1
 8005f90:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005f92:	4b39      	ldr	r3, [pc, #228]	; (8006078 <USBD_CDC_Init+0x1e8>)
 8005f94:	7819      	ldrb	r1, [r3, #0]
 8005f96:	2340      	movs	r3, #64	; 0x40
 8005f98:	2202      	movs	r2, #2
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f002 fb01 	bl	80085a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005fa0:	4b35      	ldr	r3, [pc, #212]	; (8006078 <USBD_CDC_Init+0x1e8>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	f003 020f 	and.w	r2, r3, #15
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	4613      	mov	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	440b      	add	r3, r1
 8005fb4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005fb8:	2201      	movs	r2, #1
 8005fba:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005fbc:	4b2f      	ldr	r3, [pc, #188]	; (800607c <USBD_CDC_Init+0x1ec>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	f003 020f 	and.w	r2, r3, #15
 8005fc4:	6879      	ldr	r1, [r7, #4]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	440b      	add	r3, r1
 8005fd0:	3326      	adds	r3, #38	; 0x26
 8005fd2:	2210      	movs	r2, #16
 8005fd4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005fd6:	4b29      	ldr	r3, [pc, #164]	; (800607c <USBD_CDC_Init+0x1ec>)
 8005fd8:	7819      	ldrb	r1, [r3, #0]
 8005fda:	2308      	movs	r3, #8
 8005fdc:	2203      	movs	r2, #3
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f002 fadf 	bl	80085a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005fe4:	4b25      	ldr	r3, [pc, #148]	; (800607c <USBD_CDC_Init+0x1ec>)
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	f003 020f 	and.w	r2, r3, #15
 8005fec:	6879      	ldr	r1, [r7, #4]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4413      	add	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	440b      	add	r3, r1
 8005ff8:	3324      	adds	r3, #36	; 0x24
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	33b0      	adds	r3, #176	; 0xb0
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006034:	2302      	movs	r3, #2
 8006036:	e018      	b.n	800606a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	7c1b      	ldrb	r3, [r3, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10a      	bne.n	8006056 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006040:	4b0d      	ldr	r3, [pc, #52]	; (8006078 <USBD_CDC_Init+0x1e8>)
 8006042:	7819      	ldrb	r1, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800604a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f002 fb96 	bl	8008780 <USBD_LL_PrepareReceive>
 8006054:	e008      	b.n	8006068 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006056:	4b08      	ldr	r3, [pc, #32]	; (8006078 <USBD_CDC_Init+0x1e8>)
 8006058:	7819      	ldrb	r1, [r3, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006060:	2340      	movs	r3, #64	; 0x40
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f002 fb8c 	bl	8008780 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	20000093 	.word	0x20000093
 8006078:	20000094 	.word	0x20000094
 800607c:	20000095 	.word	0x20000095

08006080 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	460b      	mov	r3, r1
 800608a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800608c:	4b3a      	ldr	r3, [pc, #232]	; (8006178 <USBD_CDC_DeInit+0xf8>)
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	4619      	mov	r1, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f002 faab 	bl	80085ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006098:	4b37      	ldr	r3, [pc, #220]	; (8006178 <USBD_CDC_DeInit+0xf8>)
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	f003 020f 	and.w	r2, r3, #15
 80060a0:	6879      	ldr	r1, [r7, #4]
 80060a2:	4613      	mov	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	440b      	add	r3, r1
 80060ac:	3324      	adds	r3, #36	; 0x24
 80060ae:	2200      	movs	r2, #0
 80060b0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80060b2:	4b32      	ldr	r3, [pc, #200]	; (800617c <USBD_CDC_DeInit+0xfc>)
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	4619      	mov	r1, r3
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f002 fa98 	bl	80085ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80060be:	4b2f      	ldr	r3, [pc, #188]	; (800617c <USBD_CDC_DeInit+0xfc>)
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	f003 020f 	and.w	r2, r3, #15
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	4613      	mov	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	440b      	add	r3, r1
 80060d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060d6:	2200      	movs	r2, #0
 80060d8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80060da:	4b29      	ldr	r3, [pc, #164]	; (8006180 <USBD_CDC_DeInit+0x100>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	4619      	mov	r1, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f002 fa84 	bl	80085ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80060e6:	4b26      	ldr	r3, [pc, #152]	; (8006180 <USBD_CDC_DeInit+0x100>)
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	f003 020f 	and.w	r2, r3, #15
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	4613      	mov	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	440b      	add	r3, r1
 80060fa:	3324      	adds	r3, #36	; 0x24
 80060fc:	2200      	movs	r2, #0
 80060fe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006100:	4b1f      	ldr	r3, [pc, #124]	; (8006180 <USBD_CDC_DeInit+0x100>)
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	f003 020f 	and.w	r2, r3, #15
 8006108:	6879      	ldr	r1, [r7, #4]
 800610a:	4613      	mov	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	440b      	add	r3, r1
 8006114:	3326      	adds	r3, #38	; 0x26
 8006116:	2200      	movs	r2, #0
 8006118:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	32b0      	adds	r2, #176	; 0xb0
 8006124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d01f      	beq.n	800616c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	33b0      	adds	r3, #176	; 0xb0
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	32b0      	adds	r2, #176	; 0xb0
 800614a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614e:	4618      	mov	r0, r3
 8006150:	f002 fb58 	bl	8008804 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	32b0      	adds	r2, #176	; 0xb0
 800615e:	2100      	movs	r1, #0
 8006160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	20000093 	.word	0x20000093
 800617c:	20000094 	.word	0x20000094
 8006180:	20000095 	.word	0x20000095

08006184 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	32b0      	adds	r2, #176	; 0xb0
 8006198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800619c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e0bf      	b.n	8006334 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d050      	beq.n	8006262 <USBD_CDC_Setup+0xde>
 80061c0:	2b20      	cmp	r3, #32
 80061c2:	f040 80af 	bne.w	8006324 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	88db      	ldrh	r3, [r3, #6]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d03a      	beq.n	8006244 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	b25b      	sxtb	r3, r3
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	da1b      	bge.n	8006210 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	33b0      	adds	r3, #176	; 0xb0
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80061ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	88d2      	ldrh	r2, [r2, #6]
 80061f4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	88db      	ldrh	r3, [r3, #6]
 80061fa:	2b07      	cmp	r3, #7
 80061fc:	bf28      	it	cs
 80061fe:	2307      	movcs	r3, #7
 8006200:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	89fa      	ldrh	r2, [r7, #14]
 8006206:	4619      	mov	r1, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f001 fd89 	bl	8007d20 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800620e:	e090      	b.n	8006332 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	785a      	ldrb	r2, [r3, #1]
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	88db      	ldrh	r3, [r3, #6]
 800621e:	2b3f      	cmp	r3, #63	; 0x3f
 8006220:	d803      	bhi.n	800622a <USBD_CDC_Setup+0xa6>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	88db      	ldrh	r3, [r3, #6]
 8006226:	b2da      	uxtb	r2, r3
 8006228:	e000      	b.n	800622c <USBD_CDC_Setup+0xa8>
 800622a:	2240      	movs	r2, #64	; 0x40
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006232:	6939      	ldr	r1, [r7, #16]
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800623a:	461a      	mov	r2, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f001 fd9b 	bl	8007d78 <USBD_CtlPrepareRx>
      break;
 8006242:	e076      	b.n	8006332 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	33b0      	adds	r3, #176	; 0xb0
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	7850      	ldrb	r0, [r2, #1]
 800625a:	2200      	movs	r2, #0
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	4798      	blx	r3
      break;
 8006260:	e067      	b.n	8006332 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	785b      	ldrb	r3, [r3, #1]
 8006266:	2b0b      	cmp	r3, #11
 8006268:	d851      	bhi.n	800630e <USBD_CDC_Setup+0x18a>
 800626a:	a201      	add	r2, pc, #4	; (adr r2, 8006270 <USBD_CDC_Setup+0xec>)
 800626c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006270:	080062a1 	.word	0x080062a1
 8006274:	0800631d 	.word	0x0800631d
 8006278:	0800630f 	.word	0x0800630f
 800627c:	0800630f 	.word	0x0800630f
 8006280:	0800630f 	.word	0x0800630f
 8006284:	0800630f 	.word	0x0800630f
 8006288:	0800630f 	.word	0x0800630f
 800628c:	0800630f 	.word	0x0800630f
 8006290:	0800630f 	.word	0x0800630f
 8006294:	0800630f 	.word	0x0800630f
 8006298:	080062cb 	.word	0x080062cb
 800629c:	080062f5 	.word	0x080062f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	d107      	bne.n	80062bc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80062ac:	f107 030a 	add.w	r3, r7, #10
 80062b0:	2202      	movs	r2, #2
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f001 fd33 	bl	8007d20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062ba:	e032      	b.n	8006322 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80062bc:	6839      	ldr	r1, [r7, #0]
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f001 fcbd 	bl	8007c3e <USBD_CtlError>
            ret = USBD_FAIL;
 80062c4:	2303      	movs	r3, #3
 80062c6:	75fb      	strb	r3, [r7, #23]
          break;
 80062c8:	e02b      	b.n	8006322 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d107      	bne.n	80062e6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80062d6:	f107 030d 	add.w	r3, r7, #13
 80062da:	2201      	movs	r2, #1
 80062dc:	4619      	mov	r1, r3
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f001 fd1e 	bl	8007d20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062e4:	e01d      	b.n	8006322 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80062e6:	6839      	ldr	r1, [r7, #0]
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f001 fca8 	bl	8007c3e <USBD_CtlError>
            ret = USBD_FAIL;
 80062ee:	2303      	movs	r3, #3
 80062f0:	75fb      	strb	r3, [r7, #23]
          break;
 80062f2:	e016      	b.n	8006322 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d00f      	beq.n	8006320 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006300:	6839      	ldr	r1, [r7, #0]
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f001 fc9b 	bl	8007c3e <USBD_CtlError>
            ret = USBD_FAIL;
 8006308:	2303      	movs	r3, #3
 800630a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800630c:	e008      	b.n	8006320 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f001 fc94 	bl	8007c3e <USBD_CtlError>
          ret = USBD_FAIL;
 8006316:	2303      	movs	r3, #3
 8006318:	75fb      	strb	r3, [r7, #23]
          break;
 800631a:	e002      	b.n	8006322 <USBD_CDC_Setup+0x19e>
          break;
 800631c:	bf00      	nop
 800631e:	e008      	b.n	8006332 <USBD_CDC_Setup+0x1ae>
          break;
 8006320:	bf00      	nop
      }
      break;
 8006322:	e006      	b.n	8006332 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f001 fc89 	bl	8007c3e <USBD_CtlError>
      ret = USBD_FAIL;
 800632c:	2303      	movs	r3, #3
 800632e:	75fb      	strb	r3, [r7, #23]
      break;
 8006330:	bf00      	nop
  }

  return (uint8_t)ret;
 8006332:	7dfb      	ldrb	r3, [r7, #23]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3718      	adds	r7, #24
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800634e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	32b0      	adds	r2, #176	; 0xb0
 800635a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006362:	2303      	movs	r3, #3
 8006364:	e065      	b.n	8006432 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	32b0      	adds	r2, #176	; 0xb0
 8006370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006374:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006376:	78fb      	ldrb	r3, [r7, #3]
 8006378:	f003 020f 	and.w	r2, r3, #15
 800637c:	6879      	ldr	r1, [r7, #4]
 800637e:	4613      	mov	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	440b      	add	r3, r1
 8006388:	3318      	adds	r3, #24
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d02f      	beq.n	80063f0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	f003 020f 	and.w	r2, r3, #15
 8006396:	6879      	ldr	r1, [r7, #4]
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	440b      	add	r3, r1
 80063a2:	3318      	adds	r3, #24
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	78fb      	ldrb	r3, [r7, #3]
 80063a8:	f003 010f 	and.w	r1, r3, #15
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	460b      	mov	r3, r1
 80063b0:	00db      	lsls	r3, r3, #3
 80063b2:	440b      	add	r3, r1
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4403      	add	r3, r0
 80063b8:	3348      	adds	r3, #72	; 0x48
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	fbb2 f1f3 	udiv	r1, r2, r3
 80063c0:	fb01 f303 	mul.w	r3, r1, r3
 80063c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d112      	bne.n	80063f0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80063ca:	78fb      	ldrb	r3, [r7, #3]
 80063cc:	f003 020f 	and.w	r2, r3, #15
 80063d0:	6879      	ldr	r1, [r7, #4]
 80063d2:	4613      	mov	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	440b      	add	r3, r1
 80063dc:	3318      	adds	r3, #24
 80063de:	2200      	movs	r2, #0
 80063e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80063e2:	78f9      	ldrb	r1, [r7, #3]
 80063e4:	2300      	movs	r3, #0
 80063e6:	2200      	movs	r2, #0
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f002 f9a8 	bl	800873e <USBD_LL_Transmit>
 80063ee:	e01f      	b.n	8006430 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	33b0      	adds	r3, #176	; 0xb0
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d010      	beq.n	8006430 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	33b0      	adds	r3, #176	; 0xb0
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800642c:	78fa      	ldrb	r2, [r7, #3]
 800642e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b084      	sub	sp, #16
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	460b      	mov	r3, r1
 8006444:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	32b0      	adds	r2, #176	; 0xb0
 8006450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006454:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	32b0      	adds	r2, #176	; 0xb0
 8006460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006468:	2303      	movs	r3, #3
 800646a:	e01a      	b.n	80064a2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800646c:	78fb      	ldrb	r3, [r7, #3]
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f002 f9a6 	bl	80087c2 <USBD_LL_GetRxDataSize>
 8006476:	4602      	mov	r2, r0
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	33b0      	adds	r3, #176	; 0xb0
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800649c:	4611      	mov	r1, r2
 800649e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b084      	sub	sp, #16
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	32b0      	adds	r2, #176	; 0xb0
 80064bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e025      	b.n	8006518 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	33b0      	adds	r3, #176	; 0xb0
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d01a      	beq.n	8006516 <USBD_CDC_EP0_RxReady+0x6c>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80064e6:	2bff      	cmp	r3, #255	; 0xff
 80064e8:	d015      	beq.n	8006516 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	33b0      	adds	r3, #176	; 0xb0
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006502:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800650a:	b292      	uxth	r2, r2
 800650c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	22ff      	movs	r2, #255	; 0xff
 8006512:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006528:	2182      	movs	r1, #130	; 0x82
 800652a:	4818      	ldr	r0, [pc, #96]	; (800658c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800652c:	f000 fd4f 	bl	8006fce <USBD_GetEpDesc>
 8006530:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006532:	2101      	movs	r1, #1
 8006534:	4815      	ldr	r0, [pc, #84]	; (800658c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006536:	f000 fd4a 	bl	8006fce <USBD_GetEpDesc>
 800653a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800653c:	2181      	movs	r1, #129	; 0x81
 800653e:	4813      	ldr	r0, [pc, #76]	; (800658c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006540:	f000 fd45 	bl	8006fce <USBD_GetEpDesc>
 8006544:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2210      	movs	r2, #16
 8006550:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d006      	beq.n	8006566 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	2200      	movs	r2, #0
 800655c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006560:	711a      	strb	r2, [r3, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d006      	beq.n	800657a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006574:	711a      	strb	r2, [r3, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2243      	movs	r2, #67	; 0x43
 800657e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006580:	4b02      	ldr	r3, [pc, #8]	; (800658c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006582:	4618      	mov	r0, r3
 8006584:	3718      	adds	r7, #24
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	20000050 	.word	0x20000050

08006590 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006598:	2182      	movs	r1, #130	; 0x82
 800659a:	4818      	ldr	r0, [pc, #96]	; (80065fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800659c:	f000 fd17 	bl	8006fce <USBD_GetEpDesc>
 80065a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80065a2:	2101      	movs	r1, #1
 80065a4:	4815      	ldr	r0, [pc, #84]	; (80065fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065a6:	f000 fd12 	bl	8006fce <USBD_GetEpDesc>
 80065aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80065ac:	2181      	movs	r1, #129	; 0x81
 80065ae:	4813      	ldr	r0, [pc, #76]	; (80065fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065b0:	f000 fd0d 	bl	8006fce <USBD_GetEpDesc>
 80065b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d002      	beq.n	80065c2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2210      	movs	r2, #16
 80065c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d006      	beq.n	80065d6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	2200      	movs	r2, #0
 80065cc:	711a      	strb	r2, [r3, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f042 0202 	orr.w	r2, r2, #2
 80065d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d006      	beq.n	80065ea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	711a      	strb	r2, [r3, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f042 0202 	orr.w	r2, r2, #2
 80065e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2243      	movs	r2, #67	; 0x43
 80065ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80065f0:	4b02      	ldr	r3, [pc, #8]	; (80065fc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20000050 	.word	0x20000050

08006600 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006608:	2182      	movs	r1, #130	; 0x82
 800660a:	4818      	ldr	r0, [pc, #96]	; (800666c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800660c:	f000 fcdf 	bl	8006fce <USBD_GetEpDesc>
 8006610:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006612:	2101      	movs	r1, #1
 8006614:	4815      	ldr	r0, [pc, #84]	; (800666c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006616:	f000 fcda 	bl	8006fce <USBD_GetEpDesc>
 800661a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800661c:	2181      	movs	r1, #129	; 0x81
 800661e:	4813      	ldr	r0, [pc, #76]	; (800666c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006620:	f000 fcd5 	bl	8006fce <USBD_GetEpDesc>
 8006624:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d002      	beq.n	8006632 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	2210      	movs	r2, #16
 8006630:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d006      	beq.n	8006646 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	2200      	movs	r2, #0
 800663c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006640:	711a      	strb	r2, [r3, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d006      	beq.n	800665a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006654:	711a      	strb	r2, [r3, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2243      	movs	r2, #67	; 0x43
 800665e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006660:	4b02      	ldr	r3, [pc, #8]	; (800666c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006662:	4618      	mov	r0, r3
 8006664:	3718      	adds	r7, #24
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	20000050 	.word	0x20000050

08006670 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	220a      	movs	r2, #10
 800667c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800667e:	4b03      	ldr	r3, [pc, #12]	; (800668c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006680:	4618      	mov	r0, r3
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	2000000c 	.word	0x2000000c

08006690 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e009      	b.n	80066b8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	33b0      	adds	r3, #176	; 0xb0
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	32b0      	adds	r2, #176	; 0xb0
 80066da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066de:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e008      	b.n	80066fc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	371c      	adds	r7, #28
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	32b0      	adds	r2, #176	; 0xb0
 800671c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006720:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006728:	2303      	movs	r3, #3
 800672a:	e004      	b.n	8006736 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
	...

08006744 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	32b0      	adds	r2, #176	; 0xb0
 8006756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800675a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800675c:	2301      	movs	r3, #1
 800675e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	32b0      	adds	r2, #176	; 0xb0
 800676a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006772:	2303      	movs	r3, #3
 8006774:	e025      	b.n	80067c2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800677c:	2b00      	cmp	r3, #0
 800677e:	d11f      	bne.n	80067c0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	2201      	movs	r2, #1
 8006784:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006788:	4b10      	ldr	r3, [pc, #64]	; (80067cc <USBD_CDC_TransmitPacket+0x88>)
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	f003 020f 	and.w	r2, r3, #15
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	4613      	mov	r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4403      	add	r3, r0
 80067a2:	3318      	adds	r3, #24
 80067a4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80067a6:	4b09      	ldr	r3, [pc, #36]	; (80067cc <USBD_CDC_TransmitPacket+0x88>)
 80067a8:	7819      	ldrb	r1, [r3, #0]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f001 ffc1 	bl	800873e <USBD_LL_Transmit>

    ret = USBD_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000093 	.word	0x20000093

080067d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	32b0      	adds	r2, #176	; 0xb0
 80067e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	32b0      	adds	r2, #176	; 0xb0
 80067f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e018      	b.n	8006830 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	7c1b      	ldrb	r3, [r3, #16]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10a      	bne.n	800681c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006806:	4b0c      	ldr	r3, [pc, #48]	; (8006838 <USBD_CDC_ReceivePacket+0x68>)
 8006808:	7819      	ldrb	r1, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f001 ffb3 	bl	8008780 <USBD_LL_PrepareReceive>
 800681a:	e008      	b.n	800682e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800681c:	4b06      	ldr	r3, [pc, #24]	; (8006838 <USBD_CDC_ReceivePacket+0x68>)
 800681e:	7819      	ldrb	r1, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006826:	2340      	movs	r3, #64	; 0x40
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 ffa9 	bl	8008780 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	20000094 	.word	0x20000094

0800683c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	4613      	mov	r3, r2
 8006848:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006850:	2303      	movs	r3, #3
 8006852:	e01f      	b.n	8006894 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	79fa      	ldrb	r2, [r7, #7]
 8006886:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f001 fe23 	bl	80084d4 <USBD_LL_Init>
 800688e:	4603      	mov	r3, r0
 8006890:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006892:	7dfb      	ldrb	r3, [r7, #23]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3718      	adds	r7, #24
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e025      	b.n	8006900 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	32ae      	adds	r2, #174	; 0xae
 80068c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00f      	beq.n	80068f0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	32ae      	adds	r2, #174	; 0xae
 80068da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e0:	f107 020e 	add.w	r2, r7, #14
 80068e4:	4610      	mov	r0, r2
 80068e6:	4798      	blx	r3
 80068e8:	4602      	mov	r2, r0
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f001 fe2b 	bl	800856c <USBD_LL_Start>
 8006916:	4603      	mov	r3, r0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006928:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800692a:	4618      	mov	r0, r3
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b084      	sub	sp, #16
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	460b      	mov	r3, r1
 8006940:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006942:	2300      	movs	r3, #0
 8006944:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800694c:	2b00      	cmp	r3, #0
 800694e:	d009      	beq.n	8006964 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	78fa      	ldrb	r2, [r7, #3]
 800695a:	4611      	mov	r1, r2
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	4798      	blx	r3
 8006960:	4603      	mov	r3, r0
 8006962:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006964:	7bfb      	ldrb	r3, [r7, #15]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b084      	sub	sp, #16
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	460b      	mov	r3, r1
 8006978:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800697a:	2300      	movs	r3, #0
 800697c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	78fa      	ldrb	r2, [r7, #3]
 8006988:	4611      	mov	r1, r2
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	4798      	blx	r3
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d001      	beq.n	8006998 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006994:	2303      	movs	r3, #3
 8006996:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006998:	7bfb      	ldrb	r3, [r7, #15]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b084      	sub	sp, #16
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069b2:	6839      	ldr	r1, [r7, #0]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f001 f908 	bl	8007bca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80069c8:	461a      	mov	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80069d6:	f003 031f 	and.w	r3, r3, #31
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d01a      	beq.n	8006a14 <USBD_LL_SetupStage+0x72>
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d822      	bhi.n	8006a28 <USBD_LL_SetupStage+0x86>
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <USBD_LL_SetupStage+0x4a>
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d00a      	beq.n	8006a00 <USBD_LL_SetupStage+0x5e>
 80069ea:	e01d      	b.n	8006a28 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069f2:	4619      	mov	r1, r3
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fb5f 	bl	80070b8 <USBD_StdDevReq>
 80069fa:	4603      	mov	r3, r0
 80069fc:	73fb      	strb	r3, [r7, #15]
      break;
 80069fe:	e020      	b.n	8006a42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a06:	4619      	mov	r1, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fbc7 	bl	800719c <USBD_StdItfReq>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	73fb      	strb	r3, [r7, #15]
      break;
 8006a12:	e016      	b.n	8006a42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fc29 	bl	8007274 <USBD_StdEPReq>
 8006a22:	4603      	mov	r3, r0
 8006a24:	73fb      	strb	r3, [r7, #15]
      break;
 8006a26:	e00c      	b.n	8006a42 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a2e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	4619      	mov	r1, r3
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f001 fdf8 	bl	800862c <USBD_LL_StallEP>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a40:	bf00      	nop
  }

  return ret;
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	460b      	mov	r3, r1
 8006a56:	607a      	str	r2, [r7, #4]
 8006a58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006a5e:	7afb      	ldrb	r3, [r7, #11]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d16e      	bne.n	8006b42 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006a6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	f040 8098 	bne.w	8006ba8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	689a      	ldr	r2, [r3, #8]
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d913      	bls.n	8006aac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	689a      	ldr	r2, [r3, #8]
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	1ad2      	subs	r2, r2, r3
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	68da      	ldr	r2, [r3, #12]
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	bf28      	it	cs
 8006a9e:	4613      	movcs	r3, r2
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	6879      	ldr	r1, [r7, #4]
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f001 f984 	bl	8007db2 <USBD_CtlContinueRx>
 8006aaa:	e07d      	b.n	8006ba8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ab2:	f003 031f 	and.w	r3, r3, #31
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d014      	beq.n	8006ae4 <USBD_LL_DataOutStage+0x98>
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d81d      	bhi.n	8006afa <USBD_LL_DataOutStage+0xae>
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d002      	beq.n	8006ac8 <USBD_LL_DataOutStage+0x7c>
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d003      	beq.n	8006ace <USBD_LL_DataOutStage+0x82>
 8006ac6:	e018      	b.n	8006afa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	75bb      	strb	r3, [r7, #22]
            break;
 8006acc:	e018      	b.n	8006b00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 fa5e 	bl	8006f9a <USBD_CoreFindIF>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	75bb      	strb	r3, [r7, #22]
            break;
 8006ae2:	e00d      	b.n	8006b00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	4619      	mov	r1, r3
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f000 fa60 	bl	8006fb4 <USBD_CoreFindEP>
 8006af4:	4603      	mov	r3, r0
 8006af6:	75bb      	strb	r3, [r7, #22]
            break;
 8006af8:	e002      	b.n	8006b00 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	75bb      	strb	r3, [r7, #22]
            break;
 8006afe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006b00:	7dbb      	ldrb	r3, [r7, #22]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d119      	bne.n	8006b3a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b03      	cmp	r3, #3
 8006b10:	d113      	bne.n	8006b3a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006b12:	7dba      	ldrb	r2, [r7, #22]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	32ae      	adds	r2, #174	; 0xae
 8006b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00b      	beq.n	8006b3a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006b22:	7dba      	ldrb	r2, [r7, #22]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006b2a:	7dba      	ldrb	r2, [r7, #22]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	32ae      	adds	r2, #174	; 0xae
 8006b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f001 f94a 	bl	8007dd4 <USBD_CtlSendStatus>
 8006b40:	e032      	b.n	8006ba8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006b42:	7afb      	ldrb	r3, [r7, #11]
 8006b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 fa31 	bl	8006fb4 <USBD_CoreFindEP>
 8006b52:	4603      	mov	r3, r0
 8006b54:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b56:	7dbb      	ldrb	r3, [r7, #22]
 8006b58:	2bff      	cmp	r3, #255	; 0xff
 8006b5a:	d025      	beq.n	8006ba8 <USBD_LL_DataOutStage+0x15c>
 8006b5c:	7dbb      	ldrb	r3, [r7, #22]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d122      	bne.n	8006ba8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b03      	cmp	r3, #3
 8006b6c:	d117      	bne.n	8006b9e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006b6e:	7dba      	ldrb	r2, [r7, #22]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	32ae      	adds	r2, #174	; 0xae
 8006b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00f      	beq.n	8006b9e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006b7e:	7dba      	ldrb	r2, [r7, #22]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006b86:	7dba      	ldrb	r2, [r7, #22]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	32ae      	adds	r2, #174	; 0xae
 8006b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	7afa      	ldrb	r2, [r7, #11]
 8006b94:	4611      	mov	r1, r2
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	4798      	blx	r3
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006b9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006ba4:	7dfb      	ldrb	r3, [r7, #23]
 8006ba6:	e000      	b.n	8006baa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3718      	adds	r7, #24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b086      	sub	sp, #24
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	60f8      	str	r0, [r7, #12]
 8006bba:	460b      	mov	r3, r1
 8006bbc:	607a      	str	r2, [r7, #4]
 8006bbe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006bc0:	7afb      	ldrb	r3, [r7, #11]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d16f      	bne.n	8006ca6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	3314      	adds	r3, #20
 8006bca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d15a      	bne.n	8006c8c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	689a      	ldr	r2, [r3, #8]
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d914      	bls.n	8006c0c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	689a      	ldr	r2, [r3, #8]
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	1ad2      	subs	r2, r2, r3
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	6879      	ldr	r1, [r7, #4]
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f001 f8ac 	bl	8007d56 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bfe:	2300      	movs	r3, #0
 8006c00:	2200      	movs	r2, #0
 8006c02:	2100      	movs	r1, #0
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f001 fdbb 	bl	8008780 <USBD_LL_PrepareReceive>
 8006c0a:	e03f      	b.n	8006c8c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	68da      	ldr	r2, [r3, #12]
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d11c      	bne.n	8006c52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d316      	bcc.n	8006c52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d20f      	bcs.n	8006c52 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c32:	2200      	movs	r2, #0
 8006c34:	2100      	movs	r1, #0
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f001 f88d 	bl	8007d56 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c44:	2300      	movs	r3, #0
 8006c46:	2200      	movs	r2, #0
 8006c48:	2100      	movs	r1, #0
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f001 fd98 	bl	8008780 <USBD_LL_PrepareReceive>
 8006c50:	e01c      	b.n	8006c8c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d10f      	bne.n	8006c7e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d009      	beq.n	8006c7e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c7e:	2180      	movs	r1, #128	; 0x80
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f001 fcd3 	bl	800862c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f001 f8b7 	bl	8007dfa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d03a      	beq.n	8006d0c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f7ff fe42 	bl	8006920 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006ca4:	e032      	b.n	8006d0c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006ca6:	7afb      	ldrb	r3, [r7, #11]
 8006ca8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	4619      	mov	r1, r3
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f000 f97f 	bl	8006fb4 <USBD_CoreFindEP>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cba:	7dfb      	ldrb	r3, [r7, #23]
 8006cbc:	2bff      	cmp	r3, #255	; 0xff
 8006cbe:	d025      	beq.n	8006d0c <USBD_LL_DataInStage+0x15a>
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d122      	bne.n	8006d0c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	d11c      	bne.n	8006d0c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006cd2:	7dfa      	ldrb	r2, [r7, #23]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	32ae      	adds	r2, #174	; 0xae
 8006cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d014      	beq.n	8006d0c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006ce2:	7dfa      	ldrb	r2, [r7, #23]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006cea:	7dfa      	ldrb	r2, [r7, #23]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	32ae      	adds	r2, #174	; 0xae
 8006cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	7afa      	ldrb	r2, [r7, #11]
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	4798      	blx	r3
 8006cfe:	4603      	mov	r3, r0
 8006d00:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006d02:	7dbb      	ldrb	r3, [r7, #22]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d001      	beq.n	8006d0c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006d08:	7dbb      	ldrb	r3, [r7, #22]
 8006d0a:	e000      	b.n	8006d0e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3718      	adds	r7, #24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d014      	beq.n	8006d7c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00e      	beq.n	8006d7c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	6852      	ldr	r2, [r2, #4]
 8006d6a:	b2d2      	uxtb	r2, r2
 8006d6c:	4611      	mov	r1, r2
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	4798      	blx	r3
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d001      	beq.n	8006d7c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d7c:	2340      	movs	r3, #64	; 0x40
 8006d7e:	2200      	movs	r2, #0
 8006d80:	2100      	movs	r1, #0
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f001 fc0d 	bl	80085a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2240      	movs	r2, #64	; 0x40
 8006d94:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d98:	2340      	movs	r3, #64	; 0x40
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2180      	movs	r1, #128	; 0x80
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f001 fbff 	bl	80085a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2240      	movs	r2, #64	; 0x40
 8006dae:	621a      	str	r2, [r3, #32]

  return ret;
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	78fa      	ldrb	r2, [r7, #3]
 8006dca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2204      	movs	r2, #4
 8006df4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b083      	sub	sp, #12
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b04      	cmp	r3, #4
 8006e18:	d106      	bne.n	8006e28 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b082      	sub	sp, #8
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d110      	bne.n	8006e6c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00b      	beq.n	8006e6c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d005      	beq.n	8006e6c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e66:	69db      	ldr	r3, [r3, #28]
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b082      	sub	sp, #8
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	460b      	mov	r3, r1
 8006e80:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	32ae      	adds	r2, #174	; 0xae
 8006e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e01c      	b.n	8006ed2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b03      	cmp	r3, #3
 8006ea2:	d115      	bne.n	8006ed0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	32ae      	adds	r2, #174	; 0xae
 8006eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00b      	beq.n	8006ed0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	32ae      	adds	r2, #174	; 0xae
 8006ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
 8006ec8:	78fa      	ldrb	r2, [r7, #3]
 8006eca:	4611      	mov	r1, r2
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b082      	sub	sp, #8
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	32ae      	adds	r2, #174	; 0xae
 8006ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e01c      	b.n	8006f36 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d115      	bne.n	8006f34 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	32ae      	adds	r2, #174	; 0xae
 8006f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00b      	beq.n	8006f34 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	32ae      	adds	r2, #174	; 0xae
 8006f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2c:	78fa      	ldrb	r2, [r7, #3]
 8006f2e:	4611      	mov	r1, r2
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00e      	beq.n	8006f90 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	6852      	ldr	r2, [r2, #4]
 8006f7e:	b2d2      	uxtb	r2, r2
 8006f80:	4611      	mov	r1, r2
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	4798      	blx	r3
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d001      	beq.n	8006f90 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b083      	sub	sp, #12
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006fa6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006fc0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b086      	sub	sp, #24
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	885b      	ldrh	r3, [r3, #2]
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d920      	bls.n	8007038 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006ffe:	e013      	b.n	8007028 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007000:	f107 030a 	add.w	r3, r7, #10
 8007004:	4619      	mov	r1, r3
 8007006:	6978      	ldr	r0, [r7, #20]
 8007008:	f000 f81b 	bl	8007042 <USBD_GetNextDesc>
 800700c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	785b      	ldrb	r3, [r3, #1]
 8007012:	2b05      	cmp	r3, #5
 8007014:	d108      	bne.n	8007028 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	789b      	ldrb	r3, [r3, #2]
 800701e:	78fa      	ldrb	r2, [r7, #3]
 8007020:	429a      	cmp	r2, r3
 8007022:	d008      	beq.n	8007036 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007024:	2300      	movs	r3, #0
 8007026:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	885b      	ldrh	r3, [r3, #2]
 800702c:	b29a      	uxth	r2, r3
 800702e:	897b      	ldrh	r3, [r7, #10]
 8007030:	429a      	cmp	r2, r3
 8007032:	d8e5      	bhi.n	8007000 <USBD_GetEpDesc+0x32>
 8007034:	e000      	b.n	8007038 <USBD_GetEpDesc+0x6a>
          break;
 8007036:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007038:	693b      	ldr	r3, [r7, #16]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3718      	adds	r7, #24
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007042:	b480      	push	{r7}
 8007044:	b085      	sub	sp, #20
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	881a      	ldrh	r2, [r3, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	b29b      	uxth	r3, r3
 800705a:	4413      	add	r3, r2
 800705c:	b29a      	uxth	r2, r3
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4413      	add	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800706e:	68fb      	ldr	r3, [r7, #12]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	3301      	adds	r3, #1
 8007092:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800709a:	8a3b      	ldrh	r3, [r7, #16]
 800709c:	021b      	lsls	r3, r3, #8
 800709e:	b21a      	sxth	r2, r3
 80070a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	b21b      	sxth	r3, r3
 80070a8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80070aa:	89fb      	ldrh	r3, [r7, #14]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	371c      	adds	r7, #28
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070ce:	2b40      	cmp	r3, #64	; 0x40
 80070d0:	d005      	beq.n	80070de <USBD_StdDevReq+0x26>
 80070d2:	2b40      	cmp	r3, #64	; 0x40
 80070d4:	d857      	bhi.n	8007186 <USBD_StdDevReq+0xce>
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00f      	beq.n	80070fa <USBD_StdDevReq+0x42>
 80070da:	2b20      	cmp	r3, #32
 80070dc:	d153      	bne.n	8007186 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	32ae      	adds	r2, #174	; 0xae
 80070e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	4798      	blx	r3
 80070f4:	4603      	mov	r3, r0
 80070f6:	73fb      	strb	r3, [r7, #15]
      break;
 80070f8:	e04a      	b.n	8007190 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	785b      	ldrb	r3, [r3, #1]
 80070fe:	2b09      	cmp	r3, #9
 8007100:	d83b      	bhi.n	800717a <USBD_StdDevReq+0xc2>
 8007102:	a201      	add	r2, pc, #4	; (adr r2, 8007108 <USBD_StdDevReq+0x50>)
 8007104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007108:	0800715d 	.word	0x0800715d
 800710c:	08007171 	.word	0x08007171
 8007110:	0800717b 	.word	0x0800717b
 8007114:	08007167 	.word	0x08007167
 8007118:	0800717b 	.word	0x0800717b
 800711c:	0800713b 	.word	0x0800713b
 8007120:	08007131 	.word	0x08007131
 8007124:	0800717b 	.word	0x0800717b
 8007128:	08007153 	.word	0x08007153
 800712c:	08007145 	.word	0x08007145
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fa3c 	bl	80075b0 <USBD_GetDescriptor>
          break;
 8007138:	e024      	b.n	8007184 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fba1 	bl	8007884 <USBD_SetAddress>
          break;
 8007142:	e01f      	b.n	8007184 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007144:	6839      	ldr	r1, [r7, #0]
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fbe0 	bl	800790c <USBD_SetConfig>
 800714c:	4603      	mov	r3, r0
 800714e:	73fb      	strb	r3, [r7, #15]
          break;
 8007150:	e018      	b.n	8007184 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fc83 	bl	8007a60 <USBD_GetConfig>
          break;
 800715a:	e013      	b.n	8007184 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fcb4 	bl	8007acc <USBD_GetStatus>
          break;
 8007164:	e00e      	b.n	8007184 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fce3 	bl	8007b34 <USBD_SetFeature>
          break;
 800716e:	e009      	b.n	8007184 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fd07 	bl	8007b86 <USBD_ClrFeature>
          break;
 8007178:	e004      	b.n	8007184 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800717a:	6839      	ldr	r1, [r7, #0]
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fd5e 	bl	8007c3e <USBD_CtlError>
          break;
 8007182:	bf00      	nop
      }
      break;
 8007184:	e004      	b.n	8007190 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007186:	6839      	ldr	r1, [r7, #0]
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 fd58 	bl	8007c3e <USBD_CtlError>
      break;
 800718e:	bf00      	nop
  }

  return ret;
 8007190:	7bfb      	ldrb	r3, [r7, #15]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop

0800719c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071b2:	2b40      	cmp	r3, #64	; 0x40
 80071b4:	d005      	beq.n	80071c2 <USBD_StdItfReq+0x26>
 80071b6:	2b40      	cmp	r3, #64	; 0x40
 80071b8:	d852      	bhi.n	8007260 <USBD_StdItfReq+0xc4>
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <USBD_StdItfReq+0x26>
 80071be:	2b20      	cmp	r3, #32
 80071c0:	d14e      	bne.n	8007260 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	3b01      	subs	r3, #1
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d840      	bhi.n	8007252 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	889b      	ldrh	r3, [r3, #4]
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d836      	bhi.n	8007248 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	889b      	ldrh	r3, [r3, #4]
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	4619      	mov	r1, r3
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7ff fed9 	bl	8006f9a <USBD_CoreFindIF>
 80071e8:	4603      	mov	r3, r0
 80071ea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071ec:	7bbb      	ldrb	r3, [r7, #14]
 80071ee:	2bff      	cmp	r3, #255	; 0xff
 80071f0:	d01d      	beq.n	800722e <USBD_StdItfReq+0x92>
 80071f2:	7bbb      	ldrb	r3, [r7, #14]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d11a      	bne.n	800722e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80071f8:	7bba      	ldrb	r2, [r7, #14]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	32ae      	adds	r2, #174	; 0xae
 80071fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00f      	beq.n	8007228 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007208:	7bba      	ldrb	r2, [r7, #14]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007210:	7bba      	ldrb	r2, [r7, #14]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	32ae      	adds	r2, #174	; 0xae
 8007216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	4798      	blx	r3
 8007222:	4603      	mov	r3, r0
 8007224:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007226:	e004      	b.n	8007232 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007228:	2303      	movs	r3, #3
 800722a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800722c:	e001      	b.n	8007232 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800722e:	2303      	movs	r3, #3
 8007230:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	88db      	ldrh	r3, [r3, #6]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d110      	bne.n	800725c <USBD_StdItfReq+0xc0>
 800723a:	7bfb      	ldrb	r3, [r7, #15]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10d      	bne.n	800725c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fdc7 	bl	8007dd4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007246:	e009      	b.n	800725c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fcf7 	bl	8007c3e <USBD_CtlError>
          break;
 8007250:	e004      	b.n	800725c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fcf2 	bl	8007c3e <USBD_CtlError>
          break;
 800725a:	e000      	b.n	800725e <USBD_StdItfReq+0xc2>
          break;
 800725c:	bf00      	nop
      }
      break;
 800725e:	e004      	b.n	800726a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fceb 	bl	8007c3e <USBD_CtlError>
      break;
 8007268:	bf00      	nop
  }

  return ret;
 800726a:	7bfb      	ldrb	r3, [r7, #15]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	889b      	ldrh	r3, [r3, #4]
 8007286:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007290:	2b40      	cmp	r3, #64	; 0x40
 8007292:	d007      	beq.n	80072a4 <USBD_StdEPReq+0x30>
 8007294:	2b40      	cmp	r3, #64	; 0x40
 8007296:	f200 817f 	bhi.w	8007598 <USBD_StdEPReq+0x324>
 800729a:	2b00      	cmp	r3, #0
 800729c:	d02a      	beq.n	80072f4 <USBD_StdEPReq+0x80>
 800729e:	2b20      	cmp	r3, #32
 80072a0:	f040 817a 	bne.w	8007598 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80072a4:	7bbb      	ldrb	r3, [r7, #14]
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7ff fe83 	bl	8006fb4 <USBD_CoreFindEP>
 80072ae:	4603      	mov	r3, r0
 80072b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072b2:	7b7b      	ldrb	r3, [r7, #13]
 80072b4:	2bff      	cmp	r3, #255	; 0xff
 80072b6:	f000 8174 	beq.w	80075a2 <USBD_StdEPReq+0x32e>
 80072ba:	7b7b      	ldrb	r3, [r7, #13]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f040 8170 	bne.w	80075a2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80072c2:	7b7a      	ldrb	r2, [r7, #13]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80072ca:	7b7a      	ldrb	r2, [r7, #13]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	32ae      	adds	r2, #174	; 0xae
 80072d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 8163 	beq.w	80075a2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80072dc:	7b7a      	ldrb	r2, [r7, #13]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	32ae      	adds	r2, #174	; 0xae
 80072e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	4798      	blx	r3
 80072ee:	4603      	mov	r3, r0
 80072f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80072f2:	e156      	b.n	80075a2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	785b      	ldrb	r3, [r3, #1]
 80072f8:	2b03      	cmp	r3, #3
 80072fa:	d008      	beq.n	800730e <USBD_StdEPReq+0x9a>
 80072fc:	2b03      	cmp	r3, #3
 80072fe:	f300 8145 	bgt.w	800758c <USBD_StdEPReq+0x318>
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 809b 	beq.w	800743e <USBD_StdEPReq+0x1ca>
 8007308:	2b01      	cmp	r3, #1
 800730a:	d03c      	beq.n	8007386 <USBD_StdEPReq+0x112>
 800730c:	e13e      	b.n	800758c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b02      	cmp	r3, #2
 8007318:	d002      	beq.n	8007320 <USBD_StdEPReq+0xac>
 800731a:	2b03      	cmp	r3, #3
 800731c:	d016      	beq.n	800734c <USBD_StdEPReq+0xd8>
 800731e:	e02c      	b.n	800737a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007320:	7bbb      	ldrb	r3, [r7, #14]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00d      	beq.n	8007342 <USBD_StdEPReq+0xce>
 8007326:	7bbb      	ldrb	r3, [r7, #14]
 8007328:	2b80      	cmp	r3, #128	; 0x80
 800732a:	d00a      	beq.n	8007342 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800732c:	7bbb      	ldrb	r3, [r7, #14]
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f001 f97b 	bl	800862c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007336:	2180      	movs	r1, #128	; 0x80
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f001 f977 	bl	800862c <USBD_LL_StallEP>
 800733e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007340:	e020      	b.n	8007384 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007342:	6839      	ldr	r1, [r7, #0]
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fc7a 	bl	8007c3e <USBD_CtlError>
              break;
 800734a:	e01b      	b.n	8007384 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	885b      	ldrh	r3, [r3, #2]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10e      	bne.n	8007372 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007354:	7bbb      	ldrb	r3, [r7, #14]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00b      	beq.n	8007372 <USBD_StdEPReq+0xfe>
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	2b80      	cmp	r3, #128	; 0x80
 800735e:	d008      	beq.n	8007372 <USBD_StdEPReq+0xfe>
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	88db      	ldrh	r3, [r3, #6]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d104      	bne.n	8007372 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007368:	7bbb      	ldrb	r3, [r7, #14]
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f001 f95d 	bl	800862c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fd2e 	bl	8007dd4 <USBD_CtlSendStatus>

              break;
 8007378:	e004      	b.n	8007384 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800737a:	6839      	ldr	r1, [r7, #0]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fc5e 	bl	8007c3e <USBD_CtlError>
              break;
 8007382:	bf00      	nop
          }
          break;
 8007384:	e107      	b.n	8007596 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b02      	cmp	r3, #2
 8007390:	d002      	beq.n	8007398 <USBD_StdEPReq+0x124>
 8007392:	2b03      	cmp	r3, #3
 8007394:	d016      	beq.n	80073c4 <USBD_StdEPReq+0x150>
 8007396:	e04b      	b.n	8007430 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007398:	7bbb      	ldrb	r3, [r7, #14]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00d      	beq.n	80073ba <USBD_StdEPReq+0x146>
 800739e:	7bbb      	ldrb	r3, [r7, #14]
 80073a0:	2b80      	cmp	r3, #128	; 0x80
 80073a2:	d00a      	beq.n	80073ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073a4:	7bbb      	ldrb	r3, [r7, #14]
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f001 f93f 	bl	800862c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073ae:	2180      	movs	r1, #128	; 0x80
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f001 f93b 	bl	800862c <USBD_LL_StallEP>
 80073b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073b8:	e040      	b.n	800743c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80073ba:	6839      	ldr	r1, [r7, #0]
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fc3e 	bl	8007c3e <USBD_CtlError>
              break;
 80073c2:	e03b      	b.n	800743c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	885b      	ldrh	r3, [r3, #2]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d136      	bne.n	800743a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80073cc:	7bbb      	ldrb	r3, [r7, #14]
 80073ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d004      	beq.n	80073e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80073d6:	7bbb      	ldrb	r3, [r7, #14]
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f001 f945 	bl	800866a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fcf7 	bl	8007dd4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80073e6:	7bbb      	ldrb	r3, [r7, #14]
 80073e8:	4619      	mov	r1, r3
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7ff fde2 	bl	8006fb4 <USBD_CoreFindEP>
 80073f0:	4603      	mov	r3, r0
 80073f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073f4:	7b7b      	ldrb	r3, [r7, #13]
 80073f6:	2bff      	cmp	r3, #255	; 0xff
 80073f8:	d01f      	beq.n	800743a <USBD_StdEPReq+0x1c6>
 80073fa:	7b7b      	ldrb	r3, [r7, #13]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d11c      	bne.n	800743a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007400:	7b7a      	ldrb	r2, [r7, #13]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007408:	7b7a      	ldrb	r2, [r7, #13]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	32ae      	adds	r2, #174	; 0xae
 800740e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d010      	beq.n	800743a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007418:	7b7a      	ldrb	r2, [r7, #13]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	32ae      	adds	r2, #174	; 0xae
 800741e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	4798      	blx	r3
 800742a:	4603      	mov	r3, r0
 800742c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800742e:	e004      	b.n	800743a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007430:	6839      	ldr	r1, [r7, #0]
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fc03 	bl	8007c3e <USBD_CtlError>
              break;
 8007438:	e000      	b.n	800743c <USBD_StdEPReq+0x1c8>
              break;
 800743a:	bf00      	nop
          }
          break;
 800743c:	e0ab      	b.n	8007596 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b02      	cmp	r3, #2
 8007448:	d002      	beq.n	8007450 <USBD_StdEPReq+0x1dc>
 800744a:	2b03      	cmp	r3, #3
 800744c:	d032      	beq.n	80074b4 <USBD_StdEPReq+0x240>
 800744e:	e097      	b.n	8007580 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007450:	7bbb      	ldrb	r3, [r7, #14]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d007      	beq.n	8007466 <USBD_StdEPReq+0x1f2>
 8007456:	7bbb      	ldrb	r3, [r7, #14]
 8007458:	2b80      	cmp	r3, #128	; 0x80
 800745a:	d004      	beq.n	8007466 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fbed 	bl	8007c3e <USBD_CtlError>
                break;
 8007464:	e091      	b.n	800758a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007466:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800746a:	2b00      	cmp	r3, #0
 800746c:	da0b      	bge.n	8007486 <USBD_StdEPReq+0x212>
 800746e:	7bbb      	ldrb	r3, [r7, #14]
 8007470:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007474:	4613      	mov	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	3310      	adds	r3, #16
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	4413      	add	r3, r2
 8007482:	3304      	adds	r3, #4
 8007484:	e00b      	b.n	800749e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007486:	7bbb      	ldrb	r3, [r7, #14]
 8007488:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800748c:	4613      	mov	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	4413      	add	r3, r2
 800749c:	3304      	adds	r3, #4
 800749e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2202      	movs	r2, #2
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fc37 	bl	8007d20 <USBD_CtlSendData>
              break;
 80074b2:	e06a      	b.n	800758a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	da11      	bge.n	80074e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074bc:	7bbb      	ldrb	r3, [r7, #14]
 80074be:	f003 020f 	and.w	r2, r3, #15
 80074c2:	6879      	ldr	r1, [r7, #4]
 80074c4:	4613      	mov	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4413      	add	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	440b      	add	r3, r1
 80074ce:	3324      	adds	r3, #36	; 0x24
 80074d0:	881b      	ldrh	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d117      	bne.n	8007506 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80074d6:	6839      	ldr	r1, [r7, #0]
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fbb0 	bl	8007c3e <USBD_CtlError>
                  break;
 80074de:	e054      	b.n	800758a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80074e0:	7bbb      	ldrb	r3, [r7, #14]
 80074e2:	f003 020f 	and.w	r2, r3, #15
 80074e6:	6879      	ldr	r1, [r7, #4]
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	440b      	add	r3, r1
 80074f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80074f6:	881b      	ldrh	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d104      	bne.n	8007506 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80074fc:	6839      	ldr	r1, [r7, #0]
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fb9d 	bl	8007c3e <USBD_CtlError>
                  break;
 8007504:	e041      	b.n	800758a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007506:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800750a:	2b00      	cmp	r3, #0
 800750c:	da0b      	bge.n	8007526 <USBD_StdEPReq+0x2b2>
 800750e:	7bbb      	ldrb	r3, [r7, #14]
 8007510:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007514:	4613      	mov	r3, r2
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	3310      	adds	r3, #16
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	4413      	add	r3, r2
 8007522:	3304      	adds	r3, #4
 8007524:	e00b      	b.n	800753e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007526:	7bbb      	ldrb	r3, [r7, #14]
 8007528:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800752c:	4613      	mov	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4413      	add	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	4413      	add	r3, r2
 800753c:	3304      	adds	r3, #4
 800753e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007540:	7bbb      	ldrb	r3, [r7, #14]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d002      	beq.n	800754c <USBD_StdEPReq+0x2d8>
 8007546:	7bbb      	ldrb	r3, [r7, #14]
 8007548:	2b80      	cmp	r3, #128	; 0x80
 800754a:	d103      	bne.n	8007554 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2200      	movs	r2, #0
 8007550:	601a      	str	r2, [r3, #0]
 8007552:	e00e      	b.n	8007572 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007554:	7bbb      	ldrb	r3, [r7, #14]
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 f8a5 	bl	80086a8 <USBD_LL_IsStallEP>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d003      	beq.n	800756c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	2201      	movs	r2, #1
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	e002      	b.n	8007572 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2200      	movs	r2, #0
 8007570:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	2202      	movs	r2, #2
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fbd1 	bl	8007d20 <USBD_CtlSendData>
              break;
 800757e:	e004      	b.n	800758a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fb5b 	bl	8007c3e <USBD_CtlError>
              break;
 8007588:	bf00      	nop
          }
          break;
 800758a:	e004      	b.n	8007596 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fb55 	bl	8007c3e <USBD_CtlError>
          break;
 8007594:	bf00      	nop
      }
      break;
 8007596:	e005      	b.n	80075a4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fb4f 	bl	8007c3e <USBD_CtlError>
      break;
 80075a0:	e000      	b.n	80075a4 <USBD_StdEPReq+0x330>
      break;
 80075a2:	bf00      	nop
  }

  return ret;
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
	...

080075b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075ba:	2300      	movs	r3, #0
 80075bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075be:	2300      	movs	r3, #0
 80075c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075c2:	2300      	movs	r3, #0
 80075c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	885b      	ldrh	r3, [r3, #2]
 80075ca:	0a1b      	lsrs	r3, r3, #8
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	3b01      	subs	r3, #1
 80075d0:	2b06      	cmp	r3, #6
 80075d2:	f200 8128 	bhi.w	8007826 <USBD_GetDescriptor+0x276>
 80075d6:	a201      	add	r2, pc, #4	; (adr r2, 80075dc <USBD_GetDescriptor+0x2c>)
 80075d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075dc:	080075f9 	.word	0x080075f9
 80075e0:	08007611 	.word	0x08007611
 80075e4:	08007651 	.word	0x08007651
 80075e8:	08007827 	.word	0x08007827
 80075ec:	08007827 	.word	0x08007827
 80075f0:	080077c7 	.word	0x080077c7
 80075f4:	080077f3 	.word	0x080077f3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	7c12      	ldrb	r2, [r2, #16]
 8007604:	f107 0108 	add.w	r1, r7, #8
 8007608:	4610      	mov	r0, r2
 800760a:	4798      	blx	r3
 800760c:	60f8      	str	r0, [r7, #12]
      break;
 800760e:	e112      	b.n	8007836 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	7c1b      	ldrb	r3, [r3, #16]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10d      	bne.n	8007634 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800761e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007620:	f107 0208 	add.w	r2, r7, #8
 8007624:	4610      	mov	r0, r2
 8007626:	4798      	blx	r3
 8007628:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	3301      	adds	r3, #1
 800762e:	2202      	movs	r2, #2
 8007630:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007632:	e100      	b.n	8007836 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763c:	f107 0208 	add.w	r2, r7, #8
 8007640:	4610      	mov	r0, r2
 8007642:	4798      	blx	r3
 8007644:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	3301      	adds	r3, #1
 800764a:	2202      	movs	r2, #2
 800764c:	701a      	strb	r2, [r3, #0]
      break;
 800764e:	e0f2      	b.n	8007836 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	885b      	ldrh	r3, [r3, #2]
 8007654:	b2db      	uxtb	r3, r3
 8007656:	2b05      	cmp	r3, #5
 8007658:	f200 80ac 	bhi.w	80077b4 <USBD_GetDescriptor+0x204>
 800765c:	a201      	add	r2, pc, #4	; (adr r2, 8007664 <USBD_GetDescriptor+0xb4>)
 800765e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007662:	bf00      	nop
 8007664:	0800767d 	.word	0x0800767d
 8007668:	080076b1 	.word	0x080076b1
 800766c:	080076e5 	.word	0x080076e5
 8007670:	08007719 	.word	0x08007719
 8007674:	0800774d 	.word	0x0800774d
 8007678:	08007781 	.word	0x08007781
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00b      	beq.n	80076a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	7c12      	ldrb	r2, [r2, #16]
 8007694:	f107 0108 	add.w	r1, r7, #8
 8007698:	4610      	mov	r0, r2
 800769a:	4798      	blx	r3
 800769c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800769e:	e091      	b.n	80077c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 facb 	bl	8007c3e <USBD_CtlError>
            err++;
 80076a8:	7afb      	ldrb	r3, [r7, #11]
 80076aa:	3301      	adds	r3, #1
 80076ac:	72fb      	strb	r3, [r7, #11]
          break;
 80076ae:	e089      	b.n	80077c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00b      	beq.n	80076d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	7c12      	ldrb	r2, [r2, #16]
 80076c8:	f107 0108 	add.w	r1, r7, #8
 80076cc:	4610      	mov	r0, r2
 80076ce:	4798      	blx	r3
 80076d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076d2:	e077      	b.n	80077c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fab1 	bl	8007c3e <USBD_CtlError>
            err++;
 80076dc:	7afb      	ldrb	r3, [r7, #11]
 80076de:	3301      	adds	r3, #1
 80076e0:	72fb      	strb	r3, [r7, #11]
          break;
 80076e2:	e06f      	b.n	80077c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00b      	beq.n	8007708 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	7c12      	ldrb	r2, [r2, #16]
 80076fc:	f107 0108 	add.w	r1, r7, #8
 8007700:	4610      	mov	r0, r2
 8007702:	4798      	blx	r3
 8007704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007706:	e05d      	b.n	80077c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fa97 	bl	8007c3e <USBD_CtlError>
            err++;
 8007710:	7afb      	ldrb	r3, [r7, #11]
 8007712:	3301      	adds	r3, #1
 8007714:	72fb      	strb	r3, [r7, #11]
          break;
 8007716:	e055      	b.n	80077c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00b      	beq.n	800773c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	7c12      	ldrb	r2, [r2, #16]
 8007730:	f107 0108 	add.w	r1, r7, #8
 8007734:	4610      	mov	r0, r2
 8007736:	4798      	blx	r3
 8007738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800773a:	e043      	b.n	80077c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fa7d 	bl	8007c3e <USBD_CtlError>
            err++;
 8007744:	7afb      	ldrb	r3, [r7, #11]
 8007746:	3301      	adds	r3, #1
 8007748:	72fb      	strb	r3, [r7, #11]
          break;
 800774a:	e03b      	b.n	80077c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007752:	695b      	ldr	r3, [r3, #20]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00b      	beq.n	8007770 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800775e:	695b      	ldr	r3, [r3, #20]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	7c12      	ldrb	r2, [r2, #16]
 8007764:	f107 0108 	add.w	r1, r7, #8
 8007768:	4610      	mov	r0, r2
 800776a:	4798      	blx	r3
 800776c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800776e:	e029      	b.n	80077c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fa63 	bl	8007c3e <USBD_CtlError>
            err++;
 8007778:	7afb      	ldrb	r3, [r7, #11]
 800777a:	3301      	adds	r3, #1
 800777c:	72fb      	strb	r3, [r7, #11]
          break;
 800777e:	e021      	b.n	80077c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00b      	beq.n	80077a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	7c12      	ldrb	r2, [r2, #16]
 8007798:	f107 0108 	add.w	r1, r7, #8
 800779c:	4610      	mov	r0, r2
 800779e:	4798      	blx	r3
 80077a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077a2:	e00f      	b.n	80077c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077a4:	6839      	ldr	r1, [r7, #0]
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fa49 	bl	8007c3e <USBD_CtlError>
            err++;
 80077ac:	7afb      	ldrb	r3, [r7, #11]
 80077ae:	3301      	adds	r3, #1
 80077b0:	72fb      	strb	r3, [r7, #11]
          break;
 80077b2:	e007      	b.n	80077c4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fa41 	bl	8007c3e <USBD_CtlError>
          err++;
 80077bc:	7afb      	ldrb	r3, [r7, #11]
 80077be:	3301      	adds	r3, #1
 80077c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80077c2:	bf00      	nop
      }
      break;
 80077c4:	e037      	b.n	8007836 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	7c1b      	ldrb	r3, [r3, #16]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d109      	bne.n	80077e2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d6:	f107 0208 	add.w	r2, r7, #8
 80077da:	4610      	mov	r0, r2
 80077dc:	4798      	blx	r3
 80077de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077e0:	e029      	b.n	8007836 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fa2a 	bl	8007c3e <USBD_CtlError>
        err++;
 80077ea:	7afb      	ldrb	r3, [r7, #11]
 80077ec:	3301      	adds	r3, #1
 80077ee:	72fb      	strb	r3, [r7, #11]
      break;
 80077f0:	e021      	b.n	8007836 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	7c1b      	ldrb	r3, [r3, #16]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10d      	bne.n	8007816 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007802:	f107 0208 	add.w	r2, r7, #8
 8007806:	4610      	mov	r0, r2
 8007808:	4798      	blx	r3
 800780a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	3301      	adds	r3, #1
 8007810:	2207      	movs	r2, #7
 8007812:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007814:	e00f      	b.n	8007836 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fa10 	bl	8007c3e <USBD_CtlError>
        err++;
 800781e:	7afb      	ldrb	r3, [r7, #11]
 8007820:	3301      	adds	r3, #1
 8007822:	72fb      	strb	r3, [r7, #11]
      break;
 8007824:	e007      	b.n	8007836 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fa08 	bl	8007c3e <USBD_CtlError>
      err++;
 800782e:	7afb      	ldrb	r3, [r7, #11]
 8007830:	3301      	adds	r3, #1
 8007832:	72fb      	strb	r3, [r7, #11]
      break;
 8007834:	bf00      	nop
  }

  if (err != 0U)
 8007836:	7afb      	ldrb	r3, [r7, #11]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d11e      	bne.n	800787a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	88db      	ldrh	r3, [r3, #6]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d016      	beq.n	8007872 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007844:	893b      	ldrh	r3, [r7, #8]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00e      	beq.n	8007868 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	88da      	ldrh	r2, [r3, #6]
 800784e:	893b      	ldrh	r3, [r7, #8]
 8007850:	4293      	cmp	r3, r2
 8007852:	bf28      	it	cs
 8007854:	4613      	movcs	r3, r2
 8007856:	b29b      	uxth	r3, r3
 8007858:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800785a:	893b      	ldrh	r3, [r7, #8]
 800785c:	461a      	mov	r2, r3
 800785e:	68f9      	ldr	r1, [r7, #12]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fa5d 	bl	8007d20 <USBD_CtlSendData>
 8007866:	e009      	b.n	800787c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f9e7 	bl	8007c3e <USBD_CtlError>
 8007870:	e004      	b.n	800787c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 faae 	bl	8007dd4 <USBD_CtlSendStatus>
 8007878:	e000      	b.n	800787c <USBD_GetDescriptor+0x2cc>
    return;
 800787a:	bf00      	nop
  }
}
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop

08007884 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	889b      	ldrh	r3, [r3, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d131      	bne.n	80078fa <USBD_SetAddress+0x76>
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	88db      	ldrh	r3, [r3, #6]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d12d      	bne.n	80078fa <USBD_SetAddress+0x76>
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	885b      	ldrh	r3, [r3, #2]
 80078a2:	2b7f      	cmp	r3, #127	; 0x7f
 80078a4:	d829      	bhi.n	80078fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	885b      	ldrh	r3, [r3, #2]
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	d104      	bne.n	80078c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f9bc 	bl	8007c3e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078c6:	e01d      	b.n	8007904 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	7bfa      	ldrb	r2, [r7, #15]
 80078cc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 ff13 	bl	8008700 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fa7a 	bl	8007dd4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d004      	beq.n	80078f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2202      	movs	r2, #2
 80078ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ee:	e009      	b.n	8007904 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f8:	e004      	b.n	8007904 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f99e 	bl	8007c3e <USBD_CtlError>
  }
}
 8007902:	bf00      	nop
 8007904:	bf00      	nop
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007916:	2300      	movs	r3, #0
 8007918:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	885b      	ldrh	r3, [r3, #2]
 800791e:	b2da      	uxtb	r2, r3
 8007920:	4b4e      	ldr	r3, [pc, #312]	; (8007a5c <USBD_SetConfig+0x150>)
 8007922:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007924:	4b4d      	ldr	r3, [pc, #308]	; (8007a5c <USBD_SetConfig+0x150>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d905      	bls.n	8007938 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f985 	bl	8007c3e <USBD_CtlError>
    return USBD_FAIL;
 8007934:	2303      	movs	r3, #3
 8007936:	e08c      	b.n	8007a52 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b02      	cmp	r3, #2
 8007942:	d002      	beq.n	800794a <USBD_SetConfig+0x3e>
 8007944:	2b03      	cmp	r3, #3
 8007946:	d029      	beq.n	800799c <USBD_SetConfig+0x90>
 8007948:	e075      	b.n	8007a36 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800794a:	4b44      	ldr	r3, [pc, #272]	; (8007a5c <USBD_SetConfig+0x150>)
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d020      	beq.n	8007994 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007952:	4b42      	ldr	r3, [pc, #264]	; (8007a5c <USBD_SetConfig+0x150>)
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800795c:	4b3f      	ldr	r3, [pc, #252]	; (8007a5c <USBD_SetConfig+0x150>)
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	4619      	mov	r1, r3
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7fe ffe7 	bl	8006936 <USBD_SetClassConfig>
 8007968:	4603      	mov	r3, r0
 800796a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800796c:	7bfb      	ldrb	r3, [r7, #15]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d008      	beq.n	8007984 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f962 	bl	8007c3e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2202      	movs	r2, #2
 800797e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007982:	e065      	b.n	8007a50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fa25 	bl	8007dd4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2203      	movs	r2, #3
 800798e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007992:	e05d      	b.n	8007a50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fa1d 	bl	8007dd4 <USBD_CtlSendStatus>
      break;
 800799a:	e059      	b.n	8007a50 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800799c:	4b2f      	ldr	r3, [pc, #188]	; (8007a5c <USBD_SetConfig+0x150>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d112      	bne.n	80079ca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2202      	movs	r2, #2
 80079a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80079ac:	4b2b      	ldr	r3, [pc, #172]	; (8007a5c <USBD_SetConfig+0x150>)
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	461a      	mov	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80079b6:	4b29      	ldr	r3, [pc, #164]	; (8007a5c <USBD_SetConfig+0x150>)
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	4619      	mov	r1, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7fe ffd6 	bl	800696e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fa06 	bl	8007dd4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80079c8:	e042      	b.n	8007a50 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80079ca:	4b24      	ldr	r3, [pc, #144]	; (8007a5c <USBD_SetConfig+0x150>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d02a      	beq.n	8007a2e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f7fe ffc4 	bl	800696e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80079e6:	4b1d      	ldr	r3, [pc, #116]	; (8007a5c <USBD_SetConfig+0x150>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	461a      	mov	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079f0:	4b1a      	ldr	r3, [pc, #104]	; (8007a5c <USBD_SetConfig+0x150>)
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7fe ff9d 	bl	8006936 <USBD_SetClassConfig>
 80079fc:	4603      	mov	r3, r0
 80079fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00f      	beq.n	8007a26 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f918 	bl	8007c3e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7fe ffa9 	bl	800696e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2202      	movs	r2, #2
 8007a20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a24:	e014      	b.n	8007a50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f9d4 	bl	8007dd4 <USBD_CtlSendStatus>
      break;
 8007a2c:	e010      	b.n	8007a50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f9d0 	bl	8007dd4 <USBD_CtlSendStatus>
      break;
 8007a34:	e00c      	b.n	8007a50 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f900 	bl	8007c3e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a3e:	4b07      	ldr	r3, [pc, #28]	; (8007a5c <USBD_SetConfig+0x150>)
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	4619      	mov	r1, r3
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f7fe ff92 	bl	800696e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a4e:	bf00      	nop
  }

  return ret;
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	20000274 	.word	0x20000274

08007a60 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	88db      	ldrh	r3, [r3, #6]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d004      	beq.n	8007a7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f8e2 	bl	8007c3e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a7a:	e023      	b.n	8007ac4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	dc02      	bgt.n	8007a8e <USBD_GetConfig+0x2e>
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	dc03      	bgt.n	8007a94 <USBD_GetConfig+0x34>
 8007a8c:	e015      	b.n	8007aba <USBD_GetConfig+0x5a>
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d00b      	beq.n	8007aaa <USBD_GetConfig+0x4a>
 8007a92:	e012      	b.n	8007aba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	3308      	adds	r3, #8
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f93c 	bl	8007d20 <USBD_CtlSendData>
        break;
 8007aa8:	e00c      	b.n	8007ac4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	3304      	adds	r3, #4
 8007aae:	2201      	movs	r2, #1
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f934 	bl	8007d20 <USBD_CtlSendData>
        break;
 8007ab8:	e004      	b.n	8007ac4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f8be 	bl	8007c3e <USBD_CtlError>
        break;
 8007ac2:	bf00      	nop
}
 8007ac4:	bf00      	nop
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d81e      	bhi.n	8007b22 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	88db      	ldrh	r3, [r3, #6]
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d004      	beq.n	8007af6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007aec:	6839      	ldr	r1, [r7, #0]
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f8a5 	bl	8007c3e <USBD_CtlError>
        break;
 8007af4:	e01a      	b.n	8007b2c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d005      	beq.n	8007b12 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	f043 0202 	orr.w	r2, r3, #2
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	330c      	adds	r3, #12
 8007b16:	2202      	movs	r2, #2
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f900 	bl	8007d20 <USBD_CtlSendData>
      break;
 8007b20:	e004      	b.n	8007b2c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f88a 	bl	8007c3e <USBD_CtlError>
      break;
 8007b2a:	bf00      	nop
  }
}
 8007b2c:	bf00      	nop
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	885b      	ldrh	r3, [r3, #2]
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d107      	bne.n	8007b56 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f940 	bl	8007dd4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007b54:	e013      	b.n	8007b7e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	885b      	ldrh	r3, [r3, #2]
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d10b      	bne.n	8007b76 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	889b      	ldrh	r3, [r3, #4]
 8007b62:	0a1b      	lsrs	r3, r3, #8
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f930 	bl	8007dd4 <USBD_CtlSendStatus>
}
 8007b74:	e003      	b.n	8007b7e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f860 	bl	8007c3e <USBD_CtlError>
}
 8007b7e:	bf00      	nop
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b082      	sub	sp, #8
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
 8007b8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d80b      	bhi.n	8007bb6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	885b      	ldrh	r3, [r3, #2]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d10c      	bne.n	8007bc0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f910 	bl	8007dd4 <USBD_CtlSendStatus>
      }
      break;
 8007bb4:	e004      	b.n	8007bc0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007bb6:	6839      	ldr	r1, [r7, #0]
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f840 	bl	8007c3e <USBD_CtlError>
      break;
 8007bbe:	e000      	b.n	8007bc2 <USBD_ClrFeature+0x3c>
      break;
 8007bc0:	bf00      	nop
  }
}
 8007bc2:	bf00      	nop
 8007bc4:	3708      	adds	r7, #8
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b084      	sub	sp, #16
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	781a      	ldrb	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	3301      	adds	r3, #1
 8007be4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	781a      	ldrb	r2, [r3, #0]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f7ff fa41 	bl	800707c <SWAPBYTE>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	3301      	adds	r3, #1
 8007c06:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f7ff fa34 	bl	800707c <SWAPBYTE>
 8007c14:	4603      	mov	r3, r0
 8007c16:	461a      	mov	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	3301      	adds	r3, #1
 8007c26:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f7ff fa27 	bl	800707c <SWAPBYTE>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	461a      	mov	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	80da      	strh	r2, [r3, #6]
}
 8007c36:	bf00      	nop
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b082      	sub	sp, #8
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c48:	2180      	movs	r1, #128	; 0x80
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fcee 	bl	800862c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c50:	2100      	movs	r1, #0
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fcea 	bl	800862c <USBD_LL_StallEP>
}
 8007c58:	bf00      	nop
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d036      	beq.n	8007ce4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007c7a:	6938      	ldr	r0, [r7, #16]
 8007c7c:	f000 f836 	bl	8007cec <USBD_GetLen>
 8007c80:	4603      	mov	r3, r0
 8007c82:	3301      	adds	r3, #1
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	005b      	lsls	r3, r3, #1
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007c8e:	7dfb      	ldrb	r3, [r7, #23]
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	4413      	add	r3, r2
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	7812      	ldrb	r2, [r2, #0]
 8007c98:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c9a:	7dfb      	ldrb	r3, [r7, #23]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	2203      	movs	r2, #3
 8007ca8:	701a      	strb	r2, [r3, #0]
  idx++;
 8007caa:	7dfb      	ldrb	r3, [r7, #23]
 8007cac:	3301      	adds	r3, #1
 8007cae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007cb0:	e013      	b.n	8007cda <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007cb2:	7dfb      	ldrb	r3, [r7, #23]
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	7812      	ldrb	r2, [r2, #0]
 8007cbc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	613b      	str	r3, [r7, #16]
    idx++;
 8007cc4:	7dfb      	ldrb	r3, [r7, #23]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007cca:	7dfb      	ldrb	r3, [r7, #23]
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	4413      	add	r3, r2
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	701a      	strb	r2, [r3, #0]
    idx++;
 8007cd4:	7dfb      	ldrb	r3, [r7, #23]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1e7      	bne.n	8007cb2 <USBD_GetString+0x52>
 8007ce2:	e000      	b.n	8007ce6 <USBD_GetString+0x86>
    return;
 8007ce4:	bf00      	nop
  }
}
 8007ce6:	3718      	adds	r7, #24
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007cfc:	e005      	b.n	8007d0a <USBD_GetLen+0x1e>
  {
    len++;
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
 8007d00:	3301      	adds	r3, #1
 8007d02:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	3301      	adds	r3, #1
 8007d08:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1f5      	bne.n	8007cfe <USBD_GetLen+0x12>
  }

  return len;
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	2100      	movs	r1, #0
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f000 fcf9 	bl	800873e <USBD_LL_Transmit>

  return USBD_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b084      	sub	sp, #16
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	60f8      	str	r0, [r7, #12]
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	2100      	movs	r1, #0
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f000 fce8 	bl	800873e <USBD_LL_Transmit>

  return USBD_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2203      	movs	r2, #3
 8007d88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	2100      	movs	r1, #0
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f000 fcec 	bl	8008780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b084      	sub	sp, #16
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	60f8      	str	r0, [r7, #12]
 8007dba:	60b9      	str	r1, [r7, #8]
 8007dbc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 fcdb 	bl	8008780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2204      	movs	r2, #4
 8007de0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007de4:	2300      	movs	r3, #0
 8007de6:	2200      	movs	r2, #0
 8007de8:	2100      	movs	r1, #0
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fca7 	bl	800873e <USBD_LL_Transmit>

  return USBD_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b082      	sub	sp, #8
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2205      	movs	r2, #5
 8007e06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	2100      	movs	r1, #0
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 fcb5 	bl	8008780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e24:	2200      	movs	r2, #0
 8007e26:	4912      	ldr	r1, [pc, #72]	; (8007e70 <MX_USB_DEVICE_Init+0x50>)
 8007e28:	4812      	ldr	r0, [pc, #72]	; (8007e74 <MX_USB_DEVICE_Init+0x54>)
 8007e2a:	f7fe fd07 	bl	800683c <USBD_Init>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e34:	f7f8 fee8 	bl	8000c08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e38:	490f      	ldr	r1, [pc, #60]	; (8007e78 <MX_USB_DEVICE_Init+0x58>)
 8007e3a:	480e      	ldr	r0, [pc, #56]	; (8007e74 <MX_USB_DEVICE_Init+0x54>)
 8007e3c:	f7fe fd2e 	bl	800689c <USBD_RegisterClass>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e46:	f7f8 fedf 	bl	8000c08 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007e4a:	490c      	ldr	r1, [pc, #48]	; (8007e7c <MX_USB_DEVICE_Init+0x5c>)
 8007e4c:	4809      	ldr	r0, [pc, #36]	; (8007e74 <MX_USB_DEVICE_Init+0x54>)
 8007e4e:	f7fe fc1f 	bl	8006690 <USBD_CDC_RegisterInterface>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d001      	beq.n	8007e5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e58:	f7f8 fed6 	bl	8000c08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e5c:	4805      	ldr	r0, [pc, #20]	; (8007e74 <MX_USB_DEVICE_Init+0x54>)
 8007e5e:	f7fe fd53 	bl	8006908 <USBD_Start>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d001      	beq.n	8007e6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e68:	f7f8 fece 	bl	8000c08 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e6c:	bf00      	nop
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	200000ac 	.word	0x200000ac
 8007e74:	20000278 	.word	0x20000278
 8007e78:	20000018 	.word	0x20000018
 8007e7c:	20000098 	.word	0x20000098

08007e80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e84:	2200      	movs	r2, #0
 8007e86:	4905      	ldr	r1, [pc, #20]	; (8007e9c <CDC_Init_FS+0x1c>)
 8007e88:	4805      	ldr	r0, [pc, #20]	; (8007ea0 <CDC_Init_FS+0x20>)
 8007e8a:	f7fe fc1b 	bl	80066c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e8e:	4905      	ldr	r1, [pc, #20]	; (8007ea4 <CDC_Init_FS+0x24>)
 8007e90:	4803      	ldr	r0, [pc, #12]	; (8007ea0 <CDC_Init_FS+0x20>)
 8007e92:	f7fe fc39 	bl	8006708 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e96:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	20000d54 	.word	0x20000d54
 8007ea0:	20000278 	.word	0x20000278
 8007ea4:	20000554 	.word	0x20000554

08007ea8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007eac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	6039      	str	r1, [r7, #0]
 8007ec2:	71fb      	strb	r3, [r7, #7]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007ec8:	79fb      	ldrb	r3, [r7, #7]
 8007eca:	2b23      	cmp	r3, #35	; 0x23
 8007ecc:	d84a      	bhi.n	8007f64 <CDC_Control_FS+0xac>
 8007ece:	a201      	add	r2, pc, #4	; (adr r2, 8007ed4 <CDC_Control_FS+0x1c>)
 8007ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed4:	08007f65 	.word	0x08007f65
 8007ed8:	08007f65 	.word	0x08007f65
 8007edc:	08007f65 	.word	0x08007f65
 8007ee0:	08007f65 	.word	0x08007f65
 8007ee4:	08007f65 	.word	0x08007f65
 8007ee8:	08007f65 	.word	0x08007f65
 8007eec:	08007f65 	.word	0x08007f65
 8007ef0:	08007f65 	.word	0x08007f65
 8007ef4:	08007f65 	.word	0x08007f65
 8007ef8:	08007f65 	.word	0x08007f65
 8007efc:	08007f65 	.word	0x08007f65
 8007f00:	08007f65 	.word	0x08007f65
 8007f04:	08007f65 	.word	0x08007f65
 8007f08:	08007f65 	.word	0x08007f65
 8007f0c:	08007f65 	.word	0x08007f65
 8007f10:	08007f65 	.word	0x08007f65
 8007f14:	08007f65 	.word	0x08007f65
 8007f18:	08007f65 	.word	0x08007f65
 8007f1c:	08007f65 	.word	0x08007f65
 8007f20:	08007f65 	.word	0x08007f65
 8007f24:	08007f65 	.word	0x08007f65
 8007f28:	08007f65 	.word	0x08007f65
 8007f2c:	08007f65 	.word	0x08007f65
 8007f30:	08007f65 	.word	0x08007f65
 8007f34:	08007f65 	.word	0x08007f65
 8007f38:	08007f65 	.word	0x08007f65
 8007f3c:	08007f65 	.word	0x08007f65
 8007f40:	08007f65 	.word	0x08007f65
 8007f44:	08007f65 	.word	0x08007f65
 8007f48:	08007f65 	.word	0x08007f65
 8007f4c:	08007f65 	.word	0x08007f65
 8007f50:	08007f65 	.word	0x08007f65
 8007f54:	08007f65 	.word	0x08007f65
 8007f58:	08007f65 	.word	0x08007f65
 8007f5c:	08007f65 	.word	0x08007f65
 8007f60:	08007f65 	.word	0x08007f65
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f64:	bf00      	nop
  }

  return (USBD_OK);
 8007f66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f7e:	6879      	ldr	r1, [r7, #4]
 8007f80:	4805      	ldr	r0, [pc, #20]	; (8007f98 <CDC_Receive_FS+0x24>)
 8007f82:	f7fe fbc1 	bl	8006708 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f86:	4804      	ldr	r0, [pc, #16]	; (8007f98 <CDC_Receive_FS+0x24>)
 8007f88:	f7fe fc22 	bl	80067d0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007f8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	20000278 	.word	0x20000278

08007f9c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007fac:	4b0d      	ldr	r3, [pc, #52]	; (8007fe4 <CDC_Transmit_FS+0x48>)
 8007fae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fb2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d001      	beq.n	8007fc2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e00b      	b.n	8007fda <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007fc2:	887b      	ldrh	r3, [r7, #2]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	6879      	ldr	r1, [r7, #4]
 8007fc8:	4806      	ldr	r0, [pc, #24]	; (8007fe4 <CDC_Transmit_FS+0x48>)
 8007fca:	f7fe fb7b 	bl	80066c4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007fce:	4805      	ldr	r0, [pc, #20]	; (8007fe4 <CDC_Transmit_FS+0x48>)
 8007fd0:	f7fe fbb8 	bl	8006744 <USBD_CDC_TransmitPacket>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	20000278 	.word	0x20000278

08007fe8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007ffa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	371c      	adds	r7, #28
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
	...

0800800c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	4603      	mov	r3, r0
 8008014:	6039      	str	r1, [r7, #0]
 8008016:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	2212      	movs	r2, #18
 800801c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800801e:	4b03      	ldr	r3, [pc, #12]	; (800802c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008020:	4618      	mov	r0, r3
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	200000c8 	.word	0x200000c8

08008030 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	4603      	mov	r3, r0
 8008038:	6039      	str	r1, [r7, #0]
 800803a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	2204      	movs	r2, #4
 8008040:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008042:	4b03      	ldr	r3, [pc, #12]	; (8008050 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008044:	4618      	mov	r0, r3
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	200000dc 	.word	0x200000dc

08008054 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	4603      	mov	r3, r0
 800805c:	6039      	str	r1, [r7, #0]
 800805e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008060:	79fb      	ldrb	r3, [r7, #7]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d105      	bne.n	8008072 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	4907      	ldr	r1, [pc, #28]	; (8008088 <USBD_FS_ProductStrDescriptor+0x34>)
 800806a:	4808      	ldr	r0, [pc, #32]	; (800808c <USBD_FS_ProductStrDescriptor+0x38>)
 800806c:	f7ff fdf8 	bl	8007c60 <USBD_GetString>
 8008070:	e004      	b.n	800807c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	4904      	ldr	r1, [pc, #16]	; (8008088 <USBD_FS_ProductStrDescriptor+0x34>)
 8008076:	4805      	ldr	r0, [pc, #20]	; (800808c <USBD_FS_ProductStrDescriptor+0x38>)
 8008078:	f7ff fdf2 	bl	8007c60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800807c:	4b02      	ldr	r3, [pc, #8]	; (8008088 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800807e:	4618      	mov	r0, r3
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	20001554 	.word	0x20001554
 800808c:	08009728 	.word	0x08009728

08008090 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	4603      	mov	r3, r0
 8008098:	6039      	str	r1, [r7, #0]
 800809a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	4904      	ldr	r1, [pc, #16]	; (80080b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80080a0:	4804      	ldr	r0, [pc, #16]	; (80080b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80080a2:	f7ff fddd 	bl	8007c60 <USBD_GetString>
  return USBD_StrDesc;
 80080a6:	4b02      	ldr	r3, [pc, #8]	; (80080b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	20001554 	.word	0x20001554
 80080b4:	08009740 	.word	0x08009740

080080b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	4603      	mov	r3, r0
 80080c0:	6039      	str	r1, [r7, #0]
 80080c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	221a      	movs	r2, #26
 80080c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80080ca:	f000 f843 	bl	8008154 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80080ce:	4b02      	ldr	r3, [pc, #8]	; (80080d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	200000e0 	.word	0x200000e0

080080dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	4603      	mov	r3, r0
 80080e4:	6039      	str	r1, [r7, #0]
 80080e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80080e8:	79fb      	ldrb	r3, [r7, #7]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d105      	bne.n	80080fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	4907      	ldr	r1, [pc, #28]	; (8008110 <USBD_FS_ConfigStrDescriptor+0x34>)
 80080f2:	4808      	ldr	r0, [pc, #32]	; (8008114 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080f4:	f7ff fdb4 	bl	8007c60 <USBD_GetString>
 80080f8:	e004      	b.n	8008104 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080fa:	683a      	ldr	r2, [r7, #0]
 80080fc:	4904      	ldr	r1, [pc, #16]	; (8008110 <USBD_FS_ConfigStrDescriptor+0x34>)
 80080fe:	4805      	ldr	r0, [pc, #20]	; (8008114 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008100:	f7ff fdae 	bl	8007c60 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008104:	4b02      	ldr	r3, [pc, #8]	; (8008110 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008106:	4618      	mov	r0, r3
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20001554 	.word	0x20001554
 8008114:	08009754 	.word	0x08009754

08008118 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	4603      	mov	r3, r0
 8008120:	6039      	str	r1, [r7, #0]
 8008122:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008124:	79fb      	ldrb	r3, [r7, #7]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d105      	bne.n	8008136 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	4907      	ldr	r1, [pc, #28]	; (800814c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800812e:	4808      	ldr	r0, [pc, #32]	; (8008150 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008130:	f7ff fd96 	bl	8007c60 <USBD_GetString>
 8008134:	e004      	b.n	8008140 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008136:	683a      	ldr	r2, [r7, #0]
 8008138:	4904      	ldr	r1, [pc, #16]	; (800814c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800813a:	4805      	ldr	r0, [pc, #20]	; (8008150 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800813c:	f7ff fd90 	bl	8007c60 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008140:	4b02      	ldr	r3, [pc, #8]	; (800814c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008142:	4618      	mov	r0, r3
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	20001554 	.word	0x20001554
 8008150:	08009760 	.word	0x08009760

08008154 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800815a:	4b0f      	ldr	r3, [pc, #60]	; (8008198 <Get_SerialNum+0x44>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008160:	4b0e      	ldr	r3, [pc, #56]	; (800819c <Get_SerialNum+0x48>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008166:	4b0e      	ldr	r3, [pc, #56]	; (80081a0 <Get_SerialNum+0x4c>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4413      	add	r3, r2
 8008172:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d009      	beq.n	800818e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800817a:	2208      	movs	r2, #8
 800817c:	4909      	ldr	r1, [pc, #36]	; (80081a4 <Get_SerialNum+0x50>)
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 f814 	bl	80081ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008184:	2204      	movs	r2, #4
 8008186:	4908      	ldr	r1, [pc, #32]	; (80081a8 <Get_SerialNum+0x54>)
 8008188:	68b8      	ldr	r0, [r7, #8]
 800818a:	f000 f80f 	bl	80081ac <IntToUnicode>
  }
}
 800818e:	bf00      	nop
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	1fff7a10 	.word	0x1fff7a10
 800819c:	1fff7a14 	.word	0x1fff7a14
 80081a0:	1fff7a18 	.word	0x1fff7a18
 80081a4:	200000e2 	.word	0x200000e2
 80081a8:	200000f2 	.word	0x200000f2

080081ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b087      	sub	sp, #28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	4613      	mov	r3, r2
 80081b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80081ba:	2300      	movs	r3, #0
 80081bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80081be:	2300      	movs	r3, #0
 80081c0:	75fb      	strb	r3, [r7, #23]
 80081c2:	e027      	b.n	8008214 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	0f1b      	lsrs	r3, r3, #28
 80081c8:	2b09      	cmp	r3, #9
 80081ca:	d80b      	bhi.n	80081e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	0f1b      	lsrs	r3, r3, #28
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	7dfb      	ldrb	r3, [r7, #23]
 80081d4:	005b      	lsls	r3, r3, #1
 80081d6:	4619      	mov	r1, r3
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	440b      	add	r3, r1
 80081dc:	3230      	adds	r2, #48	; 0x30
 80081de:	b2d2      	uxtb	r2, r2
 80081e0:	701a      	strb	r2, [r3, #0]
 80081e2:	e00a      	b.n	80081fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	0f1b      	lsrs	r3, r3, #28
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	4619      	mov	r1, r3
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	440b      	add	r3, r1
 80081f4:	3237      	adds	r2, #55	; 0x37
 80081f6:	b2d2      	uxtb	r2, r2
 80081f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	011b      	lsls	r3, r3, #4
 80081fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008200:	7dfb      	ldrb	r3, [r7, #23]
 8008202:	005b      	lsls	r3, r3, #1
 8008204:	3301      	adds	r3, #1
 8008206:	68ba      	ldr	r2, [r7, #8]
 8008208:	4413      	add	r3, r2
 800820a:	2200      	movs	r2, #0
 800820c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800820e:	7dfb      	ldrb	r3, [r7, #23]
 8008210:	3301      	adds	r3, #1
 8008212:	75fb      	strb	r3, [r7, #23]
 8008214:	7dfa      	ldrb	r2, [r7, #23]
 8008216:	79fb      	ldrb	r3, [r7, #7]
 8008218:	429a      	cmp	r2, r3
 800821a:	d3d3      	bcc.n	80081c4 <IntToUnicode+0x18>
  }
}
 800821c:	bf00      	nop
 800821e:	bf00      	nop
 8008220:	371c      	adds	r7, #28
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
	...

0800822c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b08a      	sub	sp, #40	; 0x28
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008234:	f107 0314 	add.w	r3, r7, #20
 8008238:	2200      	movs	r2, #0
 800823a:	601a      	str	r2, [r3, #0]
 800823c:	605a      	str	r2, [r3, #4]
 800823e:	609a      	str	r2, [r3, #8]
 8008240:	60da      	str	r2, [r3, #12]
 8008242:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800824c:	d147      	bne.n	80082de <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800824e:	2300      	movs	r3, #0
 8008250:	613b      	str	r3, [r7, #16]
 8008252:	4b25      	ldr	r3, [pc, #148]	; (80082e8 <HAL_PCD_MspInit+0xbc>)
 8008254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008256:	4a24      	ldr	r2, [pc, #144]	; (80082e8 <HAL_PCD_MspInit+0xbc>)
 8008258:	f043 0301 	orr.w	r3, r3, #1
 800825c:	6313      	str	r3, [r2, #48]	; 0x30
 800825e:	4b22      	ldr	r3, [pc, #136]	; (80082e8 <HAL_PCD_MspInit+0xbc>)
 8008260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	613b      	str	r3, [r7, #16]
 8008268:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800826a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800826e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008270:	2300      	movs	r3, #0
 8008272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008274:	2300      	movs	r3, #0
 8008276:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008278:	f107 0314 	add.w	r3, r7, #20
 800827c:	4619      	mov	r1, r3
 800827e:	481b      	ldr	r0, [pc, #108]	; (80082ec <HAL_PCD_MspInit+0xc0>)
 8008280:	f7f9 f922 	bl	80014c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008284:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800828a:	2302      	movs	r3, #2
 800828c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800828e:	2300      	movs	r3, #0
 8008290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008292:	2300      	movs	r3, #0
 8008294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008296:	230a      	movs	r3, #10
 8008298:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800829a:	f107 0314 	add.w	r3, r7, #20
 800829e:	4619      	mov	r1, r3
 80082a0:	4812      	ldr	r0, [pc, #72]	; (80082ec <HAL_PCD_MspInit+0xc0>)
 80082a2:	f7f9 f911 	bl	80014c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80082a6:	4b10      	ldr	r3, [pc, #64]	; (80082e8 <HAL_PCD_MspInit+0xbc>)
 80082a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082aa:	4a0f      	ldr	r2, [pc, #60]	; (80082e8 <HAL_PCD_MspInit+0xbc>)
 80082ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082b0:	6353      	str	r3, [r2, #52]	; 0x34
 80082b2:	2300      	movs	r3, #0
 80082b4:	60fb      	str	r3, [r7, #12]
 80082b6:	4b0c      	ldr	r3, [pc, #48]	; (80082e8 <HAL_PCD_MspInit+0xbc>)
 80082b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ba:	4a0b      	ldr	r2, [pc, #44]	; (80082e8 <HAL_PCD_MspInit+0xbc>)
 80082bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082c0:	6453      	str	r3, [r2, #68]	; 0x44
 80082c2:	4b09      	ldr	r3, [pc, #36]	; (80082e8 <HAL_PCD_MspInit+0xbc>)
 80082c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082ca:	60fb      	str	r3, [r7, #12]
 80082cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80082ce:	2200      	movs	r2, #0
 80082d0:	2100      	movs	r1, #0
 80082d2:	2043      	movs	r0, #67	; 0x43
 80082d4:	f7f9 f8c1 	bl	800145a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80082d8:	2043      	movs	r0, #67	; 0x43
 80082da:	f7f9 f8da 	bl	8001492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80082de:	bf00      	nop
 80082e0:	3728      	adds	r7, #40	; 0x28
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	40023800 	.word	0x40023800
 80082ec:	40020000 	.word	0x40020000

080082f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008304:	4619      	mov	r1, r3
 8008306:	4610      	mov	r0, r2
 8008308:	f7fe fb4b 	bl	80069a2 <USBD_LL_SetupStage>
}
 800830c:	bf00      	nop
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	460b      	mov	r3, r1
 800831e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008326:	78fa      	ldrb	r2, [r7, #3]
 8008328:	6879      	ldr	r1, [r7, #4]
 800832a:	4613      	mov	r3, r2
 800832c:	00db      	lsls	r3, r3, #3
 800832e:	4413      	add	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	440b      	add	r3, r1
 8008334:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	78fb      	ldrb	r3, [r7, #3]
 800833c:	4619      	mov	r1, r3
 800833e:	f7fe fb85 	bl	8006a4c <USBD_LL_DataOutStage>
}
 8008342:	bf00      	nop
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b082      	sub	sp, #8
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	460b      	mov	r3, r1
 8008354:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800835c:	78fa      	ldrb	r2, [r7, #3]
 800835e:	6879      	ldr	r1, [r7, #4]
 8008360:	4613      	mov	r3, r2
 8008362:	00db      	lsls	r3, r3, #3
 8008364:	4413      	add	r3, r2
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	440b      	add	r3, r1
 800836a:	334c      	adds	r3, #76	; 0x4c
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	78fb      	ldrb	r3, [r7, #3]
 8008370:	4619      	mov	r1, r3
 8008372:	f7fe fc1e 	bl	8006bb2 <USBD_LL_DataInStage>
}
 8008376:	bf00      	nop
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b082      	sub	sp, #8
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800838c:	4618      	mov	r0, r3
 800838e:	f7fe fd52 	bl	8006e36 <USBD_LL_SOF>
}
 8008392:	bf00      	nop
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b084      	sub	sp, #16
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80083a2:	2301      	movs	r3, #1
 80083a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d102      	bne.n	80083b4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80083ae:	2300      	movs	r3, #0
 80083b0:	73fb      	strb	r3, [r7, #15]
 80083b2:	e008      	b.n	80083c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d102      	bne.n	80083c2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80083bc:	2301      	movs	r3, #1
 80083be:	73fb      	strb	r3, [r7, #15]
 80083c0:	e001      	b.n	80083c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80083c2:	f7f8 fc21 	bl	8000c08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083cc:	7bfa      	ldrb	r2, [r7, #15]
 80083ce:	4611      	mov	r1, r2
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7fe fcf2 	bl	8006dba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083dc:	4618      	mov	r0, r3
 80083de:	f7fe fc9a 	bl	8006d16 <USBD_LL_Reset>
}
 80083e2:	bf00      	nop
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
	...

080083ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fe fced 	bl	8006dda <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	6812      	ldr	r2, [r2, #0]
 800840e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008412:	f043 0301 	orr.w	r3, r3, #1
 8008416:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d005      	beq.n	800842c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008420:	4b04      	ldr	r3, [pc, #16]	; (8008434 <HAL_PCD_SuspendCallback+0x48>)
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	4a03      	ldr	r2, [pc, #12]	; (8008434 <HAL_PCD_SuspendCallback+0x48>)
 8008426:	f043 0306 	orr.w	r3, r3, #6
 800842a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800842c:	bf00      	nop
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	e000ed00 	.word	0xe000ed00

08008438 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe fcdd 	bl	8006e06 <USBD_LL_Resume>
}
 800844c:	bf00      	nop
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	460b      	mov	r3, r1
 800845e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008466:	78fa      	ldrb	r2, [r7, #3]
 8008468:	4611      	mov	r1, r2
 800846a:	4618      	mov	r0, r3
 800846c:	f7fe fd35 	bl	8006eda <USBD_LL_IsoOUTIncomplete>
}
 8008470:	bf00      	nop
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	460b      	mov	r3, r1
 8008482:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800848a:	78fa      	ldrb	r2, [r7, #3]
 800848c:	4611      	mov	r1, r2
 800848e:	4618      	mov	r0, r3
 8008490:	f7fe fcf1 	bl	8006e76 <USBD_LL_IsoINIncomplete>
}
 8008494:	bf00      	nop
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fe fd47 	bl	8006f3e <USBD_LL_DevConnected>
}
 80084b0:	bf00      	nop
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fe fd44 	bl	8006f54 <USBD_LL_DevDisconnected>
}
 80084cc:	bf00      	nop
 80084ce:	3708      	adds	r7, #8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d13c      	bne.n	800855e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80084e4:	4a20      	ldr	r2, [pc, #128]	; (8008568 <USBD_LL_Init+0x94>)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a1e      	ldr	r2, [pc, #120]	; (8008568 <USBD_LL_Init+0x94>)
 80084f0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80084f4:	4b1c      	ldr	r3, [pc, #112]	; (8008568 <USBD_LL_Init+0x94>)
 80084f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80084fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80084fc:	4b1a      	ldr	r3, [pc, #104]	; (8008568 <USBD_LL_Init+0x94>)
 80084fe:	2204      	movs	r2, #4
 8008500:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008502:	4b19      	ldr	r3, [pc, #100]	; (8008568 <USBD_LL_Init+0x94>)
 8008504:	2202      	movs	r2, #2
 8008506:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008508:	4b17      	ldr	r3, [pc, #92]	; (8008568 <USBD_LL_Init+0x94>)
 800850a:	2200      	movs	r2, #0
 800850c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800850e:	4b16      	ldr	r3, [pc, #88]	; (8008568 <USBD_LL_Init+0x94>)
 8008510:	2202      	movs	r2, #2
 8008512:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008514:	4b14      	ldr	r3, [pc, #80]	; (8008568 <USBD_LL_Init+0x94>)
 8008516:	2200      	movs	r2, #0
 8008518:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800851a:	4b13      	ldr	r3, [pc, #76]	; (8008568 <USBD_LL_Init+0x94>)
 800851c:	2200      	movs	r2, #0
 800851e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008520:	4b11      	ldr	r3, [pc, #68]	; (8008568 <USBD_LL_Init+0x94>)
 8008522:	2200      	movs	r2, #0
 8008524:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008526:	4b10      	ldr	r3, [pc, #64]	; (8008568 <USBD_LL_Init+0x94>)
 8008528:	2201      	movs	r2, #1
 800852a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800852c:	4b0e      	ldr	r3, [pc, #56]	; (8008568 <USBD_LL_Init+0x94>)
 800852e:	2200      	movs	r2, #0
 8008530:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008532:	480d      	ldr	r0, [pc, #52]	; (8008568 <USBD_LL_Init+0x94>)
 8008534:	f7f9 ff94 	bl	8002460 <HAL_PCD_Init>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800853e:	f7f8 fb63 	bl	8000c08 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008542:	2180      	movs	r1, #128	; 0x80
 8008544:	4808      	ldr	r0, [pc, #32]	; (8008568 <USBD_LL_Init+0x94>)
 8008546:	f7fb f9ec 	bl	8003922 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800854a:	2240      	movs	r2, #64	; 0x40
 800854c:	2100      	movs	r1, #0
 800854e:	4806      	ldr	r0, [pc, #24]	; (8008568 <USBD_LL_Init+0x94>)
 8008550:	f7fb f9a0 	bl	8003894 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008554:	2280      	movs	r2, #128	; 0x80
 8008556:	2101      	movs	r1, #1
 8008558:	4803      	ldr	r0, [pc, #12]	; (8008568 <USBD_LL_Init+0x94>)
 800855a:	f7fb f99b 	bl	8003894 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	20001754 	.word	0x20001754

0800856c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008574:	2300      	movs	r3, #0
 8008576:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008578:	2300      	movs	r3, #0
 800857a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008582:	4618      	mov	r0, r3
 8008584:	f7fa f889 	bl	800269a <HAL_PCD_Start>
 8008588:	4603      	mov	r3, r0
 800858a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800858c:	7bfb      	ldrb	r3, [r7, #15]
 800858e:	4618      	mov	r0, r3
 8008590:	f000 f942 	bl	8008818 <USBD_Get_USB_Status>
 8008594:	4603      	mov	r3, r0
 8008596:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008598:	7bbb      	ldrb	r3, [r7, #14]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	4608      	mov	r0, r1
 80085ac:	4611      	mov	r1, r2
 80085ae:	461a      	mov	r2, r3
 80085b0:	4603      	mov	r3, r0
 80085b2:	70fb      	strb	r3, [r7, #3]
 80085b4:	460b      	mov	r3, r1
 80085b6:	70bb      	strb	r3, [r7, #2]
 80085b8:	4613      	mov	r3, r2
 80085ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085bc:	2300      	movs	r3, #0
 80085be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80085ca:	78bb      	ldrb	r3, [r7, #2]
 80085cc:	883a      	ldrh	r2, [r7, #0]
 80085ce:	78f9      	ldrb	r1, [r7, #3]
 80085d0:	f7fa fd5a 	bl	8003088 <HAL_PCD_EP_Open>
 80085d4:	4603      	mov	r3, r0
 80085d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 f91c 	bl	8008818 <USBD_Get_USB_Status>
 80085e0:	4603      	mov	r3, r0
 80085e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b084      	sub	sp, #16
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	460b      	mov	r3, r1
 80085f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008608:	78fa      	ldrb	r2, [r7, #3]
 800860a:	4611      	mov	r1, r2
 800860c:	4618      	mov	r0, r3
 800860e:	f7fa fda3 	bl	8003158 <HAL_PCD_EP_Close>
 8008612:	4603      	mov	r3, r0
 8008614:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008616:	7bfb      	ldrb	r3, [r7, #15]
 8008618:	4618      	mov	r0, r3
 800861a:	f000 f8fd 	bl	8008818 <USBD_Get_USB_Status>
 800861e:	4603      	mov	r3, r0
 8008620:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008622:	7bbb      	ldrb	r3, [r7, #14]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	460b      	mov	r3, r1
 8008636:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800863c:	2300      	movs	r3, #0
 800863e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008646:	78fa      	ldrb	r2, [r7, #3]
 8008648:	4611      	mov	r1, r2
 800864a:	4618      	mov	r0, r3
 800864c:	f7fa fe7b 	bl	8003346 <HAL_PCD_EP_SetStall>
 8008650:	4603      	mov	r3, r0
 8008652:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008654:	7bfb      	ldrb	r3, [r7, #15]
 8008656:	4618      	mov	r0, r3
 8008658:	f000 f8de 	bl	8008818 <USBD_Get_USB_Status>
 800865c:	4603      	mov	r3, r0
 800865e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008660:	7bbb      	ldrb	r3, [r7, #14]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b084      	sub	sp, #16
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	460b      	mov	r3, r1
 8008674:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008684:	78fa      	ldrb	r2, [r7, #3]
 8008686:	4611      	mov	r1, r2
 8008688:	4618      	mov	r0, r3
 800868a:	f7fa fec0 	bl	800340e <HAL_PCD_EP_ClrStall>
 800868e:	4603      	mov	r3, r0
 8008690:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008692:	7bfb      	ldrb	r3, [r7, #15]
 8008694:	4618      	mov	r0, r3
 8008696:	f000 f8bf 	bl	8008818 <USBD_Get_USB_Status>
 800869a:	4603      	mov	r3, r0
 800869c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800869e:	7bbb      	ldrb	r3, [r7, #14]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	460b      	mov	r3, r1
 80086b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	da0b      	bge.n	80086dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80086c4:	78fb      	ldrb	r3, [r7, #3]
 80086c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086ca:	68f9      	ldr	r1, [r7, #12]
 80086cc:	4613      	mov	r3, r2
 80086ce:	00db      	lsls	r3, r3, #3
 80086d0:	4413      	add	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	440b      	add	r3, r1
 80086d6:	333e      	adds	r3, #62	; 0x3e
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	e00b      	b.n	80086f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80086dc:	78fb      	ldrb	r3, [r7, #3]
 80086de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086e2:	68f9      	ldr	r1, [r7, #12]
 80086e4:	4613      	mov	r3, r2
 80086e6:	00db      	lsls	r3, r3, #3
 80086e8:	4413      	add	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	440b      	add	r3, r1
 80086ee:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80086f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	460b      	mov	r3, r1
 800870a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800870c:	2300      	movs	r3, #0
 800870e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008710:	2300      	movs	r3, #0
 8008712:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800871a:	78fa      	ldrb	r2, [r7, #3]
 800871c:	4611      	mov	r1, r2
 800871e:	4618      	mov	r0, r3
 8008720:	f7fa fc8d 	bl	800303e <HAL_PCD_SetAddress>
 8008724:	4603      	mov	r3, r0
 8008726:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008728:	7bfb      	ldrb	r3, [r7, #15]
 800872a:	4618      	mov	r0, r3
 800872c:	f000 f874 	bl	8008818 <USBD_Get_USB_Status>
 8008730:	4603      	mov	r3, r0
 8008732:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008734:	7bbb      	ldrb	r3, [r7, #14]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b086      	sub	sp, #24
 8008742:	af00      	add	r7, sp, #0
 8008744:	60f8      	str	r0, [r7, #12]
 8008746:	607a      	str	r2, [r7, #4]
 8008748:	603b      	str	r3, [r7, #0]
 800874a:	460b      	mov	r3, r1
 800874c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800875c:	7af9      	ldrb	r1, [r7, #11]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	f7fa fda6 	bl	80032b2 <HAL_PCD_EP_Transmit>
 8008766:	4603      	mov	r3, r0
 8008768:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800876a:	7dfb      	ldrb	r3, [r7, #23]
 800876c:	4618      	mov	r0, r3
 800876e:	f000 f853 	bl	8008818 <USBD_Get_USB_Status>
 8008772:	4603      	mov	r3, r0
 8008774:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008776:	7dbb      	ldrb	r3, [r7, #22]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3718      	adds	r7, #24
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	607a      	str	r2, [r7, #4]
 800878a:	603b      	str	r3, [r7, #0]
 800878c:	460b      	mov	r3, r1
 800878e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008790:	2300      	movs	r3, #0
 8008792:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800879e:	7af9      	ldrb	r1, [r7, #11]
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	f7fa fd22 	bl	80031ec <HAL_PCD_EP_Receive>
 80087a8:	4603      	mov	r3, r0
 80087aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087ac:	7dfb      	ldrb	r3, [r7, #23]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 f832 	bl	8008818 <USBD_Get_USB_Status>
 80087b4:	4603      	mov	r3, r0
 80087b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3718      	adds	r7, #24
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b082      	sub	sp, #8
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	460b      	mov	r3, r1
 80087cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087d4:	78fa      	ldrb	r2, [r7, #3]
 80087d6:	4611      	mov	r1, r2
 80087d8:	4618      	mov	r0, r3
 80087da:	f7fa fd52 	bl	8003282 <HAL_PCD_EP_GetRxCount>
 80087de:	4603      	mov	r3, r0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80087f0:	4b03      	ldr	r3, [pc, #12]	; (8008800 <USBD_static_malloc+0x18>)
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	20001c60 	.word	0x20001c60

08008804 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]

}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	4603      	mov	r3, r0
 8008820:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	2b03      	cmp	r3, #3
 800882a:	d817      	bhi.n	800885c <USBD_Get_USB_Status+0x44>
 800882c:	a201      	add	r2, pc, #4	; (adr r2, 8008834 <USBD_Get_USB_Status+0x1c>)
 800882e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008832:	bf00      	nop
 8008834:	08008845 	.word	0x08008845
 8008838:	0800884b 	.word	0x0800884b
 800883c:	08008851 	.word	0x08008851
 8008840:	08008857 	.word	0x08008857
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008844:	2300      	movs	r3, #0
 8008846:	73fb      	strb	r3, [r7, #15]
    break;
 8008848:	e00b      	b.n	8008862 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800884a:	2303      	movs	r3, #3
 800884c:	73fb      	strb	r3, [r7, #15]
    break;
 800884e:	e008      	b.n	8008862 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008850:	2301      	movs	r3, #1
 8008852:	73fb      	strb	r3, [r7, #15]
    break;
 8008854:	e005      	b.n	8008862 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008856:	2303      	movs	r3, #3
 8008858:	73fb      	strb	r3, [r7, #15]
    break;
 800885a:	e002      	b.n	8008862 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800885c:	2303      	movs	r3, #3
 800885e:	73fb      	strb	r3, [r7, #15]
    break;
 8008860:	bf00      	nop
  }
  return usb_status;
 8008862:	7bfb      	ldrb	r3, [r7, #15]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <std>:
 8008870:	2300      	movs	r3, #0
 8008872:	b510      	push	{r4, lr}
 8008874:	4604      	mov	r4, r0
 8008876:	e9c0 3300 	strd	r3, r3, [r0]
 800887a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800887e:	6083      	str	r3, [r0, #8]
 8008880:	8181      	strh	r1, [r0, #12]
 8008882:	6643      	str	r3, [r0, #100]	; 0x64
 8008884:	81c2      	strh	r2, [r0, #14]
 8008886:	6183      	str	r3, [r0, #24]
 8008888:	4619      	mov	r1, r3
 800888a:	2208      	movs	r2, #8
 800888c:	305c      	adds	r0, #92	; 0x5c
 800888e:	f000 f8f4 	bl	8008a7a <memset>
 8008892:	4b05      	ldr	r3, [pc, #20]	; (80088a8 <std+0x38>)
 8008894:	6263      	str	r3, [r4, #36]	; 0x24
 8008896:	4b05      	ldr	r3, [pc, #20]	; (80088ac <std+0x3c>)
 8008898:	62a3      	str	r3, [r4, #40]	; 0x28
 800889a:	4b05      	ldr	r3, [pc, #20]	; (80088b0 <std+0x40>)
 800889c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800889e:	4b05      	ldr	r3, [pc, #20]	; (80088b4 <std+0x44>)
 80088a0:	6224      	str	r4, [r4, #32]
 80088a2:	6323      	str	r3, [r4, #48]	; 0x30
 80088a4:	bd10      	pop	{r4, pc}
 80088a6:	bf00      	nop
 80088a8:	080089f5 	.word	0x080089f5
 80088ac:	08008a17 	.word	0x08008a17
 80088b0:	08008a4f 	.word	0x08008a4f
 80088b4:	08008a73 	.word	0x08008a73

080088b8 <stdio_exit_handler>:
 80088b8:	4a02      	ldr	r2, [pc, #8]	; (80088c4 <stdio_exit_handler+0xc>)
 80088ba:	4903      	ldr	r1, [pc, #12]	; (80088c8 <stdio_exit_handler+0x10>)
 80088bc:	4803      	ldr	r0, [pc, #12]	; (80088cc <stdio_exit_handler+0x14>)
 80088be:	f000 b869 	b.w	8008994 <_fwalk_sglue>
 80088c2:	bf00      	nop
 80088c4:	200000fc 	.word	0x200000fc
 80088c8:	08009415 	.word	0x08009415
 80088cc:	20000108 	.word	0x20000108

080088d0 <cleanup_stdio>:
 80088d0:	6841      	ldr	r1, [r0, #4]
 80088d2:	4b0c      	ldr	r3, [pc, #48]	; (8008904 <cleanup_stdio+0x34>)
 80088d4:	4299      	cmp	r1, r3
 80088d6:	b510      	push	{r4, lr}
 80088d8:	4604      	mov	r4, r0
 80088da:	d001      	beq.n	80088e0 <cleanup_stdio+0x10>
 80088dc:	f000 fd9a 	bl	8009414 <_fflush_r>
 80088e0:	68a1      	ldr	r1, [r4, #8]
 80088e2:	4b09      	ldr	r3, [pc, #36]	; (8008908 <cleanup_stdio+0x38>)
 80088e4:	4299      	cmp	r1, r3
 80088e6:	d002      	beq.n	80088ee <cleanup_stdio+0x1e>
 80088e8:	4620      	mov	r0, r4
 80088ea:	f000 fd93 	bl	8009414 <_fflush_r>
 80088ee:	68e1      	ldr	r1, [r4, #12]
 80088f0:	4b06      	ldr	r3, [pc, #24]	; (800890c <cleanup_stdio+0x3c>)
 80088f2:	4299      	cmp	r1, r3
 80088f4:	d004      	beq.n	8008900 <cleanup_stdio+0x30>
 80088f6:	4620      	mov	r0, r4
 80088f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088fc:	f000 bd8a 	b.w	8009414 <_fflush_r>
 8008900:	bd10      	pop	{r4, pc}
 8008902:	bf00      	nop
 8008904:	20001e80 	.word	0x20001e80
 8008908:	20001ee8 	.word	0x20001ee8
 800890c:	20001f50 	.word	0x20001f50

08008910 <global_stdio_init.part.0>:
 8008910:	b510      	push	{r4, lr}
 8008912:	4b0b      	ldr	r3, [pc, #44]	; (8008940 <global_stdio_init.part.0+0x30>)
 8008914:	4c0b      	ldr	r4, [pc, #44]	; (8008944 <global_stdio_init.part.0+0x34>)
 8008916:	4a0c      	ldr	r2, [pc, #48]	; (8008948 <global_stdio_init.part.0+0x38>)
 8008918:	601a      	str	r2, [r3, #0]
 800891a:	4620      	mov	r0, r4
 800891c:	2200      	movs	r2, #0
 800891e:	2104      	movs	r1, #4
 8008920:	f7ff ffa6 	bl	8008870 <std>
 8008924:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008928:	2201      	movs	r2, #1
 800892a:	2109      	movs	r1, #9
 800892c:	f7ff ffa0 	bl	8008870 <std>
 8008930:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008934:	2202      	movs	r2, #2
 8008936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800893a:	2112      	movs	r1, #18
 800893c:	f7ff bf98 	b.w	8008870 <std>
 8008940:	20001fb8 	.word	0x20001fb8
 8008944:	20001e80 	.word	0x20001e80
 8008948:	080088b9 	.word	0x080088b9

0800894c <__sfp_lock_acquire>:
 800894c:	4801      	ldr	r0, [pc, #4]	; (8008954 <__sfp_lock_acquire+0x8>)
 800894e:	f000 b90d 	b.w	8008b6c <__retarget_lock_acquire_recursive>
 8008952:	bf00      	nop
 8008954:	20001fc1 	.word	0x20001fc1

08008958 <__sfp_lock_release>:
 8008958:	4801      	ldr	r0, [pc, #4]	; (8008960 <__sfp_lock_release+0x8>)
 800895a:	f000 b908 	b.w	8008b6e <__retarget_lock_release_recursive>
 800895e:	bf00      	nop
 8008960:	20001fc1 	.word	0x20001fc1

08008964 <__sinit>:
 8008964:	b510      	push	{r4, lr}
 8008966:	4604      	mov	r4, r0
 8008968:	f7ff fff0 	bl	800894c <__sfp_lock_acquire>
 800896c:	6a23      	ldr	r3, [r4, #32]
 800896e:	b11b      	cbz	r3, 8008978 <__sinit+0x14>
 8008970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008974:	f7ff bff0 	b.w	8008958 <__sfp_lock_release>
 8008978:	4b04      	ldr	r3, [pc, #16]	; (800898c <__sinit+0x28>)
 800897a:	6223      	str	r3, [r4, #32]
 800897c:	4b04      	ldr	r3, [pc, #16]	; (8008990 <__sinit+0x2c>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1f5      	bne.n	8008970 <__sinit+0xc>
 8008984:	f7ff ffc4 	bl	8008910 <global_stdio_init.part.0>
 8008988:	e7f2      	b.n	8008970 <__sinit+0xc>
 800898a:	bf00      	nop
 800898c:	080088d1 	.word	0x080088d1
 8008990:	20001fb8 	.word	0x20001fb8

08008994 <_fwalk_sglue>:
 8008994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008998:	4607      	mov	r7, r0
 800899a:	4688      	mov	r8, r1
 800899c:	4614      	mov	r4, r2
 800899e:	2600      	movs	r6, #0
 80089a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089a4:	f1b9 0901 	subs.w	r9, r9, #1
 80089a8:	d505      	bpl.n	80089b6 <_fwalk_sglue+0x22>
 80089aa:	6824      	ldr	r4, [r4, #0]
 80089ac:	2c00      	cmp	r4, #0
 80089ae:	d1f7      	bne.n	80089a0 <_fwalk_sglue+0xc>
 80089b0:	4630      	mov	r0, r6
 80089b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089b6:	89ab      	ldrh	r3, [r5, #12]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d907      	bls.n	80089cc <_fwalk_sglue+0x38>
 80089bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089c0:	3301      	adds	r3, #1
 80089c2:	d003      	beq.n	80089cc <_fwalk_sglue+0x38>
 80089c4:	4629      	mov	r1, r5
 80089c6:	4638      	mov	r0, r7
 80089c8:	47c0      	blx	r8
 80089ca:	4306      	orrs	r6, r0
 80089cc:	3568      	adds	r5, #104	; 0x68
 80089ce:	e7e9      	b.n	80089a4 <_fwalk_sglue+0x10>

080089d0 <iprintf>:
 80089d0:	b40f      	push	{r0, r1, r2, r3}
 80089d2:	b507      	push	{r0, r1, r2, lr}
 80089d4:	4906      	ldr	r1, [pc, #24]	; (80089f0 <iprintf+0x20>)
 80089d6:	ab04      	add	r3, sp, #16
 80089d8:	6808      	ldr	r0, [r1, #0]
 80089da:	f853 2b04 	ldr.w	r2, [r3], #4
 80089de:	6881      	ldr	r1, [r0, #8]
 80089e0:	9301      	str	r3, [sp, #4]
 80089e2:	f000 f9e7 	bl	8008db4 <_vfiprintf_r>
 80089e6:	b003      	add	sp, #12
 80089e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80089ec:	b004      	add	sp, #16
 80089ee:	4770      	bx	lr
 80089f0:	20000154 	.word	0x20000154

080089f4 <__sread>:
 80089f4:	b510      	push	{r4, lr}
 80089f6:	460c      	mov	r4, r1
 80089f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089fc:	f000 f868 	bl	8008ad0 <_read_r>
 8008a00:	2800      	cmp	r0, #0
 8008a02:	bfab      	itete	ge
 8008a04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a06:	89a3      	ldrhlt	r3, [r4, #12]
 8008a08:	181b      	addge	r3, r3, r0
 8008a0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a0e:	bfac      	ite	ge
 8008a10:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a12:	81a3      	strhlt	r3, [r4, #12]
 8008a14:	bd10      	pop	{r4, pc}

08008a16 <__swrite>:
 8008a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a1a:	461f      	mov	r7, r3
 8008a1c:	898b      	ldrh	r3, [r1, #12]
 8008a1e:	05db      	lsls	r3, r3, #23
 8008a20:	4605      	mov	r5, r0
 8008a22:	460c      	mov	r4, r1
 8008a24:	4616      	mov	r6, r2
 8008a26:	d505      	bpl.n	8008a34 <__swrite+0x1e>
 8008a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f000 f83c 	bl	8008aac <_lseek_r>
 8008a34:	89a3      	ldrh	r3, [r4, #12]
 8008a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a3e:	81a3      	strh	r3, [r4, #12]
 8008a40:	4632      	mov	r2, r6
 8008a42:	463b      	mov	r3, r7
 8008a44:	4628      	mov	r0, r5
 8008a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a4a:	f000 b853 	b.w	8008af4 <_write_r>

08008a4e <__sseek>:
 8008a4e:	b510      	push	{r4, lr}
 8008a50:	460c      	mov	r4, r1
 8008a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a56:	f000 f829 	bl	8008aac <_lseek_r>
 8008a5a:	1c43      	adds	r3, r0, #1
 8008a5c:	89a3      	ldrh	r3, [r4, #12]
 8008a5e:	bf15      	itete	ne
 8008a60:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a6a:	81a3      	strheq	r3, [r4, #12]
 8008a6c:	bf18      	it	ne
 8008a6e:	81a3      	strhne	r3, [r4, #12]
 8008a70:	bd10      	pop	{r4, pc}

08008a72 <__sclose>:
 8008a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a76:	f000 b809 	b.w	8008a8c <_close_r>

08008a7a <memset>:
 8008a7a:	4402      	add	r2, r0
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d100      	bne.n	8008a84 <memset+0xa>
 8008a82:	4770      	bx	lr
 8008a84:	f803 1b01 	strb.w	r1, [r3], #1
 8008a88:	e7f9      	b.n	8008a7e <memset+0x4>
	...

08008a8c <_close_r>:
 8008a8c:	b538      	push	{r3, r4, r5, lr}
 8008a8e:	4d06      	ldr	r5, [pc, #24]	; (8008aa8 <_close_r+0x1c>)
 8008a90:	2300      	movs	r3, #0
 8008a92:	4604      	mov	r4, r0
 8008a94:	4608      	mov	r0, r1
 8008a96:	602b      	str	r3, [r5, #0]
 8008a98:	f7f8 fac7 	bl	800102a <_close>
 8008a9c:	1c43      	adds	r3, r0, #1
 8008a9e:	d102      	bne.n	8008aa6 <_close_r+0x1a>
 8008aa0:	682b      	ldr	r3, [r5, #0]
 8008aa2:	b103      	cbz	r3, 8008aa6 <_close_r+0x1a>
 8008aa4:	6023      	str	r3, [r4, #0]
 8008aa6:	bd38      	pop	{r3, r4, r5, pc}
 8008aa8:	20001fbc 	.word	0x20001fbc

08008aac <_lseek_r>:
 8008aac:	b538      	push	{r3, r4, r5, lr}
 8008aae:	4d07      	ldr	r5, [pc, #28]	; (8008acc <_lseek_r+0x20>)
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	4608      	mov	r0, r1
 8008ab4:	4611      	mov	r1, r2
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	602a      	str	r2, [r5, #0]
 8008aba:	461a      	mov	r2, r3
 8008abc:	f7f8 fadc 	bl	8001078 <_lseek>
 8008ac0:	1c43      	adds	r3, r0, #1
 8008ac2:	d102      	bne.n	8008aca <_lseek_r+0x1e>
 8008ac4:	682b      	ldr	r3, [r5, #0]
 8008ac6:	b103      	cbz	r3, 8008aca <_lseek_r+0x1e>
 8008ac8:	6023      	str	r3, [r4, #0]
 8008aca:	bd38      	pop	{r3, r4, r5, pc}
 8008acc:	20001fbc 	.word	0x20001fbc

08008ad0 <_read_r>:
 8008ad0:	b538      	push	{r3, r4, r5, lr}
 8008ad2:	4d07      	ldr	r5, [pc, #28]	; (8008af0 <_read_r+0x20>)
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	4608      	mov	r0, r1
 8008ad8:	4611      	mov	r1, r2
 8008ada:	2200      	movs	r2, #0
 8008adc:	602a      	str	r2, [r5, #0]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f7f8 fa86 	bl	8000ff0 <_read>
 8008ae4:	1c43      	adds	r3, r0, #1
 8008ae6:	d102      	bne.n	8008aee <_read_r+0x1e>
 8008ae8:	682b      	ldr	r3, [r5, #0]
 8008aea:	b103      	cbz	r3, 8008aee <_read_r+0x1e>
 8008aec:	6023      	str	r3, [r4, #0]
 8008aee:	bd38      	pop	{r3, r4, r5, pc}
 8008af0:	20001fbc 	.word	0x20001fbc

08008af4 <_write_r>:
 8008af4:	b538      	push	{r3, r4, r5, lr}
 8008af6:	4d07      	ldr	r5, [pc, #28]	; (8008b14 <_write_r+0x20>)
 8008af8:	4604      	mov	r4, r0
 8008afa:	4608      	mov	r0, r1
 8008afc:	4611      	mov	r1, r2
 8008afe:	2200      	movs	r2, #0
 8008b00:	602a      	str	r2, [r5, #0]
 8008b02:	461a      	mov	r2, r3
 8008b04:	f7f7 fe26 	bl	8000754 <_write>
 8008b08:	1c43      	adds	r3, r0, #1
 8008b0a:	d102      	bne.n	8008b12 <_write_r+0x1e>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	b103      	cbz	r3, 8008b12 <_write_r+0x1e>
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	bd38      	pop	{r3, r4, r5, pc}
 8008b14:	20001fbc 	.word	0x20001fbc

08008b18 <__errno>:
 8008b18:	4b01      	ldr	r3, [pc, #4]	; (8008b20 <__errno+0x8>)
 8008b1a:	6818      	ldr	r0, [r3, #0]
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	20000154 	.word	0x20000154

08008b24 <__libc_init_array>:
 8008b24:	b570      	push	{r4, r5, r6, lr}
 8008b26:	4d0d      	ldr	r5, [pc, #52]	; (8008b5c <__libc_init_array+0x38>)
 8008b28:	4c0d      	ldr	r4, [pc, #52]	; (8008b60 <__libc_init_array+0x3c>)
 8008b2a:	1b64      	subs	r4, r4, r5
 8008b2c:	10a4      	asrs	r4, r4, #2
 8008b2e:	2600      	movs	r6, #0
 8008b30:	42a6      	cmp	r6, r4
 8008b32:	d109      	bne.n	8008b48 <__libc_init_array+0x24>
 8008b34:	4d0b      	ldr	r5, [pc, #44]	; (8008b64 <__libc_init_array+0x40>)
 8008b36:	4c0c      	ldr	r4, [pc, #48]	; (8008b68 <__libc_init_array+0x44>)
 8008b38:	f000 fdbe 	bl	80096b8 <_init>
 8008b3c:	1b64      	subs	r4, r4, r5
 8008b3e:	10a4      	asrs	r4, r4, #2
 8008b40:	2600      	movs	r6, #0
 8008b42:	42a6      	cmp	r6, r4
 8008b44:	d105      	bne.n	8008b52 <__libc_init_array+0x2e>
 8008b46:	bd70      	pop	{r4, r5, r6, pc}
 8008b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b4c:	4798      	blx	r3
 8008b4e:	3601      	adds	r6, #1
 8008b50:	e7ee      	b.n	8008b30 <__libc_init_array+0xc>
 8008b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b56:	4798      	blx	r3
 8008b58:	3601      	adds	r6, #1
 8008b5a:	e7f2      	b.n	8008b42 <__libc_init_array+0x1e>
 8008b5c:	080097c4 	.word	0x080097c4
 8008b60:	080097c4 	.word	0x080097c4
 8008b64:	080097c4 	.word	0x080097c4
 8008b68:	080097c8 	.word	0x080097c8

08008b6c <__retarget_lock_acquire_recursive>:
 8008b6c:	4770      	bx	lr

08008b6e <__retarget_lock_release_recursive>:
 8008b6e:	4770      	bx	lr

08008b70 <_free_r>:
 8008b70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b72:	2900      	cmp	r1, #0
 8008b74:	d044      	beq.n	8008c00 <_free_r+0x90>
 8008b76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b7a:	9001      	str	r0, [sp, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f1a1 0404 	sub.w	r4, r1, #4
 8008b82:	bfb8      	it	lt
 8008b84:	18e4      	addlt	r4, r4, r3
 8008b86:	f000 f8df 	bl	8008d48 <__malloc_lock>
 8008b8a:	4a1e      	ldr	r2, [pc, #120]	; (8008c04 <_free_r+0x94>)
 8008b8c:	9801      	ldr	r0, [sp, #4]
 8008b8e:	6813      	ldr	r3, [r2, #0]
 8008b90:	b933      	cbnz	r3, 8008ba0 <_free_r+0x30>
 8008b92:	6063      	str	r3, [r4, #4]
 8008b94:	6014      	str	r4, [r2, #0]
 8008b96:	b003      	add	sp, #12
 8008b98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b9c:	f000 b8da 	b.w	8008d54 <__malloc_unlock>
 8008ba0:	42a3      	cmp	r3, r4
 8008ba2:	d908      	bls.n	8008bb6 <_free_r+0x46>
 8008ba4:	6825      	ldr	r5, [r4, #0]
 8008ba6:	1961      	adds	r1, r4, r5
 8008ba8:	428b      	cmp	r3, r1
 8008baa:	bf01      	itttt	eq
 8008bac:	6819      	ldreq	r1, [r3, #0]
 8008bae:	685b      	ldreq	r3, [r3, #4]
 8008bb0:	1949      	addeq	r1, r1, r5
 8008bb2:	6021      	streq	r1, [r4, #0]
 8008bb4:	e7ed      	b.n	8008b92 <_free_r+0x22>
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	b10b      	cbz	r3, 8008bc0 <_free_r+0x50>
 8008bbc:	42a3      	cmp	r3, r4
 8008bbe:	d9fa      	bls.n	8008bb6 <_free_r+0x46>
 8008bc0:	6811      	ldr	r1, [r2, #0]
 8008bc2:	1855      	adds	r5, r2, r1
 8008bc4:	42a5      	cmp	r5, r4
 8008bc6:	d10b      	bne.n	8008be0 <_free_r+0x70>
 8008bc8:	6824      	ldr	r4, [r4, #0]
 8008bca:	4421      	add	r1, r4
 8008bcc:	1854      	adds	r4, r2, r1
 8008bce:	42a3      	cmp	r3, r4
 8008bd0:	6011      	str	r1, [r2, #0]
 8008bd2:	d1e0      	bne.n	8008b96 <_free_r+0x26>
 8008bd4:	681c      	ldr	r4, [r3, #0]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	6053      	str	r3, [r2, #4]
 8008bda:	440c      	add	r4, r1
 8008bdc:	6014      	str	r4, [r2, #0]
 8008bde:	e7da      	b.n	8008b96 <_free_r+0x26>
 8008be0:	d902      	bls.n	8008be8 <_free_r+0x78>
 8008be2:	230c      	movs	r3, #12
 8008be4:	6003      	str	r3, [r0, #0]
 8008be6:	e7d6      	b.n	8008b96 <_free_r+0x26>
 8008be8:	6825      	ldr	r5, [r4, #0]
 8008bea:	1961      	adds	r1, r4, r5
 8008bec:	428b      	cmp	r3, r1
 8008bee:	bf04      	itt	eq
 8008bf0:	6819      	ldreq	r1, [r3, #0]
 8008bf2:	685b      	ldreq	r3, [r3, #4]
 8008bf4:	6063      	str	r3, [r4, #4]
 8008bf6:	bf04      	itt	eq
 8008bf8:	1949      	addeq	r1, r1, r5
 8008bfa:	6021      	streq	r1, [r4, #0]
 8008bfc:	6054      	str	r4, [r2, #4]
 8008bfe:	e7ca      	b.n	8008b96 <_free_r+0x26>
 8008c00:	b003      	add	sp, #12
 8008c02:	bd30      	pop	{r4, r5, pc}
 8008c04:	20001fc4 	.word	0x20001fc4

08008c08 <sbrk_aligned>:
 8008c08:	b570      	push	{r4, r5, r6, lr}
 8008c0a:	4e0e      	ldr	r6, [pc, #56]	; (8008c44 <sbrk_aligned+0x3c>)
 8008c0c:	460c      	mov	r4, r1
 8008c0e:	6831      	ldr	r1, [r6, #0]
 8008c10:	4605      	mov	r5, r0
 8008c12:	b911      	cbnz	r1, 8008c1a <sbrk_aligned+0x12>
 8008c14:	f000 fcbc 	bl	8009590 <_sbrk_r>
 8008c18:	6030      	str	r0, [r6, #0]
 8008c1a:	4621      	mov	r1, r4
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	f000 fcb7 	bl	8009590 <_sbrk_r>
 8008c22:	1c43      	adds	r3, r0, #1
 8008c24:	d00a      	beq.n	8008c3c <sbrk_aligned+0x34>
 8008c26:	1cc4      	adds	r4, r0, #3
 8008c28:	f024 0403 	bic.w	r4, r4, #3
 8008c2c:	42a0      	cmp	r0, r4
 8008c2e:	d007      	beq.n	8008c40 <sbrk_aligned+0x38>
 8008c30:	1a21      	subs	r1, r4, r0
 8008c32:	4628      	mov	r0, r5
 8008c34:	f000 fcac 	bl	8009590 <_sbrk_r>
 8008c38:	3001      	adds	r0, #1
 8008c3a:	d101      	bne.n	8008c40 <sbrk_aligned+0x38>
 8008c3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008c40:	4620      	mov	r0, r4
 8008c42:	bd70      	pop	{r4, r5, r6, pc}
 8008c44:	20001fc8 	.word	0x20001fc8

08008c48 <_malloc_r>:
 8008c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c4c:	1ccd      	adds	r5, r1, #3
 8008c4e:	f025 0503 	bic.w	r5, r5, #3
 8008c52:	3508      	adds	r5, #8
 8008c54:	2d0c      	cmp	r5, #12
 8008c56:	bf38      	it	cc
 8008c58:	250c      	movcc	r5, #12
 8008c5a:	2d00      	cmp	r5, #0
 8008c5c:	4607      	mov	r7, r0
 8008c5e:	db01      	blt.n	8008c64 <_malloc_r+0x1c>
 8008c60:	42a9      	cmp	r1, r5
 8008c62:	d905      	bls.n	8008c70 <_malloc_r+0x28>
 8008c64:	230c      	movs	r3, #12
 8008c66:	603b      	str	r3, [r7, #0]
 8008c68:	2600      	movs	r6, #0
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008d44 <_malloc_r+0xfc>
 8008c74:	f000 f868 	bl	8008d48 <__malloc_lock>
 8008c78:	f8d8 3000 	ldr.w	r3, [r8]
 8008c7c:	461c      	mov	r4, r3
 8008c7e:	bb5c      	cbnz	r4, 8008cd8 <_malloc_r+0x90>
 8008c80:	4629      	mov	r1, r5
 8008c82:	4638      	mov	r0, r7
 8008c84:	f7ff ffc0 	bl	8008c08 <sbrk_aligned>
 8008c88:	1c43      	adds	r3, r0, #1
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	d155      	bne.n	8008d3a <_malloc_r+0xf2>
 8008c8e:	f8d8 4000 	ldr.w	r4, [r8]
 8008c92:	4626      	mov	r6, r4
 8008c94:	2e00      	cmp	r6, #0
 8008c96:	d145      	bne.n	8008d24 <_malloc_r+0xdc>
 8008c98:	2c00      	cmp	r4, #0
 8008c9a:	d048      	beq.n	8008d2e <_malloc_r+0xe6>
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	4631      	mov	r1, r6
 8008ca0:	4638      	mov	r0, r7
 8008ca2:	eb04 0903 	add.w	r9, r4, r3
 8008ca6:	f000 fc73 	bl	8009590 <_sbrk_r>
 8008caa:	4581      	cmp	r9, r0
 8008cac:	d13f      	bne.n	8008d2e <_malloc_r+0xe6>
 8008cae:	6821      	ldr	r1, [r4, #0]
 8008cb0:	1a6d      	subs	r5, r5, r1
 8008cb2:	4629      	mov	r1, r5
 8008cb4:	4638      	mov	r0, r7
 8008cb6:	f7ff ffa7 	bl	8008c08 <sbrk_aligned>
 8008cba:	3001      	adds	r0, #1
 8008cbc:	d037      	beq.n	8008d2e <_malloc_r+0xe6>
 8008cbe:	6823      	ldr	r3, [r4, #0]
 8008cc0:	442b      	add	r3, r5
 8008cc2:	6023      	str	r3, [r4, #0]
 8008cc4:	f8d8 3000 	ldr.w	r3, [r8]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d038      	beq.n	8008d3e <_malloc_r+0xf6>
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	42a2      	cmp	r2, r4
 8008cd0:	d12b      	bne.n	8008d2a <_malloc_r+0xe2>
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	605a      	str	r2, [r3, #4]
 8008cd6:	e00f      	b.n	8008cf8 <_malloc_r+0xb0>
 8008cd8:	6822      	ldr	r2, [r4, #0]
 8008cda:	1b52      	subs	r2, r2, r5
 8008cdc:	d41f      	bmi.n	8008d1e <_malloc_r+0xd6>
 8008cde:	2a0b      	cmp	r2, #11
 8008ce0:	d917      	bls.n	8008d12 <_malloc_r+0xca>
 8008ce2:	1961      	adds	r1, r4, r5
 8008ce4:	42a3      	cmp	r3, r4
 8008ce6:	6025      	str	r5, [r4, #0]
 8008ce8:	bf18      	it	ne
 8008cea:	6059      	strne	r1, [r3, #4]
 8008cec:	6863      	ldr	r3, [r4, #4]
 8008cee:	bf08      	it	eq
 8008cf0:	f8c8 1000 	streq.w	r1, [r8]
 8008cf4:	5162      	str	r2, [r4, r5]
 8008cf6:	604b      	str	r3, [r1, #4]
 8008cf8:	4638      	mov	r0, r7
 8008cfa:	f104 060b 	add.w	r6, r4, #11
 8008cfe:	f000 f829 	bl	8008d54 <__malloc_unlock>
 8008d02:	f026 0607 	bic.w	r6, r6, #7
 8008d06:	1d23      	adds	r3, r4, #4
 8008d08:	1af2      	subs	r2, r6, r3
 8008d0a:	d0ae      	beq.n	8008c6a <_malloc_r+0x22>
 8008d0c:	1b9b      	subs	r3, r3, r6
 8008d0e:	50a3      	str	r3, [r4, r2]
 8008d10:	e7ab      	b.n	8008c6a <_malloc_r+0x22>
 8008d12:	42a3      	cmp	r3, r4
 8008d14:	6862      	ldr	r2, [r4, #4]
 8008d16:	d1dd      	bne.n	8008cd4 <_malloc_r+0x8c>
 8008d18:	f8c8 2000 	str.w	r2, [r8]
 8008d1c:	e7ec      	b.n	8008cf8 <_malloc_r+0xb0>
 8008d1e:	4623      	mov	r3, r4
 8008d20:	6864      	ldr	r4, [r4, #4]
 8008d22:	e7ac      	b.n	8008c7e <_malloc_r+0x36>
 8008d24:	4634      	mov	r4, r6
 8008d26:	6876      	ldr	r6, [r6, #4]
 8008d28:	e7b4      	b.n	8008c94 <_malloc_r+0x4c>
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	e7cc      	b.n	8008cc8 <_malloc_r+0x80>
 8008d2e:	230c      	movs	r3, #12
 8008d30:	603b      	str	r3, [r7, #0]
 8008d32:	4638      	mov	r0, r7
 8008d34:	f000 f80e 	bl	8008d54 <__malloc_unlock>
 8008d38:	e797      	b.n	8008c6a <_malloc_r+0x22>
 8008d3a:	6025      	str	r5, [r4, #0]
 8008d3c:	e7dc      	b.n	8008cf8 <_malloc_r+0xb0>
 8008d3e:	605b      	str	r3, [r3, #4]
 8008d40:	deff      	udf	#255	; 0xff
 8008d42:	bf00      	nop
 8008d44:	20001fc4 	.word	0x20001fc4

08008d48 <__malloc_lock>:
 8008d48:	4801      	ldr	r0, [pc, #4]	; (8008d50 <__malloc_lock+0x8>)
 8008d4a:	f7ff bf0f 	b.w	8008b6c <__retarget_lock_acquire_recursive>
 8008d4e:	bf00      	nop
 8008d50:	20001fc0 	.word	0x20001fc0

08008d54 <__malloc_unlock>:
 8008d54:	4801      	ldr	r0, [pc, #4]	; (8008d5c <__malloc_unlock+0x8>)
 8008d56:	f7ff bf0a 	b.w	8008b6e <__retarget_lock_release_recursive>
 8008d5a:	bf00      	nop
 8008d5c:	20001fc0 	.word	0x20001fc0

08008d60 <__sfputc_r>:
 8008d60:	6893      	ldr	r3, [r2, #8]
 8008d62:	3b01      	subs	r3, #1
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	b410      	push	{r4}
 8008d68:	6093      	str	r3, [r2, #8]
 8008d6a:	da08      	bge.n	8008d7e <__sfputc_r+0x1e>
 8008d6c:	6994      	ldr	r4, [r2, #24]
 8008d6e:	42a3      	cmp	r3, r4
 8008d70:	db01      	blt.n	8008d76 <__sfputc_r+0x16>
 8008d72:	290a      	cmp	r1, #10
 8008d74:	d103      	bne.n	8008d7e <__sfputc_r+0x1e>
 8008d76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d7a:	f000 bb73 	b.w	8009464 <__swbuf_r>
 8008d7e:	6813      	ldr	r3, [r2, #0]
 8008d80:	1c58      	adds	r0, r3, #1
 8008d82:	6010      	str	r0, [r2, #0]
 8008d84:	7019      	strb	r1, [r3, #0]
 8008d86:	4608      	mov	r0, r1
 8008d88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d8c:	4770      	bx	lr

08008d8e <__sfputs_r>:
 8008d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d90:	4606      	mov	r6, r0
 8008d92:	460f      	mov	r7, r1
 8008d94:	4614      	mov	r4, r2
 8008d96:	18d5      	adds	r5, r2, r3
 8008d98:	42ac      	cmp	r4, r5
 8008d9a:	d101      	bne.n	8008da0 <__sfputs_r+0x12>
 8008d9c:	2000      	movs	r0, #0
 8008d9e:	e007      	b.n	8008db0 <__sfputs_r+0x22>
 8008da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008da4:	463a      	mov	r2, r7
 8008da6:	4630      	mov	r0, r6
 8008da8:	f7ff ffda 	bl	8008d60 <__sfputc_r>
 8008dac:	1c43      	adds	r3, r0, #1
 8008dae:	d1f3      	bne.n	8008d98 <__sfputs_r+0xa>
 8008db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008db4 <_vfiprintf_r>:
 8008db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db8:	460d      	mov	r5, r1
 8008dba:	b09d      	sub	sp, #116	; 0x74
 8008dbc:	4614      	mov	r4, r2
 8008dbe:	4698      	mov	r8, r3
 8008dc0:	4606      	mov	r6, r0
 8008dc2:	b118      	cbz	r0, 8008dcc <_vfiprintf_r+0x18>
 8008dc4:	6a03      	ldr	r3, [r0, #32]
 8008dc6:	b90b      	cbnz	r3, 8008dcc <_vfiprintf_r+0x18>
 8008dc8:	f7ff fdcc 	bl	8008964 <__sinit>
 8008dcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dce:	07d9      	lsls	r1, r3, #31
 8008dd0:	d405      	bmi.n	8008dde <_vfiprintf_r+0x2a>
 8008dd2:	89ab      	ldrh	r3, [r5, #12]
 8008dd4:	059a      	lsls	r2, r3, #22
 8008dd6:	d402      	bmi.n	8008dde <_vfiprintf_r+0x2a>
 8008dd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dda:	f7ff fec7 	bl	8008b6c <__retarget_lock_acquire_recursive>
 8008dde:	89ab      	ldrh	r3, [r5, #12]
 8008de0:	071b      	lsls	r3, r3, #28
 8008de2:	d501      	bpl.n	8008de8 <_vfiprintf_r+0x34>
 8008de4:	692b      	ldr	r3, [r5, #16]
 8008de6:	b99b      	cbnz	r3, 8008e10 <_vfiprintf_r+0x5c>
 8008de8:	4629      	mov	r1, r5
 8008dea:	4630      	mov	r0, r6
 8008dec:	f000 fb78 	bl	80094e0 <__swsetup_r>
 8008df0:	b170      	cbz	r0, 8008e10 <_vfiprintf_r+0x5c>
 8008df2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008df4:	07dc      	lsls	r4, r3, #31
 8008df6:	d504      	bpl.n	8008e02 <_vfiprintf_r+0x4e>
 8008df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dfc:	b01d      	add	sp, #116	; 0x74
 8008dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e02:	89ab      	ldrh	r3, [r5, #12]
 8008e04:	0598      	lsls	r0, r3, #22
 8008e06:	d4f7      	bmi.n	8008df8 <_vfiprintf_r+0x44>
 8008e08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e0a:	f7ff feb0 	bl	8008b6e <__retarget_lock_release_recursive>
 8008e0e:	e7f3      	b.n	8008df8 <_vfiprintf_r+0x44>
 8008e10:	2300      	movs	r3, #0
 8008e12:	9309      	str	r3, [sp, #36]	; 0x24
 8008e14:	2320      	movs	r3, #32
 8008e16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e1e:	2330      	movs	r3, #48	; 0x30
 8008e20:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008fd4 <_vfiprintf_r+0x220>
 8008e24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e28:	f04f 0901 	mov.w	r9, #1
 8008e2c:	4623      	mov	r3, r4
 8008e2e:	469a      	mov	sl, r3
 8008e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e34:	b10a      	cbz	r2, 8008e3a <_vfiprintf_r+0x86>
 8008e36:	2a25      	cmp	r2, #37	; 0x25
 8008e38:	d1f9      	bne.n	8008e2e <_vfiprintf_r+0x7a>
 8008e3a:	ebba 0b04 	subs.w	fp, sl, r4
 8008e3e:	d00b      	beq.n	8008e58 <_vfiprintf_r+0xa4>
 8008e40:	465b      	mov	r3, fp
 8008e42:	4622      	mov	r2, r4
 8008e44:	4629      	mov	r1, r5
 8008e46:	4630      	mov	r0, r6
 8008e48:	f7ff ffa1 	bl	8008d8e <__sfputs_r>
 8008e4c:	3001      	adds	r0, #1
 8008e4e:	f000 80a9 	beq.w	8008fa4 <_vfiprintf_r+0x1f0>
 8008e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e54:	445a      	add	r2, fp
 8008e56:	9209      	str	r2, [sp, #36]	; 0x24
 8008e58:	f89a 3000 	ldrb.w	r3, [sl]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f000 80a1 	beq.w	8008fa4 <_vfiprintf_r+0x1f0>
 8008e62:	2300      	movs	r3, #0
 8008e64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e6c:	f10a 0a01 	add.w	sl, sl, #1
 8008e70:	9304      	str	r3, [sp, #16]
 8008e72:	9307      	str	r3, [sp, #28]
 8008e74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e78:	931a      	str	r3, [sp, #104]	; 0x68
 8008e7a:	4654      	mov	r4, sl
 8008e7c:	2205      	movs	r2, #5
 8008e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e82:	4854      	ldr	r0, [pc, #336]	; (8008fd4 <_vfiprintf_r+0x220>)
 8008e84:	f7f7 f9a4 	bl	80001d0 <memchr>
 8008e88:	9a04      	ldr	r2, [sp, #16]
 8008e8a:	b9d8      	cbnz	r0, 8008ec4 <_vfiprintf_r+0x110>
 8008e8c:	06d1      	lsls	r1, r2, #27
 8008e8e:	bf44      	itt	mi
 8008e90:	2320      	movmi	r3, #32
 8008e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e96:	0713      	lsls	r3, r2, #28
 8008e98:	bf44      	itt	mi
 8008e9a:	232b      	movmi	r3, #43	; 0x2b
 8008e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ea6:	d015      	beq.n	8008ed4 <_vfiprintf_r+0x120>
 8008ea8:	9a07      	ldr	r2, [sp, #28]
 8008eaa:	4654      	mov	r4, sl
 8008eac:	2000      	movs	r0, #0
 8008eae:	f04f 0c0a 	mov.w	ip, #10
 8008eb2:	4621      	mov	r1, r4
 8008eb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008eb8:	3b30      	subs	r3, #48	; 0x30
 8008eba:	2b09      	cmp	r3, #9
 8008ebc:	d94d      	bls.n	8008f5a <_vfiprintf_r+0x1a6>
 8008ebe:	b1b0      	cbz	r0, 8008eee <_vfiprintf_r+0x13a>
 8008ec0:	9207      	str	r2, [sp, #28]
 8008ec2:	e014      	b.n	8008eee <_vfiprintf_r+0x13a>
 8008ec4:	eba0 0308 	sub.w	r3, r0, r8
 8008ec8:	fa09 f303 	lsl.w	r3, r9, r3
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	9304      	str	r3, [sp, #16]
 8008ed0:	46a2      	mov	sl, r4
 8008ed2:	e7d2      	b.n	8008e7a <_vfiprintf_r+0xc6>
 8008ed4:	9b03      	ldr	r3, [sp, #12]
 8008ed6:	1d19      	adds	r1, r3, #4
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	9103      	str	r1, [sp, #12]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	bfbb      	ittet	lt
 8008ee0:	425b      	neglt	r3, r3
 8008ee2:	f042 0202 	orrlt.w	r2, r2, #2
 8008ee6:	9307      	strge	r3, [sp, #28]
 8008ee8:	9307      	strlt	r3, [sp, #28]
 8008eea:	bfb8      	it	lt
 8008eec:	9204      	strlt	r2, [sp, #16]
 8008eee:	7823      	ldrb	r3, [r4, #0]
 8008ef0:	2b2e      	cmp	r3, #46	; 0x2e
 8008ef2:	d10c      	bne.n	8008f0e <_vfiprintf_r+0x15a>
 8008ef4:	7863      	ldrb	r3, [r4, #1]
 8008ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8008ef8:	d134      	bne.n	8008f64 <_vfiprintf_r+0x1b0>
 8008efa:	9b03      	ldr	r3, [sp, #12]
 8008efc:	1d1a      	adds	r2, r3, #4
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	9203      	str	r2, [sp, #12]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	bfb8      	it	lt
 8008f06:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008f0a:	3402      	adds	r4, #2
 8008f0c:	9305      	str	r3, [sp, #20]
 8008f0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008fe4 <_vfiprintf_r+0x230>
 8008f12:	7821      	ldrb	r1, [r4, #0]
 8008f14:	2203      	movs	r2, #3
 8008f16:	4650      	mov	r0, sl
 8008f18:	f7f7 f95a 	bl	80001d0 <memchr>
 8008f1c:	b138      	cbz	r0, 8008f2e <_vfiprintf_r+0x17a>
 8008f1e:	9b04      	ldr	r3, [sp, #16]
 8008f20:	eba0 000a 	sub.w	r0, r0, sl
 8008f24:	2240      	movs	r2, #64	; 0x40
 8008f26:	4082      	lsls	r2, r0
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	3401      	adds	r4, #1
 8008f2c:	9304      	str	r3, [sp, #16]
 8008f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f32:	4829      	ldr	r0, [pc, #164]	; (8008fd8 <_vfiprintf_r+0x224>)
 8008f34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f38:	2206      	movs	r2, #6
 8008f3a:	f7f7 f949 	bl	80001d0 <memchr>
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d03f      	beq.n	8008fc2 <_vfiprintf_r+0x20e>
 8008f42:	4b26      	ldr	r3, [pc, #152]	; (8008fdc <_vfiprintf_r+0x228>)
 8008f44:	bb1b      	cbnz	r3, 8008f8e <_vfiprintf_r+0x1da>
 8008f46:	9b03      	ldr	r3, [sp, #12]
 8008f48:	3307      	adds	r3, #7
 8008f4a:	f023 0307 	bic.w	r3, r3, #7
 8008f4e:	3308      	adds	r3, #8
 8008f50:	9303      	str	r3, [sp, #12]
 8008f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f54:	443b      	add	r3, r7
 8008f56:	9309      	str	r3, [sp, #36]	; 0x24
 8008f58:	e768      	b.n	8008e2c <_vfiprintf_r+0x78>
 8008f5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f5e:	460c      	mov	r4, r1
 8008f60:	2001      	movs	r0, #1
 8008f62:	e7a6      	b.n	8008eb2 <_vfiprintf_r+0xfe>
 8008f64:	2300      	movs	r3, #0
 8008f66:	3401      	adds	r4, #1
 8008f68:	9305      	str	r3, [sp, #20]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	f04f 0c0a 	mov.w	ip, #10
 8008f70:	4620      	mov	r0, r4
 8008f72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f76:	3a30      	subs	r2, #48	; 0x30
 8008f78:	2a09      	cmp	r2, #9
 8008f7a:	d903      	bls.n	8008f84 <_vfiprintf_r+0x1d0>
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d0c6      	beq.n	8008f0e <_vfiprintf_r+0x15a>
 8008f80:	9105      	str	r1, [sp, #20]
 8008f82:	e7c4      	b.n	8008f0e <_vfiprintf_r+0x15a>
 8008f84:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f88:	4604      	mov	r4, r0
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e7f0      	b.n	8008f70 <_vfiprintf_r+0x1bc>
 8008f8e:	ab03      	add	r3, sp, #12
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	462a      	mov	r2, r5
 8008f94:	4b12      	ldr	r3, [pc, #72]	; (8008fe0 <_vfiprintf_r+0x22c>)
 8008f96:	a904      	add	r1, sp, #16
 8008f98:	4630      	mov	r0, r6
 8008f9a:	f3af 8000 	nop.w
 8008f9e:	4607      	mov	r7, r0
 8008fa0:	1c78      	adds	r0, r7, #1
 8008fa2:	d1d6      	bne.n	8008f52 <_vfiprintf_r+0x19e>
 8008fa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fa6:	07d9      	lsls	r1, r3, #31
 8008fa8:	d405      	bmi.n	8008fb6 <_vfiprintf_r+0x202>
 8008faa:	89ab      	ldrh	r3, [r5, #12]
 8008fac:	059a      	lsls	r2, r3, #22
 8008fae:	d402      	bmi.n	8008fb6 <_vfiprintf_r+0x202>
 8008fb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fb2:	f7ff fddc 	bl	8008b6e <__retarget_lock_release_recursive>
 8008fb6:	89ab      	ldrh	r3, [r5, #12]
 8008fb8:	065b      	lsls	r3, r3, #25
 8008fba:	f53f af1d 	bmi.w	8008df8 <_vfiprintf_r+0x44>
 8008fbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fc0:	e71c      	b.n	8008dfc <_vfiprintf_r+0x48>
 8008fc2:	ab03      	add	r3, sp, #12
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	462a      	mov	r2, r5
 8008fc8:	4b05      	ldr	r3, [pc, #20]	; (8008fe0 <_vfiprintf_r+0x22c>)
 8008fca:	a904      	add	r1, sp, #16
 8008fcc:	4630      	mov	r0, r6
 8008fce:	f000 f879 	bl	80090c4 <_printf_i>
 8008fd2:	e7e4      	b.n	8008f9e <_vfiprintf_r+0x1ea>
 8008fd4:	08009788 	.word	0x08009788
 8008fd8:	08009792 	.word	0x08009792
 8008fdc:	00000000 	.word	0x00000000
 8008fe0:	08008d8f 	.word	0x08008d8f
 8008fe4:	0800978e 	.word	0x0800978e

08008fe8 <_printf_common>:
 8008fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fec:	4616      	mov	r6, r2
 8008fee:	4699      	mov	r9, r3
 8008ff0:	688a      	ldr	r2, [r1, #8]
 8008ff2:	690b      	ldr	r3, [r1, #16]
 8008ff4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	bfb8      	it	lt
 8008ffc:	4613      	movlt	r3, r2
 8008ffe:	6033      	str	r3, [r6, #0]
 8009000:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009004:	4607      	mov	r7, r0
 8009006:	460c      	mov	r4, r1
 8009008:	b10a      	cbz	r2, 800900e <_printf_common+0x26>
 800900a:	3301      	adds	r3, #1
 800900c:	6033      	str	r3, [r6, #0]
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	0699      	lsls	r1, r3, #26
 8009012:	bf42      	ittt	mi
 8009014:	6833      	ldrmi	r3, [r6, #0]
 8009016:	3302      	addmi	r3, #2
 8009018:	6033      	strmi	r3, [r6, #0]
 800901a:	6825      	ldr	r5, [r4, #0]
 800901c:	f015 0506 	ands.w	r5, r5, #6
 8009020:	d106      	bne.n	8009030 <_printf_common+0x48>
 8009022:	f104 0a19 	add.w	sl, r4, #25
 8009026:	68e3      	ldr	r3, [r4, #12]
 8009028:	6832      	ldr	r2, [r6, #0]
 800902a:	1a9b      	subs	r3, r3, r2
 800902c:	42ab      	cmp	r3, r5
 800902e:	dc26      	bgt.n	800907e <_printf_common+0x96>
 8009030:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009034:	1e13      	subs	r3, r2, #0
 8009036:	6822      	ldr	r2, [r4, #0]
 8009038:	bf18      	it	ne
 800903a:	2301      	movne	r3, #1
 800903c:	0692      	lsls	r2, r2, #26
 800903e:	d42b      	bmi.n	8009098 <_printf_common+0xb0>
 8009040:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009044:	4649      	mov	r1, r9
 8009046:	4638      	mov	r0, r7
 8009048:	47c0      	blx	r8
 800904a:	3001      	adds	r0, #1
 800904c:	d01e      	beq.n	800908c <_printf_common+0xa4>
 800904e:	6823      	ldr	r3, [r4, #0]
 8009050:	6922      	ldr	r2, [r4, #16]
 8009052:	f003 0306 	and.w	r3, r3, #6
 8009056:	2b04      	cmp	r3, #4
 8009058:	bf02      	ittt	eq
 800905a:	68e5      	ldreq	r5, [r4, #12]
 800905c:	6833      	ldreq	r3, [r6, #0]
 800905e:	1aed      	subeq	r5, r5, r3
 8009060:	68a3      	ldr	r3, [r4, #8]
 8009062:	bf0c      	ite	eq
 8009064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009068:	2500      	movne	r5, #0
 800906a:	4293      	cmp	r3, r2
 800906c:	bfc4      	itt	gt
 800906e:	1a9b      	subgt	r3, r3, r2
 8009070:	18ed      	addgt	r5, r5, r3
 8009072:	2600      	movs	r6, #0
 8009074:	341a      	adds	r4, #26
 8009076:	42b5      	cmp	r5, r6
 8009078:	d11a      	bne.n	80090b0 <_printf_common+0xc8>
 800907a:	2000      	movs	r0, #0
 800907c:	e008      	b.n	8009090 <_printf_common+0xa8>
 800907e:	2301      	movs	r3, #1
 8009080:	4652      	mov	r2, sl
 8009082:	4649      	mov	r1, r9
 8009084:	4638      	mov	r0, r7
 8009086:	47c0      	blx	r8
 8009088:	3001      	adds	r0, #1
 800908a:	d103      	bne.n	8009094 <_printf_common+0xac>
 800908c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009094:	3501      	adds	r5, #1
 8009096:	e7c6      	b.n	8009026 <_printf_common+0x3e>
 8009098:	18e1      	adds	r1, r4, r3
 800909a:	1c5a      	adds	r2, r3, #1
 800909c:	2030      	movs	r0, #48	; 0x30
 800909e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090a2:	4422      	add	r2, r4
 80090a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090ac:	3302      	adds	r3, #2
 80090ae:	e7c7      	b.n	8009040 <_printf_common+0x58>
 80090b0:	2301      	movs	r3, #1
 80090b2:	4622      	mov	r2, r4
 80090b4:	4649      	mov	r1, r9
 80090b6:	4638      	mov	r0, r7
 80090b8:	47c0      	blx	r8
 80090ba:	3001      	adds	r0, #1
 80090bc:	d0e6      	beq.n	800908c <_printf_common+0xa4>
 80090be:	3601      	adds	r6, #1
 80090c0:	e7d9      	b.n	8009076 <_printf_common+0x8e>
	...

080090c4 <_printf_i>:
 80090c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090c8:	7e0f      	ldrb	r7, [r1, #24]
 80090ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090cc:	2f78      	cmp	r7, #120	; 0x78
 80090ce:	4691      	mov	r9, r2
 80090d0:	4680      	mov	r8, r0
 80090d2:	460c      	mov	r4, r1
 80090d4:	469a      	mov	sl, r3
 80090d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80090da:	d807      	bhi.n	80090ec <_printf_i+0x28>
 80090dc:	2f62      	cmp	r7, #98	; 0x62
 80090de:	d80a      	bhi.n	80090f6 <_printf_i+0x32>
 80090e0:	2f00      	cmp	r7, #0
 80090e2:	f000 80d4 	beq.w	800928e <_printf_i+0x1ca>
 80090e6:	2f58      	cmp	r7, #88	; 0x58
 80090e8:	f000 80c0 	beq.w	800926c <_printf_i+0x1a8>
 80090ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090f4:	e03a      	b.n	800916c <_printf_i+0xa8>
 80090f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090fa:	2b15      	cmp	r3, #21
 80090fc:	d8f6      	bhi.n	80090ec <_printf_i+0x28>
 80090fe:	a101      	add	r1, pc, #4	; (adr r1, 8009104 <_printf_i+0x40>)
 8009100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009104:	0800915d 	.word	0x0800915d
 8009108:	08009171 	.word	0x08009171
 800910c:	080090ed 	.word	0x080090ed
 8009110:	080090ed 	.word	0x080090ed
 8009114:	080090ed 	.word	0x080090ed
 8009118:	080090ed 	.word	0x080090ed
 800911c:	08009171 	.word	0x08009171
 8009120:	080090ed 	.word	0x080090ed
 8009124:	080090ed 	.word	0x080090ed
 8009128:	080090ed 	.word	0x080090ed
 800912c:	080090ed 	.word	0x080090ed
 8009130:	08009275 	.word	0x08009275
 8009134:	0800919d 	.word	0x0800919d
 8009138:	0800922f 	.word	0x0800922f
 800913c:	080090ed 	.word	0x080090ed
 8009140:	080090ed 	.word	0x080090ed
 8009144:	08009297 	.word	0x08009297
 8009148:	080090ed 	.word	0x080090ed
 800914c:	0800919d 	.word	0x0800919d
 8009150:	080090ed 	.word	0x080090ed
 8009154:	080090ed 	.word	0x080090ed
 8009158:	08009237 	.word	0x08009237
 800915c:	682b      	ldr	r3, [r5, #0]
 800915e:	1d1a      	adds	r2, r3, #4
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	602a      	str	r2, [r5, #0]
 8009164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009168:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800916c:	2301      	movs	r3, #1
 800916e:	e09f      	b.n	80092b0 <_printf_i+0x1ec>
 8009170:	6820      	ldr	r0, [r4, #0]
 8009172:	682b      	ldr	r3, [r5, #0]
 8009174:	0607      	lsls	r7, r0, #24
 8009176:	f103 0104 	add.w	r1, r3, #4
 800917a:	6029      	str	r1, [r5, #0]
 800917c:	d501      	bpl.n	8009182 <_printf_i+0xbe>
 800917e:	681e      	ldr	r6, [r3, #0]
 8009180:	e003      	b.n	800918a <_printf_i+0xc6>
 8009182:	0646      	lsls	r6, r0, #25
 8009184:	d5fb      	bpl.n	800917e <_printf_i+0xba>
 8009186:	f9b3 6000 	ldrsh.w	r6, [r3]
 800918a:	2e00      	cmp	r6, #0
 800918c:	da03      	bge.n	8009196 <_printf_i+0xd2>
 800918e:	232d      	movs	r3, #45	; 0x2d
 8009190:	4276      	negs	r6, r6
 8009192:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009196:	485a      	ldr	r0, [pc, #360]	; (8009300 <_printf_i+0x23c>)
 8009198:	230a      	movs	r3, #10
 800919a:	e012      	b.n	80091c2 <_printf_i+0xfe>
 800919c:	682b      	ldr	r3, [r5, #0]
 800919e:	6820      	ldr	r0, [r4, #0]
 80091a0:	1d19      	adds	r1, r3, #4
 80091a2:	6029      	str	r1, [r5, #0]
 80091a4:	0605      	lsls	r5, r0, #24
 80091a6:	d501      	bpl.n	80091ac <_printf_i+0xe8>
 80091a8:	681e      	ldr	r6, [r3, #0]
 80091aa:	e002      	b.n	80091b2 <_printf_i+0xee>
 80091ac:	0641      	lsls	r1, r0, #25
 80091ae:	d5fb      	bpl.n	80091a8 <_printf_i+0xe4>
 80091b0:	881e      	ldrh	r6, [r3, #0]
 80091b2:	4853      	ldr	r0, [pc, #332]	; (8009300 <_printf_i+0x23c>)
 80091b4:	2f6f      	cmp	r7, #111	; 0x6f
 80091b6:	bf0c      	ite	eq
 80091b8:	2308      	moveq	r3, #8
 80091ba:	230a      	movne	r3, #10
 80091bc:	2100      	movs	r1, #0
 80091be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091c2:	6865      	ldr	r5, [r4, #4]
 80091c4:	60a5      	str	r5, [r4, #8]
 80091c6:	2d00      	cmp	r5, #0
 80091c8:	bfa2      	ittt	ge
 80091ca:	6821      	ldrge	r1, [r4, #0]
 80091cc:	f021 0104 	bicge.w	r1, r1, #4
 80091d0:	6021      	strge	r1, [r4, #0]
 80091d2:	b90e      	cbnz	r6, 80091d8 <_printf_i+0x114>
 80091d4:	2d00      	cmp	r5, #0
 80091d6:	d04b      	beq.n	8009270 <_printf_i+0x1ac>
 80091d8:	4615      	mov	r5, r2
 80091da:	fbb6 f1f3 	udiv	r1, r6, r3
 80091de:	fb03 6711 	mls	r7, r3, r1, r6
 80091e2:	5dc7      	ldrb	r7, [r0, r7]
 80091e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80091e8:	4637      	mov	r7, r6
 80091ea:	42bb      	cmp	r3, r7
 80091ec:	460e      	mov	r6, r1
 80091ee:	d9f4      	bls.n	80091da <_printf_i+0x116>
 80091f0:	2b08      	cmp	r3, #8
 80091f2:	d10b      	bne.n	800920c <_printf_i+0x148>
 80091f4:	6823      	ldr	r3, [r4, #0]
 80091f6:	07de      	lsls	r6, r3, #31
 80091f8:	d508      	bpl.n	800920c <_printf_i+0x148>
 80091fa:	6923      	ldr	r3, [r4, #16]
 80091fc:	6861      	ldr	r1, [r4, #4]
 80091fe:	4299      	cmp	r1, r3
 8009200:	bfde      	ittt	le
 8009202:	2330      	movle	r3, #48	; 0x30
 8009204:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009208:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800920c:	1b52      	subs	r2, r2, r5
 800920e:	6122      	str	r2, [r4, #16]
 8009210:	f8cd a000 	str.w	sl, [sp]
 8009214:	464b      	mov	r3, r9
 8009216:	aa03      	add	r2, sp, #12
 8009218:	4621      	mov	r1, r4
 800921a:	4640      	mov	r0, r8
 800921c:	f7ff fee4 	bl	8008fe8 <_printf_common>
 8009220:	3001      	adds	r0, #1
 8009222:	d14a      	bne.n	80092ba <_printf_i+0x1f6>
 8009224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009228:	b004      	add	sp, #16
 800922a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800922e:	6823      	ldr	r3, [r4, #0]
 8009230:	f043 0320 	orr.w	r3, r3, #32
 8009234:	6023      	str	r3, [r4, #0]
 8009236:	4833      	ldr	r0, [pc, #204]	; (8009304 <_printf_i+0x240>)
 8009238:	2778      	movs	r7, #120	; 0x78
 800923a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800923e:	6823      	ldr	r3, [r4, #0]
 8009240:	6829      	ldr	r1, [r5, #0]
 8009242:	061f      	lsls	r7, r3, #24
 8009244:	f851 6b04 	ldr.w	r6, [r1], #4
 8009248:	d402      	bmi.n	8009250 <_printf_i+0x18c>
 800924a:	065f      	lsls	r7, r3, #25
 800924c:	bf48      	it	mi
 800924e:	b2b6      	uxthmi	r6, r6
 8009250:	07df      	lsls	r7, r3, #31
 8009252:	bf48      	it	mi
 8009254:	f043 0320 	orrmi.w	r3, r3, #32
 8009258:	6029      	str	r1, [r5, #0]
 800925a:	bf48      	it	mi
 800925c:	6023      	strmi	r3, [r4, #0]
 800925e:	b91e      	cbnz	r6, 8009268 <_printf_i+0x1a4>
 8009260:	6823      	ldr	r3, [r4, #0]
 8009262:	f023 0320 	bic.w	r3, r3, #32
 8009266:	6023      	str	r3, [r4, #0]
 8009268:	2310      	movs	r3, #16
 800926a:	e7a7      	b.n	80091bc <_printf_i+0xf8>
 800926c:	4824      	ldr	r0, [pc, #144]	; (8009300 <_printf_i+0x23c>)
 800926e:	e7e4      	b.n	800923a <_printf_i+0x176>
 8009270:	4615      	mov	r5, r2
 8009272:	e7bd      	b.n	80091f0 <_printf_i+0x12c>
 8009274:	682b      	ldr	r3, [r5, #0]
 8009276:	6826      	ldr	r6, [r4, #0]
 8009278:	6961      	ldr	r1, [r4, #20]
 800927a:	1d18      	adds	r0, r3, #4
 800927c:	6028      	str	r0, [r5, #0]
 800927e:	0635      	lsls	r5, r6, #24
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	d501      	bpl.n	8009288 <_printf_i+0x1c4>
 8009284:	6019      	str	r1, [r3, #0]
 8009286:	e002      	b.n	800928e <_printf_i+0x1ca>
 8009288:	0670      	lsls	r0, r6, #25
 800928a:	d5fb      	bpl.n	8009284 <_printf_i+0x1c0>
 800928c:	8019      	strh	r1, [r3, #0]
 800928e:	2300      	movs	r3, #0
 8009290:	6123      	str	r3, [r4, #16]
 8009292:	4615      	mov	r5, r2
 8009294:	e7bc      	b.n	8009210 <_printf_i+0x14c>
 8009296:	682b      	ldr	r3, [r5, #0]
 8009298:	1d1a      	adds	r2, r3, #4
 800929a:	602a      	str	r2, [r5, #0]
 800929c:	681d      	ldr	r5, [r3, #0]
 800929e:	6862      	ldr	r2, [r4, #4]
 80092a0:	2100      	movs	r1, #0
 80092a2:	4628      	mov	r0, r5
 80092a4:	f7f6 ff94 	bl	80001d0 <memchr>
 80092a8:	b108      	cbz	r0, 80092ae <_printf_i+0x1ea>
 80092aa:	1b40      	subs	r0, r0, r5
 80092ac:	6060      	str	r0, [r4, #4]
 80092ae:	6863      	ldr	r3, [r4, #4]
 80092b0:	6123      	str	r3, [r4, #16]
 80092b2:	2300      	movs	r3, #0
 80092b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092b8:	e7aa      	b.n	8009210 <_printf_i+0x14c>
 80092ba:	6923      	ldr	r3, [r4, #16]
 80092bc:	462a      	mov	r2, r5
 80092be:	4649      	mov	r1, r9
 80092c0:	4640      	mov	r0, r8
 80092c2:	47d0      	blx	sl
 80092c4:	3001      	adds	r0, #1
 80092c6:	d0ad      	beq.n	8009224 <_printf_i+0x160>
 80092c8:	6823      	ldr	r3, [r4, #0]
 80092ca:	079b      	lsls	r3, r3, #30
 80092cc:	d413      	bmi.n	80092f6 <_printf_i+0x232>
 80092ce:	68e0      	ldr	r0, [r4, #12]
 80092d0:	9b03      	ldr	r3, [sp, #12]
 80092d2:	4298      	cmp	r0, r3
 80092d4:	bfb8      	it	lt
 80092d6:	4618      	movlt	r0, r3
 80092d8:	e7a6      	b.n	8009228 <_printf_i+0x164>
 80092da:	2301      	movs	r3, #1
 80092dc:	4632      	mov	r2, r6
 80092de:	4649      	mov	r1, r9
 80092e0:	4640      	mov	r0, r8
 80092e2:	47d0      	blx	sl
 80092e4:	3001      	adds	r0, #1
 80092e6:	d09d      	beq.n	8009224 <_printf_i+0x160>
 80092e8:	3501      	adds	r5, #1
 80092ea:	68e3      	ldr	r3, [r4, #12]
 80092ec:	9903      	ldr	r1, [sp, #12]
 80092ee:	1a5b      	subs	r3, r3, r1
 80092f0:	42ab      	cmp	r3, r5
 80092f2:	dcf2      	bgt.n	80092da <_printf_i+0x216>
 80092f4:	e7eb      	b.n	80092ce <_printf_i+0x20a>
 80092f6:	2500      	movs	r5, #0
 80092f8:	f104 0619 	add.w	r6, r4, #25
 80092fc:	e7f5      	b.n	80092ea <_printf_i+0x226>
 80092fe:	bf00      	nop
 8009300:	08009799 	.word	0x08009799
 8009304:	080097aa 	.word	0x080097aa

08009308 <__sflush_r>:
 8009308:	898a      	ldrh	r2, [r1, #12]
 800930a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800930e:	4605      	mov	r5, r0
 8009310:	0710      	lsls	r0, r2, #28
 8009312:	460c      	mov	r4, r1
 8009314:	d458      	bmi.n	80093c8 <__sflush_r+0xc0>
 8009316:	684b      	ldr	r3, [r1, #4]
 8009318:	2b00      	cmp	r3, #0
 800931a:	dc05      	bgt.n	8009328 <__sflush_r+0x20>
 800931c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800931e:	2b00      	cmp	r3, #0
 8009320:	dc02      	bgt.n	8009328 <__sflush_r+0x20>
 8009322:	2000      	movs	r0, #0
 8009324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009328:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800932a:	2e00      	cmp	r6, #0
 800932c:	d0f9      	beq.n	8009322 <__sflush_r+0x1a>
 800932e:	2300      	movs	r3, #0
 8009330:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009334:	682f      	ldr	r7, [r5, #0]
 8009336:	6a21      	ldr	r1, [r4, #32]
 8009338:	602b      	str	r3, [r5, #0]
 800933a:	d032      	beq.n	80093a2 <__sflush_r+0x9a>
 800933c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800933e:	89a3      	ldrh	r3, [r4, #12]
 8009340:	075a      	lsls	r2, r3, #29
 8009342:	d505      	bpl.n	8009350 <__sflush_r+0x48>
 8009344:	6863      	ldr	r3, [r4, #4]
 8009346:	1ac0      	subs	r0, r0, r3
 8009348:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800934a:	b10b      	cbz	r3, 8009350 <__sflush_r+0x48>
 800934c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800934e:	1ac0      	subs	r0, r0, r3
 8009350:	2300      	movs	r3, #0
 8009352:	4602      	mov	r2, r0
 8009354:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009356:	6a21      	ldr	r1, [r4, #32]
 8009358:	4628      	mov	r0, r5
 800935a:	47b0      	blx	r6
 800935c:	1c43      	adds	r3, r0, #1
 800935e:	89a3      	ldrh	r3, [r4, #12]
 8009360:	d106      	bne.n	8009370 <__sflush_r+0x68>
 8009362:	6829      	ldr	r1, [r5, #0]
 8009364:	291d      	cmp	r1, #29
 8009366:	d82b      	bhi.n	80093c0 <__sflush_r+0xb8>
 8009368:	4a29      	ldr	r2, [pc, #164]	; (8009410 <__sflush_r+0x108>)
 800936a:	410a      	asrs	r2, r1
 800936c:	07d6      	lsls	r6, r2, #31
 800936e:	d427      	bmi.n	80093c0 <__sflush_r+0xb8>
 8009370:	2200      	movs	r2, #0
 8009372:	6062      	str	r2, [r4, #4]
 8009374:	04d9      	lsls	r1, r3, #19
 8009376:	6922      	ldr	r2, [r4, #16]
 8009378:	6022      	str	r2, [r4, #0]
 800937a:	d504      	bpl.n	8009386 <__sflush_r+0x7e>
 800937c:	1c42      	adds	r2, r0, #1
 800937e:	d101      	bne.n	8009384 <__sflush_r+0x7c>
 8009380:	682b      	ldr	r3, [r5, #0]
 8009382:	b903      	cbnz	r3, 8009386 <__sflush_r+0x7e>
 8009384:	6560      	str	r0, [r4, #84]	; 0x54
 8009386:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009388:	602f      	str	r7, [r5, #0]
 800938a:	2900      	cmp	r1, #0
 800938c:	d0c9      	beq.n	8009322 <__sflush_r+0x1a>
 800938e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009392:	4299      	cmp	r1, r3
 8009394:	d002      	beq.n	800939c <__sflush_r+0x94>
 8009396:	4628      	mov	r0, r5
 8009398:	f7ff fbea 	bl	8008b70 <_free_r>
 800939c:	2000      	movs	r0, #0
 800939e:	6360      	str	r0, [r4, #52]	; 0x34
 80093a0:	e7c0      	b.n	8009324 <__sflush_r+0x1c>
 80093a2:	2301      	movs	r3, #1
 80093a4:	4628      	mov	r0, r5
 80093a6:	47b0      	blx	r6
 80093a8:	1c41      	adds	r1, r0, #1
 80093aa:	d1c8      	bne.n	800933e <__sflush_r+0x36>
 80093ac:	682b      	ldr	r3, [r5, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d0c5      	beq.n	800933e <__sflush_r+0x36>
 80093b2:	2b1d      	cmp	r3, #29
 80093b4:	d001      	beq.n	80093ba <__sflush_r+0xb2>
 80093b6:	2b16      	cmp	r3, #22
 80093b8:	d101      	bne.n	80093be <__sflush_r+0xb6>
 80093ba:	602f      	str	r7, [r5, #0]
 80093bc:	e7b1      	b.n	8009322 <__sflush_r+0x1a>
 80093be:	89a3      	ldrh	r3, [r4, #12]
 80093c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093c4:	81a3      	strh	r3, [r4, #12]
 80093c6:	e7ad      	b.n	8009324 <__sflush_r+0x1c>
 80093c8:	690f      	ldr	r7, [r1, #16]
 80093ca:	2f00      	cmp	r7, #0
 80093cc:	d0a9      	beq.n	8009322 <__sflush_r+0x1a>
 80093ce:	0793      	lsls	r3, r2, #30
 80093d0:	680e      	ldr	r6, [r1, #0]
 80093d2:	bf08      	it	eq
 80093d4:	694b      	ldreq	r3, [r1, #20]
 80093d6:	600f      	str	r7, [r1, #0]
 80093d8:	bf18      	it	ne
 80093da:	2300      	movne	r3, #0
 80093dc:	eba6 0807 	sub.w	r8, r6, r7
 80093e0:	608b      	str	r3, [r1, #8]
 80093e2:	f1b8 0f00 	cmp.w	r8, #0
 80093e6:	dd9c      	ble.n	8009322 <__sflush_r+0x1a>
 80093e8:	6a21      	ldr	r1, [r4, #32]
 80093ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093ec:	4643      	mov	r3, r8
 80093ee:	463a      	mov	r2, r7
 80093f0:	4628      	mov	r0, r5
 80093f2:	47b0      	blx	r6
 80093f4:	2800      	cmp	r0, #0
 80093f6:	dc06      	bgt.n	8009406 <__sflush_r+0xfe>
 80093f8:	89a3      	ldrh	r3, [r4, #12]
 80093fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093fe:	81a3      	strh	r3, [r4, #12]
 8009400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009404:	e78e      	b.n	8009324 <__sflush_r+0x1c>
 8009406:	4407      	add	r7, r0
 8009408:	eba8 0800 	sub.w	r8, r8, r0
 800940c:	e7e9      	b.n	80093e2 <__sflush_r+0xda>
 800940e:	bf00      	nop
 8009410:	dfbffffe 	.word	0xdfbffffe

08009414 <_fflush_r>:
 8009414:	b538      	push	{r3, r4, r5, lr}
 8009416:	690b      	ldr	r3, [r1, #16]
 8009418:	4605      	mov	r5, r0
 800941a:	460c      	mov	r4, r1
 800941c:	b913      	cbnz	r3, 8009424 <_fflush_r+0x10>
 800941e:	2500      	movs	r5, #0
 8009420:	4628      	mov	r0, r5
 8009422:	bd38      	pop	{r3, r4, r5, pc}
 8009424:	b118      	cbz	r0, 800942e <_fflush_r+0x1a>
 8009426:	6a03      	ldr	r3, [r0, #32]
 8009428:	b90b      	cbnz	r3, 800942e <_fflush_r+0x1a>
 800942a:	f7ff fa9b 	bl	8008964 <__sinit>
 800942e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d0f3      	beq.n	800941e <_fflush_r+0xa>
 8009436:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009438:	07d0      	lsls	r0, r2, #31
 800943a:	d404      	bmi.n	8009446 <_fflush_r+0x32>
 800943c:	0599      	lsls	r1, r3, #22
 800943e:	d402      	bmi.n	8009446 <_fflush_r+0x32>
 8009440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009442:	f7ff fb93 	bl	8008b6c <__retarget_lock_acquire_recursive>
 8009446:	4628      	mov	r0, r5
 8009448:	4621      	mov	r1, r4
 800944a:	f7ff ff5d 	bl	8009308 <__sflush_r>
 800944e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009450:	07da      	lsls	r2, r3, #31
 8009452:	4605      	mov	r5, r0
 8009454:	d4e4      	bmi.n	8009420 <_fflush_r+0xc>
 8009456:	89a3      	ldrh	r3, [r4, #12]
 8009458:	059b      	lsls	r3, r3, #22
 800945a:	d4e1      	bmi.n	8009420 <_fflush_r+0xc>
 800945c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800945e:	f7ff fb86 	bl	8008b6e <__retarget_lock_release_recursive>
 8009462:	e7dd      	b.n	8009420 <_fflush_r+0xc>

08009464 <__swbuf_r>:
 8009464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009466:	460e      	mov	r6, r1
 8009468:	4614      	mov	r4, r2
 800946a:	4605      	mov	r5, r0
 800946c:	b118      	cbz	r0, 8009476 <__swbuf_r+0x12>
 800946e:	6a03      	ldr	r3, [r0, #32]
 8009470:	b90b      	cbnz	r3, 8009476 <__swbuf_r+0x12>
 8009472:	f7ff fa77 	bl	8008964 <__sinit>
 8009476:	69a3      	ldr	r3, [r4, #24]
 8009478:	60a3      	str	r3, [r4, #8]
 800947a:	89a3      	ldrh	r3, [r4, #12]
 800947c:	071a      	lsls	r2, r3, #28
 800947e:	d525      	bpl.n	80094cc <__swbuf_r+0x68>
 8009480:	6923      	ldr	r3, [r4, #16]
 8009482:	b31b      	cbz	r3, 80094cc <__swbuf_r+0x68>
 8009484:	6823      	ldr	r3, [r4, #0]
 8009486:	6922      	ldr	r2, [r4, #16]
 8009488:	1a98      	subs	r0, r3, r2
 800948a:	6963      	ldr	r3, [r4, #20]
 800948c:	b2f6      	uxtb	r6, r6
 800948e:	4283      	cmp	r3, r0
 8009490:	4637      	mov	r7, r6
 8009492:	dc04      	bgt.n	800949e <__swbuf_r+0x3a>
 8009494:	4621      	mov	r1, r4
 8009496:	4628      	mov	r0, r5
 8009498:	f7ff ffbc 	bl	8009414 <_fflush_r>
 800949c:	b9e0      	cbnz	r0, 80094d8 <__swbuf_r+0x74>
 800949e:	68a3      	ldr	r3, [r4, #8]
 80094a0:	3b01      	subs	r3, #1
 80094a2:	60a3      	str	r3, [r4, #8]
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	1c5a      	adds	r2, r3, #1
 80094a8:	6022      	str	r2, [r4, #0]
 80094aa:	701e      	strb	r6, [r3, #0]
 80094ac:	6962      	ldr	r2, [r4, #20]
 80094ae:	1c43      	adds	r3, r0, #1
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d004      	beq.n	80094be <__swbuf_r+0x5a>
 80094b4:	89a3      	ldrh	r3, [r4, #12]
 80094b6:	07db      	lsls	r3, r3, #31
 80094b8:	d506      	bpl.n	80094c8 <__swbuf_r+0x64>
 80094ba:	2e0a      	cmp	r6, #10
 80094bc:	d104      	bne.n	80094c8 <__swbuf_r+0x64>
 80094be:	4621      	mov	r1, r4
 80094c0:	4628      	mov	r0, r5
 80094c2:	f7ff ffa7 	bl	8009414 <_fflush_r>
 80094c6:	b938      	cbnz	r0, 80094d8 <__swbuf_r+0x74>
 80094c8:	4638      	mov	r0, r7
 80094ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094cc:	4621      	mov	r1, r4
 80094ce:	4628      	mov	r0, r5
 80094d0:	f000 f806 	bl	80094e0 <__swsetup_r>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d0d5      	beq.n	8009484 <__swbuf_r+0x20>
 80094d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80094dc:	e7f4      	b.n	80094c8 <__swbuf_r+0x64>
	...

080094e0 <__swsetup_r>:
 80094e0:	b538      	push	{r3, r4, r5, lr}
 80094e2:	4b2a      	ldr	r3, [pc, #168]	; (800958c <__swsetup_r+0xac>)
 80094e4:	4605      	mov	r5, r0
 80094e6:	6818      	ldr	r0, [r3, #0]
 80094e8:	460c      	mov	r4, r1
 80094ea:	b118      	cbz	r0, 80094f4 <__swsetup_r+0x14>
 80094ec:	6a03      	ldr	r3, [r0, #32]
 80094ee:	b90b      	cbnz	r3, 80094f4 <__swsetup_r+0x14>
 80094f0:	f7ff fa38 	bl	8008964 <__sinit>
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094fa:	0718      	lsls	r0, r3, #28
 80094fc:	d422      	bmi.n	8009544 <__swsetup_r+0x64>
 80094fe:	06d9      	lsls	r1, r3, #27
 8009500:	d407      	bmi.n	8009512 <__swsetup_r+0x32>
 8009502:	2309      	movs	r3, #9
 8009504:	602b      	str	r3, [r5, #0]
 8009506:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800950a:	81a3      	strh	r3, [r4, #12]
 800950c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009510:	e034      	b.n	800957c <__swsetup_r+0x9c>
 8009512:	0758      	lsls	r0, r3, #29
 8009514:	d512      	bpl.n	800953c <__swsetup_r+0x5c>
 8009516:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009518:	b141      	cbz	r1, 800952c <__swsetup_r+0x4c>
 800951a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800951e:	4299      	cmp	r1, r3
 8009520:	d002      	beq.n	8009528 <__swsetup_r+0x48>
 8009522:	4628      	mov	r0, r5
 8009524:	f7ff fb24 	bl	8008b70 <_free_r>
 8009528:	2300      	movs	r3, #0
 800952a:	6363      	str	r3, [r4, #52]	; 0x34
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009532:	81a3      	strh	r3, [r4, #12]
 8009534:	2300      	movs	r3, #0
 8009536:	6063      	str	r3, [r4, #4]
 8009538:	6923      	ldr	r3, [r4, #16]
 800953a:	6023      	str	r3, [r4, #0]
 800953c:	89a3      	ldrh	r3, [r4, #12]
 800953e:	f043 0308 	orr.w	r3, r3, #8
 8009542:	81a3      	strh	r3, [r4, #12]
 8009544:	6923      	ldr	r3, [r4, #16]
 8009546:	b94b      	cbnz	r3, 800955c <__swsetup_r+0x7c>
 8009548:	89a3      	ldrh	r3, [r4, #12]
 800954a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800954e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009552:	d003      	beq.n	800955c <__swsetup_r+0x7c>
 8009554:	4621      	mov	r1, r4
 8009556:	4628      	mov	r0, r5
 8009558:	f000 f850 	bl	80095fc <__smakebuf_r>
 800955c:	89a0      	ldrh	r0, [r4, #12]
 800955e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009562:	f010 0301 	ands.w	r3, r0, #1
 8009566:	d00a      	beq.n	800957e <__swsetup_r+0x9e>
 8009568:	2300      	movs	r3, #0
 800956a:	60a3      	str	r3, [r4, #8]
 800956c:	6963      	ldr	r3, [r4, #20]
 800956e:	425b      	negs	r3, r3
 8009570:	61a3      	str	r3, [r4, #24]
 8009572:	6923      	ldr	r3, [r4, #16]
 8009574:	b943      	cbnz	r3, 8009588 <__swsetup_r+0xa8>
 8009576:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800957a:	d1c4      	bne.n	8009506 <__swsetup_r+0x26>
 800957c:	bd38      	pop	{r3, r4, r5, pc}
 800957e:	0781      	lsls	r1, r0, #30
 8009580:	bf58      	it	pl
 8009582:	6963      	ldrpl	r3, [r4, #20]
 8009584:	60a3      	str	r3, [r4, #8]
 8009586:	e7f4      	b.n	8009572 <__swsetup_r+0x92>
 8009588:	2000      	movs	r0, #0
 800958a:	e7f7      	b.n	800957c <__swsetup_r+0x9c>
 800958c:	20000154 	.word	0x20000154

08009590 <_sbrk_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	4d06      	ldr	r5, [pc, #24]	; (80095ac <_sbrk_r+0x1c>)
 8009594:	2300      	movs	r3, #0
 8009596:	4604      	mov	r4, r0
 8009598:	4608      	mov	r0, r1
 800959a:	602b      	str	r3, [r5, #0]
 800959c:	f7f7 fd7a 	bl	8001094 <_sbrk>
 80095a0:	1c43      	adds	r3, r0, #1
 80095a2:	d102      	bne.n	80095aa <_sbrk_r+0x1a>
 80095a4:	682b      	ldr	r3, [r5, #0]
 80095a6:	b103      	cbz	r3, 80095aa <_sbrk_r+0x1a>
 80095a8:	6023      	str	r3, [r4, #0]
 80095aa:	bd38      	pop	{r3, r4, r5, pc}
 80095ac:	20001fbc 	.word	0x20001fbc

080095b0 <__swhatbuf_r>:
 80095b0:	b570      	push	{r4, r5, r6, lr}
 80095b2:	460c      	mov	r4, r1
 80095b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095b8:	2900      	cmp	r1, #0
 80095ba:	b096      	sub	sp, #88	; 0x58
 80095bc:	4615      	mov	r5, r2
 80095be:	461e      	mov	r6, r3
 80095c0:	da0d      	bge.n	80095de <__swhatbuf_r+0x2e>
 80095c2:	89a3      	ldrh	r3, [r4, #12]
 80095c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80095c8:	f04f 0100 	mov.w	r1, #0
 80095cc:	bf0c      	ite	eq
 80095ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80095d2:	2340      	movne	r3, #64	; 0x40
 80095d4:	2000      	movs	r0, #0
 80095d6:	6031      	str	r1, [r6, #0]
 80095d8:	602b      	str	r3, [r5, #0]
 80095da:	b016      	add	sp, #88	; 0x58
 80095dc:	bd70      	pop	{r4, r5, r6, pc}
 80095de:	466a      	mov	r2, sp
 80095e0:	f000 f848 	bl	8009674 <_fstat_r>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	dbec      	blt.n	80095c2 <__swhatbuf_r+0x12>
 80095e8:	9901      	ldr	r1, [sp, #4]
 80095ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80095ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80095f2:	4259      	negs	r1, r3
 80095f4:	4159      	adcs	r1, r3
 80095f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095fa:	e7eb      	b.n	80095d4 <__swhatbuf_r+0x24>

080095fc <__smakebuf_r>:
 80095fc:	898b      	ldrh	r3, [r1, #12]
 80095fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009600:	079d      	lsls	r5, r3, #30
 8009602:	4606      	mov	r6, r0
 8009604:	460c      	mov	r4, r1
 8009606:	d507      	bpl.n	8009618 <__smakebuf_r+0x1c>
 8009608:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800960c:	6023      	str	r3, [r4, #0]
 800960e:	6123      	str	r3, [r4, #16]
 8009610:	2301      	movs	r3, #1
 8009612:	6163      	str	r3, [r4, #20]
 8009614:	b002      	add	sp, #8
 8009616:	bd70      	pop	{r4, r5, r6, pc}
 8009618:	ab01      	add	r3, sp, #4
 800961a:	466a      	mov	r2, sp
 800961c:	f7ff ffc8 	bl	80095b0 <__swhatbuf_r>
 8009620:	9900      	ldr	r1, [sp, #0]
 8009622:	4605      	mov	r5, r0
 8009624:	4630      	mov	r0, r6
 8009626:	f7ff fb0f 	bl	8008c48 <_malloc_r>
 800962a:	b948      	cbnz	r0, 8009640 <__smakebuf_r+0x44>
 800962c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009630:	059a      	lsls	r2, r3, #22
 8009632:	d4ef      	bmi.n	8009614 <__smakebuf_r+0x18>
 8009634:	f023 0303 	bic.w	r3, r3, #3
 8009638:	f043 0302 	orr.w	r3, r3, #2
 800963c:	81a3      	strh	r3, [r4, #12]
 800963e:	e7e3      	b.n	8009608 <__smakebuf_r+0xc>
 8009640:	89a3      	ldrh	r3, [r4, #12]
 8009642:	6020      	str	r0, [r4, #0]
 8009644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009648:	81a3      	strh	r3, [r4, #12]
 800964a:	9b00      	ldr	r3, [sp, #0]
 800964c:	6163      	str	r3, [r4, #20]
 800964e:	9b01      	ldr	r3, [sp, #4]
 8009650:	6120      	str	r0, [r4, #16]
 8009652:	b15b      	cbz	r3, 800966c <__smakebuf_r+0x70>
 8009654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009658:	4630      	mov	r0, r6
 800965a:	f000 f81d 	bl	8009698 <_isatty_r>
 800965e:	b128      	cbz	r0, 800966c <__smakebuf_r+0x70>
 8009660:	89a3      	ldrh	r3, [r4, #12]
 8009662:	f023 0303 	bic.w	r3, r3, #3
 8009666:	f043 0301 	orr.w	r3, r3, #1
 800966a:	81a3      	strh	r3, [r4, #12]
 800966c:	89a3      	ldrh	r3, [r4, #12]
 800966e:	431d      	orrs	r5, r3
 8009670:	81a5      	strh	r5, [r4, #12]
 8009672:	e7cf      	b.n	8009614 <__smakebuf_r+0x18>

08009674 <_fstat_r>:
 8009674:	b538      	push	{r3, r4, r5, lr}
 8009676:	4d07      	ldr	r5, [pc, #28]	; (8009694 <_fstat_r+0x20>)
 8009678:	2300      	movs	r3, #0
 800967a:	4604      	mov	r4, r0
 800967c:	4608      	mov	r0, r1
 800967e:	4611      	mov	r1, r2
 8009680:	602b      	str	r3, [r5, #0]
 8009682:	f7f7 fcde 	bl	8001042 <_fstat>
 8009686:	1c43      	adds	r3, r0, #1
 8009688:	d102      	bne.n	8009690 <_fstat_r+0x1c>
 800968a:	682b      	ldr	r3, [r5, #0]
 800968c:	b103      	cbz	r3, 8009690 <_fstat_r+0x1c>
 800968e:	6023      	str	r3, [r4, #0]
 8009690:	bd38      	pop	{r3, r4, r5, pc}
 8009692:	bf00      	nop
 8009694:	20001fbc 	.word	0x20001fbc

08009698 <_isatty_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	4d06      	ldr	r5, [pc, #24]	; (80096b4 <_isatty_r+0x1c>)
 800969c:	2300      	movs	r3, #0
 800969e:	4604      	mov	r4, r0
 80096a0:	4608      	mov	r0, r1
 80096a2:	602b      	str	r3, [r5, #0]
 80096a4:	f7f7 fcdd 	bl	8001062 <_isatty>
 80096a8:	1c43      	adds	r3, r0, #1
 80096aa:	d102      	bne.n	80096b2 <_isatty_r+0x1a>
 80096ac:	682b      	ldr	r3, [r5, #0]
 80096ae:	b103      	cbz	r3, 80096b2 <_isatty_r+0x1a>
 80096b0:	6023      	str	r3, [r4, #0]
 80096b2:	bd38      	pop	{r3, r4, r5, pc}
 80096b4:	20001fbc 	.word	0x20001fbc

080096b8 <_init>:
 80096b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ba:	bf00      	nop
 80096bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096be:	bc08      	pop	{r3}
 80096c0:	469e      	mov	lr, r3
 80096c2:	4770      	bx	lr

080096c4 <_fini>:
 80096c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096c6:	bf00      	nop
 80096c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ca:	bc08      	pop	{r3}
 80096cc:	469e      	mov	lr, r3
 80096ce:	4770      	bx	lr
